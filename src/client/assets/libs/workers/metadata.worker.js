(function (require$$0$6, require$$0$3, http$1, Url$1, require$$0$2, https$1, zlib, require$$0$7, require$$1$4, require$$3, require$$0$5, require$$1$3, require$$0$4, require$$1$5, require$$6, require$$0$8, require$$1$6, require$$1$7, require$$4, require$$0$9, require$$0$a, require$$0$b) {
  'use strict';

  function _arrayLikeToArray(r, a) {
    (null == a || a > r.length) && (a = r.length);
    for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
    return n;
  }
  function _arrayWithHoles(r) {
    if (Array.isArray(r)) return r;
  }
  function _arrayWithoutHoles(r) {
    if (Array.isArray(r)) return _arrayLikeToArray(r);
  }
  function _assertThisInitialized(e) {
    if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return e;
  }
  function asyncGeneratorStep(n, t, e, r, o, a, c) {
    try {
      var i = n[a](c),
        u = i.value;
    } catch (n) {
      return void e(n);
    }
    i.done ? t(u) : Promise.resolve(u).then(r, o);
  }
  function _asyncToGenerator(n) {
    return function () {
      var t = this,
        e = arguments;
      return new Promise(function (r, o) {
        var a = n.apply(t, e);
        function _next(n) {
          asyncGeneratorStep(a, r, o, _next, _throw, "next", n);
        }
        function _throw(n) {
          asyncGeneratorStep(a, r, o, _next, _throw, "throw", n);
        }
        _next(void 0);
      });
    };
  }
  function _callSuper(t, o, e) {
    return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));
  }
  function _classCallCheck(a, n) {
    if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
  }
  function _construct(t, e, r) {
    if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments);
    var o = [null];
    o.push.apply(o, e);
    var p = new (t.bind.apply(t, o))();
    return r && _setPrototypeOf(p, r.prototype), p;
  }
  function _defineProperties(e, r) {
    for (var t = 0; t < r.length; t++) {
      var o = r[t];
      o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);
    }
  }
  function _createClass(e, r, t) {
    return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", {
      writable: !1
    }), e;
  }
  function _createForOfIteratorHelper(r, e) {
    var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (!t) {
      if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e) {
        t && (r = t);
        var n = 0,
          F = function () {};
        return {
          s: F,
          n: function () {
            return n >= r.length ? {
              done: !0
            } : {
              done: !1,
              value: r[n++]
            };
          },
          e: function (r) {
            throw r;
          },
          f: F
        };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var o,
      a = !0,
      u = !1;
    return {
      s: function () {
        t = t.call(r);
      },
      n: function () {
        var r = t.next();
        return a = r.done, r;
      },
      e: function (r) {
        u = !0, o = r;
      },
      f: function () {
        try {
          a || null == t.return || t.return();
        } finally {
          if (u) throw o;
        }
      }
    };
  }
  function _defineProperty(e, r, t) {
    return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
      value: t,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }) : e[r] = t, e;
  }
  function _get() {
    return _get = "undefined" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function (e, t, r) {
      var p = _superPropBase(e, t);
      if (p) {
        var n = Object.getOwnPropertyDescriptor(p, t);
        return n.get ? n.get.call(arguments.length < 3 ? e : r) : n.value;
      }
    }, _get.apply(null, arguments);
  }
  function _getPrototypeOf(t) {
    return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {
      return t.__proto__ || Object.getPrototypeOf(t);
    }, _getPrototypeOf(t);
  }
  function _inherits(t, e) {
    if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
    t.prototype = Object.create(e && e.prototype, {
      constructor: {
        value: t,
        writable: !0,
        configurable: !0
      }
    }), Object.defineProperty(t, "prototype", {
      writable: !1
    }), e && _setPrototypeOf(t, e);
  }
  function _isNativeFunction(t) {
    try {
      return -1 !== Function.toString.call(t).indexOf("[native code]");
    } catch (n) {
      return "function" == typeof t;
    }
  }
  function _isNativeReflectConstruct() {
    try {
      var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    } catch (t) {}
    return (_isNativeReflectConstruct = function () {
      return !!t;
    })();
  }
  function _iterableToArray(r) {
    if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
  }
  function _iterableToArrayLimit(r, l) {
    var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (null != t) {
      var e,
        n,
        i,
        u,
        a = [],
        f = !0,
        o = !1;
      try {
        if (i = (t = t.call(r)).next, 0 === l) {
          if (Object(t) !== t) return;
          f = !1;
        } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
      } catch (r) {
        o = !0, n = r;
      } finally {
        try {
          if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;
        } finally {
          if (o) throw n;
        }
      }
      return a;
    }
  }
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function ownKeys(e, r) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r && (o = o.filter(function (r) {
        return Object.getOwnPropertyDescriptor(e, r).enumerable;
      })), t.push.apply(t, o);
    }
    return t;
  }
  function _objectSpread2(e) {
    for (var r = 1; r < arguments.length; r++) {
      var t = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {
        _defineProperty(e, r, t[r]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
        Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
      });
    }
    return e;
  }
  function _objectWithoutProperties(e, t) {
    if (null == e) return {};
    var o,
      r,
      i = _objectWithoutPropertiesLoose(e, t);
    if (Object.getOwnPropertySymbols) {
      var s = Object.getOwnPropertySymbols(e);
      for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
    }
    return i;
  }
  function _objectWithoutPropertiesLoose(r, e) {
    if (null == r) return {};
    var t = {};
    for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
      if (e.includes(n)) continue;
      t[n] = r[n];
    }
    return t;
  }
  function _possibleConstructorReturn(t, e) {
    if (e && ("object" == typeof e || "function" == typeof e)) return e;
    if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
    return _assertThisInitialized(t);
  }
  function _regeneratorRuntime() {
    _regeneratorRuntime = function () {
      return e;
    };
    var t,
      e = {},
      r = Object.prototype,
      n = r.hasOwnProperty,
      o = Object.defineProperty || function (t, e, r) {
        t[e] = r.value;
      },
      i = "function" == typeof Symbol ? Symbol : {},
      a = i.iterator || "@@iterator",
      c = i.asyncIterator || "@@asyncIterator",
      u = i.toStringTag || "@@toStringTag";
    function define(t, e, r) {
      return Object.defineProperty(t, e, {
        value: r,
        enumerable: !0,
        configurable: !0,
        writable: !0
      }), t[e];
    }
    try {
      define({}, "");
    } catch (t) {
      define = function (t, e, r) {
        return t[e] = r;
      };
    }
    function wrap(t, e, r, n) {
      var i = e && e.prototype instanceof Generator ? e : Generator,
        a = Object.create(i.prototype),
        c = new Context(n || []);
      return o(a, "_invoke", {
        value: makeInvokeMethod(t, r, c)
      }), a;
    }
    function tryCatch(t, e, r) {
      try {
        return {
          type: "normal",
          arg: t.call(e, r)
        };
      } catch (t) {
        return {
          type: "throw",
          arg: t
        };
      }
    }
    e.wrap = wrap;
    var h = "suspendedStart",
      l = "suspendedYield",
      f = "executing",
      s = "completed",
      y = {};
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}
    var p = {};
    define(p, a, function () {
      return this;
    });
    var d = Object.getPrototypeOf,
      v = d && d(d(values([])));
    v && v !== r && n.call(v, a) && (p = v);
    var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
    function defineIteratorMethods(t) {
      ["next", "throw", "return"].forEach(function (e) {
        define(t, e, function (t) {
          return this._invoke(e, t);
        });
      });
    }
    function AsyncIterator(t, e) {
      function invoke(r, o, i, a) {
        var c = tryCatch(t[r], t, o);
        if ("throw" !== c.type) {
          var u = c.arg,
            h = u.value;
          return h && "object" == typeof h && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) {
            invoke("next", t, i, a);
          }, function (t) {
            invoke("throw", t, i, a);
          }) : e.resolve(h).then(function (t) {
            u.value = t, i(u);
          }, function (t) {
            return invoke("throw", t, i, a);
          });
        }
        a(c.arg);
      }
      var r;
      o(this, "_invoke", {
        value: function (t, n) {
          function callInvokeWithMethodAndArg() {
            return new e(function (e, r) {
              invoke(t, n, e, r);
            });
          }
          return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        }
      });
    }
    function makeInvokeMethod(e, r, n) {
      var o = h;
      return function (i, a) {
        if (o === f) throw Error("Generator is already running");
        if (o === s) {
          if ("throw" === i) throw a;
          return {
            value: t,
            done: !0
          };
        }
        for (n.method = i, n.arg = a;;) {
          var c = n.delegate;
          if (c) {
            var u = maybeInvokeDelegate(c, n);
            if (u) {
              if (u === y) continue;
              return u;
            }
          }
          if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) {
            if (o === h) throw o = s, n.arg;
            n.dispatchException(n.arg);
          } else "return" === n.method && n.abrupt("return", n.arg);
          o = f;
          var p = tryCatch(e, r, n);
          if ("normal" === p.type) {
            if (o = n.done ? s : l, p.arg === y) continue;
            return {
              value: p.arg,
              done: n.done
            };
          }
          "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg);
        }
      };
    }
    function maybeInvokeDelegate(e, r) {
      var n = r.method,
        o = e.iterator[n];
      if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y;
      var i = tryCatch(o, e.iterator, r.arg);
      if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y;
      var a = i.arg;
      return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y);
    }
    function pushTryEntry(t) {
      var e = {
        tryLoc: t[0]
      };
      1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);
    }
    function resetTryEntry(t) {
      var e = t.completion || {};
      e.type = "normal", delete e.arg, t.completion = e;
    }
    function Context(t) {
      this.tryEntries = [{
        tryLoc: "root"
      }], t.forEach(pushTryEntry, this), this.reset(!0);
    }
    function values(e) {
      if (e || "" === e) {
        var r = e[a];
        if (r) return r.call(e);
        if ("function" == typeof e.next) return e;
        if (!isNaN(e.length)) {
          var o = -1,
            i = function next() {
              for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;
              return next.value = t, next.done = !0, next;
            };
          return i.next = i;
        }
      }
      throw new TypeError(typeof e + " is not iterable");
    }
    return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", {
      value: GeneratorFunctionPrototype,
      configurable: !0
    }), o(GeneratorFunctionPrototype, "constructor", {
      value: GeneratorFunction,
      configurable: !0
    }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) {
      var e = "function" == typeof t && t.constructor;
      return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name));
    }, e.mark = function (t) {
      return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t;
    }, e.awrap = function (t) {
      return {
        __await: t
      };
    }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {
      return this;
    }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {
      void 0 === i && (i = Promise);
      var a = new AsyncIterator(wrap(t, r, n, o), i);
      return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {
        return t.done ? t.value : a.next();
      });
    }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () {
      return this;
    }), define(g, "toString", function () {
      return "[object Generator]";
    }), e.keys = function (t) {
      var e = Object(t),
        r = [];
      for (var n in e) r.push(n);
      return r.reverse(), function next() {
        for (; r.length;) {
          var t = r.pop();
          if (t in e) return next.value = t, next.done = !1, next;
        }
        return next.done = !0, next;
      };
    }, e.values = values, Context.prototype = {
      constructor: Context,
      reset: function (e) {
        if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);
      },
      stop: function () {
        this.done = !0;
        var t = this.tryEntries[0].completion;
        if ("throw" === t.type) throw t.arg;
        return this.rval;
      },
      dispatchException: function (e) {
        if (this.done) throw e;
        var r = this;
        function handle(n, o) {
          return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o;
        }
        for (var o = this.tryEntries.length - 1; o >= 0; --o) {
          var i = this.tryEntries[o],
            a = i.completion;
          if ("root" === i.tryLoc) return handle("end");
          if (i.tryLoc <= this.prev) {
            var c = n.call(i, "catchLoc"),
              u = n.call(i, "finallyLoc");
            if (c && u) {
              if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
              if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
            } else if (c) {
              if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
            } else {
              if (!u) throw Error("try statement without catch or finally");
              if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
            }
          }
        }
      },
      abrupt: function (t, e) {
        for (var r = this.tryEntries.length - 1; r >= 0; --r) {
          var o = this.tryEntries[r];
          if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) {
            var i = o;
            break;
          }
        }
        i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);
        var a = i ? i.completion : {};
        return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a);
      },
      complete: function (t, e) {
        if ("throw" === t.type) throw t.arg;
        return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y;
      },
      finish: function (t) {
        for (var e = this.tryEntries.length - 1; e >= 0; --e) {
          var r = this.tryEntries[e];
          if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;
        }
      },
      catch: function (t) {
        for (var e = this.tryEntries.length - 1; e >= 0; --e) {
          var r = this.tryEntries[e];
          if (r.tryLoc === t) {
            var n = r.completion;
            if ("throw" === n.type) {
              var o = n.arg;
              resetTryEntry(r);
            }
            return o;
          }
        }
        throw Error("illegal catch attempt");
      },
      delegateYield: function (e, r, n) {
        return this.delegate = {
          iterator: values(e),
          resultName: r,
          nextLoc: n
        }, "next" === this.method && (this.arg = t), y;
      }
    }, e;
  }
  function _setPrototypeOf(t, e) {
    return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {
      return t.__proto__ = e, t;
    }, _setPrototypeOf(t, e);
  }
  function _slicedToArray(r, e) {
    return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();
  }
  function _superPropBase(t, o) {
    for (; !{}.hasOwnProperty.call(t, o) && null !== (t = _getPrototypeOf(t)););
    return t;
  }
  function _toConsumableArray(r) {
    return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();
  }
  function _toPrimitive(t, r) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t);
  }
  function _toPropertyKey(t) {
    var i = _toPrimitive(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _typeof(o) {
    "@babel/helpers - typeof";

    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
      return typeof o;
    } : function (o) {
      return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
    }, _typeof(o);
  }
  function _unsupportedIterableToArray(r, a) {
    if (r) {
      if ("string" == typeof r) return _arrayLikeToArray(r, a);
      var t = {}.toString.call(r).slice(8, -1);
      return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
    }
  }
  function _wrapNativeSuper(t) {
    var r = "function" == typeof Map ? new Map() : void 0;
    return _wrapNativeSuper = function (t) {
      if (null === t || !_isNativeFunction(t)) return t;
      if ("function" != typeof t) throw new TypeError("Super expression must either be null or a function");
      if (void 0 !== r) {
        if (r.has(t)) return r.get(t);
        r.set(t, Wrapper);
      }
      function Wrapper() {
        return _construct(t, arguments, _getPrototypeOf(this).constructor);
      }
      return Wrapper.prototype = Object.create(t.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: !1,
          writable: !0,
          configurable: !0
        }
      }), _setPrototypeOf(Wrapper, t);
    }, _wrapNativeSuper(t);
  }

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function getDefaultExportFromCjs (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  function getAugmentedNamespace(n) {
    if (n.__esModule) return n;
    var f = n.default;
  	if (typeof f == "function") {
  		var a = function a () {
  			if (this instanceof a) {
          return Reflect.construct(f, arguments, this.constructor);
  			}
  			return f.apply(this, arguments);
  		};
  		a.prototype = f.prototype;
    } else a = {};
    Object.defineProperty(a, '__esModule', {value: true});
  	Object.keys(n).forEach(function (k) {
  		var d = Object.getOwnPropertyDescriptor(n, k);
  		Object.defineProperty(a, k, d.get ? d : {
  			enumerable: true,
  			get: function () {
  				return n[k];
  			}
  		});
  	});
  	return a;
  }

  var lib$3 = {};

  var jsforce$2 = {};

  var VERSION$2 = {};

  Object.defineProperty(VERSION$2, "__esModule", {
    value: true
  });
  VERSION$2["default"] = '3.4.1';

  var connection$1 = {};

  var transport$1 = {};

  var request$1 = {};

  var publicApi = {};

  var URL$2 = {exports: {}};

  var conversions = {};
  var lib$2 = conversions;
  function sign(x) {
    return x < 0 ? -1 : 1;
  }
  function evenRound(x) {
    // Round x to the nearest integer, choosing the even integer if it lies halfway between two.
    if (x % 1 === 0.5 && (x & 1) === 0) {
      // [even number].5; round down (i.e. floor)
      return Math.floor(x);
    } else {
      return Math.round(x);
    }
  }
  function createNumberConversion(bitLength, typeOpts) {
    if (!typeOpts.unsigned) {
      --bitLength;
    }
    var lowerBound = typeOpts.unsigned ? 0 : -Math.pow(2, bitLength);
    var upperBound = Math.pow(2, bitLength) - 1;
    var moduloVal = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength) : Math.pow(2, bitLength);
    var moduloBound = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength - 1) : Math.pow(2, bitLength - 1);
    return function (V, opts) {
      if (!opts) opts = {};
      var x = +V;
      if (opts.enforceRange) {
        if (!Number.isFinite(x)) {
          throw new TypeError("Argument is not a finite number");
        }
        x = sign(x) * Math.floor(Math.abs(x));
        if (x < lowerBound || x > upperBound) {
          throw new TypeError("Argument is not in byte range");
        }
        return x;
      }
      if (!isNaN(x) && opts.clamp) {
        x = evenRound(x);
        if (x < lowerBound) x = lowerBound;
        if (x > upperBound) x = upperBound;
        return x;
      }
      if (!Number.isFinite(x) || x === 0) {
        return 0;
      }
      x = sign(x) * Math.floor(Math.abs(x));
      x = x % moduloVal;
      if (!typeOpts.unsigned && x >= moduloBound) {
        return x - moduloVal;
      } else if (typeOpts.unsigned) {
        if (x < 0) {
          x += moduloVal;
        } else if (x === -0) {
          // don't return negative zero
          return 0;
        }
      }
      return x;
    };
  }
  conversions["void"] = function () {
    return undefined;
  };
  conversions["boolean"] = function (val) {
    return !!val;
  };
  conversions["byte"] = createNumberConversion(8, {
    unsigned: false
  });
  conversions["octet"] = createNumberConversion(8, {
    unsigned: true
  });
  conversions["short"] = createNumberConversion(16, {
    unsigned: false
  });
  conversions["unsigned short"] = createNumberConversion(16, {
    unsigned: true
  });
  conversions["long"] = createNumberConversion(32, {
    unsigned: false
  });
  conversions["unsigned long"] = createNumberConversion(32, {
    unsigned: true
  });
  conversions["long long"] = createNumberConversion(32, {
    unsigned: false,
    moduloBitLength: 64
  });
  conversions["unsigned long long"] = createNumberConversion(32, {
    unsigned: true,
    moduloBitLength: 64
  });
  conversions["double"] = function (V) {
    var x = +V;
    if (!Number.isFinite(x)) {
      throw new TypeError("Argument is not a finite floating-point value");
    }
    return x;
  };
  conversions["unrestricted double"] = function (V) {
    var x = +V;
    if (isNaN(x)) {
      throw new TypeError("Argument is NaN");
    }
    return x;
  };

  // not quite valid, but good enough for JS
  conversions["float"] = conversions["double"];
  conversions["unrestricted float"] = conversions["unrestricted double"];
  conversions["DOMString"] = function (V, opts) {
    if (!opts) opts = {};
    if (opts.treatNullAsEmptyString && V === null) {
      return "";
    }
    return String(V);
  };
  conversions["ByteString"] = function (V, opts) {
    var x = String(V);
    var c = undefined;
    for (var i = 0; (c = x.codePointAt(i)) !== undefined; ++i) {
      if (c > 255) {
        throw new TypeError("Argument is not a valid bytestring");
      }
    }
    return x;
  };
  conversions["USVString"] = function (V) {
    var S = String(V);
    var n = S.length;
    var U = [];
    for (var i = 0; i < n; ++i) {
      var c = S.charCodeAt(i);
      if (c < 0xD800 || c > 0xDFFF) {
        U.push(String.fromCodePoint(c));
      } else if (0xDC00 <= c && c <= 0xDFFF) {
        U.push(String.fromCodePoint(0xFFFD));
      } else {
        if (i === n - 1) {
          U.push(String.fromCodePoint(0xFFFD));
        } else {
          var d = S.charCodeAt(i + 1);
          if (0xDC00 <= d && d <= 0xDFFF) {
            var a = c & 0x3FF;
            var b = d & 0x3FF;
            U.push(String.fromCodePoint((2 << 15) + (2 << 9) * a + b));
            ++i;
          } else {
            U.push(String.fromCodePoint(0xFFFD));
          }
        }
      }
    }
    return U.join('');
  };
  conversions["Date"] = function (V, opts) {
    if (!(V instanceof Date)) {
      throw new TypeError("Argument is not a Date object");
    }
    if (isNaN(V)) {
      return undefined;
    }
    return V;
  };
  conversions["RegExp"] = function (V, opts) {
    if (!(V instanceof RegExp)) {
      V = new RegExp(V);
    }
    return V;
  };

  var utils = {exports: {}};

  (function (module) {

    module.exports.mixin = function mixin(target, source) {
      var keys = Object.getOwnPropertyNames(source);
      for (var i = 0; i < keys.length; ++i) {
        Object.defineProperty(target, keys[i], Object.getOwnPropertyDescriptor(source, keys[i]));
      }
    };
    module.exports.wrapperSymbol = Symbol("wrapper");
    module.exports.implSymbol = Symbol("impl");
    module.exports.wrapperForImpl = function (impl) {
      return impl[module.exports.wrapperSymbol];
    };
    module.exports.implForWrapper = function (wrapper) {
      return wrapper[module.exports.implSymbol];
    };
  })(utils);
  var utilsExports = utils.exports;

  var URLImpl = {};

  var urlStateMachine = {exports: {}};

  var tr46 = {};

  var require$$1$2 = [
  	[
  		[
  			0,
  			44
  		],
  		"disallowed_STD3_valid"
  	],
  	[
  		[
  			45,
  			46
  		],
  		"valid"
  	],
  	[
  		[
  			47,
  			47
  		],
  		"disallowed_STD3_valid"
  	],
  	[
  		[
  			48,
  			57
  		],
  		"valid"
  	],
  	[
  		[
  			58,
  			64
  		],
  		"disallowed_STD3_valid"
  	],
  	[
  		[
  			65,
  			65
  		],
  		"mapped",
  		[
  			97
  		]
  	],
  	[
  		[
  			66,
  			66
  		],
  		"mapped",
  		[
  			98
  		]
  	],
  	[
  		[
  			67,
  			67
  		],
  		"mapped",
  		[
  			99
  		]
  	],
  	[
  		[
  			68,
  			68
  		],
  		"mapped",
  		[
  			100
  		]
  	],
  	[
  		[
  			69,
  			69
  		],
  		"mapped",
  		[
  			101
  		]
  	],
  	[
  		[
  			70,
  			70
  		],
  		"mapped",
  		[
  			102
  		]
  	],
  	[
  		[
  			71,
  			71
  		],
  		"mapped",
  		[
  			103
  		]
  	],
  	[
  		[
  			72,
  			72
  		],
  		"mapped",
  		[
  			104
  		]
  	],
  	[
  		[
  			73,
  			73
  		],
  		"mapped",
  		[
  			105
  		]
  	],
  	[
  		[
  			74,
  			74
  		],
  		"mapped",
  		[
  			106
  		]
  	],
  	[
  		[
  			75,
  			75
  		],
  		"mapped",
  		[
  			107
  		]
  	],
  	[
  		[
  			76,
  			76
  		],
  		"mapped",
  		[
  			108
  		]
  	],
  	[
  		[
  			77,
  			77
  		],
  		"mapped",
  		[
  			109
  		]
  	],
  	[
  		[
  			78,
  			78
  		],
  		"mapped",
  		[
  			110
  		]
  	],
  	[
  		[
  			79,
  			79
  		],
  		"mapped",
  		[
  			111
  		]
  	],
  	[
  		[
  			80,
  			80
  		],
  		"mapped",
  		[
  			112
  		]
  	],
  	[
  		[
  			81,
  			81
  		],
  		"mapped",
  		[
  			113
  		]
  	],
  	[
  		[
  			82,
  			82
  		],
  		"mapped",
  		[
  			114
  		]
  	],
  	[
  		[
  			83,
  			83
  		],
  		"mapped",
  		[
  			115
  		]
  	],
  	[
  		[
  			84,
  			84
  		],
  		"mapped",
  		[
  			116
  		]
  	],
  	[
  		[
  			85,
  			85
  		],
  		"mapped",
  		[
  			117
  		]
  	],
  	[
  		[
  			86,
  			86
  		],
  		"mapped",
  		[
  			118
  		]
  	],
  	[
  		[
  			87,
  			87
  		],
  		"mapped",
  		[
  			119
  		]
  	],
  	[
  		[
  			88,
  			88
  		],
  		"mapped",
  		[
  			120
  		]
  	],
  	[
  		[
  			89,
  			89
  		],
  		"mapped",
  		[
  			121
  		]
  	],
  	[
  		[
  			90,
  			90
  		],
  		"mapped",
  		[
  			122
  		]
  	],
  	[
  		[
  			91,
  			96
  		],
  		"disallowed_STD3_valid"
  	],
  	[
  		[
  			97,
  			122
  		],
  		"valid"
  	],
  	[
  		[
  			123,
  			127
  		],
  		"disallowed_STD3_valid"
  	],
  	[
  		[
  			128,
  			159
  		],
  		"disallowed"
  	],
  	[
  		[
  			160,
  			160
  		],
  		"disallowed_STD3_mapped",
  		[
  			32
  		]
  	],
  	[
  		[
  			161,
  			167
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			168,
  			168
  		],
  		"disallowed_STD3_mapped",
  		[
  			32,
  			776
  		]
  	],
  	[
  		[
  			169,
  			169
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			170,
  			170
  		],
  		"mapped",
  		[
  			97
  		]
  	],
  	[
  		[
  			171,
  			172
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			173,
  			173
  		],
  		"ignored"
  	],
  	[
  		[
  			174,
  			174
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			175,
  			175
  		],
  		"disallowed_STD3_mapped",
  		[
  			32,
  			772
  		]
  	],
  	[
  		[
  			176,
  			177
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			178,
  			178
  		],
  		"mapped",
  		[
  			50
  		]
  	],
  	[
  		[
  			179,
  			179
  		],
  		"mapped",
  		[
  			51
  		]
  	],
  	[
  		[
  			180,
  			180
  		],
  		"disallowed_STD3_mapped",
  		[
  			32,
  			769
  		]
  	],
  	[
  		[
  			181,
  			181
  		],
  		"mapped",
  		[
  			956
  		]
  	],
  	[
  		[
  			182,
  			182
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			183,
  			183
  		],
  		"valid"
  	],
  	[
  		[
  			184,
  			184
  		],
  		"disallowed_STD3_mapped",
  		[
  			32,
  			807
  		]
  	],
  	[
  		[
  			185,
  			185
  		],
  		"mapped",
  		[
  			49
  		]
  	],
  	[
  		[
  			186,
  			186
  		],
  		"mapped",
  		[
  			111
  		]
  	],
  	[
  		[
  			187,
  			187
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			188,
  			188
  		],
  		"mapped",
  		[
  			49,
  			8260,
  			52
  		]
  	],
  	[
  		[
  			189,
  			189
  		],
  		"mapped",
  		[
  			49,
  			8260,
  			50
  		]
  	],
  	[
  		[
  			190,
  			190
  		],
  		"mapped",
  		[
  			51,
  			8260,
  			52
  		]
  	],
  	[
  		[
  			191,
  			191
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			192,
  			192
  		],
  		"mapped",
  		[
  			224
  		]
  	],
  	[
  		[
  			193,
  			193
  		],
  		"mapped",
  		[
  			225
  		]
  	],
  	[
  		[
  			194,
  			194
  		],
  		"mapped",
  		[
  			226
  		]
  	],
  	[
  		[
  			195,
  			195
  		],
  		"mapped",
  		[
  			227
  		]
  	],
  	[
  		[
  			196,
  			196
  		],
  		"mapped",
  		[
  			228
  		]
  	],
  	[
  		[
  			197,
  			197
  		],
  		"mapped",
  		[
  			229
  		]
  	],
  	[
  		[
  			198,
  			198
  		],
  		"mapped",
  		[
  			230
  		]
  	],
  	[
  		[
  			199,
  			199
  		],
  		"mapped",
  		[
  			231
  		]
  	],
  	[
  		[
  			200,
  			200
  		],
  		"mapped",
  		[
  			232
  		]
  	],
  	[
  		[
  			201,
  			201
  		],
  		"mapped",
  		[
  			233
  		]
  	],
  	[
  		[
  			202,
  			202
  		],
  		"mapped",
  		[
  			234
  		]
  	],
  	[
  		[
  			203,
  			203
  		],
  		"mapped",
  		[
  			235
  		]
  	],
  	[
  		[
  			204,
  			204
  		],
  		"mapped",
  		[
  			236
  		]
  	],
  	[
  		[
  			205,
  			205
  		],
  		"mapped",
  		[
  			237
  		]
  	],
  	[
  		[
  			206,
  			206
  		],
  		"mapped",
  		[
  			238
  		]
  	],
  	[
  		[
  			207,
  			207
  		],
  		"mapped",
  		[
  			239
  		]
  	],
  	[
  		[
  			208,
  			208
  		],
  		"mapped",
  		[
  			240
  		]
  	],
  	[
  		[
  			209,
  			209
  		],
  		"mapped",
  		[
  			241
  		]
  	],
  	[
  		[
  			210,
  			210
  		],
  		"mapped",
  		[
  			242
  		]
  	],
  	[
  		[
  			211,
  			211
  		],
  		"mapped",
  		[
  			243
  		]
  	],
  	[
  		[
  			212,
  			212
  		],
  		"mapped",
  		[
  			244
  		]
  	],
  	[
  		[
  			213,
  			213
  		],
  		"mapped",
  		[
  			245
  		]
  	],
  	[
  		[
  			214,
  			214
  		],
  		"mapped",
  		[
  			246
  		]
  	],
  	[
  		[
  			215,
  			215
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			216,
  			216
  		],
  		"mapped",
  		[
  			248
  		]
  	],
  	[
  		[
  			217,
  			217
  		],
  		"mapped",
  		[
  			249
  		]
  	],
  	[
  		[
  			218,
  			218
  		],
  		"mapped",
  		[
  			250
  		]
  	],
  	[
  		[
  			219,
  			219
  		],
  		"mapped",
  		[
  			251
  		]
  	],
  	[
  		[
  			220,
  			220
  		],
  		"mapped",
  		[
  			252
  		]
  	],
  	[
  		[
  			221,
  			221
  		],
  		"mapped",
  		[
  			253
  		]
  	],
  	[
  		[
  			222,
  			222
  		],
  		"mapped",
  		[
  			254
  		]
  	],
  	[
  		[
  			223,
  			223
  		],
  		"deviation",
  		[
  			115,
  			115
  		]
  	],
  	[
  		[
  			224,
  			246
  		],
  		"valid"
  	],
  	[
  		[
  			247,
  			247
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			248,
  			255
  		],
  		"valid"
  	],
  	[
  		[
  			256,
  			256
  		],
  		"mapped",
  		[
  			257
  		]
  	],
  	[
  		[
  			257,
  			257
  		],
  		"valid"
  	],
  	[
  		[
  			258,
  			258
  		],
  		"mapped",
  		[
  			259
  		]
  	],
  	[
  		[
  			259,
  			259
  		],
  		"valid"
  	],
  	[
  		[
  			260,
  			260
  		],
  		"mapped",
  		[
  			261
  		]
  	],
  	[
  		[
  			261,
  			261
  		],
  		"valid"
  	],
  	[
  		[
  			262,
  			262
  		],
  		"mapped",
  		[
  			263
  		]
  	],
  	[
  		[
  			263,
  			263
  		],
  		"valid"
  	],
  	[
  		[
  			264,
  			264
  		],
  		"mapped",
  		[
  			265
  		]
  	],
  	[
  		[
  			265,
  			265
  		],
  		"valid"
  	],
  	[
  		[
  			266,
  			266
  		],
  		"mapped",
  		[
  			267
  		]
  	],
  	[
  		[
  			267,
  			267
  		],
  		"valid"
  	],
  	[
  		[
  			268,
  			268
  		],
  		"mapped",
  		[
  			269
  		]
  	],
  	[
  		[
  			269,
  			269
  		],
  		"valid"
  	],
  	[
  		[
  			270,
  			270
  		],
  		"mapped",
  		[
  			271
  		]
  	],
  	[
  		[
  			271,
  			271
  		],
  		"valid"
  	],
  	[
  		[
  			272,
  			272
  		],
  		"mapped",
  		[
  			273
  		]
  	],
  	[
  		[
  			273,
  			273
  		],
  		"valid"
  	],
  	[
  		[
  			274,
  			274
  		],
  		"mapped",
  		[
  			275
  		]
  	],
  	[
  		[
  			275,
  			275
  		],
  		"valid"
  	],
  	[
  		[
  			276,
  			276
  		],
  		"mapped",
  		[
  			277
  		]
  	],
  	[
  		[
  			277,
  			277
  		],
  		"valid"
  	],
  	[
  		[
  			278,
  			278
  		],
  		"mapped",
  		[
  			279
  		]
  	],
  	[
  		[
  			279,
  			279
  		],
  		"valid"
  	],
  	[
  		[
  			280,
  			280
  		],
  		"mapped",
  		[
  			281
  		]
  	],
  	[
  		[
  			281,
  			281
  		],
  		"valid"
  	],
  	[
  		[
  			282,
  			282
  		],
  		"mapped",
  		[
  			283
  		]
  	],
  	[
  		[
  			283,
  			283
  		],
  		"valid"
  	],
  	[
  		[
  			284,
  			284
  		],
  		"mapped",
  		[
  			285
  		]
  	],
  	[
  		[
  			285,
  			285
  		],
  		"valid"
  	],
  	[
  		[
  			286,
  			286
  		],
  		"mapped",
  		[
  			287
  		]
  	],
  	[
  		[
  			287,
  			287
  		],
  		"valid"
  	],
  	[
  		[
  			288,
  			288
  		],
  		"mapped",
  		[
  			289
  		]
  	],
  	[
  		[
  			289,
  			289
  		],
  		"valid"
  	],
  	[
  		[
  			290,
  			290
  		],
  		"mapped",
  		[
  			291
  		]
  	],
  	[
  		[
  			291,
  			291
  		],
  		"valid"
  	],
  	[
  		[
  			292,
  			292
  		],
  		"mapped",
  		[
  			293
  		]
  	],
  	[
  		[
  			293,
  			293
  		],
  		"valid"
  	],
  	[
  		[
  			294,
  			294
  		],
  		"mapped",
  		[
  			295
  		]
  	],
  	[
  		[
  			295,
  			295
  		],
  		"valid"
  	],
  	[
  		[
  			296,
  			296
  		],
  		"mapped",
  		[
  			297
  		]
  	],
  	[
  		[
  			297,
  			297
  		],
  		"valid"
  	],
  	[
  		[
  			298,
  			298
  		],
  		"mapped",
  		[
  			299
  		]
  	],
  	[
  		[
  			299,
  			299
  		],
  		"valid"
  	],
  	[
  		[
  			300,
  			300
  		],
  		"mapped",
  		[
  			301
  		]
  	],
  	[
  		[
  			301,
  			301
  		],
  		"valid"
  	],
  	[
  		[
  			302,
  			302
  		],
  		"mapped",
  		[
  			303
  		]
  	],
  	[
  		[
  			303,
  			303
  		],
  		"valid"
  	],
  	[
  		[
  			304,
  			304
  		],
  		"mapped",
  		[
  			105,
  			775
  		]
  	],
  	[
  		[
  			305,
  			305
  		],
  		"valid"
  	],
  	[
  		[
  			306,
  			307
  		],
  		"mapped",
  		[
  			105,
  			106
  		]
  	],
  	[
  		[
  			308,
  			308
  		],
  		"mapped",
  		[
  			309
  		]
  	],
  	[
  		[
  			309,
  			309
  		],
  		"valid"
  	],
  	[
  		[
  			310,
  			310
  		],
  		"mapped",
  		[
  			311
  		]
  	],
  	[
  		[
  			311,
  			312
  		],
  		"valid"
  	],
  	[
  		[
  			313,
  			313
  		],
  		"mapped",
  		[
  			314
  		]
  	],
  	[
  		[
  			314,
  			314
  		],
  		"valid"
  	],
  	[
  		[
  			315,
  			315
  		],
  		"mapped",
  		[
  			316
  		]
  	],
  	[
  		[
  			316,
  			316
  		],
  		"valid"
  	],
  	[
  		[
  			317,
  			317
  		],
  		"mapped",
  		[
  			318
  		]
  	],
  	[
  		[
  			318,
  			318
  		],
  		"valid"
  	],
  	[
  		[
  			319,
  			320
  		],
  		"mapped",
  		[
  			108,
  			183
  		]
  	],
  	[
  		[
  			321,
  			321
  		],
  		"mapped",
  		[
  			322
  		]
  	],
  	[
  		[
  			322,
  			322
  		],
  		"valid"
  	],
  	[
  		[
  			323,
  			323
  		],
  		"mapped",
  		[
  			324
  		]
  	],
  	[
  		[
  			324,
  			324
  		],
  		"valid"
  	],
  	[
  		[
  			325,
  			325
  		],
  		"mapped",
  		[
  			326
  		]
  	],
  	[
  		[
  			326,
  			326
  		],
  		"valid"
  	],
  	[
  		[
  			327,
  			327
  		],
  		"mapped",
  		[
  			328
  		]
  	],
  	[
  		[
  			328,
  			328
  		],
  		"valid"
  	],
  	[
  		[
  			329,
  			329
  		],
  		"mapped",
  		[
  			700,
  			110
  		]
  	],
  	[
  		[
  			330,
  			330
  		],
  		"mapped",
  		[
  			331
  		]
  	],
  	[
  		[
  			331,
  			331
  		],
  		"valid"
  	],
  	[
  		[
  			332,
  			332
  		],
  		"mapped",
  		[
  			333
  		]
  	],
  	[
  		[
  			333,
  			333
  		],
  		"valid"
  	],
  	[
  		[
  			334,
  			334
  		],
  		"mapped",
  		[
  			335
  		]
  	],
  	[
  		[
  			335,
  			335
  		],
  		"valid"
  	],
  	[
  		[
  			336,
  			336
  		],
  		"mapped",
  		[
  			337
  		]
  	],
  	[
  		[
  			337,
  			337
  		],
  		"valid"
  	],
  	[
  		[
  			338,
  			338
  		],
  		"mapped",
  		[
  			339
  		]
  	],
  	[
  		[
  			339,
  			339
  		],
  		"valid"
  	],
  	[
  		[
  			340,
  			340
  		],
  		"mapped",
  		[
  			341
  		]
  	],
  	[
  		[
  			341,
  			341
  		],
  		"valid"
  	],
  	[
  		[
  			342,
  			342
  		],
  		"mapped",
  		[
  			343
  		]
  	],
  	[
  		[
  			343,
  			343
  		],
  		"valid"
  	],
  	[
  		[
  			344,
  			344
  		],
  		"mapped",
  		[
  			345
  		]
  	],
  	[
  		[
  			345,
  			345
  		],
  		"valid"
  	],
  	[
  		[
  			346,
  			346
  		],
  		"mapped",
  		[
  			347
  		]
  	],
  	[
  		[
  			347,
  			347
  		],
  		"valid"
  	],
  	[
  		[
  			348,
  			348
  		],
  		"mapped",
  		[
  			349
  		]
  	],
  	[
  		[
  			349,
  			349
  		],
  		"valid"
  	],
  	[
  		[
  			350,
  			350
  		],
  		"mapped",
  		[
  			351
  		]
  	],
  	[
  		[
  			351,
  			351
  		],
  		"valid"
  	],
  	[
  		[
  			352,
  			352
  		],
  		"mapped",
  		[
  			353
  		]
  	],
  	[
  		[
  			353,
  			353
  		],
  		"valid"
  	],
  	[
  		[
  			354,
  			354
  		],
  		"mapped",
  		[
  			355
  		]
  	],
  	[
  		[
  			355,
  			355
  		],
  		"valid"
  	],
  	[
  		[
  			356,
  			356
  		],
  		"mapped",
  		[
  			357
  		]
  	],
  	[
  		[
  			357,
  			357
  		],
  		"valid"
  	],
  	[
  		[
  			358,
  			358
  		],
  		"mapped",
  		[
  			359
  		]
  	],
  	[
  		[
  			359,
  			359
  		],
  		"valid"
  	],
  	[
  		[
  			360,
  			360
  		],
  		"mapped",
  		[
  			361
  		]
  	],
  	[
  		[
  			361,
  			361
  		],
  		"valid"
  	],
  	[
  		[
  			362,
  			362
  		],
  		"mapped",
  		[
  			363
  		]
  	],
  	[
  		[
  			363,
  			363
  		],
  		"valid"
  	],
  	[
  		[
  			364,
  			364
  		],
  		"mapped",
  		[
  			365
  		]
  	],
  	[
  		[
  			365,
  			365
  		],
  		"valid"
  	],
  	[
  		[
  			366,
  			366
  		],
  		"mapped",
  		[
  			367
  		]
  	],
  	[
  		[
  			367,
  			367
  		],
  		"valid"
  	],
  	[
  		[
  			368,
  			368
  		],
  		"mapped",
  		[
  			369
  		]
  	],
  	[
  		[
  			369,
  			369
  		],
  		"valid"
  	],
  	[
  		[
  			370,
  			370
  		],
  		"mapped",
  		[
  			371
  		]
  	],
  	[
  		[
  			371,
  			371
  		],
  		"valid"
  	],
  	[
  		[
  			372,
  			372
  		],
  		"mapped",
  		[
  			373
  		]
  	],
  	[
  		[
  			373,
  			373
  		],
  		"valid"
  	],
  	[
  		[
  			374,
  			374
  		],
  		"mapped",
  		[
  			375
  		]
  	],
  	[
  		[
  			375,
  			375
  		],
  		"valid"
  	],
  	[
  		[
  			376,
  			376
  		],
  		"mapped",
  		[
  			255
  		]
  	],
  	[
  		[
  			377,
  			377
  		],
  		"mapped",
  		[
  			378
  		]
  	],
  	[
  		[
  			378,
  			378
  		],
  		"valid"
  	],
  	[
  		[
  			379,
  			379
  		],
  		"mapped",
  		[
  			380
  		]
  	],
  	[
  		[
  			380,
  			380
  		],
  		"valid"
  	],
  	[
  		[
  			381,
  			381
  		],
  		"mapped",
  		[
  			382
  		]
  	],
  	[
  		[
  			382,
  			382
  		],
  		"valid"
  	],
  	[
  		[
  			383,
  			383
  		],
  		"mapped",
  		[
  			115
  		]
  	],
  	[
  		[
  			384,
  			384
  		],
  		"valid"
  	],
  	[
  		[
  			385,
  			385
  		],
  		"mapped",
  		[
  			595
  		]
  	],
  	[
  		[
  			386,
  			386
  		],
  		"mapped",
  		[
  			387
  		]
  	],
  	[
  		[
  			387,
  			387
  		],
  		"valid"
  	],
  	[
  		[
  			388,
  			388
  		],
  		"mapped",
  		[
  			389
  		]
  	],
  	[
  		[
  			389,
  			389
  		],
  		"valid"
  	],
  	[
  		[
  			390,
  			390
  		],
  		"mapped",
  		[
  			596
  		]
  	],
  	[
  		[
  			391,
  			391
  		],
  		"mapped",
  		[
  			392
  		]
  	],
  	[
  		[
  			392,
  			392
  		],
  		"valid"
  	],
  	[
  		[
  			393,
  			393
  		],
  		"mapped",
  		[
  			598
  		]
  	],
  	[
  		[
  			394,
  			394
  		],
  		"mapped",
  		[
  			599
  		]
  	],
  	[
  		[
  			395,
  			395
  		],
  		"mapped",
  		[
  			396
  		]
  	],
  	[
  		[
  			396,
  			397
  		],
  		"valid"
  	],
  	[
  		[
  			398,
  			398
  		],
  		"mapped",
  		[
  			477
  		]
  	],
  	[
  		[
  			399,
  			399
  		],
  		"mapped",
  		[
  			601
  		]
  	],
  	[
  		[
  			400,
  			400
  		],
  		"mapped",
  		[
  			603
  		]
  	],
  	[
  		[
  			401,
  			401
  		],
  		"mapped",
  		[
  			402
  		]
  	],
  	[
  		[
  			402,
  			402
  		],
  		"valid"
  	],
  	[
  		[
  			403,
  			403
  		],
  		"mapped",
  		[
  			608
  		]
  	],
  	[
  		[
  			404,
  			404
  		],
  		"mapped",
  		[
  			611
  		]
  	],
  	[
  		[
  			405,
  			405
  		],
  		"valid"
  	],
  	[
  		[
  			406,
  			406
  		],
  		"mapped",
  		[
  			617
  		]
  	],
  	[
  		[
  			407,
  			407
  		],
  		"mapped",
  		[
  			616
  		]
  	],
  	[
  		[
  			408,
  			408
  		],
  		"mapped",
  		[
  			409
  		]
  	],
  	[
  		[
  			409,
  			411
  		],
  		"valid"
  	],
  	[
  		[
  			412,
  			412
  		],
  		"mapped",
  		[
  			623
  		]
  	],
  	[
  		[
  			413,
  			413
  		],
  		"mapped",
  		[
  			626
  		]
  	],
  	[
  		[
  			414,
  			414
  		],
  		"valid"
  	],
  	[
  		[
  			415,
  			415
  		],
  		"mapped",
  		[
  			629
  		]
  	],
  	[
  		[
  			416,
  			416
  		],
  		"mapped",
  		[
  			417
  		]
  	],
  	[
  		[
  			417,
  			417
  		],
  		"valid"
  	],
  	[
  		[
  			418,
  			418
  		],
  		"mapped",
  		[
  			419
  		]
  	],
  	[
  		[
  			419,
  			419
  		],
  		"valid"
  	],
  	[
  		[
  			420,
  			420
  		],
  		"mapped",
  		[
  			421
  		]
  	],
  	[
  		[
  			421,
  			421
  		],
  		"valid"
  	],
  	[
  		[
  			422,
  			422
  		],
  		"mapped",
  		[
  			640
  		]
  	],
  	[
  		[
  			423,
  			423
  		],
  		"mapped",
  		[
  			424
  		]
  	],
  	[
  		[
  			424,
  			424
  		],
  		"valid"
  	],
  	[
  		[
  			425,
  			425
  		],
  		"mapped",
  		[
  			643
  		]
  	],
  	[
  		[
  			426,
  			427
  		],
  		"valid"
  	],
  	[
  		[
  			428,
  			428
  		],
  		"mapped",
  		[
  			429
  		]
  	],
  	[
  		[
  			429,
  			429
  		],
  		"valid"
  	],
  	[
  		[
  			430,
  			430
  		],
  		"mapped",
  		[
  			648
  		]
  	],
  	[
  		[
  			431,
  			431
  		],
  		"mapped",
  		[
  			432
  		]
  	],
  	[
  		[
  			432,
  			432
  		],
  		"valid"
  	],
  	[
  		[
  			433,
  			433
  		],
  		"mapped",
  		[
  			650
  		]
  	],
  	[
  		[
  			434,
  			434
  		],
  		"mapped",
  		[
  			651
  		]
  	],
  	[
  		[
  			435,
  			435
  		],
  		"mapped",
  		[
  			436
  		]
  	],
  	[
  		[
  			436,
  			436
  		],
  		"valid"
  	],
  	[
  		[
  			437,
  			437
  		],
  		"mapped",
  		[
  			438
  		]
  	],
  	[
  		[
  			438,
  			438
  		],
  		"valid"
  	],
  	[
  		[
  			439,
  			439
  		],
  		"mapped",
  		[
  			658
  		]
  	],
  	[
  		[
  			440,
  			440
  		],
  		"mapped",
  		[
  			441
  		]
  	],
  	[
  		[
  			441,
  			443
  		],
  		"valid"
  	],
  	[
  		[
  			444,
  			444
  		],
  		"mapped",
  		[
  			445
  		]
  	],
  	[
  		[
  			445,
  			451
  		],
  		"valid"
  	],
  	[
  		[
  			452,
  			454
  		],
  		"mapped",
  		[
  			100,
  			382
  		]
  	],
  	[
  		[
  			455,
  			457
  		],
  		"mapped",
  		[
  			108,
  			106
  		]
  	],
  	[
  		[
  			458,
  			460
  		],
  		"mapped",
  		[
  			110,
  			106
  		]
  	],
  	[
  		[
  			461,
  			461
  		],
  		"mapped",
  		[
  			462
  		]
  	],
  	[
  		[
  			462,
  			462
  		],
  		"valid"
  	],
  	[
  		[
  			463,
  			463
  		],
  		"mapped",
  		[
  			464
  		]
  	],
  	[
  		[
  			464,
  			464
  		],
  		"valid"
  	],
  	[
  		[
  			465,
  			465
  		],
  		"mapped",
  		[
  			466
  		]
  	],
  	[
  		[
  			466,
  			466
  		],
  		"valid"
  	],
  	[
  		[
  			467,
  			467
  		],
  		"mapped",
  		[
  			468
  		]
  	],
  	[
  		[
  			468,
  			468
  		],
  		"valid"
  	],
  	[
  		[
  			469,
  			469
  		],
  		"mapped",
  		[
  			470
  		]
  	],
  	[
  		[
  			470,
  			470
  		],
  		"valid"
  	],
  	[
  		[
  			471,
  			471
  		],
  		"mapped",
  		[
  			472
  		]
  	],
  	[
  		[
  			472,
  			472
  		],
  		"valid"
  	],
  	[
  		[
  			473,
  			473
  		],
  		"mapped",
  		[
  			474
  		]
  	],
  	[
  		[
  			474,
  			474
  		],
  		"valid"
  	],
  	[
  		[
  			475,
  			475
  		],
  		"mapped",
  		[
  			476
  		]
  	],
  	[
  		[
  			476,
  			477
  		],
  		"valid"
  	],
  	[
  		[
  			478,
  			478
  		],
  		"mapped",
  		[
  			479
  		]
  	],
  	[
  		[
  			479,
  			479
  		],
  		"valid"
  	],
  	[
  		[
  			480,
  			480
  		],
  		"mapped",
  		[
  			481
  		]
  	],
  	[
  		[
  			481,
  			481
  		],
  		"valid"
  	],
  	[
  		[
  			482,
  			482
  		],
  		"mapped",
  		[
  			483
  		]
  	],
  	[
  		[
  			483,
  			483
  		],
  		"valid"
  	],
  	[
  		[
  			484,
  			484
  		],
  		"mapped",
  		[
  			485
  		]
  	],
  	[
  		[
  			485,
  			485
  		],
  		"valid"
  	],
  	[
  		[
  			486,
  			486
  		],
  		"mapped",
  		[
  			487
  		]
  	],
  	[
  		[
  			487,
  			487
  		],
  		"valid"
  	],
  	[
  		[
  			488,
  			488
  		],
  		"mapped",
  		[
  			489
  		]
  	],
  	[
  		[
  			489,
  			489
  		],
  		"valid"
  	],
  	[
  		[
  			490,
  			490
  		],
  		"mapped",
  		[
  			491
  		]
  	],
  	[
  		[
  			491,
  			491
  		],
  		"valid"
  	],
  	[
  		[
  			492,
  			492
  		],
  		"mapped",
  		[
  			493
  		]
  	],
  	[
  		[
  			493,
  			493
  		],
  		"valid"
  	],
  	[
  		[
  			494,
  			494
  		],
  		"mapped",
  		[
  			495
  		]
  	],
  	[
  		[
  			495,
  			496
  		],
  		"valid"
  	],
  	[
  		[
  			497,
  			499
  		],
  		"mapped",
  		[
  			100,
  			122
  		]
  	],
  	[
  		[
  			500,
  			500
  		],
  		"mapped",
  		[
  			501
  		]
  	],
  	[
  		[
  			501,
  			501
  		],
  		"valid"
  	],
  	[
  		[
  			502,
  			502
  		],
  		"mapped",
  		[
  			405
  		]
  	],
  	[
  		[
  			503,
  			503
  		],
  		"mapped",
  		[
  			447
  		]
  	],
  	[
  		[
  			504,
  			504
  		],
  		"mapped",
  		[
  			505
  		]
  	],
  	[
  		[
  			505,
  			505
  		],
  		"valid"
  	],
  	[
  		[
  			506,
  			506
  		],
  		"mapped",
  		[
  			507
  		]
  	],
  	[
  		[
  			507,
  			507
  		],
  		"valid"
  	],
  	[
  		[
  			508,
  			508
  		],
  		"mapped",
  		[
  			509
  		]
  	],
  	[
  		[
  			509,
  			509
  		],
  		"valid"
  	],
  	[
  		[
  			510,
  			510
  		],
  		"mapped",
  		[
  			511
  		]
  	],
  	[
  		[
  			511,
  			511
  		],
  		"valid"
  	],
  	[
  		[
  			512,
  			512
  		],
  		"mapped",
  		[
  			513
  		]
  	],
  	[
  		[
  			513,
  			513
  		],
  		"valid"
  	],
  	[
  		[
  			514,
  			514
  		],
  		"mapped",
  		[
  			515
  		]
  	],
  	[
  		[
  			515,
  			515
  		],
  		"valid"
  	],
  	[
  		[
  			516,
  			516
  		],
  		"mapped",
  		[
  			517
  		]
  	],
  	[
  		[
  			517,
  			517
  		],
  		"valid"
  	],
  	[
  		[
  			518,
  			518
  		],
  		"mapped",
  		[
  			519
  		]
  	],
  	[
  		[
  			519,
  			519
  		],
  		"valid"
  	],
  	[
  		[
  			520,
  			520
  		],
  		"mapped",
  		[
  			521
  		]
  	],
  	[
  		[
  			521,
  			521
  		],
  		"valid"
  	],
  	[
  		[
  			522,
  			522
  		],
  		"mapped",
  		[
  			523
  		]
  	],
  	[
  		[
  			523,
  			523
  		],
  		"valid"
  	],
  	[
  		[
  			524,
  			524
  		],
  		"mapped",
  		[
  			525
  		]
  	],
  	[
  		[
  			525,
  			525
  		],
  		"valid"
  	],
  	[
  		[
  			526,
  			526
  		],
  		"mapped",
  		[
  			527
  		]
  	],
  	[
  		[
  			527,
  			527
  		],
  		"valid"
  	],
  	[
  		[
  			528,
  			528
  		],
  		"mapped",
  		[
  			529
  		]
  	],
  	[
  		[
  			529,
  			529
  		],
  		"valid"
  	],
  	[
  		[
  			530,
  			530
  		],
  		"mapped",
  		[
  			531
  		]
  	],
  	[
  		[
  			531,
  			531
  		],
  		"valid"
  	],
  	[
  		[
  			532,
  			532
  		],
  		"mapped",
  		[
  			533
  		]
  	],
  	[
  		[
  			533,
  			533
  		],
  		"valid"
  	],
  	[
  		[
  			534,
  			534
  		],
  		"mapped",
  		[
  			535
  		]
  	],
  	[
  		[
  			535,
  			535
  		],
  		"valid"
  	],
  	[
  		[
  			536,
  			536
  		],
  		"mapped",
  		[
  			537
  		]
  	],
  	[
  		[
  			537,
  			537
  		],
  		"valid"
  	],
  	[
  		[
  			538,
  			538
  		],
  		"mapped",
  		[
  			539
  		]
  	],
  	[
  		[
  			539,
  			539
  		],
  		"valid"
  	],
  	[
  		[
  			540,
  			540
  		],
  		"mapped",
  		[
  			541
  		]
  	],
  	[
  		[
  			541,
  			541
  		],
  		"valid"
  	],
  	[
  		[
  			542,
  			542
  		],
  		"mapped",
  		[
  			543
  		]
  	],
  	[
  		[
  			543,
  			543
  		],
  		"valid"
  	],
  	[
  		[
  			544,
  			544
  		],
  		"mapped",
  		[
  			414
  		]
  	],
  	[
  		[
  			545,
  			545
  		],
  		"valid"
  	],
  	[
  		[
  			546,
  			546
  		],
  		"mapped",
  		[
  			547
  		]
  	],
  	[
  		[
  			547,
  			547
  		],
  		"valid"
  	],
  	[
  		[
  			548,
  			548
  		],
  		"mapped",
  		[
  			549
  		]
  	],
  	[
  		[
  			549,
  			549
  		],
  		"valid"
  	],
  	[
  		[
  			550,
  			550
  		],
  		"mapped",
  		[
  			551
  		]
  	],
  	[
  		[
  			551,
  			551
  		],
  		"valid"
  	],
  	[
  		[
  			552,
  			552
  		],
  		"mapped",
  		[
  			553
  		]
  	],
  	[
  		[
  			553,
  			553
  		],
  		"valid"
  	],
  	[
  		[
  			554,
  			554
  		],
  		"mapped",
  		[
  			555
  		]
  	],
  	[
  		[
  			555,
  			555
  		],
  		"valid"
  	],
  	[
  		[
  			556,
  			556
  		],
  		"mapped",
  		[
  			557
  		]
  	],
  	[
  		[
  			557,
  			557
  		],
  		"valid"
  	],
  	[
  		[
  			558,
  			558
  		],
  		"mapped",
  		[
  			559
  		]
  	],
  	[
  		[
  			559,
  			559
  		],
  		"valid"
  	],
  	[
  		[
  			560,
  			560
  		],
  		"mapped",
  		[
  			561
  		]
  	],
  	[
  		[
  			561,
  			561
  		],
  		"valid"
  	],
  	[
  		[
  			562,
  			562
  		],
  		"mapped",
  		[
  			563
  		]
  	],
  	[
  		[
  			563,
  			563
  		],
  		"valid"
  	],
  	[
  		[
  			564,
  			566
  		],
  		"valid"
  	],
  	[
  		[
  			567,
  			569
  		],
  		"valid"
  	],
  	[
  		[
  			570,
  			570
  		],
  		"mapped",
  		[
  			11365
  		]
  	],
  	[
  		[
  			571,
  			571
  		],
  		"mapped",
  		[
  			572
  		]
  	],
  	[
  		[
  			572,
  			572
  		],
  		"valid"
  	],
  	[
  		[
  			573,
  			573
  		],
  		"mapped",
  		[
  			410
  		]
  	],
  	[
  		[
  			574,
  			574
  		],
  		"mapped",
  		[
  			11366
  		]
  	],
  	[
  		[
  			575,
  			576
  		],
  		"valid"
  	],
  	[
  		[
  			577,
  			577
  		],
  		"mapped",
  		[
  			578
  		]
  	],
  	[
  		[
  			578,
  			578
  		],
  		"valid"
  	],
  	[
  		[
  			579,
  			579
  		],
  		"mapped",
  		[
  			384
  		]
  	],
  	[
  		[
  			580,
  			580
  		],
  		"mapped",
  		[
  			649
  		]
  	],
  	[
  		[
  			581,
  			581
  		],
  		"mapped",
  		[
  			652
  		]
  	],
  	[
  		[
  			582,
  			582
  		],
  		"mapped",
  		[
  			583
  		]
  	],
  	[
  		[
  			583,
  			583
  		],
  		"valid"
  	],
  	[
  		[
  			584,
  			584
  		],
  		"mapped",
  		[
  			585
  		]
  	],
  	[
  		[
  			585,
  			585
  		],
  		"valid"
  	],
  	[
  		[
  			586,
  			586
  		],
  		"mapped",
  		[
  			587
  		]
  	],
  	[
  		[
  			587,
  			587
  		],
  		"valid"
  	],
  	[
  		[
  			588,
  			588
  		],
  		"mapped",
  		[
  			589
  		]
  	],
  	[
  		[
  			589,
  			589
  		],
  		"valid"
  	],
  	[
  		[
  			590,
  			590
  		],
  		"mapped",
  		[
  			591
  		]
  	],
  	[
  		[
  			591,
  			591
  		],
  		"valid"
  	],
  	[
  		[
  			592,
  			680
  		],
  		"valid"
  	],
  	[
  		[
  			681,
  			685
  		],
  		"valid"
  	],
  	[
  		[
  			686,
  			687
  		],
  		"valid"
  	],
  	[
  		[
  			688,
  			688
  		],
  		"mapped",
  		[
  			104
  		]
  	],
  	[
  		[
  			689,
  			689
  		],
  		"mapped",
  		[
  			614
  		]
  	],
  	[
  		[
  			690,
  			690
  		],
  		"mapped",
  		[
  			106
  		]
  	],
  	[
  		[
  			691,
  			691
  		],
  		"mapped",
  		[
  			114
  		]
  	],
  	[
  		[
  			692,
  			692
  		],
  		"mapped",
  		[
  			633
  		]
  	],
  	[
  		[
  			693,
  			693
  		],
  		"mapped",
  		[
  			635
  		]
  	],
  	[
  		[
  			694,
  			694
  		],
  		"mapped",
  		[
  			641
  		]
  	],
  	[
  		[
  			695,
  			695
  		],
  		"mapped",
  		[
  			119
  		]
  	],
  	[
  		[
  			696,
  			696
  		],
  		"mapped",
  		[
  			121
  		]
  	],
  	[
  		[
  			697,
  			705
  		],
  		"valid"
  	],
  	[
  		[
  			706,
  			709
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			710,
  			721
  		],
  		"valid"
  	],
  	[
  		[
  			722,
  			727
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			728,
  			728
  		],
  		"disallowed_STD3_mapped",
  		[
  			32,
  			774
  		]
  	],
  	[
  		[
  			729,
  			729
  		],
  		"disallowed_STD3_mapped",
  		[
  			32,
  			775
  		]
  	],
  	[
  		[
  			730,
  			730
  		],
  		"disallowed_STD3_mapped",
  		[
  			32,
  			778
  		]
  	],
  	[
  		[
  			731,
  			731
  		],
  		"disallowed_STD3_mapped",
  		[
  			32,
  			808
  		]
  	],
  	[
  		[
  			732,
  			732
  		],
  		"disallowed_STD3_mapped",
  		[
  			32,
  			771
  		]
  	],
  	[
  		[
  			733,
  			733
  		],
  		"disallowed_STD3_mapped",
  		[
  			32,
  			779
  		]
  	],
  	[
  		[
  			734,
  			734
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			735,
  			735
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			736,
  			736
  		],
  		"mapped",
  		[
  			611
  		]
  	],
  	[
  		[
  			737,
  			737
  		],
  		"mapped",
  		[
  			108
  		]
  	],
  	[
  		[
  			738,
  			738
  		],
  		"mapped",
  		[
  			115
  		]
  	],
  	[
  		[
  			739,
  			739
  		],
  		"mapped",
  		[
  			120
  		]
  	],
  	[
  		[
  			740,
  			740
  		],
  		"mapped",
  		[
  			661
  		]
  	],
  	[
  		[
  			741,
  			745
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			746,
  			747
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			748,
  			748
  		],
  		"valid"
  	],
  	[
  		[
  			749,
  			749
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			750,
  			750
  		],
  		"valid"
  	],
  	[
  		[
  			751,
  			767
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			768,
  			831
  		],
  		"valid"
  	],
  	[
  		[
  			832,
  			832
  		],
  		"mapped",
  		[
  			768
  		]
  	],
  	[
  		[
  			833,
  			833
  		],
  		"mapped",
  		[
  			769
  		]
  	],
  	[
  		[
  			834,
  			834
  		],
  		"valid"
  	],
  	[
  		[
  			835,
  			835
  		],
  		"mapped",
  		[
  			787
  		]
  	],
  	[
  		[
  			836,
  			836
  		],
  		"mapped",
  		[
  			776,
  			769
  		]
  	],
  	[
  		[
  			837,
  			837
  		],
  		"mapped",
  		[
  			953
  		]
  	],
  	[
  		[
  			838,
  			846
  		],
  		"valid"
  	],
  	[
  		[
  			847,
  			847
  		],
  		"ignored"
  	],
  	[
  		[
  			848,
  			855
  		],
  		"valid"
  	],
  	[
  		[
  			856,
  			860
  		],
  		"valid"
  	],
  	[
  		[
  			861,
  			863
  		],
  		"valid"
  	],
  	[
  		[
  			864,
  			865
  		],
  		"valid"
  	],
  	[
  		[
  			866,
  			866
  		],
  		"valid"
  	],
  	[
  		[
  			867,
  			879
  		],
  		"valid"
  	],
  	[
  		[
  			880,
  			880
  		],
  		"mapped",
  		[
  			881
  		]
  	],
  	[
  		[
  			881,
  			881
  		],
  		"valid"
  	],
  	[
  		[
  			882,
  			882
  		],
  		"mapped",
  		[
  			883
  		]
  	],
  	[
  		[
  			883,
  			883
  		],
  		"valid"
  	],
  	[
  		[
  			884,
  			884
  		],
  		"mapped",
  		[
  			697
  		]
  	],
  	[
  		[
  			885,
  			885
  		],
  		"valid"
  	],
  	[
  		[
  			886,
  			886
  		],
  		"mapped",
  		[
  			887
  		]
  	],
  	[
  		[
  			887,
  			887
  		],
  		"valid"
  	],
  	[
  		[
  			888,
  			889
  		],
  		"disallowed"
  	],
  	[
  		[
  			890,
  			890
  		],
  		"disallowed_STD3_mapped",
  		[
  			32,
  			953
  		]
  	],
  	[
  		[
  			891,
  			893
  		],
  		"valid"
  	],
  	[
  		[
  			894,
  			894
  		],
  		"disallowed_STD3_mapped",
  		[
  			59
  		]
  	],
  	[
  		[
  			895,
  			895
  		],
  		"mapped",
  		[
  			1011
  		]
  	],
  	[
  		[
  			896,
  			899
  		],
  		"disallowed"
  	],
  	[
  		[
  			900,
  			900
  		],
  		"disallowed_STD3_mapped",
  		[
  			32,
  			769
  		]
  	],
  	[
  		[
  			901,
  			901
  		],
  		"disallowed_STD3_mapped",
  		[
  			32,
  			776,
  			769
  		]
  	],
  	[
  		[
  			902,
  			902
  		],
  		"mapped",
  		[
  			940
  		]
  	],
  	[
  		[
  			903,
  			903
  		],
  		"mapped",
  		[
  			183
  		]
  	],
  	[
  		[
  			904,
  			904
  		],
  		"mapped",
  		[
  			941
  		]
  	],
  	[
  		[
  			905,
  			905
  		],
  		"mapped",
  		[
  			942
  		]
  	],
  	[
  		[
  			906,
  			906
  		],
  		"mapped",
  		[
  			943
  		]
  	],
  	[
  		[
  			907,
  			907
  		],
  		"disallowed"
  	],
  	[
  		[
  			908,
  			908
  		],
  		"mapped",
  		[
  			972
  		]
  	],
  	[
  		[
  			909,
  			909
  		],
  		"disallowed"
  	],
  	[
  		[
  			910,
  			910
  		],
  		"mapped",
  		[
  			973
  		]
  	],
  	[
  		[
  			911,
  			911
  		],
  		"mapped",
  		[
  			974
  		]
  	],
  	[
  		[
  			912,
  			912
  		],
  		"valid"
  	],
  	[
  		[
  			913,
  			913
  		],
  		"mapped",
  		[
  			945
  		]
  	],
  	[
  		[
  			914,
  			914
  		],
  		"mapped",
  		[
  			946
  		]
  	],
  	[
  		[
  			915,
  			915
  		],
  		"mapped",
  		[
  			947
  		]
  	],
  	[
  		[
  			916,
  			916
  		],
  		"mapped",
  		[
  			948
  		]
  	],
  	[
  		[
  			917,
  			917
  		],
  		"mapped",
  		[
  			949
  		]
  	],
  	[
  		[
  			918,
  			918
  		],
  		"mapped",
  		[
  			950
  		]
  	],
  	[
  		[
  			919,
  			919
  		],
  		"mapped",
  		[
  			951
  		]
  	],
  	[
  		[
  			920,
  			920
  		],
  		"mapped",
  		[
  			952
  		]
  	],
  	[
  		[
  			921,
  			921
  		],
  		"mapped",
  		[
  			953
  		]
  	],
  	[
  		[
  			922,
  			922
  		],
  		"mapped",
  		[
  			954
  		]
  	],
  	[
  		[
  			923,
  			923
  		],
  		"mapped",
  		[
  			955
  		]
  	],
  	[
  		[
  			924,
  			924
  		],
  		"mapped",
  		[
  			956
  		]
  	],
  	[
  		[
  			925,
  			925
  		],
  		"mapped",
  		[
  			957
  		]
  	],
  	[
  		[
  			926,
  			926
  		],
  		"mapped",
  		[
  			958
  		]
  	],
  	[
  		[
  			927,
  			927
  		],
  		"mapped",
  		[
  			959
  		]
  	],
  	[
  		[
  			928,
  			928
  		],
  		"mapped",
  		[
  			960
  		]
  	],
  	[
  		[
  			929,
  			929
  		],
  		"mapped",
  		[
  			961
  		]
  	],
  	[
  		[
  			930,
  			930
  		],
  		"disallowed"
  	],
  	[
  		[
  			931,
  			931
  		],
  		"mapped",
  		[
  			963
  		]
  	],
  	[
  		[
  			932,
  			932
  		],
  		"mapped",
  		[
  			964
  		]
  	],
  	[
  		[
  			933,
  			933
  		],
  		"mapped",
  		[
  			965
  		]
  	],
  	[
  		[
  			934,
  			934
  		],
  		"mapped",
  		[
  			966
  		]
  	],
  	[
  		[
  			935,
  			935
  		],
  		"mapped",
  		[
  			967
  		]
  	],
  	[
  		[
  			936,
  			936
  		],
  		"mapped",
  		[
  			968
  		]
  	],
  	[
  		[
  			937,
  			937
  		],
  		"mapped",
  		[
  			969
  		]
  	],
  	[
  		[
  			938,
  			938
  		],
  		"mapped",
  		[
  			970
  		]
  	],
  	[
  		[
  			939,
  			939
  		],
  		"mapped",
  		[
  			971
  		]
  	],
  	[
  		[
  			940,
  			961
  		],
  		"valid"
  	],
  	[
  		[
  			962,
  			962
  		],
  		"deviation",
  		[
  			963
  		]
  	],
  	[
  		[
  			963,
  			974
  		],
  		"valid"
  	],
  	[
  		[
  			975,
  			975
  		],
  		"mapped",
  		[
  			983
  		]
  	],
  	[
  		[
  			976,
  			976
  		],
  		"mapped",
  		[
  			946
  		]
  	],
  	[
  		[
  			977,
  			977
  		],
  		"mapped",
  		[
  			952
  		]
  	],
  	[
  		[
  			978,
  			978
  		],
  		"mapped",
  		[
  			965
  		]
  	],
  	[
  		[
  			979,
  			979
  		],
  		"mapped",
  		[
  			973
  		]
  	],
  	[
  		[
  			980,
  			980
  		],
  		"mapped",
  		[
  			971
  		]
  	],
  	[
  		[
  			981,
  			981
  		],
  		"mapped",
  		[
  			966
  		]
  	],
  	[
  		[
  			982,
  			982
  		],
  		"mapped",
  		[
  			960
  		]
  	],
  	[
  		[
  			983,
  			983
  		],
  		"valid"
  	],
  	[
  		[
  			984,
  			984
  		],
  		"mapped",
  		[
  			985
  		]
  	],
  	[
  		[
  			985,
  			985
  		],
  		"valid"
  	],
  	[
  		[
  			986,
  			986
  		],
  		"mapped",
  		[
  			987
  		]
  	],
  	[
  		[
  			987,
  			987
  		],
  		"valid"
  	],
  	[
  		[
  			988,
  			988
  		],
  		"mapped",
  		[
  			989
  		]
  	],
  	[
  		[
  			989,
  			989
  		],
  		"valid"
  	],
  	[
  		[
  			990,
  			990
  		],
  		"mapped",
  		[
  			991
  		]
  	],
  	[
  		[
  			991,
  			991
  		],
  		"valid"
  	],
  	[
  		[
  			992,
  			992
  		],
  		"mapped",
  		[
  			993
  		]
  	],
  	[
  		[
  			993,
  			993
  		],
  		"valid"
  	],
  	[
  		[
  			994,
  			994
  		],
  		"mapped",
  		[
  			995
  		]
  	],
  	[
  		[
  			995,
  			995
  		],
  		"valid"
  	],
  	[
  		[
  			996,
  			996
  		],
  		"mapped",
  		[
  			997
  		]
  	],
  	[
  		[
  			997,
  			997
  		],
  		"valid"
  	],
  	[
  		[
  			998,
  			998
  		],
  		"mapped",
  		[
  			999
  		]
  	],
  	[
  		[
  			999,
  			999
  		],
  		"valid"
  	],
  	[
  		[
  			1000,
  			1000
  		],
  		"mapped",
  		[
  			1001
  		]
  	],
  	[
  		[
  			1001,
  			1001
  		],
  		"valid"
  	],
  	[
  		[
  			1002,
  			1002
  		],
  		"mapped",
  		[
  			1003
  		]
  	],
  	[
  		[
  			1003,
  			1003
  		],
  		"valid"
  	],
  	[
  		[
  			1004,
  			1004
  		],
  		"mapped",
  		[
  			1005
  		]
  	],
  	[
  		[
  			1005,
  			1005
  		],
  		"valid"
  	],
  	[
  		[
  			1006,
  			1006
  		],
  		"mapped",
  		[
  			1007
  		]
  	],
  	[
  		[
  			1007,
  			1007
  		],
  		"valid"
  	],
  	[
  		[
  			1008,
  			1008
  		],
  		"mapped",
  		[
  			954
  		]
  	],
  	[
  		[
  			1009,
  			1009
  		],
  		"mapped",
  		[
  			961
  		]
  	],
  	[
  		[
  			1010,
  			1010
  		],
  		"mapped",
  		[
  			963
  		]
  	],
  	[
  		[
  			1011,
  			1011
  		],
  		"valid"
  	],
  	[
  		[
  			1012,
  			1012
  		],
  		"mapped",
  		[
  			952
  		]
  	],
  	[
  		[
  			1013,
  			1013
  		],
  		"mapped",
  		[
  			949
  		]
  	],
  	[
  		[
  			1014,
  			1014
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			1015,
  			1015
  		],
  		"mapped",
  		[
  			1016
  		]
  	],
  	[
  		[
  			1016,
  			1016
  		],
  		"valid"
  	],
  	[
  		[
  			1017,
  			1017
  		],
  		"mapped",
  		[
  			963
  		]
  	],
  	[
  		[
  			1018,
  			1018
  		],
  		"mapped",
  		[
  			1019
  		]
  	],
  	[
  		[
  			1019,
  			1019
  		],
  		"valid"
  	],
  	[
  		[
  			1020,
  			1020
  		],
  		"valid"
  	],
  	[
  		[
  			1021,
  			1021
  		],
  		"mapped",
  		[
  			891
  		]
  	],
  	[
  		[
  			1022,
  			1022
  		],
  		"mapped",
  		[
  			892
  		]
  	],
  	[
  		[
  			1023,
  			1023
  		],
  		"mapped",
  		[
  			893
  		]
  	],
  	[
  		[
  			1024,
  			1024
  		],
  		"mapped",
  		[
  			1104
  		]
  	],
  	[
  		[
  			1025,
  			1025
  		],
  		"mapped",
  		[
  			1105
  		]
  	],
  	[
  		[
  			1026,
  			1026
  		],
  		"mapped",
  		[
  			1106
  		]
  	],
  	[
  		[
  			1027,
  			1027
  		],
  		"mapped",
  		[
  			1107
  		]
  	],
  	[
  		[
  			1028,
  			1028
  		],
  		"mapped",
  		[
  			1108
  		]
  	],
  	[
  		[
  			1029,
  			1029
  		],
  		"mapped",
  		[
  			1109
  		]
  	],
  	[
  		[
  			1030,
  			1030
  		],
  		"mapped",
  		[
  			1110
  		]
  	],
  	[
  		[
  			1031,
  			1031
  		],
  		"mapped",
  		[
  			1111
  		]
  	],
  	[
  		[
  			1032,
  			1032
  		],
  		"mapped",
  		[
  			1112
  		]
  	],
  	[
  		[
  			1033,
  			1033
  		],
  		"mapped",
  		[
  			1113
  		]
  	],
  	[
  		[
  			1034,
  			1034
  		],
  		"mapped",
  		[
  			1114
  		]
  	],
  	[
  		[
  			1035,
  			1035
  		],
  		"mapped",
  		[
  			1115
  		]
  	],
  	[
  		[
  			1036,
  			1036
  		],
  		"mapped",
  		[
  			1116
  		]
  	],
  	[
  		[
  			1037,
  			1037
  		],
  		"mapped",
  		[
  			1117
  		]
  	],
  	[
  		[
  			1038,
  			1038
  		],
  		"mapped",
  		[
  			1118
  		]
  	],
  	[
  		[
  			1039,
  			1039
  		],
  		"mapped",
  		[
  			1119
  		]
  	],
  	[
  		[
  			1040,
  			1040
  		],
  		"mapped",
  		[
  			1072
  		]
  	],
  	[
  		[
  			1041,
  			1041
  		],
  		"mapped",
  		[
  			1073
  		]
  	],
  	[
  		[
  			1042,
  			1042
  		],
  		"mapped",
  		[
  			1074
  		]
  	],
  	[
  		[
  			1043,
  			1043
  		],
  		"mapped",
  		[
  			1075
  		]
  	],
  	[
  		[
  			1044,
  			1044
  		],
  		"mapped",
  		[
  			1076
  		]
  	],
  	[
  		[
  			1045,
  			1045
  		],
  		"mapped",
  		[
  			1077
  		]
  	],
  	[
  		[
  			1046,
  			1046
  		],
  		"mapped",
  		[
  			1078
  		]
  	],
  	[
  		[
  			1047,
  			1047
  		],
  		"mapped",
  		[
  			1079
  		]
  	],
  	[
  		[
  			1048,
  			1048
  		],
  		"mapped",
  		[
  			1080
  		]
  	],
  	[
  		[
  			1049,
  			1049
  		],
  		"mapped",
  		[
  			1081
  		]
  	],
  	[
  		[
  			1050,
  			1050
  		],
  		"mapped",
  		[
  			1082
  		]
  	],
  	[
  		[
  			1051,
  			1051
  		],
  		"mapped",
  		[
  			1083
  		]
  	],
  	[
  		[
  			1052,
  			1052
  		],
  		"mapped",
  		[
  			1084
  		]
  	],
  	[
  		[
  			1053,
  			1053
  		],
  		"mapped",
  		[
  			1085
  		]
  	],
  	[
  		[
  			1054,
  			1054
  		],
  		"mapped",
  		[
  			1086
  		]
  	],
  	[
  		[
  			1055,
  			1055
  		],
  		"mapped",
  		[
  			1087
  		]
  	],
  	[
  		[
  			1056,
  			1056
  		],
  		"mapped",
  		[
  			1088
  		]
  	],
  	[
  		[
  			1057,
  			1057
  		],
  		"mapped",
  		[
  			1089
  		]
  	],
  	[
  		[
  			1058,
  			1058
  		],
  		"mapped",
  		[
  			1090
  		]
  	],
  	[
  		[
  			1059,
  			1059
  		],
  		"mapped",
  		[
  			1091
  		]
  	],
  	[
  		[
  			1060,
  			1060
  		],
  		"mapped",
  		[
  			1092
  		]
  	],
  	[
  		[
  			1061,
  			1061
  		],
  		"mapped",
  		[
  			1093
  		]
  	],
  	[
  		[
  			1062,
  			1062
  		],
  		"mapped",
  		[
  			1094
  		]
  	],
  	[
  		[
  			1063,
  			1063
  		],
  		"mapped",
  		[
  			1095
  		]
  	],
  	[
  		[
  			1064,
  			1064
  		],
  		"mapped",
  		[
  			1096
  		]
  	],
  	[
  		[
  			1065,
  			1065
  		],
  		"mapped",
  		[
  			1097
  		]
  	],
  	[
  		[
  			1066,
  			1066
  		],
  		"mapped",
  		[
  			1098
  		]
  	],
  	[
  		[
  			1067,
  			1067
  		],
  		"mapped",
  		[
  			1099
  		]
  	],
  	[
  		[
  			1068,
  			1068
  		],
  		"mapped",
  		[
  			1100
  		]
  	],
  	[
  		[
  			1069,
  			1069
  		],
  		"mapped",
  		[
  			1101
  		]
  	],
  	[
  		[
  			1070,
  			1070
  		],
  		"mapped",
  		[
  			1102
  		]
  	],
  	[
  		[
  			1071,
  			1071
  		],
  		"mapped",
  		[
  			1103
  		]
  	],
  	[
  		[
  			1072,
  			1103
  		],
  		"valid"
  	],
  	[
  		[
  			1104,
  			1104
  		],
  		"valid"
  	],
  	[
  		[
  			1105,
  			1116
  		],
  		"valid"
  	],
  	[
  		[
  			1117,
  			1117
  		],
  		"valid"
  	],
  	[
  		[
  			1118,
  			1119
  		],
  		"valid"
  	],
  	[
  		[
  			1120,
  			1120
  		],
  		"mapped",
  		[
  			1121
  		]
  	],
  	[
  		[
  			1121,
  			1121
  		],
  		"valid"
  	],
  	[
  		[
  			1122,
  			1122
  		],
  		"mapped",
  		[
  			1123
  		]
  	],
  	[
  		[
  			1123,
  			1123
  		],
  		"valid"
  	],
  	[
  		[
  			1124,
  			1124
  		],
  		"mapped",
  		[
  			1125
  		]
  	],
  	[
  		[
  			1125,
  			1125
  		],
  		"valid"
  	],
  	[
  		[
  			1126,
  			1126
  		],
  		"mapped",
  		[
  			1127
  		]
  	],
  	[
  		[
  			1127,
  			1127
  		],
  		"valid"
  	],
  	[
  		[
  			1128,
  			1128
  		],
  		"mapped",
  		[
  			1129
  		]
  	],
  	[
  		[
  			1129,
  			1129
  		],
  		"valid"
  	],
  	[
  		[
  			1130,
  			1130
  		],
  		"mapped",
  		[
  			1131
  		]
  	],
  	[
  		[
  			1131,
  			1131
  		],
  		"valid"
  	],
  	[
  		[
  			1132,
  			1132
  		],
  		"mapped",
  		[
  			1133
  		]
  	],
  	[
  		[
  			1133,
  			1133
  		],
  		"valid"
  	],
  	[
  		[
  			1134,
  			1134
  		],
  		"mapped",
  		[
  			1135
  		]
  	],
  	[
  		[
  			1135,
  			1135
  		],
  		"valid"
  	],
  	[
  		[
  			1136,
  			1136
  		],
  		"mapped",
  		[
  			1137
  		]
  	],
  	[
  		[
  			1137,
  			1137
  		],
  		"valid"
  	],
  	[
  		[
  			1138,
  			1138
  		],
  		"mapped",
  		[
  			1139
  		]
  	],
  	[
  		[
  			1139,
  			1139
  		],
  		"valid"
  	],
  	[
  		[
  			1140,
  			1140
  		],
  		"mapped",
  		[
  			1141
  		]
  	],
  	[
  		[
  			1141,
  			1141
  		],
  		"valid"
  	],
  	[
  		[
  			1142,
  			1142
  		],
  		"mapped",
  		[
  			1143
  		]
  	],
  	[
  		[
  			1143,
  			1143
  		],
  		"valid"
  	],
  	[
  		[
  			1144,
  			1144
  		],
  		"mapped",
  		[
  			1145
  		]
  	],
  	[
  		[
  			1145,
  			1145
  		],
  		"valid"
  	],
  	[
  		[
  			1146,
  			1146
  		],
  		"mapped",
  		[
  			1147
  		]
  	],
  	[
  		[
  			1147,
  			1147
  		],
  		"valid"
  	],
  	[
  		[
  			1148,
  			1148
  		],
  		"mapped",
  		[
  			1149
  		]
  	],
  	[
  		[
  			1149,
  			1149
  		],
  		"valid"
  	],
  	[
  		[
  			1150,
  			1150
  		],
  		"mapped",
  		[
  			1151
  		]
  	],
  	[
  		[
  			1151,
  			1151
  		],
  		"valid"
  	],
  	[
  		[
  			1152,
  			1152
  		],
  		"mapped",
  		[
  			1153
  		]
  	],
  	[
  		[
  			1153,
  			1153
  		],
  		"valid"
  	],
  	[
  		[
  			1154,
  			1154
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			1155,
  			1158
  		],
  		"valid"
  	],
  	[
  		[
  			1159,
  			1159
  		],
  		"valid"
  	],
  	[
  		[
  			1160,
  			1161
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			1162,
  			1162
  		],
  		"mapped",
  		[
  			1163
  		]
  	],
  	[
  		[
  			1163,
  			1163
  		],
  		"valid"
  	],
  	[
  		[
  			1164,
  			1164
  		],
  		"mapped",
  		[
  			1165
  		]
  	],
  	[
  		[
  			1165,
  			1165
  		],
  		"valid"
  	],
  	[
  		[
  			1166,
  			1166
  		],
  		"mapped",
  		[
  			1167
  		]
  	],
  	[
  		[
  			1167,
  			1167
  		],
  		"valid"
  	],
  	[
  		[
  			1168,
  			1168
  		],
  		"mapped",
  		[
  			1169
  		]
  	],
  	[
  		[
  			1169,
  			1169
  		],
  		"valid"
  	],
  	[
  		[
  			1170,
  			1170
  		],
  		"mapped",
  		[
  			1171
  		]
  	],
  	[
  		[
  			1171,
  			1171
  		],
  		"valid"
  	],
  	[
  		[
  			1172,
  			1172
  		],
  		"mapped",
  		[
  			1173
  		]
  	],
  	[
  		[
  			1173,
  			1173
  		],
  		"valid"
  	],
  	[
  		[
  			1174,
  			1174
  		],
  		"mapped",
  		[
  			1175
  		]
  	],
  	[
  		[
  			1175,
  			1175
  		],
  		"valid"
  	],
  	[
  		[
  			1176,
  			1176
  		],
  		"mapped",
  		[
  			1177
  		]
  	],
  	[
  		[
  			1177,
  			1177
  		],
  		"valid"
  	],
  	[
  		[
  			1178,
  			1178
  		],
  		"mapped",
  		[
  			1179
  		]
  	],
  	[
  		[
  			1179,
  			1179
  		],
  		"valid"
  	],
  	[
  		[
  			1180,
  			1180
  		],
  		"mapped",
  		[
  			1181
  		]
  	],
  	[
  		[
  			1181,
  			1181
  		],
  		"valid"
  	],
  	[
  		[
  			1182,
  			1182
  		],
  		"mapped",
  		[
  			1183
  		]
  	],
  	[
  		[
  			1183,
  			1183
  		],
  		"valid"
  	],
  	[
  		[
  			1184,
  			1184
  		],
  		"mapped",
  		[
  			1185
  		]
  	],
  	[
  		[
  			1185,
  			1185
  		],
  		"valid"
  	],
  	[
  		[
  			1186,
  			1186
  		],
  		"mapped",
  		[
  			1187
  		]
  	],
  	[
  		[
  			1187,
  			1187
  		],
  		"valid"
  	],
  	[
  		[
  			1188,
  			1188
  		],
  		"mapped",
  		[
  			1189
  		]
  	],
  	[
  		[
  			1189,
  			1189
  		],
  		"valid"
  	],
  	[
  		[
  			1190,
  			1190
  		],
  		"mapped",
  		[
  			1191
  		]
  	],
  	[
  		[
  			1191,
  			1191
  		],
  		"valid"
  	],
  	[
  		[
  			1192,
  			1192
  		],
  		"mapped",
  		[
  			1193
  		]
  	],
  	[
  		[
  			1193,
  			1193
  		],
  		"valid"
  	],
  	[
  		[
  			1194,
  			1194
  		],
  		"mapped",
  		[
  			1195
  		]
  	],
  	[
  		[
  			1195,
  			1195
  		],
  		"valid"
  	],
  	[
  		[
  			1196,
  			1196
  		],
  		"mapped",
  		[
  			1197
  		]
  	],
  	[
  		[
  			1197,
  			1197
  		],
  		"valid"
  	],
  	[
  		[
  			1198,
  			1198
  		],
  		"mapped",
  		[
  			1199
  		]
  	],
  	[
  		[
  			1199,
  			1199
  		],
  		"valid"
  	],
  	[
  		[
  			1200,
  			1200
  		],
  		"mapped",
  		[
  			1201
  		]
  	],
  	[
  		[
  			1201,
  			1201
  		],
  		"valid"
  	],
  	[
  		[
  			1202,
  			1202
  		],
  		"mapped",
  		[
  			1203
  		]
  	],
  	[
  		[
  			1203,
  			1203
  		],
  		"valid"
  	],
  	[
  		[
  			1204,
  			1204
  		],
  		"mapped",
  		[
  			1205
  		]
  	],
  	[
  		[
  			1205,
  			1205
  		],
  		"valid"
  	],
  	[
  		[
  			1206,
  			1206
  		],
  		"mapped",
  		[
  			1207
  		]
  	],
  	[
  		[
  			1207,
  			1207
  		],
  		"valid"
  	],
  	[
  		[
  			1208,
  			1208
  		],
  		"mapped",
  		[
  			1209
  		]
  	],
  	[
  		[
  			1209,
  			1209
  		],
  		"valid"
  	],
  	[
  		[
  			1210,
  			1210
  		],
  		"mapped",
  		[
  			1211
  		]
  	],
  	[
  		[
  			1211,
  			1211
  		],
  		"valid"
  	],
  	[
  		[
  			1212,
  			1212
  		],
  		"mapped",
  		[
  			1213
  		]
  	],
  	[
  		[
  			1213,
  			1213
  		],
  		"valid"
  	],
  	[
  		[
  			1214,
  			1214
  		],
  		"mapped",
  		[
  			1215
  		]
  	],
  	[
  		[
  			1215,
  			1215
  		],
  		"valid"
  	],
  	[
  		[
  			1216,
  			1216
  		],
  		"disallowed"
  	],
  	[
  		[
  			1217,
  			1217
  		],
  		"mapped",
  		[
  			1218
  		]
  	],
  	[
  		[
  			1218,
  			1218
  		],
  		"valid"
  	],
  	[
  		[
  			1219,
  			1219
  		],
  		"mapped",
  		[
  			1220
  		]
  	],
  	[
  		[
  			1220,
  			1220
  		],
  		"valid"
  	],
  	[
  		[
  			1221,
  			1221
  		],
  		"mapped",
  		[
  			1222
  		]
  	],
  	[
  		[
  			1222,
  			1222
  		],
  		"valid"
  	],
  	[
  		[
  			1223,
  			1223
  		],
  		"mapped",
  		[
  			1224
  		]
  	],
  	[
  		[
  			1224,
  			1224
  		],
  		"valid"
  	],
  	[
  		[
  			1225,
  			1225
  		],
  		"mapped",
  		[
  			1226
  		]
  	],
  	[
  		[
  			1226,
  			1226
  		],
  		"valid"
  	],
  	[
  		[
  			1227,
  			1227
  		],
  		"mapped",
  		[
  			1228
  		]
  	],
  	[
  		[
  			1228,
  			1228
  		],
  		"valid"
  	],
  	[
  		[
  			1229,
  			1229
  		],
  		"mapped",
  		[
  			1230
  		]
  	],
  	[
  		[
  			1230,
  			1230
  		],
  		"valid"
  	],
  	[
  		[
  			1231,
  			1231
  		],
  		"valid"
  	],
  	[
  		[
  			1232,
  			1232
  		],
  		"mapped",
  		[
  			1233
  		]
  	],
  	[
  		[
  			1233,
  			1233
  		],
  		"valid"
  	],
  	[
  		[
  			1234,
  			1234
  		],
  		"mapped",
  		[
  			1235
  		]
  	],
  	[
  		[
  			1235,
  			1235
  		],
  		"valid"
  	],
  	[
  		[
  			1236,
  			1236
  		],
  		"mapped",
  		[
  			1237
  		]
  	],
  	[
  		[
  			1237,
  			1237
  		],
  		"valid"
  	],
  	[
  		[
  			1238,
  			1238
  		],
  		"mapped",
  		[
  			1239
  		]
  	],
  	[
  		[
  			1239,
  			1239
  		],
  		"valid"
  	],
  	[
  		[
  			1240,
  			1240
  		],
  		"mapped",
  		[
  			1241
  		]
  	],
  	[
  		[
  			1241,
  			1241
  		],
  		"valid"
  	],
  	[
  		[
  			1242,
  			1242
  		],
  		"mapped",
  		[
  			1243
  		]
  	],
  	[
  		[
  			1243,
  			1243
  		],
  		"valid"
  	],
  	[
  		[
  			1244,
  			1244
  		],
  		"mapped",
  		[
  			1245
  		]
  	],
  	[
  		[
  			1245,
  			1245
  		],
  		"valid"
  	],
  	[
  		[
  			1246,
  			1246
  		],
  		"mapped",
  		[
  			1247
  		]
  	],
  	[
  		[
  			1247,
  			1247
  		],
  		"valid"
  	],
  	[
  		[
  			1248,
  			1248
  		],
  		"mapped",
  		[
  			1249
  		]
  	],
  	[
  		[
  			1249,
  			1249
  		],
  		"valid"
  	],
  	[
  		[
  			1250,
  			1250
  		],
  		"mapped",
  		[
  			1251
  		]
  	],
  	[
  		[
  			1251,
  			1251
  		],
  		"valid"
  	],
  	[
  		[
  			1252,
  			1252
  		],
  		"mapped",
  		[
  			1253
  		]
  	],
  	[
  		[
  			1253,
  			1253
  		],
  		"valid"
  	],
  	[
  		[
  			1254,
  			1254
  		],
  		"mapped",
  		[
  			1255
  		]
  	],
  	[
  		[
  			1255,
  			1255
  		],
  		"valid"
  	],
  	[
  		[
  			1256,
  			1256
  		],
  		"mapped",
  		[
  			1257
  		]
  	],
  	[
  		[
  			1257,
  			1257
  		],
  		"valid"
  	],
  	[
  		[
  			1258,
  			1258
  		],
  		"mapped",
  		[
  			1259
  		]
  	],
  	[
  		[
  			1259,
  			1259
  		],
  		"valid"
  	],
  	[
  		[
  			1260,
  			1260
  		],
  		"mapped",
  		[
  			1261
  		]
  	],
  	[
  		[
  			1261,
  			1261
  		],
  		"valid"
  	],
  	[
  		[
  			1262,
  			1262
  		],
  		"mapped",
  		[
  			1263
  		]
  	],
  	[
  		[
  			1263,
  			1263
  		],
  		"valid"
  	],
  	[
  		[
  			1264,
  			1264
  		],
  		"mapped",
  		[
  			1265
  		]
  	],
  	[
  		[
  			1265,
  			1265
  		],
  		"valid"
  	],
  	[
  		[
  			1266,
  			1266
  		],
  		"mapped",
  		[
  			1267
  		]
  	],
  	[
  		[
  			1267,
  			1267
  		],
  		"valid"
  	],
  	[
  		[
  			1268,
  			1268
  		],
  		"mapped",
  		[
  			1269
  		]
  	],
  	[
  		[
  			1269,
  			1269
  		],
  		"valid"
  	],
  	[
  		[
  			1270,
  			1270
  		],
  		"mapped",
  		[
  			1271
  		]
  	],
  	[
  		[
  			1271,
  			1271
  		],
  		"valid"
  	],
  	[
  		[
  			1272,
  			1272
  		],
  		"mapped",
  		[
  			1273
  		]
  	],
  	[
  		[
  			1273,
  			1273
  		],
  		"valid"
  	],
  	[
  		[
  			1274,
  			1274
  		],
  		"mapped",
  		[
  			1275
  		]
  	],
  	[
  		[
  			1275,
  			1275
  		],
  		"valid"
  	],
  	[
  		[
  			1276,
  			1276
  		],
  		"mapped",
  		[
  			1277
  		]
  	],
  	[
  		[
  			1277,
  			1277
  		],
  		"valid"
  	],
  	[
  		[
  			1278,
  			1278
  		],
  		"mapped",
  		[
  			1279
  		]
  	],
  	[
  		[
  			1279,
  			1279
  		],
  		"valid"
  	],
  	[
  		[
  			1280,
  			1280
  		],
  		"mapped",
  		[
  			1281
  		]
  	],
  	[
  		[
  			1281,
  			1281
  		],
  		"valid"
  	],
  	[
  		[
  			1282,
  			1282
  		],
  		"mapped",
  		[
  			1283
  		]
  	],
  	[
  		[
  			1283,
  			1283
  		],
  		"valid"
  	],
  	[
  		[
  			1284,
  			1284
  		],
  		"mapped",
  		[
  			1285
  		]
  	],
  	[
  		[
  			1285,
  			1285
  		],
  		"valid"
  	],
  	[
  		[
  			1286,
  			1286
  		],
  		"mapped",
  		[
  			1287
  		]
  	],
  	[
  		[
  			1287,
  			1287
  		],
  		"valid"
  	],
  	[
  		[
  			1288,
  			1288
  		],
  		"mapped",
  		[
  			1289
  		]
  	],
  	[
  		[
  			1289,
  			1289
  		],
  		"valid"
  	],
  	[
  		[
  			1290,
  			1290
  		],
  		"mapped",
  		[
  			1291
  		]
  	],
  	[
  		[
  			1291,
  			1291
  		],
  		"valid"
  	],
  	[
  		[
  			1292,
  			1292
  		],
  		"mapped",
  		[
  			1293
  		]
  	],
  	[
  		[
  			1293,
  			1293
  		],
  		"valid"
  	],
  	[
  		[
  			1294,
  			1294
  		],
  		"mapped",
  		[
  			1295
  		]
  	],
  	[
  		[
  			1295,
  			1295
  		],
  		"valid"
  	],
  	[
  		[
  			1296,
  			1296
  		],
  		"mapped",
  		[
  			1297
  		]
  	],
  	[
  		[
  			1297,
  			1297
  		],
  		"valid"
  	],
  	[
  		[
  			1298,
  			1298
  		],
  		"mapped",
  		[
  			1299
  		]
  	],
  	[
  		[
  			1299,
  			1299
  		],
  		"valid"
  	],
  	[
  		[
  			1300,
  			1300
  		],
  		"mapped",
  		[
  			1301
  		]
  	],
  	[
  		[
  			1301,
  			1301
  		],
  		"valid"
  	],
  	[
  		[
  			1302,
  			1302
  		],
  		"mapped",
  		[
  			1303
  		]
  	],
  	[
  		[
  			1303,
  			1303
  		],
  		"valid"
  	],
  	[
  		[
  			1304,
  			1304
  		],
  		"mapped",
  		[
  			1305
  		]
  	],
  	[
  		[
  			1305,
  			1305
  		],
  		"valid"
  	],
  	[
  		[
  			1306,
  			1306
  		],
  		"mapped",
  		[
  			1307
  		]
  	],
  	[
  		[
  			1307,
  			1307
  		],
  		"valid"
  	],
  	[
  		[
  			1308,
  			1308
  		],
  		"mapped",
  		[
  			1309
  		]
  	],
  	[
  		[
  			1309,
  			1309
  		],
  		"valid"
  	],
  	[
  		[
  			1310,
  			1310
  		],
  		"mapped",
  		[
  			1311
  		]
  	],
  	[
  		[
  			1311,
  			1311
  		],
  		"valid"
  	],
  	[
  		[
  			1312,
  			1312
  		],
  		"mapped",
  		[
  			1313
  		]
  	],
  	[
  		[
  			1313,
  			1313
  		],
  		"valid"
  	],
  	[
  		[
  			1314,
  			1314
  		],
  		"mapped",
  		[
  			1315
  		]
  	],
  	[
  		[
  			1315,
  			1315
  		],
  		"valid"
  	],
  	[
  		[
  			1316,
  			1316
  		],
  		"mapped",
  		[
  			1317
  		]
  	],
  	[
  		[
  			1317,
  			1317
  		],
  		"valid"
  	],
  	[
  		[
  			1318,
  			1318
  		],
  		"mapped",
  		[
  			1319
  		]
  	],
  	[
  		[
  			1319,
  			1319
  		],
  		"valid"
  	],
  	[
  		[
  			1320,
  			1320
  		],
  		"mapped",
  		[
  			1321
  		]
  	],
  	[
  		[
  			1321,
  			1321
  		],
  		"valid"
  	],
  	[
  		[
  			1322,
  			1322
  		],
  		"mapped",
  		[
  			1323
  		]
  	],
  	[
  		[
  			1323,
  			1323
  		],
  		"valid"
  	],
  	[
  		[
  			1324,
  			1324
  		],
  		"mapped",
  		[
  			1325
  		]
  	],
  	[
  		[
  			1325,
  			1325
  		],
  		"valid"
  	],
  	[
  		[
  			1326,
  			1326
  		],
  		"mapped",
  		[
  			1327
  		]
  	],
  	[
  		[
  			1327,
  			1327
  		],
  		"valid"
  	],
  	[
  		[
  			1328,
  			1328
  		],
  		"disallowed"
  	],
  	[
  		[
  			1329,
  			1329
  		],
  		"mapped",
  		[
  			1377
  		]
  	],
  	[
  		[
  			1330,
  			1330
  		],
  		"mapped",
  		[
  			1378
  		]
  	],
  	[
  		[
  			1331,
  			1331
  		],
  		"mapped",
  		[
  			1379
  		]
  	],
  	[
  		[
  			1332,
  			1332
  		],
  		"mapped",
  		[
  			1380
  		]
  	],
  	[
  		[
  			1333,
  			1333
  		],
  		"mapped",
  		[
  			1381
  		]
  	],
  	[
  		[
  			1334,
  			1334
  		],
  		"mapped",
  		[
  			1382
  		]
  	],
  	[
  		[
  			1335,
  			1335
  		],
  		"mapped",
  		[
  			1383
  		]
  	],
  	[
  		[
  			1336,
  			1336
  		],
  		"mapped",
  		[
  			1384
  		]
  	],
  	[
  		[
  			1337,
  			1337
  		],
  		"mapped",
  		[
  			1385
  		]
  	],
  	[
  		[
  			1338,
  			1338
  		],
  		"mapped",
  		[
  			1386
  		]
  	],
  	[
  		[
  			1339,
  			1339
  		],
  		"mapped",
  		[
  			1387
  		]
  	],
  	[
  		[
  			1340,
  			1340
  		],
  		"mapped",
  		[
  			1388
  		]
  	],
  	[
  		[
  			1341,
  			1341
  		],
  		"mapped",
  		[
  			1389
  		]
  	],
  	[
  		[
  			1342,
  			1342
  		],
  		"mapped",
  		[
  			1390
  		]
  	],
  	[
  		[
  			1343,
  			1343
  		],
  		"mapped",
  		[
  			1391
  		]
  	],
  	[
  		[
  			1344,
  			1344
  		],
  		"mapped",
  		[
  			1392
  		]
  	],
  	[
  		[
  			1345,
  			1345
  		],
  		"mapped",
  		[
  			1393
  		]
  	],
  	[
  		[
  			1346,
  			1346
  		],
  		"mapped",
  		[
  			1394
  		]
  	],
  	[
  		[
  			1347,
  			1347
  		],
  		"mapped",
  		[
  			1395
  		]
  	],
  	[
  		[
  			1348,
  			1348
  		],
  		"mapped",
  		[
  			1396
  		]
  	],
  	[
  		[
  			1349,
  			1349
  		],
  		"mapped",
  		[
  			1397
  		]
  	],
  	[
  		[
  			1350,
  			1350
  		],
  		"mapped",
  		[
  			1398
  		]
  	],
  	[
  		[
  			1351,
  			1351
  		],
  		"mapped",
  		[
  			1399
  		]
  	],
  	[
  		[
  			1352,
  			1352
  		],
  		"mapped",
  		[
  			1400
  		]
  	],
  	[
  		[
  			1353,
  			1353
  		],
  		"mapped",
  		[
  			1401
  		]
  	],
  	[
  		[
  			1354,
  			1354
  		],
  		"mapped",
  		[
  			1402
  		]
  	],
  	[
  		[
  			1355,
  			1355
  		],
  		"mapped",
  		[
  			1403
  		]
  	],
  	[
  		[
  			1356,
  			1356
  		],
  		"mapped",
  		[
  			1404
  		]
  	],
  	[
  		[
  			1357,
  			1357
  		],
  		"mapped",
  		[
  			1405
  		]
  	],
  	[
  		[
  			1358,
  			1358
  		],
  		"mapped",
  		[
  			1406
  		]
  	],
  	[
  		[
  			1359,
  			1359
  		],
  		"mapped",
  		[
  			1407
  		]
  	],
  	[
  		[
  			1360,
  			1360
  		],
  		"mapped",
  		[
  			1408
  		]
  	],
  	[
  		[
  			1361,
  			1361
  		],
  		"mapped",
  		[
  			1409
  		]
  	],
  	[
  		[
  			1362,
  			1362
  		],
  		"mapped",
  		[
  			1410
  		]
  	],
  	[
  		[
  			1363,
  			1363
  		],
  		"mapped",
  		[
  			1411
  		]
  	],
  	[
  		[
  			1364,
  			1364
  		],
  		"mapped",
  		[
  			1412
  		]
  	],
  	[
  		[
  			1365,
  			1365
  		],
  		"mapped",
  		[
  			1413
  		]
  	],
  	[
  		[
  			1366,
  			1366
  		],
  		"mapped",
  		[
  			1414
  		]
  	],
  	[
  		[
  			1367,
  			1368
  		],
  		"disallowed"
  	],
  	[
  		[
  			1369,
  			1369
  		],
  		"valid"
  	],
  	[
  		[
  			1370,
  			1375
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			1376,
  			1376
  		],
  		"disallowed"
  	],
  	[
  		[
  			1377,
  			1414
  		],
  		"valid"
  	],
  	[
  		[
  			1415,
  			1415
  		],
  		"mapped",
  		[
  			1381,
  			1410
  		]
  	],
  	[
  		[
  			1416,
  			1416
  		],
  		"disallowed"
  	],
  	[
  		[
  			1417,
  			1417
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			1418,
  			1418
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			1419,
  			1420
  		],
  		"disallowed"
  	],
  	[
  		[
  			1421,
  			1422
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			1423,
  			1423
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			1424,
  			1424
  		],
  		"disallowed"
  	],
  	[
  		[
  			1425,
  			1441
  		],
  		"valid"
  	],
  	[
  		[
  			1442,
  			1442
  		],
  		"valid"
  	],
  	[
  		[
  			1443,
  			1455
  		],
  		"valid"
  	],
  	[
  		[
  			1456,
  			1465
  		],
  		"valid"
  	],
  	[
  		[
  			1466,
  			1466
  		],
  		"valid"
  	],
  	[
  		[
  			1467,
  			1469
  		],
  		"valid"
  	],
  	[
  		[
  			1470,
  			1470
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			1471,
  			1471
  		],
  		"valid"
  	],
  	[
  		[
  			1472,
  			1472
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			1473,
  			1474
  		],
  		"valid"
  	],
  	[
  		[
  			1475,
  			1475
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			1476,
  			1476
  		],
  		"valid"
  	],
  	[
  		[
  			1477,
  			1477
  		],
  		"valid"
  	],
  	[
  		[
  			1478,
  			1478
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			1479,
  			1479
  		],
  		"valid"
  	],
  	[
  		[
  			1480,
  			1487
  		],
  		"disallowed"
  	],
  	[
  		[
  			1488,
  			1514
  		],
  		"valid"
  	],
  	[
  		[
  			1515,
  			1519
  		],
  		"disallowed"
  	],
  	[
  		[
  			1520,
  			1524
  		],
  		"valid"
  	],
  	[
  		[
  			1525,
  			1535
  		],
  		"disallowed"
  	],
  	[
  		[
  			1536,
  			1539
  		],
  		"disallowed"
  	],
  	[
  		[
  			1540,
  			1540
  		],
  		"disallowed"
  	],
  	[
  		[
  			1541,
  			1541
  		],
  		"disallowed"
  	],
  	[
  		[
  			1542,
  			1546
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			1547,
  			1547
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			1548,
  			1548
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			1549,
  			1551
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			1552,
  			1557
  		],
  		"valid"
  	],
  	[
  		[
  			1558,
  			1562
  		],
  		"valid"
  	],
  	[
  		[
  			1563,
  			1563
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			1564,
  			1564
  		],
  		"disallowed"
  	],
  	[
  		[
  			1565,
  			1565
  		],
  		"disallowed"
  	],
  	[
  		[
  			1566,
  			1566
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			1567,
  			1567
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			1568,
  			1568
  		],
  		"valid"
  	],
  	[
  		[
  			1569,
  			1594
  		],
  		"valid"
  	],
  	[
  		[
  			1595,
  			1599
  		],
  		"valid"
  	],
  	[
  		[
  			1600,
  			1600
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			1601,
  			1618
  		],
  		"valid"
  	],
  	[
  		[
  			1619,
  			1621
  		],
  		"valid"
  	],
  	[
  		[
  			1622,
  			1624
  		],
  		"valid"
  	],
  	[
  		[
  			1625,
  			1630
  		],
  		"valid"
  	],
  	[
  		[
  			1631,
  			1631
  		],
  		"valid"
  	],
  	[
  		[
  			1632,
  			1641
  		],
  		"valid"
  	],
  	[
  		[
  			1642,
  			1645
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			1646,
  			1647
  		],
  		"valid"
  	],
  	[
  		[
  			1648,
  			1652
  		],
  		"valid"
  	],
  	[
  		[
  			1653,
  			1653
  		],
  		"mapped",
  		[
  			1575,
  			1652
  		]
  	],
  	[
  		[
  			1654,
  			1654
  		],
  		"mapped",
  		[
  			1608,
  			1652
  		]
  	],
  	[
  		[
  			1655,
  			1655
  		],
  		"mapped",
  		[
  			1735,
  			1652
  		]
  	],
  	[
  		[
  			1656,
  			1656
  		],
  		"mapped",
  		[
  			1610,
  			1652
  		]
  	],
  	[
  		[
  			1657,
  			1719
  		],
  		"valid"
  	],
  	[
  		[
  			1720,
  			1721
  		],
  		"valid"
  	],
  	[
  		[
  			1722,
  			1726
  		],
  		"valid"
  	],
  	[
  		[
  			1727,
  			1727
  		],
  		"valid"
  	],
  	[
  		[
  			1728,
  			1742
  		],
  		"valid"
  	],
  	[
  		[
  			1743,
  			1743
  		],
  		"valid"
  	],
  	[
  		[
  			1744,
  			1747
  		],
  		"valid"
  	],
  	[
  		[
  			1748,
  			1748
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			1749,
  			1756
  		],
  		"valid"
  	],
  	[
  		[
  			1757,
  			1757
  		],
  		"disallowed"
  	],
  	[
  		[
  			1758,
  			1758
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			1759,
  			1768
  		],
  		"valid"
  	],
  	[
  		[
  			1769,
  			1769
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			1770,
  			1773
  		],
  		"valid"
  	],
  	[
  		[
  			1774,
  			1775
  		],
  		"valid"
  	],
  	[
  		[
  			1776,
  			1785
  		],
  		"valid"
  	],
  	[
  		[
  			1786,
  			1790
  		],
  		"valid"
  	],
  	[
  		[
  			1791,
  			1791
  		],
  		"valid"
  	],
  	[
  		[
  			1792,
  			1805
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			1806,
  			1806
  		],
  		"disallowed"
  	],
  	[
  		[
  			1807,
  			1807
  		],
  		"disallowed"
  	],
  	[
  		[
  			1808,
  			1836
  		],
  		"valid"
  	],
  	[
  		[
  			1837,
  			1839
  		],
  		"valid"
  	],
  	[
  		[
  			1840,
  			1866
  		],
  		"valid"
  	],
  	[
  		[
  			1867,
  			1868
  		],
  		"disallowed"
  	],
  	[
  		[
  			1869,
  			1871
  		],
  		"valid"
  	],
  	[
  		[
  			1872,
  			1901
  		],
  		"valid"
  	],
  	[
  		[
  			1902,
  			1919
  		],
  		"valid"
  	],
  	[
  		[
  			1920,
  			1968
  		],
  		"valid"
  	],
  	[
  		[
  			1969,
  			1969
  		],
  		"valid"
  	],
  	[
  		[
  			1970,
  			1983
  		],
  		"disallowed"
  	],
  	[
  		[
  			1984,
  			2037
  		],
  		"valid"
  	],
  	[
  		[
  			2038,
  			2042
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			2043,
  			2047
  		],
  		"disallowed"
  	],
  	[
  		[
  			2048,
  			2093
  		],
  		"valid"
  	],
  	[
  		[
  			2094,
  			2095
  		],
  		"disallowed"
  	],
  	[
  		[
  			2096,
  			2110
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			2111,
  			2111
  		],
  		"disallowed"
  	],
  	[
  		[
  			2112,
  			2139
  		],
  		"valid"
  	],
  	[
  		[
  			2140,
  			2141
  		],
  		"disallowed"
  	],
  	[
  		[
  			2142,
  			2142
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			2143,
  			2207
  		],
  		"disallowed"
  	],
  	[
  		[
  			2208,
  			2208
  		],
  		"valid"
  	],
  	[
  		[
  			2209,
  			2209
  		],
  		"valid"
  	],
  	[
  		[
  			2210,
  			2220
  		],
  		"valid"
  	],
  	[
  		[
  			2221,
  			2226
  		],
  		"valid"
  	],
  	[
  		[
  			2227,
  			2228
  		],
  		"valid"
  	],
  	[
  		[
  			2229,
  			2274
  		],
  		"disallowed"
  	],
  	[
  		[
  			2275,
  			2275
  		],
  		"valid"
  	],
  	[
  		[
  			2276,
  			2302
  		],
  		"valid"
  	],
  	[
  		[
  			2303,
  			2303
  		],
  		"valid"
  	],
  	[
  		[
  			2304,
  			2304
  		],
  		"valid"
  	],
  	[
  		[
  			2305,
  			2307
  		],
  		"valid"
  	],
  	[
  		[
  			2308,
  			2308
  		],
  		"valid"
  	],
  	[
  		[
  			2309,
  			2361
  		],
  		"valid"
  	],
  	[
  		[
  			2362,
  			2363
  		],
  		"valid"
  	],
  	[
  		[
  			2364,
  			2381
  		],
  		"valid"
  	],
  	[
  		[
  			2382,
  			2382
  		],
  		"valid"
  	],
  	[
  		[
  			2383,
  			2383
  		],
  		"valid"
  	],
  	[
  		[
  			2384,
  			2388
  		],
  		"valid"
  	],
  	[
  		[
  			2389,
  			2389
  		],
  		"valid"
  	],
  	[
  		[
  			2390,
  			2391
  		],
  		"valid"
  	],
  	[
  		[
  			2392,
  			2392
  		],
  		"mapped",
  		[
  			2325,
  			2364
  		]
  	],
  	[
  		[
  			2393,
  			2393
  		],
  		"mapped",
  		[
  			2326,
  			2364
  		]
  	],
  	[
  		[
  			2394,
  			2394
  		],
  		"mapped",
  		[
  			2327,
  			2364
  		]
  	],
  	[
  		[
  			2395,
  			2395
  		],
  		"mapped",
  		[
  			2332,
  			2364
  		]
  	],
  	[
  		[
  			2396,
  			2396
  		],
  		"mapped",
  		[
  			2337,
  			2364
  		]
  	],
  	[
  		[
  			2397,
  			2397
  		],
  		"mapped",
  		[
  			2338,
  			2364
  		]
  	],
  	[
  		[
  			2398,
  			2398
  		],
  		"mapped",
  		[
  			2347,
  			2364
  		]
  	],
  	[
  		[
  			2399,
  			2399
  		],
  		"mapped",
  		[
  			2351,
  			2364
  		]
  	],
  	[
  		[
  			2400,
  			2403
  		],
  		"valid"
  	],
  	[
  		[
  			2404,
  			2405
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			2406,
  			2415
  		],
  		"valid"
  	],
  	[
  		[
  			2416,
  			2416
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			2417,
  			2418
  		],
  		"valid"
  	],
  	[
  		[
  			2419,
  			2423
  		],
  		"valid"
  	],
  	[
  		[
  			2424,
  			2424
  		],
  		"valid"
  	],
  	[
  		[
  			2425,
  			2426
  		],
  		"valid"
  	],
  	[
  		[
  			2427,
  			2428
  		],
  		"valid"
  	],
  	[
  		[
  			2429,
  			2429
  		],
  		"valid"
  	],
  	[
  		[
  			2430,
  			2431
  		],
  		"valid"
  	],
  	[
  		[
  			2432,
  			2432
  		],
  		"valid"
  	],
  	[
  		[
  			2433,
  			2435
  		],
  		"valid"
  	],
  	[
  		[
  			2436,
  			2436
  		],
  		"disallowed"
  	],
  	[
  		[
  			2437,
  			2444
  		],
  		"valid"
  	],
  	[
  		[
  			2445,
  			2446
  		],
  		"disallowed"
  	],
  	[
  		[
  			2447,
  			2448
  		],
  		"valid"
  	],
  	[
  		[
  			2449,
  			2450
  		],
  		"disallowed"
  	],
  	[
  		[
  			2451,
  			2472
  		],
  		"valid"
  	],
  	[
  		[
  			2473,
  			2473
  		],
  		"disallowed"
  	],
  	[
  		[
  			2474,
  			2480
  		],
  		"valid"
  	],
  	[
  		[
  			2481,
  			2481
  		],
  		"disallowed"
  	],
  	[
  		[
  			2482,
  			2482
  		],
  		"valid"
  	],
  	[
  		[
  			2483,
  			2485
  		],
  		"disallowed"
  	],
  	[
  		[
  			2486,
  			2489
  		],
  		"valid"
  	],
  	[
  		[
  			2490,
  			2491
  		],
  		"disallowed"
  	],
  	[
  		[
  			2492,
  			2492
  		],
  		"valid"
  	],
  	[
  		[
  			2493,
  			2493
  		],
  		"valid"
  	],
  	[
  		[
  			2494,
  			2500
  		],
  		"valid"
  	],
  	[
  		[
  			2501,
  			2502
  		],
  		"disallowed"
  	],
  	[
  		[
  			2503,
  			2504
  		],
  		"valid"
  	],
  	[
  		[
  			2505,
  			2506
  		],
  		"disallowed"
  	],
  	[
  		[
  			2507,
  			2509
  		],
  		"valid"
  	],
  	[
  		[
  			2510,
  			2510
  		],
  		"valid"
  	],
  	[
  		[
  			2511,
  			2518
  		],
  		"disallowed"
  	],
  	[
  		[
  			2519,
  			2519
  		],
  		"valid"
  	],
  	[
  		[
  			2520,
  			2523
  		],
  		"disallowed"
  	],
  	[
  		[
  			2524,
  			2524
  		],
  		"mapped",
  		[
  			2465,
  			2492
  		]
  	],
  	[
  		[
  			2525,
  			2525
  		],
  		"mapped",
  		[
  			2466,
  			2492
  		]
  	],
  	[
  		[
  			2526,
  			2526
  		],
  		"disallowed"
  	],
  	[
  		[
  			2527,
  			2527
  		],
  		"mapped",
  		[
  			2479,
  			2492
  		]
  	],
  	[
  		[
  			2528,
  			2531
  		],
  		"valid"
  	],
  	[
  		[
  			2532,
  			2533
  		],
  		"disallowed"
  	],
  	[
  		[
  			2534,
  			2545
  		],
  		"valid"
  	],
  	[
  		[
  			2546,
  			2554
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			2555,
  			2555
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			2556,
  			2560
  		],
  		"disallowed"
  	],
  	[
  		[
  			2561,
  			2561
  		],
  		"valid"
  	],
  	[
  		[
  			2562,
  			2562
  		],
  		"valid"
  	],
  	[
  		[
  			2563,
  			2563
  		],
  		"valid"
  	],
  	[
  		[
  			2564,
  			2564
  		],
  		"disallowed"
  	],
  	[
  		[
  			2565,
  			2570
  		],
  		"valid"
  	],
  	[
  		[
  			2571,
  			2574
  		],
  		"disallowed"
  	],
  	[
  		[
  			2575,
  			2576
  		],
  		"valid"
  	],
  	[
  		[
  			2577,
  			2578
  		],
  		"disallowed"
  	],
  	[
  		[
  			2579,
  			2600
  		],
  		"valid"
  	],
  	[
  		[
  			2601,
  			2601
  		],
  		"disallowed"
  	],
  	[
  		[
  			2602,
  			2608
  		],
  		"valid"
  	],
  	[
  		[
  			2609,
  			2609
  		],
  		"disallowed"
  	],
  	[
  		[
  			2610,
  			2610
  		],
  		"valid"
  	],
  	[
  		[
  			2611,
  			2611
  		],
  		"mapped",
  		[
  			2610,
  			2620
  		]
  	],
  	[
  		[
  			2612,
  			2612
  		],
  		"disallowed"
  	],
  	[
  		[
  			2613,
  			2613
  		],
  		"valid"
  	],
  	[
  		[
  			2614,
  			2614
  		],
  		"mapped",
  		[
  			2616,
  			2620
  		]
  	],
  	[
  		[
  			2615,
  			2615
  		],
  		"disallowed"
  	],
  	[
  		[
  			2616,
  			2617
  		],
  		"valid"
  	],
  	[
  		[
  			2618,
  			2619
  		],
  		"disallowed"
  	],
  	[
  		[
  			2620,
  			2620
  		],
  		"valid"
  	],
  	[
  		[
  			2621,
  			2621
  		],
  		"disallowed"
  	],
  	[
  		[
  			2622,
  			2626
  		],
  		"valid"
  	],
  	[
  		[
  			2627,
  			2630
  		],
  		"disallowed"
  	],
  	[
  		[
  			2631,
  			2632
  		],
  		"valid"
  	],
  	[
  		[
  			2633,
  			2634
  		],
  		"disallowed"
  	],
  	[
  		[
  			2635,
  			2637
  		],
  		"valid"
  	],
  	[
  		[
  			2638,
  			2640
  		],
  		"disallowed"
  	],
  	[
  		[
  			2641,
  			2641
  		],
  		"valid"
  	],
  	[
  		[
  			2642,
  			2648
  		],
  		"disallowed"
  	],
  	[
  		[
  			2649,
  			2649
  		],
  		"mapped",
  		[
  			2582,
  			2620
  		]
  	],
  	[
  		[
  			2650,
  			2650
  		],
  		"mapped",
  		[
  			2583,
  			2620
  		]
  	],
  	[
  		[
  			2651,
  			2651
  		],
  		"mapped",
  		[
  			2588,
  			2620
  		]
  	],
  	[
  		[
  			2652,
  			2652
  		],
  		"valid"
  	],
  	[
  		[
  			2653,
  			2653
  		],
  		"disallowed"
  	],
  	[
  		[
  			2654,
  			2654
  		],
  		"mapped",
  		[
  			2603,
  			2620
  		]
  	],
  	[
  		[
  			2655,
  			2661
  		],
  		"disallowed"
  	],
  	[
  		[
  			2662,
  			2676
  		],
  		"valid"
  	],
  	[
  		[
  			2677,
  			2677
  		],
  		"valid"
  	],
  	[
  		[
  			2678,
  			2688
  		],
  		"disallowed"
  	],
  	[
  		[
  			2689,
  			2691
  		],
  		"valid"
  	],
  	[
  		[
  			2692,
  			2692
  		],
  		"disallowed"
  	],
  	[
  		[
  			2693,
  			2699
  		],
  		"valid"
  	],
  	[
  		[
  			2700,
  			2700
  		],
  		"valid"
  	],
  	[
  		[
  			2701,
  			2701
  		],
  		"valid"
  	],
  	[
  		[
  			2702,
  			2702
  		],
  		"disallowed"
  	],
  	[
  		[
  			2703,
  			2705
  		],
  		"valid"
  	],
  	[
  		[
  			2706,
  			2706
  		],
  		"disallowed"
  	],
  	[
  		[
  			2707,
  			2728
  		],
  		"valid"
  	],
  	[
  		[
  			2729,
  			2729
  		],
  		"disallowed"
  	],
  	[
  		[
  			2730,
  			2736
  		],
  		"valid"
  	],
  	[
  		[
  			2737,
  			2737
  		],
  		"disallowed"
  	],
  	[
  		[
  			2738,
  			2739
  		],
  		"valid"
  	],
  	[
  		[
  			2740,
  			2740
  		],
  		"disallowed"
  	],
  	[
  		[
  			2741,
  			2745
  		],
  		"valid"
  	],
  	[
  		[
  			2746,
  			2747
  		],
  		"disallowed"
  	],
  	[
  		[
  			2748,
  			2757
  		],
  		"valid"
  	],
  	[
  		[
  			2758,
  			2758
  		],
  		"disallowed"
  	],
  	[
  		[
  			2759,
  			2761
  		],
  		"valid"
  	],
  	[
  		[
  			2762,
  			2762
  		],
  		"disallowed"
  	],
  	[
  		[
  			2763,
  			2765
  		],
  		"valid"
  	],
  	[
  		[
  			2766,
  			2767
  		],
  		"disallowed"
  	],
  	[
  		[
  			2768,
  			2768
  		],
  		"valid"
  	],
  	[
  		[
  			2769,
  			2783
  		],
  		"disallowed"
  	],
  	[
  		[
  			2784,
  			2784
  		],
  		"valid"
  	],
  	[
  		[
  			2785,
  			2787
  		],
  		"valid"
  	],
  	[
  		[
  			2788,
  			2789
  		],
  		"disallowed"
  	],
  	[
  		[
  			2790,
  			2799
  		],
  		"valid"
  	],
  	[
  		[
  			2800,
  			2800
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			2801,
  			2801
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			2802,
  			2808
  		],
  		"disallowed"
  	],
  	[
  		[
  			2809,
  			2809
  		],
  		"valid"
  	],
  	[
  		[
  			2810,
  			2816
  		],
  		"disallowed"
  	],
  	[
  		[
  			2817,
  			2819
  		],
  		"valid"
  	],
  	[
  		[
  			2820,
  			2820
  		],
  		"disallowed"
  	],
  	[
  		[
  			2821,
  			2828
  		],
  		"valid"
  	],
  	[
  		[
  			2829,
  			2830
  		],
  		"disallowed"
  	],
  	[
  		[
  			2831,
  			2832
  		],
  		"valid"
  	],
  	[
  		[
  			2833,
  			2834
  		],
  		"disallowed"
  	],
  	[
  		[
  			2835,
  			2856
  		],
  		"valid"
  	],
  	[
  		[
  			2857,
  			2857
  		],
  		"disallowed"
  	],
  	[
  		[
  			2858,
  			2864
  		],
  		"valid"
  	],
  	[
  		[
  			2865,
  			2865
  		],
  		"disallowed"
  	],
  	[
  		[
  			2866,
  			2867
  		],
  		"valid"
  	],
  	[
  		[
  			2868,
  			2868
  		],
  		"disallowed"
  	],
  	[
  		[
  			2869,
  			2869
  		],
  		"valid"
  	],
  	[
  		[
  			2870,
  			2873
  		],
  		"valid"
  	],
  	[
  		[
  			2874,
  			2875
  		],
  		"disallowed"
  	],
  	[
  		[
  			2876,
  			2883
  		],
  		"valid"
  	],
  	[
  		[
  			2884,
  			2884
  		],
  		"valid"
  	],
  	[
  		[
  			2885,
  			2886
  		],
  		"disallowed"
  	],
  	[
  		[
  			2887,
  			2888
  		],
  		"valid"
  	],
  	[
  		[
  			2889,
  			2890
  		],
  		"disallowed"
  	],
  	[
  		[
  			2891,
  			2893
  		],
  		"valid"
  	],
  	[
  		[
  			2894,
  			2901
  		],
  		"disallowed"
  	],
  	[
  		[
  			2902,
  			2903
  		],
  		"valid"
  	],
  	[
  		[
  			2904,
  			2907
  		],
  		"disallowed"
  	],
  	[
  		[
  			2908,
  			2908
  		],
  		"mapped",
  		[
  			2849,
  			2876
  		]
  	],
  	[
  		[
  			2909,
  			2909
  		],
  		"mapped",
  		[
  			2850,
  			2876
  		]
  	],
  	[
  		[
  			2910,
  			2910
  		],
  		"disallowed"
  	],
  	[
  		[
  			2911,
  			2913
  		],
  		"valid"
  	],
  	[
  		[
  			2914,
  			2915
  		],
  		"valid"
  	],
  	[
  		[
  			2916,
  			2917
  		],
  		"disallowed"
  	],
  	[
  		[
  			2918,
  			2927
  		],
  		"valid"
  	],
  	[
  		[
  			2928,
  			2928
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			2929,
  			2929
  		],
  		"valid"
  	],
  	[
  		[
  			2930,
  			2935
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			2936,
  			2945
  		],
  		"disallowed"
  	],
  	[
  		[
  			2946,
  			2947
  		],
  		"valid"
  	],
  	[
  		[
  			2948,
  			2948
  		],
  		"disallowed"
  	],
  	[
  		[
  			2949,
  			2954
  		],
  		"valid"
  	],
  	[
  		[
  			2955,
  			2957
  		],
  		"disallowed"
  	],
  	[
  		[
  			2958,
  			2960
  		],
  		"valid"
  	],
  	[
  		[
  			2961,
  			2961
  		],
  		"disallowed"
  	],
  	[
  		[
  			2962,
  			2965
  		],
  		"valid"
  	],
  	[
  		[
  			2966,
  			2968
  		],
  		"disallowed"
  	],
  	[
  		[
  			2969,
  			2970
  		],
  		"valid"
  	],
  	[
  		[
  			2971,
  			2971
  		],
  		"disallowed"
  	],
  	[
  		[
  			2972,
  			2972
  		],
  		"valid"
  	],
  	[
  		[
  			2973,
  			2973
  		],
  		"disallowed"
  	],
  	[
  		[
  			2974,
  			2975
  		],
  		"valid"
  	],
  	[
  		[
  			2976,
  			2978
  		],
  		"disallowed"
  	],
  	[
  		[
  			2979,
  			2980
  		],
  		"valid"
  	],
  	[
  		[
  			2981,
  			2983
  		],
  		"disallowed"
  	],
  	[
  		[
  			2984,
  			2986
  		],
  		"valid"
  	],
  	[
  		[
  			2987,
  			2989
  		],
  		"disallowed"
  	],
  	[
  		[
  			2990,
  			2997
  		],
  		"valid"
  	],
  	[
  		[
  			2998,
  			2998
  		],
  		"valid"
  	],
  	[
  		[
  			2999,
  			3001
  		],
  		"valid"
  	],
  	[
  		[
  			3002,
  			3005
  		],
  		"disallowed"
  	],
  	[
  		[
  			3006,
  			3010
  		],
  		"valid"
  	],
  	[
  		[
  			3011,
  			3013
  		],
  		"disallowed"
  	],
  	[
  		[
  			3014,
  			3016
  		],
  		"valid"
  	],
  	[
  		[
  			3017,
  			3017
  		],
  		"disallowed"
  	],
  	[
  		[
  			3018,
  			3021
  		],
  		"valid"
  	],
  	[
  		[
  			3022,
  			3023
  		],
  		"disallowed"
  	],
  	[
  		[
  			3024,
  			3024
  		],
  		"valid"
  	],
  	[
  		[
  			3025,
  			3030
  		],
  		"disallowed"
  	],
  	[
  		[
  			3031,
  			3031
  		],
  		"valid"
  	],
  	[
  		[
  			3032,
  			3045
  		],
  		"disallowed"
  	],
  	[
  		[
  			3046,
  			3046
  		],
  		"valid"
  	],
  	[
  		[
  			3047,
  			3055
  		],
  		"valid"
  	],
  	[
  		[
  			3056,
  			3058
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			3059,
  			3066
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			3067,
  			3071
  		],
  		"disallowed"
  	],
  	[
  		[
  			3072,
  			3072
  		],
  		"valid"
  	],
  	[
  		[
  			3073,
  			3075
  		],
  		"valid"
  	],
  	[
  		[
  			3076,
  			3076
  		],
  		"disallowed"
  	],
  	[
  		[
  			3077,
  			3084
  		],
  		"valid"
  	],
  	[
  		[
  			3085,
  			3085
  		],
  		"disallowed"
  	],
  	[
  		[
  			3086,
  			3088
  		],
  		"valid"
  	],
  	[
  		[
  			3089,
  			3089
  		],
  		"disallowed"
  	],
  	[
  		[
  			3090,
  			3112
  		],
  		"valid"
  	],
  	[
  		[
  			3113,
  			3113
  		],
  		"disallowed"
  	],
  	[
  		[
  			3114,
  			3123
  		],
  		"valid"
  	],
  	[
  		[
  			3124,
  			3124
  		],
  		"valid"
  	],
  	[
  		[
  			3125,
  			3129
  		],
  		"valid"
  	],
  	[
  		[
  			3130,
  			3132
  		],
  		"disallowed"
  	],
  	[
  		[
  			3133,
  			3133
  		],
  		"valid"
  	],
  	[
  		[
  			3134,
  			3140
  		],
  		"valid"
  	],
  	[
  		[
  			3141,
  			3141
  		],
  		"disallowed"
  	],
  	[
  		[
  			3142,
  			3144
  		],
  		"valid"
  	],
  	[
  		[
  			3145,
  			3145
  		],
  		"disallowed"
  	],
  	[
  		[
  			3146,
  			3149
  		],
  		"valid"
  	],
  	[
  		[
  			3150,
  			3156
  		],
  		"disallowed"
  	],
  	[
  		[
  			3157,
  			3158
  		],
  		"valid"
  	],
  	[
  		[
  			3159,
  			3159
  		],
  		"disallowed"
  	],
  	[
  		[
  			3160,
  			3161
  		],
  		"valid"
  	],
  	[
  		[
  			3162,
  			3162
  		],
  		"valid"
  	],
  	[
  		[
  			3163,
  			3167
  		],
  		"disallowed"
  	],
  	[
  		[
  			3168,
  			3169
  		],
  		"valid"
  	],
  	[
  		[
  			3170,
  			3171
  		],
  		"valid"
  	],
  	[
  		[
  			3172,
  			3173
  		],
  		"disallowed"
  	],
  	[
  		[
  			3174,
  			3183
  		],
  		"valid"
  	],
  	[
  		[
  			3184,
  			3191
  		],
  		"disallowed"
  	],
  	[
  		[
  			3192,
  			3199
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			3200,
  			3200
  		],
  		"disallowed"
  	],
  	[
  		[
  			3201,
  			3201
  		],
  		"valid"
  	],
  	[
  		[
  			3202,
  			3203
  		],
  		"valid"
  	],
  	[
  		[
  			3204,
  			3204
  		],
  		"disallowed"
  	],
  	[
  		[
  			3205,
  			3212
  		],
  		"valid"
  	],
  	[
  		[
  			3213,
  			3213
  		],
  		"disallowed"
  	],
  	[
  		[
  			3214,
  			3216
  		],
  		"valid"
  	],
  	[
  		[
  			3217,
  			3217
  		],
  		"disallowed"
  	],
  	[
  		[
  			3218,
  			3240
  		],
  		"valid"
  	],
  	[
  		[
  			3241,
  			3241
  		],
  		"disallowed"
  	],
  	[
  		[
  			3242,
  			3251
  		],
  		"valid"
  	],
  	[
  		[
  			3252,
  			3252
  		],
  		"disallowed"
  	],
  	[
  		[
  			3253,
  			3257
  		],
  		"valid"
  	],
  	[
  		[
  			3258,
  			3259
  		],
  		"disallowed"
  	],
  	[
  		[
  			3260,
  			3261
  		],
  		"valid"
  	],
  	[
  		[
  			3262,
  			3268
  		],
  		"valid"
  	],
  	[
  		[
  			3269,
  			3269
  		],
  		"disallowed"
  	],
  	[
  		[
  			3270,
  			3272
  		],
  		"valid"
  	],
  	[
  		[
  			3273,
  			3273
  		],
  		"disallowed"
  	],
  	[
  		[
  			3274,
  			3277
  		],
  		"valid"
  	],
  	[
  		[
  			3278,
  			3284
  		],
  		"disallowed"
  	],
  	[
  		[
  			3285,
  			3286
  		],
  		"valid"
  	],
  	[
  		[
  			3287,
  			3293
  		],
  		"disallowed"
  	],
  	[
  		[
  			3294,
  			3294
  		],
  		"valid"
  	],
  	[
  		[
  			3295,
  			3295
  		],
  		"disallowed"
  	],
  	[
  		[
  			3296,
  			3297
  		],
  		"valid"
  	],
  	[
  		[
  			3298,
  			3299
  		],
  		"valid"
  	],
  	[
  		[
  			3300,
  			3301
  		],
  		"disallowed"
  	],
  	[
  		[
  			3302,
  			3311
  		],
  		"valid"
  	],
  	[
  		[
  			3312,
  			3312
  		],
  		"disallowed"
  	],
  	[
  		[
  			3313,
  			3314
  		],
  		"valid"
  	],
  	[
  		[
  			3315,
  			3328
  		],
  		"disallowed"
  	],
  	[
  		[
  			3329,
  			3329
  		],
  		"valid"
  	],
  	[
  		[
  			3330,
  			3331
  		],
  		"valid"
  	],
  	[
  		[
  			3332,
  			3332
  		],
  		"disallowed"
  	],
  	[
  		[
  			3333,
  			3340
  		],
  		"valid"
  	],
  	[
  		[
  			3341,
  			3341
  		],
  		"disallowed"
  	],
  	[
  		[
  			3342,
  			3344
  		],
  		"valid"
  	],
  	[
  		[
  			3345,
  			3345
  		],
  		"disallowed"
  	],
  	[
  		[
  			3346,
  			3368
  		],
  		"valid"
  	],
  	[
  		[
  			3369,
  			3369
  		],
  		"valid"
  	],
  	[
  		[
  			3370,
  			3385
  		],
  		"valid"
  	],
  	[
  		[
  			3386,
  			3386
  		],
  		"valid"
  	],
  	[
  		[
  			3387,
  			3388
  		],
  		"disallowed"
  	],
  	[
  		[
  			3389,
  			3389
  		],
  		"valid"
  	],
  	[
  		[
  			3390,
  			3395
  		],
  		"valid"
  	],
  	[
  		[
  			3396,
  			3396
  		],
  		"valid"
  	],
  	[
  		[
  			3397,
  			3397
  		],
  		"disallowed"
  	],
  	[
  		[
  			3398,
  			3400
  		],
  		"valid"
  	],
  	[
  		[
  			3401,
  			3401
  		],
  		"disallowed"
  	],
  	[
  		[
  			3402,
  			3405
  		],
  		"valid"
  	],
  	[
  		[
  			3406,
  			3406
  		],
  		"valid"
  	],
  	[
  		[
  			3407,
  			3414
  		],
  		"disallowed"
  	],
  	[
  		[
  			3415,
  			3415
  		],
  		"valid"
  	],
  	[
  		[
  			3416,
  			3422
  		],
  		"disallowed"
  	],
  	[
  		[
  			3423,
  			3423
  		],
  		"valid"
  	],
  	[
  		[
  			3424,
  			3425
  		],
  		"valid"
  	],
  	[
  		[
  			3426,
  			3427
  		],
  		"valid"
  	],
  	[
  		[
  			3428,
  			3429
  		],
  		"disallowed"
  	],
  	[
  		[
  			3430,
  			3439
  		],
  		"valid"
  	],
  	[
  		[
  			3440,
  			3445
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			3446,
  			3448
  		],
  		"disallowed"
  	],
  	[
  		[
  			3449,
  			3449
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			3450,
  			3455
  		],
  		"valid"
  	],
  	[
  		[
  			3456,
  			3457
  		],
  		"disallowed"
  	],
  	[
  		[
  			3458,
  			3459
  		],
  		"valid"
  	],
  	[
  		[
  			3460,
  			3460
  		],
  		"disallowed"
  	],
  	[
  		[
  			3461,
  			3478
  		],
  		"valid"
  	],
  	[
  		[
  			3479,
  			3481
  		],
  		"disallowed"
  	],
  	[
  		[
  			3482,
  			3505
  		],
  		"valid"
  	],
  	[
  		[
  			3506,
  			3506
  		],
  		"disallowed"
  	],
  	[
  		[
  			3507,
  			3515
  		],
  		"valid"
  	],
  	[
  		[
  			3516,
  			3516
  		],
  		"disallowed"
  	],
  	[
  		[
  			3517,
  			3517
  		],
  		"valid"
  	],
  	[
  		[
  			3518,
  			3519
  		],
  		"disallowed"
  	],
  	[
  		[
  			3520,
  			3526
  		],
  		"valid"
  	],
  	[
  		[
  			3527,
  			3529
  		],
  		"disallowed"
  	],
  	[
  		[
  			3530,
  			3530
  		],
  		"valid"
  	],
  	[
  		[
  			3531,
  			3534
  		],
  		"disallowed"
  	],
  	[
  		[
  			3535,
  			3540
  		],
  		"valid"
  	],
  	[
  		[
  			3541,
  			3541
  		],
  		"disallowed"
  	],
  	[
  		[
  			3542,
  			3542
  		],
  		"valid"
  	],
  	[
  		[
  			3543,
  			3543
  		],
  		"disallowed"
  	],
  	[
  		[
  			3544,
  			3551
  		],
  		"valid"
  	],
  	[
  		[
  			3552,
  			3557
  		],
  		"disallowed"
  	],
  	[
  		[
  			3558,
  			3567
  		],
  		"valid"
  	],
  	[
  		[
  			3568,
  			3569
  		],
  		"disallowed"
  	],
  	[
  		[
  			3570,
  			3571
  		],
  		"valid"
  	],
  	[
  		[
  			3572,
  			3572
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			3573,
  			3584
  		],
  		"disallowed"
  	],
  	[
  		[
  			3585,
  			3634
  		],
  		"valid"
  	],
  	[
  		[
  			3635,
  			3635
  		],
  		"mapped",
  		[
  			3661,
  			3634
  		]
  	],
  	[
  		[
  			3636,
  			3642
  		],
  		"valid"
  	],
  	[
  		[
  			3643,
  			3646
  		],
  		"disallowed"
  	],
  	[
  		[
  			3647,
  			3647
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			3648,
  			3662
  		],
  		"valid"
  	],
  	[
  		[
  			3663,
  			3663
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			3664,
  			3673
  		],
  		"valid"
  	],
  	[
  		[
  			3674,
  			3675
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			3676,
  			3712
  		],
  		"disallowed"
  	],
  	[
  		[
  			3713,
  			3714
  		],
  		"valid"
  	],
  	[
  		[
  			3715,
  			3715
  		],
  		"disallowed"
  	],
  	[
  		[
  			3716,
  			3716
  		],
  		"valid"
  	],
  	[
  		[
  			3717,
  			3718
  		],
  		"disallowed"
  	],
  	[
  		[
  			3719,
  			3720
  		],
  		"valid"
  	],
  	[
  		[
  			3721,
  			3721
  		],
  		"disallowed"
  	],
  	[
  		[
  			3722,
  			3722
  		],
  		"valid"
  	],
  	[
  		[
  			3723,
  			3724
  		],
  		"disallowed"
  	],
  	[
  		[
  			3725,
  			3725
  		],
  		"valid"
  	],
  	[
  		[
  			3726,
  			3731
  		],
  		"disallowed"
  	],
  	[
  		[
  			3732,
  			3735
  		],
  		"valid"
  	],
  	[
  		[
  			3736,
  			3736
  		],
  		"disallowed"
  	],
  	[
  		[
  			3737,
  			3743
  		],
  		"valid"
  	],
  	[
  		[
  			3744,
  			3744
  		],
  		"disallowed"
  	],
  	[
  		[
  			3745,
  			3747
  		],
  		"valid"
  	],
  	[
  		[
  			3748,
  			3748
  		],
  		"disallowed"
  	],
  	[
  		[
  			3749,
  			3749
  		],
  		"valid"
  	],
  	[
  		[
  			3750,
  			3750
  		],
  		"disallowed"
  	],
  	[
  		[
  			3751,
  			3751
  		],
  		"valid"
  	],
  	[
  		[
  			3752,
  			3753
  		],
  		"disallowed"
  	],
  	[
  		[
  			3754,
  			3755
  		],
  		"valid"
  	],
  	[
  		[
  			3756,
  			3756
  		],
  		"disallowed"
  	],
  	[
  		[
  			3757,
  			3762
  		],
  		"valid"
  	],
  	[
  		[
  			3763,
  			3763
  		],
  		"mapped",
  		[
  			3789,
  			3762
  		]
  	],
  	[
  		[
  			3764,
  			3769
  		],
  		"valid"
  	],
  	[
  		[
  			3770,
  			3770
  		],
  		"disallowed"
  	],
  	[
  		[
  			3771,
  			3773
  		],
  		"valid"
  	],
  	[
  		[
  			3774,
  			3775
  		],
  		"disallowed"
  	],
  	[
  		[
  			3776,
  			3780
  		],
  		"valid"
  	],
  	[
  		[
  			3781,
  			3781
  		],
  		"disallowed"
  	],
  	[
  		[
  			3782,
  			3782
  		],
  		"valid"
  	],
  	[
  		[
  			3783,
  			3783
  		],
  		"disallowed"
  	],
  	[
  		[
  			3784,
  			3789
  		],
  		"valid"
  	],
  	[
  		[
  			3790,
  			3791
  		],
  		"disallowed"
  	],
  	[
  		[
  			3792,
  			3801
  		],
  		"valid"
  	],
  	[
  		[
  			3802,
  			3803
  		],
  		"disallowed"
  	],
  	[
  		[
  			3804,
  			3804
  		],
  		"mapped",
  		[
  			3755,
  			3737
  		]
  	],
  	[
  		[
  			3805,
  			3805
  		],
  		"mapped",
  		[
  			3755,
  			3745
  		]
  	],
  	[
  		[
  			3806,
  			3807
  		],
  		"valid"
  	],
  	[
  		[
  			3808,
  			3839
  		],
  		"disallowed"
  	],
  	[
  		[
  			3840,
  			3840
  		],
  		"valid"
  	],
  	[
  		[
  			3841,
  			3850
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			3851,
  			3851
  		],
  		"valid"
  	],
  	[
  		[
  			3852,
  			3852
  		],
  		"mapped",
  		[
  			3851
  		]
  	],
  	[
  		[
  			3853,
  			3863
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			3864,
  			3865
  		],
  		"valid"
  	],
  	[
  		[
  			3866,
  			3871
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			3872,
  			3881
  		],
  		"valid"
  	],
  	[
  		[
  			3882,
  			3892
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			3893,
  			3893
  		],
  		"valid"
  	],
  	[
  		[
  			3894,
  			3894
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			3895,
  			3895
  		],
  		"valid"
  	],
  	[
  		[
  			3896,
  			3896
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			3897,
  			3897
  		],
  		"valid"
  	],
  	[
  		[
  			3898,
  			3901
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			3902,
  			3906
  		],
  		"valid"
  	],
  	[
  		[
  			3907,
  			3907
  		],
  		"mapped",
  		[
  			3906,
  			4023
  		]
  	],
  	[
  		[
  			3908,
  			3911
  		],
  		"valid"
  	],
  	[
  		[
  			3912,
  			3912
  		],
  		"disallowed"
  	],
  	[
  		[
  			3913,
  			3916
  		],
  		"valid"
  	],
  	[
  		[
  			3917,
  			3917
  		],
  		"mapped",
  		[
  			3916,
  			4023
  		]
  	],
  	[
  		[
  			3918,
  			3921
  		],
  		"valid"
  	],
  	[
  		[
  			3922,
  			3922
  		],
  		"mapped",
  		[
  			3921,
  			4023
  		]
  	],
  	[
  		[
  			3923,
  			3926
  		],
  		"valid"
  	],
  	[
  		[
  			3927,
  			3927
  		],
  		"mapped",
  		[
  			3926,
  			4023
  		]
  	],
  	[
  		[
  			3928,
  			3931
  		],
  		"valid"
  	],
  	[
  		[
  			3932,
  			3932
  		],
  		"mapped",
  		[
  			3931,
  			4023
  		]
  	],
  	[
  		[
  			3933,
  			3944
  		],
  		"valid"
  	],
  	[
  		[
  			3945,
  			3945
  		],
  		"mapped",
  		[
  			3904,
  			4021
  		]
  	],
  	[
  		[
  			3946,
  			3946
  		],
  		"valid"
  	],
  	[
  		[
  			3947,
  			3948
  		],
  		"valid"
  	],
  	[
  		[
  			3949,
  			3952
  		],
  		"disallowed"
  	],
  	[
  		[
  			3953,
  			3954
  		],
  		"valid"
  	],
  	[
  		[
  			3955,
  			3955
  		],
  		"mapped",
  		[
  			3953,
  			3954
  		]
  	],
  	[
  		[
  			3956,
  			3956
  		],
  		"valid"
  	],
  	[
  		[
  			3957,
  			3957
  		],
  		"mapped",
  		[
  			3953,
  			3956
  		]
  	],
  	[
  		[
  			3958,
  			3958
  		],
  		"mapped",
  		[
  			4018,
  			3968
  		]
  	],
  	[
  		[
  			3959,
  			3959
  		],
  		"mapped",
  		[
  			4018,
  			3953,
  			3968
  		]
  	],
  	[
  		[
  			3960,
  			3960
  		],
  		"mapped",
  		[
  			4019,
  			3968
  		]
  	],
  	[
  		[
  			3961,
  			3961
  		],
  		"mapped",
  		[
  			4019,
  			3953,
  			3968
  		]
  	],
  	[
  		[
  			3962,
  			3968
  		],
  		"valid"
  	],
  	[
  		[
  			3969,
  			3969
  		],
  		"mapped",
  		[
  			3953,
  			3968
  		]
  	],
  	[
  		[
  			3970,
  			3972
  		],
  		"valid"
  	],
  	[
  		[
  			3973,
  			3973
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			3974,
  			3979
  		],
  		"valid"
  	],
  	[
  		[
  			3980,
  			3983
  		],
  		"valid"
  	],
  	[
  		[
  			3984,
  			3986
  		],
  		"valid"
  	],
  	[
  		[
  			3987,
  			3987
  		],
  		"mapped",
  		[
  			3986,
  			4023
  		]
  	],
  	[
  		[
  			3988,
  			3989
  		],
  		"valid"
  	],
  	[
  		[
  			3990,
  			3990
  		],
  		"valid"
  	],
  	[
  		[
  			3991,
  			3991
  		],
  		"valid"
  	],
  	[
  		[
  			3992,
  			3992
  		],
  		"disallowed"
  	],
  	[
  		[
  			3993,
  			3996
  		],
  		"valid"
  	],
  	[
  		[
  			3997,
  			3997
  		],
  		"mapped",
  		[
  			3996,
  			4023
  		]
  	],
  	[
  		[
  			3998,
  			4001
  		],
  		"valid"
  	],
  	[
  		[
  			4002,
  			4002
  		],
  		"mapped",
  		[
  			4001,
  			4023
  		]
  	],
  	[
  		[
  			4003,
  			4006
  		],
  		"valid"
  	],
  	[
  		[
  			4007,
  			4007
  		],
  		"mapped",
  		[
  			4006,
  			4023
  		]
  	],
  	[
  		[
  			4008,
  			4011
  		],
  		"valid"
  	],
  	[
  		[
  			4012,
  			4012
  		],
  		"mapped",
  		[
  			4011,
  			4023
  		]
  	],
  	[
  		[
  			4013,
  			4013
  		],
  		"valid"
  	],
  	[
  		[
  			4014,
  			4016
  		],
  		"valid"
  	],
  	[
  		[
  			4017,
  			4023
  		],
  		"valid"
  	],
  	[
  		[
  			4024,
  			4024
  		],
  		"valid"
  	],
  	[
  		[
  			4025,
  			4025
  		],
  		"mapped",
  		[
  			3984,
  			4021
  		]
  	],
  	[
  		[
  			4026,
  			4028
  		],
  		"valid"
  	],
  	[
  		[
  			4029,
  			4029
  		],
  		"disallowed"
  	],
  	[
  		[
  			4030,
  			4037
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			4038,
  			4038
  		],
  		"valid"
  	],
  	[
  		[
  			4039,
  			4044
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			4045,
  			4045
  		],
  		"disallowed"
  	],
  	[
  		[
  			4046,
  			4046
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			4047,
  			4047
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			4048,
  			4049
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			4050,
  			4052
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			4053,
  			4056
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			4057,
  			4058
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			4059,
  			4095
  		],
  		"disallowed"
  	],
  	[
  		[
  			4096,
  			4129
  		],
  		"valid"
  	],
  	[
  		[
  			4130,
  			4130
  		],
  		"valid"
  	],
  	[
  		[
  			4131,
  			4135
  		],
  		"valid"
  	],
  	[
  		[
  			4136,
  			4136
  		],
  		"valid"
  	],
  	[
  		[
  			4137,
  			4138
  		],
  		"valid"
  	],
  	[
  		[
  			4139,
  			4139
  		],
  		"valid"
  	],
  	[
  		[
  			4140,
  			4146
  		],
  		"valid"
  	],
  	[
  		[
  			4147,
  			4149
  		],
  		"valid"
  	],
  	[
  		[
  			4150,
  			4153
  		],
  		"valid"
  	],
  	[
  		[
  			4154,
  			4159
  		],
  		"valid"
  	],
  	[
  		[
  			4160,
  			4169
  		],
  		"valid"
  	],
  	[
  		[
  			4170,
  			4175
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			4176,
  			4185
  		],
  		"valid"
  	],
  	[
  		[
  			4186,
  			4249
  		],
  		"valid"
  	],
  	[
  		[
  			4250,
  			4253
  		],
  		"valid"
  	],
  	[
  		[
  			4254,
  			4255
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			4256,
  			4293
  		],
  		"disallowed"
  	],
  	[
  		[
  			4294,
  			4294
  		],
  		"disallowed"
  	],
  	[
  		[
  			4295,
  			4295
  		],
  		"mapped",
  		[
  			11559
  		]
  	],
  	[
  		[
  			4296,
  			4300
  		],
  		"disallowed"
  	],
  	[
  		[
  			4301,
  			4301
  		],
  		"mapped",
  		[
  			11565
  		]
  	],
  	[
  		[
  			4302,
  			4303
  		],
  		"disallowed"
  	],
  	[
  		[
  			4304,
  			4342
  		],
  		"valid"
  	],
  	[
  		[
  			4343,
  			4344
  		],
  		"valid"
  	],
  	[
  		[
  			4345,
  			4346
  		],
  		"valid"
  	],
  	[
  		[
  			4347,
  			4347
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			4348,
  			4348
  		],
  		"mapped",
  		[
  			4316
  		]
  	],
  	[
  		[
  			4349,
  			4351
  		],
  		"valid"
  	],
  	[
  		[
  			4352,
  			4441
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			4442,
  			4446
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			4447,
  			4448
  		],
  		"disallowed"
  	],
  	[
  		[
  			4449,
  			4514
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			4515,
  			4519
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			4520,
  			4601
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			4602,
  			4607
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			4608,
  			4614
  		],
  		"valid"
  	],
  	[
  		[
  			4615,
  			4615
  		],
  		"valid"
  	],
  	[
  		[
  			4616,
  			4678
  		],
  		"valid"
  	],
  	[
  		[
  			4679,
  			4679
  		],
  		"valid"
  	],
  	[
  		[
  			4680,
  			4680
  		],
  		"valid"
  	],
  	[
  		[
  			4681,
  			4681
  		],
  		"disallowed"
  	],
  	[
  		[
  			4682,
  			4685
  		],
  		"valid"
  	],
  	[
  		[
  			4686,
  			4687
  		],
  		"disallowed"
  	],
  	[
  		[
  			4688,
  			4694
  		],
  		"valid"
  	],
  	[
  		[
  			4695,
  			4695
  		],
  		"disallowed"
  	],
  	[
  		[
  			4696,
  			4696
  		],
  		"valid"
  	],
  	[
  		[
  			4697,
  			4697
  		],
  		"disallowed"
  	],
  	[
  		[
  			4698,
  			4701
  		],
  		"valid"
  	],
  	[
  		[
  			4702,
  			4703
  		],
  		"disallowed"
  	],
  	[
  		[
  			4704,
  			4742
  		],
  		"valid"
  	],
  	[
  		[
  			4743,
  			4743
  		],
  		"valid"
  	],
  	[
  		[
  			4744,
  			4744
  		],
  		"valid"
  	],
  	[
  		[
  			4745,
  			4745
  		],
  		"disallowed"
  	],
  	[
  		[
  			4746,
  			4749
  		],
  		"valid"
  	],
  	[
  		[
  			4750,
  			4751
  		],
  		"disallowed"
  	],
  	[
  		[
  			4752,
  			4782
  		],
  		"valid"
  	],
  	[
  		[
  			4783,
  			4783
  		],
  		"valid"
  	],
  	[
  		[
  			4784,
  			4784
  		],
  		"valid"
  	],
  	[
  		[
  			4785,
  			4785
  		],
  		"disallowed"
  	],
  	[
  		[
  			4786,
  			4789
  		],
  		"valid"
  	],
  	[
  		[
  			4790,
  			4791
  		],
  		"disallowed"
  	],
  	[
  		[
  			4792,
  			4798
  		],
  		"valid"
  	],
  	[
  		[
  			4799,
  			4799
  		],
  		"disallowed"
  	],
  	[
  		[
  			4800,
  			4800
  		],
  		"valid"
  	],
  	[
  		[
  			4801,
  			4801
  		],
  		"disallowed"
  	],
  	[
  		[
  			4802,
  			4805
  		],
  		"valid"
  	],
  	[
  		[
  			4806,
  			4807
  		],
  		"disallowed"
  	],
  	[
  		[
  			4808,
  			4814
  		],
  		"valid"
  	],
  	[
  		[
  			4815,
  			4815
  		],
  		"valid"
  	],
  	[
  		[
  			4816,
  			4822
  		],
  		"valid"
  	],
  	[
  		[
  			4823,
  			4823
  		],
  		"disallowed"
  	],
  	[
  		[
  			4824,
  			4846
  		],
  		"valid"
  	],
  	[
  		[
  			4847,
  			4847
  		],
  		"valid"
  	],
  	[
  		[
  			4848,
  			4878
  		],
  		"valid"
  	],
  	[
  		[
  			4879,
  			4879
  		],
  		"valid"
  	],
  	[
  		[
  			4880,
  			4880
  		],
  		"valid"
  	],
  	[
  		[
  			4881,
  			4881
  		],
  		"disallowed"
  	],
  	[
  		[
  			4882,
  			4885
  		],
  		"valid"
  	],
  	[
  		[
  			4886,
  			4887
  		],
  		"disallowed"
  	],
  	[
  		[
  			4888,
  			4894
  		],
  		"valid"
  	],
  	[
  		[
  			4895,
  			4895
  		],
  		"valid"
  	],
  	[
  		[
  			4896,
  			4934
  		],
  		"valid"
  	],
  	[
  		[
  			4935,
  			4935
  		],
  		"valid"
  	],
  	[
  		[
  			4936,
  			4954
  		],
  		"valid"
  	],
  	[
  		[
  			4955,
  			4956
  		],
  		"disallowed"
  	],
  	[
  		[
  			4957,
  			4958
  		],
  		"valid"
  	],
  	[
  		[
  			4959,
  			4959
  		],
  		"valid"
  	],
  	[
  		[
  			4960,
  			4960
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			4961,
  			4988
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			4989,
  			4991
  		],
  		"disallowed"
  	],
  	[
  		[
  			4992,
  			5007
  		],
  		"valid"
  	],
  	[
  		[
  			5008,
  			5017
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			5018,
  			5023
  		],
  		"disallowed"
  	],
  	[
  		[
  			5024,
  			5108
  		],
  		"valid"
  	],
  	[
  		[
  			5109,
  			5109
  		],
  		"valid"
  	],
  	[
  		[
  			5110,
  			5111
  		],
  		"disallowed"
  	],
  	[
  		[
  			5112,
  			5112
  		],
  		"mapped",
  		[
  			5104
  		]
  	],
  	[
  		[
  			5113,
  			5113
  		],
  		"mapped",
  		[
  			5105
  		]
  	],
  	[
  		[
  			5114,
  			5114
  		],
  		"mapped",
  		[
  			5106
  		]
  	],
  	[
  		[
  			5115,
  			5115
  		],
  		"mapped",
  		[
  			5107
  		]
  	],
  	[
  		[
  			5116,
  			5116
  		],
  		"mapped",
  		[
  			5108
  		]
  	],
  	[
  		[
  			5117,
  			5117
  		],
  		"mapped",
  		[
  			5109
  		]
  	],
  	[
  		[
  			5118,
  			5119
  		],
  		"disallowed"
  	],
  	[
  		[
  			5120,
  			5120
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			5121,
  			5740
  		],
  		"valid"
  	],
  	[
  		[
  			5741,
  			5742
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			5743,
  			5750
  		],
  		"valid"
  	],
  	[
  		[
  			5751,
  			5759
  		],
  		"valid"
  	],
  	[
  		[
  			5760,
  			5760
  		],
  		"disallowed"
  	],
  	[
  		[
  			5761,
  			5786
  		],
  		"valid"
  	],
  	[
  		[
  			5787,
  			5788
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			5789,
  			5791
  		],
  		"disallowed"
  	],
  	[
  		[
  			5792,
  			5866
  		],
  		"valid"
  	],
  	[
  		[
  			5867,
  			5872
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			5873,
  			5880
  		],
  		"valid"
  	],
  	[
  		[
  			5881,
  			5887
  		],
  		"disallowed"
  	],
  	[
  		[
  			5888,
  			5900
  		],
  		"valid"
  	],
  	[
  		[
  			5901,
  			5901
  		],
  		"disallowed"
  	],
  	[
  		[
  			5902,
  			5908
  		],
  		"valid"
  	],
  	[
  		[
  			5909,
  			5919
  		],
  		"disallowed"
  	],
  	[
  		[
  			5920,
  			5940
  		],
  		"valid"
  	],
  	[
  		[
  			5941,
  			5942
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			5943,
  			5951
  		],
  		"disallowed"
  	],
  	[
  		[
  			5952,
  			5971
  		],
  		"valid"
  	],
  	[
  		[
  			5972,
  			5983
  		],
  		"disallowed"
  	],
  	[
  		[
  			5984,
  			5996
  		],
  		"valid"
  	],
  	[
  		[
  			5997,
  			5997
  		],
  		"disallowed"
  	],
  	[
  		[
  			5998,
  			6000
  		],
  		"valid"
  	],
  	[
  		[
  			6001,
  			6001
  		],
  		"disallowed"
  	],
  	[
  		[
  			6002,
  			6003
  		],
  		"valid"
  	],
  	[
  		[
  			6004,
  			6015
  		],
  		"disallowed"
  	],
  	[
  		[
  			6016,
  			6067
  		],
  		"valid"
  	],
  	[
  		[
  			6068,
  			6069
  		],
  		"disallowed"
  	],
  	[
  		[
  			6070,
  			6099
  		],
  		"valid"
  	],
  	[
  		[
  			6100,
  			6102
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			6103,
  			6103
  		],
  		"valid"
  	],
  	[
  		[
  			6104,
  			6107
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			6108,
  			6108
  		],
  		"valid"
  	],
  	[
  		[
  			6109,
  			6109
  		],
  		"valid"
  	],
  	[
  		[
  			6110,
  			6111
  		],
  		"disallowed"
  	],
  	[
  		[
  			6112,
  			6121
  		],
  		"valid"
  	],
  	[
  		[
  			6122,
  			6127
  		],
  		"disallowed"
  	],
  	[
  		[
  			6128,
  			6137
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			6138,
  			6143
  		],
  		"disallowed"
  	],
  	[
  		[
  			6144,
  			6149
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			6150,
  			6150
  		],
  		"disallowed"
  	],
  	[
  		[
  			6151,
  			6154
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			6155,
  			6157
  		],
  		"ignored"
  	],
  	[
  		[
  			6158,
  			6158
  		],
  		"disallowed"
  	],
  	[
  		[
  			6159,
  			6159
  		],
  		"disallowed"
  	],
  	[
  		[
  			6160,
  			6169
  		],
  		"valid"
  	],
  	[
  		[
  			6170,
  			6175
  		],
  		"disallowed"
  	],
  	[
  		[
  			6176,
  			6263
  		],
  		"valid"
  	],
  	[
  		[
  			6264,
  			6271
  		],
  		"disallowed"
  	],
  	[
  		[
  			6272,
  			6313
  		],
  		"valid"
  	],
  	[
  		[
  			6314,
  			6314
  		],
  		"valid"
  	],
  	[
  		[
  			6315,
  			6319
  		],
  		"disallowed"
  	],
  	[
  		[
  			6320,
  			6389
  		],
  		"valid"
  	],
  	[
  		[
  			6390,
  			6399
  		],
  		"disallowed"
  	],
  	[
  		[
  			6400,
  			6428
  		],
  		"valid"
  	],
  	[
  		[
  			6429,
  			6430
  		],
  		"valid"
  	],
  	[
  		[
  			6431,
  			6431
  		],
  		"disallowed"
  	],
  	[
  		[
  			6432,
  			6443
  		],
  		"valid"
  	],
  	[
  		[
  			6444,
  			6447
  		],
  		"disallowed"
  	],
  	[
  		[
  			6448,
  			6459
  		],
  		"valid"
  	],
  	[
  		[
  			6460,
  			6463
  		],
  		"disallowed"
  	],
  	[
  		[
  			6464,
  			6464
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			6465,
  			6467
  		],
  		"disallowed"
  	],
  	[
  		[
  			6468,
  			6469
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			6470,
  			6509
  		],
  		"valid"
  	],
  	[
  		[
  			6510,
  			6511
  		],
  		"disallowed"
  	],
  	[
  		[
  			6512,
  			6516
  		],
  		"valid"
  	],
  	[
  		[
  			6517,
  			6527
  		],
  		"disallowed"
  	],
  	[
  		[
  			6528,
  			6569
  		],
  		"valid"
  	],
  	[
  		[
  			6570,
  			6571
  		],
  		"valid"
  	],
  	[
  		[
  			6572,
  			6575
  		],
  		"disallowed"
  	],
  	[
  		[
  			6576,
  			6601
  		],
  		"valid"
  	],
  	[
  		[
  			6602,
  			6607
  		],
  		"disallowed"
  	],
  	[
  		[
  			6608,
  			6617
  		],
  		"valid"
  	],
  	[
  		[
  			6618,
  			6618
  		],
  		"valid",
  		[
  		],
  		"XV8"
  	],
  	[
  		[
  			6619,
  			6621
  		],
  		"disallowed"
  	],
  	[
  		[
  			6622,
  			6623
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			6624,
  			6655
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			6656,
  			6683
  		],
  		"valid"
  	],
  	[
  		[
  			6684,
  			6685
  		],
  		"disallowed"
  	],
  	[
  		[
  			6686,
  			6687
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			6688,
  			6750
  		],
  		"valid"
  	],
  	[
  		[
  			6751,
  			6751
  		],
  		"disallowed"
  	],
  	[
  		[
  			6752,
  			6780
  		],
  		"valid"
  	],
  	[
  		[
  			6781,
  			6782
  		],
  		"disallowed"
  	],
  	[
  		[
  			6783,
  			6793
  		],
  		"valid"
  	],
  	[
  		[
  			6794,
  			6799
  		],
  		"disallowed"
  	],
  	[
  		[
  			6800,
  			6809
  		],
  		"valid"
  	],
  	[
  		[
  			6810,
  			6815
  		],
  		"disallowed"
  	],
  	[
  		[
  			6816,
  			6822
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			6823,
  			6823
  		],
  		"valid"
  	],
  	[
  		[
  			6824,
  			6829
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			6830,
  			6831
  		],
  		"disallowed"
  	],
  	[
  		[
  			6832,
  			6845
  		],
  		"valid"
  	],
  	[
  		[
  			6846,
  			6846
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			6847,
  			6911
  		],
  		"disallowed"
  	],
  	[
  		[
  			6912,
  			6987
  		],
  		"valid"
  	],
  	[
  		[
  			6988,
  			6991
  		],
  		"disallowed"
  	],
  	[
  		[
  			6992,
  			7001
  		],
  		"valid"
  	],
  	[
  		[
  			7002,
  			7018
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			7019,
  			7027
  		],
  		"valid"
  	],
  	[
  		[
  			7028,
  			7036
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			7037,
  			7039
  		],
  		"disallowed"
  	],
  	[
  		[
  			7040,
  			7082
  		],
  		"valid"
  	],
  	[
  		[
  			7083,
  			7085
  		],
  		"valid"
  	],
  	[
  		[
  			7086,
  			7097
  		],
  		"valid"
  	],
  	[
  		[
  			7098,
  			7103
  		],
  		"valid"
  	],
  	[
  		[
  			7104,
  			7155
  		],
  		"valid"
  	],
  	[
  		[
  			7156,
  			7163
  		],
  		"disallowed"
  	],
  	[
  		[
  			7164,
  			7167
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			7168,
  			7223
  		],
  		"valid"
  	],
  	[
  		[
  			7224,
  			7226
  		],
  		"disallowed"
  	],
  	[
  		[
  			7227,
  			7231
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			7232,
  			7241
  		],
  		"valid"
  	],
  	[
  		[
  			7242,
  			7244
  		],
  		"disallowed"
  	],
  	[
  		[
  			7245,
  			7293
  		],
  		"valid"
  	],
  	[
  		[
  			7294,
  			7295
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			7296,
  			7359
  		],
  		"disallowed"
  	],
  	[
  		[
  			7360,
  			7367
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			7368,
  			7375
  		],
  		"disallowed"
  	],
  	[
  		[
  			7376,
  			7378
  		],
  		"valid"
  	],
  	[
  		[
  			7379,
  			7379
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			7380,
  			7410
  		],
  		"valid"
  	],
  	[
  		[
  			7411,
  			7414
  		],
  		"valid"
  	],
  	[
  		[
  			7415,
  			7415
  		],
  		"disallowed"
  	],
  	[
  		[
  			7416,
  			7417
  		],
  		"valid"
  	],
  	[
  		[
  			7418,
  			7423
  		],
  		"disallowed"
  	],
  	[
  		[
  			7424,
  			7467
  		],
  		"valid"
  	],
  	[
  		[
  			7468,
  			7468
  		],
  		"mapped",
  		[
  			97
  		]
  	],
  	[
  		[
  			7469,
  			7469
  		],
  		"mapped",
  		[
  			230
  		]
  	],
  	[
  		[
  			7470,
  			7470
  		],
  		"mapped",
  		[
  			98
  		]
  	],
  	[
  		[
  			7471,
  			7471
  		],
  		"valid"
  	],
  	[
  		[
  			7472,
  			7472
  		],
  		"mapped",
  		[
  			100
  		]
  	],
  	[
  		[
  			7473,
  			7473
  		],
  		"mapped",
  		[
  			101
  		]
  	],
  	[
  		[
  			7474,
  			7474
  		],
  		"mapped",
  		[
  			477
  		]
  	],
  	[
  		[
  			7475,
  			7475
  		],
  		"mapped",
  		[
  			103
  		]
  	],
  	[
  		[
  			7476,
  			7476
  		],
  		"mapped",
  		[
  			104
  		]
  	],
  	[
  		[
  			7477,
  			7477
  		],
  		"mapped",
  		[
  			105
  		]
  	],
  	[
  		[
  			7478,
  			7478
  		],
  		"mapped",
  		[
  			106
  		]
  	],
  	[
  		[
  			7479,
  			7479
  		],
  		"mapped",
  		[
  			107
  		]
  	],
  	[
  		[
  			7480,
  			7480
  		],
  		"mapped",
  		[
  			108
  		]
  	],
  	[
  		[
  			7481,
  			7481
  		],
  		"mapped",
  		[
  			109
  		]
  	],
  	[
  		[
  			7482,
  			7482
  		],
  		"mapped",
  		[
  			110
  		]
  	],
  	[
  		[
  			7483,
  			7483
  		],
  		"valid"
  	],
  	[
  		[
  			7484,
  			7484
  		],
  		"mapped",
  		[
  			111
  		]
  	],
  	[
  		[
  			7485,
  			7485
  		],
  		"mapped",
  		[
  			547
  		]
  	],
  	[
  		[
  			7486,
  			7486
  		],
  		"mapped",
  		[
  			112
  		]
  	],
  	[
  		[
  			7487,
  			7487
  		],
  		"mapped",
  		[
  			114
  		]
  	],
  	[
  		[
  			7488,
  			7488
  		],
  		"mapped",
  		[
  			116
  		]
  	],
  	[
  		[
  			7489,
  			7489
  		],
  		"mapped",
  		[
  			117
  		]
  	],
  	[
  		[
  			7490,
  			7490
  		],
  		"mapped",
  		[
  			119
  		]
  	],
  	[
  		[
  			7491,
  			7491
  		],
  		"mapped",
  		[
  			97
  		]
  	],
  	[
  		[
  			7492,
  			7492
  		],
  		"mapped",
  		[
  			592
  		]
  	],
  	[
  		[
  			7493,
  			7493
  		],
  		"mapped",
  		[
  			593
  		]
  	],
  	[
  		[
  			7494,
  			7494
  		],
  		"mapped",
  		[
  			7426
  		]
  	],
  	[
  		[
  			7495,
  			7495
  		],
  		"mapped",
  		[
  			98
  		]
  	],
  	[
  		[
  			7496,
  			7496
  		],
  		"mapped",
  		[
  			100
  		]
  	],
  	[
  		[
  			7497,
  			7497
  		],
  		"mapped",
  		[
  			101
  		]
  	],
  	[
  		[
  			7498,
  			7498
  		],
  		"mapped",
  		[
  			601
  		]
  	],
  	[
  		[
  			7499,
  			7499
  		],
  		"mapped",
  		[
  			603
  		]
  	],
  	[
  		[
  			7500,
  			7500
  		],
  		"mapped",
  		[
  			604
  		]
  	],
  	[
  		[
  			7501,
  			7501
  		],
  		"mapped",
  		[
  			103
  		]
  	],
  	[
  		[
  			7502,
  			7502
  		],
  		"valid"
  	],
  	[
  		[
  			7503,
  			7503
  		],
  		"mapped",
  		[
  			107
  		]
  	],
  	[
  		[
  			7504,
  			7504
  		],
  		"mapped",
  		[
  			109
  		]
  	],
  	[
  		[
  			7505,
  			7505
  		],
  		"mapped",
  		[
  			331
  		]
  	],
  	[
  		[
  			7506,
  			7506
  		],
  		"mapped",
  		[
  			111
  		]
  	],
  	[
  		[
  			7507,
  			7507
  		],
  		"mapped",
  		[
  			596
  		]
  	],
  	[
  		[
  			7508,
  			7508
  		],
  		"mapped",
  		[
  			7446
  		]
  	],
  	[
  		[
  			7509,
  			7509
  		],
  		"mapped",
  		[
  			7447
  		]
  	],
  	[
  		[
  			7510,
  			7510
  		],
  		"mapped",
  		[
  			112
  		]
  	],
  	[
  		[
  			7511,
  			7511
  		],
  		"mapped",
  		[
  			116
  		]
  	],
  	[
  		[
  			7512,
  			7512
  		],
  		"mapped",
  		[
  			117
  		]
  	],
  	[
  		[
  			7513,
  			7513
  		],
  		"mapped",
  		[
  			7453
  		]
  	],
  	[
  		[
  			7514,
  			7514
  		],
  		"mapped",
  		[
  			623
  		]
  	],
  	[
  		[
  			7515,
  			7515
  		],
  		"mapped",
  		[
  			118
  		]
  	],
  	[
  		[
  			7516,
  			7516
  		],
  		"mapped",
  		[
  			7461
  		]
  	],
  	[
  		[
  			7517,
  			7517
  		],
  		"mapped",
  		[
  			946
  		]
  	],
  	[
  		[
  			7518,
  			7518
  		],
  		"mapped",
  		[
  			947
  		]
  	],
  	[
  		[
  			7519,
  			7519
  		],
  		"mapped",
  		[
  			948
  		]
  	],
  	[
  		[
  			7520,
  			7520
  		],
  		"mapped",
  		[
  			966
  		]
  	],
  	[
  		[
  			7521,
  			7521
  		],
  		"mapped",
  		[
  			967
  		]
  	],
  	[
  		[
  			7522,
  			7522
  		],
  		"mapped",
  		[
  			105
  		]
  	],
  	[
  		[
  			7523,
  			7523
  		],
  		"mapped",
  		[
  			114
  		]
  	],
  	[
  		[
  			7524,
  			7524
  		],
  		"mapped",
  		[
  			117
  		]
  	],
  	[
  		[
  			7525,
  			7525
  		],
  		"mapped",
  		[
  			118
  		]
  	],
  	[
  		[
  			7526,
  			7526
  		],
  		"mapped",
  		[
  			946
  		]
  	],
  	[
  		[
  			7527,
  			7527
  		],
  		"mapped",
  		[
  			947
  		]
  	],
  	[
  		[
  			7528,
  			7528
  		],
  		"mapped",
  		[
  			961
  		]
  	],
  	[
  		[
  			7529,
  			7529
  		],
  		"mapped",
  		[
  			966
  		]
  	],
  	[
  		[
  			7530,
  			7530
  		],
  		"mapped",
  		[
  			967
  		]
  	],
  	[
  		[
  			7531,
  			7531
  		],
  		"valid"
  	],
  	[
  		[
  			7532,
  			7543
  		],
  		"valid"
  	],
  	[
  		[
  			7544,
  			7544
  		],
  		"mapped",
  		[
  			1085
  		]
  	],
  	[
  		[
  			7545,
  			7578
  		],
  		"valid"
  	],
  	[
  		[
  			7579,
  			7579
  		],
  		"mapped",
  		[
  			594
  		]
  	],
  	[
  		[
  			7580,
  			7580
  		],
  		"mapped",
  		[
  			99
  		]
  	],
  	[
  		[
  			7581,
  			7581
  		],
  		"mapped",
  		[
  			597
  		]
  	],
  	[
  		[
  			7582,
  			7582
  		],
  		"mapped",
  		[
  			240
  		]
  	],
  	[
  		[
  			7583,
  			7583
  		],
  		"mapped",
  		[
  			604
  		]
  	],
  	[
  		[
  			7584,
  			7584
  		],
  		"mapped",
  		[
  			102
  		]
  	],
  	[
  		[
  			7585,
  			7585
  		],
  		"mapped",
  		[
  			607
  		]
  	],
  	[
  		[
  			7586,
  			7586
  		],
  		"mapped",
  		[
  			609
  		]
  	],
  	[
  		[
  			7587,
  			7587
  		],
  		"mapped",
  		[
  			613
  		]
  	],
  	[
  		[
  			7588,
  			7588
  		],
  		"mapped",
  		[
  			616
  		]
  	],
  	[
  		[
  			7589,
  			7589
  		],
  		"mapped",
  		[
  			617
  		]
  	],
  	[
  		[
  			7590,
  			7590
  		],
  		"mapped",
  		[
  			618
  		]
  	],
  	[
  		[
  			7591,
  			7591
  		],
  		"mapped",
  		[
  			7547
  		]
  	],
  	[
  		[
  			7592,
  			7592
  		],
  		"mapped",
  		[
  			669
  		]
  	],
  	[
  		[
  			7593,
  			7593
  		],
  		"mapped",
  		[
  			621
  		]
  	],
  	[
  		[
  			7594,
  			7594
  		],
  		"mapped",
  		[
  			7557
  		]
  	],
  	[
  		[
  			7595,
  			7595
  		],
  		"mapped",
  		[
  			671
  		]
  	],
  	[
  		[
  			7596,
  			7596
  		],
  		"mapped",
  		[
  			625
  		]
  	],
  	[
  		[
  			7597,
  			7597
  		],
  		"mapped",
  		[
  			624
  		]
  	],
  	[
  		[
  			7598,
  			7598
  		],
  		"mapped",
  		[
  			626
  		]
  	],
  	[
  		[
  			7599,
  			7599
  		],
  		"mapped",
  		[
  			627
  		]
  	],
  	[
  		[
  			7600,
  			7600
  		],
  		"mapped",
  		[
  			628
  		]
  	],
  	[
  		[
  			7601,
  			7601
  		],
  		"mapped",
  		[
  			629
  		]
  	],
  	[
  		[
  			7602,
  			7602
  		],
  		"mapped",
  		[
  			632
  		]
  	],
  	[
  		[
  			7603,
  			7603
  		],
  		"mapped",
  		[
  			642
  		]
  	],
  	[
  		[
  			7604,
  			7604
  		],
  		"mapped",
  		[
  			643
  		]
  	],
  	[
  		[
  			7605,
  			7605
  		],
  		"mapped",
  		[
  			427
  		]
  	],
  	[
  		[
  			7606,
  			7606
  		],
  		"mapped",
  		[
  			649
  		]
  	],
  	[
  		[
  			7607,
  			7607
  		],
  		"mapped",
  		[
  			650
  		]
  	],
  	[
  		[
  			7608,
  			7608
  		],
  		"mapped",
  		[
  			7452
  		]
  	],
  	[
  		[
  			7609,
  			7609
  		],
  		"mapped",
  		[
  			651
  		]
  	],
  	[
  		[
  			7610,
  			7610
  		],
  		"mapped",
  		[
  			652
  		]
  	],
  	[
  		[
  			7611,
  			7611
  		],
  		"mapped",
  		[
  			122
  		]
  	],
  	[
  		[
  			7612,
  			7612
  		],
  		"mapped",
  		[
  			656
  		]
  	],
  	[
  		[
  			7613,
  			7613
  		],
  		"mapped",
  		[
  			657
  		]
  	],
  	[
  		[
  			7614,
  			7614
  		],
  		"mapped",
  		[
  			658
  		]
  	],
  	[
  		[
  			7615,
  			7615
  		],
  		"mapped",
  		[
  			952
  		]
  	],
  	[
  		[
  			7616,
  			7619
  		],
  		"valid"
  	],
  	[
  		[
  			7620,
  			7626
  		],
  		"valid"
  	],
  	[
  		[
  			7627,
  			7654
  		],
  		"valid"
  	],
  	[
  		[
  			7655,
  			7669
  		],
  		"valid"
  	],
  	[
  		[
  			7670,
  			7675
  		],
  		"disallowed"
  	],
  	[
  		[
  			7676,
  			7676
  		],
  		"valid"
  	],
  	[
  		[
  			7677,
  			7677
  		],
  		"valid"
  	],
  	[
  		[
  			7678,
  			7679
  		],
  		"valid"
  	],
  	[
  		[
  			7680,
  			7680
  		],
  		"mapped",
  		[
  			7681
  		]
  	],
  	[
  		[
  			7681,
  			7681
  		],
  		"valid"
  	],
  	[
  		[
  			7682,
  			7682
  		],
  		"mapped",
  		[
  			7683
  		]
  	],
  	[
  		[
  			7683,
  			7683
  		],
  		"valid"
  	],
  	[
  		[
  			7684,
  			7684
  		],
  		"mapped",
  		[
  			7685
  		]
  	],
  	[
  		[
  			7685,
  			7685
  		],
  		"valid"
  	],
  	[
  		[
  			7686,
  			7686
  		],
  		"mapped",
  		[
  			7687
  		]
  	],
  	[
  		[
  			7687,
  			7687
  		],
  		"valid"
  	],
  	[
  		[
  			7688,
  			7688
  		],
  		"mapped",
  		[
  			7689
  		]
  	],
  	[
  		[
  			7689,
  			7689
  		],
  		"valid"
  	],
  	[
  		[
  			7690,
  			7690
  		],
  		"mapped",
  		[
  			7691
  		]
  	],
  	[
  		[
  			7691,
  			7691
  		],
  		"valid"
  	],
  	[
  		[
  			7692,
  			7692
  		],
  		"mapped",
  		[
  			7693
  		]
  	],
  	[
  		[
  			7693,
  			7693
  		],
  		"valid"
  	],
  	[
  		[
  			7694,
  			7694
  		],
  		"mapped",
  		[
  			7695
  		]
  	],
  	[
  		[
  			7695,
  			7695
  		],
  		"valid"
  	],
  	[
  		[
  			7696,
  			7696
  		],
  		"mapped",
  		[
  			7697
  		]
  	],
  	[
  		[
  			7697,
  			7697
  		],
  		"valid"
  	],
  	[
  		[
  			7698,
  			7698
  		],
  		"mapped",
  		[
  			7699
  		]
  	],
  	[
  		[
  			7699,
  			7699
  		],
  		"valid"
  	],
  	[
  		[
  			7700,
  			7700
  		],
  		"mapped",
  		[
  			7701
  		]
  	],
  	[
  		[
  			7701,
  			7701
  		],
  		"valid"
  	],
  	[
  		[
  			7702,
  			7702
  		],
  		"mapped",
  		[
  			7703
  		]
  	],
  	[
  		[
  			7703,
  			7703
  		],
  		"valid"
  	],
  	[
  		[
  			7704,
  			7704
  		],
  		"mapped",
  		[
  			7705
  		]
  	],
  	[
  		[
  			7705,
  			7705
  		],
  		"valid"
  	],
  	[
  		[
  			7706,
  			7706
  		],
  		"mapped",
  		[
  			7707
  		]
  	],
  	[
  		[
  			7707,
  			7707
  		],
  		"valid"
  	],
  	[
  		[
  			7708,
  			7708
  		],
  		"mapped",
  		[
  			7709
  		]
  	],
  	[
  		[
  			7709,
  			7709
  		],
  		"valid"
  	],
  	[
  		[
  			7710,
  			7710
  		],
  		"mapped",
  		[
  			7711
  		]
  	],
  	[
  		[
  			7711,
  			7711
  		],
  		"valid"
  	],
  	[
  		[
  			7712,
  			7712
  		],
  		"mapped",
  		[
  			7713
  		]
  	],
  	[
  		[
  			7713,
  			7713
  		],
  		"valid"
  	],
  	[
  		[
  			7714,
  			7714
  		],
  		"mapped",
  		[
  			7715
  		]
  	],
  	[
  		[
  			7715,
  			7715
  		],
  		"valid"
  	],
  	[
  		[
  			7716,
  			7716
  		],
  		"mapped",
  		[
  			7717
  		]
  	],
  	[
  		[
  			7717,
  			7717
  		],
  		"valid"
  	],
  	[
  		[
  			7718,
  			7718
  		],
  		"mapped",
  		[
  			7719
  		]
  	],
  	[
  		[
  			7719,
  			7719
  		],
  		"valid"
  	],
  	[
  		[
  			7720,
  			7720
  		],
  		"mapped",
  		[
  			7721
  		]
  	],
  	[
  		[
  			7721,
  			7721
  		],
  		"valid"
  	],
  	[
  		[
  			7722,
  			7722
  		],
  		"mapped",
  		[
  			7723
  		]
  	],
  	[
  		[
  			7723,
  			7723
  		],
  		"valid"
  	],
  	[
  		[
  			7724,
  			7724
  		],
  		"mapped",
  		[
  			7725
  		]
  	],
  	[
  		[
  			7725,
  			7725
  		],
  		"valid"
  	],
  	[
  		[
  			7726,
  			7726
  		],
  		"mapped",
  		[
  			7727
  		]
  	],
  	[
  		[
  			7727,
  			7727
  		],
  		"valid"
  	],
  	[
  		[
  			7728,
  			7728
  		],
  		"mapped",
  		[
  			7729
  		]
  	],
  	[
  		[
  			7729,
  			7729
  		],
  		"valid"
  	],
  	[
  		[
  			7730,
  			7730
  		],
  		"mapped",
  		[
  			7731
  		]
  	],
  	[
  		[
  			7731,
  			7731
  		],
  		"valid"
  	],
  	[
  		[
  			7732,
  			7732
  		],
  		"mapped",
  		[
  			7733
  		]
  	],
  	[
  		[
  			7733,
  			7733
  		],
  		"valid"
  	],
  	[
  		[
  			7734,
  			7734
  		],
  		"mapped",
  		[
  			7735
  		]
  	],
  	[
  		[
  			7735,
  			7735
  		],
  		"valid"
  	],
  	[
  		[
  			7736,
  			7736
  		],
  		"mapped",
  		[
  			7737
  		]
  	],
  	[
  		[
  			7737,
  			7737
  		],
  		"valid"
  	],
  	[
  		[
  			7738,
  			7738
  		],
  		"mapped",
  		[
  			7739
  		]
  	],
  	[
  		[
  			7739,
  			7739
  		],
  		"valid"
  	],
  	[
  		[
  			7740,
  			7740
  		],
  		"mapped",
  		[
  			7741
  		]
  	],
  	[
  		[
  			7741,
  			7741
  		],
  		"valid"
  	],
  	[
  		[
  			7742,
  			7742
  		],
  		"mapped",
  		[
  			7743
  		]
  	],
  	[
  		[
  			7743,
  			7743
  		],
  		"valid"
  	],
  	[
  		[
  			7744,
  			7744
  		],
  		"mapped",
  		[
  			7745
  		]
  	],
  	[
  		[
  			7745,
  			7745
  		],
  		"valid"
  	],
  	[
  		[
  			7746,
  			7746
  		],
  		"mapped",
  		[
  			7747
  		]
  	],
  	[
  		[
  			7747,
  			7747
  		],
  		"valid"
  	],
  	[
  		[
  			7748,
  			7748
  		],
  		"mapped",
  		[
  			7749
  		]
  	],
  	[
  		[
  			7749,
  			7749
  		],
  		"valid"
  	],
  	[
  		[
  			7750,
  			7750
  		],
  		"mapped",
  		[
  			7751
  		]
  	],
  	[
  		[
  			7751,
  			7751
  		],
  		"valid"
  	],
  	[
  		[
  			7752,
  			7752
  		],
  		"mapped",
  		[
  			7753
  		]
  	],
  	[
  		[
  			7753,
  			7753
  		],
  		"valid"
  	],
  	[
  		[
  			7754,
  			7754
  		],
  		"mapped",
  		[
  			7755
  		]
  	],
  	[
  		[
  			7755,
  			7755
  		],
  		"valid"
  	],
  	[
  		[
  			7756,
  			7756
  		],
  		"mapped",
  		[
  			7757
  		]
  	],
  	[
  		[
  			7757,
  			7757
  		],
  		"valid"
  	],
  	[
  		[
  			7758,
  			7758
  		],
  		"mapped",
  		[
  			7759
  		]
  	],
  	[
  		[
  			7759,
  			7759
  		],
  		"valid"
  	],
  	[
  		[
  			7760,
  			7760
  		],
  		"mapped",
  		[
  			7761
  		]
  	],
  	[
  		[
  			7761,
  			7761
  		],
  		"valid"
  	],
  	[
  		[
  			7762,
  			7762
  		],
  		"mapped",
  		[
  			7763
  		]
  	],
  	[
  		[
  			7763,
  			7763
  		],
  		"valid"
  	],
  	[
  		[
  			7764,
  			7764
  		],
  		"mapped",
  		[
  			7765
  		]
  	],
  	[
  		[
  			7765,
  			7765
  		],
  		"valid"
  	],
  	[
  		[
  			7766,
  			7766
  		],
  		"mapped",
  		[
  			7767
  		]
  	],
  	[
  		[
  			7767,
  			7767
  		],
  		"valid"
  	],
  	[
  		[
  			7768,
  			7768
  		],
  		"mapped",
  		[
  			7769
  		]
  	],
  	[
  		[
  			7769,
  			7769
  		],
  		"valid"
  	],
  	[
  		[
  			7770,
  			7770
  		],
  		"mapped",
  		[
  			7771
  		]
  	],
  	[
  		[
  			7771,
  			7771
  		],
  		"valid"
  	],
  	[
  		[
  			7772,
  			7772
  		],
  		"mapped",
  		[
  			7773
  		]
  	],
  	[
  		[
  			7773,
  			7773
  		],
  		"valid"
  	],
  	[
  		[
  			7774,
  			7774
  		],
  		"mapped",
  		[
  			7775
  		]
  	],
  	[
  		[
  			7775,
  			7775
  		],
  		"valid"
  	],
  	[
  		[
  			7776,
  			7776
  		],
  		"mapped",
  		[
  			7777
  		]
  	],
  	[
  		[
  			7777,
  			7777
  		],
  		"valid"
  	],
  	[
  		[
  			7778,
  			7778
  		],
  		"mapped",
  		[
  			7779
  		]
  	],
  	[
  		[
  			7779,
  			7779
  		],
  		"valid"
  	],
  	[
  		[
  			7780,
  			7780
  		],
  		"mapped",
  		[
  			7781
  		]
  	],
  	[
  		[
  			7781,
  			7781
  		],
  		"valid"
  	],
  	[
  		[
  			7782,
  			7782
  		],
  		"mapped",
  		[
  			7783
  		]
  	],
  	[
  		[
  			7783,
  			7783
  		],
  		"valid"
  	],
  	[
  		[
  			7784,
  			7784
  		],
  		"mapped",
  		[
  			7785
  		]
  	],
  	[
  		[
  			7785,
  			7785
  		],
  		"valid"
  	],
  	[
  		[
  			7786,
  			7786
  		],
  		"mapped",
  		[
  			7787
  		]
  	],
  	[
  		[
  			7787,
  			7787
  		],
  		"valid"
  	],
  	[
  		[
  			7788,
  			7788
  		],
  		"mapped",
  		[
  			7789
  		]
  	],
  	[
  		[
  			7789,
  			7789
  		],
  		"valid"
  	],
  	[
  		[
  			7790,
  			7790
  		],
  		"mapped",
  		[
  			7791
  		]
  	],
  	[
  		[
  			7791,
  			7791
  		],
  		"valid"
  	],
  	[
  		[
  			7792,
  			7792
  		],
  		"mapped",
  		[
  			7793
  		]
  	],
  	[
  		[
  			7793,
  			7793
  		],
  		"valid"
  	],
  	[
  		[
  			7794,
  			7794
  		],
  		"mapped",
  		[
  			7795
  		]
  	],
  	[
  		[
  			7795,
  			7795
  		],
  		"valid"
  	],
  	[
  		[
  			7796,
  			7796
  		],
  		"mapped",
  		[
  			7797
  		]
  	],
  	[
  		[
  			7797,
  			7797
  		],
  		"valid"
  	],
  	[
  		[
  			7798,
  			7798
  		],
  		"mapped",
  		[
  			7799
  		]
  	],
  	[
  		[
  			7799,
  			7799
  		],
  		"valid"
  	],
  	[
  		[
  			7800,
  			7800
  		],
  		"mapped",
  		[
  			7801
  		]
  	],
  	[
  		[
  			7801,
  			7801
  		],
  		"valid"
  	],
  	[
  		[
  			7802,
  			7802
  		],
  		"mapped",
  		[
  			7803
  		]
  	],
  	[
  		[
  			7803,
  			7803
  		],
  		"valid"
  	],
  	[
  		[
  			7804,
  			7804
  		],
  		"mapped",
  		[
  			7805
  		]
  	],
  	[
  		[
  			7805,
  			7805
  		],
  		"valid"
  	],
  	[
  		[
  			7806,
  			7806
  		],
  		"mapped",
  		[
  			7807
  		]
  	],
  	[
  		[
  			7807,
  			7807
  		],
  		"valid"
  	],
  	[
  		[
  			7808,
  			7808
  		],
  		"mapped",
  		[
  			7809
  		]
  	],
  	[
  		[
  			7809,
  			7809
  		],
  		"valid"
  	],
  	[
  		[
  			7810,
  			7810
  		],
  		"mapped",
  		[
  			7811
  		]
  	],
  	[
  		[
  			7811,
  			7811
  		],
  		"valid"
  	],
  	[
  		[
  			7812,
  			7812
  		],
  		"mapped",
  		[
  			7813
  		]
  	],
  	[
  		[
  			7813,
  			7813
  		],
  		"valid"
  	],
  	[
  		[
  			7814,
  			7814
  		],
  		"mapped",
  		[
  			7815
  		]
  	],
  	[
  		[
  			7815,
  			7815
  		],
  		"valid"
  	],
  	[
  		[
  			7816,
  			7816
  		],
  		"mapped",
  		[
  			7817
  		]
  	],
  	[
  		[
  			7817,
  			7817
  		],
  		"valid"
  	],
  	[
  		[
  			7818,
  			7818
  		],
  		"mapped",
  		[
  			7819
  		]
  	],
  	[
  		[
  			7819,
  			7819
  		],
  		"valid"
  	],
  	[
  		[
  			7820,
  			7820
  		],
  		"mapped",
  		[
  			7821
  		]
  	],
  	[
  		[
  			7821,
  			7821
  		],
  		"valid"
  	],
  	[
  		[
  			7822,
  			7822
  		],
  		"mapped",
  		[
  			7823
  		]
  	],
  	[
  		[
  			7823,
  			7823
  		],
  		"valid"
  	],
  	[
  		[
  			7824,
  			7824
  		],
  		"mapped",
  		[
  			7825
  		]
  	],
  	[
  		[
  			7825,
  			7825
  		],
  		"valid"
  	],
  	[
  		[
  			7826,
  			7826
  		],
  		"mapped",
  		[
  			7827
  		]
  	],
  	[
  		[
  			7827,
  			7827
  		],
  		"valid"
  	],
  	[
  		[
  			7828,
  			7828
  		],
  		"mapped",
  		[
  			7829
  		]
  	],
  	[
  		[
  			7829,
  			7833
  		],
  		"valid"
  	],
  	[
  		[
  			7834,
  			7834
  		],
  		"mapped",
  		[
  			97,
  			702
  		]
  	],
  	[
  		[
  			7835,
  			7835
  		],
  		"mapped",
  		[
  			7777
  		]
  	],
  	[
  		[
  			7836,
  			7837
  		],
  		"valid"
  	],
  	[
  		[
  			7838,
  			7838
  		],
  		"mapped",
  		[
  			115,
  			115
  		]
  	],
  	[
  		[
  			7839,
  			7839
  		],
  		"valid"
  	],
  	[
  		[
  			7840,
  			7840
  		],
  		"mapped",
  		[
  			7841
  		]
  	],
  	[
  		[
  			7841,
  			7841
  		],
  		"valid"
  	],
  	[
  		[
  			7842,
  			7842
  		],
  		"mapped",
  		[
  			7843
  		]
  	],
  	[
  		[
  			7843,
  			7843
  		],
  		"valid"
  	],
  	[
  		[
  			7844,
  			7844
  		],
  		"mapped",
  		[
  			7845
  		]
  	],
  	[
  		[
  			7845,
  			7845
  		],
  		"valid"
  	],
  	[
  		[
  			7846,
  			7846
  		],
  		"mapped",
  		[
  			7847
  		]
  	],
  	[
  		[
  			7847,
  			7847
  		],
  		"valid"
  	],
  	[
  		[
  			7848,
  			7848
  		],
  		"mapped",
  		[
  			7849
  		]
  	],
  	[
  		[
  			7849,
  			7849
  		],
  		"valid"
  	],
  	[
  		[
  			7850,
  			7850
  		],
  		"mapped",
  		[
  			7851
  		]
  	],
  	[
  		[
  			7851,
  			7851
  		],
  		"valid"
  	],
  	[
  		[
  			7852,
  			7852
  		],
  		"mapped",
  		[
  			7853
  		]
  	],
  	[
  		[
  			7853,
  			7853
  		],
  		"valid"
  	],
  	[
  		[
  			7854,
  			7854
  		],
  		"mapped",
  		[
  			7855
  		]
  	],
  	[
  		[
  			7855,
  			7855
  		],
  		"valid"
  	],
  	[
  		[
  			7856,
  			7856
  		],
  		"mapped",
  		[
  			7857
  		]
  	],
  	[
  		[
  			7857,
  			7857
  		],
  		"valid"
  	],
  	[
  		[
  			7858,
  			7858
  		],
  		"mapped",
  		[
  			7859
  		]
  	],
  	[
  		[
  			7859,
  			7859
  		],
  		"valid"
  	],
  	[
  		[
  			7860,
  			7860
  		],
  		"mapped",
  		[
  			7861
  		]
  	],
  	[
  		[
  			7861,
  			7861
  		],
  		"valid"
  	],
  	[
  		[
  			7862,
  			7862
  		],
  		"mapped",
  		[
  			7863
  		]
  	],
  	[
  		[
  			7863,
  			7863
  		],
  		"valid"
  	],
  	[
  		[
  			7864,
  			7864
  		],
  		"mapped",
  		[
  			7865
  		]
  	],
  	[
  		[
  			7865,
  			7865
  		],
  		"valid"
  	],
  	[
  		[
  			7866,
  			7866
  		],
  		"mapped",
  		[
  			7867
  		]
  	],
  	[
  		[
  			7867,
  			7867
  		],
  		"valid"
  	],
  	[
  		[
  			7868,
  			7868
  		],
  		"mapped",
  		[
  			7869
  		]
  	],
  	[
  		[
  			7869,
  			7869
  		],
  		"valid"
  	],
  	[
  		[
  			7870,
  			7870
  		],
  		"mapped",
  		[
  			7871
  		]
  	],
  	[
  		[
  			7871,
  			7871
  		],
  		"valid"
  	],
  	[
  		[
  			7872,
  			7872
  		],
  		"mapped",
  		[
  			7873
  		]
  	],
  	[
  		[
  			7873,
  			7873
  		],
  		"valid"
  	],
  	[
  		[
  			7874,
  			7874
  		],
  		"mapped",
  		[
  			7875
  		]
  	],
  	[
  		[
  			7875,
  			7875
  		],
  		"valid"
  	],
  	[
  		[
  			7876,
  			7876
  		],
  		"mapped",
  		[
  			7877
  		]
  	],
  	[
  		[
  			7877,
  			7877
  		],
  		"valid"
  	],
  	[
  		[
  			7878,
  			7878
  		],
  		"mapped",
  		[
  			7879
  		]
  	],
  	[
  		[
  			7879,
  			7879
  		],
  		"valid"
  	],
  	[
  		[
  			7880,
  			7880
  		],
  		"mapped",
  		[
  			7881
  		]
  	],
  	[
  		[
  			7881,
  			7881
  		],
  		"valid"
  	],
  	[
  		[
  			7882,
  			7882
  		],
  		"mapped",
  		[
  			7883
  		]
  	],
  	[
  		[
  			7883,
  			7883
  		],
  		"valid"
  	],
  	[
  		[
  			7884,
  			7884
  		],
  		"mapped",
  		[
  			7885
  		]
  	],
  	[
  		[
  			7885,
  			7885
  		],
  		"valid"
  	],
  	[
  		[
  			7886,
  			7886
  		],
  		"mapped",
  		[
  			7887
  		]
  	],
  	[
  		[
  			7887,
  			7887
  		],
  		"valid"
  	],
  	[
  		[
  			7888,
  			7888
  		],
  		"mapped",
  		[
  			7889
  		]
  	],
  	[
  		[
  			7889,
  			7889
  		],
  		"valid"
  	],
  	[
  		[
  			7890,
  			7890
  		],
  		"mapped",
  		[
  			7891
  		]
  	],
  	[
  		[
  			7891,
  			7891
  		],
  		"valid"
  	],
  	[
  		[
  			7892,
  			7892
  		],
  		"mapped",
  		[
  			7893
  		]
  	],
  	[
  		[
  			7893,
  			7893
  		],
  		"valid"
  	],
  	[
  		[
  			7894,
  			7894
  		],
  		"mapped",
  		[
  			7895
  		]
  	],
  	[
  		[
  			7895,
  			7895
  		],
  		"valid"
  	],
  	[
  		[
  			7896,
  			7896
  		],
  		"mapped",
  		[
  			7897
  		]
  	],
  	[
  		[
  			7897,
  			7897
  		],
  		"valid"
  	],
  	[
  		[
  			7898,
  			7898
  		],
  		"mapped",
  		[
  			7899
  		]
  	],
  	[
  		[
  			7899,
  			7899
  		],
  		"valid"
  	],
  	[
  		[
  			7900,
  			7900
  		],
  		"mapped",
  		[
  			7901
  		]
  	],
  	[
  		[
  			7901,
  			7901
  		],
  		"valid"
  	],
  	[
  		[
  			7902,
  			7902
  		],
  		"mapped",
  		[
  			7903
  		]
  	],
  	[
  		[
  			7903,
  			7903
  		],
  		"valid"
  	],
  	[
  		[
  			7904,
  			7904
  		],
  		"mapped",
  		[
  			7905
  		]
  	],
  	[
  		[
  			7905,
  			7905
  		],
  		"valid"
  	],
  	[
  		[
  			7906,
  			7906
  		],
  		"mapped",
  		[
  			7907
  		]
  	],
  	[
  		[
  			7907,
  			7907
  		],
  		"valid"
  	],
  	[
  		[
  			7908,
  			7908
  		],
  		"mapped",
  		[
  			7909
  		]
  	],
  	[
  		[
  			7909,
  			7909
  		],
  		"valid"
  	],
  	[
  		[
  			7910,
  			7910
  		],
  		"mapped",
  		[
  			7911
  		]
  	],
  	[
  		[
  			7911,
  			7911
  		],
  		"valid"
  	],
  	[
  		[
  			7912,
  			7912
  		],
  		"mapped",
  		[
  			7913
  		]
  	],
  	[
  		[
  			7913,
  			7913
  		],
  		"valid"
  	],
  	[
  		[
  			7914,
  			7914
  		],
  		"mapped",
  		[
  			7915
  		]
  	],
  	[
  		[
  			7915,
  			7915
  		],
  		"valid"
  	],
  	[
  		[
  			7916,
  			7916
  		],
  		"mapped",
  		[
  			7917
  		]
  	],
  	[
  		[
  			7917,
  			7917
  		],
  		"valid"
  	],
  	[
  		[
  			7918,
  			7918
  		],
  		"mapped",
  		[
  			7919
  		]
  	],
  	[
  		[
  			7919,
  			7919
  		],
  		"valid"
  	],
  	[
  		[
  			7920,
  			7920
  		],
  		"mapped",
  		[
  			7921
  		]
  	],
  	[
  		[
  			7921,
  			7921
  		],
  		"valid"
  	],
  	[
  		[
  			7922,
  			7922
  		],
  		"mapped",
  		[
  			7923
  		]
  	],
  	[
  		[
  			7923,
  			7923
  		],
  		"valid"
  	],
  	[
  		[
  			7924,
  			7924
  		],
  		"mapped",
  		[
  			7925
  		]
  	],
  	[
  		[
  			7925,
  			7925
  		],
  		"valid"
  	],
  	[
  		[
  			7926,
  			7926
  		],
  		"mapped",
  		[
  			7927
  		]
  	],
  	[
  		[
  			7927,
  			7927
  		],
  		"valid"
  	],
  	[
  		[
  			7928,
  			7928
  		],
  		"mapped",
  		[
  			7929
  		]
  	],
  	[
  		[
  			7929,
  			7929
  		],
  		"valid"
  	],
  	[
  		[
  			7930,
  			7930
  		],
  		"mapped",
  		[
  			7931
  		]
  	],
  	[
  		[
  			7931,
  			7931
  		],
  		"valid"
  	],
  	[
  		[
  			7932,
  			7932
  		],
  		"mapped",
  		[
  			7933
  		]
  	],
  	[
  		[
  			7933,
  			7933
  		],
  		"valid"
  	],
  	[
  		[
  			7934,
  			7934
  		],
  		"mapped",
  		[
  			7935
  		]
  	],
  	[
  		[
  			7935,
  			7935
  		],
  		"valid"
  	],
  	[
  		[
  			7936,
  			7943
  		],
  		"valid"
  	],
  	[
  		[
  			7944,
  			7944
  		],
  		"mapped",
  		[
  			7936
  		]
  	],
  	[
  		[
  			7945,
  			7945
  		],
  		"mapped",
  		[
  			7937
  		]
  	],
  	[
  		[
  			7946,
  			7946
  		],
  		"mapped",
  		[
  			7938
  		]
  	],
  	[
  		[
  			7947,
  			7947
  		],
  		"mapped",
  		[
  			7939
  		]
  	],
  	[
  		[
  			7948,
  			7948
  		],
  		"mapped",
  		[
  			7940
  		]
  	],
  	[
  		[
  			7949,
  			7949
  		],
  		"mapped",
  		[
  			7941
  		]
  	],
  	[
  		[
  			7950,
  			7950
  		],
  		"mapped",
  		[
  			7942
  		]
  	],
  	[
  		[
  			7951,
  			7951
  		],
  		"mapped",
  		[
  			7943
  		]
  	],
  	[
  		[
  			7952,
  			7957
  		],
  		"valid"
  	],
  	[
  		[
  			7958,
  			7959
  		],
  		"disallowed"
  	],
  	[
  		[
  			7960,
  			7960
  		],
  		"mapped",
  		[
  			7952
  		]
  	],
  	[
  		[
  			7961,
  			7961
  		],
  		"mapped",
  		[
  			7953
  		]
  	],
  	[
  		[
  			7962,
  			7962
  		],
  		"mapped",
  		[
  			7954
  		]
  	],
  	[
  		[
  			7963,
  			7963
  		],
  		"mapped",
  		[
  			7955
  		]
  	],
  	[
  		[
  			7964,
  			7964
  		],
  		"mapped",
  		[
  			7956
  		]
  	],
  	[
  		[
  			7965,
  			7965
  		],
  		"mapped",
  		[
  			7957
  		]
  	],
  	[
  		[
  			7966,
  			7967
  		],
  		"disallowed"
  	],
  	[
  		[
  			7968,
  			7975
  		],
  		"valid"
  	],
  	[
  		[
  			7976,
  			7976
  		],
  		"mapped",
  		[
  			7968
  		]
  	],
  	[
  		[
  			7977,
  			7977
  		],
  		"mapped",
  		[
  			7969
  		]
  	],
  	[
  		[
  			7978,
  			7978
  		],
  		"mapped",
  		[
  			7970
  		]
  	],
  	[
  		[
  			7979,
  			7979
  		],
  		"mapped",
  		[
  			7971
  		]
  	],
  	[
  		[
  			7980,
  			7980
  		],
  		"mapped",
  		[
  			7972
  		]
  	],
  	[
  		[
  			7981,
  			7981
  		],
  		"mapped",
  		[
  			7973
  		]
  	],
  	[
  		[
  			7982,
  			7982
  		],
  		"mapped",
  		[
  			7974
  		]
  	],
  	[
  		[
  			7983,
  			7983
  		],
  		"mapped",
  		[
  			7975
  		]
  	],
  	[
  		[
  			7984,
  			7991
  		],
  		"valid"
  	],
  	[
  		[
  			7992,
  			7992
  		],
  		"mapped",
  		[
  			7984
  		]
  	],
  	[
  		[
  			7993,
  			7993
  		],
  		"mapped",
  		[
  			7985
  		]
  	],
  	[
  		[
  			7994,
  			7994
  		],
  		"mapped",
  		[
  			7986
  		]
  	],
  	[
  		[
  			7995,
  			7995
  		],
  		"mapped",
  		[
  			7987
  		]
  	],
  	[
  		[
  			7996,
  			7996
  		],
  		"mapped",
  		[
  			7988
  		]
  	],
  	[
  		[
  			7997,
  			7997
  		],
  		"mapped",
  		[
  			7989
  		]
  	],
  	[
  		[
  			7998,
  			7998
  		],
  		"mapped",
  		[
  			7990
  		]
  	],
  	[
  		[
  			7999,
  			7999
  		],
  		"mapped",
  		[
  			7991
  		]
  	],
  	[
  		[
  			8000,
  			8005
  		],
  		"valid"
  	],
  	[
  		[
  			8006,
  			8007
  		],
  		"disallowed"
  	],
  	[
  		[
  			8008,
  			8008
  		],
  		"mapped",
  		[
  			8000
  		]
  	],
  	[
  		[
  			8009,
  			8009
  		],
  		"mapped",
  		[
  			8001
  		]
  	],
  	[
  		[
  			8010,
  			8010
  		],
  		"mapped",
  		[
  			8002
  		]
  	],
  	[
  		[
  			8011,
  			8011
  		],
  		"mapped",
  		[
  			8003
  		]
  	],
  	[
  		[
  			8012,
  			8012
  		],
  		"mapped",
  		[
  			8004
  		]
  	],
  	[
  		[
  			8013,
  			8013
  		],
  		"mapped",
  		[
  			8005
  		]
  	],
  	[
  		[
  			8014,
  			8015
  		],
  		"disallowed"
  	],
  	[
  		[
  			8016,
  			8023
  		],
  		"valid"
  	],
  	[
  		[
  			8024,
  			8024
  		],
  		"disallowed"
  	],
  	[
  		[
  			8025,
  			8025
  		],
  		"mapped",
  		[
  			8017
  		]
  	],
  	[
  		[
  			8026,
  			8026
  		],
  		"disallowed"
  	],
  	[
  		[
  			8027,
  			8027
  		],
  		"mapped",
  		[
  			8019
  		]
  	],
  	[
  		[
  			8028,
  			8028
  		],
  		"disallowed"
  	],
  	[
  		[
  			8029,
  			8029
  		],
  		"mapped",
  		[
  			8021
  		]
  	],
  	[
  		[
  			8030,
  			8030
  		],
  		"disallowed"
  	],
  	[
  		[
  			8031,
  			8031
  		],
  		"mapped",
  		[
  			8023
  		]
  	],
  	[
  		[
  			8032,
  			8039
  		],
  		"valid"
  	],
  	[
  		[
  			8040,
  			8040
  		],
  		"mapped",
  		[
  			8032
  		]
  	],
  	[
  		[
  			8041,
  			8041
  		],
  		"mapped",
  		[
  			8033
  		]
  	],
  	[
  		[
  			8042,
  			8042
  		],
  		"mapped",
  		[
  			8034
  		]
  	],
  	[
  		[
  			8043,
  			8043
  		],
  		"mapped",
  		[
  			8035
  		]
  	],
  	[
  		[
  			8044,
  			8044
  		],
  		"mapped",
  		[
  			8036
  		]
  	],
  	[
  		[
  			8045,
  			8045
  		],
  		"mapped",
  		[
  			8037
  		]
  	],
  	[
  		[
  			8046,
  			8046
  		],
  		"mapped",
  		[
  			8038
  		]
  	],
  	[
  		[
  			8047,
  			8047
  		],
  		"mapped",
  		[
  			8039
  		]
  	],
  	[
  		[
  			8048,
  			8048
  		],
  		"valid"
  	],
  	[
  		[
  			8049,
  			8049
  		],
  		"mapped",
  		[
  			940
  		]
  	],
  	[
  		[
  			8050,
  			8050
  		],
  		"valid"
  	],
  	[
  		[
  			8051,
  			8051
  		],
  		"mapped",
  		[
  			941
  		]
  	],
  	[
  		[
  			8052,
  			8052
  		],
  		"valid"
  	],
  	[
  		[
  			8053,
  			8053
  		],
  		"mapped",
  		[
  			942
  		]
  	],
  	[
  		[
  			8054,
  			8054
  		],
  		"valid"
  	],
  	[
  		[
  			8055,
  			8055
  		],
  		"mapped",
  		[
  			943
  		]
  	],
  	[
  		[
  			8056,
  			8056
  		],
  		"valid"
  	],
  	[
  		[
  			8057,
  			8057
  		],
  		"mapped",
  		[
  			972
  		]
  	],
  	[
  		[
  			8058,
  			8058
  		],
  		"valid"
  	],
  	[
  		[
  			8059,
  			8059
  		],
  		"mapped",
  		[
  			973
  		]
  	],
  	[
  		[
  			8060,
  			8060
  		],
  		"valid"
  	],
  	[
  		[
  			8061,
  			8061
  		],
  		"mapped",
  		[
  			974
  		]
  	],
  	[
  		[
  			8062,
  			8063
  		],
  		"disallowed"
  	],
  	[
  		[
  			8064,
  			8064
  		],
  		"mapped",
  		[
  			7936,
  			953
  		]
  	],
  	[
  		[
  			8065,
  			8065
  		],
  		"mapped",
  		[
  			7937,
  			953
  		]
  	],
  	[
  		[
  			8066,
  			8066
  		],
  		"mapped",
  		[
  			7938,
  			953
  		]
  	],
  	[
  		[
  			8067,
  			8067
  		],
  		"mapped",
  		[
  			7939,
  			953
  		]
  	],
  	[
  		[
  			8068,
  			8068
  		],
  		"mapped",
  		[
  			7940,
  			953
  		]
  	],
  	[
  		[
  			8069,
  			8069
  		],
  		"mapped",
  		[
  			7941,
  			953
  		]
  	],
  	[
  		[
  			8070,
  			8070
  		],
  		"mapped",
  		[
  			7942,
  			953
  		]
  	],
  	[
  		[
  			8071,
  			8071
  		],
  		"mapped",
  		[
  			7943,
  			953
  		]
  	],
  	[
  		[
  			8072,
  			8072
  		],
  		"mapped",
  		[
  			7936,
  			953
  		]
  	],
  	[
  		[
  			8073,
  			8073
  		],
  		"mapped",
  		[
  			7937,
  			953
  		]
  	],
  	[
  		[
  			8074,
  			8074
  		],
  		"mapped",
  		[
  			7938,
  			953
  		]
  	],
  	[
  		[
  			8075,
  			8075
  		],
  		"mapped",
  		[
  			7939,
  			953
  		]
  	],
  	[
  		[
  			8076,
  			8076
  		],
  		"mapped",
  		[
  			7940,
  			953
  		]
  	],
  	[
  		[
  			8077,
  			8077
  		],
  		"mapped",
  		[
  			7941,
  			953
  		]
  	],
  	[
  		[
  			8078,
  			8078
  		],
  		"mapped",
  		[
  			7942,
  			953
  		]
  	],
  	[
  		[
  			8079,
  			8079
  		],
  		"mapped",
  		[
  			7943,
  			953
  		]
  	],
  	[
  		[
  			8080,
  			8080
  		],
  		"mapped",
  		[
  			7968,
  			953
  		]
  	],
  	[
  		[
  			8081,
  			8081
  		],
  		"mapped",
  		[
  			7969,
  			953
  		]
  	],
  	[
  		[
  			8082,
  			8082
  		],
  		"mapped",
  		[
  			7970,
  			953
  		]
  	],
  	[
  		[
  			8083,
  			8083
  		],
  		"mapped",
  		[
  			7971,
  			953
  		]
  	],
  	[
  		[
  			8084,
  			8084
  		],
  		"mapped",
  		[
  			7972,
  			953
  		]
  	],
  	[
  		[
  			8085,
  			8085
  		],
  		"mapped",
  		[
  			7973,
  			953
  		]
  	],
  	[
  		[
  			8086,
  			8086
  		],
  		"mapped",
  		[
  			7974,
  			953
  		]
  	],
  	[
  		[
  			8087,
  			8087
  		],
  		"mapped",
  		[
  			7975,
  			953
  		]
  	],
  	[
  		[
  			8088,
  			8088
  		],
  		"mapped",
  		[
  			7968,
  			953
  		]
  	],
  	[
  		[
  			8089,
  			8089
  		],
  		"mapped",
  		[
  			7969,
  			953
  		]
  	],
  	[
  		[
  			8090,
  			8090
  		],
  		"mapped",
  		[
  			7970,
  			953
  		]
  	],
  	[
  		[
  			8091,
  			8091
  		],
  		"mapped",
  		[
  			7971,
  			953
  		]
  	],
  	[
  		[
  			8092,
  			8092
  		],
  		"mapped",
  		[
  			7972,
  			953
  		]
  	],
  	[
  		[
  			8093,
  			8093
  		],
  		"mapped",
  		[
  			7973,
  			953
  		]
  	],
  	[
  		[
  			8094,
  			8094
  		],
  		"mapped",
  		[
  			7974,
  			953
  		]
  	],
  	[
  		[
  			8095,
  			8095
  		],
  		"mapped",
  		[
  			7975,
  			953
  		]
  	],
  	[
  		[
  			8096,
  			8096
  		],
  		"mapped",
  		[
  			8032,
  			953
  		]
  	],
  	[
  		[
  			8097,
  			8097
  		],
  		"mapped",
  		[
  			8033,
  			953
  		]
  	],
  	[
  		[
  			8098,
  			8098
  		],
  		"mapped",
  		[
  			8034,
  			953
  		]
  	],
  	[
  		[
  			8099,
  			8099
  		],
  		"mapped",
  		[
  			8035,
  			953
  		]
  	],
  	[
  		[
  			8100,
  			8100
  		],
  		"mapped",
  		[
  			8036,
  			953
  		]
  	],
  	[
  		[
  			8101,
  			8101
  		],
  		"mapped",
  		[
  			8037,
  			953
  		]
  	],
  	[
  		[
  			8102,
  			8102
  		],
  		"mapped",
  		[
  			8038,
  			953
  		]
  	],
  	[
  		[
  			8103,
  			8103
  		],
  		"mapped",
  		[
  			8039,
  			953
  		]
  	],
  	[
  		[
  			8104,
  			8104
  		],
  		"mapped",
  		[
  			8032,
  			953
  		]
  	],
  	[
  		[
  			8105,
  			8105
  		],
  		"mapped",
  		[
  			8033,
  			953
  		]
  	],
  	[
  		[
  			8106,
  			8106
  		],
  		"mapped",
  		[
  			8034,
  			953
  		]
  	],
  	[
  		[
  			8107,
  			8107
  		],
  		"mapped",
  		[
  			8035,
  			953
  		]
  	],
  	[
  		[
  			8108,
  			8108
  		],
  		"mapped",
  		[
  			8036,
  			953
  		]
  	],
  	[
  		[
  			8109,
  			8109
  		],
  		"mapped",
  		[
  			8037,
  			953
  		]
  	],
  	[
  		[
  			8110,
  			8110
  		],
  		"mapped",
  		[
  			8038,
  			953
  		]
  	],
  	[
  		[
  			8111,
  			8111
  		],
  		"mapped",
  		[
  			8039,
  			953
  		]
  	],
  	[
  		[
  			8112,
  			8113
  		],
  		"valid"
  	],
  	[
  		[
  			8114,
  			8114
  		],
  		"mapped",
  		[
  			8048,
  			953
  		]
  	],
  	[
  		[
  			8115,
  			8115
  		],
  		"mapped",
  		[
  			945,
  			953
  		]
  	],
  	[
  		[
  			8116,
  			8116
  		],
  		"mapped",
  		[
  			940,
  			953
  		]
  	],
  	[
  		[
  			8117,
  			8117
  		],
  		"disallowed"
  	],
  	[
  		[
  			8118,
  			8118
  		],
  		"valid"
  	],
  	[
  		[
  			8119,
  			8119
  		],
  		"mapped",
  		[
  			8118,
  			953
  		]
  	],
  	[
  		[
  			8120,
  			8120
  		],
  		"mapped",
  		[
  			8112
  		]
  	],
  	[
  		[
  			8121,
  			8121
  		],
  		"mapped",
  		[
  			8113
  		]
  	],
  	[
  		[
  			8122,
  			8122
  		],
  		"mapped",
  		[
  			8048
  		]
  	],
  	[
  		[
  			8123,
  			8123
  		],
  		"mapped",
  		[
  			940
  		]
  	],
  	[
  		[
  			8124,
  			8124
  		],
  		"mapped",
  		[
  			945,
  			953
  		]
  	],
  	[
  		[
  			8125,
  			8125
  		],
  		"disallowed_STD3_mapped",
  		[
  			32,
  			787
  		]
  	],
  	[
  		[
  			8126,
  			8126
  		],
  		"mapped",
  		[
  			953
  		]
  	],
  	[
  		[
  			8127,
  			8127
  		],
  		"disallowed_STD3_mapped",
  		[
  			32,
  			787
  		]
  	],
  	[
  		[
  			8128,
  			8128
  		],
  		"disallowed_STD3_mapped",
  		[
  			32,
  			834
  		]
  	],
  	[
  		[
  			8129,
  			8129
  		],
  		"disallowed_STD3_mapped",
  		[
  			32,
  			776,
  			834
  		]
  	],
  	[
  		[
  			8130,
  			8130
  		],
  		"mapped",
  		[
  			8052,
  			953
  		]
  	],
  	[
  		[
  			8131,
  			8131
  		],
  		"mapped",
  		[
  			951,
  			953
  		]
  	],
  	[
  		[
  			8132,
  			8132
  		],
  		"mapped",
  		[
  			942,
  			953
  		]
  	],
  	[
  		[
  			8133,
  			8133
  		],
  		"disallowed"
  	],
  	[
  		[
  			8134,
  			8134
  		],
  		"valid"
  	],
  	[
  		[
  			8135,
  			8135
  		],
  		"mapped",
  		[
  			8134,
  			953
  		]
  	],
  	[
  		[
  			8136,
  			8136
  		],
  		"mapped",
  		[
  			8050
  		]
  	],
  	[
  		[
  			8137,
  			8137
  		],
  		"mapped",
  		[
  			941
  		]
  	],
  	[
  		[
  			8138,
  			8138
  		],
  		"mapped",
  		[
  			8052
  		]
  	],
  	[
  		[
  			8139,
  			8139
  		],
  		"mapped",
  		[
  			942
  		]
  	],
  	[
  		[
  			8140,
  			8140
  		],
  		"mapped",
  		[
  			951,
  			953
  		]
  	],
  	[
  		[
  			8141,
  			8141
  		],
  		"disallowed_STD3_mapped",
  		[
  			32,
  			787,
  			768
  		]
  	],
  	[
  		[
  			8142,
  			8142
  		],
  		"disallowed_STD3_mapped",
  		[
  			32,
  			787,
  			769
  		]
  	],
  	[
  		[
  			8143,
  			8143
  		],
  		"disallowed_STD3_mapped",
  		[
  			32,
  			787,
  			834
  		]
  	],
  	[
  		[
  			8144,
  			8146
  		],
  		"valid"
  	],
  	[
  		[
  			8147,
  			8147
  		],
  		"mapped",
  		[
  			912
  		]
  	],
  	[
  		[
  			8148,
  			8149
  		],
  		"disallowed"
  	],
  	[
  		[
  			8150,
  			8151
  		],
  		"valid"
  	],
  	[
  		[
  			8152,
  			8152
  		],
  		"mapped",
  		[
  			8144
  		]
  	],
  	[
  		[
  			8153,
  			8153
  		],
  		"mapped",
  		[
  			8145
  		]
  	],
  	[
  		[
  			8154,
  			8154
  		],
  		"mapped",
  		[
  			8054
  		]
  	],
  	[
  		[
  			8155,
  			8155
  		],
  		"mapped",
  		[
  			943
  		]
  	],
  	[
  		[
  			8156,
  			8156
  		],
  		"disallowed"
  	],
  	[
  		[
  			8157,
  			8157
  		],
  		"disallowed_STD3_mapped",
  		[
  			32,
  			788,
  			768
  		]
  	],
  	[
  		[
  			8158,
  			8158
  		],
  		"disallowed_STD3_mapped",
  		[
  			32,
  			788,
  			769
  		]
  	],
  	[
  		[
  			8159,
  			8159
  		],
  		"disallowed_STD3_mapped",
  		[
  			32,
  			788,
  			834
  		]
  	],
  	[
  		[
  			8160,
  			8162
  		],
  		"valid"
  	],
  	[
  		[
  			8163,
  			8163
  		],
  		"mapped",
  		[
  			944
  		]
  	],
  	[
  		[
  			8164,
  			8167
  		],
  		"valid"
  	],
  	[
  		[
  			8168,
  			8168
  		],
  		"mapped",
  		[
  			8160
  		]
  	],
  	[
  		[
  			8169,
  			8169
  		],
  		"mapped",
  		[
  			8161
  		]
  	],
  	[
  		[
  			8170,
  			8170
  		],
  		"mapped",
  		[
  			8058
  		]
  	],
  	[
  		[
  			8171,
  			8171
  		],
  		"mapped",
  		[
  			973
  		]
  	],
  	[
  		[
  			8172,
  			8172
  		],
  		"mapped",
  		[
  			8165
  		]
  	],
  	[
  		[
  			8173,
  			8173
  		],
  		"disallowed_STD3_mapped",
  		[
  			32,
  			776,
  			768
  		]
  	],
  	[
  		[
  			8174,
  			8174
  		],
  		"disallowed_STD3_mapped",
  		[
  			32,
  			776,
  			769
  		]
  	],
  	[
  		[
  			8175,
  			8175
  		],
  		"disallowed_STD3_mapped",
  		[
  			96
  		]
  	],
  	[
  		[
  			8176,
  			8177
  		],
  		"disallowed"
  	],
  	[
  		[
  			8178,
  			8178
  		],
  		"mapped",
  		[
  			8060,
  			953
  		]
  	],
  	[
  		[
  			8179,
  			8179
  		],
  		"mapped",
  		[
  			969,
  			953
  		]
  	],
  	[
  		[
  			8180,
  			8180
  		],
  		"mapped",
  		[
  			974,
  			953
  		]
  	],
  	[
  		[
  			8181,
  			8181
  		],
  		"disallowed"
  	],
  	[
  		[
  			8182,
  			8182
  		],
  		"valid"
  	],
  	[
  		[
  			8183,
  			8183
  		],
  		"mapped",
  		[
  			8182,
  			953
  		]
  	],
  	[
  		[
  			8184,
  			8184
  		],
  		"mapped",
  		[
  			8056
  		]
  	],
  	[
  		[
  			8185,
  			8185
  		],
  		"mapped",
  		[
  			972
  		]
  	],
  	[
  		[
  			8186,
  			8186
  		],
  		"mapped",
  		[
  			8060
  		]
  	],
  	[
  		[
  			8187,
  			8187
  		],
  		"mapped",
  		[
  			974
  		]
  	],
  	[
  		[
  			8188,
  			8188
  		],
  		"mapped",
  		[
  			969,
  			953
  		]
  	],
  	[
  		[
  			8189,
  			8189
  		],
  		"disallowed_STD3_mapped",
  		[
  			32,
  			769
  		]
  	],
  	[
  		[
  			8190,
  			8190
  		],
  		"disallowed_STD3_mapped",
  		[
  			32,
  			788
  		]
  	],
  	[
  		[
  			8191,
  			8191
  		],
  		"disallowed"
  	],
  	[
  		[
  			8192,
  			8202
  		],
  		"disallowed_STD3_mapped",
  		[
  			32
  		]
  	],
  	[
  		[
  			8203,
  			8203
  		],
  		"ignored"
  	],
  	[
  		[
  			8204,
  			8205
  		],
  		"deviation",
  		[
  		]
  	],
  	[
  		[
  			8206,
  			8207
  		],
  		"disallowed"
  	],
  	[
  		[
  			8208,
  			8208
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8209,
  			8209
  		],
  		"mapped",
  		[
  			8208
  		]
  	],
  	[
  		[
  			8210,
  			8214
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8215,
  			8215
  		],
  		"disallowed_STD3_mapped",
  		[
  			32,
  			819
  		]
  	],
  	[
  		[
  			8216,
  			8227
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8228,
  			8230
  		],
  		"disallowed"
  	],
  	[
  		[
  			8231,
  			8231
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8232,
  			8238
  		],
  		"disallowed"
  	],
  	[
  		[
  			8239,
  			8239
  		],
  		"disallowed_STD3_mapped",
  		[
  			32
  		]
  	],
  	[
  		[
  			8240,
  			8242
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8243,
  			8243
  		],
  		"mapped",
  		[
  			8242,
  			8242
  		]
  	],
  	[
  		[
  			8244,
  			8244
  		],
  		"mapped",
  		[
  			8242,
  			8242,
  			8242
  		]
  	],
  	[
  		[
  			8245,
  			8245
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8246,
  			8246
  		],
  		"mapped",
  		[
  			8245,
  			8245
  		]
  	],
  	[
  		[
  			8247,
  			8247
  		],
  		"mapped",
  		[
  			8245,
  			8245,
  			8245
  		]
  	],
  	[
  		[
  			8248,
  			8251
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8252,
  			8252
  		],
  		"disallowed_STD3_mapped",
  		[
  			33,
  			33
  		]
  	],
  	[
  		[
  			8253,
  			8253
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8254,
  			8254
  		],
  		"disallowed_STD3_mapped",
  		[
  			32,
  			773
  		]
  	],
  	[
  		[
  			8255,
  			8262
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8263,
  			8263
  		],
  		"disallowed_STD3_mapped",
  		[
  			63,
  			63
  		]
  	],
  	[
  		[
  			8264,
  			8264
  		],
  		"disallowed_STD3_mapped",
  		[
  			63,
  			33
  		]
  	],
  	[
  		[
  			8265,
  			8265
  		],
  		"disallowed_STD3_mapped",
  		[
  			33,
  			63
  		]
  	],
  	[
  		[
  			8266,
  			8269
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8270,
  			8274
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8275,
  			8276
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8277,
  			8278
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8279,
  			8279
  		],
  		"mapped",
  		[
  			8242,
  			8242,
  			8242,
  			8242
  		]
  	],
  	[
  		[
  			8280,
  			8286
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8287,
  			8287
  		],
  		"disallowed_STD3_mapped",
  		[
  			32
  		]
  	],
  	[
  		[
  			8288,
  			8288
  		],
  		"ignored"
  	],
  	[
  		[
  			8289,
  			8291
  		],
  		"disallowed"
  	],
  	[
  		[
  			8292,
  			8292
  		],
  		"ignored"
  	],
  	[
  		[
  			8293,
  			8293
  		],
  		"disallowed"
  	],
  	[
  		[
  			8294,
  			8297
  		],
  		"disallowed"
  	],
  	[
  		[
  			8298,
  			8303
  		],
  		"disallowed"
  	],
  	[
  		[
  			8304,
  			8304
  		],
  		"mapped",
  		[
  			48
  		]
  	],
  	[
  		[
  			8305,
  			8305
  		],
  		"mapped",
  		[
  			105
  		]
  	],
  	[
  		[
  			8306,
  			8307
  		],
  		"disallowed"
  	],
  	[
  		[
  			8308,
  			8308
  		],
  		"mapped",
  		[
  			52
  		]
  	],
  	[
  		[
  			8309,
  			8309
  		],
  		"mapped",
  		[
  			53
  		]
  	],
  	[
  		[
  			8310,
  			8310
  		],
  		"mapped",
  		[
  			54
  		]
  	],
  	[
  		[
  			8311,
  			8311
  		],
  		"mapped",
  		[
  			55
  		]
  	],
  	[
  		[
  			8312,
  			8312
  		],
  		"mapped",
  		[
  			56
  		]
  	],
  	[
  		[
  			8313,
  			8313
  		],
  		"mapped",
  		[
  			57
  		]
  	],
  	[
  		[
  			8314,
  			8314
  		],
  		"disallowed_STD3_mapped",
  		[
  			43
  		]
  	],
  	[
  		[
  			8315,
  			8315
  		],
  		"mapped",
  		[
  			8722
  		]
  	],
  	[
  		[
  			8316,
  			8316
  		],
  		"disallowed_STD3_mapped",
  		[
  			61
  		]
  	],
  	[
  		[
  			8317,
  			8317
  		],
  		"disallowed_STD3_mapped",
  		[
  			40
  		]
  	],
  	[
  		[
  			8318,
  			8318
  		],
  		"disallowed_STD3_mapped",
  		[
  			41
  		]
  	],
  	[
  		[
  			8319,
  			8319
  		],
  		"mapped",
  		[
  			110
  		]
  	],
  	[
  		[
  			8320,
  			8320
  		],
  		"mapped",
  		[
  			48
  		]
  	],
  	[
  		[
  			8321,
  			8321
  		],
  		"mapped",
  		[
  			49
  		]
  	],
  	[
  		[
  			8322,
  			8322
  		],
  		"mapped",
  		[
  			50
  		]
  	],
  	[
  		[
  			8323,
  			8323
  		],
  		"mapped",
  		[
  			51
  		]
  	],
  	[
  		[
  			8324,
  			8324
  		],
  		"mapped",
  		[
  			52
  		]
  	],
  	[
  		[
  			8325,
  			8325
  		],
  		"mapped",
  		[
  			53
  		]
  	],
  	[
  		[
  			8326,
  			8326
  		],
  		"mapped",
  		[
  			54
  		]
  	],
  	[
  		[
  			8327,
  			8327
  		],
  		"mapped",
  		[
  			55
  		]
  	],
  	[
  		[
  			8328,
  			8328
  		],
  		"mapped",
  		[
  			56
  		]
  	],
  	[
  		[
  			8329,
  			8329
  		],
  		"mapped",
  		[
  			57
  		]
  	],
  	[
  		[
  			8330,
  			8330
  		],
  		"disallowed_STD3_mapped",
  		[
  			43
  		]
  	],
  	[
  		[
  			8331,
  			8331
  		],
  		"mapped",
  		[
  			8722
  		]
  	],
  	[
  		[
  			8332,
  			8332
  		],
  		"disallowed_STD3_mapped",
  		[
  			61
  		]
  	],
  	[
  		[
  			8333,
  			8333
  		],
  		"disallowed_STD3_mapped",
  		[
  			40
  		]
  	],
  	[
  		[
  			8334,
  			8334
  		],
  		"disallowed_STD3_mapped",
  		[
  			41
  		]
  	],
  	[
  		[
  			8335,
  			8335
  		],
  		"disallowed"
  	],
  	[
  		[
  			8336,
  			8336
  		],
  		"mapped",
  		[
  			97
  		]
  	],
  	[
  		[
  			8337,
  			8337
  		],
  		"mapped",
  		[
  			101
  		]
  	],
  	[
  		[
  			8338,
  			8338
  		],
  		"mapped",
  		[
  			111
  		]
  	],
  	[
  		[
  			8339,
  			8339
  		],
  		"mapped",
  		[
  			120
  		]
  	],
  	[
  		[
  			8340,
  			8340
  		],
  		"mapped",
  		[
  			601
  		]
  	],
  	[
  		[
  			8341,
  			8341
  		],
  		"mapped",
  		[
  			104
  		]
  	],
  	[
  		[
  			8342,
  			8342
  		],
  		"mapped",
  		[
  			107
  		]
  	],
  	[
  		[
  			8343,
  			8343
  		],
  		"mapped",
  		[
  			108
  		]
  	],
  	[
  		[
  			8344,
  			8344
  		],
  		"mapped",
  		[
  			109
  		]
  	],
  	[
  		[
  			8345,
  			8345
  		],
  		"mapped",
  		[
  			110
  		]
  	],
  	[
  		[
  			8346,
  			8346
  		],
  		"mapped",
  		[
  			112
  		]
  	],
  	[
  		[
  			8347,
  			8347
  		],
  		"mapped",
  		[
  			115
  		]
  	],
  	[
  		[
  			8348,
  			8348
  		],
  		"mapped",
  		[
  			116
  		]
  	],
  	[
  		[
  			8349,
  			8351
  		],
  		"disallowed"
  	],
  	[
  		[
  			8352,
  			8359
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8360,
  			8360
  		],
  		"mapped",
  		[
  			114,
  			115
  		]
  	],
  	[
  		[
  			8361,
  			8362
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8363,
  			8363
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8364,
  			8364
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8365,
  			8367
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8368,
  			8369
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8370,
  			8373
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8374,
  			8376
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8377,
  			8377
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8378,
  			8378
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8379,
  			8381
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8382,
  			8382
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8383,
  			8399
  		],
  		"disallowed"
  	],
  	[
  		[
  			8400,
  			8417
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8418,
  			8419
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8420,
  			8426
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8427,
  			8427
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8428,
  			8431
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8432,
  			8432
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8433,
  			8447
  		],
  		"disallowed"
  	],
  	[
  		[
  			8448,
  			8448
  		],
  		"disallowed_STD3_mapped",
  		[
  			97,
  			47,
  			99
  		]
  	],
  	[
  		[
  			8449,
  			8449
  		],
  		"disallowed_STD3_mapped",
  		[
  			97,
  			47,
  			115
  		]
  	],
  	[
  		[
  			8450,
  			8450
  		],
  		"mapped",
  		[
  			99
  		]
  	],
  	[
  		[
  			8451,
  			8451
  		],
  		"mapped",
  		[
  			176,
  			99
  		]
  	],
  	[
  		[
  			8452,
  			8452
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8453,
  			8453
  		],
  		"disallowed_STD3_mapped",
  		[
  			99,
  			47,
  			111
  		]
  	],
  	[
  		[
  			8454,
  			8454
  		],
  		"disallowed_STD3_mapped",
  		[
  			99,
  			47,
  			117
  		]
  	],
  	[
  		[
  			8455,
  			8455
  		],
  		"mapped",
  		[
  			603
  		]
  	],
  	[
  		[
  			8456,
  			8456
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8457,
  			8457
  		],
  		"mapped",
  		[
  			176,
  			102
  		]
  	],
  	[
  		[
  			8458,
  			8458
  		],
  		"mapped",
  		[
  			103
  		]
  	],
  	[
  		[
  			8459,
  			8462
  		],
  		"mapped",
  		[
  			104
  		]
  	],
  	[
  		[
  			8463,
  			8463
  		],
  		"mapped",
  		[
  			295
  		]
  	],
  	[
  		[
  			8464,
  			8465
  		],
  		"mapped",
  		[
  			105
  		]
  	],
  	[
  		[
  			8466,
  			8467
  		],
  		"mapped",
  		[
  			108
  		]
  	],
  	[
  		[
  			8468,
  			8468
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8469,
  			8469
  		],
  		"mapped",
  		[
  			110
  		]
  	],
  	[
  		[
  			8470,
  			8470
  		],
  		"mapped",
  		[
  			110,
  			111
  		]
  	],
  	[
  		[
  			8471,
  			8472
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8473,
  			8473
  		],
  		"mapped",
  		[
  			112
  		]
  	],
  	[
  		[
  			8474,
  			8474
  		],
  		"mapped",
  		[
  			113
  		]
  	],
  	[
  		[
  			8475,
  			8477
  		],
  		"mapped",
  		[
  			114
  		]
  	],
  	[
  		[
  			8478,
  			8479
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8480,
  			8480
  		],
  		"mapped",
  		[
  			115,
  			109
  		]
  	],
  	[
  		[
  			8481,
  			8481
  		],
  		"mapped",
  		[
  			116,
  			101,
  			108
  		]
  	],
  	[
  		[
  			8482,
  			8482
  		],
  		"mapped",
  		[
  			116,
  			109
  		]
  	],
  	[
  		[
  			8483,
  			8483
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8484,
  			8484
  		],
  		"mapped",
  		[
  			122
  		]
  	],
  	[
  		[
  			8485,
  			8485
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8486,
  			8486
  		],
  		"mapped",
  		[
  			969
  		]
  	],
  	[
  		[
  			8487,
  			8487
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8488,
  			8488
  		],
  		"mapped",
  		[
  			122
  		]
  	],
  	[
  		[
  			8489,
  			8489
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8490,
  			8490
  		],
  		"mapped",
  		[
  			107
  		]
  	],
  	[
  		[
  			8491,
  			8491
  		],
  		"mapped",
  		[
  			229
  		]
  	],
  	[
  		[
  			8492,
  			8492
  		],
  		"mapped",
  		[
  			98
  		]
  	],
  	[
  		[
  			8493,
  			8493
  		],
  		"mapped",
  		[
  			99
  		]
  	],
  	[
  		[
  			8494,
  			8494
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8495,
  			8496
  		],
  		"mapped",
  		[
  			101
  		]
  	],
  	[
  		[
  			8497,
  			8497
  		],
  		"mapped",
  		[
  			102
  		]
  	],
  	[
  		[
  			8498,
  			8498
  		],
  		"disallowed"
  	],
  	[
  		[
  			8499,
  			8499
  		],
  		"mapped",
  		[
  			109
  		]
  	],
  	[
  		[
  			8500,
  			8500
  		],
  		"mapped",
  		[
  			111
  		]
  	],
  	[
  		[
  			8501,
  			8501
  		],
  		"mapped",
  		[
  			1488
  		]
  	],
  	[
  		[
  			8502,
  			8502
  		],
  		"mapped",
  		[
  			1489
  		]
  	],
  	[
  		[
  			8503,
  			8503
  		],
  		"mapped",
  		[
  			1490
  		]
  	],
  	[
  		[
  			8504,
  			8504
  		],
  		"mapped",
  		[
  			1491
  		]
  	],
  	[
  		[
  			8505,
  			8505
  		],
  		"mapped",
  		[
  			105
  		]
  	],
  	[
  		[
  			8506,
  			8506
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8507,
  			8507
  		],
  		"mapped",
  		[
  			102,
  			97,
  			120
  		]
  	],
  	[
  		[
  			8508,
  			8508
  		],
  		"mapped",
  		[
  			960
  		]
  	],
  	[
  		[
  			8509,
  			8510
  		],
  		"mapped",
  		[
  			947
  		]
  	],
  	[
  		[
  			8511,
  			8511
  		],
  		"mapped",
  		[
  			960
  		]
  	],
  	[
  		[
  			8512,
  			8512
  		],
  		"mapped",
  		[
  			8721
  		]
  	],
  	[
  		[
  			8513,
  			8516
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8517,
  			8518
  		],
  		"mapped",
  		[
  			100
  		]
  	],
  	[
  		[
  			8519,
  			8519
  		],
  		"mapped",
  		[
  			101
  		]
  	],
  	[
  		[
  			8520,
  			8520
  		],
  		"mapped",
  		[
  			105
  		]
  	],
  	[
  		[
  			8521,
  			8521
  		],
  		"mapped",
  		[
  			106
  		]
  	],
  	[
  		[
  			8522,
  			8523
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8524,
  			8524
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8525,
  			8525
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8526,
  			8526
  		],
  		"valid"
  	],
  	[
  		[
  			8527,
  			8527
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8528,
  			8528
  		],
  		"mapped",
  		[
  			49,
  			8260,
  			55
  		]
  	],
  	[
  		[
  			8529,
  			8529
  		],
  		"mapped",
  		[
  			49,
  			8260,
  			57
  		]
  	],
  	[
  		[
  			8530,
  			8530
  		],
  		"mapped",
  		[
  			49,
  			8260,
  			49,
  			48
  		]
  	],
  	[
  		[
  			8531,
  			8531
  		],
  		"mapped",
  		[
  			49,
  			8260,
  			51
  		]
  	],
  	[
  		[
  			8532,
  			8532
  		],
  		"mapped",
  		[
  			50,
  			8260,
  			51
  		]
  	],
  	[
  		[
  			8533,
  			8533
  		],
  		"mapped",
  		[
  			49,
  			8260,
  			53
  		]
  	],
  	[
  		[
  			8534,
  			8534
  		],
  		"mapped",
  		[
  			50,
  			8260,
  			53
  		]
  	],
  	[
  		[
  			8535,
  			8535
  		],
  		"mapped",
  		[
  			51,
  			8260,
  			53
  		]
  	],
  	[
  		[
  			8536,
  			8536
  		],
  		"mapped",
  		[
  			52,
  			8260,
  			53
  		]
  	],
  	[
  		[
  			8537,
  			8537
  		],
  		"mapped",
  		[
  			49,
  			8260,
  			54
  		]
  	],
  	[
  		[
  			8538,
  			8538
  		],
  		"mapped",
  		[
  			53,
  			8260,
  			54
  		]
  	],
  	[
  		[
  			8539,
  			8539
  		],
  		"mapped",
  		[
  			49,
  			8260,
  			56
  		]
  	],
  	[
  		[
  			8540,
  			8540
  		],
  		"mapped",
  		[
  			51,
  			8260,
  			56
  		]
  	],
  	[
  		[
  			8541,
  			8541
  		],
  		"mapped",
  		[
  			53,
  			8260,
  			56
  		]
  	],
  	[
  		[
  			8542,
  			8542
  		],
  		"mapped",
  		[
  			55,
  			8260,
  			56
  		]
  	],
  	[
  		[
  			8543,
  			8543
  		],
  		"mapped",
  		[
  			49,
  			8260
  		]
  	],
  	[
  		[
  			8544,
  			8544
  		],
  		"mapped",
  		[
  			105
  		]
  	],
  	[
  		[
  			8545,
  			8545
  		],
  		"mapped",
  		[
  			105,
  			105
  		]
  	],
  	[
  		[
  			8546,
  			8546
  		],
  		"mapped",
  		[
  			105,
  			105,
  			105
  		]
  	],
  	[
  		[
  			8547,
  			8547
  		],
  		"mapped",
  		[
  			105,
  			118
  		]
  	],
  	[
  		[
  			8548,
  			8548
  		],
  		"mapped",
  		[
  			118
  		]
  	],
  	[
  		[
  			8549,
  			8549
  		],
  		"mapped",
  		[
  			118,
  			105
  		]
  	],
  	[
  		[
  			8550,
  			8550
  		],
  		"mapped",
  		[
  			118,
  			105,
  			105
  		]
  	],
  	[
  		[
  			8551,
  			8551
  		],
  		"mapped",
  		[
  			118,
  			105,
  			105,
  			105
  		]
  	],
  	[
  		[
  			8552,
  			8552
  		],
  		"mapped",
  		[
  			105,
  			120
  		]
  	],
  	[
  		[
  			8553,
  			8553
  		],
  		"mapped",
  		[
  			120
  		]
  	],
  	[
  		[
  			8554,
  			8554
  		],
  		"mapped",
  		[
  			120,
  			105
  		]
  	],
  	[
  		[
  			8555,
  			8555
  		],
  		"mapped",
  		[
  			120,
  			105,
  			105
  		]
  	],
  	[
  		[
  			8556,
  			8556
  		],
  		"mapped",
  		[
  			108
  		]
  	],
  	[
  		[
  			8557,
  			8557
  		],
  		"mapped",
  		[
  			99
  		]
  	],
  	[
  		[
  			8558,
  			8558
  		],
  		"mapped",
  		[
  			100
  		]
  	],
  	[
  		[
  			8559,
  			8559
  		],
  		"mapped",
  		[
  			109
  		]
  	],
  	[
  		[
  			8560,
  			8560
  		],
  		"mapped",
  		[
  			105
  		]
  	],
  	[
  		[
  			8561,
  			8561
  		],
  		"mapped",
  		[
  			105,
  			105
  		]
  	],
  	[
  		[
  			8562,
  			8562
  		],
  		"mapped",
  		[
  			105,
  			105,
  			105
  		]
  	],
  	[
  		[
  			8563,
  			8563
  		],
  		"mapped",
  		[
  			105,
  			118
  		]
  	],
  	[
  		[
  			8564,
  			8564
  		],
  		"mapped",
  		[
  			118
  		]
  	],
  	[
  		[
  			8565,
  			8565
  		],
  		"mapped",
  		[
  			118,
  			105
  		]
  	],
  	[
  		[
  			8566,
  			8566
  		],
  		"mapped",
  		[
  			118,
  			105,
  			105
  		]
  	],
  	[
  		[
  			8567,
  			8567
  		],
  		"mapped",
  		[
  			118,
  			105,
  			105,
  			105
  		]
  	],
  	[
  		[
  			8568,
  			8568
  		],
  		"mapped",
  		[
  			105,
  			120
  		]
  	],
  	[
  		[
  			8569,
  			8569
  		],
  		"mapped",
  		[
  			120
  		]
  	],
  	[
  		[
  			8570,
  			8570
  		],
  		"mapped",
  		[
  			120,
  			105
  		]
  	],
  	[
  		[
  			8571,
  			8571
  		],
  		"mapped",
  		[
  			120,
  			105,
  			105
  		]
  	],
  	[
  		[
  			8572,
  			8572
  		],
  		"mapped",
  		[
  			108
  		]
  	],
  	[
  		[
  			8573,
  			8573
  		],
  		"mapped",
  		[
  			99
  		]
  	],
  	[
  		[
  			8574,
  			8574
  		],
  		"mapped",
  		[
  			100
  		]
  	],
  	[
  		[
  			8575,
  			8575
  		],
  		"mapped",
  		[
  			109
  		]
  	],
  	[
  		[
  			8576,
  			8578
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8579,
  			8579
  		],
  		"disallowed"
  	],
  	[
  		[
  			8580,
  			8580
  		],
  		"valid"
  	],
  	[
  		[
  			8581,
  			8584
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8585,
  			8585
  		],
  		"mapped",
  		[
  			48,
  			8260,
  			51
  		]
  	],
  	[
  		[
  			8586,
  			8587
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8588,
  			8591
  		],
  		"disallowed"
  	],
  	[
  		[
  			8592,
  			8682
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8683,
  			8691
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8692,
  			8703
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8704,
  			8747
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8748,
  			8748
  		],
  		"mapped",
  		[
  			8747,
  			8747
  		]
  	],
  	[
  		[
  			8749,
  			8749
  		],
  		"mapped",
  		[
  			8747,
  			8747,
  			8747
  		]
  	],
  	[
  		[
  			8750,
  			8750
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8751,
  			8751
  		],
  		"mapped",
  		[
  			8750,
  			8750
  		]
  	],
  	[
  		[
  			8752,
  			8752
  		],
  		"mapped",
  		[
  			8750,
  			8750,
  			8750
  		]
  	],
  	[
  		[
  			8753,
  			8799
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8800,
  			8800
  		],
  		"disallowed_STD3_valid"
  	],
  	[
  		[
  			8801,
  			8813
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8814,
  			8815
  		],
  		"disallowed_STD3_valid"
  	],
  	[
  		[
  			8816,
  			8945
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8946,
  			8959
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8960,
  			8960
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8961,
  			8961
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			8962,
  			9000
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9001,
  			9001
  		],
  		"mapped",
  		[
  			12296
  		]
  	],
  	[
  		[
  			9002,
  			9002
  		],
  		"mapped",
  		[
  			12297
  		]
  	],
  	[
  		[
  			9003,
  			9082
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9083,
  			9083
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9084,
  			9084
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9085,
  			9114
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9115,
  			9166
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9167,
  			9168
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9169,
  			9179
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9180,
  			9191
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9192,
  			9192
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9193,
  			9203
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9204,
  			9210
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9211,
  			9215
  		],
  		"disallowed"
  	],
  	[
  		[
  			9216,
  			9252
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9253,
  			9254
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9255,
  			9279
  		],
  		"disallowed"
  	],
  	[
  		[
  			9280,
  			9290
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9291,
  			9311
  		],
  		"disallowed"
  	],
  	[
  		[
  			9312,
  			9312
  		],
  		"mapped",
  		[
  			49
  		]
  	],
  	[
  		[
  			9313,
  			9313
  		],
  		"mapped",
  		[
  			50
  		]
  	],
  	[
  		[
  			9314,
  			9314
  		],
  		"mapped",
  		[
  			51
  		]
  	],
  	[
  		[
  			9315,
  			9315
  		],
  		"mapped",
  		[
  			52
  		]
  	],
  	[
  		[
  			9316,
  			9316
  		],
  		"mapped",
  		[
  			53
  		]
  	],
  	[
  		[
  			9317,
  			9317
  		],
  		"mapped",
  		[
  			54
  		]
  	],
  	[
  		[
  			9318,
  			9318
  		],
  		"mapped",
  		[
  			55
  		]
  	],
  	[
  		[
  			9319,
  			9319
  		],
  		"mapped",
  		[
  			56
  		]
  	],
  	[
  		[
  			9320,
  			9320
  		],
  		"mapped",
  		[
  			57
  		]
  	],
  	[
  		[
  			9321,
  			9321
  		],
  		"mapped",
  		[
  			49,
  			48
  		]
  	],
  	[
  		[
  			9322,
  			9322
  		],
  		"mapped",
  		[
  			49,
  			49
  		]
  	],
  	[
  		[
  			9323,
  			9323
  		],
  		"mapped",
  		[
  			49,
  			50
  		]
  	],
  	[
  		[
  			9324,
  			9324
  		],
  		"mapped",
  		[
  			49,
  			51
  		]
  	],
  	[
  		[
  			9325,
  			9325
  		],
  		"mapped",
  		[
  			49,
  			52
  		]
  	],
  	[
  		[
  			9326,
  			9326
  		],
  		"mapped",
  		[
  			49,
  			53
  		]
  	],
  	[
  		[
  			9327,
  			9327
  		],
  		"mapped",
  		[
  			49,
  			54
  		]
  	],
  	[
  		[
  			9328,
  			9328
  		],
  		"mapped",
  		[
  			49,
  			55
  		]
  	],
  	[
  		[
  			9329,
  			9329
  		],
  		"mapped",
  		[
  			49,
  			56
  		]
  	],
  	[
  		[
  			9330,
  			9330
  		],
  		"mapped",
  		[
  			49,
  			57
  		]
  	],
  	[
  		[
  			9331,
  			9331
  		],
  		"mapped",
  		[
  			50,
  			48
  		]
  	],
  	[
  		[
  			9332,
  			9332
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			49,
  			41
  		]
  	],
  	[
  		[
  			9333,
  			9333
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			50,
  			41
  		]
  	],
  	[
  		[
  			9334,
  			9334
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			51,
  			41
  		]
  	],
  	[
  		[
  			9335,
  			9335
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			52,
  			41
  		]
  	],
  	[
  		[
  			9336,
  			9336
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			53,
  			41
  		]
  	],
  	[
  		[
  			9337,
  			9337
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			54,
  			41
  		]
  	],
  	[
  		[
  			9338,
  			9338
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			55,
  			41
  		]
  	],
  	[
  		[
  			9339,
  			9339
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			56,
  			41
  		]
  	],
  	[
  		[
  			9340,
  			9340
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			57,
  			41
  		]
  	],
  	[
  		[
  			9341,
  			9341
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			49,
  			48,
  			41
  		]
  	],
  	[
  		[
  			9342,
  			9342
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			49,
  			49,
  			41
  		]
  	],
  	[
  		[
  			9343,
  			9343
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			49,
  			50,
  			41
  		]
  	],
  	[
  		[
  			9344,
  			9344
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			49,
  			51,
  			41
  		]
  	],
  	[
  		[
  			9345,
  			9345
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			49,
  			52,
  			41
  		]
  	],
  	[
  		[
  			9346,
  			9346
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			49,
  			53,
  			41
  		]
  	],
  	[
  		[
  			9347,
  			9347
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			49,
  			54,
  			41
  		]
  	],
  	[
  		[
  			9348,
  			9348
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			49,
  			55,
  			41
  		]
  	],
  	[
  		[
  			9349,
  			9349
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			49,
  			56,
  			41
  		]
  	],
  	[
  		[
  			9350,
  			9350
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			49,
  			57,
  			41
  		]
  	],
  	[
  		[
  			9351,
  			9351
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			50,
  			48,
  			41
  		]
  	],
  	[
  		[
  			9352,
  			9371
  		],
  		"disallowed"
  	],
  	[
  		[
  			9372,
  			9372
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			97,
  			41
  		]
  	],
  	[
  		[
  			9373,
  			9373
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			98,
  			41
  		]
  	],
  	[
  		[
  			9374,
  			9374
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			99,
  			41
  		]
  	],
  	[
  		[
  			9375,
  			9375
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			100,
  			41
  		]
  	],
  	[
  		[
  			9376,
  			9376
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			101,
  			41
  		]
  	],
  	[
  		[
  			9377,
  			9377
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			102,
  			41
  		]
  	],
  	[
  		[
  			9378,
  			9378
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			103,
  			41
  		]
  	],
  	[
  		[
  			9379,
  			9379
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			104,
  			41
  		]
  	],
  	[
  		[
  			9380,
  			9380
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			105,
  			41
  		]
  	],
  	[
  		[
  			9381,
  			9381
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			106,
  			41
  		]
  	],
  	[
  		[
  			9382,
  			9382
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			107,
  			41
  		]
  	],
  	[
  		[
  			9383,
  			9383
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			108,
  			41
  		]
  	],
  	[
  		[
  			9384,
  			9384
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			109,
  			41
  		]
  	],
  	[
  		[
  			9385,
  			9385
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			110,
  			41
  		]
  	],
  	[
  		[
  			9386,
  			9386
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			111,
  			41
  		]
  	],
  	[
  		[
  			9387,
  			9387
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			112,
  			41
  		]
  	],
  	[
  		[
  			9388,
  			9388
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			113,
  			41
  		]
  	],
  	[
  		[
  			9389,
  			9389
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			114,
  			41
  		]
  	],
  	[
  		[
  			9390,
  			9390
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			115,
  			41
  		]
  	],
  	[
  		[
  			9391,
  			9391
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			116,
  			41
  		]
  	],
  	[
  		[
  			9392,
  			9392
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			117,
  			41
  		]
  	],
  	[
  		[
  			9393,
  			9393
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			118,
  			41
  		]
  	],
  	[
  		[
  			9394,
  			9394
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			119,
  			41
  		]
  	],
  	[
  		[
  			9395,
  			9395
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			120,
  			41
  		]
  	],
  	[
  		[
  			9396,
  			9396
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			121,
  			41
  		]
  	],
  	[
  		[
  			9397,
  			9397
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			122,
  			41
  		]
  	],
  	[
  		[
  			9398,
  			9398
  		],
  		"mapped",
  		[
  			97
  		]
  	],
  	[
  		[
  			9399,
  			9399
  		],
  		"mapped",
  		[
  			98
  		]
  	],
  	[
  		[
  			9400,
  			9400
  		],
  		"mapped",
  		[
  			99
  		]
  	],
  	[
  		[
  			9401,
  			9401
  		],
  		"mapped",
  		[
  			100
  		]
  	],
  	[
  		[
  			9402,
  			9402
  		],
  		"mapped",
  		[
  			101
  		]
  	],
  	[
  		[
  			9403,
  			9403
  		],
  		"mapped",
  		[
  			102
  		]
  	],
  	[
  		[
  			9404,
  			9404
  		],
  		"mapped",
  		[
  			103
  		]
  	],
  	[
  		[
  			9405,
  			9405
  		],
  		"mapped",
  		[
  			104
  		]
  	],
  	[
  		[
  			9406,
  			9406
  		],
  		"mapped",
  		[
  			105
  		]
  	],
  	[
  		[
  			9407,
  			9407
  		],
  		"mapped",
  		[
  			106
  		]
  	],
  	[
  		[
  			9408,
  			9408
  		],
  		"mapped",
  		[
  			107
  		]
  	],
  	[
  		[
  			9409,
  			9409
  		],
  		"mapped",
  		[
  			108
  		]
  	],
  	[
  		[
  			9410,
  			9410
  		],
  		"mapped",
  		[
  			109
  		]
  	],
  	[
  		[
  			9411,
  			9411
  		],
  		"mapped",
  		[
  			110
  		]
  	],
  	[
  		[
  			9412,
  			9412
  		],
  		"mapped",
  		[
  			111
  		]
  	],
  	[
  		[
  			9413,
  			9413
  		],
  		"mapped",
  		[
  			112
  		]
  	],
  	[
  		[
  			9414,
  			9414
  		],
  		"mapped",
  		[
  			113
  		]
  	],
  	[
  		[
  			9415,
  			9415
  		],
  		"mapped",
  		[
  			114
  		]
  	],
  	[
  		[
  			9416,
  			9416
  		],
  		"mapped",
  		[
  			115
  		]
  	],
  	[
  		[
  			9417,
  			9417
  		],
  		"mapped",
  		[
  			116
  		]
  	],
  	[
  		[
  			9418,
  			9418
  		],
  		"mapped",
  		[
  			117
  		]
  	],
  	[
  		[
  			9419,
  			9419
  		],
  		"mapped",
  		[
  			118
  		]
  	],
  	[
  		[
  			9420,
  			9420
  		],
  		"mapped",
  		[
  			119
  		]
  	],
  	[
  		[
  			9421,
  			9421
  		],
  		"mapped",
  		[
  			120
  		]
  	],
  	[
  		[
  			9422,
  			9422
  		],
  		"mapped",
  		[
  			121
  		]
  	],
  	[
  		[
  			9423,
  			9423
  		],
  		"mapped",
  		[
  			122
  		]
  	],
  	[
  		[
  			9424,
  			9424
  		],
  		"mapped",
  		[
  			97
  		]
  	],
  	[
  		[
  			9425,
  			9425
  		],
  		"mapped",
  		[
  			98
  		]
  	],
  	[
  		[
  			9426,
  			9426
  		],
  		"mapped",
  		[
  			99
  		]
  	],
  	[
  		[
  			9427,
  			9427
  		],
  		"mapped",
  		[
  			100
  		]
  	],
  	[
  		[
  			9428,
  			9428
  		],
  		"mapped",
  		[
  			101
  		]
  	],
  	[
  		[
  			9429,
  			9429
  		],
  		"mapped",
  		[
  			102
  		]
  	],
  	[
  		[
  			9430,
  			9430
  		],
  		"mapped",
  		[
  			103
  		]
  	],
  	[
  		[
  			9431,
  			9431
  		],
  		"mapped",
  		[
  			104
  		]
  	],
  	[
  		[
  			9432,
  			9432
  		],
  		"mapped",
  		[
  			105
  		]
  	],
  	[
  		[
  			9433,
  			9433
  		],
  		"mapped",
  		[
  			106
  		]
  	],
  	[
  		[
  			9434,
  			9434
  		],
  		"mapped",
  		[
  			107
  		]
  	],
  	[
  		[
  			9435,
  			9435
  		],
  		"mapped",
  		[
  			108
  		]
  	],
  	[
  		[
  			9436,
  			9436
  		],
  		"mapped",
  		[
  			109
  		]
  	],
  	[
  		[
  			9437,
  			9437
  		],
  		"mapped",
  		[
  			110
  		]
  	],
  	[
  		[
  			9438,
  			9438
  		],
  		"mapped",
  		[
  			111
  		]
  	],
  	[
  		[
  			9439,
  			9439
  		],
  		"mapped",
  		[
  			112
  		]
  	],
  	[
  		[
  			9440,
  			9440
  		],
  		"mapped",
  		[
  			113
  		]
  	],
  	[
  		[
  			9441,
  			9441
  		],
  		"mapped",
  		[
  			114
  		]
  	],
  	[
  		[
  			9442,
  			9442
  		],
  		"mapped",
  		[
  			115
  		]
  	],
  	[
  		[
  			9443,
  			9443
  		],
  		"mapped",
  		[
  			116
  		]
  	],
  	[
  		[
  			9444,
  			9444
  		],
  		"mapped",
  		[
  			117
  		]
  	],
  	[
  		[
  			9445,
  			9445
  		],
  		"mapped",
  		[
  			118
  		]
  	],
  	[
  		[
  			9446,
  			9446
  		],
  		"mapped",
  		[
  			119
  		]
  	],
  	[
  		[
  			9447,
  			9447
  		],
  		"mapped",
  		[
  			120
  		]
  	],
  	[
  		[
  			9448,
  			9448
  		],
  		"mapped",
  		[
  			121
  		]
  	],
  	[
  		[
  			9449,
  			9449
  		],
  		"mapped",
  		[
  			122
  		]
  	],
  	[
  		[
  			9450,
  			9450
  		],
  		"mapped",
  		[
  			48
  		]
  	],
  	[
  		[
  			9451,
  			9470
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9471,
  			9471
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9472,
  			9621
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9622,
  			9631
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9632,
  			9711
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9712,
  			9719
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9720,
  			9727
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9728,
  			9747
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9748,
  			9749
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9750,
  			9751
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9752,
  			9752
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9753,
  			9753
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9754,
  			9839
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9840,
  			9841
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9842,
  			9853
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9854,
  			9855
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9856,
  			9865
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9866,
  			9873
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9874,
  			9884
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9885,
  			9885
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9886,
  			9887
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9888,
  			9889
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9890,
  			9905
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9906,
  			9906
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9907,
  			9916
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9917,
  			9919
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9920,
  			9923
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9924,
  			9933
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9934,
  			9934
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9935,
  			9953
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9954,
  			9954
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9955,
  			9955
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9956,
  			9959
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9960,
  			9983
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9984,
  			9984
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9985,
  			9988
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9989,
  			9989
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9990,
  			9993
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9994,
  			9995
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			9996,
  			10023
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			10024,
  			10024
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			10025,
  			10059
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			10060,
  			10060
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			10061,
  			10061
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			10062,
  			10062
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			10063,
  			10066
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			10067,
  			10069
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			10070,
  			10070
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			10071,
  			10071
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			10072,
  			10078
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			10079,
  			10080
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			10081,
  			10087
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			10088,
  			10101
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			10102,
  			10132
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			10133,
  			10135
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			10136,
  			10159
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			10160,
  			10160
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			10161,
  			10174
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			10175,
  			10175
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			10176,
  			10182
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			10183,
  			10186
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			10187,
  			10187
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			10188,
  			10188
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			10189,
  			10189
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			10190,
  			10191
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			10192,
  			10219
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			10220,
  			10223
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			10224,
  			10239
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			10240,
  			10495
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			10496,
  			10763
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			10764,
  			10764
  		],
  		"mapped",
  		[
  			8747,
  			8747,
  			8747,
  			8747
  		]
  	],
  	[
  		[
  			10765,
  			10867
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			10868,
  			10868
  		],
  		"disallowed_STD3_mapped",
  		[
  			58,
  			58,
  			61
  		]
  	],
  	[
  		[
  			10869,
  			10869
  		],
  		"disallowed_STD3_mapped",
  		[
  			61,
  			61
  		]
  	],
  	[
  		[
  			10870,
  			10870
  		],
  		"disallowed_STD3_mapped",
  		[
  			61,
  			61,
  			61
  		]
  	],
  	[
  		[
  			10871,
  			10971
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			10972,
  			10972
  		],
  		"mapped",
  		[
  			10973,
  			824
  		]
  	],
  	[
  		[
  			10973,
  			11007
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			11008,
  			11021
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			11022,
  			11027
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			11028,
  			11034
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			11035,
  			11039
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			11040,
  			11043
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			11044,
  			11084
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			11085,
  			11087
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			11088,
  			11092
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			11093,
  			11097
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			11098,
  			11123
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			11124,
  			11125
  		],
  		"disallowed"
  	],
  	[
  		[
  			11126,
  			11157
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			11158,
  			11159
  		],
  		"disallowed"
  	],
  	[
  		[
  			11160,
  			11193
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			11194,
  			11196
  		],
  		"disallowed"
  	],
  	[
  		[
  			11197,
  			11208
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			11209,
  			11209
  		],
  		"disallowed"
  	],
  	[
  		[
  			11210,
  			11217
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			11218,
  			11243
  		],
  		"disallowed"
  	],
  	[
  		[
  			11244,
  			11247
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			11248,
  			11263
  		],
  		"disallowed"
  	],
  	[
  		[
  			11264,
  			11264
  		],
  		"mapped",
  		[
  			11312
  		]
  	],
  	[
  		[
  			11265,
  			11265
  		],
  		"mapped",
  		[
  			11313
  		]
  	],
  	[
  		[
  			11266,
  			11266
  		],
  		"mapped",
  		[
  			11314
  		]
  	],
  	[
  		[
  			11267,
  			11267
  		],
  		"mapped",
  		[
  			11315
  		]
  	],
  	[
  		[
  			11268,
  			11268
  		],
  		"mapped",
  		[
  			11316
  		]
  	],
  	[
  		[
  			11269,
  			11269
  		],
  		"mapped",
  		[
  			11317
  		]
  	],
  	[
  		[
  			11270,
  			11270
  		],
  		"mapped",
  		[
  			11318
  		]
  	],
  	[
  		[
  			11271,
  			11271
  		],
  		"mapped",
  		[
  			11319
  		]
  	],
  	[
  		[
  			11272,
  			11272
  		],
  		"mapped",
  		[
  			11320
  		]
  	],
  	[
  		[
  			11273,
  			11273
  		],
  		"mapped",
  		[
  			11321
  		]
  	],
  	[
  		[
  			11274,
  			11274
  		],
  		"mapped",
  		[
  			11322
  		]
  	],
  	[
  		[
  			11275,
  			11275
  		],
  		"mapped",
  		[
  			11323
  		]
  	],
  	[
  		[
  			11276,
  			11276
  		],
  		"mapped",
  		[
  			11324
  		]
  	],
  	[
  		[
  			11277,
  			11277
  		],
  		"mapped",
  		[
  			11325
  		]
  	],
  	[
  		[
  			11278,
  			11278
  		],
  		"mapped",
  		[
  			11326
  		]
  	],
  	[
  		[
  			11279,
  			11279
  		],
  		"mapped",
  		[
  			11327
  		]
  	],
  	[
  		[
  			11280,
  			11280
  		],
  		"mapped",
  		[
  			11328
  		]
  	],
  	[
  		[
  			11281,
  			11281
  		],
  		"mapped",
  		[
  			11329
  		]
  	],
  	[
  		[
  			11282,
  			11282
  		],
  		"mapped",
  		[
  			11330
  		]
  	],
  	[
  		[
  			11283,
  			11283
  		],
  		"mapped",
  		[
  			11331
  		]
  	],
  	[
  		[
  			11284,
  			11284
  		],
  		"mapped",
  		[
  			11332
  		]
  	],
  	[
  		[
  			11285,
  			11285
  		],
  		"mapped",
  		[
  			11333
  		]
  	],
  	[
  		[
  			11286,
  			11286
  		],
  		"mapped",
  		[
  			11334
  		]
  	],
  	[
  		[
  			11287,
  			11287
  		],
  		"mapped",
  		[
  			11335
  		]
  	],
  	[
  		[
  			11288,
  			11288
  		],
  		"mapped",
  		[
  			11336
  		]
  	],
  	[
  		[
  			11289,
  			11289
  		],
  		"mapped",
  		[
  			11337
  		]
  	],
  	[
  		[
  			11290,
  			11290
  		],
  		"mapped",
  		[
  			11338
  		]
  	],
  	[
  		[
  			11291,
  			11291
  		],
  		"mapped",
  		[
  			11339
  		]
  	],
  	[
  		[
  			11292,
  			11292
  		],
  		"mapped",
  		[
  			11340
  		]
  	],
  	[
  		[
  			11293,
  			11293
  		],
  		"mapped",
  		[
  			11341
  		]
  	],
  	[
  		[
  			11294,
  			11294
  		],
  		"mapped",
  		[
  			11342
  		]
  	],
  	[
  		[
  			11295,
  			11295
  		],
  		"mapped",
  		[
  			11343
  		]
  	],
  	[
  		[
  			11296,
  			11296
  		],
  		"mapped",
  		[
  			11344
  		]
  	],
  	[
  		[
  			11297,
  			11297
  		],
  		"mapped",
  		[
  			11345
  		]
  	],
  	[
  		[
  			11298,
  			11298
  		],
  		"mapped",
  		[
  			11346
  		]
  	],
  	[
  		[
  			11299,
  			11299
  		],
  		"mapped",
  		[
  			11347
  		]
  	],
  	[
  		[
  			11300,
  			11300
  		],
  		"mapped",
  		[
  			11348
  		]
  	],
  	[
  		[
  			11301,
  			11301
  		],
  		"mapped",
  		[
  			11349
  		]
  	],
  	[
  		[
  			11302,
  			11302
  		],
  		"mapped",
  		[
  			11350
  		]
  	],
  	[
  		[
  			11303,
  			11303
  		],
  		"mapped",
  		[
  			11351
  		]
  	],
  	[
  		[
  			11304,
  			11304
  		],
  		"mapped",
  		[
  			11352
  		]
  	],
  	[
  		[
  			11305,
  			11305
  		],
  		"mapped",
  		[
  			11353
  		]
  	],
  	[
  		[
  			11306,
  			11306
  		],
  		"mapped",
  		[
  			11354
  		]
  	],
  	[
  		[
  			11307,
  			11307
  		],
  		"mapped",
  		[
  			11355
  		]
  	],
  	[
  		[
  			11308,
  			11308
  		],
  		"mapped",
  		[
  			11356
  		]
  	],
  	[
  		[
  			11309,
  			11309
  		],
  		"mapped",
  		[
  			11357
  		]
  	],
  	[
  		[
  			11310,
  			11310
  		],
  		"mapped",
  		[
  			11358
  		]
  	],
  	[
  		[
  			11311,
  			11311
  		],
  		"disallowed"
  	],
  	[
  		[
  			11312,
  			11358
  		],
  		"valid"
  	],
  	[
  		[
  			11359,
  			11359
  		],
  		"disallowed"
  	],
  	[
  		[
  			11360,
  			11360
  		],
  		"mapped",
  		[
  			11361
  		]
  	],
  	[
  		[
  			11361,
  			11361
  		],
  		"valid"
  	],
  	[
  		[
  			11362,
  			11362
  		],
  		"mapped",
  		[
  			619
  		]
  	],
  	[
  		[
  			11363,
  			11363
  		],
  		"mapped",
  		[
  			7549
  		]
  	],
  	[
  		[
  			11364,
  			11364
  		],
  		"mapped",
  		[
  			637
  		]
  	],
  	[
  		[
  			11365,
  			11366
  		],
  		"valid"
  	],
  	[
  		[
  			11367,
  			11367
  		],
  		"mapped",
  		[
  			11368
  		]
  	],
  	[
  		[
  			11368,
  			11368
  		],
  		"valid"
  	],
  	[
  		[
  			11369,
  			11369
  		],
  		"mapped",
  		[
  			11370
  		]
  	],
  	[
  		[
  			11370,
  			11370
  		],
  		"valid"
  	],
  	[
  		[
  			11371,
  			11371
  		],
  		"mapped",
  		[
  			11372
  		]
  	],
  	[
  		[
  			11372,
  			11372
  		],
  		"valid"
  	],
  	[
  		[
  			11373,
  			11373
  		],
  		"mapped",
  		[
  			593
  		]
  	],
  	[
  		[
  			11374,
  			11374
  		],
  		"mapped",
  		[
  			625
  		]
  	],
  	[
  		[
  			11375,
  			11375
  		],
  		"mapped",
  		[
  			592
  		]
  	],
  	[
  		[
  			11376,
  			11376
  		],
  		"mapped",
  		[
  			594
  		]
  	],
  	[
  		[
  			11377,
  			11377
  		],
  		"valid"
  	],
  	[
  		[
  			11378,
  			11378
  		],
  		"mapped",
  		[
  			11379
  		]
  	],
  	[
  		[
  			11379,
  			11379
  		],
  		"valid"
  	],
  	[
  		[
  			11380,
  			11380
  		],
  		"valid"
  	],
  	[
  		[
  			11381,
  			11381
  		],
  		"mapped",
  		[
  			11382
  		]
  	],
  	[
  		[
  			11382,
  			11383
  		],
  		"valid"
  	],
  	[
  		[
  			11384,
  			11387
  		],
  		"valid"
  	],
  	[
  		[
  			11388,
  			11388
  		],
  		"mapped",
  		[
  			106
  		]
  	],
  	[
  		[
  			11389,
  			11389
  		],
  		"mapped",
  		[
  			118
  		]
  	],
  	[
  		[
  			11390,
  			11390
  		],
  		"mapped",
  		[
  			575
  		]
  	],
  	[
  		[
  			11391,
  			11391
  		],
  		"mapped",
  		[
  			576
  		]
  	],
  	[
  		[
  			11392,
  			11392
  		],
  		"mapped",
  		[
  			11393
  		]
  	],
  	[
  		[
  			11393,
  			11393
  		],
  		"valid"
  	],
  	[
  		[
  			11394,
  			11394
  		],
  		"mapped",
  		[
  			11395
  		]
  	],
  	[
  		[
  			11395,
  			11395
  		],
  		"valid"
  	],
  	[
  		[
  			11396,
  			11396
  		],
  		"mapped",
  		[
  			11397
  		]
  	],
  	[
  		[
  			11397,
  			11397
  		],
  		"valid"
  	],
  	[
  		[
  			11398,
  			11398
  		],
  		"mapped",
  		[
  			11399
  		]
  	],
  	[
  		[
  			11399,
  			11399
  		],
  		"valid"
  	],
  	[
  		[
  			11400,
  			11400
  		],
  		"mapped",
  		[
  			11401
  		]
  	],
  	[
  		[
  			11401,
  			11401
  		],
  		"valid"
  	],
  	[
  		[
  			11402,
  			11402
  		],
  		"mapped",
  		[
  			11403
  		]
  	],
  	[
  		[
  			11403,
  			11403
  		],
  		"valid"
  	],
  	[
  		[
  			11404,
  			11404
  		],
  		"mapped",
  		[
  			11405
  		]
  	],
  	[
  		[
  			11405,
  			11405
  		],
  		"valid"
  	],
  	[
  		[
  			11406,
  			11406
  		],
  		"mapped",
  		[
  			11407
  		]
  	],
  	[
  		[
  			11407,
  			11407
  		],
  		"valid"
  	],
  	[
  		[
  			11408,
  			11408
  		],
  		"mapped",
  		[
  			11409
  		]
  	],
  	[
  		[
  			11409,
  			11409
  		],
  		"valid"
  	],
  	[
  		[
  			11410,
  			11410
  		],
  		"mapped",
  		[
  			11411
  		]
  	],
  	[
  		[
  			11411,
  			11411
  		],
  		"valid"
  	],
  	[
  		[
  			11412,
  			11412
  		],
  		"mapped",
  		[
  			11413
  		]
  	],
  	[
  		[
  			11413,
  			11413
  		],
  		"valid"
  	],
  	[
  		[
  			11414,
  			11414
  		],
  		"mapped",
  		[
  			11415
  		]
  	],
  	[
  		[
  			11415,
  			11415
  		],
  		"valid"
  	],
  	[
  		[
  			11416,
  			11416
  		],
  		"mapped",
  		[
  			11417
  		]
  	],
  	[
  		[
  			11417,
  			11417
  		],
  		"valid"
  	],
  	[
  		[
  			11418,
  			11418
  		],
  		"mapped",
  		[
  			11419
  		]
  	],
  	[
  		[
  			11419,
  			11419
  		],
  		"valid"
  	],
  	[
  		[
  			11420,
  			11420
  		],
  		"mapped",
  		[
  			11421
  		]
  	],
  	[
  		[
  			11421,
  			11421
  		],
  		"valid"
  	],
  	[
  		[
  			11422,
  			11422
  		],
  		"mapped",
  		[
  			11423
  		]
  	],
  	[
  		[
  			11423,
  			11423
  		],
  		"valid"
  	],
  	[
  		[
  			11424,
  			11424
  		],
  		"mapped",
  		[
  			11425
  		]
  	],
  	[
  		[
  			11425,
  			11425
  		],
  		"valid"
  	],
  	[
  		[
  			11426,
  			11426
  		],
  		"mapped",
  		[
  			11427
  		]
  	],
  	[
  		[
  			11427,
  			11427
  		],
  		"valid"
  	],
  	[
  		[
  			11428,
  			11428
  		],
  		"mapped",
  		[
  			11429
  		]
  	],
  	[
  		[
  			11429,
  			11429
  		],
  		"valid"
  	],
  	[
  		[
  			11430,
  			11430
  		],
  		"mapped",
  		[
  			11431
  		]
  	],
  	[
  		[
  			11431,
  			11431
  		],
  		"valid"
  	],
  	[
  		[
  			11432,
  			11432
  		],
  		"mapped",
  		[
  			11433
  		]
  	],
  	[
  		[
  			11433,
  			11433
  		],
  		"valid"
  	],
  	[
  		[
  			11434,
  			11434
  		],
  		"mapped",
  		[
  			11435
  		]
  	],
  	[
  		[
  			11435,
  			11435
  		],
  		"valid"
  	],
  	[
  		[
  			11436,
  			11436
  		],
  		"mapped",
  		[
  			11437
  		]
  	],
  	[
  		[
  			11437,
  			11437
  		],
  		"valid"
  	],
  	[
  		[
  			11438,
  			11438
  		],
  		"mapped",
  		[
  			11439
  		]
  	],
  	[
  		[
  			11439,
  			11439
  		],
  		"valid"
  	],
  	[
  		[
  			11440,
  			11440
  		],
  		"mapped",
  		[
  			11441
  		]
  	],
  	[
  		[
  			11441,
  			11441
  		],
  		"valid"
  	],
  	[
  		[
  			11442,
  			11442
  		],
  		"mapped",
  		[
  			11443
  		]
  	],
  	[
  		[
  			11443,
  			11443
  		],
  		"valid"
  	],
  	[
  		[
  			11444,
  			11444
  		],
  		"mapped",
  		[
  			11445
  		]
  	],
  	[
  		[
  			11445,
  			11445
  		],
  		"valid"
  	],
  	[
  		[
  			11446,
  			11446
  		],
  		"mapped",
  		[
  			11447
  		]
  	],
  	[
  		[
  			11447,
  			11447
  		],
  		"valid"
  	],
  	[
  		[
  			11448,
  			11448
  		],
  		"mapped",
  		[
  			11449
  		]
  	],
  	[
  		[
  			11449,
  			11449
  		],
  		"valid"
  	],
  	[
  		[
  			11450,
  			11450
  		],
  		"mapped",
  		[
  			11451
  		]
  	],
  	[
  		[
  			11451,
  			11451
  		],
  		"valid"
  	],
  	[
  		[
  			11452,
  			11452
  		],
  		"mapped",
  		[
  			11453
  		]
  	],
  	[
  		[
  			11453,
  			11453
  		],
  		"valid"
  	],
  	[
  		[
  			11454,
  			11454
  		],
  		"mapped",
  		[
  			11455
  		]
  	],
  	[
  		[
  			11455,
  			11455
  		],
  		"valid"
  	],
  	[
  		[
  			11456,
  			11456
  		],
  		"mapped",
  		[
  			11457
  		]
  	],
  	[
  		[
  			11457,
  			11457
  		],
  		"valid"
  	],
  	[
  		[
  			11458,
  			11458
  		],
  		"mapped",
  		[
  			11459
  		]
  	],
  	[
  		[
  			11459,
  			11459
  		],
  		"valid"
  	],
  	[
  		[
  			11460,
  			11460
  		],
  		"mapped",
  		[
  			11461
  		]
  	],
  	[
  		[
  			11461,
  			11461
  		],
  		"valid"
  	],
  	[
  		[
  			11462,
  			11462
  		],
  		"mapped",
  		[
  			11463
  		]
  	],
  	[
  		[
  			11463,
  			11463
  		],
  		"valid"
  	],
  	[
  		[
  			11464,
  			11464
  		],
  		"mapped",
  		[
  			11465
  		]
  	],
  	[
  		[
  			11465,
  			11465
  		],
  		"valid"
  	],
  	[
  		[
  			11466,
  			11466
  		],
  		"mapped",
  		[
  			11467
  		]
  	],
  	[
  		[
  			11467,
  			11467
  		],
  		"valid"
  	],
  	[
  		[
  			11468,
  			11468
  		],
  		"mapped",
  		[
  			11469
  		]
  	],
  	[
  		[
  			11469,
  			11469
  		],
  		"valid"
  	],
  	[
  		[
  			11470,
  			11470
  		],
  		"mapped",
  		[
  			11471
  		]
  	],
  	[
  		[
  			11471,
  			11471
  		],
  		"valid"
  	],
  	[
  		[
  			11472,
  			11472
  		],
  		"mapped",
  		[
  			11473
  		]
  	],
  	[
  		[
  			11473,
  			11473
  		],
  		"valid"
  	],
  	[
  		[
  			11474,
  			11474
  		],
  		"mapped",
  		[
  			11475
  		]
  	],
  	[
  		[
  			11475,
  			11475
  		],
  		"valid"
  	],
  	[
  		[
  			11476,
  			11476
  		],
  		"mapped",
  		[
  			11477
  		]
  	],
  	[
  		[
  			11477,
  			11477
  		],
  		"valid"
  	],
  	[
  		[
  			11478,
  			11478
  		],
  		"mapped",
  		[
  			11479
  		]
  	],
  	[
  		[
  			11479,
  			11479
  		],
  		"valid"
  	],
  	[
  		[
  			11480,
  			11480
  		],
  		"mapped",
  		[
  			11481
  		]
  	],
  	[
  		[
  			11481,
  			11481
  		],
  		"valid"
  	],
  	[
  		[
  			11482,
  			11482
  		],
  		"mapped",
  		[
  			11483
  		]
  	],
  	[
  		[
  			11483,
  			11483
  		],
  		"valid"
  	],
  	[
  		[
  			11484,
  			11484
  		],
  		"mapped",
  		[
  			11485
  		]
  	],
  	[
  		[
  			11485,
  			11485
  		],
  		"valid"
  	],
  	[
  		[
  			11486,
  			11486
  		],
  		"mapped",
  		[
  			11487
  		]
  	],
  	[
  		[
  			11487,
  			11487
  		],
  		"valid"
  	],
  	[
  		[
  			11488,
  			11488
  		],
  		"mapped",
  		[
  			11489
  		]
  	],
  	[
  		[
  			11489,
  			11489
  		],
  		"valid"
  	],
  	[
  		[
  			11490,
  			11490
  		],
  		"mapped",
  		[
  			11491
  		]
  	],
  	[
  		[
  			11491,
  			11492
  		],
  		"valid"
  	],
  	[
  		[
  			11493,
  			11498
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			11499,
  			11499
  		],
  		"mapped",
  		[
  			11500
  		]
  	],
  	[
  		[
  			11500,
  			11500
  		],
  		"valid"
  	],
  	[
  		[
  			11501,
  			11501
  		],
  		"mapped",
  		[
  			11502
  		]
  	],
  	[
  		[
  			11502,
  			11505
  		],
  		"valid"
  	],
  	[
  		[
  			11506,
  			11506
  		],
  		"mapped",
  		[
  			11507
  		]
  	],
  	[
  		[
  			11507,
  			11507
  		],
  		"valid"
  	],
  	[
  		[
  			11508,
  			11512
  		],
  		"disallowed"
  	],
  	[
  		[
  			11513,
  			11519
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			11520,
  			11557
  		],
  		"valid"
  	],
  	[
  		[
  			11558,
  			11558
  		],
  		"disallowed"
  	],
  	[
  		[
  			11559,
  			11559
  		],
  		"valid"
  	],
  	[
  		[
  			11560,
  			11564
  		],
  		"disallowed"
  	],
  	[
  		[
  			11565,
  			11565
  		],
  		"valid"
  	],
  	[
  		[
  			11566,
  			11567
  		],
  		"disallowed"
  	],
  	[
  		[
  			11568,
  			11621
  		],
  		"valid"
  	],
  	[
  		[
  			11622,
  			11623
  		],
  		"valid"
  	],
  	[
  		[
  			11624,
  			11630
  		],
  		"disallowed"
  	],
  	[
  		[
  			11631,
  			11631
  		],
  		"mapped",
  		[
  			11617
  		]
  	],
  	[
  		[
  			11632,
  			11632
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			11633,
  			11646
  		],
  		"disallowed"
  	],
  	[
  		[
  			11647,
  			11647
  		],
  		"valid"
  	],
  	[
  		[
  			11648,
  			11670
  		],
  		"valid"
  	],
  	[
  		[
  			11671,
  			11679
  		],
  		"disallowed"
  	],
  	[
  		[
  			11680,
  			11686
  		],
  		"valid"
  	],
  	[
  		[
  			11687,
  			11687
  		],
  		"disallowed"
  	],
  	[
  		[
  			11688,
  			11694
  		],
  		"valid"
  	],
  	[
  		[
  			11695,
  			11695
  		],
  		"disallowed"
  	],
  	[
  		[
  			11696,
  			11702
  		],
  		"valid"
  	],
  	[
  		[
  			11703,
  			11703
  		],
  		"disallowed"
  	],
  	[
  		[
  			11704,
  			11710
  		],
  		"valid"
  	],
  	[
  		[
  			11711,
  			11711
  		],
  		"disallowed"
  	],
  	[
  		[
  			11712,
  			11718
  		],
  		"valid"
  	],
  	[
  		[
  			11719,
  			11719
  		],
  		"disallowed"
  	],
  	[
  		[
  			11720,
  			11726
  		],
  		"valid"
  	],
  	[
  		[
  			11727,
  			11727
  		],
  		"disallowed"
  	],
  	[
  		[
  			11728,
  			11734
  		],
  		"valid"
  	],
  	[
  		[
  			11735,
  			11735
  		],
  		"disallowed"
  	],
  	[
  		[
  			11736,
  			11742
  		],
  		"valid"
  	],
  	[
  		[
  			11743,
  			11743
  		],
  		"disallowed"
  	],
  	[
  		[
  			11744,
  			11775
  		],
  		"valid"
  	],
  	[
  		[
  			11776,
  			11799
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			11800,
  			11803
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			11804,
  			11805
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			11806,
  			11822
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			11823,
  			11823
  		],
  		"valid"
  	],
  	[
  		[
  			11824,
  			11824
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			11825,
  			11825
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			11826,
  			11835
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			11836,
  			11842
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			11843,
  			11903
  		],
  		"disallowed"
  	],
  	[
  		[
  			11904,
  			11929
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			11930,
  			11930
  		],
  		"disallowed"
  	],
  	[
  		[
  			11931,
  			11934
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			11935,
  			11935
  		],
  		"mapped",
  		[
  			27597
  		]
  	],
  	[
  		[
  			11936,
  			12018
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			12019,
  			12019
  		],
  		"mapped",
  		[
  			40863
  		]
  	],
  	[
  		[
  			12020,
  			12031
  		],
  		"disallowed"
  	],
  	[
  		[
  			12032,
  			12032
  		],
  		"mapped",
  		[
  			19968
  		]
  	],
  	[
  		[
  			12033,
  			12033
  		],
  		"mapped",
  		[
  			20008
  		]
  	],
  	[
  		[
  			12034,
  			12034
  		],
  		"mapped",
  		[
  			20022
  		]
  	],
  	[
  		[
  			12035,
  			12035
  		],
  		"mapped",
  		[
  			20031
  		]
  	],
  	[
  		[
  			12036,
  			12036
  		],
  		"mapped",
  		[
  			20057
  		]
  	],
  	[
  		[
  			12037,
  			12037
  		],
  		"mapped",
  		[
  			20101
  		]
  	],
  	[
  		[
  			12038,
  			12038
  		],
  		"mapped",
  		[
  			20108
  		]
  	],
  	[
  		[
  			12039,
  			12039
  		],
  		"mapped",
  		[
  			20128
  		]
  	],
  	[
  		[
  			12040,
  			12040
  		],
  		"mapped",
  		[
  			20154
  		]
  	],
  	[
  		[
  			12041,
  			12041
  		],
  		"mapped",
  		[
  			20799
  		]
  	],
  	[
  		[
  			12042,
  			12042
  		],
  		"mapped",
  		[
  			20837
  		]
  	],
  	[
  		[
  			12043,
  			12043
  		],
  		"mapped",
  		[
  			20843
  		]
  	],
  	[
  		[
  			12044,
  			12044
  		],
  		"mapped",
  		[
  			20866
  		]
  	],
  	[
  		[
  			12045,
  			12045
  		],
  		"mapped",
  		[
  			20886
  		]
  	],
  	[
  		[
  			12046,
  			12046
  		],
  		"mapped",
  		[
  			20907
  		]
  	],
  	[
  		[
  			12047,
  			12047
  		],
  		"mapped",
  		[
  			20960
  		]
  	],
  	[
  		[
  			12048,
  			12048
  		],
  		"mapped",
  		[
  			20981
  		]
  	],
  	[
  		[
  			12049,
  			12049
  		],
  		"mapped",
  		[
  			20992
  		]
  	],
  	[
  		[
  			12050,
  			12050
  		],
  		"mapped",
  		[
  			21147
  		]
  	],
  	[
  		[
  			12051,
  			12051
  		],
  		"mapped",
  		[
  			21241
  		]
  	],
  	[
  		[
  			12052,
  			12052
  		],
  		"mapped",
  		[
  			21269
  		]
  	],
  	[
  		[
  			12053,
  			12053
  		],
  		"mapped",
  		[
  			21274
  		]
  	],
  	[
  		[
  			12054,
  			12054
  		],
  		"mapped",
  		[
  			21304
  		]
  	],
  	[
  		[
  			12055,
  			12055
  		],
  		"mapped",
  		[
  			21313
  		]
  	],
  	[
  		[
  			12056,
  			12056
  		],
  		"mapped",
  		[
  			21340
  		]
  	],
  	[
  		[
  			12057,
  			12057
  		],
  		"mapped",
  		[
  			21353
  		]
  	],
  	[
  		[
  			12058,
  			12058
  		],
  		"mapped",
  		[
  			21378
  		]
  	],
  	[
  		[
  			12059,
  			12059
  		],
  		"mapped",
  		[
  			21430
  		]
  	],
  	[
  		[
  			12060,
  			12060
  		],
  		"mapped",
  		[
  			21448
  		]
  	],
  	[
  		[
  			12061,
  			12061
  		],
  		"mapped",
  		[
  			21475
  		]
  	],
  	[
  		[
  			12062,
  			12062
  		],
  		"mapped",
  		[
  			22231
  		]
  	],
  	[
  		[
  			12063,
  			12063
  		],
  		"mapped",
  		[
  			22303
  		]
  	],
  	[
  		[
  			12064,
  			12064
  		],
  		"mapped",
  		[
  			22763
  		]
  	],
  	[
  		[
  			12065,
  			12065
  		],
  		"mapped",
  		[
  			22786
  		]
  	],
  	[
  		[
  			12066,
  			12066
  		],
  		"mapped",
  		[
  			22794
  		]
  	],
  	[
  		[
  			12067,
  			12067
  		],
  		"mapped",
  		[
  			22805
  		]
  	],
  	[
  		[
  			12068,
  			12068
  		],
  		"mapped",
  		[
  			22823
  		]
  	],
  	[
  		[
  			12069,
  			12069
  		],
  		"mapped",
  		[
  			22899
  		]
  	],
  	[
  		[
  			12070,
  			12070
  		],
  		"mapped",
  		[
  			23376
  		]
  	],
  	[
  		[
  			12071,
  			12071
  		],
  		"mapped",
  		[
  			23424
  		]
  	],
  	[
  		[
  			12072,
  			12072
  		],
  		"mapped",
  		[
  			23544
  		]
  	],
  	[
  		[
  			12073,
  			12073
  		],
  		"mapped",
  		[
  			23567
  		]
  	],
  	[
  		[
  			12074,
  			12074
  		],
  		"mapped",
  		[
  			23586
  		]
  	],
  	[
  		[
  			12075,
  			12075
  		],
  		"mapped",
  		[
  			23608
  		]
  	],
  	[
  		[
  			12076,
  			12076
  		],
  		"mapped",
  		[
  			23662
  		]
  	],
  	[
  		[
  			12077,
  			12077
  		],
  		"mapped",
  		[
  			23665
  		]
  	],
  	[
  		[
  			12078,
  			12078
  		],
  		"mapped",
  		[
  			24027
  		]
  	],
  	[
  		[
  			12079,
  			12079
  		],
  		"mapped",
  		[
  			24037
  		]
  	],
  	[
  		[
  			12080,
  			12080
  		],
  		"mapped",
  		[
  			24049
  		]
  	],
  	[
  		[
  			12081,
  			12081
  		],
  		"mapped",
  		[
  			24062
  		]
  	],
  	[
  		[
  			12082,
  			12082
  		],
  		"mapped",
  		[
  			24178
  		]
  	],
  	[
  		[
  			12083,
  			12083
  		],
  		"mapped",
  		[
  			24186
  		]
  	],
  	[
  		[
  			12084,
  			12084
  		],
  		"mapped",
  		[
  			24191
  		]
  	],
  	[
  		[
  			12085,
  			12085
  		],
  		"mapped",
  		[
  			24308
  		]
  	],
  	[
  		[
  			12086,
  			12086
  		],
  		"mapped",
  		[
  			24318
  		]
  	],
  	[
  		[
  			12087,
  			12087
  		],
  		"mapped",
  		[
  			24331
  		]
  	],
  	[
  		[
  			12088,
  			12088
  		],
  		"mapped",
  		[
  			24339
  		]
  	],
  	[
  		[
  			12089,
  			12089
  		],
  		"mapped",
  		[
  			24400
  		]
  	],
  	[
  		[
  			12090,
  			12090
  		],
  		"mapped",
  		[
  			24417
  		]
  	],
  	[
  		[
  			12091,
  			12091
  		],
  		"mapped",
  		[
  			24435
  		]
  	],
  	[
  		[
  			12092,
  			12092
  		],
  		"mapped",
  		[
  			24515
  		]
  	],
  	[
  		[
  			12093,
  			12093
  		],
  		"mapped",
  		[
  			25096
  		]
  	],
  	[
  		[
  			12094,
  			12094
  		],
  		"mapped",
  		[
  			25142
  		]
  	],
  	[
  		[
  			12095,
  			12095
  		],
  		"mapped",
  		[
  			25163
  		]
  	],
  	[
  		[
  			12096,
  			12096
  		],
  		"mapped",
  		[
  			25903
  		]
  	],
  	[
  		[
  			12097,
  			12097
  		],
  		"mapped",
  		[
  			25908
  		]
  	],
  	[
  		[
  			12098,
  			12098
  		],
  		"mapped",
  		[
  			25991
  		]
  	],
  	[
  		[
  			12099,
  			12099
  		],
  		"mapped",
  		[
  			26007
  		]
  	],
  	[
  		[
  			12100,
  			12100
  		],
  		"mapped",
  		[
  			26020
  		]
  	],
  	[
  		[
  			12101,
  			12101
  		],
  		"mapped",
  		[
  			26041
  		]
  	],
  	[
  		[
  			12102,
  			12102
  		],
  		"mapped",
  		[
  			26080
  		]
  	],
  	[
  		[
  			12103,
  			12103
  		],
  		"mapped",
  		[
  			26085
  		]
  	],
  	[
  		[
  			12104,
  			12104
  		],
  		"mapped",
  		[
  			26352
  		]
  	],
  	[
  		[
  			12105,
  			12105
  		],
  		"mapped",
  		[
  			26376
  		]
  	],
  	[
  		[
  			12106,
  			12106
  		],
  		"mapped",
  		[
  			26408
  		]
  	],
  	[
  		[
  			12107,
  			12107
  		],
  		"mapped",
  		[
  			27424
  		]
  	],
  	[
  		[
  			12108,
  			12108
  		],
  		"mapped",
  		[
  			27490
  		]
  	],
  	[
  		[
  			12109,
  			12109
  		],
  		"mapped",
  		[
  			27513
  		]
  	],
  	[
  		[
  			12110,
  			12110
  		],
  		"mapped",
  		[
  			27571
  		]
  	],
  	[
  		[
  			12111,
  			12111
  		],
  		"mapped",
  		[
  			27595
  		]
  	],
  	[
  		[
  			12112,
  			12112
  		],
  		"mapped",
  		[
  			27604
  		]
  	],
  	[
  		[
  			12113,
  			12113
  		],
  		"mapped",
  		[
  			27611
  		]
  	],
  	[
  		[
  			12114,
  			12114
  		],
  		"mapped",
  		[
  			27663
  		]
  	],
  	[
  		[
  			12115,
  			12115
  		],
  		"mapped",
  		[
  			27668
  		]
  	],
  	[
  		[
  			12116,
  			12116
  		],
  		"mapped",
  		[
  			27700
  		]
  	],
  	[
  		[
  			12117,
  			12117
  		],
  		"mapped",
  		[
  			28779
  		]
  	],
  	[
  		[
  			12118,
  			12118
  		],
  		"mapped",
  		[
  			29226
  		]
  	],
  	[
  		[
  			12119,
  			12119
  		],
  		"mapped",
  		[
  			29238
  		]
  	],
  	[
  		[
  			12120,
  			12120
  		],
  		"mapped",
  		[
  			29243
  		]
  	],
  	[
  		[
  			12121,
  			12121
  		],
  		"mapped",
  		[
  			29247
  		]
  	],
  	[
  		[
  			12122,
  			12122
  		],
  		"mapped",
  		[
  			29255
  		]
  	],
  	[
  		[
  			12123,
  			12123
  		],
  		"mapped",
  		[
  			29273
  		]
  	],
  	[
  		[
  			12124,
  			12124
  		],
  		"mapped",
  		[
  			29275
  		]
  	],
  	[
  		[
  			12125,
  			12125
  		],
  		"mapped",
  		[
  			29356
  		]
  	],
  	[
  		[
  			12126,
  			12126
  		],
  		"mapped",
  		[
  			29572
  		]
  	],
  	[
  		[
  			12127,
  			12127
  		],
  		"mapped",
  		[
  			29577
  		]
  	],
  	[
  		[
  			12128,
  			12128
  		],
  		"mapped",
  		[
  			29916
  		]
  	],
  	[
  		[
  			12129,
  			12129
  		],
  		"mapped",
  		[
  			29926
  		]
  	],
  	[
  		[
  			12130,
  			12130
  		],
  		"mapped",
  		[
  			29976
  		]
  	],
  	[
  		[
  			12131,
  			12131
  		],
  		"mapped",
  		[
  			29983
  		]
  	],
  	[
  		[
  			12132,
  			12132
  		],
  		"mapped",
  		[
  			29992
  		]
  	],
  	[
  		[
  			12133,
  			12133
  		],
  		"mapped",
  		[
  			30000
  		]
  	],
  	[
  		[
  			12134,
  			12134
  		],
  		"mapped",
  		[
  			30091
  		]
  	],
  	[
  		[
  			12135,
  			12135
  		],
  		"mapped",
  		[
  			30098
  		]
  	],
  	[
  		[
  			12136,
  			12136
  		],
  		"mapped",
  		[
  			30326
  		]
  	],
  	[
  		[
  			12137,
  			12137
  		],
  		"mapped",
  		[
  			30333
  		]
  	],
  	[
  		[
  			12138,
  			12138
  		],
  		"mapped",
  		[
  			30382
  		]
  	],
  	[
  		[
  			12139,
  			12139
  		],
  		"mapped",
  		[
  			30399
  		]
  	],
  	[
  		[
  			12140,
  			12140
  		],
  		"mapped",
  		[
  			30446
  		]
  	],
  	[
  		[
  			12141,
  			12141
  		],
  		"mapped",
  		[
  			30683
  		]
  	],
  	[
  		[
  			12142,
  			12142
  		],
  		"mapped",
  		[
  			30690
  		]
  	],
  	[
  		[
  			12143,
  			12143
  		],
  		"mapped",
  		[
  			30707
  		]
  	],
  	[
  		[
  			12144,
  			12144
  		],
  		"mapped",
  		[
  			31034
  		]
  	],
  	[
  		[
  			12145,
  			12145
  		],
  		"mapped",
  		[
  			31160
  		]
  	],
  	[
  		[
  			12146,
  			12146
  		],
  		"mapped",
  		[
  			31166
  		]
  	],
  	[
  		[
  			12147,
  			12147
  		],
  		"mapped",
  		[
  			31348
  		]
  	],
  	[
  		[
  			12148,
  			12148
  		],
  		"mapped",
  		[
  			31435
  		]
  	],
  	[
  		[
  			12149,
  			12149
  		],
  		"mapped",
  		[
  			31481
  		]
  	],
  	[
  		[
  			12150,
  			12150
  		],
  		"mapped",
  		[
  			31859
  		]
  	],
  	[
  		[
  			12151,
  			12151
  		],
  		"mapped",
  		[
  			31992
  		]
  	],
  	[
  		[
  			12152,
  			12152
  		],
  		"mapped",
  		[
  			32566
  		]
  	],
  	[
  		[
  			12153,
  			12153
  		],
  		"mapped",
  		[
  			32593
  		]
  	],
  	[
  		[
  			12154,
  			12154
  		],
  		"mapped",
  		[
  			32650
  		]
  	],
  	[
  		[
  			12155,
  			12155
  		],
  		"mapped",
  		[
  			32701
  		]
  	],
  	[
  		[
  			12156,
  			12156
  		],
  		"mapped",
  		[
  			32769
  		]
  	],
  	[
  		[
  			12157,
  			12157
  		],
  		"mapped",
  		[
  			32780
  		]
  	],
  	[
  		[
  			12158,
  			12158
  		],
  		"mapped",
  		[
  			32786
  		]
  	],
  	[
  		[
  			12159,
  			12159
  		],
  		"mapped",
  		[
  			32819
  		]
  	],
  	[
  		[
  			12160,
  			12160
  		],
  		"mapped",
  		[
  			32895
  		]
  	],
  	[
  		[
  			12161,
  			12161
  		],
  		"mapped",
  		[
  			32905
  		]
  	],
  	[
  		[
  			12162,
  			12162
  		],
  		"mapped",
  		[
  			33251
  		]
  	],
  	[
  		[
  			12163,
  			12163
  		],
  		"mapped",
  		[
  			33258
  		]
  	],
  	[
  		[
  			12164,
  			12164
  		],
  		"mapped",
  		[
  			33267
  		]
  	],
  	[
  		[
  			12165,
  			12165
  		],
  		"mapped",
  		[
  			33276
  		]
  	],
  	[
  		[
  			12166,
  			12166
  		],
  		"mapped",
  		[
  			33292
  		]
  	],
  	[
  		[
  			12167,
  			12167
  		],
  		"mapped",
  		[
  			33307
  		]
  	],
  	[
  		[
  			12168,
  			12168
  		],
  		"mapped",
  		[
  			33311
  		]
  	],
  	[
  		[
  			12169,
  			12169
  		],
  		"mapped",
  		[
  			33390
  		]
  	],
  	[
  		[
  			12170,
  			12170
  		],
  		"mapped",
  		[
  			33394
  		]
  	],
  	[
  		[
  			12171,
  			12171
  		],
  		"mapped",
  		[
  			33400
  		]
  	],
  	[
  		[
  			12172,
  			12172
  		],
  		"mapped",
  		[
  			34381
  		]
  	],
  	[
  		[
  			12173,
  			12173
  		],
  		"mapped",
  		[
  			34411
  		]
  	],
  	[
  		[
  			12174,
  			12174
  		],
  		"mapped",
  		[
  			34880
  		]
  	],
  	[
  		[
  			12175,
  			12175
  		],
  		"mapped",
  		[
  			34892
  		]
  	],
  	[
  		[
  			12176,
  			12176
  		],
  		"mapped",
  		[
  			34915
  		]
  	],
  	[
  		[
  			12177,
  			12177
  		],
  		"mapped",
  		[
  			35198
  		]
  	],
  	[
  		[
  			12178,
  			12178
  		],
  		"mapped",
  		[
  			35211
  		]
  	],
  	[
  		[
  			12179,
  			12179
  		],
  		"mapped",
  		[
  			35282
  		]
  	],
  	[
  		[
  			12180,
  			12180
  		],
  		"mapped",
  		[
  			35328
  		]
  	],
  	[
  		[
  			12181,
  			12181
  		],
  		"mapped",
  		[
  			35895
  		]
  	],
  	[
  		[
  			12182,
  			12182
  		],
  		"mapped",
  		[
  			35910
  		]
  	],
  	[
  		[
  			12183,
  			12183
  		],
  		"mapped",
  		[
  			35925
  		]
  	],
  	[
  		[
  			12184,
  			12184
  		],
  		"mapped",
  		[
  			35960
  		]
  	],
  	[
  		[
  			12185,
  			12185
  		],
  		"mapped",
  		[
  			35997
  		]
  	],
  	[
  		[
  			12186,
  			12186
  		],
  		"mapped",
  		[
  			36196
  		]
  	],
  	[
  		[
  			12187,
  			12187
  		],
  		"mapped",
  		[
  			36208
  		]
  	],
  	[
  		[
  			12188,
  			12188
  		],
  		"mapped",
  		[
  			36275
  		]
  	],
  	[
  		[
  			12189,
  			12189
  		],
  		"mapped",
  		[
  			36523
  		]
  	],
  	[
  		[
  			12190,
  			12190
  		],
  		"mapped",
  		[
  			36554
  		]
  	],
  	[
  		[
  			12191,
  			12191
  		],
  		"mapped",
  		[
  			36763
  		]
  	],
  	[
  		[
  			12192,
  			12192
  		],
  		"mapped",
  		[
  			36784
  		]
  	],
  	[
  		[
  			12193,
  			12193
  		],
  		"mapped",
  		[
  			36789
  		]
  	],
  	[
  		[
  			12194,
  			12194
  		],
  		"mapped",
  		[
  			37009
  		]
  	],
  	[
  		[
  			12195,
  			12195
  		],
  		"mapped",
  		[
  			37193
  		]
  	],
  	[
  		[
  			12196,
  			12196
  		],
  		"mapped",
  		[
  			37318
  		]
  	],
  	[
  		[
  			12197,
  			12197
  		],
  		"mapped",
  		[
  			37324
  		]
  	],
  	[
  		[
  			12198,
  			12198
  		],
  		"mapped",
  		[
  			37329
  		]
  	],
  	[
  		[
  			12199,
  			12199
  		],
  		"mapped",
  		[
  			38263
  		]
  	],
  	[
  		[
  			12200,
  			12200
  		],
  		"mapped",
  		[
  			38272
  		]
  	],
  	[
  		[
  			12201,
  			12201
  		],
  		"mapped",
  		[
  			38428
  		]
  	],
  	[
  		[
  			12202,
  			12202
  		],
  		"mapped",
  		[
  			38582
  		]
  	],
  	[
  		[
  			12203,
  			12203
  		],
  		"mapped",
  		[
  			38585
  		]
  	],
  	[
  		[
  			12204,
  			12204
  		],
  		"mapped",
  		[
  			38632
  		]
  	],
  	[
  		[
  			12205,
  			12205
  		],
  		"mapped",
  		[
  			38737
  		]
  	],
  	[
  		[
  			12206,
  			12206
  		],
  		"mapped",
  		[
  			38750
  		]
  	],
  	[
  		[
  			12207,
  			12207
  		],
  		"mapped",
  		[
  			38754
  		]
  	],
  	[
  		[
  			12208,
  			12208
  		],
  		"mapped",
  		[
  			38761
  		]
  	],
  	[
  		[
  			12209,
  			12209
  		],
  		"mapped",
  		[
  			38859
  		]
  	],
  	[
  		[
  			12210,
  			12210
  		],
  		"mapped",
  		[
  			38893
  		]
  	],
  	[
  		[
  			12211,
  			12211
  		],
  		"mapped",
  		[
  			38899
  		]
  	],
  	[
  		[
  			12212,
  			12212
  		],
  		"mapped",
  		[
  			38913
  		]
  	],
  	[
  		[
  			12213,
  			12213
  		],
  		"mapped",
  		[
  			39080
  		]
  	],
  	[
  		[
  			12214,
  			12214
  		],
  		"mapped",
  		[
  			39131
  		]
  	],
  	[
  		[
  			12215,
  			12215
  		],
  		"mapped",
  		[
  			39135
  		]
  	],
  	[
  		[
  			12216,
  			12216
  		],
  		"mapped",
  		[
  			39318
  		]
  	],
  	[
  		[
  			12217,
  			12217
  		],
  		"mapped",
  		[
  			39321
  		]
  	],
  	[
  		[
  			12218,
  			12218
  		],
  		"mapped",
  		[
  			39340
  		]
  	],
  	[
  		[
  			12219,
  			12219
  		],
  		"mapped",
  		[
  			39592
  		]
  	],
  	[
  		[
  			12220,
  			12220
  		],
  		"mapped",
  		[
  			39640
  		]
  	],
  	[
  		[
  			12221,
  			12221
  		],
  		"mapped",
  		[
  			39647
  		]
  	],
  	[
  		[
  			12222,
  			12222
  		],
  		"mapped",
  		[
  			39717
  		]
  	],
  	[
  		[
  			12223,
  			12223
  		],
  		"mapped",
  		[
  			39727
  		]
  	],
  	[
  		[
  			12224,
  			12224
  		],
  		"mapped",
  		[
  			39730
  		]
  	],
  	[
  		[
  			12225,
  			12225
  		],
  		"mapped",
  		[
  			39740
  		]
  	],
  	[
  		[
  			12226,
  			12226
  		],
  		"mapped",
  		[
  			39770
  		]
  	],
  	[
  		[
  			12227,
  			12227
  		],
  		"mapped",
  		[
  			40165
  		]
  	],
  	[
  		[
  			12228,
  			12228
  		],
  		"mapped",
  		[
  			40565
  		]
  	],
  	[
  		[
  			12229,
  			12229
  		],
  		"mapped",
  		[
  			40575
  		]
  	],
  	[
  		[
  			12230,
  			12230
  		],
  		"mapped",
  		[
  			40613
  		]
  	],
  	[
  		[
  			12231,
  			12231
  		],
  		"mapped",
  		[
  			40635
  		]
  	],
  	[
  		[
  			12232,
  			12232
  		],
  		"mapped",
  		[
  			40643
  		]
  	],
  	[
  		[
  			12233,
  			12233
  		],
  		"mapped",
  		[
  			40653
  		]
  	],
  	[
  		[
  			12234,
  			12234
  		],
  		"mapped",
  		[
  			40657
  		]
  	],
  	[
  		[
  			12235,
  			12235
  		],
  		"mapped",
  		[
  			40697
  		]
  	],
  	[
  		[
  			12236,
  			12236
  		],
  		"mapped",
  		[
  			40701
  		]
  	],
  	[
  		[
  			12237,
  			12237
  		],
  		"mapped",
  		[
  			40718
  		]
  	],
  	[
  		[
  			12238,
  			12238
  		],
  		"mapped",
  		[
  			40723
  		]
  	],
  	[
  		[
  			12239,
  			12239
  		],
  		"mapped",
  		[
  			40736
  		]
  	],
  	[
  		[
  			12240,
  			12240
  		],
  		"mapped",
  		[
  			40763
  		]
  	],
  	[
  		[
  			12241,
  			12241
  		],
  		"mapped",
  		[
  			40778
  		]
  	],
  	[
  		[
  			12242,
  			12242
  		],
  		"mapped",
  		[
  			40786
  		]
  	],
  	[
  		[
  			12243,
  			12243
  		],
  		"mapped",
  		[
  			40845
  		]
  	],
  	[
  		[
  			12244,
  			12244
  		],
  		"mapped",
  		[
  			40860
  		]
  	],
  	[
  		[
  			12245,
  			12245
  		],
  		"mapped",
  		[
  			40864
  		]
  	],
  	[
  		[
  			12246,
  			12271
  		],
  		"disallowed"
  	],
  	[
  		[
  			12272,
  			12283
  		],
  		"disallowed"
  	],
  	[
  		[
  			12284,
  			12287
  		],
  		"disallowed"
  	],
  	[
  		[
  			12288,
  			12288
  		],
  		"disallowed_STD3_mapped",
  		[
  			32
  		]
  	],
  	[
  		[
  			12289,
  			12289
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			12290,
  			12290
  		],
  		"mapped",
  		[
  			46
  		]
  	],
  	[
  		[
  			12291,
  			12292
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			12293,
  			12295
  		],
  		"valid"
  	],
  	[
  		[
  			12296,
  			12329
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			12330,
  			12333
  		],
  		"valid"
  	],
  	[
  		[
  			12334,
  			12341
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			12342,
  			12342
  		],
  		"mapped",
  		[
  			12306
  		]
  	],
  	[
  		[
  			12343,
  			12343
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			12344,
  			12344
  		],
  		"mapped",
  		[
  			21313
  		]
  	],
  	[
  		[
  			12345,
  			12345
  		],
  		"mapped",
  		[
  			21316
  		]
  	],
  	[
  		[
  			12346,
  			12346
  		],
  		"mapped",
  		[
  			21317
  		]
  	],
  	[
  		[
  			12347,
  			12347
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			12348,
  			12348
  		],
  		"valid"
  	],
  	[
  		[
  			12349,
  			12349
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			12350,
  			12350
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			12351,
  			12351
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			12352,
  			12352
  		],
  		"disallowed"
  	],
  	[
  		[
  			12353,
  			12436
  		],
  		"valid"
  	],
  	[
  		[
  			12437,
  			12438
  		],
  		"valid"
  	],
  	[
  		[
  			12439,
  			12440
  		],
  		"disallowed"
  	],
  	[
  		[
  			12441,
  			12442
  		],
  		"valid"
  	],
  	[
  		[
  			12443,
  			12443
  		],
  		"disallowed_STD3_mapped",
  		[
  			32,
  			12441
  		]
  	],
  	[
  		[
  			12444,
  			12444
  		],
  		"disallowed_STD3_mapped",
  		[
  			32,
  			12442
  		]
  	],
  	[
  		[
  			12445,
  			12446
  		],
  		"valid"
  	],
  	[
  		[
  			12447,
  			12447
  		],
  		"mapped",
  		[
  			12424,
  			12426
  		]
  	],
  	[
  		[
  			12448,
  			12448
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			12449,
  			12542
  		],
  		"valid"
  	],
  	[
  		[
  			12543,
  			12543
  		],
  		"mapped",
  		[
  			12467,
  			12488
  		]
  	],
  	[
  		[
  			12544,
  			12548
  		],
  		"disallowed"
  	],
  	[
  		[
  			12549,
  			12588
  		],
  		"valid"
  	],
  	[
  		[
  			12589,
  			12589
  		],
  		"valid"
  	],
  	[
  		[
  			12590,
  			12592
  		],
  		"disallowed"
  	],
  	[
  		[
  			12593,
  			12593
  		],
  		"mapped",
  		[
  			4352
  		]
  	],
  	[
  		[
  			12594,
  			12594
  		],
  		"mapped",
  		[
  			4353
  		]
  	],
  	[
  		[
  			12595,
  			12595
  		],
  		"mapped",
  		[
  			4522
  		]
  	],
  	[
  		[
  			12596,
  			12596
  		],
  		"mapped",
  		[
  			4354
  		]
  	],
  	[
  		[
  			12597,
  			12597
  		],
  		"mapped",
  		[
  			4524
  		]
  	],
  	[
  		[
  			12598,
  			12598
  		],
  		"mapped",
  		[
  			4525
  		]
  	],
  	[
  		[
  			12599,
  			12599
  		],
  		"mapped",
  		[
  			4355
  		]
  	],
  	[
  		[
  			12600,
  			12600
  		],
  		"mapped",
  		[
  			4356
  		]
  	],
  	[
  		[
  			12601,
  			12601
  		],
  		"mapped",
  		[
  			4357
  		]
  	],
  	[
  		[
  			12602,
  			12602
  		],
  		"mapped",
  		[
  			4528
  		]
  	],
  	[
  		[
  			12603,
  			12603
  		],
  		"mapped",
  		[
  			4529
  		]
  	],
  	[
  		[
  			12604,
  			12604
  		],
  		"mapped",
  		[
  			4530
  		]
  	],
  	[
  		[
  			12605,
  			12605
  		],
  		"mapped",
  		[
  			4531
  		]
  	],
  	[
  		[
  			12606,
  			12606
  		],
  		"mapped",
  		[
  			4532
  		]
  	],
  	[
  		[
  			12607,
  			12607
  		],
  		"mapped",
  		[
  			4533
  		]
  	],
  	[
  		[
  			12608,
  			12608
  		],
  		"mapped",
  		[
  			4378
  		]
  	],
  	[
  		[
  			12609,
  			12609
  		],
  		"mapped",
  		[
  			4358
  		]
  	],
  	[
  		[
  			12610,
  			12610
  		],
  		"mapped",
  		[
  			4359
  		]
  	],
  	[
  		[
  			12611,
  			12611
  		],
  		"mapped",
  		[
  			4360
  		]
  	],
  	[
  		[
  			12612,
  			12612
  		],
  		"mapped",
  		[
  			4385
  		]
  	],
  	[
  		[
  			12613,
  			12613
  		],
  		"mapped",
  		[
  			4361
  		]
  	],
  	[
  		[
  			12614,
  			12614
  		],
  		"mapped",
  		[
  			4362
  		]
  	],
  	[
  		[
  			12615,
  			12615
  		],
  		"mapped",
  		[
  			4363
  		]
  	],
  	[
  		[
  			12616,
  			12616
  		],
  		"mapped",
  		[
  			4364
  		]
  	],
  	[
  		[
  			12617,
  			12617
  		],
  		"mapped",
  		[
  			4365
  		]
  	],
  	[
  		[
  			12618,
  			12618
  		],
  		"mapped",
  		[
  			4366
  		]
  	],
  	[
  		[
  			12619,
  			12619
  		],
  		"mapped",
  		[
  			4367
  		]
  	],
  	[
  		[
  			12620,
  			12620
  		],
  		"mapped",
  		[
  			4368
  		]
  	],
  	[
  		[
  			12621,
  			12621
  		],
  		"mapped",
  		[
  			4369
  		]
  	],
  	[
  		[
  			12622,
  			12622
  		],
  		"mapped",
  		[
  			4370
  		]
  	],
  	[
  		[
  			12623,
  			12623
  		],
  		"mapped",
  		[
  			4449
  		]
  	],
  	[
  		[
  			12624,
  			12624
  		],
  		"mapped",
  		[
  			4450
  		]
  	],
  	[
  		[
  			12625,
  			12625
  		],
  		"mapped",
  		[
  			4451
  		]
  	],
  	[
  		[
  			12626,
  			12626
  		],
  		"mapped",
  		[
  			4452
  		]
  	],
  	[
  		[
  			12627,
  			12627
  		],
  		"mapped",
  		[
  			4453
  		]
  	],
  	[
  		[
  			12628,
  			12628
  		],
  		"mapped",
  		[
  			4454
  		]
  	],
  	[
  		[
  			12629,
  			12629
  		],
  		"mapped",
  		[
  			4455
  		]
  	],
  	[
  		[
  			12630,
  			12630
  		],
  		"mapped",
  		[
  			4456
  		]
  	],
  	[
  		[
  			12631,
  			12631
  		],
  		"mapped",
  		[
  			4457
  		]
  	],
  	[
  		[
  			12632,
  			12632
  		],
  		"mapped",
  		[
  			4458
  		]
  	],
  	[
  		[
  			12633,
  			12633
  		],
  		"mapped",
  		[
  			4459
  		]
  	],
  	[
  		[
  			12634,
  			12634
  		],
  		"mapped",
  		[
  			4460
  		]
  	],
  	[
  		[
  			12635,
  			12635
  		],
  		"mapped",
  		[
  			4461
  		]
  	],
  	[
  		[
  			12636,
  			12636
  		],
  		"mapped",
  		[
  			4462
  		]
  	],
  	[
  		[
  			12637,
  			12637
  		],
  		"mapped",
  		[
  			4463
  		]
  	],
  	[
  		[
  			12638,
  			12638
  		],
  		"mapped",
  		[
  			4464
  		]
  	],
  	[
  		[
  			12639,
  			12639
  		],
  		"mapped",
  		[
  			4465
  		]
  	],
  	[
  		[
  			12640,
  			12640
  		],
  		"mapped",
  		[
  			4466
  		]
  	],
  	[
  		[
  			12641,
  			12641
  		],
  		"mapped",
  		[
  			4467
  		]
  	],
  	[
  		[
  			12642,
  			12642
  		],
  		"mapped",
  		[
  			4468
  		]
  	],
  	[
  		[
  			12643,
  			12643
  		],
  		"mapped",
  		[
  			4469
  		]
  	],
  	[
  		[
  			12644,
  			12644
  		],
  		"disallowed"
  	],
  	[
  		[
  			12645,
  			12645
  		],
  		"mapped",
  		[
  			4372
  		]
  	],
  	[
  		[
  			12646,
  			12646
  		],
  		"mapped",
  		[
  			4373
  		]
  	],
  	[
  		[
  			12647,
  			12647
  		],
  		"mapped",
  		[
  			4551
  		]
  	],
  	[
  		[
  			12648,
  			12648
  		],
  		"mapped",
  		[
  			4552
  		]
  	],
  	[
  		[
  			12649,
  			12649
  		],
  		"mapped",
  		[
  			4556
  		]
  	],
  	[
  		[
  			12650,
  			12650
  		],
  		"mapped",
  		[
  			4558
  		]
  	],
  	[
  		[
  			12651,
  			12651
  		],
  		"mapped",
  		[
  			4563
  		]
  	],
  	[
  		[
  			12652,
  			12652
  		],
  		"mapped",
  		[
  			4567
  		]
  	],
  	[
  		[
  			12653,
  			12653
  		],
  		"mapped",
  		[
  			4569
  		]
  	],
  	[
  		[
  			12654,
  			12654
  		],
  		"mapped",
  		[
  			4380
  		]
  	],
  	[
  		[
  			12655,
  			12655
  		],
  		"mapped",
  		[
  			4573
  		]
  	],
  	[
  		[
  			12656,
  			12656
  		],
  		"mapped",
  		[
  			4575
  		]
  	],
  	[
  		[
  			12657,
  			12657
  		],
  		"mapped",
  		[
  			4381
  		]
  	],
  	[
  		[
  			12658,
  			12658
  		],
  		"mapped",
  		[
  			4382
  		]
  	],
  	[
  		[
  			12659,
  			12659
  		],
  		"mapped",
  		[
  			4384
  		]
  	],
  	[
  		[
  			12660,
  			12660
  		],
  		"mapped",
  		[
  			4386
  		]
  	],
  	[
  		[
  			12661,
  			12661
  		],
  		"mapped",
  		[
  			4387
  		]
  	],
  	[
  		[
  			12662,
  			12662
  		],
  		"mapped",
  		[
  			4391
  		]
  	],
  	[
  		[
  			12663,
  			12663
  		],
  		"mapped",
  		[
  			4393
  		]
  	],
  	[
  		[
  			12664,
  			12664
  		],
  		"mapped",
  		[
  			4395
  		]
  	],
  	[
  		[
  			12665,
  			12665
  		],
  		"mapped",
  		[
  			4396
  		]
  	],
  	[
  		[
  			12666,
  			12666
  		],
  		"mapped",
  		[
  			4397
  		]
  	],
  	[
  		[
  			12667,
  			12667
  		],
  		"mapped",
  		[
  			4398
  		]
  	],
  	[
  		[
  			12668,
  			12668
  		],
  		"mapped",
  		[
  			4399
  		]
  	],
  	[
  		[
  			12669,
  			12669
  		],
  		"mapped",
  		[
  			4402
  		]
  	],
  	[
  		[
  			12670,
  			12670
  		],
  		"mapped",
  		[
  			4406
  		]
  	],
  	[
  		[
  			12671,
  			12671
  		],
  		"mapped",
  		[
  			4416
  		]
  	],
  	[
  		[
  			12672,
  			12672
  		],
  		"mapped",
  		[
  			4423
  		]
  	],
  	[
  		[
  			12673,
  			12673
  		],
  		"mapped",
  		[
  			4428
  		]
  	],
  	[
  		[
  			12674,
  			12674
  		],
  		"mapped",
  		[
  			4593
  		]
  	],
  	[
  		[
  			12675,
  			12675
  		],
  		"mapped",
  		[
  			4594
  		]
  	],
  	[
  		[
  			12676,
  			12676
  		],
  		"mapped",
  		[
  			4439
  		]
  	],
  	[
  		[
  			12677,
  			12677
  		],
  		"mapped",
  		[
  			4440
  		]
  	],
  	[
  		[
  			12678,
  			12678
  		],
  		"mapped",
  		[
  			4441
  		]
  	],
  	[
  		[
  			12679,
  			12679
  		],
  		"mapped",
  		[
  			4484
  		]
  	],
  	[
  		[
  			12680,
  			12680
  		],
  		"mapped",
  		[
  			4485
  		]
  	],
  	[
  		[
  			12681,
  			12681
  		],
  		"mapped",
  		[
  			4488
  		]
  	],
  	[
  		[
  			12682,
  			12682
  		],
  		"mapped",
  		[
  			4497
  		]
  	],
  	[
  		[
  			12683,
  			12683
  		],
  		"mapped",
  		[
  			4498
  		]
  	],
  	[
  		[
  			12684,
  			12684
  		],
  		"mapped",
  		[
  			4500
  		]
  	],
  	[
  		[
  			12685,
  			12685
  		],
  		"mapped",
  		[
  			4510
  		]
  	],
  	[
  		[
  			12686,
  			12686
  		],
  		"mapped",
  		[
  			4513
  		]
  	],
  	[
  		[
  			12687,
  			12687
  		],
  		"disallowed"
  	],
  	[
  		[
  			12688,
  			12689
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			12690,
  			12690
  		],
  		"mapped",
  		[
  			19968
  		]
  	],
  	[
  		[
  			12691,
  			12691
  		],
  		"mapped",
  		[
  			20108
  		]
  	],
  	[
  		[
  			12692,
  			12692
  		],
  		"mapped",
  		[
  			19977
  		]
  	],
  	[
  		[
  			12693,
  			12693
  		],
  		"mapped",
  		[
  			22235
  		]
  	],
  	[
  		[
  			12694,
  			12694
  		],
  		"mapped",
  		[
  			19978
  		]
  	],
  	[
  		[
  			12695,
  			12695
  		],
  		"mapped",
  		[
  			20013
  		]
  	],
  	[
  		[
  			12696,
  			12696
  		],
  		"mapped",
  		[
  			19979
  		]
  	],
  	[
  		[
  			12697,
  			12697
  		],
  		"mapped",
  		[
  			30002
  		]
  	],
  	[
  		[
  			12698,
  			12698
  		],
  		"mapped",
  		[
  			20057
  		]
  	],
  	[
  		[
  			12699,
  			12699
  		],
  		"mapped",
  		[
  			19993
  		]
  	],
  	[
  		[
  			12700,
  			12700
  		],
  		"mapped",
  		[
  			19969
  		]
  	],
  	[
  		[
  			12701,
  			12701
  		],
  		"mapped",
  		[
  			22825
  		]
  	],
  	[
  		[
  			12702,
  			12702
  		],
  		"mapped",
  		[
  			22320
  		]
  	],
  	[
  		[
  			12703,
  			12703
  		],
  		"mapped",
  		[
  			20154
  		]
  	],
  	[
  		[
  			12704,
  			12727
  		],
  		"valid"
  	],
  	[
  		[
  			12728,
  			12730
  		],
  		"valid"
  	],
  	[
  		[
  			12731,
  			12735
  		],
  		"disallowed"
  	],
  	[
  		[
  			12736,
  			12751
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			12752,
  			12771
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			12772,
  			12783
  		],
  		"disallowed"
  	],
  	[
  		[
  			12784,
  			12799
  		],
  		"valid"
  	],
  	[
  		[
  			12800,
  			12800
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			4352,
  			41
  		]
  	],
  	[
  		[
  			12801,
  			12801
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			4354,
  			41
  		]
  	],
  	[
  		[
  			12802,
  			12802
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			4355,
  			41
  		]
  	],
  	[
  		[
  			12803,
  			12803
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			4357,
  			41
  		]
  	],
  	[
  		[
  			12804,
  			12804
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			4358,
  			41
  		]
  	],
  	[
  		[
  			12805,
  			12805
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			4359,
  			41
  		]
  	],
  	[
  		[
  			12806,
  			12806
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			4361,
  			41
  		]
  	],
  	[
  		[
  			12807,
  			12807
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			4363,
  			41
  		]
  	],
  	[
  		[
  			12808,
  			12808
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			4364,
  			41
  		]
  	],
  	[
  		[
  			12809,
  			12809
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			4366,
  			41
  		]
  	],
  	[
  		[
  			12810,
  			12810
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			4367,
  			41
  		]
  	],
  	[
  		[
  			12811,
  			12811
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			4368,
  			41
  		]
  	],
  	[
  		[
  			12812,
  			12812
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			4369,
  			41
  		]
  	],
  	[
  		[
  			12813,
  			12813
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			4370,
  			41
  		]
  	],
  	[
  		[
  			12814,
  			12814
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			44032,
  			41
  		]
  	],
  	[
  		[
  			12815,
  			12815
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			45208,
  			41
  		]
  	],
  	[
  		[
  			12816,
  			12816
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			45796,
  			41
  		]
  	],
  	[
  		[
  			12817,
  			12817
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			46972,
  			41
  		]
  	],
  	[
  		[
  			12818,
  			12818
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			47560,
  			41
  		]
  	],
  	[
  		[
  			12819,
  			12819
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			48148,
  			41
  		]
  	],
  	[
  		[
  			12820,
  			12820
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			49324,
  			41
  		]
  	],
  	[
  		[
  			12821,
  			12821
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			50500,
  			41
  		]
  	],
  	[
  		[
  			12822,
  			12822
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			51088,
  			41
  		]
  	],
  	[
  		[
  			12823,
  			12823
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			52264,
  			41
  		]
  	],
  	[
  		[
  			12824,
  			12824
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			52852,
  			41
  		]
  	],
  	[
  		[
  			12825,
  			12825
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			53440,
  			41
  		]
  	],
  	[
  		[
  			12826,
  			12826
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			54028,
  			41
  		]
  	],
  	[
  		[
  			12827,
  			12827
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			54616,
  			41
  		]
  	],
  	[
  		[
  			12828,
  			12828
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			51452,
  			41
  		]
  	],
  	[
  		[
  			12829,
  			12829
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			50724,
  			51204,
  			41
  		]
  	],
  	[
  		[
  			12830,
  			12830
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			50724,
  			54980,
  			41
  		]
  	],
  	[
  		[
  			12831,
  			12831
  		],
  		"disallowed"
  	],
  	[
  		[
  			12832,
  			12832
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			19968,
  			41
  		]
  	],
  	[
  		[
  			12833,
  			12833
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			20108,
  			41
  		]
  	],
  	[
  		[
  			12834,
  			12834
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			19977,
  			41
  		]
  	],
  	[
  		[
  			12835,
  			12835
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			22235,
  			41
  		]
  	],
  	[
  		[
  			12836,
  			12836
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			20116,
  			41
  		]
  	],
  	[
  		[
  			12837,
  			12837
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			20845,
  			41
  		]
  	],
  	[
  		[
  			12838,
  			12838
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			19971,
  			41
  		]
  	],
  	[
  		[
  			12839,
  			12839
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			20843,
  			41
  		]
  	],
  	[
  		[
  			12840,
  			12840
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			20061,
  			41
  		]
  	],
  	[
  		[
  			12841,
  			12841
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			21313,
  			41
  		]
  	],
  	[
  		[
  			12842,
  			12842
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			26376,
  			41
  		]
  	],
  	[
  		[
  			12843,
  			12843
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			28779,
  			41
  		]
  	],
  	[
  		[
  			12844,
  			12844
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			27700,
  			41
  		]
  	],
  	[
  		[
  			12845,
  			12845
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			26408,
  			41
  		]
  	],
  	[
  		[
  			12846,
  			12846
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			37329,
  			41
  		]
  	],
  	[
  		[
  			12847,
  			12847
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			22303,
  			41
  		]
  	],
  	[
  		[
  			12848,
  			12848
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			26085,
  			41
  		]
  	],
  	[
  		[
  			12849,
  			12849
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			26666,
  			41
  		]
  	],
  	[
  		[
  			12850,
  			12850
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			26377,
  			41
  		]
  	],
  	[
  		[
  			12851,
  			12851
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			31038,
  			41
  		]
  	],
  	[
  		[
  			12852,
  			12852
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			21517,
  			41
  		]
  	],
  	[
  		[
  			12853,
  			12853
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			29305,
  			41
  		]
  	],
  	[
  		[
  			12854,
  			12854
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			36001,
  			41
  		]
  	],
  	[
  		[
  			12855,
  			12855
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			31069,
  			41
  		]
  	],
  	[
  		[
  			12856,
  			12856
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			21172,
  			41
  		]
  	],
  	[
  		[
  			12857,
  			12857
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			20195,
  			41
  		]
  	],
  	[
  		[
  			12858,
  			12858
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			21628,
  			41
  		]
  	],
  	[
  		[
  			12859,
  			12859
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			23398,
  			41
  		]
  	],
  	[
  		[
  			12860,
  			12860
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			30435,
  			41
  		]
  	],
  	[
  		[
  			12861,
  			12861
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			20225,
  			41
  		]
  	],
  	[
  		[
  			12862,
  			12862
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			36039,
  			41
  		]
  	],
  	[
  		[
  			12863,
  			12863
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			21332,
  			41
  		]
  	],
  	[
  		[
  			12864,
  			12864
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			31085,
  			41
  		]
  	],
  	[
  		[
  			12865,
  			12865
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			20241,
  			41
  		]
  	],
  	[
  		[
  			12866,
  			12866
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			33258,
  			41
  		]
  	],
  	[
  		[
  			12867,
  			12867
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			33267,
  			41
  		]
  	],
  	[
  		[
  			12868,
  			12868
  		],
  		"mapped",
  		[
  			21839
  		]
  	],
  	[
  		[
  			12869,
  			12869
  		],
  		"mapped",
  		[
  			24188
  		]
  	],
  	[
  		[
  			12870,
  			12870
  		],
  		"mapped",
  		[
  			25991
  		]
  	],
  	[
  		[
  			12871,
  			12871
  		],
  		"mapped",
  		[
  			31631
  		]
  	],
  	[
  		[
  			12872,
  			12879
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			12880,
  			12880
  		],
  		"mapped",
  		[
  			112,
  			116,
  			101
  		]
  	],
  	[
  		[
  			12881,
  			12881
  		],
  		"mapped",
  		[
  			50,
  			49
  		]
  	],
  	[
  		[
  			12882,
  			12882
  		],
  		"mapped",
  		[
  			50,
  			50
  		]
  	],
  	[
  		[
  			12883,
  			12883
  		],
  		"mapped",
  		[
  			50,
  			51
  		]
  	],
  	[
  		[
  			12884,
  			12884
  		],
  		"mapped",
  		[
  			50,
  			52
  		]
  	],
  	[
  		[
  			12885,
  			12885
  		],
  		"mapped",
  		[
  			50,
  			53
  		]
  	],
  	[
  		[
  			12886,
  			12886
  		],
  		"mapped",
  		[
  			50,
  			54
  		]
  	],
  	[
  		[
  			12887,
  			12887
  		],
  		"mapped",
  		[
  			50,
  			55
  		]
  	],
  	[
  		[
  			12888,
  			12888
  		],
  		"mapped",
  		[
  			50,
  			56
  		]
  	],
  	[
  		[
  			12889,
  			12889
  		],
  		"mapped",
  		[
  			50,
  			57
  		]
  	],
  	[
  		[
  			12890,
  			12890
  		],
  		"mapped",
  		[
  			51,
  			48
  		]
  	],
  	[
  		[
  			12891,
  			12891
  		],
  		"mapped",
  		[
  			51,
  			49
  		]
  	],
  	[
  		[
  			12892,
  			12892
  		],
  		"mapped",
  		[
  			51,
  			50
  		]
  	],
  	[
  		[
  			12893,
  			12893
  		],
  		"mapped",
  		[
  			51,
  			51
  		]
  	],
  	[
  		[
  			12894,
  			12894
  		],
  		"mapped",
  		[
  			51,
  			52
  		]
  	],
  	[
  		[
  			12895,
  			12895
  		],
  		"mapped",
  		[
  			51,
  			53
  		]
  	],
  	[
  		[
  			12896,
  			12896
  		],
  		"mapped",
  		[
  			4352
  		]
  	],
  	[
  		[
  			12897,
  			12897
  		],
  		"mapped",
  		[
  			4354
  		]
  	],
  	[
  		[
  			12898,
  			12898
  		],
  		"mapped",
  		[
  			4355
  		]
  	],
  	[
  		[
  			12899,
  			12899
  		],
  		"mapped",
  		[
  			4357
  		]
  	],
  	[
  		[
  			12900,
  			12900
  		],
  		"mapped",
  		[
  			4358
  		]
  	],
  	[
  		[
  			12901,
  			12901
  		],
  		"mapped",
  		[
  			4359
  		]
  	],
  	[
  		[
  			12902,
  			12902
  		],
  		"mapped",
  		[
  			4361
  		]
  	],
  	[
  		[
  			12903,
  			12903
  		],
  		"mapped",
  		[
  			4363
  		]
  	],
  	[
  		[
  			12904,
  			12904
  		],
  		"mapped",
  		[
  			4364
  		]
  	],
  	[
  		[
  			12905,
  			12905
  		],
  		"mapped",
  		[
  			4366
  		]
  	],
  	[
  		[
  			12906,
  			12906
  		],
  		"mapped",
  		[
  			4367
  		]
  	],
  	[
  		[
  			12907,
  			12907
  		],
  		"mapped",
  		[
  			4368
  		]
  	],
  	[
  		[
  			12908,
  			12908
  		],
  		"mapped",
  		[
  			4369
  		]
  	],
  	[
  		[
  			12909,
  			12909
  		],
  		"mapped",
  		[
  			4370
  		]
  	],
  	[
  		[
  			12910,
  			12910
  		],
  		"mapped",
  		[
  			44032
  		]
  	],
  	[
  		[
  			12911,
  			12911
  		],
  		"mapped",
  		[
  			45208
  		]
  	],
  	[
  		[
  			12912,
  			12912
  		],
  		"mapped",
  		[
  			45796
  		]
  	],
  	[
  		[
  			12913,
  			12913
  		],
  		"mapped",
  		[
  			46972
  		]
  	],
  	[
  		[
  			12914,
  			12914
  		],
  		"mapped",
  		[
  			47560
  		]
  	],
  	[
  		[
  			12915,
  			12915
  		],
  		"mapped",
  		[
  			48148
  		]
  	],
  	[
  		[
  			12916,
  			12916
  		],
  		"mapped",
  		[
  			49324
  		]
  	],
  	[
  		[
  			12917,
  			12917
  		],
  		"mapped",
  		[
  			50500
  		]
  	],
  	[
  		[
  			12918,
  			12918
  		],
  		"mapped",
  		[
  			51088
  		]
  	],
  	[
  		[
  			12919,
  			12919
  		],
  		"mapped",
  		[
  			52264
  		]
  	],
  	[
  		[
  			12920,
  			12920
  		],
  		"mapped",
  		[
  			52852
  		]
  	],
  	[
  		[
  			12921,
  			12921
  		],
  		"mapped",
  		[
  			53440
  		]
  	],
  	[
  		[
  			12922,
  			12922
  		],
  		"mapped",
  		[
  			54028
  		]
  	],
  	[
  		[
  			12923,
  			12923
  		],
  		"mapped",
  		[
  			54616
  		]
  	],
  	[
  		[
  			12924,
  			12924
  		],
  		"mapped",
  		[
  			52280,
  			44256
  		]
  	],
  	[
  		[
  			12925,
  			12925
  		],
  		"mapped",
  		[
  			51452,
  			51032
  		]
  	],
  	[
  		[
  			12926,
  			12926
  		],
  		"mapped",
  		[
  			50864
  		]
  	],
  	[
  		[
  			12927,
  			12927
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			12928,
  			12928
  		],
  		"mapped",
  		[
  			19968
  		]
  	],
  	[
  		[
  			12929,
  			12929
  		],
  		"mapped",
  		[
  			20108
  		]
  	],
  	[
  		[
  			12930,
  			12930
  		],
  		"mapped",
  		[
  			19977
  		]
  	],
  	[
  		[
  			12931,
  			12931
  		],
  		"mapped",
  		[
  			22235
  		]
  	],
  	[
  		[
  			12932,
  			12932
  		],
  		"mapped",
  		[
  			20116
  		]
  	],
  	[
  		[
  			12933,
  			12933
  		],
  		"mapped",
  		[
  			20845
  		]
  	],
  	[
  		[
  			12934,
  			12934
  		],
  		"mapped",
  		[
  			19971
  		]
  	],
  	[
  		[
  			12935,
  			12935
  		],
  		"mapped",
  		[
  			20843
  		]
  	],
  	[
  		[
  			12936,
  			12936
  		],
  		"mapped",
  		[
  			20061
  		]
  	],
  	[
  		[
  			12937,
  			12937
  		],
  		"mapped",
  		[
  			21313
  		]
  	],
  	[
  		[
  			12938,
  			12938
  		],
  		"mapped",
  		[
  			26376
  		]
  	],
  	[
  		[
  			12939,
  			12939
  		],
  		"mapped",
  		[
  			28779
  		]
  	],
  	[
  		[
  			12940,
  			12940
  		],
  		"mapped",
  		[
  			27700
  		]
  	],
  	[
  		[
  			12941,
  			12941
  		],
  		"mapped",
  		[
  			26408
  		]
  	],
  	[
  		[
  			12942,
  			12942
  		],
  		"mapped",
  		[
  			37329
  		]
  	],
  	[
  		[
  			12943,
  			12943
  		],
  		"mapped",
  		[
  			22303
  		]
  	],
  	[
  		[
  			12944,
  			12944
  		],
  		"mapped",
  		[
  			26085
  		]
  	],
  	[
  		[
  			12945,
  			12945
  		],
  		"mapped",
  		[
  			26666
  		]
  	],
  	[
  		[
  			12946,
  			12946
  		],
  		"mapped",
  		[
  			26377
  		]
  	],
  	[
  		[
  			12947,
  			12947
  		],
  		"mapped",
  		[
  			31038
  		]
  	],
  	[
  		[
  			12948,
  			12948
  		],
  		"mapped",
  		[
  			21517
  		]
  	],
  	[
  		[
  			12949,
  			12949
  		],
  		"mapped",
  		[
  			29305
  		]
  	],
  	[
  		[
  			12950,
  			12950
  		],
  		"mapped",
  		[
  			36001
  		]
  	],
  	[
  		[
  			12951,
  			12951
  		],
  		"mapped",
  		[
  			31069
  		]
  	],
  	[
  		[
  			12952,
  			12952
  		],
  		"mapped",
  		[
  			21172
  		]
  	],
  	[
  		[
  			12953,
  			12953
  		],
  		"mapped",
  		[
  			31192
  		]
  	],
  	[
  		[
  			12954,
  			12954
  		],
  		"mapped",
  		[
  			30007
  		]
  	],
  	[
  		[
  			12955,
  			12955
  		],
  		"mapped",
  		[
  			22899
  		]
  	],
  	[
  		[
  			12956,
  			12956
  		],
  		"mapped",
  		[
  			36969
  		]
  	],
  	[
  		[
  			12957,
  			12957
  		],
  		"mapped",
  		[
  			20778
  		]
  	],
  	[
  		[
  			12958,
  			12958
  		],
  		"mapped",
  		[
  			21360
  		]
  	],
  	[
  		[
  			12959,
  			12959
  		],
  		"mapped",
  		[
  			27880
  		]
  	],
  	[
  		[
  			12960,
  			12960
  		],
  		"mapped",
  		[
  			38917
  		]
  	],
  	[
  		[
  			12961,
  			12961
  		],
  		"mapped",
  		[
  			20241
  		]
  	],
  	[
  		[
  			12962,
  			12962
  		],
  		"mapped",
  		[
  			20889
  		]
  	],
  	[
  		[
  			12963,
  			12963
  		],
  		"mapped",
  		[
  			27491
  		]
  	],
  	[
  		[
  			12964,
  			12964
  		],
  		"mapped",
  		[
  			19978
  		]
  	],
  	[
  		[
  			12965,
  			12965
  		],
  		"mapped",
  		[
  			20013
  		]
  	],
  	[
  		[
  			12966,
  			12966
  		],
  		"mapped",
  		[
  			19979
  		]
  	],
  	[
  		[
  			12967,
  			12967
  		],
  		"mapped",
  		[
  			24038
  		]
  	],
  	[
  		[
  			12968,
  			12968
  		],
  		"mapped",
  		[
  			21491
  		]
  	],
  	[
  		[
  			12969,
  			12969
  		],
  		"mapped",
  		[
  			21307
  		]
  	],
  	[
  		[
  			12970,
  			12970
  		],
  		"mapped",
  		[
  			23447
  		]
  	],
  	[
  		[
  			12971,
  			12971
  		],
  		"mapped",
  		[
  			23398
  		]
  	],
  	[
  		[
  			12972,
  			12972
  		],
  		"mapped",
  		[
  			30435
  		]
  	],
  	[
  		[
  			12973,
  			12973
  		],
  		"mapped",
  		[
  			20225
  		]
  	],
  	[
  		[
  			12974,
  			12974
  		],
  		"mapped",
  		[
  			36039
  		]
  	],
  	[
  		[
  			12975,
  			12975
  		],
  		"mapped",
  		[
  			21332
  		]
  	],
  	[
  		[
  			12976,
  			12976
  		],
  		"mapped",
  		[
  			22812
  		]
  	],
  	[
  		[
  			12977,
  			12977
  		],
  		"mapped",
  		[
  			51,
  			54
  		]
  	],
  	[
  		[
  			12978,
  			12978
  		],
  		"mapped",
  		[
  			51,
  			55
  		]
  	],
  	[
  		[
  			12979,
  			12979
  		],
  		"mapped",
  		[
  			51,
  			56
  		]
  	],
  	[
  		[
  			12980,
  			12980
  		],
  		"mapped",
  		[
  			51,
  			57
  		]
  	],
  	[
  		[
  			12981,
  			12981
  		],
  		"mapped",
  		[
  			52,
  			48
  		]
  	],
  	[
  		[
  			12982,
  			12982
  		],
  		"mapped",
  		[
  			52,
  			49
  		]
  	],
  	[
  		[
  			12983,
  			12983
  		],
  		"mapped",
  		[
  			52,
  			50
  		]
  	],
  	[
  		[
  			12984,
  			12984
  		],
  		"mapped",
  		[
  			52,
  			51
  		]
  	],
  	[
  		[
  			12985,
  			12985
  		],
  		"mapped",
  		[
  			52,
  			52
  		]
  	],
  	[
  		[
  			12986,
  			12986
  		],
  		"mapped",
  		[
  			52,
  			53
  		]
  	],
  	[
  		[
  			12987,
  			12987
  		],
  		"mapped",
  		[
  			52,
  			54
  		]
  	],
  	[
  		[
  			12988,
  			12988
  		],
  		"mapped",
  		[
  			52,
  			55
  		]
  	],
  	[
  		[
  			12989,
  			12989
  		],
  		"mapped",
  		[
  			52,
  			56
  		]
  	],
  	[
  		[
  			12990,
  			12990
  		],
  		"mapped",
  		[
  			52,
  			57
  		]
  	],
  	[
  		[
  			12991,
  			12991
  		],
  		"mapped",
  		[
  			53,
  			48
  		]
  	],
  	[
  		[
  			12992,
  			12992
  		],
  		"mapped",
  		[
  			49,
  			26376
  		]
  	],
  	[
  		[
  			12993,
  			12993
  		],
  		"mapped",
  		[
  			50,
  			26376
  		]
  	],
  	[
  		[
  			12994,
  			12994
  		],
  		"mapped",
  		[
  			51,
  			26376
  		]
  	],
  	[
  		[
  			12995,
  			12995
  		],
  		"mapped",
  		[
  			52,
  			26376
  		]
  	],
  	[
  		[
  			12996,
  			12996
  		],
  		"mapped",
  		[
  			53,
  			26376
  		]
  	],
  	[
  		[
  			12997,
  			12997
  		],
  		"mapped",
  		[
  			54,
  			26376
  		]
  	],
  	[
  		[
  			12998,
  			12998
  		],
  		"mapped",
  		[
  			55,
  			26376
  		]
  	],
  	[
  		[
  			12999,
  			12999
  		],
  		"mapped",
  		[
  			56,
  			26376
  		]
  	],
  	[
  		[
  			13000,
  			13000
  		],
  		"mapped",
  		[
  			57,
  			26376
  		]
  	],
  	[
  		[
  			13001,
  			13001
  		],
  		"mapped",
  		[
  			49,
  			48,
  			26376
  		]
  	],
  	[
  		[
  			13002,
  			13002
  		],
  		"mapped",
  		[
  			49,
  			49,
  			26376
  		]
  	],
  	[
  		[
  			13003,
  			13003
  		],
  		"mapped",
  		[
  			49,
  			50,
  			26376
  		]
  	],
  	[
  		[
  			13004,
  			13004
  		],
  		"mapped",
  		[
  			104,
  			103
  		]
  	],
  	[
  		[
  			13005,
  			13005
  		],
  		"mapped",
  		[
  			101,
  			114,
  			103
  		]
  	],
  	[
  		[
  			13006,
  			13006
  		],
  		"mapped",
  		[
  			101,
  			118
  		]
  	],
  	[
  		[
  			13007,
  			13007
  		],
  		"mapped",
  		[
  			108,
  			116,
  			100
  		]
  	],
  	[
  		[
  			13008,
  			13008
  		],
  		"mapped",
  		[
  			12450
  		]
  	],
  	[
  		[
  			13009,
  			13009
  		],
  		"mapped",
  		[
  			12452
  		]
  	],
  	[
  		[
  			13010,
  			13010
  		],
  		"mapped",
  		[
  			12454
  		]
  	],
  	[
  		[
  			13011,
  			13011
  		],
  		"mapped",
  		[
  			12456
  		]
  	],
  	[
  		[
  			13012,
  			13012
  		],
  		"mapped",
  		[
  			12458
  		]
  	],
  	[
  		[
  			13013,
  			13013
  		],
  		"mapped",
  		[
  			12459
  		]
  	],
  	[
  		[
  			13014,
  			13014
  		],
  		"mapped",
  		[
  			12461
  		]
  	],
  	[
  		[
  			13015,
  			13015
  		],
  		"mapped",
  		[
  			12463
  		]
  	],
  	[
  		[
  			13016,
  			13016
  		],
  		"mapped",
  		[
  			12465
  		]
  	],
  	[
  		[
  			13017,
  			13017
  		],
  		"mapped",
  		[
  			12467
  		]
  	],
  	[
  		[
  			13018,
  			13018
  		],
  		"mapped",
  		[
  			12469
  		]
  	],
  	[
  		[
  			13019,
  			13019
  		],
  		"mapped",
  		[
  			12471
  		]
  	],
  	[
  		[
  			13020,
  			13020
  		],
  		"mapped",
  		[
  			12473
  		]
  	],
  	[
  		[
  			13021,
  			13021
  		],
  		"mapped",
  		[
  			12475
  		]
  	],
  	[
  		[
  			13022,
  			13022
  		],
  		"mapped",
  		[
  			12477
  		]
  	],
  	[
  		[
  			13023,
  			13023
  		],
  		"mapped",
  		[
  			12479
  		]
  	],
  	[
  		[
  			13024,
  			13024
  		],
  		"mapped",
  		[
  			12481
  		]
  	],
  	[
  		[
  			13025,
  			13025
  		],
  		"mapped",
  		[
  			12484
  		]
  	],
  	[
  		[
  			13026,
  			13026
  		],
  		"mapped",
  		[
  			12486
  		]
  	],
  	[
  		[
  			13027,
  			13027
  		],
  		"mapped",
  		[
  			12488
  		]
  	],
  	[
  		[
  			13028,
  			13028
  		],
  		"mapped",
  		[
  			12490
  		]
  	],
  	[
  		[
  			13029,
  			13029
  		],
  		"mapped",
  		[
  			12491
  		]
  	],
  	[
  		[
  			13030,
  			13030
  		],
  		"mapped",
  		[
  			12492
  		]
  	],
  	[
  		[
  			13031,
  			13031
  		],
  		"mapped",
  		[
  			12493
  		]
  	],
  	[
  		[
  			13032,
  			13032
  		],
  		"mapped",
  		[
  			12494
  		]
  	],
  	[
  		[
  			13033,
  			13033
  		],
  		"mapped",
  		[
  			12495
  		]
  	],
  	[
  		[
  			13034,
  			13034
  		],
  		"mapped",
  		[
  			12498
  		]
  	],
  	[
  		[
  			13035,
  			13035
  		],
  		"mapped",
  		[
  			12501
  		]
  	],
  	[
  		[
  			13036,
  			13036
  		],
  		"mapped",
  		[
  			12504
  		]
  	],
  	[
  		[
  			13037,
  			13037
  		],
  		"mapped",
  		[
  			12507
  		]
  	],
  	[
  		[
  			13038,
  			13038
  		],
  		"mapped",
  		[
  			12510
  		]
  	],
  	[
  		[
  			13039,
  			13039
  		],
  		"mapped",
  		[
  			12511
  		]
  	],
  	[
  		[
  			13040,
  			13040
  		],
  		"mapped",
  		[
  			12512
  		]
  	],
  	[
  		[
  			13041,
  			13041
  		],
  		"mapped",
  		[
  			12513
  		]
  	],
  	[
  		[
  			13042,
  			13042
  		],
  		"mapped",
  		[
  			12514
  		]
  	],
  	[
  		[
  			13043,
  			13043
  		],
  		"mapped",
  		[
  			12516
  		]
  	],
  	[
  		[
  			13044,
  			13044
  		],
  		"mapped",
  		[
  			12518
  		]
  	],
  	[
  		[
  			13045,
  			13045
  		],
  		"mapped",
  		[
  			12520
  		]
  	],
  	[
  		[
  			13046,
  			13046
  		],
  		"mapped",
  		[
  			12521
  		]
  	],
  	[
  		[
  			13047,
  			13047
  		],
  		"mapped",
  		[
  			12522
  		]
  	],
  	[
  		[
  			13048,
  			13048
  		],
  		"mapped",
  		[
  			12523
  		]
  	],
  	[
  		[
  			13049,
  			13049
  		],
  		"mapped",
  		[
  			12524
  		]
  	],
  	[
  		[
  			13050,
  			13050
  		],
  		"mapped",
  		[
  			12525
  		]
  	],
  	[
  		[
  			13051,
  			13051
  		],
  		"mapped",
  		[
  			12527
  		]
  	],
  	[
  		[
  			13052,
  			13052
  		],
  		"mapped",
  		[
  			12528
  		]
  	],
  	[
  		[
  			13053,
  			13053
  		],
  		"mapped",
  		[
  			12529
  		]
  	],
  	[
  		[
  			13054,
  			13054
  		],
  		"mapped",
  		[
  			12530
  		]
  	],
  	[
  		[
  			13055,
  			13055
  		],
  		"disallowed"
  	],
  	[
  		[
  			13056,
  			13056
  		],
  		"mapped",
  		[
  			12450,
  			12497,
  			12540,
  			12488
  		]
  	],
  	[
  		[
  			13057,
  			13057
  		],
  		"mapped",
  		[
  			12450,
  			12523,
  			12501,
  			12449
  		]
  	],
  	[
  		[
  			13058,
  			13058
  		],
  		"mapped",
  		[
  			12450,
  			12531,
  			12506,
  			12450
  		]
  	],
  	[
  		[
  			13059,
  			13059
  		],
  		"mapped",
  		[
  			12450,
  			12540,
  			12523
  		]
  	],
  	[
  		[
  			13060,
  			13060
  		],
  		"mapped",
  		[
  			12452,
  			12491,
  			12531,
  			12464
  		]
  	],
  	[
  		[
  			13061,
  			13061
  		],
  		"mapped",
  		[
  			12452,
  			12531,
  			12481
  		]
  	],
  	[
  		[
  			13062,
  			13062
  		],
  		"mapped",
  		[
  			12454,
  			12457,
  			12531
  		]
  	],
  	[
  		[
  			13063,
  			13063
  		],
  		"mapped",
  		[
  			12456,
  			12473,
  			12463,
  			12540,
  			12489
  		]
  	],
  	[
  		[
  			13064,
  			13064
  		],
  		"mapped",
  		[
  			12456,
  			12540,
  			12459,
  			12540
  		]
  	],
  	[
  		[
  			13065,
  			13065
  		],
  		"mapped",
  		[
  			12458,
  			12531,
  			12473
  		]
  	],
  	[
  		[
  			13066,
  			13066
  		],
  		"mapped",
  		[
  			12458,
  			12540,
  			12512
  		]
  	],
  	[
  		[
  			13067,
  			13067
  		],
  		"mapped",
  		[
  			12459,
  			12452,
  			12522
  		]
  	],
  	[
  		[
  			13068,
  			13068
  		],
  		"mapped",
  		[
  			12459,
  			12521,
  			12483,
  			12488
  		]
  	],
  	[
  		[
  			13069,
  			13069
  		],
  		"mapped",
  		[
  			12459,
  			12525,
  			12522,
  			12540
  		]
  	],
  	[
  		[
  			13070,
  			13070
  		],
  		"mapped",
  		[
  			12460,
  			12525,
  			12531
  		]
  	],
  	[
  		[
  			13071,
  			13071
  		],
  		"mapped",
  		[
  			12460,
  			12531,
  			12510
  		]
  	],
  	[
  		[
  			13072,
  			13072
  		],
  		"mapped",
  		[
  			12462,
  			12460
  		]
  	],
  	[
  		[
  			13073,
  			13073
  		],
  		"mapped",
  		[
  			12462,
  			12491,
  			12540
  		]
  	],
  	[
  		[
  			13074,
  			13074
  		],
  		"mapped",
  		[
  			12461,
  			12517,
  			12522,
  			12540
  		]
  	],
  	[
  		[
  			13075,
  			13075
  		],
  		"mapped",
  		[
  			12462,
  			12523,
  			12480,
  			12540
  		]
  	],
  	[
  		[
  			13076,
  			13076
  		],
  		"mapped",
  		[
  			12461,
  			12525
  		]
  	],
  	[
  		[
  			13077,
  			13077
  		],
  		"mapped",
  		[
  			12461,
  			12525,
  			12464,
  			12521,
  			12512
  		]
  	],
  	[
  		[
  			13078,
  			13078
  		],
  		"mapped",
  		[
  			12461,
  			12525,
  			12513,
  			12540,
  			12488,
  			12523
  		]
  	],
  	[
  		[
  			13079,
  			13079
  		],
  		"mapped",
  		[
  			12461,
  			12525,
  			12527,
  			12483,
  			12488
  		]
  	],
  	[
  		[
  			13080,
  			13080
  		],
  		"mapped",
  		[
  			12464,
  			12521,
  			12512
  		]
  	],
  	[
  		[
  			13081,
  			13081
  		],
  		"mapped",
  		[
  			12464,
  			12521,
  			12512,
  			12488,
  			12531
  		]
  	],
  	[
  		[
  			13082,
  			13082
  		],
  		"mapped",
  		[
  			12463,
  			12523,
  			12476,
  			12452,
  			12525
  		]
  	],
  	[
  		[
  			13083,
  			13083
  		],
  		"mapped",
  		[
  			12463,
  			12525,
  			12540,
  			12493
  		]
  	],
  	[
  		[
  			13084,
  			13084
  		],
  		"mapped",
  		[
  			12465,
  			12540,
  			12473
  		]
  	],
  	[
  		[
  			13085,
  			13085
  		],
  		"mapped",
  		[
  			12467,
  			12523,
  			12490
  		]
  	],
  	[
  		[
  			13086,
  			13086
  		],
  		"mapped",
  		[
  			12467,
  			12540,
  			12509
  		]
  	],
  	[
  		[
  			13087,
  			13087
  		],
  		"mapped",
  		[
  			12469,
  			12452,
  			12463,
  			12523
  		]
  	],
  	[
  		[
  			13088,
  			13088
  		],
  		"mapped",
  		[
  			12469,
  			12531,
  			12481,
  			12540,
  			12512
  		]
  	],
  	[
  		[
  			13089,
  			13089
  		],
  		"mapped",
  		[
  			12471,
  			12522,
  			12531,
  			12464
  		]
  	],
  	[
  		[
  			13090,
  			13090
  		],
  		"mapped",
  		[
  			12475,
  			12531,
  			12481
  		]
  	],
  	[
  		[
  			13091,
  			13091
  		],
  		"mapped",
  		[
  			12475,
  			12531,
  			12488
  		]
  	],
  	[
  		[
  			13092,
  			13092
  		],
  		"mapped",
  		[
  			12480,
  			12540,
  			12473
  		]
  	],
  	[
  		[
  			13093,
  			13093
  		],
  		"mapped",
  		[
  			12487,
  			12471
  		]
  	],
  	[
  		[
  			13094,
  			13094
  		],
  		"mapped",
  		[
  			12489,
  			12523
  		]
  	],
  	[
  		[
  			13095,
  			13095
  		],
  		"mapped",
  		[
  			12488,
  			12531
  		]
  	],
  	[
  		[
  			13096,
  			13096
  		],
  		"mapped",
  		[
  			12490,
  			12494
  		]
  	],
  	[
  		[
  			13097,
  			13097
  		],
  		"mapped",
  		[
  			12494,
  			12483,
  			12488
  		]
  	],
  	[
  		[
  			13098,
  			13098
  		],
  		"mapped",
  		[
  			12495,
  			12452,
  			12484
  		]
  	],
  	[
  		[
  			13099,
  			13099
  		],
  		"mapped",
  		[
  			12497,
  			12540,
  			12475,
  			12531,
  			12488
  		]
  	],
  	[
  		[
  			13100,
  			13100
  		],
  		"mapped",
  		[
  			12497,
  			12540,
  			12484
  		]
  	],
  	[
  		[
  			13101,
  			13101
  		],
  		"mapped",
  		[
  			12496,
  			12540,
  			12524,
  			12523
  		]
  	],
  	[
  		[
  			13102,
  			13102
  		],
  		"mapped",
  		[
  			12500,
  			12450,
  			12473,
  			12488,
  			12523
  		]
  	],
  	[
  		[
  			13103,
  			13103
  		],
  		"mapped",
  		[
  			12500,
  			12463,
  			12523
  		]
  	],
  	[
  		[
  			13104,
  			13104
  		],
  		"mapped",
  		[
  			12500,
  			12467
  		]
  	],
  	[
  		[
  			13105,
  			13105
  		],
  		"mapped",
  		[
  			12499,
  			12523
  		]
  	],
  	[
  		[
  			13106,
  			13106
  		],
  		"mapped",
  		[
  			12501,
  			12449,
  			12521,
  			12483,
  			12489
  		]
  	],
  	[
  		[
  			13107,
  			13107
  		],
  		"mapped",
  		[
  			12501,
  			12451,
  			12540,
  			12488
  		]
  	],
  	[
  		[
  			13108,
  			13108
  		],
  		"mapped",
  		[
  			12502,
  			12483,
  			12471,
  			12455,
  			12523
  		]
  	],
  	[
  		[
  			13109,
  			13109
  		],
  		"mapped",
  		[
  			12501,
  			12521,
  			12531
  		]
  	],
  	[
  		[
  			13110,
  			13110
  		],
  		"mapped",
  		[
  			12504,
  			12463,
  			12479,
  			12540,
  			12523
  		]
  	],
  	[
  		[
  			13111,
  			13111
  		],
  		"mapped",
  		[
  			12506,
  			12477
  		]
  	],
  	[
  		[
  			13112,
  			13112
  		],
  		"mapped",
  		[
  			12506,
  			12491,
  			12498
  		]
  	],
  	[
  		[
  			13113,
  			13113
  		],
  		"mapped",
  		[
  			12504,
  			12523,
  			12484
  		]
  	],
  	[
  		[
  			13114,
  			13114
  		],
  		"mapped",
  		[
  			12506,
  			12531,
  			12473
  		]
  	],
  	[
  		[
  			13115,
  			13115
  		],
  		"mapped",
  		[
  			12506,
  			12540,
  			12472
  		]
  	],
  	[
  		[
  			13116,
  			13116
  		],
  		"mapped",
  		[
  			12505,
  			12540,
  			12479
  		]
  	],
  	[
  		[
  			13117,
  			13117
  		],
  		"mapped",
  		[
  			12509,
  			12452,
  			12531,
  			12488
  		]
  	],
  	[
  		[
  			13118,
  			13118
  		],
  		"mapped",
  		[
  			12508,
  			12523,
  			12488
  		]
  	],
  	[
  		[
  			13119,
  			13119
  		],
  		"mapped",
  		[
  			12507,
  			12531
  		]
  	],
  	[
  		[
  			13120,
  			13120
  		],
  		"mapped",
  		[
  			12509,
  			12531,
  			12489
  		]
  	],
  	[
  		[
  			13121,
  			13121
  		],
  		"mapped",
  		[
  			12507,
  			12540,
  			12523
  		]
  	],
  	[
  		[
  			13122,
  			13122
  		],
  		"mapped",
  		[
  			12507,
  			12540,
  			12531
  		]
  	],
  	[
  		[
  			13123,
  			13123
  		],
  		"mapped",
  		[
  			12510,
  			12452,
  			12463,
  			12525
  		]
  	],
  	[
  		[
  			13124,
  			13124
  		],
  		"mapped",
  		[
  			12510,
  			12452,
  			12523
  		]
  	],
  	[
  		[
  			13125,
  			13125
  		],
  		"mapped",
  		[
  			12510,
  			12483,
  			12495
  		]
  	],
  	[
  		[
  			13126,
  			13126
  		],
  		"mapped",
  		[
  			12510,
  			12523,
  			12463
  		]
  	],
  	[
  		[
  			13127,
  			13127
  		],
  		"mapped",
  		[
  			12510,
  			12531,
  			12471,
  			12519,
  			12531
  		]
  	],
  	[
  		[
  			13128,
  			13128
  		],
  		"mapped",
  		[
  			12511,
  			12463,
  			12525,
  			12531
  		]
  	],
  	[
  		[
  			13129,
  			13129
  		],
  		"mapped",
  		[
  			12511,
  			12522
  		]
  	],
  	[
  		[
  			13130,
  			13130
  		],
  		"mapped",
  		[
  			12511,
  			12522,
  			12496,
  			12540,
  			12523
  		]
  	],
  	[
  		[
  			13131,
  			13131
  		],
  		"mapped",
  		[
  			12513,
  			12460
  		]
  	],
  	[
  		[
  			13132,
  			13132
  		],
  		"mapped",
  		[
  			12513,
  			12460,
  			12488,
  			12531
  		]
  	],
  	[
  		[
  			13133,
  			13133
  		],
  		"mapped",
  		[
  			12513,
  			12540,
  			12488,
  			12523
  		]
  	],
  	[
  		[
  			13134,
  			13134
  		],
  		"mapped",
  		[
  			12516,
  			12540,
  			12489
  		]
  	],
  	[
  		[
  			13135,
  			13135
  		],
  		"mapped",
  		[
  			12516,
  			12540,
  			12523
  		]
  	],
  	[
  		[
  			13136,
  			13136
  		],
  		"mapped",
  		[
  			12518,
  			12450,
  			12531
  		]
  	],
  	[
  		[
  			13137,
  			13137
  		],
  		"mapped",
  		[
  			12522,
  			12483,
  			12488,
  			12523
  		]
  	],
  	[
  		[
  			13138,
  			13138
  		],
  		"mapped",
  		[
  			12522,
  			12521
  		]
  	],
  	[
  		[
  			13139,
  			13139
  		],
  		"mapped",
  		[
  			12523,
  			12500,
  			12540
  		]
  	],
  	[
  		[
  			13140,
  			13140
  		],
  		"mapped",
  		[
  			12523,
  			12540,
  			12502,
  			12523
  		]
  	],
  	[
  		[
  			13141,
  			13141
  		],
  		"mapped",
  		[
  			12524,
  			12512
  		]
  	],
  	[
  		[
  			13142,
  			13142
  		],
  		"mapped",
  		[
  			12524,
  			12531,
  			12488,
  			12466,
  			12531
  		]
  	],
  	[
  		[
  			13143,
  			13143
  		],
  		"mapped",
  		[
  			12527,
  			12483,
  			12488
  		]
  	],
  	[
  		[
  			13144,
  			13144
  		],
  		"mapped",
  		[
  			48,
  			28857
  		]
  	],
  	[
  		[
  			13145,
  			13145
  		],
  		"mapped",
  		[
  			49,
  			28857
  		]
  	],
  	[
  		[
  			13146,
  			13146
  		],
  		"mapped",
  		[
  			50,
  			28857
  		]
  	],
  	[
  		[
  			13147,
  			13147
  		],
  		"mapped",
  		[
  			51,
  			28857
  		]
  	],
  	[
  		[
  			13148,
  			13148
  		],
  		"mapped",
  		[
  			52,
  			28857
  		]
  	],
  	[
  		[
  			13149,
  			13149
  		],
  		"mapped",
  		[
  			53,
  			28857
  		]
  	],
  	[
  		[
  			13150,
  			13150
  		],
  		"mapped",
  		[
  			54,
  			28857
  		]
  	],
  	[
  		[
  			13151,
  			13151
  		],
  		"mapped",
  		[
  			55,
  			28857
  		]
  	],
  	[
  		[
  			13152,
  			13152
  		],
  		"mapped",
  		[
  			56,
  			28857
  		]
  	],
  	[
  		[
  			13153,
  			13153
  		],
  		"mapped",
  		[
  			57,
  			28857
  		]
  	],
  	[
  		[
  			13154,
  			13154
  		],
  		"mapped",
  		[
  			49,
  			48,
  			28857
  		]
  	],
  	[
  		[
  			13155,
  			13155
  		],
  		"mapped",
  		[
  			49,
  			49,
  			28857
  		]
  	],
  	[
  		[
  			13156,
  			13156
  		],
  		"mapped",
  		[
  			49,
  			50,
  			28857
  		]
  	],
  	[
  		[
  			13157,
  			13157
  		],
  		"mapped",
  		[
  			49,
  			51,
  			28857
  		]
  	],
  	[
  		[
  			13158,
  			13158
  		],
  		"mapped",
  		[
  			49,
  			52,
  			28857
  		]
  	],
  	[
  		[
  			13159,
  			13159
  		],
  		"mapped",
  		[
  			49,
  			53,
  			28857
  		]
  	],
  	[
  		[
  			13160,
  			13160
  		],
  		"mapped",
  		[
  			49,
  			54,
  			28857
  		]
  	],
  	[
  		[
  			13161,
  			13161
  		],
  		"mapped",
  		[
  			49,
  			55,
  			28857
  		]
  	],
  	[
  		[
  			13162,
  			13162
  		],
  		"mapped",
  		[
  			49,
  			56,
  			28857
  		]
  	],
  	[
  		[
  			13163,
  			13163
  		],
  		"mapped",
  		[
  			49,
  			57,
  			28857
  		]
  	],
  	[
  		[
  			13164,
  			13164
  		],
  		"mapped",
  		[
  			50,
  			48,
  			28857
  		]
  	],
  	[
  		[
  			13165,
  			13165
  		],
  		"mapped",
  		[
  			50,
  			49,
  			28857
  		]
  	],
  	[
  		[
  			13166,
  			13166
  		],
  		"mapped",
  		[
  			50,
  			50,
  			28857
  		]
  	],
  	[
  		[
  			13167,
  			13167
  		],
  		"mapped",
  		[
  			50,
  			51,
  			28857
  		]
  	],
  	[
  		[
  			13168,
  			13168
  		],
  		"mapped",
  		[
  			50,
  			52,
  			28857
  		]
  	],
  	[
  		[
  			13169,
  			13169
  		],
  		"mapped",
  		[
  			104,
  			112,
  			97
  		]
  	],
  	[
  		[
  			13170,
  			13170
  		],
  		"mapped",
  		[
  			100,
  			97
  		]
  	],
  	[
  		[
  			13171,
  			13171
  		],
  		"mapped",
  		[
  			97,
  			117
  		]
  	],
  	[
  		[
  			13172,
  			13172
  		],
  		"mapped",
  		[
  			98,
  			97,
  			114
  		]
  	],
  	[
  		[
  			13173,
  			13173
  		],
  		"mapped",
  		[
  			111,
  			118
  		]
  	],
  	[
  		[
  			13174,
  			13174
  		],
  		"mapped",
  		[
  			112,
  			99
  		]
  	],
  	[
  		[
  			13175,
  			13175
  		],
  		"mapped",
  		[
  			100,
  			109
  		]
  	],
  	[
  		[
  			13176,
  			13176
  		],
  		"mapped",
  		[
  			100,
  			109,
  			50
  		]
  	],
  	[
  		[
  			13177,
  			13177
  		],
  		"mapped",
  		[
  			100,
  			109,
  			51
  		]
  	],
  	[
  		[
  			13178,
  			13178
  		],
  		"mapped",
  		[
  			105,
  			117
  		]
  	],
  	[
  		[
  			13179,
  			13179
  		],
  		"mapped",
  		[
  			24179,
  			25104
  		]
  	],
  	[
  		[
  			13180,
  			13180
  		],
  		"mapped",
  		[
  			26157,
  			21644
  		]
  	],
  	[
  		[
  			13181,
  			13181
  		],
  		"mapped",
  		[
  			22823,
  			27491
  		]
  	],
  	[
  		[
  			13182,
  			13182
  		],
  		"mapped",
  		[
  			26126,
  			27835
  		]
  	],
  	[
  		[
  			13183,
  			13183
  		],
  		"mapped",
  		[
  			26666,
  			24335,
  			20250,
  			31038
  		]
  	],
  	[
  		[
  			13184,
  			13184
  		],
  		"mapped",
  		[
  			112,
  			97
  		]
  	],
  	[
  		[
  			13185,
  			13185
  		],
  		"mapped",
  		[
  			110,
  			97
  		]
  	],
  	[
  		[
  			13186,
  			13186
  		],
  		"mapped",
  		[
  			956,
  			97
  		]
  	],
  	[
  		[
  			13187,
  			13187
  		],
  		"mapped",
  		[
  			109,
  			97
  		]
  	],
  	[
  		[
  			13188,
  			13188
  		],
  		"mapped",
  		[
  			107,
  			97
  		]
  	],
  	[
  		[
  			13189,
  			13189
  		],
  		"mapped",
  		[
  			107,
  			98
  		]
  	],
  	[
  		[
  			13190,
  			13190
  		],
  		"mapped",
  		[
  			109,
  			98
  		]
  	],
  	[
  		[
  			13191,
  			13191
  		],
  		"mapped",
  		[
  			103,
  			98
  		]
  	],
  	[
  		[
  			13192,
  			13192
  		],
  		"mapped",
  		[
  			99,
  			97,
  			108
  		]
  	],
  	[
  		[
  			13193,
  			13193
  		],
  		"mapped",
  		[
  			107,
  			99,
  			97,
  			108
  		]
  	],
  	[
  		[
  			13194,
  			13194
  		],
  		"mapped",
  		[
  			112,
  			102
  		]
  	],
  	[
  		[
  			13195,
  			13195
  		],
  		"mapped",
  		[
  			110,
  			102
  		]
  	],
  	[
  		[
  			13196,
  			13196
  		],
  		"mapped",
  		[
  			956,
  			102
  		]
  	],
  	[
  		[
  			13197,
  			13197
  		],
  		"mapped",
  		[
  			956,
  			103
  		]
  	],
  	[
  		[
  			13198,
  			13198
  		],
  		"mapped",
  		[
  			109,
  			103
  		]
  	],
  	[
  		[
  			13199,
  			13199
  		],
  		"mapped",
  		[
  			107,
  			103
  		]
  	],
  	[
  		[
  			13200,
  			13200
  		],
  		"mapped",
  		[
  			104,
  			122
  		]
  	],
  	[
  		[
  			13201,
  			13201
  		],
  		"mapped",
  		[
  			107,
  			104,
  			122
  		]
  	],
  	[
  		[
  			13202,
  			13202
  		],
  		"mapped",
  		[
  			109,
  			104,
  			122
  		]
  	],
  	[
  		[
  			13203,
  			13203
  		],
  		"mapped",
  		[
  			103,
  			104,
  			122
  		]
  	],
  	[
  		[
  			13204,
  			13204
  		],
  		"mapped",
  		[
  			116,
  			104,
  			122
  		]
  	],
  	[
  		[
  			13205,
  			13205
  		],
  		"mapped",
  		[
  			956,
  			108
  		]
  	],
  	[
  		[
  			13206,
  			13206
  		],
  		"mapped",
  		[
  			109,
  			108
  		]
  	],
  	[
  		[
  			13207,
  			13207
  		],
  		"mapped",
  		[
  			100,
  			108
  		]
  	],
  	[
  		[
  			13208,
  			13208
  		],
  		"mapped",
  		[
  			107,
  			108
  		]
  	],
  	[
  		[
  			13209,
  			13209
  		],
  		"mapped",
  		[
  			102,
  			109
  		]
  	],
  	[
  		[
  			13210,
  			13210
  		],
  		"mapped",
  		[
  			110,
  			109
  		]
  	],
  	[
  		[
  			13211,
  			13211
  		],
  		"mapped",
  		[
  			956,
  			109
  		]
  	],
  	[
  		[
  			13212,
  			13212
  		],
  		"mapped",
  		[
  			109,
  			109
  		]
  	],
  	[
  		[
  			13213,
  			13213
  		],
  		"mapped",
  		[
  			99,
  			109
  		]
  	],
  	[
  		[
  			13214,
  			13214
  		],
  		"mapped",
  		[
  			107,
  			109
  		]
  	],
  	[
  		[
  			13215,
  			13215
  		],
  		"mapped",
  		[
  			109,
  			109,
  			50
  		]
  	],
  	[
  		[
  			13216,
  			13216
  		],
  		"mapped",
  		[
  			99,
  			109,
  			50
  		]
  	],
  	[
  		[
  			13217,
  			13217
  		],
  		"mapped",
  		[
  			109,
  			50
  		]
  	],
  	[
  		[
  			13218,
  			13218
  		],
  		"mapped",
  		[
  			107,
  			109,
  			50
  		]
  	],
  	[
  		[
  			13219,
  			13219
  		],
  		"mapped",
  		[
  			109,
  			109,
  			51
  		]
  	],
  	[
  		[
  			13220,
  			13220
  		],
  		"mapped",
  		[
  			99,
  			109,
  			51
  		]
  	],
  	[
  		[
  			13221,
  			13221
  		],
  		"mapped",
  		[
  			109,
  			51
  		]
  	],
  	[
  		[
  			13222,
  			13222
  		],
  		"mapped",
  		[
  			107,
  			109,
  			51
  		]
  	],
  	[
  		[
  			13223,
  			13223
  		],
  		"mapped",
  		[
  			109,
  			8725,
  			115
  		]
  	],
  	[
  		[
  			13224,
  			13224
  		],
  		"mapped",
  		[
  			109,
  			8725,
  			115,
  			50
  		]
  	],
  	[
  		[
  			13225,
  			13225
  		],
  		"mapped",
  		[
  			112,
  			97
  		]
  	],
  	[
  		[
  			13226,
  			13226
  		],
  		"mapped",
  		[
  			107,
  			112,
  			97
  		]
  	],
  	[
  		[
  			13227,
  			13227
  		],
  		"mapped",
  		[
  			109,
  			112,
  			97
  		]
  	],
  	[
  		[
  			13228,
  			13228
  		],
  		"mapped",
  		[
  			103,
  			112,
  			97
  		]
  	],
  	[
  		[
  			13229,
  			13229
  		],
  		"mapped",
  		[
  			114,
  			97,
  			100
  		]
  	],
  	[
  		[
  			13230,
  			13230
  		],
  		"mapped",
  		[
  			114,
  			97,
  			100,
  			8725,
  			115
  		]
  	],
  	[
  		[
  			13231,
  			13231
  		],
  		"mapped",
  		[
  			114,
  			97,
  			100,
  			8725,
  			115,
  			50
  		]
  	],
  	[
  		[
  			13232,
  			13232
  		],
  		"mapped",
  		[
  			112,
  			115
  		]
  	],
  	[
  		[
  			13233,
  			13233
  		],
  		"mapped",
  		[
  			110,
  			115
  		]
  	],
  	[
  		[
  			13234,
  			13234
  		],
  		"mapped",
  		[
  			956,
  			115
  		]
  	],
  	[
  		[
  			13235,
  			13235
  		],
  		"mapped",
  		[
  			109,
  			115
  		]
  	],
  	[
  		[
  			13236,
  			13236
  		],
  		"mapped",
  		[
  			112,
  			118
  		]
  	],
  	[
  		[
  			13237,
  			13237
  		],
  		"mapped",
  		[
  			110,
  			118
  		]
  	],
  	[
  		[
  			13238,
  			13238
  		],
  		"mapped",
  		[
  			956,
  			118
  		]
  	],
  	[
  		[
  			13239,
  			13239
  		],
  		"mapped",
  		[
  			109,
  			118
  		]
  	],
  	[
  		[
  			13240,
  			13240
  		],
  		"mapped",
  		[
  			107,
  			118
  		]
  	],
  	[
  		[
  			13241,
  			13241
  		],
  		"mapped",
  		[
  			109,
  			118
  		]
  	],
  	[
  		[
  			13242,
  			13242
  		],
  		"mapped",
  		[
  			112,
  			119
  		]
  	],
  	[
  		[
  			13243,
  			13243
  		],
  		"mapped",
  		[
  			110,
  			119
  		]
  	],
  	[
  		[
  			13244,
  			13244
  		],
  		"mapped",
  		[
  			956,
  			119
  		]
  	],
  	[
  		[
  			13245,
  			13245
  		],
  		"mapped",
  		[
  			109,
  			119
  		]
  	],
  	[
  		[
  			13246,
  			13246
  		],
  		"mapped",
  		[
  			107,
  			119
  		]
  	],
  	[
  		[
  			13247,
  			13247
  		],
  		"mapped",
  		[
  			109,
  			119
  		]
  	],
  	[
  		[
  			13248,
  			13248
  		],
  		"mapped",
  		[
  			107,
  			969
  		]
  	],
  	[
  		[
  			13249,
  			13249
  		],
  		"mapped",
  		[
  			109,
  			969
  		]
  	],
  	[
  		[
  			13250,
  			13250
  		],
  		"disallowed"
  	],
  	[
  		[
  			13251,
  			13251
  		],
  		"mapped",
  		[
  			98,
  			113
  		]
  	],
  	[
  		[
  			13252,
  			13252
  		],
  		"mapped",
  		[
  			99,
  			99
  		]
  	],
  	[
  		[
  			13253,
  			13253
  		],
  		"mapped",
  		[
  			99,
  			100
  		]
  	],
  	[
  		[
  			13254,
  			13254
  		],
  		"mapped",
  		[
  			99,
  			8725,
  			107,
  			103
  		]
  	],
  	[
  		[
  			13255,
  			13255
  		],
  		"disallowed"
  	],
  	[
  		[
  			13256,
  			13256
  		],
  		"mapped",
  		[
  			100,
  			98
  		]
  	],
  	[
  		[
  			13257,
  			13257
  		],
  		"mapped",
  		[
  			103,
  			121
  		]
  	],
  	[
  		[
  			13258,
  			13258
  		],
  		"mapped",
  		[
  			104,
  			97
  		]
  	],
  	[
  		[
  			13259,
  			13259
  		],
  		"mapped",
  		[
  			104,
  			112
  		]
  	],
  	[
  		[
  			13260,
  			13260
  		],
  		"mapped",
  		[
  			105,
  			110
  		]
  	],
  	[
  		[
  			13261,
  			13261
  		],
  		"mapped",
  		[
  			107,
  			107
  		]
  	],
  	[
  		[
  			13262,
  			13262
  		],
  		"mapped",
  		[
  			107,
  			109
  		]
  	],
  	[
  		[
  			13263,
  			13263
  		],
  		"mapped",
  		[
  			107,
  			116
  		]
  	],
  	[
  		[
  			13264,
  			13264
  		],
  		"mapped",
  		[
  			108,
  			109
  		]
  	],
  	[
  		[
  			13265,
  			13265
  		],
  		"mapped",
  		[
  			108,
  			110
  		]
  	],
  	[
  		[
  			13266,
  			13266
  		],
  		"mapped",
  		[
  			108,
  			111,
  			103
  		]
  	],
  	[
  		[
  			13267,
  			13267
  		],
  		"mapped",
  		[
  			108,
  			120
  		]
  	],
  	[
  		[
  			13268,
  			13268
  		],
  		"mapped",
  		[
  			109,
  			98
  		]
  	],
  	[
  		[
  			13269,
  			13269
  		],
  		"mapped",
  		[
  			109,
  			105,
  			108
  		]
  	],
  	[
  		[
  			13270,
  			13270
  		],
  		"mapped",
  		[
  			109,
  			111,
  			108
  		]
  	],
  	[
  		[
  			13271,
  			13271
  		],
  		"mapped",
  		[
  			112,
  			104
  		]
  	],
  	[
  		[
  			13272,
  			13272
  		],
  		"disallowed"
  	],
  	[
  		[
  			13273,
  			13273
  		],
  		"mapped",
  		[
  			112,
  			112,
  			109
  		]
  	],
  	[
  		[
  			13274,
  			13274
  		],
  		"mapped",
  		[
  			112,
  			114
  		]
  	],
  	[
  		[
  			13275,
  			13275
  		],
  		"mapped",
  		[
  			115,
  			114
  		]
  	],
  	[
  		[
  			13276,
  			13276
  		],
  		"mapped",
  		[
  			115,
  			118
  		]
  	],
  	[
  		[
  			13277,
  			13277
  		],
  		"mapped",
  		[
  			119,
  			98
  		]
  	],
  	[
  		[
  			13278,
  			13278
  		],
  		"mapped",
  		[
  			118,
  			8725,
  			109
  		]
  	],
  	[
  		[
  			13279,
  			13279
  		],
  		"mapped",
  		[
  			97,
  			8725,
  			109
  		]
  	],
  	[
  		[
  			13280,
  			13280
  		],
  		"mapped",
  		[
  			49,
  			26085
  		]
  	],
  	[
  		[
  			13281,
  			13281
  		],
  		"mapped",
  		[
  			50,
  			26085
  		]
  	],
  	[
  		[
  			13282,
  			13282
  		],
  		"mapped",
  		[
  			51,
  			26085
  		]
  	],
  	[
  		[
  			13283,
  			13283
  		],
  		"mapped",
  		[
  			52,
  			26085
  		]
  	],
  	[
  		[
  			13284,
  			13284
  		],
  		"mapped",
  		[
  			53,
  			26085
  		]
  	],
  	[
  		[
  			13285,
  			13285
  		],
  		"mapped",
  		[
  			54,
  			26085
  		]
  	],
  	[
  		[
  			13286,
  			13286
  		],
  		"mapped",
  		[
  			55,
  			26085
  		]
  	],
  	[
  		[
  			13287,
  			13287
  		],
  		"mapped",
  		[
  			56,
  			26085
  		]
  	],
  	[
  		[
  			13288,
  			13288
  		],
  		"mapped",
  		[
  			57,
  			26085
  		]
  	],
  	[
  		[
  			13289,
  			13289
  		],
  		"mapped",
  		[
  			49,
  			48,
  			26085
  		]
  	],
  	[
  		[
  			13290,
  			13290
  		],
  		"mapped",
  		[
  			49,
  			49,
  			26085
  		]
  	],
  	[
  		[
  			13291,
  			13291
  		],
  		"mapped",
  		[
  			49,
  			50,
  			26085
  		]
  	],
  	[
  		[
  			13292,
  			13292
  		],
  		"mapped",
  		[
  			49,
  			51,
  			26085
  		]
  	],
  	[
  		[
  			13293,
  			13293
  		],
  		"mapped",
  		[
  			49,
  			52,
  			26085
  		]
  	],
  	[
  		[
  			13294,
  			13294
  		],
  		"mapped",
  		[
  			49,
  			53,
  			26085
  		]
  	],
  	[
  		[
  			13295,
  			13295
  		],
  		"mapped",
  		[
  			49,
  			54,
  			26085
  		]
  	],
  	[
  		[
  			13296,
  			13296
  		],
  		"mapped",
  		[
  			49,
  			55,
  			26085
  		]
  	],
  	[
  		[
  			13297,
  			13297
  		],
  		"mapped",
  		[
  			49,
  			56,
  			26085
  		]
  	],
  	[
  		[
  			13298,
  			13298
  		],
  		"mapped",
  		[
  			49,
  			57,
  			26085
  		]
  	],
  	[
  		[
  			13299,
  			13299
  		],
  		"mapped",
  		[
  			50,
  			48,
  			26085
  		]
  	],
  	[
  		[
  			13300,
  			13300
  		],
  		"mapped",
  		[
  			50,
  			49,
  			26085
  		]
  	],
  	[
  		[
  			13301,
  			13301
  		],
  		"mapped",
  		[
  			50,
  			50,
  			26085
  		]
  	],
  	[
  		[
  			13302,
  			13302
  		],
  		"mapped",
  		[
  			50,
  			51,
  			26085
  		]
  	],
  	[
  		[
  			13303,
  			13303
  		],
  		"mapped",
  		[
  			50,
  			52,
  			26085
  		]
  	],
  	[
  		[
  			13304,
  			13304
  		],
  		"mapped",
  		[
  			50,
  			53,
  			26085
  		]
  	],
  	[
  		[
  			13305,
  			13305
  		],
  		"mapped",
  		[
  			50,
  			54,
  			26085
  		]
  	],
  	[
  		[
  			13306,
  			13306
  		],
  		"mapped",
  		[
  			50,
  			55,
  			26085
  		]
  	],
  	[
  		[
  			13307,
  			13307
  		],
  		"mapped",
  		[
  			50,
  			56,
  			26085
  		]
  	],
  	[
  		[
  			13308,
  			13308
  		],
  		"mapped",
  		[
  			50,
  			57,
  			26085
  		]
  	],
  	[
  		[
  			13309,
  			13309
  		],
  		"mapped",
  		[
  			51,
  			48,
  			26085
  		]
  	],
  	[
  		[
  			13310,
  			13310
  		],
  		"mapped",
  		[
  			51,
  			49,
  			26085
  		]
  	],
  	[
  		[
  			13311,
  			13311
  		],
  		"mapped",
  		[
  			103,
  			97,
  			108
  		]
  	],
  	[
  		[
  			13312,
  			19893
  		],
  		"valid"
  	],
  	[
  		[
  			19894,
  			19903
  		],
  		"disallowed"
  	],
  	[
  		[
  			19904,
  			19967
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			19968,
  			40869
  		],
  		"valid"
  	],
  	[
  		[
  			40870,
  			40891
  		],
  		"valid"
  	],
  	[
  		[
  			40892,
  			40899
  		],
  		"valid"
  	],
  	[
  		[
  			40900,
  			40907
  		],
  		"valid"
  	],
  	[
  		[
  			40908,
  			40908
  		],
  		"valid"
  	],
  	[
  		[
  			40909,
  			40917
  		],
  		"valid"
  	],
  	[
  		[
  			40918,
  			40959
  		],
  		"disallowed"
  	],
  	[
  		[
  			40960,
  			42124
  		],
  		"valid"
  	],
  	[
  		[
  			42125,
  			42127
  		],
  		"disallowed"
  	],
  	[
  		[
  			42128,
  			42145
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			42146,
  			42147
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			42148,
  			42163
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			42164,
  			42164
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			42165,
  			42176
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			42177,
  			42177
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			42178,
  			42180
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			42181,
  			42181
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			42182,
  			42182
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			42183,
  			42191
  		],
  		"disallowed"
  	],
  	[
  		[
  			42192,
  			42237
  		],
  		"valid"
  	],
  	[
  		[
  			42238,
  			42239
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			42240,
  			42508
  		],
  		"valid"
  	],
  	[
  		[
  			42509,
  			42511
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			42512,
  			42539
  		],
  		"valid"
  	],
  	[
  		[
  			42540,
  			42559
  		],
  		"disallowed"
  	],
  	[
  		[
  			42560,
  			42560
  		],
  		"mapped",
  		[
  			42561
  		]
  	],
  	[
  		[
  			42561,
  			42561
  		],
  		"valid"
  	],
  	[
  		[
  			42562,
  			42562
  		],
  		"mapped",
  		[
  			42563
  		]
  	],
  	[
  		[
  			42563,
  			42563
  		],
  		"valid"
  	],
  	[
  		[
  			42564,
  			42564
  		],
  		"mapped",
  		[
  			42565
  		]
  	],
  	[
  		[
  			42565,
  			42565
  		],
  		"valid"
  	],
  	[
  		[
  			42566,
  			42566
  		],
  		"mapped",
  		[
  			42567
  		]
  	],
  	[
  		[
  			42567,
  			42567
  		],
  		"valid"
  	],
  	[
  		[
  			42568,
  			42568
  		],
  		"mapped",
  		[
  			42569
  		]
  	],
  	[
  		[
  			42569,
  			42569
  		],
  		"valid"
  	],
  	[
  		[
  			42570,
  			42570
  		],
  		"mapped",
  		[
  			42571
  		]
  	],
  	[
  		[
  			42571,
  			42571
  		],
  		"valid"
  	],
  	[
  		[
  			42572,
  			42572
  		],
  		"mapped",
  		[
  			42573
  		]
  	],
  	[
  		[
  			42573,
  			42573
  		],
  		"valid"
  	],
  	[
  		[
  			42574,
  			42574
  		],
  		"mapped",
  		[
  			42575
  		]
  	],
  	[
  		[
  			42575,
  			42575
  		],
  		"valid"
  	],
  	[
  		[
  			42576,
  			42576
  		],
  		"mapped",
  		[
  			42577
  		]
  	],
  	[
  		[
  			42577,
  			42577
  		],
  		"valid"
  	],
  	[
  		[
  			42578,
  			42578
  		],
  		"mapped",
  		[
  			42579
  		]
  	],
  	[
  		[
  			42579,
  			42579
  		],
  		"valid"
  	],
  	[
  		[
  			42580,
  			42580
  		],
  		"mapped",
  		[
  			42581
  		]
  	],
  	[
  		[
  			42581,
  			42581
  		],
  		"valid"
  	],
  	[
  		[
  			42582,
  			42582
  		],
  		"mapped",
  		[
  			42583
  		]
  	],
  	[
  		[
  			42583,
  			42583
  		],
  		"valid"
  	],
  	[
  		[
  			42584,
  			42584
  		],
  		"mapped",
  		[
  			42585
  		]
  	],
  	[
  		[
  			42585,
  			42585
  		],
  		"valid"
  	],
  	[
  		[
  			42586,
  			42586
  		],
  		"mapped",
  		[
  			42587
  		]
  	],
  	[
  		[
  			42587,
  			42587
  		],
  		"valid"
  	],
  	[
  		[
  			42588,
  			42588
  		],
  		"mapped",
  		[
  			42589
  		]
  	],
  	[
  		[
  			42589,
  			42589
  		],
  		"valid"
  	],
  	[
  		[
  			42590,
  			42590
  		],
  		"mapped",
  		[
  			42591
  		]
  	],
  	[
  		[
  			42591,
  			42591
  		],
  		"valid"
  	],
  	[
  		[
  			42592,
  			42592
  		],
  		"mapped",
  		[
  			42593
  		]
  	],
  	[
  		[
  			42593,
  			42593
  		],
  		"valid"
  	],
  	[
  		[
  			42594,
  			42594
  		],
  		"mapped",
  		[
  			42595
  		]
  	],
  	[
  		[
  			42595,
  			42595
  		],
  		"valid"
  	],
  	[
  		[
  			42596,
  			42596
  		],
  		"mapped",
  		[
  			42597
  		]
  	],
  	[
  		[
  			42597,
  			42597
  		],
  		"valid"
  	],
  	[
  		[
  			42598,
  			42598
  		],
  		"mapped",
  		[
  			42599
  		]
  	],
  	[
  		[
  			42599,
  			42599
  		],
  		"valid"
  	],
  	[
  		[
  			42600,
  			42600
  		],
  		"mapped",
  		[
  			42601
  		]
  	],
  	[
  		[
  			42601,
  			42601
  		],
  		"valid"
  	],
  	[
  		[
  			42602,
  			42602
  		],
  		"mapped",
  		[
  			42603
  		]
  	],
  	[
  		[
  			42603,
  			42603
  		],
  		"valid"
  	],
  	[
  		[
  			42604,
  			42604
  		],
  		"mapped",
  		[
  			42605
  		]
  	],
  	[
  		[
  			42605,
  			42607
  		],
  		"valid"
  	],
  	[
  		[
  			42608,
  			42611
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			42612,
  			42619
  		],
  		"valid"
  	],
  	[
  		[
  			42620,
  			42621
  		],
  		"valid"
  	],
  	[
  		[
  			42622,
  			42622
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			42623,
  			42623
  		],
  		"valid"
  	],
  	[
  		[
  			42624,
  			42624
  		],
  		"mapped",
  		[
  			42625
  		]
  	],
  	[
  		[
  			42625,
  			42625
  		],
  		"valid"
  	],
  	[
  		[
  			42626,
  			42626
  		],
  		"mapped",
  		[
  			42627
  		]
  	],
  	[
  		[
  			42627,
  			42627
  		],
  		"valid"
  	],
  	[
  		[
  			42628,
  			42628
  		],
  		"mapped",
  		[
  			42629
  		]
  	],
  	[
  		[
  			42629,
  			42629
  		],
  		"valid"
  	],
  	[
  		[
  			42630,
  			42630
  		],
  		"mapped",
  		[
  			42631
  		]
  	],
  	[
  		[
  			42631,
  			42631
  		],
  		"valid"
  	],
  	[
  		[
  			42632,
  			42632
  		],
  		"mapped",
  		[
  			42633
  		]
  	],
  	[
  		[
  			42633,
  			42633
  		],
  		"valid"
  	],
  	[
  		[
  			42634,
  			42634
  		],
  		"mapped",
  		[
  			42635
  		]
  	],
  	[
  		[
  			42635,
  			42635
  		],
  		"valid"
  	],
  	[
  		[
  			42636,
  			42636
  		],
  		"mapped",
  		[
  			42637
  		]
  	],
  	[
  		[
  			42637,
  			42637
  		],
  		"valid"
  	],
  	[
  		[
  			42638,
  			42638
  		],
  		"mapped",
  		[
  			42639
  		]
  	],
  	[
  		[
  			42639,
  			42639
  		],
  		"valid"
  	],
  	[
  		[
  			42640,
  			42640
  		],
  		"mapped",
  		[
  			42641
  		]
  	],
  	[
  		[
  			42641,
  			42641
  		],
  		"valid"
  	],
  	[
  		[
  			42642,
  			42642
  		],
  		"mapped",
  		[
  			42643
  		]
  	],
  	[
  		[
  			42643,
  			42643
  		],
  		"valid"
  	],
  	[
  		[
  			42644,
  			42644
  		],
  		"mapped",
  		[
  			42645
  		]
  	],
  	[
  		[
  			42645,
  			42645
  		],
  		"valid"
  	],
  	[
  		[
  			42646,
  			42646
  		],
  		"mapped",
  		[
  			42647
  		]
  	],
  	[
  		[
  			42647,
  			42647
  		],
  		"valid"
  	],
  	[
  		[
  			42648,
  			42648
  		],
  		"mapped",
  		[
  			42649
  		]
  	],
  	[
  		[
  			42649,
  			42649
  		],
  		"valid"
  	],
  	[
  		[
  			42650,
  			42650
  		],
  		"mapped",
  		[
  			42651
  		]
  	],
  	[
  		[
  			42651,
  			42651
  		],
  		"valid"
  	],
  	[
  		[
  			42652,
  			42652
  		],
  		"mapped",
  		[
  			1098
  		]
  	],
  	[
  		[
  			42653,
  			42653
  		],
  		"mapped",
  		[
  			1100
  		]
  	],
  	[
  		[
  			42654,
  			42654
  		],
  		"valid"
  	],
  	[
  		[
  			42655,
  			42655
  		],
  		"valid"
  	],
  	[
  		[
  			42656,
  			42725
  		],
  		"valid"
  	],
  	[
  		[
  			42726,
  			42735
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			42736,
  			42737
  		],
  		"valid"
  	],
  	[
  		[
  			42738,
  			42743
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			42744,
  			42751
  		],
  		"disallowed"
  	],
  	[
  		[
  			42752,
  			42774
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			42775,
  			42778
  		],
  		"valid"
  	],
  	[
  		[
  			42779,
  			42783
  		],
  		"valid"
  	],
  	[
  		[
  			42784,
  			42785
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			42786,
  			42786
  		],
  		"mapped",
  		[
  			42787
  		]
  	],
  	[
  		[
  			42787,
  			42787
  		],
  		"valid"
  	],
  	[
  		[
  			42788,
  			42788
  		],
  		"mapped",
  		[
  			42789
  		]
  	],
  	[
  		[
  			42789,
  			42789
  		],
  		"valid"
  	],
  	[
  		[
  			42790,
  			42790
  		],
  		"mapped",
  		[
  			42791
  		]
  	],
  	[
  		[
  			42791,
  			42791
  		],
  		"valid"
  	],
  	[
  		[
  			42792,
  			42792
  		],
  		"mapped",
  		[
  			42793
  		]
  	],
  	[
  		[
  			42793,
  			42793
  		],
  		"valid"
  	],
  	[
  		[
  			42794,
  			42794
  		],
  		"mapped",
  		[
  			42795
  		]
  	],
  	[
  		[
  			42795,
  			42795
  		],
  		"valid"
  	],
  	[
  		[
  			42796,
  			42796
  		],
  		"mapped",
  		[
  			42797
  		]
  	],
  	[
  		[
  			42797,
  			42797
  		],
  		"valid"
  	],
  	[
  		[
  			42798,
  			42798
  		],
  		"mapped",
  		[
  			42799
  		]
  	],
  	[
  		[
  			42799,
  			42801
  		],
  		"valid"
  	],
  	[
  		[
  			42802,
  			42802
  		],
  		"mapped",
  		[
  			42803
  		]
  	],
  	[
  		[
  			42803,
  			42803
  		],
  		"valid"
  	],
  	[
  		[
  			42804,
  			42804
  		],
  		"mapped",
  		[
  			42805
  		]
  	],
  	[
  		[
  			42805,
  			42805
  		],
  		"valid"
  	],
  	[
  		[
  			42806,
  			42806
  		],
  		"mapped",
  		[
  			42807
  		]
  	],
  	[
  		[
  			42807,
  			42807
  		],
  		"valid"
  	],
  	[
  		[
  			42808,
  			42808
  		],
  		"mapped",
  		[
  			42809
  		]
  	],
  	[
  		[
  			42809,
  			42809
  		],
  		"valid"
  	],
  	[
  		[
  			42810,
  			42810
  		],
  		"mapped",
  		[
  			42811
  		]
  	],
  	[
  		[
  			42811,
  			42811
  		],
  		"valid"
  	],
  	[
  		[
  			42812,
  			42812
  		],
  		"mapped",
  		[
  			42813
  		]
  	],
  	[
  		[
  			42813,
  			42813
  		],
  		"valid"
  	],
  	[
  		[
  			42814,
  			42814
  		],
  		"mapped",
  		[
  			42815
  		]
  	],
  	[
  		[
  			42815,
  			42815
  		],
  		"valid"
  	],
  	[
  		[
  			42816,
  			42816
  		],
  		"mapped",
  		[
  			42817
  		]
  	],
  	[
  		[
  			42817,
  			42817
  		],
  		"valid"
  	],
  	[
  		[
  			42818,
  			42818
  		],
  		"mapped",
  		[
  			42819
  		]
  	],
  	[
  		[
  			42819,
  			42819
  		],
  		"valid"
  	],
  	[
  		[
  			42820,
  			42820
  		],
  		"mapped",
  		[
  			42821
  		]
  	],
  	[
  		[
  			42821,
  			42821
  		],
  		"valid"
  	],
  	[
  		[
  			42822,
  			42822
  		],
  		"mapped",
  		[
  			42823
  		]
  	],
  	[
  		[
  			42823,
  			42823
  		],
  		"valid"
  	],
  	[
  		[
  			42824,
  			42824
  		],
  		"mapped",
  		[
  			42825
  		]
  	],
  	[
  		[
  			42825,
  			42825
  		],
  		"valid"
  	],
  	[
  		[
  			42826,
  			42826
  		],
  		"mapped",
  		[
  			42827
  		]
  	],
  	[
  		[
  			42827,
  			42827
  		],
  		"valid"
  	],
  	[
  		[
  			42828,
  			42828
  		],
  		"mapped",
  		[
  			42829
  		]
  	],
  	[
  		[
  			42829,
  			42829
  		],
  		"valid"
  	],
  	[
  		[
  			42830,
  			42830
  		],
  		"mapped",
  		[
  			42831
  		]
  	],
  	[
  		[
  			42831,
  			42831
  		],
  		"valid"
  	],
  	[
  		[
  			42832,
  			42832
  		],
  		"mapped",
  		[
  			42833
  		]
  	],
  	[
  		[
  			42833,
  			42833
  		],
  		"valid"
  	],
  	[
  		[
  			42834,
  			42834
  		],
  		"mapped",
  		[
  			42835
  		]
  	],
  	[
  		[
  			42835,
  			42835
  		],
  		"valid"
  	],
  	[
  		[
  			42836,
  			42836
  		],
  		"mapped",
  		[
  			42837
  		]
  	],
  	[
  		[
  			42837,
  			42837
  		],
  		"valid"
  	],
  	[
  		[
  			42838,
  			42838
  		],
  		"mapped",
  		[
  			42839
  		]
  	],
  	[
  		[
  			42839,
  			42839
  		],
  		"valid"
  	],
  	[
  		[
  			42840,
  			42840
  		],
  		"mapped",
  		[
  			42841
  		]
  	],
  	[
  		[
  			42841,
  			42841
  		],
  		"valid"
  	],
  	[
  		[
  			42842,
  			42842
  		],
  		"mapped",
  		[
  			42843
  		]
  	],
  	[
  		[
  			42843,
  			42843
  		],
  		"valid"
  	],
  	[
  		[
  			42844,
  			42844
  		],
  		"mapped",
  		[
  			42845
  		]
  	],
  	[
  		[
  			42845,
  			42845
  		],
  		"valid"
  	],
  	[
  		[
  			42846,
  			42846
  		],
  		"mapped",
  		[
  			42847
  		]
  	],
  	[
  		[
  			42847,
  			42847
  		],
  		"valid"
  	],
  	[
  		[
  			42848,
  			42848
  		],
  		"mapped",
  		[
  			42849
  		]
  	],
  	[
  		[
  			42849,
  			42849
  		],
  		"valid"
  	],
  	[
  		[
  			42850,
  			42850
  		],
  		"mapped",
  		[
  			42851
  		]
  	],
  	[
  		[
  			42851,
  			42851
  		],
  		"valid"
  	],
  	[
  		[
  			42852,
  			42852
  		],
  		"mapped",
  		[
  			42853
  		]
  	],
  	[
  		[
  			42853,
  			42853
  		],
  		"valid"
  	],
  	[
  		[
  			42854,
  			42854
  		],
  		"mapped",
  		[
  			42855
  		]
  	],
  	[
  		[
  			42855,
  			42855
  		],
  		"valid"
  	],
  	[
  		[
  			42856,
  			42856
  		],
  		"mapped",
  		[
  			42857
  		]
  	],
  	[
  		[
  			42857,
  			42857
  		],
  		"valid"
  	],
  	[
  		[
  			42858,
  			42858
  		],
  		"mapped",
  		[
  			42859
  		]
  	],
  	[
  		[
  			42859,
  			42859
  		],
  		"valid"
  	],
  	[
  		[
  			42860,
  			42860
  		],
  		"mapped",
  		[
  			42861
  		]
  	],
  	[
  		[
  			42861,
  			42861
  		],
  		"valid"
  	],
  	[
  		[
  			42862,
  			42862
  		],
  		"mapped",
  		[
  			42863
  		]
  	],
  	[
  		[
  			42863,
  			42863
  		],
  		"valid"
  	],
  	[
  		[
  			42864,
  			42864
  		],
  		"mapped",
  		[
  			42863
  		]
  	],
  	[
  		[
  			42865,
  			42872
  		],
  		"valid"
  	],
  	[
  		[
  			42873,
  			42873
  		],
  		"mapped",
  		[
  			42874
  		]
  	],
  	[
  		[
  			42874,
  			42874
  		],
  		"valid"
  	],
  	[
  		[
  			42875,
  			42875
  		],
  		"mapped",
  		[
  			42876
  		]
  	],
  	[
  		[
  			42876,
  			42876
  		],
  		"valid"
  	],
  	[
  		[
  			42877,
  			42877
  		],
  		"mapped",
  		[
  			7545
  		]
  	],
  	[
  		[
  			42878,
  			42878
  		],
  		"mapped",
  		[
  			42879
  		]
  	],
  	[
  		[
  			42879,
  			42879
  		],
  		"valid"
  	],
  	[
  		[
  			42880,
  			42880
  		],
  		"mapped",
  		[
  			42881
  		]
  	],
  	[
  		[
  			42881,
  			42881
  		],
  		"valid"
  	],
  	[
  		[
  			42882,
  			42882
  		],
  		"mapped",
  		[
  			42883
  		]
  	],
  	[
  		[
  			42883,
  			42883
  		],
  		"valid"
  	],
  	[
  		[
  			42884,
  			42884
  		],
  		"mapped",
  		[
  			42885
  		]
  	],
  	[
  		[
  			42885,
  			42885
  		],
  		"valid"
  	],
  	[
  		[
  			42886,
  			42886
  		],
  		"mapped",
  		[
  			42887
  		]
  	],
  	[
  		[
  			42887,
  			42888
  		],
  		"valid"
  	],
  	[
  		[
  			42889,
  			42890
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			42891,
  			42891
  		],
  		"mapped",
  		[
  			42892
  		]
  	],
  	[
  		[
  			42892,
  			42892
  		],
  		"valid"
  	],
  	[
  		[
  			42893,
  			42893
  		],
  		"mapped",
  		[
  			613
  		]
  	],
  	[
  		[
  			42894,
  			42894
  		],
  		"valid"
  	],
  	[
  		[
  			42895,
  			42895
  		],
  		"valid"
  	],
  	[
  		[
  			42896,
  			42896
  		],
  		"mapped",
  		[
  			42897
  		]
  	],
  	[
  		[
  			42897,
  			42897
  		],
  		"valid"
  	],
  	[
  		[
  			42898,
  			42898
  		],
  		"mapped",
  		[
  			42899
  		]
  	],
  	[
  		[
  			42899,
  			42899
  		],
  		"valid"
  	],
  	[
  		[
  			42900,
  			42901
  		],
  		"valid"
  	],
  	[
  		[
  			42902,
  			42902
  		],
  		"mapped",
  		[
  			42903
  		]
  	],
  	[
  		[
  			42903,
  			42903
  		],
  		"valid"
  	],
  	[
  		[
  			42904,
  			42904
  		],
  		"mapped",
  		[
  			42905
  		]
  	],
  	[
  		[
  			42905,
  			42905
  		],
  		"valid"
  	],
  	[
  		[
  			42906,
  			42906
  		],
  		"mapped",
  		[
  			42907
  		]
  	],
  	[
  		[
  			42907,
  			42907
  		],
  		"valid"
  	],
  	[
  		[
  			42908,
  			42908
  		],
  		"mapped",
  		[
  			42909
  		]
  	],
  	[
  		[
  			42909,
  			42909
  		],
  		"valid"
  	],
  	[
  		[
  			42910,
  			42910
  		],
  		"mapped",
  		[
  			42911
  		]
  	],
  	[
  		[
  			42911,
  			42911
  		],
  		"valid"
  	],
  	[
  		[
  			42912,
  			42912
  		],
  		"mapped",
  		[
  			42913
  		]
  	],
  	[
  		[
  			42913,
  			42913
  		],
  		"valid"
  	],
  	[
  		[
  			42914,
  			42914
  		],
  		"mapped",
  		[
  			42915
  		]
  	],
  	[
  		[
  			42915,
  			42915
  		],
  		"valid"
  	],
  	[
  		[
  			42916,
  			42916
  		],
  		"mapped",
  		[
  			42917
  		]
  	],
  	[
  		[
  			42917,
  			42917
  		],
  		"valid"
  	],
  	[
  		[
  			42918,
  			42918
  		],
  		"mapped",
  		[
  			42919
  		]
  	],
  	[
  		[
  			42919,
  			42919
  		],
  		"valid"
  	],
  	[
  		[
  			42920,
  			42920
  		],
  		"mapped",
  		[
  			42921
  		]
  	],
  	[
  		[
  			42921,
  			42921
  		],
  		"valid"
  	],
  	[
  		[
  			42922,
  			42922
  		],
  		"mapped",
  		[
  			614
  		]
  	],
  	[
  		[
  			42923,
  			42923
  		],
  		"mapped",
  		[
  			604
  		]
  	],
  	[
  		[
  			42924,
  			42924
  		],
  		"mapped",
  		[
  			609
  		]
  	],
  	[
  		[
  			42925,
  			42925
  		],
  		"mapped",
  		[
  			620
  		]
  	],
  	[
  		[
  			42926,
  			42927
  		],
  		"disallowed"
  	],
  	[
  		[
  			42928,
  			42928
  		],
  		"mapped",
  		[
  			670
  		]
  	],
  	[
  		[
  			42929,
  			42929
  		],
  		"mapped",
  		[
  			647
  		]
  	],
  	[
  		[
  			42930,
  			42930
  		],
  		"mapped",
  		[
  			669
  		]
  	],
  	[
  		[
  			42931,
  			42931
  		],
  		"mapped",
  		[
  			43859
  		]
  	],
  	[
  		[
  			42932,
  			42932
  		],
  		"mapped",
  		[
  			42933
  		]
  	],
  	[
  		[
  			42933,
  			42933
  		],
  		"valid"
  	],
  	[
  		[
  			42934,
  			42934
  		],
  		"mapped",
  		[
  			42935
  		]
  	],
  	[
  		[
  			42935,
  			42935
  		],
  		"valid"
  	],
  	[
  		[
  			42936,
  			42998
  		],
  		"disallowed"
  	],
  	[
  		[
  			42999,
  			42999
  		],
  		"valid"
  	],
  	[
  		[
  			43000,
  			43000
  		],
  		"mapped",
  		[
  			295
  		]
  	],
  	[
  		[
  			43001,
  			43001
  		],
  		"mapped",
  		[
  			339
  		]
  	],
  	[
  		[
  			43002,
  			43002
  		],
  		"valid"
  	],
  	[
  		[
  			43003,
  			43007
  		],
  		"valid"
  	],
  	[
  		[
  			43008,
  			43047
  		],
  		"valid"
  	],
  	[
  		[
  			43048,
  			43051
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			43052,
  			43055
  		],
  		"disallowed"
  	],
  	[
  		[
  			43056,
  			43065
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			43066,
  			43071
  		],
  		"disallowed"
  	],
  	[
  		[
  			43072,
  			43123
  		],
  		"valid"
  	],
  	[
  		[
  			43124,
  			43127
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			43128,
  			43135
  		],
  		"disallowed"
  	],
  	[
  		[
  			43136,
  			43204
  		],
  		"valid"
  	],
  	[
  		[
  			43205,
  			43213
  		],
  		"disallowed"
  	],
  	[
  		[
  			43214,
  			43215
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			43216,
  			43225
  		],
  		"valid"
  	],
  	[
  		[
  			43226,
  			43231
  		],
  		"disallowed"
  	],
  	[
  		[
  			43232,
  			43255
  		],
  		"valid"
  	],
  	[
  		[
  			43256,
  			43258
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			43259,
  			43259
  		],
  		"valid"
  	],
  	[
  		[
  			43260,
  			43260
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			43261,
  			43261
  		],
  		"valid"
  	],
  	[
  		[
  			43262,
  			43263
  		],
  		"disallowed"
  	],
  	[
  		[
  			43264,
  			43309
  		],
  		"valid"
  	],
  	[
  		[
  			43310,
  			43311
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			43312,
  			43347
  		],
  		"valid"
  	],
  	[
  		[
  			43348,
  			43358
  		],
  		"disallowed"
  	],
  	[
  		[
  			43359,
  			43359
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			43360,
  			43388
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			43389,
  			43391
  		],
  		"disallowed"
  	],
  	[
  		[
  			43392,
  			43456
  		],
  		"valid"
  	],
  	[
  		[
  			43457,
  			43469
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			43470,
  			43470
  		],
  		"disallowed"
  	],
  	[
  		[
  			43471,
  			43481
  		],
  		"valid"
  	],
  	[
  		[
  			43482,
  			43485
  		],
  		"disallowed"
  	],
  	[
  		[
  			43486,
  			43487
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			43488,
  			43518
  		],
  		"valid"
  	],
  	[
  		[
  			43519,
  			43519
  		],
  		"disallowed"
  	],
  	[
  		[
  			43520,
  			43574
  		],
  		"valid"
  	],
  	[
  		[
  			43575,
  			43583
  		],
  		"disallowed"
  	],
  	[
  		[
  			43584,
  			43597
  		],
  		"valid"
  	],
  	[
  		[
  			43598,
  			43599
  		],
  		"disallowed"
  	],
  	[
  		[
  			43600,
  			43609
  		],
  		"valid"
  	],
  	[
  		[
  			43610,
  			43611
  		],
  		"disallowed"
  	],
  	[
  		[
  			43612,
  			43615
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			43616,
  			43638
  		],
  		"valid"
  	],
  	[
  		[
  			43639,
  			43641
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			43642,
  			43643
  		],
  		"valid"
  	],
  	[
  		[
  			43644,
  			43647
  		],
  		"valid"
  	],
  	[
  		[
  			43648,
  			43714
  		],
  		"valid"
  	],
  	[
  		[
  			43715,
  			43738
  		],
  		"disallowed"
  	],
  	[
  		[
  			43739,
  			43741
  		],
  		"valid"
  	],
  	[
  		[
  			43742,
  			43743
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			43744,
  			43759
  		],
  		"valid"
  	],
  	[
  		[
  			43760,
  			43761
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			43762,
  			43766
  		],
  		"valid"
  	],
  	[
  		[
  			43767,
  			43776
  		],
  		"disallowed"
  	],
  	[
  		[
  			43777,
  			43782
  		],
  		"valid"
  	],
  	[
  		[
  			43783,
  			43784
  		],
  		"disallowed"
  	],
  	[
  		[
  			43785,
  			43790
  		],
  		"valid"
  	],
  	[
  		[
  			43791,
  			43792
  		],
  		"disallowed"
  	],
  	[
  		[
  			43793,
  			43798
  		],
  		"valid"
  	],
  	[
  		[
  			43799,
  			43807
  		],
  		"disallowed"
  	],
  	[
  		[
  			43808,
  			43814
  		],
  		"valid"
  	],
  	[
  		[
  			43815,
  			43815
  		],
  		"disallowed"
  	],
  	[
  		[
  			43816,
  			43822
  		],
  		"valid"
  	],
  	[
  		[
  			43823,
  			43823
  		],
  		"disallowed"
  	],
  	[
  		[
  			43824,
  			43866
  		],
  		"valid"
  	],
  	[
  		[
  			43867,
  			43867
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			43868,
  			43868
  		],
  		"mapped",
  		[
  			42791
  		]
  	],
  	[
  		[
  			43869,
  			43869
  		],
  		"mapped",
  		[
  			43831
  		]
  	],
  	[
  		[
  			43870,
  			43870
  		],
  		"mapped",
  		[
  			619
  		]
  	],
  	[
  		[
  			43871,
  			43871
  		],
  		"mapped",
  		[
  			43858
  		]
  	],
  	[
  		[
  			43872,
  			43875
  		],
  		"valid"
  	],
  	[
  		[
  			43876,
  			43877
  		],
  		"valid"
  	],
  	[
  		[
  			43878,
  			43887
  		],
  		"disallowed"
  	],
  	[
  		[
  			43888,
  			43888
  		],
  		"mapped",
  		[
  			5024
  		]
  	],
  	[
  		[
  			43889,
  			43889
  		],
  		"mapped",
  		[
  			5025
  		]
  	],
  	[
  		[
  			43890,
  			43890
  		],
  		"mapped",
  		[
  			5026
  		]
  	],
  	[
  		[
  			43891,
  			43891
  		],
  		"mapped",
  		[
  			5027
  		]
  	],
  	[
  		[
  			43892,
  			43892
  		],
  		"mapped",
  		[
  			5028
  		]
  	],
  	[
  		[
  			43893,
  			43893
  		],
  		"mapped",
  		[
  			5029
  		]
  	],
  	[
  		[
  			43894,
  			43894
  		],
  		"mapped",
  		[
  			5030
  		]
  	],
  	[
  		[
  			43895,
  			43895
  		],
  		"mapped",
  		[
  			5031
  		]
  	],
  	[
  		[
  			43896,
  			43896
  		],
  		"mapped",
  		[
  			5032
  		]
  	],
  	[
  		[
  			43897,
  			43897
  		],
  		"mapped",
  		[
  			5033
  		]
  	],
  	[
  		[
  			43898,
  			43898
  		],
  		"mapped",
  		[
  			5034
  		]
  	],
  	[
  		[
  			43899,
  			43899
  		],
  		"mapped",
  		[
  			5035
  		]
  	],
  	[
  		[
  			43900,
  			43900
  		],
  		"mapped",
  		[
  			5036
  		]
  	],
  	[
  		[
  			43901,
  			43901
  		],
  		"mapped",
  		[
  			5037
  		]
  	],
  	[
  		[
  			43902,
  			43902
  		],
  		"mapped",
  		[
  			5038
  		]
  	],
  	[
  		[
  			43903,
  			43903
  		],
  		"mapped",
  		[
  			5039
  		]
  	],
  	[
  		[
  			43904,
  			43904
  		],
  		"mapped",
  		[
  			5040
  		]
  	],
  	[
  		[
  			43905,
  			43905
  		],
  		"mapped",
  		[
  			5041
  		]
  	],
  	[
  		[
  			43906,
  			43906
  		],
  		"mapped",
  		[
  			5042
  		]
  	],
  	[
  		[
  			43907,
  			43907
  		],
  		"mapped",
  		[
  			5043
  		]
  	],
  	[
  		[
  			43908,
  			43908
  		],
  		"mapped",
  		[
  			5044
  		]
  	],
  	[
  		[
  			43909,
  			43909
  		],
  		"mapped",
  		[
  			5045
  		]
  	],
  	[
  		[
  			43910,
  			43910
  		],
  		"mapped",
  		[
  			5046
  		]
  	],
  	[
  		[
  			43911,
  			43911
  		],
  		"mapped",
  		[
  			5047
  		]
  	],
  	[
  		[
  			43912,
  			43912
  		],
  		"mapped",
  		[
  			5048
  		]
  	],
  	[
  		[
  			43913,
  			43913
  		],
  		"mapped",
  		[
  			5049
  		]
  	],
  	[
  		[
  			43914,
  			43914
  		],
  		"mapped",
  		[
  			5050
  		]
  	],
  	[
  		[
  			43915,
  			43915
  		],
  		"mapped",
  		[
  			5051
  		]
  	],
  	[
  		[
  			43916,
  			43916
  		],
  		"mapped",
  		[
  			5052
  		]
  	],
  	[
  		[
  			43917,
  			43917
  		],
  		"mapped",
  		[
  			5053
  		]
  	],
  	[
  		[
  			43918,
  			43918
  		],
  		"mapped",
  		[
  			5054
  		]
  	],
  	[
  		[
  			43919,
  			43919
  		],
  		"mapped",
  		[
  			5055
  		]
  	],
  	[
  		[
  			43920,
  			43920
  		],
  		"mapped",
  		[
  			5056
  		]
  	],
  	[
  		[
  			43921,
  			43921
  		],
  		"mapped",
  		[
  			5057
  		]
  	],
  	[
  		[
  			43922,
  			43922
  		],
  		"mapped",
  		[
  			5058
  		]
  	],
  	[
  		[
  			43923,
  			43923
  		],
  		"mapped",
  		[
  			5059
  		]
  	],
  	[
  		[
  			43924,
  			43924
  		],
  		"mapped",
  		[
  			5060
  		]
  	],
  	[
  		[
  			43925,
  			43925
  		],
  		"mapped",
  		[
  			5061
  		]
  	],
  	[
  		[
  			43926,
  			43926
  		],
  		"mapped",
  		[
  			5062
  		]
  	],
  	[
  		[
  			43927,
  			43927
  		],
  		"mapped",
  		[
  			5063
  		]
  	],
  	[
  		[
  			43928,
  			43928
  		],
  		"mapped",
  		[
  			5064
  		]
  	],
  	[
  		[
  			43929,
  			43929
  		],
  		"mapped",
  		[
  			5065
  		]
  	],
  	[
  		[
  			43930,
  			43930
  		],
  		"mapped",
  		[
  			5066
  		]
  	],
  	[
  		[
  			43931,
  			43931
  		],
  		"mapped",
  		[
  			5067
  		]
  	],
  	[
  		[
  			43932,
  			43932
  		],
  		"mapped",
  		[
  			5068
  		]
  	],
  	[
  		[
  			43933,
  			43933
  		],
  		"mapped",
  		[
  			5069
  		]
  	],
  	[
  		[
  			43934,
  			43934
  		],
  		"mapped",
  		[
  			5070
  		]
  	],
  	[
  		[
  			43935,
  			43935
  		],
  		"mapped",
  		[
  			5071
  		]
  	],
  	[
  		[
  			43936,
  			43936
  		],
  		"mapped",
  		[
  			5072
  		]
  	],
  	[
  		[
  			43937,
  			43937
  		],
  		"mapped",
  		[
  			5073
  		]
  	],
  	[
  		[
  			43938,
  			43938
  		],
  		"mapped",
  		[
  			5074
  		]
  	],
  	[
  		[
  			43939,
  			43939
  		],
  		"mapped",
  		[
  			5075
  		]
  	],
  	[
  		[
  			43940,
  			43940
  		],
  		"mapped",
  		[
  			5076
  		]
  	],
  	[
  		[
  			43941,
  			43941
  		],
  		"mapped",
  		[
  			5077
  		]
  	],
  	[
  		[
  			43942,
  			43942
  		],
  		"mapped",
  		[
  			5078
  		]
  	],
  	[
  		[
  			43943,
  			43943
  		],
  		"mapped",
  		[
  			5079
  		]
  	],
  	[
  		[
  			43944,
  			43944
  		],
  		"mapped",
  		[
  			5080
  		]
  	],
  	[
  		[
  			43945,
  			43945
  		],
  		"mapped",
  		[
  			5081
  		]
  	],
  	[
  		[
  			43946,
  			43946
  		],
  		"mapped",
  		[
  			5082
  		]
  	],
  	[
  		[
  			43947,
  			43947
  		],
  		"mapped",
  		[
  			5083
  		]
  	],
  	[
  		[
  			43948,
  			43948
  		],
  		"mapped",
  		[
  			5084
  		]
  	],
  	[
  		[
  			43949,
  			43949
  		],
  		"mapped",
  		[
  			5085
  		]
  	],
  	[
  		[
  			43950,
  			43950
  		],
  		"mapped",
  		[
  			5086
  		]
  	],
  	[
  		[
  			43951,
  			43951
  		],
  		"mapped",
  		[
  			5087
  		]
  	],
  	[
  		[
  			43952,
  			43952
  		],
  		"mapped",
  		[
  			5088
  		]
  	],
  	[
  		[
  			43953,
  			43953
  		],
  		"mapped",
  		[
  			5089
  		]
  	],
  	[
  		[
  			43954,
  			43954
  		],
  		"mapped",
  		[
  			5090
  		]
  	],
  	[
  		[
  			43955,
  			43955
  		],
  		"mapped",
  		[
  			5091
  		]
  	],
  	[
  		[
  			43956,
  			43956
  		],
  		"mapped",
  		[
  			5092
  		]
  	],
  	[
  		[
  			43957,
  			43957
  		],
  		"mapped",
  		[
  			5093
  		]
  	],
  	[
  		[
  			43958,
  			43958
  		],
  		"mapped",
  		[
  			5094
  		]
  	],
  	[
  		[
  			43959,
  			43959
  		],
  		"mapped",
  		[
  			5095
  		]
  	],
  	[
  		[
  			43960,
  			43960
  		],
  		"mapped",
  		[
  			5096
  		]
  	],
  	[
  		[
  			43961,
  			43961
  		],
  		"mapped",
  		[
  			5097
  		]
  	],
  	[
  		[
  			43962,
  			43962
  		],
  		"mapped",
  		[
  			5098
  		]
  	],
  	[
  		[
  			43963,
  			43963
  		],
  		"mapped",
  		[
  			5099
  		]
  	],
  	[
  		[
  			43964,
  			43964
  		],
  		"mapped",
  		[
  			5100
  		]
  	],
  	[
  		[
  			43965,
  			43965
  		],
  		"mapped",
  		[
  			5101
  		]
  	],
  	[
  		[
  			43966,
  			43966
  		],
  		"mapped",
  		[
  			5102
  		]
  	],
  	[
  		[
  			43967,
  			43967
  		],
  		"mapped",
  		[
  			5103
  		]
  	],
  	[
  		[
  			43968,
  			44010
  		],
  		"valid"
  	],
  	[
  		[
  			44011,
  			44011
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			44012,
  			44013
  		],
  		"valid"
  	],
  	[
  		[
  			44014,
  			44015
  		],
  		"disallowed"
  	],
  	[
  		[
  			44016,
  			44025
  		],
  		"valid"
  	],
  	[
  		[
  			44026,
  			44031
  		],
  		"disallowed"
  	],
  	[
  		[
  			44032,
  			55203
  		],
  		"valid"
  	],
  	[
  		[
  			55204,
  			55215
  		],
  		"disallowed"
  	],
  	[
  		[
  			55216,
  			55238
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			55239,
  			55242
  		],
  		"disallowed"
  	],
  	[
  		[
  			55243,
  			55291
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			55292,
  			55295
  		],
  		"disallowed"
  	],
  	[
  		[
  			55296,
  			57343
  		],
  		"disallowed"
  	],
  	[
  		[
  			57344,
  			63743
  		],
  		"disallowed"
  	],
  	[
  		[
  			63744,
  			63744
  		],
  		"mapped",
  		[
  			35912
  		]
  	],
  	[
  		[
  			63745,
  			63745
  		],
  		"mapped",
  		[
  			26356
  		]
  	],
  	[
  		[
  			63746,
  			63746
  		],
  		"mapped",
  		[
  			36554
  		]
  	],
  	[
  		[
  			63747,
  			63747
  		],
  		"mapped",
  		[
  			36040
  		]
  	],
  	[
  		[
  			63748,
  			63748
  		],
  		"mapped",
  		[
  			28369
  		]
  	],
  	[
  		[
  			63749,
  			63749
  		],
  		"mapped",
  		[
  			20018
  		]
  	],
  	[
  		[
  			63750,
  			63750
  		],
  		"mapped",
  		[
  			21477
  		]
  	],
  	[
  		[
  			63751,
  			63752
  		],
  		"mapped",
  		[
  			40860
  		]
  	],
  	[
  		[
  			63753,
  			63753
  		],
  		"mapped",
  		[
  			22865
  		]
  	],
  	[
  		[
  			63754,
  			63754
  		],
  		"mapped",
  		[
  			37329
  		]
  	],
  	[
  		[
  			63755,
  			63755
  		],
  		"mapped",
  		[
  			21895
  		]
  	],
  	[
  		[
  			63756,
  			63756
  		],
  		"mapped",
  		[
  			22856
  		]
  	],
  	[
  		[
  			63757,
  			63757
  		],
  		"mapped",
  		[
  			25078
  		]
  	],
  	[
  		[
  			63758,
  			63758
  		],
  		"mapped",
  		[
  			30313
  		]
  	],
  	[
  		[
  			63759,
  			63759
  		],
  		"mapped",
  		[
  			32645
  		]
  	],
  	[
  		[
  			63760,
  			63760
  		],
  		"mapped",
  		[
  			34367
  		]
  	],
  	[
  		[
  			63761,
  			63761
  		],
  		"mapped",
  		[
  			34746
  		]
  	],
  	[
  		[
  			63762,
  			63762
  		],
  		"mapped",
  		[
  			35064
  		]
  	],
  	[
  		[
  			63763,
  			63763
  		],
  		"mapped",
  		[
  			37007
  		]
  	],
  	[
  		[
  			63764,
  			63764
  		],
  		"mapped",
  		[
  			27138
  		]
  	],
  	[
  		[
  			63765,
  			63765
  		],
  		"mapped",
  		[
  			27931
  		]
  	],
  	[
  		[
  			63766,
  			63766
  		],
  		"mapped",
  		[
  			28889
  		]
  	],
  	[
  		[
  			63767,
  			63767
  		],
  		"mapped",
  		[
  			29662
  		]
  	],
  	[
  		[
  			63768,
  			63768
  		],
  		"mapped",
  		[
  			33853
  		]
  	],
  	[
  		[
  			63769,
  			63769
  		],
  		"mapped",
  		[
  			37226
  		]
  	],
  	[
  		[
  			63770,
  			63770
  		],
  		"mapped",
  		[
  			39409
  		]
  	],
  	[
  		[
  			63771,
  			63771
  		],
  		"mapped",
  		[
  			20098
  		]
  	],
  	[
  		[
  			63772,
  			63772
  		],
  		"mapped",
  		[
  			21365
  		]
  	],
  	[
  		[
  			63773,
  			63773
  		],
  		"mapped",
  		[
  			27396
  		]
  	],
  	[
  		[
  			63774,
  			63774
  		],
  		"mapped",
  		[
  			29211
  		]
  	],
  	[
  		[
  			63775,
  			63775
  		],
  		"mapped",
  		[
  			34349
  		]
  	],
  	[
  		[
  			63776,
  			63776
  		],
  		"mapped",
  		[
  			40478
  		]
  	],
  	[
  		[
  			63777,
  			63777
  		],
  		"mapped",
  		[
  			23888
  		]
  	],
  	[
  		[
  			63778,
  			63778
  		],
  		"mapped",
  		[
  			28651
  		]
  	],
  	[
  		[
  			63779,
  			63779
  		],
  		"mapped",
  		[
  			34253
  		]
  	],
  	[
  		[
  			63780,
  			63780
  		],
  		"mapped",
  		[
  			35172
  		]
  	],
  	[
  		[
  			63781,
  			63781
  		],
  		"mapped",
  		[
  			25289
  		]
  	],
  	[
  		[
  			63782,
  			63782
  		],
  		"mapped",
  		[
  			33240
  		]
  	],
  	[
  		[
  			63783,
  			63783
  		],
  		"mapped",
  		[
  			34847
  		]
  	],
  	[
  		[
  			63784,
  			63784
  		],
  		"mapped",
  		[
  			24266
  		]
  	],
  	[
  		[
  			63785,
  			63785
  		],
  		"mapped",
  		[
  			26391
  		]
  	],
  	[
  		[
  			63786,
  			63786
  		],
  		"mapped",
  		[
  			28010
  		]
  	],
  	[
  		[
  			63787,
  			63787
  		],
  		"mapped",
  		[
  			29436
  		]
  	],
  	[
  		[
  			63788,
  			63788
  		],
  		"mapped",
  		[
  			37070
  		]
  	],
  	[
  		[
  			63789,
  			63789
  		],
  		"mapped",
  		[
  			20358
  		]
  	],
  	[
  		[
  			63790,
  			63790
  		],
  		"mapped",
  		[
  			20919
  		]
  	],
  	[
  		[
  			63791,
  			63791
  		],
  		"mapped",
  		[
  			21214
  		]
  	],
  	[
  		[
  			63792,
  			63792
  		],
  		"mapped",
  		[
  			25796
  		]
  	],
  	[
  		[
  			63793,
  			63793
  		],
  		"mapped",
  		[
  			27347
  		]
  	],
  	[
  		[
  			63794,
  			63794
  		],
  		"mapped",
  		[
  			29200
  		]
  	],
  	[
  		[
  			63795,
  			63795
  		],
  		"mapped",
  		[
  			30439
  		]
  	],
  	[
  		[
  			63796,
  			63796
  		],
  		"mapped",
  		[
  			32769
  		]
  	],
  	[
  		[
  			63797,
  			63797
  		],
  		"mapped",
  		[
  			34310
  		]
  	],
  	[
  		[
  			63798,
  			63798
  		],
  		"mapped",
  		[
  			34396
  		]
  	],
  	[
  		[
  			63799,
  			63799
  		],
  		"mapped",
  		[
  			36335
  		]
  	],
  	[
  		[
  			63800,
  			63800
  		],
  		"mapped",
  		[
  			38706
  		]
  	],
  	[
  		[
  			63801,
  			63801
  		],
  		"mapped",
  		[
  			39791
  		]
  	],
  	[
  		[
  			63802,
  			63802
  		],
  		"mapped",
  		[
  			40442
  		]
  	],
  	[
  		[
  			63803,
  			63803
  		],
  		"mapped",
  		[
  			30860
  		]
  	],
  	[
  		[
  			63804,
  			63804
  		],
  		"mapped",
  		[
  			31103
  		]
  	],
  	[
  		[
  			63805,
  			63805
  		],
  		"mapped",
  		[
  			32160
  		]
  	],
  	[
  		[
  			63806,
  			63806
  		],
  		"mapped",
  		[
  			33737
  		]
  	],
  	[
  		[
  			63807,
  			63807
  		],
  		"mapped",
  		[
  			37636
  		]
  	],
  	[
  		[
  			63808,
  			63808
  		],
  		"mapped",
  		[
  			40575
  		]
  	],
  	[
  		[
  			63809,
  			63809
  		],
  		"mapped",
  		[
  			35542
  		]
  	],
  	[
  		[
  			63810,
  			63810
  		],
  		"mapped",
  		[
  			22751
  		]
  	],
  	[
  		[
  			63811,
  			63811
  		],
  		"mapped",
  		[
  			24324
  		]
  	],
  	[
  		[
  			63812,
  			63812
  		],
  		"mapped",
  		[
  			31840
  		]
  	],
  	[
  		[
  			63813,
  			63813
  		],
  		"mapped",
  		[
  			32894
  		]
  	],
  	[
  		[
  			63814,
  			63814
  		],
  		"mapped",
  		[
  			29282
  		]
  	],
  	[
  		[
  			63815,
  			63815
  		],
  		"mapped",
  		[
  			30922
  		]
  	],
  	[
  		[
  			63816,
  			63816
  		],
  		"mapped",
  		[
  			36034
  		]
  	],
  	[
  		[
  			63817,
  			63817
  		],
  		"mapped",
  		[
  			38647
  		]
  	],
  	[
  		[
  			63818,
  			63818
  		],
  		"mapped",
  		[
  			22744
  		]
  	],
  	[
  		[
  			63819,
  			63819
  		],
  		"mapped",
  		[
  			23650
  		]
  	],
  	[
  		[
  			63820,
  			63820
  		],
  		"mapped",
  		[
  			27155
  		]
  	],
  	[
  		[
  			63821,
  			63821
  		],
  		"mapped",
  		[
  			28122
  		]
  	],
  	[
  		[
  			63822,
  			63822
  		],
  		"mapped",
  		[
  			28431
  		]
  	],
  	[
  		[
  			63823,
  			63823
  		],
  		"mapped",
  		[
  			32047
  		]
  	],
  	[
  		[
  			63824,
  			63824
  		],
  		"mapped",
  		[
  			32311
  		]
  	],
  	[
  		[
  			63825,
  			63825
  		],
  		"mapped",
  		[
  			38475
  		]
  	],
  	[
  		[
  			63826,
  			63826
  		],
  		"mapped",
  		[
  			21202
  		]
  	],
  	[
  		[
  			63827,
  			63827
  		],
  		"mapped",
  		[
  			32907
  		]
  	],
  	[
  		[
  			63828,
  			63828
  		],
  		"mapped",
  		[
  			20956
  		]
  	],
  	[
  		[
  			63829,
  			63829
  		],
  		"mapped",
  		[
  			20940
  		]
  	],
  	[
  		[
  			63830,
  			63830
  		],
  		"mapped",
  		[
  			31260
  		]
  	],
  	[
  		[
  			63831,
  			63831
  		],
  		"mapped",
  		[
  			32190
  		]
  	],
  	[
  		[
  			63832,
  			63832
  		],
  		"mapped",
  		[
  			33777
  		]
  	],
  	[
  		[
  			63833,
  			63833
  		],
  		"mapped",
  		[
  			38517
  		]
  	],
  	[
  		[
  			63834,
  			63834
  		],
  		"mapped",
  		[
  			35712
  		]
  	],
  	[
  		[
  			63835,
  			63835
  		],
  		"mapped",
  		[
  			25295
  		]
  	],
  	[
  		[
  			63836,
  			63836
  		],
  		"mapped",
  		[
  			27138
  		]
  	],
  	[
  		[
  			63837,
  			63837
  		],
  		"mapped",
  		[
  			35582
  		]
  	],
  	[
  		[
  			63838,
  			63838
  		],
  		"mapped",
  		[
  			20025
  		]
  	],
  	[
  		[
  			63839,
  			63839
  		],
  		"mapped",
  		[
  			23527
  		]
  	],
  	[
  		[
  			63840,
  			63840
  		],
  		"mapped",
  		[
  			24594
  		]
  	],
  	[
  		[
  			63841,
  			63841
  		],
  		"mapped",
  		[
  			29575
  		]
  	],
  	[
  		[
  			63842,
  			63842
  		],
  		"mapped",
  		[
  			30064
  		]
  	],
  	[
  		[
  			63843,
  			63843
  		],
  		"mapped",
  		[
  			21271
  		]
  	],
  	[
  		[
  			63844,
  			63844
  		],
  		"mapped",
  		[
  			30971
  		]
  	],
  	[
  		[
  			63845,
  			63845
  		],
  		"mapped",
  		[
  			20415
  		]
  	],
  	[
  		[
  			63846,
  			63846
  		],
  		"mapped",
  		[
  			24489
  		]
  	],
  	[
  		[
  			63847,
  			63847
  		],
  		"mapped",
  		[
  			19981
  		]
  	],
  	[
  		[
  			63848,
  			63848
  		],
  		"mapped",
  		[
  			27852
  		]
  	],
  	[
  		[
  			63849,
  			63849
  		],
  		"mapped",
  		[
  			25976
  		]
  	],
  	[
  		[
  			63850,
  			63850
  		],
  		"mapped",
  		[
  			32034
  		]
  	],
  	[
  		[
  			63851,
  			63851
  		],
  		"mapped",
  		[
  			21443
  		]
  	],
  	[
  		[
  			63852,
  			63852
  		],
  		"mapped",
  		[
  			22622
  		]
  	],
  	[
  		[
  			63853,
  			63853
  		],
  		"mapped",
  		[
  			30465
  		]
  	],
  	[
  		[
  			63854,
  			63854
  		],
  		"mapped",
  		[
  			33865
  		]
  	],
  	[
  		[
  			63855,
  			63855
  		],
  		"mapped",
  		[
  			35498
  		]
  	],
  	[
  		[
  			63856,
  			63856
  		],
  		"mapped",
  		[
  			27578
  		]
  	],
  	[
  		[
  			63857,
  			63857
  		],
  		"mapped",
  		[
  			36784
  		]
  	],
  	[
  		[
  			63858,
  			63858
  		],
  		"mapped",
  		[
  			27784
  		]
  	],
  	[
  		[
  			63859,
  			63859
  		],
  		"mapped",
  		[
  			25342
  		]
  	],
  	[
  		[
  			63860,
  			63860
  		],
  		"mapped",
  		[
  			33509
  		]
  	],
  	[
  		[
  			63861,
  			63861
  		],
  		"mapped",
  		[
  			25504
  		]
  	],
  	[
  		[
  			63862,
  			63862
  		],
  		"mapped",
  		[
  			30053
  		]
  	],
  	[
  		[
  			63863,
  			63863
  		],
  		"mapped",
  		[
  			20142
  		]
  	],
  	[
  		[
  			63864,
  			63864
  		],
  		"mapped",
  		[
  			20841
  		]
  	],
  	[
  		[
  			63865,
  			63865
  		],
  		"mapped",
  		[
  			20937
  		]
  	],
  	[
  		[
  			63866,
  			63866
  		],
  		"mapped",
  		[
  			26753
  		]
  	],
  	[
  		[
  			63867,
  			63867
  		],
  		"mapped",
  		[
  			31975
  		]
  	],
  	[
  		[
  			63868,
  			63868
  		],
  		"mapped",
  		[
  			33391
  		]
  	],
  	[
  		[
  			63869,
  			63869
  		],
  		"mapped",
  		[
  			35538
  		]
  	],
  	[
  		[
  			63870,
  			63870
  		],
  		"mapped",
  		[
  			37327
  		]
  	],
  	[
  		[
  			63871,
  			63871
  		],
  		"mapped",
  		[
  			21237
  		]
  	],
  	[
  		[
  			63872,
  			63872
  		],
  		"mapped",
  		[
  			21570
  		]
  	],
  	[
  		[
  			63873,
  			63873
  		],
  		"mapped",
  		[
  			22899
  		]
  	],
  	[
  		[
  			63874,
  			63874
  		],
  		"mapped",
  		[
  			24300
  		]
  	],
  	[
  		[
  			63875,
  			63875
  		],
  		"mapped",
  		[
  			26053
  		]
  	],
  	[
  		[
  			63876,
  			63876
  		],
  		"mapped",
  		[
  			28670
  		]
  	],
  	[
  		[
  			63877,
  			63877
  		],
  		"mapped",
  		[
  			31018
  		]
  	],
  	[
  		[
  			63878,
  			63878
  		],
  		"mapped",
  		[
  			38317
  		]
  	],
  	[
  		[
  			63879,
  			63879
  		],
  		"mapped",
  		[
  			39530
  		]
  	],
  	[
  		[
  			63880,
  			63880
  		],
  		"mapped",
  		[
  			40599
  		]
  	],
  	[
  		[
  			63881,
  			63881
  		],
  		"mapped",
  		[
  			40654
  		]
  	],
  	[
  		[
  			63882,
  			63882
  		],
  		"mapped",
  		[
  			21147
  		]
  	],
  	[
  		[
  			63883,
  			63883
  		],
  		"mapped",
  		[
  			26310
  		]
  	],
  	[
  		[
  			63884,
  			63884
  		],
  		"mapped",
  		[
  			27511
  		]
  	],
  	[
  		[
  			63885,
  			63885
  		],
  		"mapped",
  		[
  			36706
  		]
  	],
  	[
  		[
  			63886,
  			63886
  		],
  		"mapped",
  		[
  			24180
  		]
  	],
  	[
  		[
  			63887,
  			63887
  		],
  		"mapped",
  		[
  			24976
  		]
  	],
  	[
  		[
  			63888,
  			63888
  		],
  		"mapped",
  		[
  			25088
  		]
  	],
  	[
  		[
  			63889,
  			63889
  		],
  		"mapped",
  		[
  			25754
  		]
  	],
  	[
  		[
  			63890,
  			63890
  		],
  		"mapped",
  		[
  			28451
  		]
  	],
  	[
  		[
  			63891,
  			63891
  		],
  		"mapped",
  		[
  			29001
  		]
  	],
  	[
  		[
  			63892,
  			63892
  		],
  		"mapped",
  		[
  			29833
  		]
  	],
  	[
  		[
  			63893,
  			63893
  		],
  		"mapped",
  		[
  			31178
  		]
  	],
  	[
  		[
  			63894,
  			63894
  		],
  		"mapped",
  		[
  			32244
  		]
  	],
  	[
  		[
  			63895,
  			63895
  		],
  		"mapped",
  		[
  			32879
  		]
  	],
  	[
  		[
  			63896,
  			63896
  		],
  		"mapped",
  		[
  			36646
  		]
  	],
  	[
  		[
  			63897,
  			63897
  		],
  		"mapped",
  		[
  			34030
  		]
  	],
  	[
  		[
  			63898,
  			63898
  		],
  		"mapped",
  		[
  			36899
  		]
  	],
  	[
  		[
  			63899,
  			63899
  		],
  		"mapped",
  		[
  			37706
  		]
  	],
  	[
  		[
  			63900,
  			63900
  		],
  		"mapped",
  		[
  			21015
  		]
  	],
  	[
  		[
  			63901,
  			63901
  		],
  		"mapped",
  		[
  			21155
  		]
  	],
  	[
  		[
  			63902,
  			63902
  		],
  		"mapped",
  		[
  			21693
  		]
  	],
  	[
  		[
  			63903,
  			63903
  		],
  		"mapped",
  		[
  			28872
  		]
  	],
  	[
  		[
  			63904,
  			63904
  		],
  		"mapped",
  		[
  			35010
  		]
  	],
  	[
  		[
  			63905,
  			63905
  		],
  		"mapped",
  		[
  			35498
  		]
  	],
  	[
  		[
  			63906,
  			63906
  		],
  		"mapped",
  		[
  			24265
  		]
  	],
  	[
  		[
  			63907,
  			63907
  		],
  		"mapped",
  		[
  			24565
  		]
  	],
  	[
  		[
  			63908,
  			63908
  		],
  		"mapped",
  		[
  			25467
  		]
  	],
  	[
  		[
  			63909,
  			63909
  		],
  		"mapped",
  		[
  			27566
  		]
  	],
  	[
  		[
  			63910,
  			63910
  		],
  		"mapped",
  		[
  			31806
  		]
  	],
  	[
  		[
  			63911,
  			63911
  		],
  		"mapped",
  		[
  			29557
  		]
  	],
  	[
  		[
  			63912,
  			63912
  		],
  		"mapped",
  		[
  			20196
  		]
  	],
  	[
  		[
  			63913,
  			63913
  		],
  		"mapped",
  		[
  			22265
  		]
  	],
  	[
  		[
  			63914,
  			63914
  		],
  		"mapped",
  		[
  			23527
  		]
  	],
  	[
  		[
  			63915,
  			63915
  		],
  		"mapped",
  		[
  			23994
  		]
  	],
  	[
  		[
  			63916,
  			63916
  		],
  		"mapped",
  		[
  			24604
  		]
  	],
  	[
  		[
  			63917,
  			63917
  		],
  		"mapped",
  		[
  			29618
  		]
  	],
  	[
  		[
  			63918,
  			63918
  		],
  		"mapped",
  		[
  			29801
  		]
  	],
  	[
  		[
  			63919,
  			63919
  		],
  		"mapped",
  		[
  			32666
  		]
  	],
  	[
  		[
  			63920,
  			63920
  		],
  		"mapped",
  		[
  			32838
  		]
  	],
  	[
  		[
  			63921,
  			63921
  		],
  		"mapped",
  		[
  			37428
  		]
  	],
  	[
  		[
  			63922,
  			63922
  		],
  		"mapped",
  		[
  			38646
  		]
  	],
  	[
  		[
  			63923,
  			63923
  		],
  		"mapped",
  		[
  			38728
  		]
  	],
  	[
  		[
  			63924,
  			63924
  		],
  		"mapped",
  		[
  			38936
  		]
  	],
  	[
  		[
  			63925,
  			63925
  		],
  		"mapped",
  		[
  			20363
  		]
  	],
  	[
  		[
  			63926,
  			63926
  		],
  		"mapped",
  		[
  			31150
  		]
  	],
  	[
  		[
  			63927,
  			63927
  		],
  		"mapped",
  		[
  			37300
  		]
  	],
  	[
  		[
  			63928,
  			63928
  		],
  		"mapped",
  		[
  			38584
  		]
  	],
  	[
  		[
  			63929,
  			63929
  		],
  		"mapped",
  		[
  			24801
  		]
  	],
  	[
  		[
  			63930,
  			63930
  		],
  		"mapped",
  		[
  			20102
  		]
  	],
  	[
  		[
  			63931,
  			63931
  		],
  		"mapped",
  		[
  			20698
  		]
  	],
  	[
  		[
  			63932,
  			63932
  		],
  		"mapped",
  		[
  			23534
  		]
  	],
  	[
  		[
  			63933,
  			63933
  		],
  		"mapped",
  		[
  			23615
  		]
  	],
  	[
  		[
  			63934,
  			63934
  		],
  		"mapped",
  		[
  			26009
  		]
  	],
  	[
  		[
  			63935,
  			63935
  		],
  		"mapped",
  		[
  			27138
  		]
  	],
  	[
  		[
  			63936,
  			63936
  		],
  		"mapped",
  		[
  			29134
  		]
  	],
  	[
  		[
  			63937,
  			63937
  		],
  		"mapped",
  		[
  			30274
  		]
  	],
  	[
  		[
  			63938,
  			63938
  		],
  		"mapped",
  		[
  			34044
  		]
  	],
  	[
  		[
  			63939,
  			63939
  		],
  		"mapped",
  		[
  			36988
  		]
  	],
  	[
  		[
  			63940,
  			63940
  		],
  		"mapped",
  		[
  			40845
  		]
  	],
  	[
  		[
  			63941,
  			63941
  		],
  		"mapped",
  		[
  			26248
  		]
  	],
  	[
  		[
  			63942,
  			63942
  		],
  		"mapped",
  		[
  			38446
  		]
  	],
  	[
  		[
  			63943,
  			63943
  		],
  		"mapped",
  		[
  			21129
  		]
  	],
  	[
  		[
  			63944,
  			63944
  		],
  		"mapped",
  		[
  			26491
  		]
  	],
  	[
  		[
  			63945,
  			63945
  		],
  		"mapped",
  		[
  			26611
  		]
  	],
  	[
  		[
  			63946,
  			63946
  		],
  		"mapped",
  		[
  			27969
  		]
  	],
  	[
  		[
  			63947,
  			63947
  		],
  		"mapped",
  		[
  			28316
  		]
  	],
  	[
  		[
  			63948,
  			63948
  		],
  		"mapped",
  		[
  			29705
  		]
  	],
  	[
  		[
  			63949,
  			63949
  		],
  		"mapped",
  		[
  			30041
  		]
  	],
  	[
  		[
  			63950,
  			63950
  		],
  		"mapped",
  		[
  			30827
  		]
  	],
  	[
  		[
  			63951,
  			63951
  		],
  		"mapped",
  		[
  			32016
  		]
  	],
  	[
  		[
  			63952,
  			63952
  		],
  		"mapped",
  		[
  			39006
  		]
  	],
  	[
  		[
  			63953,
  			63953
  		],
  		"mapped",
  		[
  			20845
  		]
  	],
  	[
  		[
  			63954,
  			63954
  		],
  		"mapped",
  		[
  			25134
  		]
  	],
  	[
  		[
  			63955,
  			63955
  		],
  		"mapped",
  		[
  			38520
  		]
  	],
  	[
  		[
  			63956,
  			63956
  		],
  		"mapped",
  		[
  			20523
  		]
  	],
  	[
  		[
  			63957,
  			63957
  		],
  		"mapped",
  		[
  			23833
  		]
  	],
  	[
  		[
  			63958,
  			63958
  		],
  		"mapped",
  		[
  			28138
  		]
  	],
  	[
  		[
  			63959,
  			63959
  		],
  		"mapped",
  		[
  			36650
  		]
  	],
  	[
  		[
  			63960,
  			63960
  		],
  		"mapped",
  		[
  			24459
  		]
  	],
  	[
  		[
  			63961,
  			63961
  		],
  		"mapped",
  		[
  			24900
  		]
  	],
  	[
  		[
  			63962,
  			63962
  		],
  		"mapped",
  		[
  			26647
  		]
  	],
  	[
  		[
  			63963,
  			63963
  		],
  		"mapped",
  		[
  			29575
  		]
  	],
  	[
  		[
  			63964,
  			63964
  		],
  		"mapped",
  		[
  			38534
  		]
  	],
  	[
  		[
  			63965,
  			63965
  		],
  		"mapped",
  		[
  			21033
  		]
  	],
  	[
  		[
  			63966,
  			63966
  		],
  		"mapped",
  		[
  			21519
  		]
  	],
  	[
  		[
  			63967,
  			63967
  		],
  		"mapped",
  		[
  			23653
  		]
  	],
  	[
  		[
  			63968,
  			63968
  		],
  		"mapped",
  		[
  			26131
  		]
  	],
  	[
  		[
  			63969,
  			63969
  		],
  		"mapped",
  		[
  			26446
  		]
  	],
  	[
  		[
  			63970,
  			63970
  		],
  		"mapped",
  		[
  			26792
  		]
  	],
  	[
  		[
  			63971,
  			63971
  		],
  		"mapped",
  		[
  			27877
  		]
  	],
  	[
  		[
  			63972,
  			63972
  		],
  		"mapped",
  		[
  			29702
  		]
  	],
  	[
  		[
  			63973,
  			63973
  		],
  		"mapped",
  		[
  			30178
  		]
  	],
  	[
  		[
  			63974,
  			63974
  		],
  		"mapped",
  		[
  			32633
  		]
  	],
  	[
  		[
  			63975,
  			63975
  		],
  		"mapped",
  		[
  			35023
  		]
  	],
  	[
  		[
  			63976,
  			63976
  		],
  		"mapped",
  		[
  			35041
  		]
  	],
  	[
  		[
  			63977,
  			63977
  		],
  		"mapped",
  		[
  			37324
  		]
  	],
  	[
  		[
  			63978,
  			63978
  		],
  		"mapped",
  		[
  			38626
  		]
  	],
  	[
  		[
  			63979,
  			63979
  		],
  		"mapped",
  		[
  			21311
  		]
  	],
  	[
  		[
  			63980,
  			63980
  		],
  		"mapped",
  		[
  			28346
  		]
  	],
  	[
  		[
  			63981,
  			63981
  		],
  		"mapped",
  		[
  			21533
  		]
  	],
  	[
  		[
  			63982,
  			63982
  		],
  		"mapped",
  		[
  			29136
  		]
  	],
  	[
  		[
  			63983,
  			63983
  		],
  		"mapped",
  		[
  			29848
  		]
  	],
  	[
  		[
  			63984,
  			63984
  		],
  		"mapped",
  		[
  			34298
  		]
  	],
  	[
  		[
  			63985,
  			63985
  		],
  		"mapped",
  		[
  			38563
  		]
  	],
  	[
  		[
  			63986,
  			63986
  		],
  		"mapped",
  		[
  			40023
  		]
  	],
  	[
  		[
  			63987,
  			63987
  		],
  		"mapped",
  		[
  			40607
  		]
  	],
  	[
  		[
  			63988,
  			63988
  		],
  		"mapped",
  		[
  			26519
  		]
  	],
  	[
  		[
  			63989,
  			63989
  		],
  		"mapped",
  		[
  			28107
  		]
  	],
  	[
  		[
  			63990,
  			63990
  		],
  		"mapped",
  		[
  			33256
  		]
  	],
  	[
  		[
  			63991,
  			63991
  		],
  		"mapped",
  		[
  			31435
  		]
  	],
  	[
  		[
  			63992,
  			63992
  		],
  		"mapped",
  		[
  			31520
  		]
  	],
  	[
  		[
  			63993,
  			63993
  		],
  		"mapped",
  		[
  			31890
  		]
  	],
  	[
  		[
  			63994,
  			63994
  		],
  		"mapped",
  		[
  			29376
  		]
  	],
  	[
  		[
  			63995,
  			63995
  		],
  		"mapped",
  		[
  			28825
  		]
  	],
  	[
  		[
  			63996,
  			63996
  		],
  		"mapped",
  		[
  			35672
  		]
  	],
  	[
  		[
  			63997,
  			63997
  		],
  		"mapped",
  		[
  			20160
  		]
  	],
  	[
  		[
  			63998,
  			63998
  		],
  		"mapped",
  		[
  			33590
  		]
  	],
  	[
  		[
  			63999,
  			63999
  		],
  		"mapped",
  		[
  			21050
  		]
  	],
  	[
  		[
  			64000,
  			64000
  		],
  		"mapped",
  		[
  			20999
  		]
  	],
  	[
  		[
  			64001,
  			64001
  		],
  		"mapped",
  		[
  			24230
  		]
  	],
  	[
  		[
  			64002,
  			64002
  		],
  		"mapped",
  		[
  			25299
  		]
  	],
  	[
  		[
  			64003,
  			64003
  		],
  		"mapped",
  		[
  			31958
  		]
  	],
  	[
  		[
  			64004,
  			64004
  		],
  		"mapped",
  		[
  			23429
  		]
  	],
  	[
  		[
  			64005,
  			64005
  		],
  		"mapped",
  		[
  			27934
  		]
  	],
  	[
  		[
  			64006,
  			64006
  		],
  		"mapped",
  		[
  			26292
  		]
  	],
  	[
  		[
  			64007,
  			64007
  		],
  		"mapped",
  		[
  			36667
  		]
  	],
  	[
  		[
  			64008,
  			64008
  		],
  		"mapped",
  		[
  			34892
  		]
  	],
  	[
  		[
  			64009,
  			64009
  		],
  		"mapped",
  		[
  			38477
  		]
  	],
  	[
  		[
  			64010,
  			64010
  		],
  		"mapped",
  		[
  			35211
  		]
  	],
  	[
  		[
  			64011,
  			64011
  		],
  		"mapped",
  		[
  			24275
  		]
  	],
  	[
  		[
  			64012,
  			64012
  		],
  		"mapped",
  		[
  			20800
  		]
  	],
  	[
  		[
  			64013,
  			64013
  		],
  		"mapped",
  		[
  			21952
  		]
  	],
  	[
  		[
  			64014,
  			64015
  		],
  		"valid"
  	],
  	[
  		[
  			64016,
  			64016
  		],
  		"mapped",
  		[
  			22618
  		]
  	],
  	[
  		[
  			64017,
  			64017
  		],
  		"valid"
  	],
  	[
  		[
  			64018,
  			64018
  		],
  		"mapped",
  		[
  			26228
  		]
  	],
  	[
  		[
  			64019,
  			64020
  		],
  		"valid"
  	],
  	[
  		[
  			64021,
  			64021
  		],
  		"mapped",
  		[
  			20958
  		]
  	],
  	[
  		[
  			64022,
  			64022
  		],
  		"mapped",
  		[
  			29482
  		]
  	],
  	[
  		[
  			64023,
  			64023
  		],
  		"mapped",
  		[
  			30410
  		]
  	],
  	[
  		[
  			64024,
  			64024
  		],
  		"mapped",
  		[
  			31036
  		]
  	],
  	[
  		[
  			64025,
  			64025
  		],
  		"mapped",
  		[
  			31070
  		]
  	],
  	[
  		[
  			64026,
  			64026
  		],
  		"mapped",
  		[
  			31077
  		]
  	],
  	[
  		[
  			64027,
  			64027
  		],
  		"mapped",
  		[
  			31119
  		]
  	],
  	[
  		[
  			64028,
  			64028
  		],
  		"mapped",
  		[
  			38742
  		]
  	],
  	[
  		[
  			64029,
  			64029
  		],
  		"mapped",
  		[
  			31934
  		]
  	],
  	[
  		[
  			64030,
  			64030
  		],
  		"mapped",
  		[
  			32701
  		]
  	],
  	[
  		[
  			64031,
  			64031
  		],
  		"valid"
  	],
  	[
  		[
  			64032,
  			64032
  		],
  		"mapped",
  		[
  			34322
  		]
  	],
  	[
  		[
  			64033,
  			64033
  		],
  		"valid"
  	],
  	[
  		[
  			64034,
  			64034
  		],
  		"mapped",
  		[
  			35576
  		]
  	],
  	[
  		[
  			64035,
  			64036
  		],
  		"valid"
  	],
  	[
  		[
  			64037,
  			64037
  		],
  		"mapped",
  		[
  			36920
  		]
  	],
  	[
  		[
  			64038,
  			64038
  		],
  		"mapped",
  		[
  			37117
  		]
  	],
  	[
  		[
  			64039,
  			64041
  		],
  		"valid"
  	],
  	[
  		[
  			64042,
  			64042
  		],
  		"mapped",
  		[
  			39151
  		]
  	],
  	[
  		[
  			64043,
  			64043
  		],
  		"mapped",
  		[
  			39164
  		]
  	],
  	[
  		[
  			64044,
  			64044
  		],
  		"mapped",
  		[
  			39208
  		]
  	],
  	[
  		[
  			64045,
  			64045
  		],
  		"mapped",
  		[
  			40372
  		]
  	],
  	[
  		[
  			64046,
  			64046
  		],
  		"mapped",
  		[
  			37086
  		]
  	],
  	[
  		[
  			64047,
  			64047
  		],
  		"mapped",
  		[
  			38583
  		]
  	],
  	[
  		[
  			64048,
  			64048
  		],
  		"mapped",
  		[
  			20398
  		]
  	],
  	[
  		[
  			64049,
  			64049
  		],
  		"mapped",
  		[
  			20711
  		]
  	],
  	[
  		[
  			64050,
  			64050
  		],
  		"mapped",
  		[
  			20813
  		]
  	],
  	[
  		[
  			64051,
  			64051
  		],
  		"mapped",
  		[
  			21193
  		]
  	],
  	[
  		[
  			64052,
  			64052
  		],
  		"mapped",
  		[
  			21220
  		]
  	],
  	[
  		[
  			64053,
  			64053
  		],
  		"mapped",
  		[
  			21329
  		]
  	],
  	[
  		[
  			64054,
  			64054
  		],
  		"mapped",
  		[
  			21917
  		]
  	],
  	[
  		[
  			64055,
  			64055
  		],
  		"mapped",
  		[
  			22022
  		]
  	],
  	[
  		[
  			64056,
  			64056
  		],
  		"mapped",
  		[
  			22120
  		]
  	],
  	[
  		[
  			64057,
  			64057
  		],
  		"mapped",
  		[
  			22592
  		]
  	],
  	[
  		[
  			64058,
  			64058
  		],
  		"mapped",
  		[
  			22696
  		]
  	],
  	[
  		[
  			64059,
  			64059
  		],
  		"mapped",
  		[
  			23652
  		]
  	],
  	[
  		[
  			64060,
  			64060
  		],
  		"mapped",
  		[
  			23662
  		]
  	],
  	[
  		[
  			64061,
  			64061
  		],
  		"mapped",
  		[
  			24724
  		]
  	],
  	[
  		[
  			64062,
  			64062
  		],
  		"mapped",
  		[
  			24936
  		]
  	],
  	[
  		[
  			64063,
  			64063
  		],
  		"mapped",
  		[
  			24974
  		]
  	],
  	[
  		[
  			64064,
  			64064
  		],
  		"mapped",
  		[
  			25074
  		]
  	],
  	[
  		[
  			64065,
  			64065
  		],
  		"mapped",
  		[
  			25935
  		]
  	],
  	[
  		[
  			64066,
  			64066
  		],
  		"mapped",
  		[
  			26082
  		]
  	],
  	[
  		[
  			64067,
  			64067
  		],
  		"mapped",
  		[
  			26257
  		]
  	],
  	[
  		[
  			64068,
  			64068
  		],
  		"mapped",
  		[
  			26757
  		]
  	],
  	[
  		[
  			64069,
  			64069
  		],
  		"mapped",
  		[
  			28023
  		]
  	],
  	[
  		[
  			64070,
  			64070
  		],
  		"mapped",
  		[
  			28186
  		]
  	],
  	[
  		[
  			64071,
  			64071
  		],
  		"mapped",
  		[
  			28450
  		]
  	],
  	[
  		[
  			64072,
  			64072
  		],
  		"mapped",
  		[
  			29038
  		]
  	],
  	[
  		[
  			64073,
  			64073
  		],
  		"mapped",
  		[
  			29227
  		]
  	],
  	[
  		[
  			64074,
  			64074
  		],
  		"mapped",
  		[
  			29730
  		]
  	],
  	[
  		[
  			64075,
  			64075
  		],
  		"mapped",
  		[
  			30865
  		]
  	],
  	[
  		[
  			64076,
  			64076
  		],
  		"mapped",
  		[
  			31038
  		]
  	],
  	[
  		[
  			64077,
  			64077
  		],
  		"mapped",
  		[
  			31049
  		]
  	],
  	[
  		[
  			64078,
  			64078
  		],
  		"mapped",
  		[
  			31048
  		]
  	],
  	[
  		[
  			64079,
  			64079
  		],
  		"mapped",
  		[
  			31056
  		]
  	],
  	[
  		[
  			64080,
  			64080
  		],
  		"mapped",
  		[
  			31062
  		]
  	],
  	[
  		[
  			64081,
  			64081
  		],
  		"mapped",
  		[
  			31069
  		]
  	],
  	[
  		[
  			64082,
  			64082
  		],
  		"mapped",
  		[
  			31117
  		]
  	],
  	[
  		[
  			64083,
  			64083
  		],
  		"mapped",
  		[
  			31118
  		]
  	],
  	[
  		[
  			64084,
  			64084
  		],
  		"mapped",
  		[
  			31296
  		]
  	],
  	[
  		[
  			64085,
  			64085
  		],
  		"mapped",
  		[
  			31361
  		]
  	],
  	[
  		[
  			64086,
  			64086
  		],
  		"mapped",
  		[
  			31680
  		]
  	],
  	[
  		[
  			64087,
  			64087
  		],
  		"mapped",
  		[
  			32244
  		]
  	],
  	[
  		[
  			64088,
  			64088
  		],
  		"mapped",
  		[
  			32265
  		]
  	],
  	[
  		[
  			64089,
  			64089
  		],
  		"mapped",
  		[
  			32321
  		]
  	],
  	[
  		[
  			64090,
  			64090
  		],
  		"mapped",
  		[
  			32626
  		]
  	],
  	[
  		[
  			64091,
  			64091
  		],
  		"mapped",
  		[
  			32773
  		]
  	],
  	[
  		[
  			64092,
  			64092
  		],
  		"mapped",
  		[
  			33261
  		]
  	],
  	[
  		[
  			64093,
  			64094
  		],
  		"mapped",
  		[
  			33401
  		]
  	],
  	[
  		[
  			64095,
  			64095
  		],
  		"mapped",
  		[
  			33879
  		]
  	],
  	[
  		[
  			64096,
  			64096
  		],
  		"mapped",
  		[
  			35088
  		]
  	],
  	[
  		[
  			64097,
  			64097
  		],
  		"mapped",
  		[
  			35222
  		]
  	],
  	[
  		[
  			64098,
  			64098
  		],
  		"mapped",
  		[
  			35585
  		]
  	],
  	[
  		[
  			64099,
  			64099
  		],
  		"mapped",
  		[
  			35641
  		]
  	],
  	[
  		[
  			64100,
  			64100
  		],
  		"mapped",
  		[
  			36051
  		]
  	],
  	[
  		[
  			64101,
  			64101
  		],
  		"mapped",
  		[
  			36104
  		]
  	],
  	[
  		[
  			64102,
  			64102
  		],
  		"mapped",
  		[
  			36790
  		]
  	],
  	[
  		[
  			64103,
  			64103
  		],
  		"mapped",
  		[
  			36920
  		]
  	],
  	[
  		[
  			64104,
  			64104
  		],
  		"mapped",
  		[
  			38627
  		]
  	],
  	[
  		[
  			64105,
  			64105
  		],
  		"mapped",
  		[
  			38911
  		]
  	],
  	[
  		[
  			64106,
  			64106
  		],
  		"mapped",
  		[
  			38971
  		]
  	],
  	[
  		[
  			64107,
  			64107
  		],
  		"mapped",
  		[
  			24693
  		]
  	],
  	[
  		[
  			64108,
  			64108
  		],
  		"mapped",
  		[
  			148206
  		]
  	],
  	[
  		[
  			64109,
  			64109
  		],
  		"mapped",
  		[
  			33304
  		]
  	],
  	[
  		[
  			64110,
  			64111
  		],
  		"disallowed"
  	],
  	[
  		[
  			64112,
  			64112
  		],
  		"mapped",
  		[
  			20006
  		]
  	],
  	[
  		[
  			64113,
  			64113
  		],
  		"mapped",
  		[
  			20917
  		]
  	],
  	[
  		[
  			64114,
  			64114
  		],
  		"mapped",
  		[
  			20840
  		]
  	],
  	[
  		[
  			64115,
  			64115
  		],
  		"mapped",
  		[
  			20352
  		]
  	],
  	[
  		[
  			64116,
  			64116
  		],
  		"mapped",
  		[
  			20805
  		]
  	],
  	[
  		[
  			64117,
  			64117
  		],
  		"mapped",
  		[
  			20864
  		]
  	],
  	[
  		[
  			64118,
  			64118
  		],
  		"mapped",
  		[
  			21191
  		]
  	],
  	[
  		[
  			64119,
  			64119
  		],
  		"mapped",
  		[
  			21242
  		]
  	],
  	[
  		[
  			64120,
  			64120
  		],
  		"mapped",
  		[
  			21917
  		]
  	],
  	[
  		[
  			64121,
  			64121
  		],
  		"mapped",
  		[
  			21845
  		]
  	],
  	[
  		[
  			64122,
  			64122
  		],
  		"mapped",
  		[
  			21913
  		]
  	],
  	[
  		[
  			64123,
  			64123
  		],
  		"mapped",
  		[
  			21986
  		]
  	],
  	[
  		[
  			64124,
  			64124
  		],
  		"mapped",
  		[
  			22618
  		]
  	],
  	[
  		[
  			64125,
  			64125
  		],
  		"mapped",
  		[
  			22707
  		]
  	],
  	[
  		[
  			64126,
  			64126
  		],
  		"mapped",
  		[
  			22852
  		]
  	],
  	[
  		[
  			64127,
  			64127
  		],
  		"mapped",
  		[
  			22868
  		]
  	],
  	[
  		[
  			64128,
  			64128
  		],
  		"mapped",
  		[
  			23138
  		]
  	],
  	[
  		[
  			64129,
  			64129
  		],
  		"mapped",
  		[
  			23336
  		]
  	],
  	[
  		[
  			64130,
  			64130
  		],
  		"mapped",
  		[
  			24274
  		]
  	],
  	[
  		[
  			64131,
  			64131
  		],
  		"mapped",
  		[
  			24281
  		]
  	],
  	[
  		[
  			64132,
  			64132
  		],
  		"mapped",
  		[
  			24425
  		]
  	],
  	[
  		[
  			64133,
  			64133
  		],
  		"mapped",
  		[
  			24493
  		]
  	],
  	[
  		[
  			64134,
  			64134
  		],
  		"mapped",
  		[
  			24792
  		]
  	],
  	[
  		[
  			64135,
  			64135
  		],
  		"mapped",
  		[
  			24910
  		]
  	],
  	[
  		[
  			64136,
  			64136
  		],
  		"mapped",
  		[
  			24840
  		]
  	],
  	[
  		[
  			64137,
  			64137
  		],
  		"mapped",
  		[
  			24974
  		]
  	],
  	[
  		[
  			64138,
  			64138
  		],
  		"mapped",
  		[
  			24928
  		]
  	],
  	[
  		[
  			64139,
  			64139
  		],
  		"mapped",
  		[
  			25074
  		]
  	],
  	[
  		[
  			64140,
  			64140
  		],
  		"mapped",
  		[
  			25140
  		]
  	],
  	[
  		[
  			64141,
  			64141
  		],
  		"mapped",
  		[
  			25540
  		]
  	],
  	[
  		[
  			64142,
  			64142
  		],
  		"mapped",
  		[
  			25628
  		]
  	],
  	[
  		[
  			64143,
  			64143
  		],
  		"mapped",
  		[
  			25682
  		]
  	],
  	[
  		[
  			64144,
  			64144
  		],
  		"mapped",
  		[
  			25942
  		]
  	],
  	[
  		[
  			64145,
  			64145
  		],
  		"mapped",
  		[
  			26228
  		]
  	],
  	[
  		[
  			64146,
  			64146
  		],
  		"mapped",
  		[
  			26391
  		]
  	],
  	[
  		[
  			64147,
  			64147
  		],
  		"mapped",
  		[
  			26395
  		]
  	],
  	[
  		[
  			64148,
  			64148
  		],
  		"mapped",
  		[
  			26454
  		]
  	],
  	[
  		[
  			64149,
  			64149
  		],
  		"mapped",
  		[
  			27513
  		]
  	],
  	[
  		[
  			64150,
  			64150
  		],
  		"mapped",
  		[
  			27578
  		]
  	],
  	[
  		[
  			64151,
  			64151
  		],
  		"mapped",
  		[
  			27969
  		]
  	],
  	[
  		[
  			64152,
  			64152
  		],
  		"mapped",
  		[
  			28379
  		]
  	],
  	[
  		[
  			64153,
  			64153
  		],
  		"mapped",
  		[
  			28363
  		]
  	],
  	[
  		[
  			64154,
  			64154
  		],
  		"mapped",
  		[
  			28450
  		]
  	],
  	[
  		[
  			64155,
  			64155
  		],
  		"mapped",
  		[
  			28702
  		]
  	],
  	[
  		[
  			64156,
  			64156
  		],
  		"mapped",
  		[
  			29038
  		]
  	],
  	[
  		[
  			64157,
  			64157
  		],
  		"mapped",
  		[
  			30631
  		]
  	],
  	[
  		[
  			64158,
  			64158
  		],
  		"mapped",
  		[
  			29237
  		]
  	],
  	[
  		[
  			64159,
  			64159
  		],
  		"mapped",
  		[
  			29359
  		]
  	],
  	[
  		[
  			64160,
  			64160
  		],
  		"mapped",
  		[
  			29482
  		]
  	],
  	[
  		[
  			64161,
  			64161
  		],
  		"mapped",
  		[
  			29809
  		]
  	],
  	[
  		[
  			64162,
  			64162
  		],
  		"mapped",
  		[
  			29958
  		]
  	],
  	[
  		[
  			64163,
  			64163
  		],
  		"mapped",
  		[
  			30011
  		]
  	],
  	[
  		[
  			64164,
  			64164
  		],
  		"mapped",
  		[
  			30237
  		]
  	],
  	[
  		[
  			64165,
  			64165
  		],
  		"mapped",
  		[
  			30239
  		]
  	],
  	[
  		[
  			64166,
  			64166
  		],
  		"mapped",
  		[
  			30410
  		]
  	],
  	[
  		[
  			64167,
  			64167
  		],
  		"mapped",
  		[
  			30427
  		]
  	],
  	[
  		[
  			64168,
  			64168
  		],
  		"mapped",
  		[
  			30452
  		]
  	],
  	[
  		[
  			64169,
  			64169
  		],
  		"mapped",
  		[
  			30538
  		]
  	],
  	[
  		[
  			64170,
  			64170
  		],
  		"mapped",
  		[
  			30528
  		]
  	],
  	[
  		[
  			64171,
  			64171
  		],
  		"mapped",
  		[
  			30924
  		]
  	],
  	[
  		[
  			64172,
  			64172
  		],
  		"mapped",
  		[
  			31409
  		]
  	],
  	[
  		[
  			64173,
  			64173
  		],
  		"mapped",
  		[
  			31680
  		]
  	],
  	[
  		[
  			64174,
  			64174
  		],
  		"mapped",
  		[
  			31867
  		]
  	],
  	[
  		[
  			64175,
  			64175
  		],
  		"mapped",
  		[
  			32091
  		]
  	],
  	[
  		[
  			64176,
  			64176
  		],
  		"mapped",
  		[
  			32244
  		]
  	],
  	[
  		[
  			64177,
  			64177
  		],
  		"mapped",
  		[
  			32574
  		]
  	],
  	[
  		[
  			64178,
  			64178
  		],
  		"mapped",
  		[
  			32773
  		]
  	],
  	[
  		[
  			64179,
  			64179
  		],
  		"mapped",
  		[
  			33618
  		]
  	],
  	[
  		[
  			64180,
  			64180
  		],
  		"mapped",
  		[
  			33775
  		]
  	],
  	[
  		[
  			64181,
  			64181
  		],
  		"mapped",
  		[
  			34681
  		]
  	],
  	[
  		[
  			64182,
  			64182
  		],
  		"mapped",
  		[
  			35137
  		]
  	],
  	[
  		[
  			64183,
  			64183
  		],
  		"mapped",
  		[
  			35206
  		]
  	],
  	[
  		[
  			64184,
  			64184
  		],
  		"mapped",
  		[
  			35222
  		]
  	],
  	[
  		[
  			64185,
  			64185
  		],
  		"mapped",
  		[
  			35519
  		]
  	],
  	[
  		[
  			64186,
  			64186
  		],
  		"mapped",
  		[
  			35576
  		]
  	],
  	[
  		[
  			64187,
  			64187
  		],
  		"mapped",
  		[
  			35531
  		]
  	],
  	[
  		[
  			64188,
  			64188
  		],
  		"mapped",
  		[
  			35585
  		]
  	],
  	[
  		[
  			64189,
  			64189
  		],
  		"mapped",
  		[
  			35582
  		]
  	],
  	[
  		[
  			64190,
  			64190
  		],
  		"mapped",
  		[
  			35565
  		]
  	],
  	[
  		[
  			64191,
  			64191
  		],
  		"mapped",
  		[
  			35641
  		]
  	],
  	[
  		[
  			64192,
  			64192
  		],
  		"mapped",
  		[
  			35722
  		]
  	],
  	[
  		[
  			64193,
  			64193
  		],
  		"mapped",
  		[
  			36104
  		]
  	],
  	[
  		[
  			64194,
  			64194
  		],
  		"mapped",
  		[
  			36664
  		]
  	],
  	[
  		[
  			64195,
  			64195
  		],
  		"mapped",
  		[
  			36978
  		]
  	],
  	[
  		[
  			64196,
  			64196
  		],
  		"mapped",
  		[
  			37273
  		]
  	],
  	[
  		[
  			64197,
  			64197
  		],
  		"mapped",
  		[
  			37494
  		]
  	],
  	[
  		[
  			64198,
  			64198
  		],
  		"mapped",
  		[
  			38524
  		]
  	],
  	[
  		[
  			64199,
  			64199
  		],
  		"mapped",
  		[
  			38627
  		]
  	],
  	[
  		[
  			64200,
  			64200
  		],
  		"mapped",
  		[
  			38742
  		]
  	],
  	[
  		[
  			64201,
  			64201
  		],
  		"mapped",
  		[
  			38875
  		]
  	],
  	[
  		[
  			64202,
  			64202
  		],
  		"mapped",
  		[
  			38911
  		]
  	],
  	[
  		[
  			64203,
  			64203
  		],
  		"mapped",
  		[
  			38923
  		]
  	],
  	[
  		[
  			64204,
  			64204
  		],
  		"mapped",
  		[
  			38971
  		]
  	],
  	[
  		[
  			64205,
  			64205
  		],
  		"mapped",
  		[
  			39698
  		]
  	],
  	[
  		[
  			64206,
  			64206
  		],
  		"mapped",
  		[
  			40860
  		]
  	],
  	[
  		[
  			64207,
  			64207
  		],
  		"mapped",
  		[
  			141386
  		]
  	],
  	[
  		[
  			64208,
  			64208
  		],
  		"mapped",
  		[
  			141380
  		]
  	],
  	[
  		[
  			64209,
  			64209
  		],
  		"mapped",
  		[
  			144341
  		]
  	],
  	[
  		[
  			64210,
  			64210
  		],
  		"mapped",
  		[
  			15261
  		]
  	],
  	[
  		[
  			64211,
  			64211
  		],
  		"mapped",
  		[
  			16408
  		]
  	],
  	[
  		[
  			64212,
  			64212
  		],
  		"mapped",
  		[
  			16441
  		]
  	],
  	[
  		[
  			64213,
  			64213
  		],
  		"mapped",
  		[
  			152137
  		]
  	],
  	[
  		[
  			64214,
  			64214
  		],
  		"mapped",
  		[
  			154832
  		]
  	],
  	[
  		[
  			64215,
  			64215
  		],
  		"mapped",
  		[
  			163539
  		]
  	],
  	[
  		[
  			64216,
  			64216
  		],
  		"mapped",
  		[
  			40771
  		]
  	],
  	[
  		[
  			64217,
  			64217
  		],
  		"mapped",
  		[
  			40846
  		]
  	],
  	[
  		[
  			64218,
  			64255
  		],
  		"disallowed"
  	],
  	[
  		[
  			64256,
  			64256
  		],
  		"mapped",
  		[
  			102,
  			102
  		]
  	],
  	[
  		[
  			64257,
  			64257
  		],
  		"mapped",
  		[
  			102,
  			105
  		]
  	],
  	[
  		[
  			64258,
  			64258
  		],
  		"mapped",
  		[
  			102,
  			108
  		]
  	],
  	[
  		[
  			64259,
  			64259
  		],
  		"mapped",
  		[
  			102,
  			102,
  			105
  		]
  	],
  	[
  		[
  			64260,
  			64260
  		],
  		"mapped",
  		[
  			102,
  			102,
  			108
  		]
  	],
  	[
  		[
  			64261,
  			64262
  		],
  		"mapped",
  		[
  			115,
  			116
  		]
  	],
  	[
  		[
  			64263,
  			64274
  		],
  		"disallowed"
  	],
  	[
  		[
  			64275,
  			64275
  		],
  		"mapped",
  		[
  			1396,
  			1398
  		]
  	],
  	[
  		[
  			64276,
  			64276
  		],
  		"mapped",
  		[
  			1396,
  			1381
  		]
  	],
  	[
  		[
  			64277,
  			64277
  		],
  		"mapped",
  		[
  			1396,
  			1387
  		]
  	],
  	[
  		[
  			64278,
  			64278
  		],
  		"mapped",
  		[
  			1406,
  			1398
  		]
  	],
  	[
  		[
  			64279,
  			64279
  		],
  		"mapped",
  		[
  			1396,
  			1389
  		]
  	],
  	[
  		[
  			64280,
  			64284
  		],
  		"disallowed"
  	],
  	[
  		[
  			64285,
  			64285
  		],
  		"mapped",
  		[
  			1497,
  			1460
  		]
  	],
  	[
  		[
  			64286,
  			64286
  		],
  		"valid"
  	],
  	[
  		[
  			64287,
  			64287
  		],
  		"mapped",
  		[
  			1522,
  			1463
  		]
  	],
  	[
  		[
  			64288,
  			64288
  		],
  		"mapped",
  		[
  			1506
  		]
  	],
  	[
  		[
  			64289,
  			64289
  		],
  		"mapped",
  		[
  			1488
  		]
  	],
  	[
  		[
  			64290,
  			64290
  		],
  		"mapped",
  		[
  			1491
  		]
  	],
  	[
  		[
  			64291,
  			64291
  		],
  		"mapped",
  		[
  			1492
  		]
  	],
  	[
  		[
  			64292,
  			64292
  		],
  		"mapped",
  		[
  			1499
  		]
  	],
  	[
  		[
  			64293,
  			64293
  		],
  		"mapped",
  		[
  			1500
  		]
  	],
  	[
  		[
  			64294,
  			64294
  		],
  		"mapped",
  		[
  			1501
  		]
  	],
  	[
  		[
  			64295,
  			64295
  		],
  		"mapped",
  		[
  			1512
  		]
  	],
  	[
  		[
  			64296,
  			64296
  		],
  		"mapped",
  		[
  			1514
  		]
  	],
  	[
  		[
  			64297,
  			64297
  		],
  		"disallowed_STD3_mapped",
  		[
  			43
  		]
  	],
  	[
  		[
  			64298,
  			64298
  		],
  		"mapped",
  		[
  			1513,
  			1473
  		]
  	],
  	[
  		[
  			64299,
  			64299
  		],
  		"mapped",
  		[
  			1513,
  			1474
  		]
  	],
  	[
  		[
  			64300,
  			64300
  		],
  		"mapped",
  		[
  			1513,
  			1468,
  			1473
  		]
  	],
  	[
  		[
  			64301,
  			64301
  		],
  		"mapped",
  		[
  			1513,
  			1468,
  			1474
  		]
  	],
  	[
  		[
  			64302,
  			64302
  		],
  		"mapped",
  		[
  			1488,
  			1463
  		]
  	],
  	[
  		[
  			64303,
  			64303
  		],
  		"mapped",
  		[
  			1488,
  			1464
  		]
  	],
  	[
  		[
  			64304,
  			64304
  		],
  		"mapped",
  		[
  			1488,
  			1468
  		]
  	],
  	[
  		[
  			64305,
  			64305
  		],
  		"mapped",
  		[
  			1489,
  			1468
  		]
  	],
  	[
  		[
  			64306,
  			64306
  		],
  		"mapped",
  		[
  			1490,
  			1468
  		]
  	],
  	[
  		[
  			64307,
  			64307
  		],
  		"mapped",
  		[
  			1491,
  			1468
  		]
  	],
  	[
  		[
  			64308,
  			64308
  		],
  		"mapped",
  		[
  			1492,
  			1468
  		]
  	],
  	[
  		[
  			64309,
  			64309
  		],
  		"mapped",
  		[
  			1493,
  			1468
  		]
  	],
  	[
  		[
  			64310,
  			64310
  		],
  		"mapped",
  		[
  			1494,
  			1468
  		]
  	],
  	[
  		[
  			64311,
  			64311
  		],
  		"disallowed"
  	],
  	[
  		[
  			64312,
  			64312
  		],
  		"mapped",
  		[
  			1496,
  			1468
  		]
  	],
  	[
  		[
  			64313,
  			64313
  		],
  		"mapped",
  		[
  			1497,
  			1468
  		]
  	],
  	[
  		[
  			64314,
  			64314
  		],
  		"mapped",
  		[
  			1498,
  			1468
  		]
  	],
  	[
  		[
  			64315,
  			64315
  		],
  		"mapped",
  		[
  			1499,
  			1468
  		]
  	],
  	[
  		[
  			64316,
  			64316
  		],
  		"mapped",
  		[
  			1500,
  			1468
  		]
  	],
  	[
  		[
  			64317,
  			64317
  		],
  		"disallowed"
  	],
  	[
  		[
  			64318,
  			64318
  		],
  		"mapped",
  		[
  			1502,
  			1468
  		]
  	],
  	[
  		[
  			64319,
  			64319
  		],
  		"disallowed"
  	],
  	[
  		[
  			64320,
  			64320
  		],
  		"mapped",
  		[
  			1504,
  			1468
  		]
  	],
  	[
  		[
  			64321,
  			64321
  		],
  		"mapped",
  		[
  			1505,
  			1468
  		]
  	],
  	[
  		[
  			64322,
  			64322
  		],
  		"disallowed"
  	],
  	[
  		[
  			64323,
  			64323
  		],
  		"mapped",
  		[
  			1507,
  			1468
  		]
  	],
  	[
  		[
  			64324,
  			64324
  		],
  		"mapped",
  		[
  			1508,
  			1468
  		]
  	],
  	[
  		[
  			64325,
  			64325
  		],
  		"disallowed"
  	],
  	[
  		[
  			64326,
  			64326
  		],
  		"mapped",
  		[
  			1510,
  			1468
  		]
  	],
  	[
  		[
  			64327,
  			64327
  		],
  		"mapped",
  		[
  			1511,
  			1468
  		]
  	],
  	[
  		[
  			64328,
  			64328
  		],
  		"mapped",
  		[
  			1512,
  			1468
  		]
  	],
  	[
  		[
  			64329,
  			64329
  		],
  		"mapped",
  		[
  			1513,
  			1468
  		]
  	],
  	[
  		[
  			64330,
  			64330
  		],
  		"mapped",
  		[
  			1514,
  			1468
  		]
  	],
  	[
  		[
  			64331,
  			64331
  		],
  		"mapped",
  		[
  			1493,
  			1465
  		]
  	],
  	[
  		[
  			64332,
  			64332
  		],
  		"mapped",
  		[
  			1489,
  			1471
  		]
  	],
  	[
  		[
  			64333,
  			64333
  		],
  		"mapped",
  		[
  			1499,
  			1471
  		]
  	],
  	[
  		[
  			64334,
  			64334
  		],
  		"mapped",
  		[
  			1508,
  			1471
  		]
  	],
  	[
  		[
  			64335,
  			64335
  		],
  		"mapped",
  		[
  			1488,
  			1500
  		]
  	],
  	[
  		[
  			64336,
  			64337
  		],
  		"mapped",
  		[
  			1649
  		]
  	],
  	[
  		[
  			64338,
  			64341
  		],
  		"mapped",
  		[
  			1659
  		]
  	],
  	[
  		[
  			64342,
  			64345
  		],
  		"mapped",
  		[
  			1662
  		]
  	],
  	[
  		[
  			64346,
  			64349
  		],
  		"mapped",
  		[
  			1664
  		]
  	],
  	[
  		[
  			64350,
  			64353
  		],
  		"mapped",
  		[
  			1658
  		]
  	],
  	[
  		[
  			64354,
  			64357
  		],
  		"mapped",
  		[
  			1663
  		]
  	],
  	[
  		[
  			64358,
  			64361
  		],
  		"mapped",
  		[
  			1657
  		]
  	],
  	[
  		[
  			64362,
  			64365
  		],
  		"mapped",
  		[
  			1700
  		]
  	],
  	[
  		[
  			64366,
  			64369
  		],
  		"mapped",
  		[
  			1702
  		]
  	],
  	[
  		[
  			64370,
  			64373
  		],
  		"mapped",
  		[
  			1668
  		]
  	],
  	[
  		[
  			64374,
  			64377
  		],
  		"mapped",
  		[
  			1667
  		]
  	],
  	[
  		[
  			64378,
  			64381
  		],
  		"mapped",
  		[
  			1670
  		]
  	],
  	[
  		[
  			64382,
  			64385
  		],
  		"mapped",
  		[
  			1671
  		]
  	],
  	[
  		[
  			64386,
  			64387
  		],
  		"mapped",
  		[
  			1677
  		]
  	],
  	[
  		[
  			64388,
  			64389
  		],
  		"mapped",
  		[
  			1676
  		]
  	],
  	[
  		[
  			64390,
  			64391
  		],
  		"mapped",
  		[
  			1678
  		]
  	],
  	[
  		[
  			64392,
  			64393
  		],
  		"mapped",
  		[
  			1672
  		]
  	],
  	[
  		[
  			64394,
  			64395
  		],
  		"mapped",
  		[
  			1688
  		]
  	],
  	[
  		[
  			64396,
  			64397
  		],
  		"mapped",
  		[
  			1681
  		]
  	],
  	[
  		[
  			64398,
  			64401
  		],
  		"mapped",
  		[
  			1705
  		]
  	],
  	[
  		[
  			64402,
  			64405
  		],
  		"mapped",
  		[
  			1711
  		]
  	],
  	[
  		[
  			64406,
  			64409
  		],
  		"mapped",
  		[
  			1715
  		]
  	],
  	[
  		[
  			64410,
  			64413
  		],
  		"mapped",
  		[
  			1713
  		]
  	],
  	[
  		[
  			64414,
  			64415
  		],
  		"mapped",
  		[
  			1722
  		]
  	],
  	[
  		[
  			64416,
  			64419
  		],
  		"mapped",
  		[
  			1723
  		]
  	],
  	[
  		[
  			64420,
  			64421
  		],
  		"mapped",
  		[
  			1728
  		]
  	],
  	[
  		[
  			64422,
  			64425
  		],
  		"mapped",
  		[
  			1729
  		]
  	],
  	[
  		[
  			64426,
  			64429
  		],
  		"mapped",
  		[
  			1726
  		]
  	],
  	[
  		[
  			64430,
  			64431
  		],
  		"mapped",
  		[
  			1746
  		]
  	],
  	[
  		[
  			64432,
  			64433
  		],
  		"mapped",
  		[
  			1747
  		]
  	],
  	[
  		[
  			64434,
  			64449
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			64450,
  			64466
  		],
  		"disallowed"
  	],
  	[
  		[
  			64467,
  			64470
  		],
  		"mapped",
  		[
  			1709
  		]
  	],
  	[
  		[
  			64471,
  			64472
  		],
  		"mapped",
  		[
  			1735
  		]
  	],
  	[
  		[
  			64473,
  			64474
  		],
  		"mapped",
  		[
  			1734
  		]
  	],
  	[
  		[
  			64475,
  			64476
  		],
  		"mapped",
  		[
  			1736
  		]
  	],
  	[
  		[
  			64477,
  			64477
  		],
  		"mapped",
  		[
  			1735,
  			1652
  		]
  	],
  	[
  		[
  			64478,
  			64479
  		],
  		"mapped",
  		[
  			1739
  		]
  	],
  	[
  		[
  			64480,
  			64481
  		],
  		"mapped",
  		[
  			1733
  		]
  	],
  	[
  		[
  			64482,
  			64483
  		],
  		"mapped",
  		[
  			1737
  		]
  	],
  	[
  		[
  			64484,
  			64487
  		],
  		"mapped",
  		[
  			1744
  		]
  	],
  	[
  		[
  			64488,
  			64489
  		],
  		"mapped",
  		[
  			1609
  		]
  	],
  	[
  		[
  			64490,
  			64491
  		],
  		"mapped",
  		[
  			1574,
  			1575
  		]
  	],
  	[
  		[
  			64492,
  			64493
  		],
  		"mapped",
  		[
  			1574,
  			1749
  		]
  	],
  	[
  		[
  			64494,
  			64495
  		],
  		"mapped",
  		[
  			1574,
  			1608
  		]
  	],
  	[
  		[
  			64496,
  			64497
  		],
  		"mapped",
  		[
  			1574,
  			1735
  		]
  	],
  	[
  		[
  			64498,
  			64499
  		],
  		"mapped",
  		[
  			1574,
  			1734
  		]
  	],
  	[
  		[
  			64500,
  			64501
  		],
  		"mapped",
  		[
  			1574,
  			1736
  		]
  	],
  	[
  		[
  			64502,
  			64504
  		],
  		"mapped",
  		[
  			1574,
  			1744
  		]
  	],
  	[
  		[
  			64505,
  			64507
  		],
  		"mapped",
  		[
  			1574,
  			1609
  		]
  	],
  	[
  		[
  			64508,
  			64511
  		],
  		"mapped",
  		[
  			1740
  		]
  	],
  	[
  		[
  			64512,
  			64512
  		],
  		"mapped",
  		[
  			1574,
  			1580
  		]
  	],
  	[
  		[
  			64513,
  			64513
  		],
  		"mapped",
  		[
  			1574,
  			1581
  		]
  	],
  	[
  		[
  			64514,
  			64514
  		],
  		"mapped",
  		[
  			1574,
  			1605
  		]
  	],
  	[
  		[
  			64515,
  			64515
  		],
  		"mapped",
  		[
  			1574,
  			1609
  		]
  	],
  	[
  		[
  			64516,
  			64516
  		],
  		"mapped",
  		[
  			1574,
  			1610
  		]
  	],
  	[
  		[
  			64517,
  			64517
  		],
  		"mapped",
  		[
  			1576,
  			1580
  		]
  	],
  	[
  		[
  			64518,
  			64518
  		],
  		"mapped",
  		[
  			1576,
  			1581
  		]
  	],
  	[
  		[
  			64519,
  			64519
  		],
  		"mapped",
  		[
  			1576,
  			1582
  		]
  	],
  	[
  		[
  			64520,
  			64520
  		],
  		"mapped",
  		[
  			1576,
  			1605
  		]
  	],
  	[
  		[
  			64521,
  			64521
  		],
  		"mapped",
  		[
  			1576,
  			1609
  		]
  	],
  	[
  		[
  			64522,
  			64522
  		],
  		"mapped",
  		[
  			1576,
  			1610
  		]
  	],
  	[
  		[
  			64523,
  			64523
  		],
  		"mapped",
  		[
  			1578,
  			1580
  		]
  	],
  	[
  		[
  			64524,
  			64524
  		],
  		"mapped",
  		[
  			1578,
  			1581
  		]
  	],
  	[
  		[
  			64525,
  			64525
  		],
  		"mapped",
  		[
  			1578,
  			1582
  		]
  	],
  	[
  		[
  			64526,
  			64526
  		],
  		"mapped",
  		[
  			1578,
  			1605
  		]
  	],
  	[
  		[
  			64527,
  			64527
  		],
  		"mapped",
  		[
  			1578,
  			1609
  		]
  	],
  	[
  		[
  			64528,
  			64528
  		],
  		"mapped",
  		[
  			1578,
  			1610
  		]
  	],
  	[
  		[
  			64529,
  			64529
  		],
  		"mapped",
  		[
  			1579,
  			1580
  		]
  	],
  	[
  		[
  			64530,
  			64530
  		],
  		"mapped",
  		[
  			1579,
  			1605
  		]
  	],
  	[
  		[
  			64531,
  			64531
  		],
  		"mapped",
  		[
  			1579,
  			1609
  		]
  	],
  	[
  		[
  			64532,
  			64532
  		],
  		"mapped",
  		[
  			1579,
  			1610
  		]
  	],
  	[
  		[
  			64533,
  			64533
  		],
  		"mapped",
  		[
  			1580,
  			1581
  		]
  	],
  	[
  		[
  			64534,
  			64534
  		],
  		"mapped",
  		[
  			1580,
  			1605
  		]
  	],
  	[
  		[
  			64535,
  			64535
  		],
  		"mapped",
  		[
  			1581,
  			1580
  		]
  	],
  	[
  		[
  			64536,
  			64536
  		],
  		"mapped",
  		[
  			1581,
  			1605
  		]
  	],
  	[
  		[
  			64537,
  			64537
  		],
  		"mapped",
  		[
  			1582,
  			1580
  		]
  	],
  	[
  		[
  			64538,
  			64538
  		],
  		"mapped",
  		[
  			1582,
  			1581
  		]
  	],
  	[
  		[
  			64539,
  			64539
  		],
  		"mapped",
  		[
  			1582,
  			1605
  		]
  	],
  	[
  		[
  			64540,
  			64540
  		],
  		"mapped",
  		[
  			1587,
  			1580
  		]
  	],
  	[
  		[
  			64541,
  			64541
  		],
  		"mapped",
  		[
  			1587,
  			1581
  		]
  	],
  	[
  		[
  			64542,
  			64542
  		],
  		"mapped",
  		[
  			1587,
  			1582
  		]
  	],
  	[
  		[
  			64543,
  			64543
  		],
  		"mapped",
  		[
  			1587,
  			1605
  		]
  	],
  	[
  		[
  			64544,
  			64544
  		],
  		"mapped",
  		[
  			1589,
  			1581
  		]
  	],
  	[
  		[
  			64545,
  			64545
  		],
  		"mapped",
  		[
  			1589,
  			1605
  		]
  	],
  	[
  		[
  			64546,
  			64546
  		],
  		"mapped",
  		[
  			1590,
  			1580
  		]
  	],
  	[
  		[
  			64547,
  			64547
  		],
  		"mapped",
  		[
  			1590,
  			1581
  		]
  	],
  	[
  		[
  			64548,
  			64548
  		],
  		"mapped",
  		[
  			1590,
  			1582
  		]
  	],
  	[
  		[
  			64549,
  			64549
  		],
  		"mapped",
  		[
  			1590,
  			1605
  		]
  	],
  	[
  		[
  			64550,
  			64550
  		],
  		"mapped",
  		[
  			1591,
  			1581
  		]
  	],
  	[
  		[
  			64551,
  			64551
  		],
  		"mapped",
  		[
  			1591,
  			1605
  		]
  	],
  	[
  		[
  			64552,
  			64552
  		],
  		"mapped",
  		[
  			1592,
  			1605
  		]
  	],
  	[
  		[
  			64553,
  			64553
  		],
  		"mapped",
  		[
  			1593,
  			1580
  		]
  	],
  	[
  		[
  			64554,
  			64554
  		],
  		"mapped",
  		[
  			1593,
  			1605
  		]
  	],
  	[
  		[
  			64555,
  			64555
  		],
  		"mapped",
  		[
  			1594,
  			1580
  		]
  	],
  	[
  		[
  			64556,
  			64556
  		],
  		"mapped",
  		[
  			1594,
  			1605
  		]
  	],
  	[
  		[
  			64557,
  			64557
  		],
  		"mapped",
  		[
  			1601,
  			1580
  		]
  	],
  	[
  		[
  			64558,
  			64558
  		],
  		"mapped",
  		[
  			1601,
  			1581
  		]
  	],
  	[
  		[
  			64559,
  			64559
  		],
  		"mapped",
  		[
  			1601,
  			1582
  		]
  	],
  	[
  		[
  			64560,
  			64560
  		],
  		"mapped",
  		[
  			1601,
  			1605
  		]
  	],
  	[
  		[
  			64561,
  			64561
  		],
  		"mapped",
  		[
  			1601,
  			1609
  		]
  	],
  	[
  		[
  			64562,
  			64562
  		],
  		"mapped",
  		[
  			1601,
  			1610
  		]
  	],
  	[
  		[
  			64563,
  			64563
  		],
  		"mapped",
  		[
  			1602,
  			1581
  		]
  	],
  	[
  		[
  			64564,
  			64564
  		],
  		"mapped",
  		[
  			1602,
  			1605
  		]
  	],
  	[
  		[
  			64565,
  			64565
  		],
  		"mapped",
  		[
  			1602,
  			1609
  		]
  	],
  	[
  		[
  			64566,
  			64566
  		],
  		"mapped",
  		[
  			1602,
  			1610
  		]
  	],
  	[
  		[
  			64567,
  			64567
  		],
  		"mapped",
  		[
  			1603,
  			1575
  		]
  	],
  	[
  		[
  			64568,
  			64568
  		],
  		"mapped",
  		[
  			1603,
  			1580
  		]
  	],
  	[
  		[
  			64569,
  			64569
  		],
  		"mapped",
  		[
  			1603,
  			1581
  		]
  	],
  	[
  		[
  			64570,
  			64570
  		],
  		"mapped",
  		[
  			1603,
  			1582
  		]
  	],
  	[
  		[
  			64571,
  			64571
  		],
  		"mapped",
  		[
  			1603,
  			1604
  		]
  	],
  	[
  		[
  			64572,
  			64572
  		],
  		"mapped",
  		[
  			1603,
  			1605
  		]
  	],
  	[
  		[
  			64573,
  			64573
  		],
  		"mapped",
  		[
  			1603,
  			1609
  		]
  	],
  	[
  		[
  			64574,
  			64574
  		],
  		"mapped",
  		[
  			1603,
  			1610
  		]
  	],
  	[
  		[
  			64575,
  			64575
  		],
  		"mapped",
  		[
  			1604,
  			1580
  		]
  	],
  	[
  		[
  			64576,
  			64576
  		],
  		"mapped",
  		[
  			1604,
  			1581
  		]
  	],
  	[
  		[
  			64577,
  			64577
  		],
  		"mapped",
  		[
  			1604,
  			1582
  		]
  	],
  	[
  		[
  			64578,
  			64578
  		],
  		"mapped",
  		[
  			1604,
  			1605
  		]
  	],
  	[
  		[
  			64579,
  			64579
  		],
  		"mapped",
  		[
  			1604,
  			1609
  		]
  	],
  	[
  		[
  			64580,
  			64580
  		],
  		"mapped",
  		[
  			1604,
  			1610
  		]
  	],
  	[
  		[
  			64581,
  			64581
  		],
  		"mapped",
  		[
  			1605,
  			1580
  		]
  	],
  	[
  		[
  			64582,
  			64582
  		],
  		"mapped",
  		[
  			1605,
  			1581
  		]
  	],
  	[
  		[
  			64583,
  			64583
  		],
  		"mapped",
  		[
  			1605,
  			1582
  		]
  	],
  	[
  		[
  			64584,
  			64584
  		],
  		"mapped",
  		[
  			1605,
  			1605
  		]
  	],
  	[
  		[
  			64585,
  			64585
  		],
  		"mapped",
  		[
  			1605,
  			1609
  		]
  	],
  	[
  		[
  			64586,
  			64586
  		],
  		"mapped",
  		[
  			1605,
  			1610
  		]
  	],
  	[
  		[
  			64587,
  			64587
  		],
  		"mapped",
  		[
  			1606,
  			1580
  		]
  	],
  	[
  		[
  			64588,
  			64588
  		],
  		"mapped",
  		[
  			1606,
  			1581
  		]
  	],
  	[
  		[
  			64589,
  			64589
  		],
  		"mapped",
  		[
  			1606,
  			1582
  		]
  	],
  	[
  		[
  			64590,
  			64590
  		],
  		"mapped",
  		[
  			1606,
  			1605
  		]
  	],
  	[
  		[
  			64591,
  			64591
  		],
  		"mapped",
  		[
  			1606,
  			1609
  		]
  	],
  	[
  		[
  			64592,
  			64592
  		],
  		"mapped",
  		[
  			1606,
  			1610
  		]
  	],
  	[
  		[
  			64593,
  			64593
  		],
  		"mapped",
  		[
  			1607,
  			1580
  		]
  	],
  	[
  		[
  			64594,
  			64594
  		],
  		"mapped",
  		[
  			1607,
  			1605
  		]
  	],
  	[
  		[
  			64595,
  			64595
  		],
  		"mapped",
  		[
  			1607,
  			1609
  		]
  	],
  	[
  		[
  			64596,
  			64596
  		],
  		"mapped",
  		[
  			1607,
  			1610
  		]
  	],
  	[
  		[
  			64597,
  			64597
  		],
  		"mapped",
  		[
  			1610,
  			1580
  		]
  	],
  	[
  		[
  			64598,
  			64598
  		],
  		"mapped",
  		[
  			1610,
  			1581
  		]
  	],
  	[
  		[
  			64599,
  			64599
  		],
  		"mapped",
  		[
  			1610,
  			1582
  		]
  	],
  	[
  		[
  			64600,
  			64600
  		],
  		"mapped",
  		[
  			1610,
  			1605
  		]
  	],
  	[
  		[
  			64601,
  			64601
  		],
  		"mapped",
  		[
  			1610,
  			1609
  		]
  	],
  	[
  		[
  			64602,
  			64602
  		],
  		"mapped",
  		[
  			1610,
  			1610
  		]
  	],
  	[
  		[
  			64603,
  			64603
  		],
  		"mapped",
  		[
  			1584,
  			1648
  		]
  	],
  	[
  		[
  			64604,
  			64604
  		],
  		"mapped",
  		[
  			1585,
  			1648
  		]
  	],
  	[
  		[
  			64605,
  			64605
  		],
  		"mapped",
  		[
  			1609,
  			1648
  		]
  	],
  	[
  		[
  			64606,
  			64606
  		],
  		"disallowed_STD3_mapped",
  		[
  			32,
  			1612,
  			1617
  		]
  	],
  	[
  		[
  			64607,
  			64607
  		],
  		"disallowed_STD3_mapped",
  		[
  			32,
  			1613,
  			1617
  		]
  	],
  	[
  		[
  			64608,
  			64608
  		],
  		"disallowed_STD3_mapped",
  		[
  			32,
  			1614,
  			1617
  		]
  	],
  	[
  		[
  			64609,
  			64609
  		],
  		"disallowed_STD3_mapped",
  		[
  			32,
  			1615,
  			1617
  		]
  	],
  	[
  		[
  			64610,
  			64610
  		],
  		"disallowed_STD3_mapped",
  		[
  			32,
  			1616,
  			1617
  		]
  	],
  	[
  		[
  			64611,
  			64611
  		],
  		"disallowed_STD3_mapped",
  		[
  			32,
  			1617,
  			1648
  		]
  	],
  	[
  		[
  			64612,
  			64612
  		],
  		"mapped",
  		[
  			1574,
  			1585
  		]
  	],
  	[
  		[
  			64613,
  			64613
  		],
  		"mapped",
  		[
  			1574,
  			1586
  		]
  	],
  	[
  		[
  			64614,
  			64614
  		],
  		"mapped",
  		[
  			1574,
  			1605
  		]
  	],
  	[
  		[
  			64615,
  			64615
  		],
  		"mapped",
  		[
  			1574,
  			1606
  		]
  	],
  	[
  		[
  			64616,
  			64616
  		],
  		"mapped",
  		[
  			1574,
  			1609
  		]
  	],
  	[
  		[
  			64617,
  			64617
  		],
  		"mapped",
  		[
  			1574,
  			1610
  		]
  	],
  	[
  		[
  			64618,
  			64618
  		],
  		"mapped",
  		[
  			1576,
  			1585
  		]
  	],
  	[
  		[
  			64619,
  			64619
  		],
  		"mapped",
  		[
  			1576,
  			1586
  		]
  	],
  	[
  		[
  			64620,
  			64620
  		],
  		"mapped",
  		[
  			1576,
  			1605
  		]
  	],
  	[
  		[
  			64621,
  			64621
  		],
  		"mapped",
  		[
  			1576,
  			1606
  		]
  	],
  	[
  		[
  			64622,
  			64622
  		],
  		"mapped",
  		[
  			1576,
  			1609
  		]
  	],
  	[
  		[
  			64623,
  			64623
  		],
  		"mapped",
  		[
  			1576,
  			1610
  		]
  	],
  	[
  		[
  			64624,
  			64624
  		],
  		"mapped",
  		[
  			1578,
  			1585
  		]
  	],
  	[
  		[
  			64625,
  			64625
  		],
  		"mapped",
  		[
  			1578,
  			1586
  		]
  	],
  	[
  		[
  			64626,
  			64626
  		],
  		"mapped",
  		[
  			1578,
  			1605
  		]
  	],
  	[
  		[
  			64627,
  			64627
  		],
  		"mapped",
  		[
  			1578,
  			1606
  		]
  	],
  	[
  		[
  			64628,
  			64628
  		],
  		"mapped",
  		[
  			1578,
  			1609
  		]
  	],
  	[
  		[
  			64629,
  			64629
  		],
  		"mapped",
  		[
  			1578,
  			1610
  		]
  	],
  	[
  		[
  			64630,
  			64630
  		],
  		"mapped",
  		[
  			1579,
  			1585
  		]
  	],
  	[
  		[
  			64631,
  			64631
  		],
  		"mapped",
  		[
  			1579,
  			1586
  		]
  	],
  	[
  		[
  			64632,
  			64632
  		],
  		"mapped",
  		[
  			1579,
  			1605
  		]
  	],
  	[
  		[
  			64633,
  			64633
  		],
  		"mapped",
  		[
  			1579,
  			1606
  		]
  	],
  	[
  		[
  			64634,
  			64634
  		],
  		"mapped",
  		[
  			1579,
  			1609
  		]
  	],
  	[
  		[
  			64635,
  			64635
  		],
  		"mapped",
  		[
  			1579,
  			1610
  		]
  	],
  	[
  		[
  			64636,
  			64636
  		],
  		"mapped",
  		[
  			1601,
  			1609
  		]
  	],
  	[
  		[
  			64637,
  			64637
  		],
  		"mapped",
  		[
  			1601,
  			1610
  		]
  	],
  	[
  		[
  			64638,
  			64638
  		],
  		"mapped",
  		[
  			1602,
  			1609
  		]
  	],
  	[
  		[
  			64639,
  			64639
  		],
  		"mapped",
  		[
  			1602,
  			1610
  		]
  	],
  	[
  		[
  			64640,
  			64640
  		],
  		"mapped",
  		[
  			1603,
  			1575
  		]
  	],
  	[
  		[
  			64641,
  			64641
  		],
  		"mapped",
  		[
  			1603,
  			1604
  		]
  	],
  	[
  		[
  			64642,
  			64642
  		],
  		"mapped",
  		[
  			1603,
  			1605
  		]
  	],
  	[
  		[
  			64643,
  			64643
  		],
  		"mapped",
  		[
  			1603,
  			1609
  		]
  	],
  	[
  		[
  			64644,
  			64644
  		],
  		"mapped",
  		[
  			1603,
  			1610
  		]
  	],
  	[
  		[
  			64645,
  			64645
  		],
  		"mapped",
  		[
  			1604,
  			1605
  		]
  	],
  	[
  		[
  			64646,
  			64646
  		],
  		"mapped",
  		[
  			1604,
  			1609
  		]
  	],
  	[
  		[
  			64647,
  			64647
  		],
  		"mapped",
  		[
  			1604,
  			1610
  		]
  	],
  	[
  		[
  			64648,
  			64648
  		],
  		"mapped",
  		[
  			1605,
  			1575
  		]
  	],
  	[
  		[
  			64649,
  			64649
  		],
  		"mapped",
  		[
  			1605,
  			1605
  		]
  	],
  	[
  		[
  			64650,
  			64650
  		],
  		"mapped",
  		[
  			1606,
  			1585
  		]
  	],
  	[
  		[
  			64651,
  			64651
  		],
  		"mapped",
  		[
  			1606,
  			1586
  		]
  	],
  	[
  		[
  			64652,
  			64652
  		],
  		"mapped",
  		[
  			1606,
  			1605
  		]
  	],
  	[
  		[
  			64653,
  			64653
  		],
  		"mapped",
  		[
  			1606,
  			1606
  		]
  	],
  	[
  		[
  			64654,
  			64654
  		],
  		"mapped",
  		[
  			1606,
  			1609
  		]
  	],
  	[
  		[
  			64655,
  			64655
  		],
  		"mapped",
  		[
  			1606,
  			1610
  		]
  	],
  	[
  		[
  			64656,
  			64656
  		],
  		"mapped",
  		[
  			1609,
  			1648
  		]
  	],
  	[
  		[
  			64657,
  			64657
  		],
  		"mapped",
  		[
  			1610,
  			1585
  		]
  	],
  	[
  		[
  			64658,
  			64658
  		],
  		"mapped",
  		[
  			1610,
  			1586
  		]
  	],
  	[
  		[
  			64659,
  			64659
  		],
  		"mapped",
  		[
  			1610,
  			1605
  		]
  	],
  	[
  		[
  			64660,
  			64660
  		],
  		"mapped",
  		[
  			1610,
  			1606
  		]
  	],
  	[
  		[
  			64661,
  			64661
  		],
  		"mapped",
  		[
  			1610,
  			1609
  		]
  	],
  	[
  		[
  			64662,
  			64662
  		],
  		"mapped",
  		[
  			1610,
  			1610
  		]
  	],
  	[
  		[
  			64663,
  			64663
  		],
  		"mapped",
  		[
  			1574,
  			1580
  		]
  	],
  	[
  		[
  			64664,
  			64664
  		],
  		"mapped",
  		[
  			1574,
  			1581
  		]
  	],
  	[
  		[
  			64665,
  			64665
  		],
  		"mapped",
  		[
  			1574,
  			1582
  		]
  	],
  	[
  		[
  			64666,
  			64666
  		],
  		"mapped",
  		[
  			1574,
  			1605
  		]
  	],
  	[
  		[
  			64667,
  			64667
  		],
  		"mapped",
  		[
  			1574,
  			1607
  		]
  	],
  	[
  		[
  			64668,
  			64668
  		],
  		"mapped",
  		[
  			1576,
  			1580
  		]
  	],
  	[
  		[
  			64669,
  			64669
  		],
  		"mapped",
  		[
  			1576,
  			1581
  		]
  	],
  	[
  		[
  			64670,
  			64670
  		],
  		"mapped",
  		[
  			1576,
  			1582
  		]
  	],
  	[
  		[
  			64671,
  			64671
  		],
  		"mapped",
  		[
  			1576,
  			1605
  		]
  	],
  	[
  		[
  			64672,
  			64672
  		],
  		"mapped",
  		[
  			1576,
  			1607
  		]
  	],
  	[
  		[
  			64673,
  			64673
  		],
  		"mapped",
  		[
  			1578,
  			1580
  		]
  	],
  	[
  		[
  			64674,
  			64674
  		],
  		"mapped",
  		[
  			1578,
  			1581
  		]
  	],
  	[
  		[
  			64675,
  			64675
  		],
  		"mapped",
  		[
  			1578,
  			1582
  		]
  	],
  	[
  		[
  			64676,
  			64676
  		],
  		"mapped",
  		[
  			1578,
  			1605
  		]
  	],
  	[
  		[
  			64677,
  			64677
  		],
  		"mapped",
  		[
  			1578,
  			1607
  		]
  	],
  	[
  		[
  			64678,
  			64678
  		],
  		"mapped",
  		[
  			1579,
  			1605
  		]
  	],
  	[
  		[
  			64679,
  			64679
  		],
  		"mapped",
  		[
  			1580,
  			1581
  		]
  	],
  	[
  		[
  			64680,
  			64680
  		],
  		"mapped",
  		[
  			1580,
  			1605
  		]
  	],
  	[
  		[
  			64681,
  			64681
  		],
  		"mapped",
  		[
  			1581,
  			1580
  		]
  	],
  	[
  		[
  			64682,
  			64682
  		],
  		"mapped",
  		[
  			1581,
  			1605
  		]
  	],
  	[
  		[
  			64683,
  			64683
  		],
  		"mapped",
  		[
  			1582,
  			1580
  		]
  	],
  	[
  		[
  			64684,
  			64684
  		],
  		"mapped",
  		[
  			1582,
  			1605
  		]
  	],
  	[
  		[
  			64685,
  			64685
  		],
  		"mapped",
  		[
  			1587,
  			1580
  		]
  	],
  	[
  		[
  			64686,
  			64686
  		],
  		"mapped",
  		[
  			1587,
  			1581
  		]
  	],
  	[
  		[
  			64687,
  			64687
  		],
  		"mapped",
  		[
  			1587,
  			1582
  		]
  	],
  	[
  		[
  			64688,
  			64688
  		],
  		"mapped",
  		[
  			1587,
  			1605
  		]
  	],
  	[
  		[
  			64689,
  			64689
  		],
  		"mapped",
  		[
  			1589,
  			1581
  		]
  	],
  	[
  		[
  			64690,
  			64690
  		],
  		"mapped",
  		[
  			1589,
  			1582
  		]
  	],
  	[
  		[
  			64691,
  			64691
  		],
  		"mapped",
  		[
  			1589,
  			1605
  		]
  	],
  	[
  		[
  			64692,
  			64692
  		],
  		"mapped",
  		[
  			1590,
  			1580
  		]
  	],
  	[
  		[
  			64693,
  			64693
  		],
  		"mapped",
  		[
  			1590,
  			1581
  		]
  	],
  	[
  		[
  			64694,
  			64694
  		],
  		"mapped",
  		[
  			1590,
  			1582
  		]
  	],
  	[
  		[
  			64695,
  			64695
  		],
  		"mapped",
  		[
  			1590,
  			1605
  		]
  	],
  	[
  		[
  			64696,
  			64696
  		],
  		"mapped",
  		[
  			1591,
  			1581
  		]
  	],
  	[
  		[
  			64697,
  			64697
  		],
  		"mapped",
  		[
  			1592,
  			1605
  		]
  	],
  	[
  		[
  			64698,
  			64698
  		],
  		"mapped",
  		[
  			1593,
  			1580
  		]
  	],
  	[
  		[
  			64699,
  			64699
  		],
  		"mapped",
  		[
  			1593,
  			1605
  		]
  	],
  	[
  		[
  			64700,
  			64700
  		],
  		"mapped",
  		[
  			1594,
  			1580
  		]
  	],
  	[
  		[
  			64701,
  			64701
  		],
  		"mapped",
  		[
  			1594,
  			1605
  		]
  	],
  	[
  		[
  			64702,
  			64702
  		],
  		"mapped",
  		[
  			1601,
  			1580
  		]
  	],
  	[
  		[
  			64703,
  			64703
  		],
  		"mapped",
  		[
  			1601,
  			1581
  		]
  	],
  	[
  		[
  			64704,
  			64704
  		],
  		"mapped",
  		[
  			1601,
  			1582
  		]
  	],
  	[
  		[
  			64705,
  			64705
  		],
  		"mapped",
  		[
  			1601,
  			1605
  		]
  	],
  	[
  		[
  			64706,
  			64706
  		],
  		"mapped",
  		[
  			1602,
  			1581
  		]
  	],
  	[
  		[
  			64707,
  			64707
  		],
  		"mapped",
  		[
  			1602,
  			1605
  		]
  	],
  	[
  		[
  			64708,
  			64708
  		],
  		"mapped",
  		[
  			1603,
  			1580
  		]
  	],
  	[
  		[
  			64709,
  			64709
  		],
  		"mapped",
  		[
  			1603,
  			1581
  		]
  	],
  	[
  		[
  			64710,
  			64710
  		],
  		"mapped",
  		[
  			1603,
  			1582
  		]
  	],
  	[
  		[
  			64711,
  			64711
  		],
  		"mapped",
  		[
  			1603,
  			1604
  		]
  	],
  	[
  		[
  			64712,
  			64712
  		],
  		"mapped",
  		[
  			1603,
  			1605
  		]
  	],
  	[
  		[
  			64713,
  			64713
  		],
  		"mapped",
  		[
  			1604,
  			1580
  		]
  	],
  	[
  		[
  			64714,
  			64714
  		],
  		"mapped",
  		[
  			1604,
  			1581
  		]
  	],
  	[
  		[
  			64715,
  			64715
  		],
  		"mapped",
  		[
  			1604,
  			1582
  		]
  	],
  	[
  		[
  			64716,
  			64716
  		],
  		"mapped",
  		[
  			1604,
  			1605
  		]
  	],
  	[
  		[
  			64717,
  			64717
  		],
  		"mapped",
  		[
  			1604,
  			1607
  		]
  	],
  	[
  		[
  			64718,
  			64718
  		],
  		"mapped",
  		[
  			1605,
  			1580
  		]
  	],
  	[
  		[
  			64719,
  			64719
  		],
  		"mapped",
  		[
  			1605,
  			1581
  		]
  	],
  	[
  		[
  			64720,
  			64720
  		],
  		"mapped",
  		[
  			1605,
  			1582
  		]
  	],
  	[
  		[
  			64721,
  			64721
  		],
  		"mapped",
  		[
  			1605,
  			1605
  		]
  	],
  	[
  		[
  			64722,
  			64722
  		],
  		"mapped",
  		[
  			1606,
  			1580
  		]
  	],
  	[
  		[
  			64723,
  			64723
  		],
  		"mapped",
  		[
  			1606,
  			1581
  		]
  	],
  	[
  		[
  			64724,
  			64724
  		],
  		"mapped",
  		[
  			1606,
  			1582
  		]
  	],
  	[
  		[
  			64725,
  			64725
  		],
  		"mapped",
  		[
  			1606,
  			1605
  		]
  	],
  	[
  		[
  			64726,
  			64726
  		],
  		"mapped",
  		[
  			1606,
  			1607
  		]
  	],
  	[
  		[
  			64727,
  			64727
  		],
  		"mapped",
  		[
  			1607,
  			1580
  		]
  	],
  	[
  		[
  			64728,
  			64728
  		],
  		"mapped",
  		[
  			1607,
  			1605
  		]
  	],
  	[
  		[
  			64729,
  			64729
  		],
  		"mapped",
  		[
  			1607,
  			1648
  		]
  	],
  	[
  		[
  			64730,
  			64730
  		],
  		"mapped",
  		[
  			1610,
  			1580
  		]
  	],
  	[
  		[
  			64731,
  			64731
  		],
  		"mapped",
  		[
  			1610,
  			1581
  		]
  	],
  	[
  		[
  			64732,
  			64732
  		],
  		"mapped",
  		[
  			1610,
  			1582
  		]
  	],
  	[
  		[
  			64733,
  			64733
  		],
  		"mapped",
  		[
  			1610,
  			1605
  		]
  	],
  	[
  		[
  			64734,
  			64734
  		],
  		"mapped",
  		[
  			1610,
  			1607
  		]
  	],
  	[
  		[
  			64735,
  			64735
  		],
  		"mapped",
  		[
  			1574,
  			1605
  		]
  	],
  	[
  		[
  			64736,
  			64736
  		],
  		"mapped",
  		[
  			1574,
  			1607
  		]
  	],
  	[
  		[
  			64737,
  			64737
  		],
  		"mapped",
  		[
  			1576,
  			1605
  		]
  	],
  	[
  		[
  			64738,
  			64738
  		],
  		"mapped",
  		[
  			1576,
  			1607
  		]
  	],
  	[
  		[
  			64739,
  			64739
  		],
  		"mapped",
  		[
  			1578,
  			1605
  		]
  	],
  	[
  		[
  			64740,
  			64740
  		],
  		"mapped",
  		[
  			1578,
  			1607
  		]
  	],
  	[
  		[
  			64741,
  			64741
  		],
  		"mapped",
  		[
  			1579,
  			1605
  		]
  	],
  	[
  		[
  			64742,
  			64742
  		],
  		"mapped",
  		[
  			1579,
  			1607
  		]
  	],
  	[
  		[
  			64743,
  			64743
  		],
  		"mapped",
  		[
  			1587,
  			1605
  		]
  	],
  	[
  		[
  			64744,
  			64744
  		],
  		"mapped",
  		[
  			1587,
  			1607
  		]
  	],
  	[
  		[
  			64745,
  			64745
  		],
  		"mapped",
  		[
  			1588,
  			1605
  		]
  	],
  	[
  		[
  			64746,
  			64746
  		],
  		"mapped",
  		[
  			1588,
  			1607
  		]
  	],
  	[
  		[
  			64747,
  			64747
  		],
  		"mapped",
  		[
  			1603,
  			1604
  		]
  	],
  	[
  		[
  			64748,
  			64748
  		],
  		"mapped",
  		[
  			1603,
  			1605
  		]
  	],
  	[
  		[
  			64749,
  			64749
  		],
  		"mapped",
  		[
  			1604,
  			1605
  		]
  	],
  	[
  		[
  			64750,
  			64750
  		],
  		"mapped",
  		[
  			1606,
  			1605
  		]
  	],
  	[
  		[
  			64751,
  			64751
  		],
  		"mapped",
  		[
  			1606,
  			1607
  		]
  	],
  	[
  		[
  			64752,
  			64752
  		],
  		"mapped",
  		[
  			1610,
  			1605
  		]
  	],
  	[
  		[
  			64753,
  			64753
  		],
  		"mapped",
  		[
  			1610,
  			1607
  		]
  	],
  	[
  		[
  			64754,
  			64754
  		],
  		"mapped",
  		[
  			1600,
  			1614,
  			1617
  		]
  	],
  	[
  		[
  			64755,
  			64755
  		],
  		"mapped",
  		[
  			1600,
  			1615,
  			1617
  		]
  	],
  	[
  		[
  			64756,
  			64756
  		],
  		"mapped",
  		[
  			1600,
  			1616,
  			1617
  		]
  	],
  	[
  		[
  			64757,
  			64757
  		],
  		"mapped",
  		[
  			1591,
  			1609
  		]
  	],
  	[
  		[
  			64758,
  			64758
  		],
  		"mapped",
  		[
  			1591,
  			1610
  		]
  	],
  	[
  		[
  			64759,
  			64759
  		],
  		"mapped",
  		[
  			1593,
  			1609
  		]
  	],
  	[
  		[
  			64760,
  			64760
  		],
  		"mapped",
  		[
  			1593,
  			1610
  		]
  	],
  	[
  		[
  			64761,
  			64761
  		],
  		"mapped",
  		[
  			1594,
  			1609
  		]
  	],
  	[
  		[
  			64762,
  			64762
  		],
  		"mapped",
  		[
  			1594,
  			1610
  		]
  	],
  	[
  		[
  			64763,
  			64763
  		],
  		"mapped",
  		[
  			1587,
  			1609
  		]
  	],
  	[
  		[
  			64764,
  			64764
  		],
  		"mapped",
  		[
  			1587,
  			1610
  		]
  	],
  	[
  		[
  			64765,
  			64765
  		],
  		"mapped",
  		[
  			1588,
  			1609
  		]
  	],
  	[
  		[
  			64766,
  			64766
  		],
  		"mapped",
  		[
  			1588,
  			1610
  		]
  	],
  	[
  		[
  			64767,
  			64767
  		],
  		"mapped",
  		[
  			1581,
  			1609
  		]
  	],
  	[
  		[
  			64768,
  			64768
  		],
  		"mapped",
  		[
  			1581,
  			1610
  		]
  	],
  	[
  		[
  			64769,
  			64769
  		],
  		"mapped",
  		[
  			1580,
  			1609
  		]
  	],
  	[
  		[
  			64770,
  			64770
  		],
  		"mapped",
  		[
  			1580,
  			1610
  		]
  	],
  	[
  		[
  			64771,
  			64771
  		],
  		"mapped",
  		[
  			1582,
  			1609
  		]
  	],
  	[
  		[
  			64772,
  			64772
  		],
  		"mapped",
  		[
  			1582,
  			1610
  		]
  	],
  	[
  		[
  			64773,
  			64773
  		],
  		"mapped",
  		[
  			1589,
  			1609
  		]
  	],
  	[
  		[
  			64774,
  			64774
  		],
  		"mapped",
  		[
  			1589,
  			1610
  		]
  	],
  	[
  		[
  			64775,
  			64775
  		],
  		"mapped",
  		[
  			1590,
  			1609
  		]
  	],
  	[
  		[
  			64776,
  			64776
  		],
  		"mapped",
  		[
  			1590,
  			1610
  		]
  	],
  	[
  		[
  			64777,
  			64777
  		],
  		"mapped",
  		[
  			1588,
  			1580
  		]
  	],
  	[
  		[
  			64778,
  			64778
  		],
  		"mapped",
  		[
  			1588,
  			1581
  		]
  	],
  	[
  		[
  			64779,
  			64779
  		],
  		"mapped",
  		[
  			1588,
  			1582
  		]
  	],
  	[
  		[
  			64780,
  			64780
  		],
  		"mapped",
  		[
  			1588,
  			1605
  		]
  	],
  	[
  		[
  			64781,
  			64781
  		],
  		"mapped",
  		[
  			1588,
  			1585
  		]
  	],
  	[
  		[
  			64782,
  			64782
  		],
  		"mapped",
  		[
  			1587,
  			1585
  		]
  	],
  	[
  		[
  			64783,
  			64783
  		],
  		"mapped",
  		[
  			1589,
  			1585
  		]
  	],
  	[
  		[
  			64784,
  			64784
  		],
  		"mapped",
  		[
  			1590,
  			1585
  		]
  	],
  	[
  		[
  			64785,
  			64785
  		],
  		"mapped",
  		[
  			1591,
  			1609
  		]
  	],
  	[
  		[
  			64786,
  			64786
  		],
  		"mapped",
  		[
  			1591,
  			1610
  		]
  	],
  	[
  		[
  			64787,
  			64787
  		],
  		"mapped",
  		[
  			1593,
  			1609
  		]
  	],
  	[
  		[
  			64788,
  			64788
  		],
  		"mapped",
  		[
  			1593,
  			1610
  		]
  	],
  	[
  		[
  			64789,
  			64789
  		],
  		"mapped",
  		[
  			1594,
  			1609
  		]
  	],
  	[
  		[
  			64790,
  			64790
  		],
  		"mapped",
  		[
  			1594,
  			1610
  		]
  	],
  	[
  		[
  			64791,
  			64791
  		],
  		"mapped",
  		[
  			1587,
  			1609
  		]
  	],
  	[
  		[
  			64792,
  			64792
  		],
  		"mapped",
  		[
  			1587,
  			1610
  		]
  	],
  	[
  		[
  			64793,
  			64793
  		],
  		"mapped",
  		[
  			1588,
  			1609
  		]
  	],
  	[
  		[
  			64794,
  			64794
  		],
  		"mapped",
  		[
  			1588,
  			1610
  		]
  	],
  	[
  		[
  			64795,
  			64795
  		],
  		"mapped",
  		[
  			1581,
  			1609
  		]
  	],
  	[
  		[
  			64796,
  			64796
  		],
  		"mapped",
  		[
  			1581,
  			1610
  		]
  	],
  	[
  		[
  			64797,
  			64797
  		],
  		"mapped",
  		[
  			1580,
  			1609
  		]
  	],
  	[
  		[
  			64798,
  			64798
  		],
  		"mapped",
  		[
  			1580,
  			1610
  		]
  	],
  	[
  		[
  			64799,
  			64799
  		],
  		"mapped",
  		[
  			1582,
  			1609
  		]
  	],
  	[
  		[
  			64800,
  			64800
  		],
  		"mapped",
  		[
  			1582,
  			1610
  		]
  	],
  	[
  		[
  			64801,
  			64801
  		],
  		"mapped",
  		[
  			1589,
  			1609
  		]
  	],
  	[
  		[
  			64802,
  			64802
  		],
  		"mapped",
  		[
  			1589,
  			1610
  		]
  	],
  	[
  		[
  			64803,
  			64803
  		],
  		"mapped",
  		[
  			1590,
  			1609
  		]
  	],
  	[
  		[
  			64804,
  			64804
  		],
  		"mapped",
  		[
  			1590,
  			1610
  		]
  	],
  	[
  		[
  			64805,
  			64805
  		],
  		"mapped",
  		[
  			1588,
  			1580
  		]
  	],
  	[
  		[
  			64806,
  			64806
  		],
  		"mapped",
  		[
  			1588,
  			1581
  		]
  	],
  	[
  		[
  			64807,
  			64807
  		],
  		"mapped",
  		[
  			1588,
  			1582
  		]
  	],
  	[
  		[
  			64808,
  			64808
  		],
  		"mapped",
  		[
  			1588,
  			1605
  		]
  	],
  	[
  		[
  			64809,
  			64809
  		],
  		"mapped",
  		[
  			1588,
  			1585
  		]
  	],
  	[
  		[
  			64810,
  			64810
  		],
  		"mapped",
  		[
  			1587,
  			1585
  		]
  	],
  	[
  		[
  			64811,
  			64811
  		],
  		"mapped",
  		[
  			1589,
  			1585
  		]
  	],
  	[
  		[
  			64812,
  			64812
  		],
  		"mapped",
  		[
  			1590,
  			1585
  		]
  	],
  	[
  		[
  			64813,
  			64813
  		],
  		"mapped",
  		[
  			1588,
  			1580
  		]
  	],
  	[
  		[
  			64814,
  			64814
  		],
  		"mapped",
  		[
  			1588,
  			1581
  		]
  	],
  	[
  		[
  			64815,
  			64815
  		],
  		"mapped",
  		[
  			1588,
  			1582
  		]
  	],
  	[
  		[
  			64816,
  			64816
  		],
  		"mapped",
  		[
  			1588,
  			1605
  		]
  	],
  	[
  		[
  			64817,
  			64817
  		],
  		"mapped",
  		[
  			1587,
  			1607
  		]
  	],
  	[
  		[
  			64818,
  			64818
  		],
  		"mapped",
  		[
  			1588,
  			1607
  		]
  	],
  	[
  		[
  			64819,
  			64819
  		],
  		"mapped",
  		[
  			1591,
  			1605
  		]
  	],
  	[
  		[
  			64820,
  			64820
  		],
  		"mapped",
  		[
  			1587,
  			1580
  		]
  	],
  	[
  		[
  			64821,
  			64821
  		],
  		"mapped",
  		[
  			1587,
  			1581
  		]
  	],
  	[
  		[
  			64822,
  			64822
  		],
  		"mapped",
  		[
  			1587,
  			1582
  		]
  	],
  	[
  		[
  			64823,
  			64823
  		],
  		"mapped",
  		[
  			1588,
  			1580
  		]
  	],
  	[
  		[
  			64824,
  			64824
  		],
  		"mapped",
  		[
  			1588,
  			1581
  		]
  	],
  	[
  		[
  			64825,
  			64825
  		],
  		"mapped",
  		[
  			1588,
  			1582
  		]
  	],
  	[
  		[
  			64826,
  			64826
  		],
  		"mapped",
  		[
  			1591,
  			1605
  		]
  	],
  	[
  		[
  			64827,
  			64827
  		],
  		"mapped",
  		[
  			1592,
  			1605
  		]
  	],
  	[
  		[
  			64828,
  			64829
  		],
  		"mapped",
  		[
  			1575,
  			1611
  		]
  	],
  	[
  		[
  			64830,
  			64831
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			64832,
  			64847
  		],
  		"disallowed"
  	],
  	[
  		[
  			64848,
  			64848
  		],
  		"mapped",
  		[
  			1578,
  			1580,
  			1605
  		]
  	],
  	[
  		[
  			64849,
  			64850
  		],
  		"mapped",
  		[
  			1578,
  			1581,
  			1580
  		]
  	],
  	[
  		[
  			64851,
  			64851
  		],
  		"mapped",
  		[
  			1578,
  			1581,
  			1605
  		]
  	],
  	[
  		[
  			64852,
  			64852
  		],
  		"mapped",
  		[
  			1578,
  			1582,
  			1605
  		]
  	],
  	[
  		[
  			64853,
  			64853
  		],
  		"mapped",
  		[
  			1578,
  			1605,
  			1580
  		]
  	],
  	[
  		[
  			64854,
  			64854
  		],
  		"mapped",
  		[
  			1578,
  			1605,
  			1581
  		]
  	],
  	[
  		[
  			64855,
  			64855
  		],
  		"mapped",
  		[
  			1578,
  			1605,
  			1582
  		]
  	],
  	[
  		[
  			64856,
  			64857
  		],
  		"mapped",
  		[
  			1580,
  			1605,
  			1581
  		]
  	],
  	[
  		[
  			64858,
  			64858
  		],
  		"mapped",
  		[
  			1581,
  			1605,
  			1610
  		]
  	],
  	[
  		[
  			64859,
  			64859
  		],
  		"mapped",
  		[
  			1581,
  			1605,
  			1609
  		]
  	],
  	[
  		[
  			64860,
  			64860
  		],
  		"mapped",
  		[
  			1587,
  			1581,
  			1580
  		]
  	],
  	[
  		[
  			64861,
  			64861
  		],
  		"mapped",
  		[
  			1587,
  			1580,
  			1581
  		]
  	],
  	[
  		[
  			64862,
  			64862
  		],
  		"mapped",
  		[
  			1587,
  			1580,
  			1609
  		]
  	],
  	[
  		[
  			64863,
  			64864
  		],
  		"mapped",
  		[
  			1587,
  			1605,
  			1581
  		]
  	],
  	[
  		[
  			64865,
  			64865
  		],
  		"mapped",
  		[
  			1587,
  			1605,
  			1580
  		]
  	],
  	[
  		[
  			64866,
  			64867
  		],
  		"mapped",
  		[
  			1587,
  			1605,
  			1605
  		]
  	],
  	[
  		[
  			64868,
  			64869
  		],
  		"mapped",
  		[
  			1589,
  			1581,
  			1581
  		]
  	],
  	[
  		[
  			64870,
  			64870
  		],
  		"mapped",
  		[
  			1589,
  			1605,
  			1605
  		]
  	],
  	[
  		[
  			64871,
  			64872
  		],
  		"mapped",
  		[
  			1588,
  			1581,
  			1605
  		]
  	],
  	[
  		[
  			64873,
  			64873
  		],
  		"mapped",
  		[
  			1588,
  			1580,
  			1610
  		]
  	],
  	[
  		[
  			64874,
  			64875
  		],
  		"mapped",
  		[
  			1588,
  			1605,
  			1582
  		]
  	],
  	[
  		[
  			64876,
  			64877
  		],
  		"mapped",
  		[
  			1588,
  			1605,
  			1605
  		]
  	],
  	[
  		[
  			64878,
  			64878
  		],
  		"mapped",
  		[
  			1590,
  			1581,
  			1609
  		]
  	],
  	[
  		[
  			64879,
  			64880
  		],
  		"mapped",
  		[
  			1590,
  			1582,
  			1605
  		]
  	],
  	[
  		[
  			64881,
  			64882
  		],
  		"mapped",
  		[
  			1591,
  			1605,
  			1581
  		]
  	],
  	[
  		[
  			64883,
  			64883
  		],
  		"mapped",
  		[
  			1591,
  			1605,
  			1605
  		]
  	],
  	[
  		[
  			64884,
  			64884
  		],
  		"mapped",
  		[
  			1591,
  			1605,
  			1610
  		]
  	],
  	[
  		[
  			64885,
  			64885
  		],
  		"mapped",
  		[
  			1593,
  			1580,
  			1605
  		]
  	],
  	[
  		[
  			64886,
  			64887
  		],
  		"mapped",
  		[
  			1593,
  			1605,
  			1605
  		]
  	],
  	[
  		[
  			64888,
  			64888
  		],
  		"mapped",
  		[
  			1593,
  			1605,
  			1609
  		]
  	],
  	[
  		[
  			64889,
  			64889
  		],
  		"mapped",
  		[
  			1594,
  			1605,
  			1605
  		]
  	],
  	[
  		[
  			64890,
  			64890
  		],
  		"mapped",
  		[
  			1594,
  			1605,
  			1610
  		]
  	],
  	[
  		[
  			64891,
  			64891
  		],
  		"mapped",
  		[
  			1594,
  			1605,
  			1609
  		]
  	],
  	[
  		[
  			64892,
  			64893
  		],
  		"mapped",
  		[
  			1601,
  			1582,
  			1605
  		]
  	],
  	[
  		[
  			64894,
  			64894
  		],
  		"mapped",
  		[
  			1602,
  			1605,
  			1581
  		]
  	],
  	[
  		[
  			64895,
  			64895
  		],
  		"mapped",
  		[
  			1602,
  			1605,
  			1605
  		]
  	],
  	[
  		[
  			64896,
  			64896
  		],
  		"mapped",
  		[
  			1604,
  			1581,
  			1605
  		]
  	],
  	[
  		[
  			64897,
  			64897
  		],
  		"mapped",
  		[
  			1604,
  			1581,
  			1610
  		]
  	],
  	[
  		[
  			64898,
  			64898
  		],
  		"mapped",
  		[
  			1604,
  			1581,
  			1609
  		]
  	],
  	[
  		[
  			64899,
  			64900
  		],
  		"mapped",
  		[
  			1604,
  			1580,
  			1580
  		]
  	],
  	[
  		[
  			64901,
  			64902
  		],
  		"mapped",
  		[
  			1604,
  			1582,
  			1605
  		]
  	],
  	[
  		[
  			64903,
  			64904
  		],
  		"mapped",
  		[
  			1604,
  			1605,
  			1581
  		]
  	],
  	[
  		[
  			64905,
  			64905
  		],
  		"mapped",
  		[
  			1605,
  			1581,
  			1580
  		]
  	],
  	[
  		[
  			64906,
  			64906
  		],
  		"mapped",
  		[
  			1605,
  			1581,
  			1605
  		]
  	],
  	[
  		[
  			64907,
  			64907
  		],
  		"mapped",
  		[
  			1605,
  			1581,
  			1610
  		]
  	],
  	[
  		[
  			64908,
  			64908
  		],
  		"mapped",
  		[
  			1605,
  			1580,
  			1581
  		]
  	],
  	[
  		[
  			64909,
  			64909
  		],
  		"mapped",
  		[
  			1605,
  			1580,
  			1605
  		]
  	],
  	[
  		[
  			64910,
  			64910
  		],
  		"mapped",
  		[
  			1605,
  			1582,
  			1580
  		]
  	],
  	[
  		[
  			64911,
  			64911
  		],
  		"mapped",
  		[
  			1605,
  			1582,
  			1605
  		]
  	],
  	[
  		[
  			64912,
  			64913
  		],
  		"disallowed"
  	],
  	[
  		[
  			64914,
  			64914
  		],
  		"mapped",
  		[
  			1605,
  			1580,
  			1582
  		]
  	],
  	[
  		[
  			64915,
  			64915
  		],
  		"mapped",
  		[
  			1607,
  			1605,
  			1580
  		]
  	],
  	[
  		[
  			64916,
  			64916
  		],
  		"mapped",
  		[
  			1607,
  			1605,
  			1605
  		]
  	],
  	[
  		[
  			64917,
  			64917
  		],
  		"mapped",
  		[
  			1606,
  			1581,
  			1605
  		]
  	],
  	[
  		[
  			64918,
  			64918
  		],
  		"mapped",
  		[
  			1606,
  			1581,
  			1609
  		]
  	],
  	[
  		[
  			64919,
  			64920
  		],
  		"mapped",
  		[
  			1606,
  			1580,
  			1605
  		]
  	],
  	[
  		[
  			64921,
  			64921
  		],
  		"mapped",
  		[
  			1606,
  			1580,
  			1609
  		]
  	],
  	[
  		[
  			64922,
  			64922
  		],
  		"mapped",
  		[
  			1606,
  			1605,
  			1610
  		]
  	],
  	[
  		[
  			64923,
  			64923
  		],
  		"mapped",
  		[
  			1606,
  			1605,
  			1609
  		]
  	],
  	[
  		[
  			64924,
  			64925
  		],
  		"mapped",
  		[
  			1610,
  			1605,
  			1605
  		]
  	],
  	[
  		[
  			64926,
  			64926
  		],
  		"mapped",
  		[
  			1576,
  			1582,
  			1610
  		]
  	],
  	[
  		[
  			64927,
  			64927
  		],
  		"mapped",
  		[
  			1578,
  			1580,
  			1610
  		]
  	],
  	[
  		[
  			64928,
  			64928
  		],
  		"mapped",
  		[
  			1578,
  			1580,
  			1609
  		]
  	],
  	[
  		[
  			64929,
  			64929
  		],
  		"mapped",
  		[
  			1578,
  			1582,
  			1610
  		]
  	],
  	[
  		[
  			64930,
  			64930
  		],
  		"mapped",
  		[
  			1578,
  			1582,
  			1609
  		]
  	],
  	[
  		[
  			64931,
  			64931
  		],
  		"mapped",
  		[
  			1578,
  			1605,
  			1610
  		]
  	],
  	[
  		[
  			64932,
  			64932
  		],
  		"mapped",
  		[
  			1578,
  			1605,
  			1609
  		]
  	],
  	[
  		[
  			64933,
  			64933
  		],
  		"mapped",
  		[
  			1580,
  			1605,
  			1610
  		]
  	],
  	[
  		[
  			64934,
  			64934
  		],
  		"mapped",
  		[
  			1580,
  			1581,
  			1609
  		]
  	],
  	[
  		[
  			64935,
  			64935
  		],
  		"mapped",
  		[
  			1580,
  			1605,
  			1609
  		]
  	],
  	[
  		[
  			64936,
  			64936
  		],
  		"mapped",
  		[
  			1587,
  			1582,
  			1609
  		]
  	],
  	[
  		[
  			64937,
  			64937
  		],
  		"mapped",
  		[
  			1589,
  			1581,
  			1610
  		]
  	],
  	[
  		[
  			64938,
  			64938
  		],
  		"mapped",
  		[
  			1588,
  			1581,
  			1610
  		]
  	],
  	[
  		[
  			64939,
  			64939
  		],
  		"mapped",
  		[
  			1590,
  			1581,
  			1610
  		]
  	],
  	[
  		[
  			64940,
  			64940
  		],
  		"mapped",
  		[
  			1604,
  			1580,
  			1610
  		]
  	],
  	[
  		[
  			64941,
  			64941
  		],
  		"mapped",
  		[
  			1604,
  			1605,
  			1610
  		]
  	],
  	[
  		[
  			64942,
  			64942
  		],
  		"mapped",
  		[
  			1610,
  			1581,
  			1610
  		]
  	],
  	[
  		[
  			64943,
  			64943
  		],
  		"mapped",
  		[
  			1610,
  			1580,
  			1610
  		]
  	],
  	[
  		[
  			64944,
  			64944
  		],
  		"mapped",
  		[
  			1610,
  			1605,
  			1610
  		]
  	],
  	[
  		[
  			64945,
  			64945
  		],
  		"mapped",
  		[
  			1605,
  			1605,
  			1610
  		]
  	],
  	[
  		[
  			64946,
  			64946
  		],
  		"mapped",
  		[
  			1602,
  			1605,
  			1610
  		]
  	],
  	[
  		[
  			64947,
  			64947
  		],
  		"mapped",
  		[
  			1606,
  			1581,
  			1610
  		]
  	],
  	[
  		[
  			64948,
  			64948
  		],
  		"mapped",
  		[
  			1602,
  			1605,
  			1581
  		]
  	],
  	[
  		[
  			64949,
  			64949
  		],
  		"mapped",
  		[
  			1604,
  			1581,
  			1605
  		]
  	],
  	[
  		[
  			64950,
  			64950
  		],
  		"mapped",
  		[
  			1593,
  			1605,
  			1610
  		]
  	],
  	[
  		[
  			64951,
  			64951
  		],
  		"mapped",
  		[
  			1603,
  			1605,
  			1610
  		]
  	],
  	[
  		[
  			64952,
  			64952
  		],
  		"mapped",
  		[
  			1606,
  			1580,
  			1581
  		]
  	],
  	[
  		[
  			64953,
  			64953
  		],
  		"mapped",
  		[
  			1605,
  			1582,
  			1610
  		]
  	],
  	[
  		[
  			64954,
  			64954
  		],
  		"mapped",
  		[
  			1604,
  			1580,
  			1605
  		]
  	],
  	[
  		[
  			64955,
  			64955
  		],
  		"mapped",
  		[
  			1603,
  			1605,
  			1605
  		]
  	],
  	[
  		[
  			64956,
  			64956
  		],
  		"mapped",
  		[
  			1604,
  			1580,
  			1605
  		]
  	],
  	[
  		[
  			64957,
  			64957
  		],
  		"mapped",
  		[
  			1606,
  			1580,
  			1581
  		]
  	],
  	[
  		[
  			64958,
  			64958
  		],
  		"mapped",
  		[
  			1580,
  			1581,
  			1610
  		]
  	],
  	[
  		[
  			64959,
  			64959
  		],
  		"mapped",
  		[
  			1581,
  			1580,
  			1610
  		]
  	],
  	[
  		[
  			64960,
  			64960
  		],
  		"mapped",
  		[
  			1605,
  			1580,
  			1610
  		]
  	],
  	[
  		[
  			64961,
  			64961
  		],
  		"mapped",
  		[
  			1601,
  			1605,
  			1610
  		]
  	],
  	[
  		[
  			64962,
  			64962
  		],
  		"mapped",
  		[
  			1576,
  			1581,
  			1610
  		]
  	],
  	[
  		[
  			64963,
  			64963
  		],
  		"mapped",
  		[
  			1603,
  			1605,
  			1605
  		]
  	],
  	[
  		[
  			64964,
  			64964
  		],
  		"mapped",
  		[
  			1593,
  			1580,
  			1605
  		]
  	],
  	[
  		[
  			64965,
  			64965
  		],
  		"mapped",
  		[
  			1589,
  			1605,
  			1605
  		]
  	],
  	[
  		[
  			64966,
  			64966
  		],
  		"mapped",
  		[
  			1587,
  			1582,
  			1610
  		]
  	],
  	[
  		[
  			64967,
  			64967
  		],
  		"mapped",
  		[
  			1606,
  			1580,
  			1610
  		]
  	],
  	[
  		[
  			64968,
  			64975
  		],
  		"disallowed"
  	],
  	[
  		[
  			64976,
  			65007
  		],
  		"disallowed"
  	],
  	[
  		[
  			65008,
  			65008
  		],
  		"mapped",
  		[
  			1589,
  			1604,
  			1746
  		]
  	],
  	[
  		[
  			65009,
  			65009
  		],
  		"mapped",
  		[
  			1602,
  			1604,
  			1746
  		]
  	],
  	[
  		[
  			65010,
  			65010
  		],
  		"mapped",
  		[
  			1575,
  			1604,
  			1604,
  			1607
  		]
  	],
  	[
  		[
  			65011,
  			65011
  		],
  		"mapped",
  		[
  			1575,
  			1603,
  			1576,
  			1585
  		]
  	],
  	[
  		[
  			65012,
  			65012
  		],
  		"mapped",
  		[
  			1605,
  			1581,
  			1605,
  			1583
  		]
  	],
  	[
  		[
  			65013,
  			65013
  		],
  		"mapped",
  		[
  			1589,
  			1604,
  			1593,
  			1605
  		]
  	],
  	[
  		[
  			65014,
  			65014
  		],
  		"mapped",
  		[
  			1585,
  			1587,
  			1608,
  			1604
  		]
  	],
  	[
  		[
  			65015,
  			65015
  		],
  		"mapped",
  		[
  			1593,
  			1604,
  			1610,
  			1607
  		]
  	],
  	[
  		[
  			65016,
  			65016
  		],
  		"mapped",
  		[
  			1608,
  			1587,
  			1604,
  			1605
  		]
  	],
  	[
  		[
  			65017,
  			65017
  		],
  		"mapped",
  		[
  			1589,
  			1604,
  			1609
  		]
  	],
  	[
  		[
  			65018,
  			65018
  		],
  		"disallowed_STD3_mapped",
  		[
  			1589,
  			1604,
  			1609,
  			32,
  			1575,
  			1604,
  			1604,
  			1607,
  			32,
  			1593,
  			1604,
  			1610,
  			1607,
  			32,
  			1608,
  			1587,
  			1604,
  			1605
  		]
  	],
  	[
  		[
  			65019,
  			65019
  		],
  		"disallowed_STD3_mapped",
  		[
  			1580,
  			1604,
  			32,
  			1580,
  			1604,
  			1575,
  			1604,
  			1607
  		]
  	],
  	[
  		[
  			65020,
  			65020
  		],
  		"mapped",
  		[
  			1585,
  			1740,
  			1575,
  			1604
  		]
  	],
  	[
  		[
  			65021,
  			65021
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			65022,
  			65023
  		],
  		"disallowed"
  	],
  	[
  		[
  			65024,
  			65039
  		],
  		"ignored"
  	],
  	[
  		[
  			65040,
  			65040
  		],
  		"disallowed_STD3_mapped",
  		[
  			44
  		]
  	],
  	[
  		[
  			65041,
  			65041
  		],
  		"mapped",
  		[
  			12289
  		]
  	],
  	[
  		[
  			65042,
  			65042
  		],
  		"disallowed"
  	],
  	[
  		[
  			65043,
  			65043
  		],
  		"disallowed_STD3_mapped",
  		[
  			58
  		]
  	],
  	[
  		[
  			65044,
  			65044
  		],
  		"disallowed_STD3_mapped",
  		[
  			59
  		]
  	],
  	[
  		[
  			65045,
  			65045
  		],
  		"disallowed_STD3_mapped",
  		[
  			33
  		]
  	],
  	[
  		[
  			65046,
  			65046
  		],
  		"disallowed_STD3_mapped",
  		[
  			63
  		]
  	],
  	[
  		[
  			65047,
  			65047
  		],
  		"mapped",
  		[
  			12310
  		]
  	],
  	[
  		[
  			65048,
  			65048
  		],
  		"mapped",
  		[
  			12311
  		]
  	],
  	[
  		[
  			65049,
  			65049
  		],
  		"disallowed"
  	],
  	[
  		[
  			65050,
  			65055
  		],
  		"disallowed"
  	],
  	[
  		[
  			65056,
  			65059
  		],
  		"valid"
  	],
  	[
  		[
  			65060,
  			65062
  		],
  		"valid"
  	],
  	[
  		[
  			65063,
  			65069
  		],
  		"valid"
  	],
  	[
  		[
  			65070,
  			65071
  		],
  		"valid"
  	],
  	[
  		[
  			65072,
  			65072
  		],
  		"disallowed"
  	],
  	[
  		[
  			65073,
  			65073
  		],
  		"mapped",
  		[
  			8212
  		]
  	],
  	[
  		[
  			65074,
  			65074
  		],
  		"mapped",
  		[
  			8211
  		]
  	],
  	[
  		[
  			65075,
  			65076
  		],
  		"disallowed_STD3_mapped",
  		[
  			95
  		]
  	],
  	[
  		[
  			65077,
  			65077
  		],
  		"disallowed_STD3_mapped",
  		[
  			40
  		]
  	],
  	[
  		[
  			65078,
  			65078
  		],
  		"disallowed_STD3_mapped",
  		[
  			41
  		]
  	],
  	[
  		[
  			65079,
  			65079
  		],
  		"disallowed_STD3_mapped",
  		[
  			123
  		]
  	],
  	[
  		[
  			65080,
  			65080
  		],
  		"disallowed_STD3_mapped",
  		[
  			125
  		]
  	],
  	[
  		[
  			65081,
  			65081
  		],
  		"mapped",
  		[
  			12308
  		]
  	],
  	[
  		[
  			65082,
  			65082
  		],
  		"mapped",
  		[
  			12309
  		]
  	],
  	[
  		[
  			65083,
  			65083
  		],
  		"mapped",
  		[
  			12304
  		]
  	],
  	[
  		[
  			65084,
  			65084
  		],
  		"mapped",
  		[
  			12305
  		]
  	],
  	[
  		[
  			65085,
  			65085
  		],
  		"mapped",
  		[
  			12298
  		]
  	],
  	[
  		[
  			65086,
  			65086
  		],
  		"mapped",
  		[
  			12299
  		]
  	],
  	[
  		[
  			65087,
  			65087
  		],
  		"mapped",
  		[
  			12296
  		]
  	],
  	[
  		[
  			65088,
  			65088
  		],
  		"mapped",
  		[
  			12297
  		]
  	],
  	[
  		[
  			65089,
  			65089
  		],
  		"mapped",
  		[
  			12300
  		]
  	],
  	[
  		[
  			65090,
  			65090
  		],
  		"mapped",
  		[
  			12301
  		]
  	],
  	[
  		[
  			65091,
  			65091
  		],
  		"mapped",
  		[
  			12302
  		]
  	],
  	[
  		[
  			65092,
  			65092
  		],
  		"mapped",
  		[
  			12303
  		]
  	],
  	[
  		[
  			65093,
  			65094
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			65095,
  			65095
  		],
  		"disallowed_STD3_mapped",
  		[
  			91
  		]
  	],
  	[
  		[
  			65096,
  			65096
  		],
  		"disallowed_STD3_mapped",
  		[
  			93
  		]
  	],
  	[
  		[
  			65097,
  			65100
  		],
  		"disallowed_STD3_mapped",
  		[
  			32,
  			773
  		]
  	],
  	[
  		[
  			65101,
  			65103
  		],
  		"disallowed_STD3_mapped",
  		[
  			95
  		]
  	],
  	[
  		[
  			65104,
  			65104
  		],
  		"disallowed_STD3_mapped",
  		[
  			44
  		]
  	],
  	[
  		[
  			65105,
  			65105
  		],
  		"mapped",
  		[
  			12289
  		]
  	],
  	[
  		[
  			65106,
  			65106
  		],
  		"disallowed"
  	],
  	[
  		[
  			65107,
  			65107
  		],
  		"disallowed"
  	],
  	[
  		[
  			65108,
  			65108
  		],
  		"disallowed_STD3_mapped",
  		[
  			59
  		]
  	],
  	[
  		[
  			65109,
  			65109
  		],
  		"disallowed_STD3_mapped",
  		[
  			58
  		]
  	],
  	[
  		[
  			65110,
  			65110
  		],
  		"disallowed_STD3_mapped",
  		[
  			63
  		]
  	],
  	[
  		[
  			65111,
  			65111
  		],
  		"disallowed_STD3_mapped",
  		[
  			33
  		]
  	],
  	[
  		[
  			65112,
  			65112
  		],
  		"mapped",
  		[
  			8212
  		]
  	],
  	[
  		[
  			65113,
  			65113
  		],
  		"disallowed_STD3_mapped",
  		[
  			40
  		]
  	],
  	[
  		[
  			65114,
  			65114
  		],
  		"disallowed_STD3_mapped",
  		[
  			41
  		]
  	],
  	[
  		[
  			65115,
  			65115
  		],
  		"disallowed_STD3_mapped",
  		[
  			123
  		]
  	],
  	[
  		[
  			65116,
  			65116
  		],
  		"disallowed_STD3_mapped",
  		[
  			125
  		]
  	],
  	[
  		[
  			65117,
  			65117
  		],
  		"mapped",
  		[
  			12308
  		]
  	],
  	[
  		[
  			65118,
  			65118
  		],
  		"mapped",
  		[
  			12309
  		]
  	],
  	[
  		[
  			65119,
  			65119
  		],
  		"disallowed_STD3_mapped",
  		[
  			35
  		]
  	],
  	[
  		[
  			65120,
  			65120
  		],
  		"disallowed_STD3_mapped",
  		[
  			38
  		]
  	],
  	[
  		[
  			65121,
  			65121
  		],
  		"disallowed_STD3_mapped",
  		[
  			42
  		]
  	],
  	[
  		[
  			65122,
  			65122
  		],
  		"disallowed_STD3_mapped",
  		[
  			43
  		]
  	],
  	[
  		[
  			65123,
  			65123
  		],
  		"mapped",
  		[
  			45
  		]
  	],
  	[
  		[
  			65124,
  			65124
  		],
  		"disallowed_STD3_mapped",
  		[
  			60
  		]
  	],
  	[
  		[
  			65125,
  			65125
  		],
  		"disallowed_STD3_mapped",
  		[
  			62
  		]
  	],
  	[
  		[
  			65126,
  			65126
  		],
  		"disallowed_STD3_mapped",
  		[
  			61
  		]
  	],
  	[
  		[
  			65127,
  			65127
  		],
  		"disallowed"
  	],
  	[
  		[
  			65128,
  			65128
  		],
  		"disallowed_STD3_mapped",
  		[
  			92
  		]
  	],
  	[
  		[
  			65129,
  			65129
  		],
  		"disallowed_STD3_mapped",
  		[
  			36
  		]
  	],
  	[
  		[
  			65130,
  			65130
  		],
  		"disallowed_STD3_mapped",
  		[
  			37
  		]
  	],
  	[
  		[
  			65131,
  			65131
  		],
  		"disallowed_STD3_mapped",
  		[
  			64
  		]
  	],
  	[
  		[
  			65132,
  			65135
  		],
  		"disallowed"
  	],
  	[
  		[
  			65136,
  			65136
  		],
  		"disallowed_STD3_mapped",
  		[
  			32,
  			1611
  		]
  	],
  	[
  		[
  			65137,
  			65137
  		],
  		"mapped",
  		[
  			1600,
  			1611
  		]
  	],
  	[
  		[
  			65138,
  			65138
  		],
  		"disallowed_STD3_mapped",
  		[
  			32,
  			1612
  		]
  	],
  	[
  		[
  			65139,
  			65139
  		],
  		"valid"
  	],
  	[
  		[
  			65140,
  			65140
  		],
  		"disallowed_STD3_mapped",
  		[
  			32,
  			1613
  		]
  	],
  	[
  		[
  			65141,
  			65141
  		],
  		"disallowed"
  	],
  	[
  		[
  			65142,
  			65142
  		],
  		"disallowed_STD3_mapped",
  		[
  			32,
  			1614
  		]
  	],
  	[
  		[
  			65143,
  			65143
  		],
  		"mapped",
  		[
  			1600,
  			1614
  		]
  	],
  	[
  		[
  			65144,
  			65144
  		],
  		"disallowed_STD3_mapped",
  		[
  			32,
  			1615
  		]
  	],
  	[
  		[
  			65145,
  			65145
  		],
  		"mapped",
  		[
  			1600,
  			1615
  		]
  	],
  	[
  		[
  			65146,
  			65146
  		],
  		"disallowed_STD3_mapped",
  		[
  			32,
  			1616
  		]
  	],
  	[
  		[
  			65147,
  			65147
  		],
  		"mapped",
  		[
  			1600,
  			1616
  		]
  	],
  	[
  		[
  			65148,
  			65148
  		],
  		"disallowed_STD3_mapped",
  		[
  			32,
  			1617
  		]
  	],
  	[
  		[
  			65149,
  			65149
  		],
  		"mapped",
  		[
  			1600,
  			1617
  		]
  	],
  	[
  		[
  			65150,
  			65150
  		],
  		"disallowed_STD3_mapped",
  		[
  			32,
  			1618
  		]
  	],
  	[
  		[
  			65151,
  			65151
  		],
  		"mapped",
  		[
  			1600,
  			1618
  		]
  	],
  	[
  		[
  			65152,
  			65152
  		],
  		"mapped",
  		[
  			1569
  		]
  	],
  	[
  		[
  			65153,
  			65154
  		],
  		"mapped",
  		[
  			1570
  		]
  	],
  	[
  		[
  			65155,
  			65156
  		],
  		"mapped",
  		[
  			1571
  		]
  	],
  	[
  		[
  			65157,
  			65158
  		],
  		"mapped",
  		[
  			1572
  		]
  	],
  	[
  		[
  			65159,
  			65160
  		],
  		"mapped",
  		[
  			1573
  		]
  	],
  	[
  		[
  			65161,
  			65164
  		],
  		"mapped",
  		[
  			1574
  		]
  	],
  	[
  		[
  			65165,
  			65166
  		],
  		"mapped",
  		[
  			1575
  		]
  	],
  	[
  		[
  			65167,
  			65170
  		],
  		"mapped",
  		[
  			1576
  		]
  	],
  	[
  		[
  			65171,
  			65172
  		],
  		"mapped",
  		[
  			1577
  		]
  	],
  	[
  		[
  			65173,
  			65176
  		],
  		"mapped",
  		[
  			1578
  		]
  	],
  	[
  		[
  			65177,
  			65180
  		],
  		"mapped",
  		[
  			1579
  		]
  	],
  	[
  		[
  			65181,
  			65184
  		],
  		"mapped",
  		[
  			1580
  		]
  	],
  	[
  		[
  			65185,
  			65188
  		],
  		"mapped",
  		[
  			1581
  		]
  	],
  	[
  		[
  			65189,
  			65192
  		],
  		"mapped",
  		[
  			1582
  		]
  	],
  	[
  		[
  			65193,
  			65194
  		],
  		"mapped",
  		[
  			1583
  		]
  	],
  	[
  		[
  			65195,
  			65196
  		],
  		"mapped",
  		[
  			1584
  		]
  	],
  	[
  		[
  			65197,
  			65198
  		],
  		"mapped",
  		[
  			1585
  		]
  	],
  	[
  		[
  			65199,
  			65200
  		],
  		"mapped",
  		[
  			1586
  		]
  	],
  	[
  		[
  			65201,
  			65204
  		],
  		"mapped",
  		[
  			1587
  		]
  	],
  	[
  		[
  			65205,
  			65208
  		],
  		"mapped",
  		[
  			1588
  		]
  	],
  	[
  		[
  			65209,
  			65212
  		],
  		"mapped",
  		[
  			1589
  		]
  	],
  	[
  		[
  			65213,
  			65216
  		],
  		"mapped",
  		[
  			1590
  		]
  	],
  	[
  		[
  			65217,
  			65220
  		],
  		"mapped",
  		[
  			1591
  		]
  	],
  	[
  		[
  			65221,
  			65224
  		],
  		"mapped",
  		[
  			1592
  		]
  	],
  	[
  		[
  			65225,
  			65228
  		],
  		"mapped",
  		[
  			1593
  		]
  	],
  	[
  		[
  			65229,
  			65232
  		],
  		"mapped",
  		[
  			1594
  		]
  	],
  	[
  		[
  			65233,
  			65236
  		],
  		"mapped",
  		[
  			1601
  		]
  	],
  	[
  		[
  			65237,
  			65240
  		],
  		"mapped",
  		[
  			1602
  		]
  	],
  	[
  		[
  			65241,
  			65244
  		],
  		"mapped",
  		[
  			1603
  		]
  	],
  	[
  		[
  			65245,
  			65248
  		],
  		"mapped",
  		[
  			1604
  		]
  	],
  	[
  		[
  			65249,
  			65252
  		],
  		"mapped",
  		[
  			1605
  		]
  	],
  	[
  		[
  			65253,
  			65256
  		],
  		"mapped",
  		[
  			1606
  		]
  	],
  	[
  		[
  			65257,
  			65260
  		],
  		"mapped",
  		[
  			1607
  		]
  	],
  	[
  		[
  			65261,
  			65262
  		],
  		"mapped",
  		[
  			1608
  		]
  	],
  	[
  		[
  			65263,
  			65264
  		],
  		"mapped",
  		[
  			1609
  		]
  	],
  	[
  		[
  			65265,
  			65268
  		],
  		"mapped",
  		[
  			1610
  		]
  	],
  	[
  		[
  			65269,
  			65270
  		],
  		"mapped",
  		[
  			1604,
  			1570
  		]
  	],
  	[
  		[
  			65271,
  			65272
  		],
  		"mapped",
  		[
  			1604,
  			1571
  		]
  	],
  	[
  		[
  			65273,
  			65274
  		],
  		"mapped",
  		[
  			1604,
  			1573
  		]
  	],
  	[
  		[
  			65275,
  			65276
  		],
  		"mapped",
  		[
  			1604,
  			1575
  		]
  	],
  	[
  		[
  			65277,
  			65278
  		],
  		"disallowed"
  	],
  	[
  		[
  			65279,
  			65279
  		],
  		"ignored"
  	],
  	[
  		[
  			65280,
  			65280
  		],
  		"disallowed"
  	],
  	[
  		[
  			65281,
  			65281
  		],
  		"disallowed_STD3_mapped",
  		[
  			33
  		]
  	],
  	[
  		[
  			65282,
  			65282
  		],
  		"disallowed_STD3_mapped",
  		[
  			34
  		]
  	],
  	[
  		[
  			65283,
  			65283
  		],
  		"disallowed_STD3_mapped",
  		[
  			35
  		]
  	],
  	[
  		[
  			65284,
  			65284
  		],
  		"disallowed_STD3_mapped",
  		[
  			36
  		]
  	],
  	[
  		[
  			65285,
  			65285
  		],
  		"disallowed_STD3_mapped",
  		[
  			37
  		]
  	],
  	[
  		[
  			65286,
  			65286
  		],
  		"disallowed_STD3_mapped",
  		[
  			38
  		]
  	],
  	[
  		[
  			65287,
  			65287
  		],
  		"disallowed_STD3_mapped",
  		[
  			39
  		]
  	],
  	[
  		[
  			65288,
  			65288
  		],
  		"disallowed_STD3_mapped",
  		[
  			40
  		]
  	],
  	[
  		[
  			65289,
  			65289
  		],
  		"disallowed_STD3_mapped",
  		[
  			41
  		]
  	],
  	[
  		[
  			65290,
  			65290
  		],
  		"disallowed_STD3_mapped",
  		[
  			42
  		]
  	],
  	[
  		[
  			65291,
  			65291
  		],
  		"disallowed_STD3_mapped",
  		[
  			43
  		]
  	],
  	[
  		[
  			65292,
  			65292
  		],
  		"disallowed_STD3_mapped",
  		[
  			44
  		]
  	],
  	[
  		[
  			65293,
  			65293
  		],
  		"mapped",
  		[
  			45
  		]
  	],
  	[
  		[
  			65294,
  			65294
  		],
  		"mapped",
  		[
  			46
  		]
  	],
  	[
  		[
  			65295,
  			65295
  		],
  		"disallowed_STD3_mapped",
  		[
  			47
  		]
  	],
  	[
  		[
  			65296,
  			65296
  		],
  		"mapped",
  		[
  			48
  		]
  	],
  	[
  		[
  			65297,
  			65297
  		],
  		"mapped",
  		[
  			49
  		]
  	],
  	[
  		[
  			65298,
  			65298
  		],
  		"mapped",
  		[
  			50
  		]
  	],
  	[
  		[
  			65299,
  			65299
  		],
  		"mapped",
  		[
  			51
  		]
  	],
  	[
  		[
  			65300,
  			65300
  		],
  		"mapped",
  		[
  			52
  		]
  	],
  	[
  		[
  			65301,
  			65301
  		],
  		"mapped",
  		[
  			53
  		]
  	],
  	[
  		[
  			65302,
  			65302
  		],
  		"mapped",
  		[
  			54
  		]
  	],
  	[
  		[
  			65303,
  			65303
  		],
  		"mapped",
  		[
  			55
  		]
  	],
  	[
  		[
  			65304,
  			65304
  		],
  		"mapped",
  		[
  			56
  		]
  	],
  	[
  		[
  			65305,
  			65305
  		],
  		"mapped",
  		[
  			57
  		]
  	],
  	[
  		[
  			65306,
  			65306
  		],
  		"disallowed_STD3_mapped",
  		[
  			58
  		]
  	],
  	[
  		[
  			65307,
  			65307
  		],
  		"disallowed_STD3_mapped",
  		[
  			59
  		]
  	],
  	[
  		[
  			65308,
  			65308
  		],
  		"disallowed_STD3_mapped",
  		[
  			60
  		]
  	],
  	[
  		[
  			65309,
  			65309
  		],
  		"disallowed_STD3_mapped",
  		[
  			61
  		]
  	],
  	[
  		[
  			65310,
  			65310
  		],
  		"disallowed_STD3_mapped",
  		[
  			62
  		]
  	],
  	[
  		[
  			65311,
  			65311
  		],
  		"disallowed_STD3_mapped",
  		[
  			63
  		]
  	],
  	[
  		[
  			65312,
  			65312
  		],
  		"disallowed_STD3_mapped",
  		[
  			64
  		]
  	],
  	[
  		[
  			65313,
  			65313
  		],
  		"mapped",
  		[
  			97
  		]
  	],
  	[
  		[
  			65314,
  			65314
  		],
  		"mapped",
  		[
  			98
  		]
  	],
  	[
  		[
  			65315,
  			65315
  		],
  		"mapped",
  		[
  			99
  		]
  	],
  	[
  		[
  			65316,
  			65316
  		],
  		"mapped",
  		[
  			100
  		]
  	],
  	[
  		[
  			65317,
  			65317
  		],
  		"mapped",
  		[
  			101
  		]
  	],
  	[
  		[
  			65318,
  			65318
  		],
  		"mapped",
  		[
  			102
  		]
  	],
  	[
  		[
  			65319,
  			65319
  		],
  		"mapped",
  		[
  			103
  		]
  	],
  	[
  		[
  			65320,
  			65320
  		],
  		"mapped",
  		[
  			104
  		]
  	],
  	[
  		[
  			65321,
  			65321
  		],
  		"mapped",
  		[
  			105
  		]
  	],
  	[
  		[
  			65322,
  			65322
  		],
  		"mapped",
  		[
  			106
  		]
  	],
  	[
  		[
  			65323,
  			65323
  		],
  		"mapped",
  		[
  			107
  		]
  	],
  	[
  		[
  			65324,
  			65324
  		],
  		"mapped",
  		[
  			108
  		]
  	],
  	[
  		[
  			65325,
  			65325
  		],
  		"mapped",
  		[
  			109
  		]
  	],
  	[
  		[
  			65326,
  			65326
  		],
  		"mapped",
  		[
  			110
  		]
  	],
  	[
  		[
  			65327,
  			65327
  		],
  		"mapped",
  		[
  			111
  		]
  	],
  	[
  		[
  			65328,
  			65328
  		],
  		"mapped",
  		[
  			112
  		]
  	],
  	[
  		[
  			65329,
  			65329
  		],
  		"mapped",
  		[
  			113
  		]
  	],
  	[
  		[
  			65330,
  			65330
  		],
  		"mapped",
  		[
  			114
  		]
  	],
  	[
  		[
  			65331,
  			65331
  		],
  		"mapped",
  		[
  			115
  		]
  	],
  	[
  		[
  			65332,
  			65332
  		],
  		"mapped",
  		[
  			116
  		]
  	],
  	[
  		[
  			65333,
  			65333
  		],
  		"mapped",
  		[
  			117
  		]
  	],
  	[
  		[
  			65334,
  			65334
  		],
  		"mapped",
  		[
  			118
  		]
  	],
  	[
  		[
  			65335,
  			65335
  		],
  		"mapped",
  		[
  			119
  		]
  	],
  	[
  		[
  			65336,
  			65336
  		],
  		"mapped",
  		[
  			120
  		]
  	],
  	[
  		[
  			65337,
  			65337
  		],
  		"mapped",
  		[
  			121
  		]
  	],
  	[
  		[
  			65338,
  			65338
  		],
  		"mapped",
  		[
  			122
  		]
  	],
  	[
  		[
  			65339,
  			65339
  		],
  		"disallowed_STD3_mapped",
  		[
  			91
  		]
  	],
  	[
  		[
  			65340,
  			65340
  		],
  		"disallowed_STD3_mapped",
  		[
  			92
  		]
  	],
  	[
  		[
  			65341,
  			65341
  		],
  		"disallowed_STD3_mapped",
  		[
  			93
  		]
  	],
  	[
  		[
  			65342,
  			65342
  		],
  		"disallowed_STD3_mapped",
  		[
  			94
  		]
  	],
  	[
  		[
  			65343,
  			65343
  		],
  		"disallowed_STD3_mapped",
  		[
  			95
  		]
  	],
  	[
  		[
  			65344,
  			65344
  		],
  		"disallowed_STD3_mapped",
  		[
  			96
  		]
  	],
  	[
  		[
  			65345,
  			65345
  		],
  		"mapped",
  		[
  			97
  		]
  	],
  	[
  		[
  			65346,
  			65346
  		],
  		"mapped",
  		[
  			98
  		]
  	],
  	[
  		[
  			65347,
  			65347
  		],
  		"mapped",
  		[
  			99
  		]
  	],
  	[
  		[
  			65348,
  			65348
  		],
  		"mapped",
  		[
  			100
  		]
  	],
  	[
  		[
  			65349,
  			65349
  		],
  		"mapped",
  		[
  			101
  		]
  	],
  	[
  		[
  			65350,
  			65350
  		],
  		"mapped",
  		[
  			102
  		]
  	],
  	[
  		[
  			65351,
  			65351
  		],
  		"mapped",
  		[
  			103
  		]
  	],
  	[
  		[
  			65352,
  			65352
  		],
  		"mapped",
  		[
  			104
  		]
  	],
  	[
  		[
  			65353,
  			65353
  		],
  		"mapped",
  		[
  			105
  		]
  	],
  	[
  		[
  			65354,
  			65354
  		],
  		"mapped",
  		[
  			106
  		]
  	],
  	[
  		[
  			65355,
  			65355
  		],
  		"mapped",
  		[
  			107
  		]
  	],
  	[
  		[
  			65356,
  			65356
  		],
  		"mapped",
  		[
  			108
  		]
  	],
  	[
  		[
  			65357,
  			65357
  		],
  		"mapped",
  		[
  			109
  		]
  	],
  	[
  		[
  			65358,
  			65358
  		],
  		"mapped",
  		[
  			110
  		]
  	],
  	[
  		[
  			65359,
  			65359
  		],
  		"mapped",
  		[
  			111
  		]
  	],
  	[
  		[
  			65360,
  			65360
  		],
  		"mapped",
  		[
  			112
  		]
  	],
  	[
  		[
  			65361,
  			65361
  		],
  		"mapped",
  		[
  			113
  		]
  	],
  	[
  		[
  			65362,
  			65362
  		],
  		"mapped",
  		[
  			114
  		]
  	],
  	[
  		[
  			65363,
  			65363
  		],
  		"mapped",
  		[
  			115
  		]
  	],
  	[
  		[
  			65364,
  			65364
  		],
  		"mapped",
  		[
  			116
  		]
  	],
  	[
  		[
  			65365,
  			65365
  		],
  		"mapped",
  		[
  			117
  		]
  	],
  	[
  		[
  			65366,
  			65366
  		],
  		"mapped",
  		[
  			118
  		]
  	],
  	[
  		[
  			65367,
  			65367
  		],
  		"mapped",
  		[
  			119
  		]
  	],
  	[
  		[
  			65368,
  			65368
  		],
  		"mapped",
  		[
  			120
  		]
  	],
  	[
  		[
  			65369,
  			65369
  		],
  		"mapped",
  		[
  			121
  		]
  	],
  	[
  		[
  			65370,
  			65370
  		],
  		"mapped",
  		[
  			122
  		]
  	],
  	[
  		[
  			65371,
  			65371
  		],
  		"disallowed_STD3_mapped",
  		[
  			123
  		]
  	],
  	[
  		[
  			65372,
  			65372
  		],
  		"disallowed_STD3_mapped",
  		[
  			124
  		]
  	],
  	[
  		[
  			65373,
  			65373
  		],
  		"disallowed_STD3_mapped",
  		[
  			125
  		]
  	],
  	[
  		[
  			65374,
  			65374
  		],
  		"disallowed_STD3_mapped",
  		[
  			126
  		]
  	],
  	[
  		[
  			65375,
  			65375
  		],
  		"mapped",
  		[
  			10629
  		]
  	],
  	[
  		[
  			65376,
  			65376
  		],
  		"mapped",
  		[
  			10630
  		]
  	],
  	[
  		[
  			65377,
  			65377
  		],
  		"mapped",
  		[
  			46
  		]
  	],
  	[
  		[
  			65378,
  			65378
  		],
  		"mapped",
  		[
  			12300
  		]
  	],
  	[
  		[
  			65379,
  			65379
  		],
  		"mapped",
  		[
  			12301
  		]
  	],
  	[
  		[
  			65380,
  			65380
  		],
  		"mapped",
  		[
  			12289
  		]
  	],
  	[
  		[
  			65381,
  			65381
  		],
  		"mapped",
  		[
  			12539
  		]
  	],
  	[
  		[
  			65382,
  			65382
  		],
  		"mapped",
  		[
  			12530
  		]
  	],
  	[
  		[
  			65383,
  			65383
  		],
  		"mapped",
  		[
  			12449
  		]
  	],
  	[
  		[
  			65384,
  			65384
  		],
  		"mapped",
  		[
  			12451
  		]
  	],
  	[
  		[
  			65385,
  			65385
  		],
  		"mapped",
  		[
  			12453
  		]
  	],
  	[
  		[
  			65386,
  			65386
  		],
  		"mapped",
  		[
  			12455
  		]
  	],
  	[
  		[
  			65387,
  			65387
  		],
  		"mapped",
  		[
  			12457
  		]
  	],
  	[
  		[
  			65388,
  			65388
  		],
  		"mapped",
  		[
  			12515
  		]
  	],
  	[
  		[
  			65389,
  			65389
  		],
  		"mapped",
  		[
  			12517
  		]
  	],
  	[
  		[
  			65390,
  			65390
  		],
  		"mapped",
  		[
  			12519
  		]
  	],
  	[
  		[
  			65391,
  			65391
  		],
  		"mapped",
  		[
  			12483
  		]
  	],
  	[
  		[
  			65392,
  			65392
  		],
  		"mapped",
  		[
  			12540
  		]
  	],
  	[
  		[
  			65393,
  			65393
  		],
  		"mapped",
  		[
  			12450
  		]
  	],
  	[
  		[
  			65394,
  			65394
  		],
  		"mapped",
  		[
  			12452
  		]
  	],
  	[
  		[
  			65395,
  			65395
  		],
  		"mapped",
  		[
  			12454
  		]
  	],
  	[
  		[
  			65396,
  			65396
  		],
  		"mapped",
  		[
  			12456
  		]
  	],
  	[
  		[
  			65397,
  			65397
  		],
  		"mapped",
  		[
  			12458
  		]
  	],
  	[
  		[
  			65398,
  			65398
  		],
  		"mapped",
  		[
  			12459
  		]
  	],
  	[
  		[
  			65399,
  			65399
  		],
  		"mapped",
  		[
  			12461
  		]
  	],
  	[
  		[
  			65400,
  			65400
  		],
  		"mapped",
  		[
  			12463
  		]
  	],
  	[
  		[
  			65401,
  			65401
  		],
  		"mapped",
  		[
  			12465
  		]
  	],
  	[
  		[
  			65402,
  			65402
  		],
  		"mapped",
  		[
  			12467
  		]
  	],
  	[
  		[
  			65403,
  			65403
  		],
  		"mapped",
  		[
  			12469
  		]
  	],
  	[
  		[
  			65404,
  			65404
  		],
  		"mapped",
  		[
  			12471
  		]
  	],
  	[
  		[
  			65405,
  			65405
  		],
  		"mapped",
  		[
  			12473
  		]
  	],
  	[
  		[
  			65406,
  			65406
  		],
  		"mapped",
  		[
  			12475
  		]
  	],
  	[
  		[
  			65407,
  			65407
  		],
  		"mapped",
  		[
  			12477
  		]
  	],
  	[
  		[
  			65408,
  			65408
  		],
  		"mapped",
  		[
  			12479
  		]
  	],
  	[
  		[
  			65409,
  			65409
  		],
  		"mapped",
  		[
  			12481
  		]
  	],
  	[
  		[
  			65410,
  			65410
  		],
  		"mapped",
  		[
  			12484
  		]
  	],
  	[
  		[
  			65411,
  			65411
  		],
  		"mapped",
  		[
  			12486
  		]
  	],
  	[
  		[
  			65412,
  			65412
  		],
  		"mapped",
  		[
  			12488
  		]
  	],
  	[
  		[
  			65413,
  			65413
  		],
  		"mapped",
  		[
  			12490
  		]
  	],
  	[
  		[
  			65414,
  			65414
  		],
  		"mapped",
  		[
  			12491
  		]
  	],
  	[
  		[
  			65415,
  			65415
  		],
  		"mapped",
  		[
  			12492
  		]
  	],
  	[
  		[
  			65416,
  			65416
  		],
  		"mapped",
  		[
  			12493
  		]
  	],
  	[
  		[
  			65417,
  			65417
  		],
  		"mapped",
  		[
  			12494
  		]
  	],
  	[
  		[
  			65418,
  			65418
  		],
  		"mapped",
  		[
  			12495
  		]
  	],
  	[
  		[
  			65419,
  			65419
  		],
  		"mapped",
  		[
  			12498
  		]
  	],
  	[
  		[
  			65420,
  			65420
  		],
  		"mapped",
  		[
  			12501
  		]
  	],
  	[
  		[
  			65421,
  			65421
  		],
  		"mapped",
  		[
  			12504
  		]
  	],
  	[
  		[
  			65422,
  			65422
  		],
  		"mapped",
  		[
  			12507
  		]
  	],
  	[
  		[
  			65423,
  			65423
  		],
  		"mapped",
  		[
  			12510
  		]
  	],
  	[
  		[
  			65424,
  			65424
  		],
  		"mapped",
  		[
  			12511
  		]
  	],
  	[
  		[
  			65425,
  			65425
  		],
  		"mapped",
  		[
  			12512
  		]
  	],
  	[
  		[
  			65426,
  			65426
  		],
  		"mapped",
  		[
  			12513
  		]
  	],
  	[
  		[
  			65427,
  			65427
  		],
  		"mapped",
  		[
  			12514
  		]
  	],
  	[
  		[
  			65428,
  			65428
  		],
  		"mapped",
  		[
  			12516
  		]
  	],
  	[
  		[
  			65429,
  			65429
  		],
  		"mapped",
  		[
  			12518
  		]
  	],
  	[
  		[
  			65430,
  			65430
  		],
  		"mapped",
  		[
  			12520
  		]
  	],
  	[
  		[
  			65431,
  			65431
  		],
  		"mapped",
  		[
  			12521
  		]
  	],
  	[
  		[
  			65432,
  			65432
  		],
  		"mapped",
  		[
  			12522
  		]
  	],
  	[
  		[
  			65433,
  			65433
  		],
  		"mapped",
  		[
  			12523
  		]
  	],
  	[
  		[
  			65434,
  			65434
  		],
  		"mapped",
  		[
  			12524
  		]
  	],
  	[
  		[
  			65435,
  			65435
  		],
  		"mapped",
  		[
  			12525
  		]
  	],
  	[
  		[
  			65436,
  			65436
  		],
  		"mapped",
  		[
  			12527
  		]
  	],
  	[
  		[
  			65437,
  			65437
  		],
  		"mapped",
  		[
  			12531
  		]
  	],
  	[
  		[
  			65438,
  			65438
  		],
  		"mapped",
  		[
  			12441
  		]
  	],
  	[
  		[
  			65439,
  			65439
  		],
  		"mapped",
  		[
  			12442
  		]
  	],
  	[
  		[
  			65440,
  			65440
  		],
  		"disallowed"
  	],
  	[
  		[
  			65441,
  			65441
  		],
  		"mapped",
  		[
  			4352
  		]
  	],
  	[
  		[
  			65442,
  			65442
  		],
  		"mapped",
  		[
  			4353
  		]
  	],
  	[
  		[
  			65443,
  			65443
  		],
  		"mapped",
  		[
  			4522
  		]
  	],
  	[
  		[
  			65444,
  			65444
  		],
  		"mapped",
  		[
  			4354
  		]
  	],
  	[
  		[
  			65445,
  			65445
  		],
  		"mapped",
  		[
  			4524
  		]
  	],
  	[
  		[
  			65446,
  			65446
  		],
  		"mapped",
  		[
  			4525
  		]
  	],
  	[
  		[
  			65447,
  			65447
  		],
  		"mapped",
  		[
  			4355
  		]
  	],
  	[
  		[
  			65448,
  			65448
  		],
  		"mapped",
  		[
  			4356
  		]
  	],
  	[
  		[
  			65449,
  			65449
  		],
  		"mapped",
  		[
  			4357
  		]
  	],
  	[
  		[
  			65450,
  			65450
  		],
  		"mapped",
  		[
  			4528
  		]
  	],
  	[
  		[
  			65451,
  			65451
  		],
  		"mapped",
  		[
  			4529
  		]
  	],
  	[
  		[
  			65452,
  			65452
  		],
  		"mapped",
  		[
  			4530
  		]
  	],
  	[
  		[
  			65453,
  			65453
  		],
  		"mapped",
  		[
  			4531
  		]
  	],
  	[
  		[
  			65454,
  			65454
  		],
  		"mapped",
  		[
  			4532
  		]
  	],
  	[
  		[
  			65455,
  			65455
  		],
  		"mapped",
  		[
  			4533
  		]
  	],
  	[
  		[
  			65456,
  			65456
  		],
  		"mapped",
  		[
  			4378
  		]
  	],
  	[
  		[
  			65457,
  			65457
  		],
  		"mapped",
  		[
  			4358
  		]
  	],
  	[
  		[
  			65458,
  			65458
  		],
  		"mapped",
  		[
  			4359
  		]
  	],
  	[
  		[
  			65459,
  			65459
  		],
  		"mapped",
  		[
  			4360
  		]
  	],
  	[
  		[
  			65460,
  			65460
  		],
  		"mapped",
  		[
  			4385
  		]
  	],
  	[
  		[
  			65461,
  			65461
  		],
  		"mapped",
  		[
  			4361
  		]
  	],
  	[
  		[
  			65462,
  			65462
  		],
  		"mapped",
  		[
  			4362
  		]
  	],
  	[
  		[
  			65463,
  			65463
  		],
  		"mapped",
  		[
  			4363
  		]
  	],
  	[
  		[
  			65464,
  			65464
  		],
  		"mapped",
  		[
  			4364
  		]
  	],
  	[
  		[
  			65465,
  			65465
  		],
  		"mapped",
  		[
  			4365
  		]
  	],
  	[
  		[
  			65466,
  			65466
  		],
  		"mapped",
  		[
  			4366
  		]
  	],
  	[
  		[
  			65467,
  			65467
  		],
  		"mapped",
  		[
  			4367
  		]
  	],
  	[
  		[
  			65468,
  			65468
  		],
  		"mapped",
  		[
  			4368
  		]
  	],
  	[
  		[
  			65469,
  			65469
  		],
  		"mapped",
  		[
  			4369
  		]
  	],
  	[
  		[
  			65470,
  			65470
  		],
  		"mapped",
  		[
  			4370
  		]
  	],
  	[
  		[
  			65471,
  			65473
  		],
  		"disallowed"
  	],
  	[
  		[
  			65474,
  			65474
  		],
  		"mapped",
  		[
  			4449
  		]
  	],
  	[
  		[
  			65475,
  			65475
  		],
  		"mapped",
  		[
  			4450
  		]
  	],
  	[
  		[
  			65476,
  			65476
  		],
  		"mapped",
  		[
  			4451
  		]
  	],
  	[
  		[
  			65477,
  			65477
  		],
  		"mapped",
  		[
  			4452
  		]
  	],
  	[
  		[
  			65478,
  			65478
  		],
  		"mapped",
  		[
  			4453
  		]
  	],
  	[
  		[
  			65479,
  			65479
  		],
  		"mapped",
  		[
  			4454
  		]
  	],
  	[
  		[
  			65480,
  			65481
  		],
  		"disallowed"
  	],
  	[
  		[
  			65482,
  			65482
  		],
  		"mapped",
  		[
  			4455
  		]
  	],
  	[
  		[
  			65483,
  			65483
  		],
  		"mapped",
  		[
  			4456
  		]
  	],
  	[
  		[
  			65484,
  			65484
  		],
  		"mapped",
  		[
  			4457
  		]
  	],
  	[
  		[
  			65485,
  			65485
  		],
  		"mapped",
  		[
  			4458
  		]
  	],
  	[
  		[
  			65486,
  			65486
  		],
  		"mapped",
  		[
  			4459
  		]
  	],
  	[
  		[
  			65487,
  			65487
  		],
  		"mapped",
  		[
  			4460
  		]
  	],
  	[
  		[
  			65488,
  			65489
  		],
  		"disallowed"
  	],
  	[
  		[
  			65490,
  			65490
  		],
  		"mapped",
  		[
  			4461
  		]
  	],
  	[
  		[
  			65491,
  			65491
  		],
  		"mapped",
  		[
  			4462
  		]
  	],
  	[
  		[
  			65492,
  			65492
  		],
  		"mapped",
  		[
  			4463
  		]
  	],
  	[
  		[
  			65493,
  			65493
  		],
  		"mapped",
  		[
  			4464
  		]
  	],
  	[
  		[
  			65494,
  			65494
  		],
  		"mapped",
  		[
  			4465
  		]
  	],
  	[
  		[
  			65495,
  			65495
  		],
  		"mapped",
  		[
  			4466
  		]
  	],
  	[
  		[
  			65496,
  			65497
  		],
  		"disallowed"
  	],
  	[
  		[
  			65498,
  			65498
  		],
  		"mapped",
  		[
  			4467
  		]
  	],
  	[
  		[
  			65499,
  			65499
  		],
  		"mapped",
  		[
  			4468
  		]
  	],
  	[
  		[
  			65500,
  			65500
  		],
  		"mapped",
  		[
  			4469
  		]
  	],
  	[
  		[
  			65501,
  			65503
  		],
  		"disallowed"
  	],
  	[
  		[
  			65504,
  			65504
  		],
  		"mapped",
  		[
  			162
  		]
  	],
  	[
  		[
  			65505,
  			65505
  		],
  		"mapped",
  		[
  			163
  		]
  	],
  	[
  		[
  			65506,
  			65506
  		],
  		"mapped",
  		[
  			172
  		]
  	],
  	[
  		[
  			65507,
  			65507
  		],
  		"disallowed_STD3_mapped",
  		[
  			32,
  			772
  		]
  	],
  	[
  		[
  			65508,
  			65508
  		],
  		"mapped",
  		[
  			166
  		]
  	],
  	[
  		[
  			65509,
  			65509
  		],
  		"mapped",
  		[
  			165
  		]
  	],
  	[
  		[
  			65510,
  			65510
  		],
  		"mapped",
  		[
  			8361
  		]
  	],
  	[
  		[
  			65511,
  			65511
  		],
  		"disallowed"
  	],
  	[
  		[
  			65512,
  			65512
  		],
  		"mapped",
  		[
  			9474
  		]
  	],
  	[
  		[
  			65513,
  			65513
  		],
  		"mapped",
  		[
  			8592
  		]
  	],
  	[
  		[
  			65514,
  			65514
  		],
  		"mapped",
  		[
  			8593
  		]
  	],
  	[
  		[
  			65515,
  			65515
  		],
  		"mapped",
  		[
  			8594
  		]
  	],
  	[
  		[
  			65516,
  			65516
  		],
  		"mapped",
  		[
  			8595
  		]
  	],
  	[
  		[
  			65517,
  			65517
  		],
  		"mapped",
  		[
  			9632
  		]
  	],
  	[
  		[
  			65518,
  			65518
  		],
  		"mapped",
  		[
  			9675
  		]
  	],
  	[
  		[
  			65519,
  			65528
  		],
  		"disallowed"
  	],
  	[
  		[
  			65529,
  			65531
  		],
  		"disallowed"
  	],
  	[
  		[
  			65532,
  			65532
  		],
  		"disallowed"
  	],
  	[
  		[
  			65533,
  			65533
  		],
  		"disallowed"
  	],
  	[
  		[
  			65534,
  			65535
  		],
  		"disallowed"
  	],
  	[
  		[
  			65536,
  			65547
  		],
  		"valid"
  	],
  	[
  		[
  			65548,
  			65548
  		],
  		"disallowed"
  	],
  	[
  		[
  			65549,
  			65574
  		],
  		"valid"
  	],
  	[
  		[
  			65575,
  			65575
  		],
  		"disallowed"
  	],
  	[
  		[
  			65576,
  			65594
  		],
  		"valid"
  	],
  	[
  		[
  			65595,
  			65595
  		],
  		"disallowed"
  	],
  	[
  		[
  			65596,
  			65597
  		],
  		"valid"
  	],
  	[
  		[
  			65598,
  			65598
  		],
  		"disallowed"
  	],
  	[
  		[
  			65599,
  			65613
  		],
  		"valid"
  	],
  	[
  		[
  			65614,
  			65615
  		],
  		"disallowed"
  	],
  	[
  		[
  			65616,
  			65629
  		],
  		"valid"
  	],
  	[
  		[
  			65630,
  			65663
  		],
  		"disallowed"
  	],
  	[
  		[
  			65664,
  			65786
  		],
  		"valid"
  	],
  	[
  		[
  			65787,
  			65791
  		],
  		"disallowed"
  	],
  	[
  		[
  			65792,
  			65794
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			65795,
  			65798
  		],
  		"disallowed"
  	],
  	[
  		[
  			65799,
  			65843
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			65844,
  			65846
  		],
  		"disallowed"
  	],
  	[
  		[
  			65847,
  			65855
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			65856,
  			65930
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			65931,
  			65932
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			65933,
  			65935
  		],
  		"disallowed"
  	],
  	[
  		[
  			65936,
  			65947
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			65948,
  			65951
  		],
  		"disallowed"
  	],
  	[
  		[
  			65952,
  			65952
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			65953,
  			65999
  		],
  		"disallowed"
  	],
  	[
  		[
  			66000,
  			66044
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			66045,
  			66045
  		],
  		"valid"
  	],
  	[
  		[
  			66046,
  			66175
  		],
  		"disallowed"
  	],
  	[
  		[
  			66176,
  			66204
  		],
  		"valid"
  	],
  	[
  		[
  			66205,
  			66207
  		],
  		"disallowed"
  	],
  	[
  		[
  			66208,
  			66256
  		],
  		"valid"
  	],
  	[
  		[
  			66257,
  			66271
  		],
  		"disallowed"
  	],
  	[
  		[
  			66272,
  			66272
  		],
  		"valid"
  	],
  	[
  		[
  			66273,
  			66299
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			66300,
  			66303
  		],
  		"disallowed"
  	],
  	[
  		[
  			66304,
  			66334
  		],
  		"valid"
  	],
  	[
  		[
  			66335,
  			66335
  		],
  		"valid"
  	],
  	[
  		[
  			66336,
  			66339
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			66340,
  			66351
  		],
  		"disallowed"
  	],
  	[
  		[
  			66352,
  			66368
  		],
  		"valid"
  	],
  	[
  		[
  			66369,
  			66369
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			66370,
  			66377
  		],
  		"valid"
  	],
  	[
  		[
  			66378,
  			66378
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			66379,
  			66383
  		],
  		"disallowed"
  	],
  	[
  		[
  			66384,
  			66426
  		],
  		"valid"
  	],
  	[
  		[
  			66427,
  			66431
  		],
  		"disallowed"
  	],
  	[
  		[
  			66432,
  			66461
  		],
  		"valid"
  	],
  	[
  		[
  			66462,
  			66462
  		],
  		"disallowed"
  	],
  	[
  		[
  			66463,
  			66463
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			66464,
  			66499
  		],
  		"valid"
  	],
  	[
  		[
  			66500,
  			66503
  		],
  		"disallowed"
  	],
  	[
  		[
  			66504,
  			66511
  		],
  		"valid"
  	],
  	[
  		[
  			66512,
  			66517
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			66518,
  			66559
  		],
  		"disallowed"
  	],
  	[
  		[
  			66560,
  			66560
  		],
  		"mapped",
  		[
  			66600
  		]
  	],
  	[
  		[
  			66561,
  			66561
  		],
  		"mapped",
  		[
  			66601
  		]
  	],
  	[
  		[
  			66562,
  			66562
  		],
  		"mapped",
  		[
  			66602
  		]
  	],
  	[
  		[
  			66563,
  			66563
  		],
  		"mapped",
  		[
  			66603
  		]
  	],
  	[
  		[
  			66564,
  			66564
  		],
  		"mapped",
  		[
  			66604
  		]
  	],
  	[
  		[
  			66565,
  			66565
  		],
  		"mapped",
  		[
  			66605
  		]
  	],
  	[
  		[
  			66566,
  			66566
  		],
  		"mapped",
  		[
  			66606
  		]
  	],
  	[
  		[
  			66567,
  			66567
  		],
  		"mapped",
  		[
  			66607
  		]
  	],
  	[
  		[
  			66568,
  			66568
  		],
  		"mapped",
  		[
  			66608
  		]
  	],
  	[
  		[
  			66569,
  			66569
  		],
  		"mapped",
  		[
  			66609
  		]
  	],
  	[
  		[
  			66570,
  			66570
  		],
  		"mapped",
  		[
  			66610
  		]
  	],
  	[
  		[
  			66571,
  			66571
  		],
  		"mapped",
  		[
  			66611
  		]
  	],
  	[
  		[
  			66572,
  			66572
  		],
  		"mapped",
  		[
  			66612
  		]
  	],
  	[
  		[
  			66573,
  			66573
  		],
  		"mapped",
  		[
  			66613
  		]
  	],
  	[
  		[
  			66574,
  			66574
  		],
  		"mapped",
  		[
  			66614
  		]
  	],
  	[
  		[
  			66575,
  			66575
  		],
  		"mapped",
  		[
  			66615
  		]
  	],
  	[
  		[
  			66576,
  			66576
  		],
  		"mapped",
  		[
  			66616
  		]
  	],
  	[
  		[
  			66577,
  			66577
  		],
  		"mapped",
  		[
  			66617
  		]
  	],
  	[
  		[
  			66578,
  			66578
  		],
  		"mapped",
  		[
  			66618
  		]
  	],
  	[
  		[
  			66579,
  			66579
  		],
  		"mapped",
  		[
  			66619
  		]
  	],
  	[
  		[
  			66580,
  			66580
  		],
  		"mapped",
  		[
  			66620
  		]
  	],
  	[
  		[
  			66581,
  			66581
  		],
  		"mapped",
  		[
  			66621
  		]
  	],
  	[
  		[
  			66582,
  			66582
  		],
  		"mapped",
  		[
  			66622
  		]
  	],
  	[
  		[
  			66583,
  			66583
  		],
  		"mapped",
  		[
  			66623
  		]
  	],
  	[
  		[
  			66584,
  			66584
  		],
  		"mapped",
  		[
  			66624
  		]
  	],
  	[
  		[
  			66585,
  			66585
  		],
  		"mapped",
  		[
  			66625
  		]
  	],
  	[
  		[
  			66586,
  			66586
  		],
  		"mapped",
  		[
  			66626
  		]
  	],
  	[
  		[
  			66587,
  			66587
  		],
  		"mapped",
  		[
  			66627
  		]
  	],
  	[
  		[
  			66588,
  			66588
  		],
  		"mapped",
  		[
  			66628
  		]
  	],
  	[
  		[
  			66589,
  			66589
  		],
  		"mapped",
  		[
  			66629
  		]
  	],
  	[
  		[
  			66590,
  			66590
  		],
  		"mapped",
  		[
  			66630
  		]
  	],
  	[
  		[
  			66591,
  			66591
  		],
  		"mapped",
  		[
  			66631
  		]
  	],
  	[
  		[
  			66592,
  			66592
  		],
  		"mapped",
  		[
  			66632
  		]
  	],
  	[
  		[
  			66593,
  			66593
  		],
  		"mapped",
  		[
  			66633
  		]
  	],
  	[
  		[
  			66594,
  			66594
  		],
  		"mapped",
  		[
  			66634
  		]
  	],
  	[
  		[
  			66595,
  			66595
  		],
  		"mapped",
  		[
  			66635
  		]
  	],
  	[
  		[
  			66596,
  			66596
  		],
  		"mapped",
  		[
  			66636
  		]
  	],
  	[
  		[
  			66597,
  			66597
  		],
  		"mapped",
  		[
  			66637
  		]
  	],
  	[
  		[
  			66598,
  			66598
  		],
  		"mapped",
  		[
  			66638
  		]
  	],
  	[
  		[
  			66599,
  			66599
  		],
  		"mapped",
  		[
  			66639
  		]
  	],
  	[
  		[
  			66600,
  			66637
  		],
  		"valid"
  	],
  	[
  		[
  			66638,
  			66717
  		],
  		"valid"
  	],
  	[
  		[
  			66718,
  			66719
  		],
  		"disallowed"
  	],
  	[
  		[
  			66720,
  			66729
  		],
  		"valid"
  	],
  	[
  		[
  			66730,
  			66815
  		],
  		"disallowed"
  	],
  	[
  		[
  			66816,
  			66855
  		],
  		"valid"
  	],
  	[
  		[
  			66856,
  			66863
  		],
  		"disallowed"
  	],
  	[
  		[
  			66864,
  			66915
  		],
  		"valid"
  	],
  	[
  		[
  			66916,
  			66926
  		],
  		"disallowed"
  	],
  	[
  		[
  			66927,
  			66927
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			66928,
  			67071
  		],
  		"disallowed"
  	],
  	[
  		[
  			67072,
  			67382
  		],
  		"valid"
  	],
  	[
  		[
  			67383,
  			67391
  		],
  		"disallowed"
  	],
  	[
  		[
  			67392,
  			67413
  		],
  		"valid"
  	],
  	[
  		[
  			67414,
  			67423
  		],
  		"disallowed"
  	],
  	[
  		[
  			67424,
  			67431
  		],
  		"valid"
  	],
  	[
  		[
  			67432,
  			67583
  		],
  		"disallowed"
  	],
  	[
  		[
  			67584,
  			67589
  		],
  		"valid"
  	],
  	[
  		[
  			67590,
  			67591
  		],
  		"disallowed"
  	],
  	[
  		[
  			67592,
  			67592
  		],
  		"valid"
  	],
  	[
  		[
  			67593,
  			67593
  		],
  		"disallowed"
  	],
  	[
  		[
  			67594,
  			67637
  		],
  		"valid"
  	],
  	[
  		[
  			67638,
  			67638
  		],
  		"disallowed"
  	],
  	[
  		[
  			67639,
  			67640
  		],
  		"valid"
  	],
  	[
  		[
  			67641,
  			67643
  		],
  		"disallowed"
  	],
  	[
  		[
  			67644,
  			67644
  		],
  		"valid"
  	],
  	[
  		[
  			67645,
  			67646
  		],
  		"disallowed"
  	],
  	[
  		[
  			67647,
  			67647
  		],
  		"valid"
  	],
  	[
  		[
  			67648,
  			67669
  		],
  		"valid"
  	],
  	[
  		[
  			67670,
  			67670
  		],
  		"disallowed"
  	],
  	[
  		[
  			67671,
  			67679
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			67680,
  			67702
  		],
  		"valid"
  	],
  	[
  		[
  			67703,
  			67711
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			67712,
  			67742
  		],
  		"valid"
  	],
  	[
  		[
  			67743,
  			67750
  		],
  		"disallowed"
  	],
  	[
  		[
  			67751,
  			67759
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			67760,
  			67807
  		],
  		"disallowed"
  	],
  	[
  		[
  			67808,
  			67826
  		],
  		"valid"
  	],
  	[
  		[
  			67827,
  			67827
  		],
  		"disallowed"
  	],
  	[
  		[
  			67828,
  			67829
  		],
  		"valid"
  	],
  	[
  		[
  			67830,
  			67834
  		],
  		"disallowed"
  	],
  	[
  		[
  			67835,
  			67839
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			67840,
  			67861
  		],
  		"valid"
  	],
  	[
  		[
  			67862,
  			67865
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			67866,
  			67867
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			67868,
  			67870
  		],
  		"disallowed"
  	],
  	[
  		[
  			67871,
  			67871
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			67872,
  			67897
  		],
  		"valid"
  	],
  	[
  		[
  			67898,
  			67902
  		],
  		"disallowed"
  	],
  	[
  		[
  			67903,
  			67903
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			67904,
  			67967
  		],
  		"disallowed"
  	],
  	[
  		[
  			67968,
  			68023
  		],
  		"valid"
  	],
  	[
  		[
  			68024,
  			68027
  		],
  		"disallowed"
  	],
  	[
  		[
  			68028,
  			68029
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			68030,
  			68031
  		],
  		"valid"
  	],
  	[
  		[
  			68032,
  			68047
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			68048,
  			68049
  		],
  		"disallowed"
  	],
  	[
  		[
  			68050,
  			68095
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			68096,
  			68099
  		],
  		"valid"
  	],
  	[
  		[
  			68100,
  			68100
  		],
  		"disallowed"
  	],
  	[
  		[
  			68101,
  			68102
  		],
  		"valid"
  	],
  	[
  		[
  			68103,
  			68107
  		],
  		"disallowed"
  	],
  	[
  		[
  			68108,
  			68115
  		],
  		"valid"
  	],
  	[
  		[
  			68116,
  			68116
  		],
  		"disallowed"
  	],
  	[
  		[
  			68117,
  			68119
  		],
  		"valid"
  	],
  	[
  		[
  			68120,
  			68120
  		],
  		"disallowed"
  	],
  	[
  		[
  			68121,
  			68147
  		],
  		"valid"
  	],
  	[
  		[
  			68148,
  			68151
  		],
  		"disallowed"
  	],
  	[
  		[
  			68152,
  			68154
  		],
  		"valid"
  	],
  	[
  		[
  			68155,
  			68158
  		],
  		"disallowed"
  	],
  	[
  		[
  			68159,
  			68159
  		],
  		"valid"
  	],
  	[
  		[
  			68160,
  			68167
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			68168,
  			68175
  		],
  		"disallowed"
  	],
  	[
  		[
  			68176,
  			68184
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			68185,
  			68191
  		],
  		"disallowed"
  	],
  	[
  		[
  			68192,
  			68220
  		],
  		"valid"
  	],
  	[
  		[
  			68221,
  			68223
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			68224,
  			68252
  		],
  		"valid"
  	],
  	[
  		[
  			68253,
  			68255
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			68256,
  			68287
  		],
  		"disallowed"
  	],
  	[
  		[
  			68288,
  			68295
  		],
  		"valid"
  	],
  	[
  		[
  			68296,
  			68296
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			68297,
  			68326
  		],
  		"valid"
  	],
  	[
  		[
  			68327,
  			68330
  		],
  		"disallowed"
  	],
  	[
  		[
  			68331,
  			68342
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			68343,
  			68351
  		],
  		"disallowed"
  	],
  	[
  		[
  			68352,
  			68405
  		],
  		"valid"
  	],
  	[
  		[
  			68406,
  			68408
  		],
  		"disallowed"
  	],
  	[
  		[
  			68409,
  			68415
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			68416,
  			68437
  		],
  		"valid"
  	],
  	[
  		[
  			68438,
  			68439
  		],
  		"disallowed"
  	],
  	[
  		[
  			68440,
  			68447
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			68448,
  			68466
  		],
  		"valid"
  	],
  	[
  		[
  			68467,
  			68471
  		],
  		"disallowed"
  	],
  	[
  		[
  			68472,
  			68479
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			68480,
  			68497
  		],
  		"valid"
  	],
  	[
  		[
  			68498,
  			68504
  		],
  		"disallowed"
  	],
  	[
  		[
  			68505,
  			68508
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			68509,
  			68520
  		],
  		"disallowed"
  	],
  	[
  		[
  			68521,
  			68527
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			68528,
  			68607
  		],
  		"disallowed"
  	],
  	[
  		[
  			68608,
  			68680
  		],
  		"valid"
  	],
  	[
  		[
  			68681,
  			68735
  		],
  		"disallowed"
  	],
  	[
  		[
  			68736,
  			68736
  		],
  		"mapped",
  		[
  			68800
  		]
  	],
  	[
  		[
  			68737,
  			68737
  		],
  		"mapped",
  		[
  			68801
  		]
  	],
  	[
  		[
  			68738,
  			68738
  		],
  		"mapped",
  		[
  			68802
  		]
  	],
  	[
  		[
  			68739,
  			68739
  		],
  		"mapped",
  		[
  			68803
  		]
  	],
  	[
  		[
  			68740,
  			68740
  		],
  		"mapped",
  		[
  			68804
  		]
  	],
  	[
  		[
  			68741,
  			68741
  		],
  		"mapped",
  		[
  			68805
  		]
  	],
  	[
  		[
  			68742,
  			68742
  		],
  		"mapped",
  		[
  			68806
  		]
  	],
  	[
  		[
  			68743,
  			68743
  		],
  		"mapped",
  		[
  			68807
  		]
  	],
  	[
  		[
  			68744,
  			68744
  		],
  		"mapped",
  		[
  			68808
  		]
  	],
  	[
  		[
  			68745,
  			68745
  		],
  		"mapped",
  		[
  			68809
  		]
  	],
  	[
  		[
  			68746,
  			68746
  		],
  		"mapped",
  		[
  			68810
  		]
  	],
  	[
  		[
  			68747,
  			68747
  		],
  		"mapped",
  		[
  			68811
  		]
  	],
  	[
  		[
  			68748,
  			68748
  		],
  		"mapped",
  		[
  			68812
  		]
  	],
  	[
  		[
  			68749,
  			68749
  		],
  		"mapped",
  		[
  			68813
  		]
  	],
  	[
  		[
  			68750,
  			68750
  		],
  		"mapped",
  		[
  			68814
  		]
  	],
  	[
  		[
  			68751,
  			68751
  		],
  		"mapped",
  		[
  			68815
  		]
  	],
  	[
  		[
  			68752,
  			68752
  		],
  		"mapped",
  		[
  			68816
  		]
  	],
  	[
  		[
  			68753,
  			68753
  		],
  		"mapped",
  		[
  			68817
  		]
  	],
  	[
  		[
  			68754,
  			68754
  		],
  		"mapped",
  		[
  			68818
  		]
  	],
  	[
  		[
  			68755,
  			68755
  		],
  		"mapped",
  		[
  			68819
  		]
  	],
  	[
  		[
  			68756,
  			68756
  		],
  		"mapped",
  		[
  			68820
  		]
  	],
  	[
  		[
  			68757,
  			68757
  		],
  		"mapped",
  		[
  			68821
  		]
  	],
  	[
  		[
  			68758,
  			68758
  		],
  		"mapped",
  		[
  			68822
  		]
  	],
  	[
  		[
  			68759,
  			68759
  		],
  		"mapped",
  		[
  			68823
  		]
  	],
  	[
  		[
  			68760,
  			68760
  		],
  		"mapped",
  		[
  			68824
  		]
  	],
  	[
  		[
  			68761,
  			68761
  		],
  		"mapped",
  		[
  			68825
  		]
  	],
  	[
  		[
  			68762,
  			68762
  		],
  		"mapped",
  		[
  			68826
  		]
  	],
  	[
  		[
  			68763,
  			68763
  		],
  		"mapped",
  		[
  			68827
  		]
  	],
  	[
  		[
  			68764,
  			68764
  		],
  		"mapped",
  		[
  			68828
  		]
  	],
  	[
  		[
  			68765,
  			68765
  		],
  		"mapped",
  		[
  			68829
  		]
  	],
  	[
  		[
  			68766,
  			68766
  		],
  		"mapped",
  		[
  			68830
  		]
  	],
  	[
  		[
  			68767,
  			68767
  		],
  		"mapped",
  		[
  			68831
  		]
  	],
  	[
  		[
  			68768,
  			68768
  		],
  		"mapped",
  		[
  			68832
  		]
  	],
  	[
  		[
  			68769,
  			68769
  		],
  		"mapped",
  		[
  			68833
  		]
  	],
  	[
  		[
  			68770,
  			68770
  		],
  		"mapped",
  		[
  			68834
  		]
  	],
  	[
  		[
  			68771,
  			68771
  		],
  		"mapped",
  		[
  			68835
  		]
  	],
  	[
  		[
  			68772,
  			68772
  		],
  		"mapped",
  		[
  			68836
  		]
  	],
  	[
  		[
  			68773,
  			68773
  		],
  		"mapped",
  		[
  			68837
  		]
  	],
  	[
  		[
  			68774,
  			68774
  		],
  		"mapped",
  		[
  			68838
  		]
  	],
  	[
  		[
  			68775,
  			68775
  		],
  		"mapped",
  		[
  			68839
  		]
  	],
  	[
  		[
  			68776,
  			68776
  		],
  		"mapped",
  		[
  			68840
  		]
  	],
  	[
  		[
  			68777,
  			68777
  		],
  		"mapped",
  		[
  			68841
  		]
  	],
  	[
  		[
  			68778,
  			68778
  		],
  		"mapped",
  		[
  			68842
  		]
  	],
  	[
  		[
  			68779,
  			68779
  		],
  		"mapped",
  		[
  			68843
  		]
  	],
  	[
  		[
  			68780,
  			68780
  		],
  		"mapped",
  		[
  			68844
  		]
  	],
  	[
  		[
  			68781,
  			68781
  		],
  		"mapped",
  		[
  			68845
  		]
  	],
  	[
  		[
  			68782,
  			68782
  		],
  		"mapped",
  		[
  			68846
  		]
  	],
  	[
  		[
  			68783,
  			68783
  		],
  		"mapped",
  		[
  			68847
  		]
  	],
  	[
  		[
  			68784,
  			68784
  		],
  		"mapped",
  		[
  			68848
  		]
  	],
  	[
  		[
  			68785,
  			68785
  		],
  		"mapped",
  		[
  			68849
  		]
  	],
  	[
  		[
  			68786,
  			68786
  		],
  		"mapped",
  		[
  			68850
  		]
  	],
  	[
  		[
  			68787,
  			68799
  		],
  		"disallowed"
  	],
  	[
  		[
  			68800,
  			68850
  		],
  		"valid"
  	],
  	[
  		[
  			68851,
  			68857
  		],
  		"disallowed"
  	],
  	[
  		[
  			68858,
  			68863
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			68864,
  			69215
  		],
  		"disallowed"
  	],
  	[
  		[
  			69216,
  			69246
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			69247,
  			69631
  		],
  		"disallowed"
  	],
  	[
  		[
  			69632,
  			69702
  		],
  		"valid"
  	],
  	[
  		[
  			69703,
  			69709
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			69710,
  			69713
  		],
  		"disallowed"
  	],
  	[
  		[
  			69714,
  			69733
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			69734,
  			69743
  		],
  		"valid"
  	],
  	[
  		[
  			69744,
  			69758
  		],
  		"disallowed"
  	],
  	[
  		[
  			69759,
  			69759
  		],
  		"valid"
  	],
  	[
  		[
  			69760,
  			69818
  		],
  		"valid"
  	],
  	[
  		[
  			69819,
  			69820
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			69821,
  			69821
  		],
  		"disallowed"
  	],
  	[
  		[
  			69822,
  			69825
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			69826,
  			69839
  		],
  		"disallowed"
  	],
  	[
  		[
  			69840,
  			69864
  		],
  		"valid"
  	],
  	[
  		[
  			69865,
  			69871
  		],
  		"disallowed"
  	],
  	[
  		[
  			69872,
  			69881
  		],
  		"valid"
  	],
  	[
  		[
  			69882,
  			69887
  		],
  		"disallowed"
  	],
  	[
  		[
  			69888,
  			69940
  		],
  		"valid"
  	],
  	[
  		[
  			69941,
  			69941
  		],
  		"disallowed"
  	],
  	[
  		[
  			69942,
  			69951
  		],
  		"valid"
  	],
  	[
  		[
  			69952,
  			69955
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			69956,
  			69967
  		],
  		"disallowed"
  	],
  	[
  		[
  			69968,
  			70003
  		],
  		"valid"
  	],
  	[
  		[
  			70004,
  			70005
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			70006,
  			70006
  		],
  		"valid"
  	],
  	[
  		[
  			70007,
  			70015
  		],
  		"disallowed"
  	],
  	[
  		[
  			70016,
  			70084
  		],
  		"valid"
  	],
  	[
  		[
  			70085,
  			70088
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			70089,
  			70089
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			70090,
  			70092
  		],
  		"valid"
  	],
  	[
  		[
  			70093,
  			70093
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			70094,
  			70095
  		],
  		"disallowed"
  	],
  	[
  		[
  			70096,
  			70105
  		],
  		"valid"
  	],
  	[
  		[
  			70106,
  			70106
  		],
  		"valid"
  	],
  	[
  		[
  			70107,
  			70107
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			70108,
  			70108
  		],
  		"valid"
  	],
  	[
  		[
  			70109,
  			70111
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			70112,
  			70112
  		],
  		"disallowed"
  	],
  	[
  		[
  			70113,
  			70132
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			70133,
  			70143
  		],
  		"disallowed"
  	],
  	[
  		[
  			70144,
  			70161
  		],
  		"valid"
  	],
  	[
  		[
  			70162,
  			70162
  		],
  		"disallowed"
  	],
  	[
  		[
  			70163,
  			70199
  		],
  		"valid"
  	],
  	[
  		[
  			70200,
  			70205
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			70206,
  			70271
  		],
  		"disallowed"
  	],
  	[
  		[
  			70272,
  			70278
  		],
  		"valid"
  	],
  	[
  		[
  			70279,
  			70279
  		],
  		"disallowed"
  	],
  	[
  		[
  			70280,
  			70280
  		],
  		"valid"
  	],
  	[
  		[
  			70281,
  			70281
  		],
  		"disallowed"
  	],
  	[
  		[
  			70282,
  			70285
  		],
  		"valid"
  	],
  	[
  		[
  			70286,
  			70286
  		],
  		"disallowed"
  	],
  	[
  		[
  			70287,
  			70301
  		],
  		"valid"
  	],
  	[
  		[
  			70302,
  			70302
  		],
  		"disallowed"
  	],
  	[
  		[
  			70303,
  			70312
  		],
  		"valid"
  	],
  	[
  		[
  			70313,
  			70313
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			70314,
  			70319
  		],
  		"disallowed"
  	],
  	[
  		[
  			70320,
  			70378
  		],
  		"valid"
  	],
  	[
  		[
  			70379,
  			70383
  		],
  		"disallowed"
  	],
  	[
  		[
  			70384,
  			70393
  		],
  		"valid"
  	],
  	[
  		[
  			70394,
  			70399
  		],
  		"disallowed"
  	],
  	[
  		[
  			70400,
  			70400
  		],
  		"valid"
  	],
  	[
  		[
  			70401,
  			70403
  		],
  		"valid"
  	],
  	[
  		[
  			70404,
  			70404
  		],
  		"disallowed"
  	],
  	[
  		[
  			70405,
  			70412
  		],
  		"valid"
  	],
  	[
  		[
  			70413,
  			70414
  		],
  		"disallowed"
  	],
  	[
  		[
  			70415,
  			70416
  		],
  		"valid"
  	],
  	[
  		[
  			70417,
  			70418
  		],
  		"disallowed"
  	],
  	[
  		[
  			70419,
  			70440
  		],
  		"valid"
  	],
  	[
  		[
  			70441,
  			70441
  		],
  		"disallowed"
  	],
  	[
  		[
  			70442,
  			70448
  		],
  		"valid"
  	],
  	[
  		[
  			70449,
  			70449
  		],
  		"disallowed"
  	],
  	[
  		[
  			70450,
  			70451
  		],
  		"valid"
  	],
  	[
  		[
  			70452,
  			70452
  		],
  		"disallowed"
  	],
  	[
  		[
  			70453,
  			70457
  		],
  		"valid"
  	],
  	[
  		[
  			70458,
  			70459
  		],
  		"disallowed"
  	],
  	[
  		[
  			70460,
  			70468
  		],
  		"valid"
  	],
  	[
  		[
  			70469,
  			70470
  		],
  		"disallowed"
  	],
  	[
  		[
  			70471,
  			70472
  		],
  		"valid"
  	],
  	[
  		[
  			70473,
  			70474
  		],
  		"disallowed"
  	],
  	[
  		[
  			70475,
  			70477
  		],
  		"valid"
  	],
  	[
  		[
  			70478,
  			70479
  		],
  		"disallowed"
  	],
  	[
  		[
  			70480,
  			70480
  		],
  		"valid"
  	],
  	[
  		[
  			70481,
  			70486
  		],
  		"disallowed"
  	],
  	[
  		[
  			70487,
  			70487
  		],
  		"valid"
  	],
  	[
  		[
  			70488,
  			70492
  		],
  		"disallowed"
  	],
  	[
  		[
  			70493,
  			70499
  		],
  		"valid"
  	],
  	[
  		[
  			70500,
  			70501
  		],
  		"disallowed"
  	],
  	[
  		[
  			70502,
  			70508
  		],
  		"valid"
  	],
  	[
  		[
  			70509,
  			70511
  		],
  		"disallowed"
  	],
  	[
  		[
  			70512,
  			70516
  		],
  		"valid"
  	],
  	[
  		[
  			70517,
  			70783
  		],
  		"disallowed"
  	],
  	[
  		[
  			70784,
  			70853
  		],
  		"valid"
  	],
  	[
  		[
  			70854,
  			70854
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			70855,
  			70855
  		],
  		"valid"
  	],
  	[
  		[
  			70856,
  			70863
  		],
  		"disallowed"
  	],
  	[
  		[
  			70864,
  			70873
  		],
  		"valid"
  	],
  	[
  		[
  			70874,
  			71039
  		],
  		"disallowed"
  	],
  	[
  		[
  			71040,
  			71093
  		],
  		"valid"
  	],
  	[
  		[
  			71094,
  			71095
  		],
  		"disallowed"
  	],
  	[
  		[
  			71096,
  			71104
  		],
  		"valid"
  	],
  	[
  		[
  			71105,
  			71113
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			71114,
  			71127
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			71128,
  			71133
  		],
  		"valid"
  	],
  	[
  		[
  			71134,
  			71167
  		],
  		"disallowed"
  	],
  	[
  		[
  			71168,
  			71232
  		],
  		"valid"
  	],
  	[
  		[
  			71233,
  			71235
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			71236,
  			71236
  		],
  		"valid"
  	],
  	[
  		[
  			71237,
  			71247
  		],
  		"disallowed"
  	],
  	[
  		[
  			71248,
  			71257
  		],
  		"valid"
  	],
  	[
  		[
  			71258,
  			71295
  		],
  		"disallowed"
  	],
  	[
  		[
  			71296,
  			71351
  		],
  		"valid"
  	],
  	[
  		[
  			71352,
  			71359
  		],
  		"disallowed"
  	],
  	[
  		[
  			71360,
  			71369
  		],
  		"valid"
  	],
  	[
  		[
  			71370,
  			71423
  		],
  		"disallowed"
  	],
  	[
  		[
  			71424,
  			71449
  		],
  		"valid"
  	],
  	[
  		[
  			71450,
  			71452
  		],
  		"disallowed"
  	],
  	[
  		[
  			71453,
  			71467
  		],
  		"valid"
  	],
  	[
  		[
  			71468,
  			71471
  		],
  		"disallowed"
  	],
  	[
  		[
  			71472,
  			71481
  		],
  		"valid"
  	],
  	[
  		[
  			71482,
  			71487
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			71488,
  			71839
  		],
  		"disallowed"
  	],
  	[
  		[
  			71840,
  			71840
  		],
  		"mapped",
  		[
  			71872
  		]
  	],
  	[
  		[
  			71841,
  			71841
  		],
  		"mapped",
  		[
  			71873
  		]
  	],
  	[
  		[
  			71842,
  			71842
  		],
  		"mapped",
  		[
  			71874
  		]
  	],
  	[
  		[
  			71843,
  			71843
  		],
  		"mapped",
  		[
  			71875
  		]
  	],
  	[
  		[
  			71844,
  			71844
  		],
  		"mapped",
  		[
  			71876
  		]
  	],
  	[
  		[
  			71845,
  			71845
  		],
  		"mapped",
  		[
  			71877
  		]
  	],
  	[
  		[
  			71846,
  			71846
  		],
  		"mapped",
  		[
  			71878
  		]
  	],
  	[
  		[
  			71847,
  			71847
  		],
  		"mapped",
  		[
  			71879
  		]
  	],
  	[
  		[
  			71848,
  			71848
  		],
  		"mapped",
  		[
  			71880
  		]
  	],
  	[
  		[
  			71849,
  			71849
  		],
  		"mapped",
  		[
  			71881
  		]
  	],
  	[
  		[
  			71850,
  			71850
  		],
  		"mapped",
  		[
  			71882
  		]
  	],
  	[
  		[
  			71851,
  			71851
  		],
  		"mapped",
  		[
  			71883
  		]
  	],
  	[
  		[
  			71852,
  			71852
  		],
  		"mapped",
  		[
  			71884
  		]
  	],
  	[
  		[
  			71853,
  			71853
  		],
  		"mapped",
  		[
  			71885
  		]
  	],
  	[
  		[
  			71854,
  			71854
  		],
  		"mapped",
  		[
  			71886
  		]
  	],
  	[
  		[
  			71855,
  			71855
  		],
  		"mapped",
  		[
  			71887
  		]
  	],
  	[
  		[
  			71856,
  			71856
  		],
  		"mapped",
  		[
  			71888
  		]
  	],
  	[
  		[
  			71857,
  			71857
  		],
  		"mapped",
  		[
  			71889
  		]
  	],
  	[
  		[
  			71858,
  			71858
  		],
  		"mapped",
  		[
  			71890
  		]
  	],
  	[
  		[
  			71859,
  			71859
  		],
  		"mapped",
  		[
  			71891
  		]
  	],
  	[
  		[
  			71860,
  			71860
  		],
  		"mapped",
  		[
  			71892
  		]
  	],
  	[
  		[
  			71861,
  			71861
  		],
  		"mapped",
  		[
  			71893
  		]
  	],
  	[
  		[
  			71862,
  			71862
  		],
  		"mapped",
  		[
  			71894
  		]
  	],
  	[
  		[
  			71863,
  			71863
  		],
  		"mapped",
  		[
  			71895
  		]
  	],
  	[
  		[
  			71864,
  			71864
  		],
  		"mapped",
  		[
  			71896
  		]
  	],
  	[
  		[
  			71865,
  			71865
  		],
  		"mapped",
  		[
  			71897
  		]
  	],
  	[
  		[
  			71866,
  			71866
  		],
  		"mapped",
  		[
  			71898
  		]
  	],
  	[
  		[
  			71867,
  			71867
  		],
  		"mapped",
  		[
  			71899
  		]
  	],
  	[
  		[
  			71868,
  			71868
  		],
  		"mapped",
  		[
  			71900
  		]
  	],
  	[
  		[
  			71869,
  			71869
  		],
  		"mapped",
  		[
  			71901
  		]
  	],
  	[
  		[
  			71870,
  			71870
  		],
  		"mapped",
  		[
  			71902
  		]
  	],
  	[
  		[
  			71871,
  			71871
  		],
  		"mapped",
  		[
  			71903
  		]
  	],
  	[
  		[
  			71872,
  			71913
  		],
  		"valid"
  	],
  	[
  		[
  			71914,
  			71922
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			71923,
  			71934
  		],
  		"disallowed"
  	],
  	[
  		[
  			71935,
  			71935
  		],
  		"valid"
  	],
  	[
  		[
  			71936,
  			72383
  		],
  		"disallowed"
  	],
  	[
  		[
  			72384,
  			72440
  		],
  		"valid"
  	],
  	[
  		[
  			72441,
  			73727
  		],
  		"disallowed"
  	],
  	[
  		[
  			73728,
  			74606
  		],
  		"valid"
  	],
  	[
  		[
  			74607,
  			74648
  		],
  		"valid"
  	],
  	[
  		[
  			74649,
  			74649
  		],
  		"valid"
  	],
  	[
  		[
  			74650,
  			74751
  		],
  		"disallowed"
  	],
  	[
  		[
  			74752,
  			74850
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			74851,
  			74862
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			74863,
  			74863
  		],
  		"disallowed"
  	],
  	[
  		[
  			74864,
  			74867
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			74868,
  			74868
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			74869,
  			74879
  		],
  		"disallowed"
  	],
  	[
  		[
  			74880,
  			75075
  		],
  		"valid"
  	],
  	[
  		[
  			75076,
  			77823
  		],
  		"disallowed"
  	],
  	[
  		[
  			77824,
  			78894
  		],
  		"valid"
  	],
  	[
  		[
  			78895,
  			82943
  		],
  		"disallowed"
  	],
  	[
  		[
  			82944,
  			83526
  		],
  		"valid"
  	],
  	[
  		[
  			83527,
  			92159
  		],
  		"disallowed"
  	],
  	[
  		[
  			92160,
  			92728
  		],
  		"valid"
  	],
  	[
  		[
  			92729,
  			92735
  		],
  		"disallowed"
  	],
  	[
  		[
  			92736,
  			92766
  		],
  		"valid"
  	],
  	[
  		[
  			92767,
  			92767
  		],
  		"disallowed"
  	],
  	[
  		[
  			92768,
  			92777
  		],
  		"valid"
  	],
  	[
  		[
  			92778,
  			92781
  		],
  		"disallowed"
  	],
  	[
  		[
  			92782,
  			92783
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			92784,
  			92879
  		],
  		"disallowed"
  	],
  	[
  		[
  			92880,
  			92909
  		],
  		"valid"
  	],
  	[
  		[
  			92910,
  			92911
  		],
  		"disallowed"
  	],
  	[
  		[
  			92912,
  			92916
  		],
  		"valid"
  	],
  	[
  		[
  			92917,
  			92917
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			92918,
  			92927
  		],
  		"disallowed"
  	],
  	[
  		[
  			92928,
  			92982
  		],
  		"valid"
  	],
  	[
  		[
  			92983,
  			92991
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			92992,
  			92995
  		],
  		"valid"
  	],
  	[
  		[
  			92996,
  			92997
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			92998,
  			93007
  		],
  		"disallowed"
  	],
  	[
  		[
  			93008,
  			93017
  		],
  		"valid"
  	],
  	[
  		[
  			93018,
  			93018
  		],
  		"disallowed"
  	],
  	[
  		[
  			93019,
  			93025
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			93026,
  			93026
  		],
  		"disallowed"
  	],
  	[
  		[
  			93027,
  			93047
  		],
  		"valid"
  	],
  	[
  		[
  			93048,
  			93052
  		],
  		"disallowed"
  	],
  	[
  		[
  			93053,
  			93071
  		],
  		"valid"
  	],
  	[
  		[
  			93072,
  			93951
  		],
  		"disallowed"
  	],
  	[
  		[
  			93952,
  			94020
  		],
  		"valid"
  	],
  	[
  		[
  			94021,
  			94031
  		],
  		"disallowed"
  	],
  	[
  		[
  			94032,
  			94078
  		],
  		"valid"
  	],
  	[
  		[
  			94079,
  			94094
  		],
  		"disallowed"
  	],
  	[
  		[
  			94095,
  			94111
  		],
  		"valid"
  	],
  	[
  		[
  			94112,
  			110591
  		],
  		"disallowed"
  	],
  	[
  		[
  			110592,
  			110593
  		],
  		"valid"
  	],
  	[
  		[
  			110594,
  			113663
  		],
  		"disallowed"
  	],
  	[
  		[
  			113664,
  			113770
  		],
  		"valid"
  	],
  	[
  		[
  			113771,
  			113775
  		],
  		"disallowed"
  	],
  	[
  		[
  			113776,
  			113788
  		],
  		"valid"
  	],
  	[
  		[
  			113789,
  			113791
  		],
  		"disallowed"
  	],
  	[
  		[
  			113792,
  			113800
  		],
  		"valid"
  	],
  	[
  		[
  			113801,
  			113807
  		],
  		"disallowed"
  	],
  	[
  		[
  			113808,
  			113817
  		],
  		"valid"
  	],
  	[
  		[
  			113818,
  			113819
  		],
  		"disallowed"
  	],
  	[
  		[
  			113820,
  			113820
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			113821,
  			113822
  		],
  		"valid"
  	],
  	[
  		[
  			113823,
  			113823
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			113824,
  			113827
  		],
  		"ignored"
  	],
  	[
  		[
  			113828,
  			118783
  		],
  		"disallowed"
  	],
  	[
  		[
  			118784,
  			119029
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			119030,
  			119039
  		],
  		"disallowed"
  	],
  	[
  		[
  			119040,
  			119078
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			119079,
  			119080
  		],
  		"disallowed"
  	],
  	[
  		[
  			119081,
  			119081
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			119082,
  			119133
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			119134,
  			119134
  		],
  		"mapped",
  		[
  			119127,
  			119141
  		]
  	],
  	[
  		[
  			119135,
  			119135
  		],
  		"mapped",
  		[
  			119128,
  			119141
  		]
  	],
  	[
  		[
  			119136,
  			119136
  		],
  		"mapped",
  		[
  			119128,
  			119141,
  			119150
  		]
  	],
  	[
  		[
  			119137,
  			119137
  		],
  		"mapped",
  		[
  			119128,
  			119141,
  			119151
  		]
  	],
  	[
  		[
  			119138,
  			119138
  		],
  		"mapped",
  		[
  			119128,
  			119141,
  			119152
  		]
  	],
  	[
  		[
  			119139,
  			119139
  		],
  		"mapped",
  		[
  			119128,
  			119141,
  			119153
  		]
  	],
  	[
  		[
  			119140,
  			119140
  		],
  		"mapped",
  		[
  			119128,
  			119141,
  			119154
  		]
  	],
  	[
  		[
  			119141,
  			119154
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			119155,
  			119162
  		],
  		"disallowed"
  	],
  	[
  		[
  			119163,
  			119226
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			119227,
  			119227
  		],
  		"mapped",
  		[
  			119225,
  			119141
  		]
  	],
  	[
  		[
  			119228,
  			119228
  		],
  		"mapped",
  		[
  			119226,
  			119141
  		]
  	],
  	[
  		[
  			119229,
  			119229
  		],
  		"mapped",
  		[
  			119225,
  			119141,
  			119150
  		]
  	],
  	[
  		[
  			119230,
  			119230
  		],
  		"mapped",
  		[
  			119226,
  			119141,
  			119150
  		]
  	],
  	[
  		[
  			119231,
  			119231
  		],
  		"mapped",
  		[
  			119225,
  			119141,
  			119151
  		]
  	],
  	[
  		[
  			119232,
  			119232
  		],
  		"mapped",
  		[
  			119226,
  			119141,
  			119151
  		]
  	],
  	[
  		[
  			119233,
  			119261
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			119262,
  			119272
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			119273,
  			119295
  		],
  		"disallowed"
  	],
  	[
  		[
  			119296,
  			119365
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			119366,
  			119551
  		],
  		"disallowed"
  	],
  	[
  		[
  			119552,
  			119638
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			119639,
  			119647
  		],
  		"disallowed"
  	],
  	[
  		[
  			119648,
  			119665
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			119666,
  			119807
  		],
  		"disallowed"
  	],
  	[
  		[
  			119808,
  			119808
  		],
  		"mapped",
  		[
  			97
  		]
  	],
  	[
  		[
  			119809,
  			119809
  		],
  		"mapped",
  		[
  			98
  		]
  	],
  	[
  		[
  			119810,
  			119810
  		],
  		"mapped",
  		[
  			99
  		]
  	],
  	[
  		[
  			119811,
  			119811
  		],
  		"mapped",
  		[
  			100
  		]
  	],
  	[
  		[
  			119812,
  			119812
  		],
  		"mapped",
  		[
  			101
  		]
  	],
  	[
  		[
  			119813,
  			119813
  		],
  		"mapped",
  		[
  			102
  		]
  	],
  	[
  		[
  			119814,
  			119814
  		],
  		"mapped",
  		[
  			103
  		]
  	],
  	[
  		[
  			119815,
  			119815
  		],
  		"mapped",
  		[
  			104
  		]
  	],
  	[
  		[
  			119816,
  			119816
  		],
  		"mapped",
  		[
  			105
  		]
  	],
  	[
  		[
  			119817,
  			119817
  		],
  		"mapped",
  		[
  			106
  		]
  	],
  	[
  		[
  			119818,
  			119818
  		],
  		"mapped",
  		[
  			107
  		]
  	],
  	[
  		[
  			119819,
  			119819
  		],
  		"mapped",
  		[
  			108
  		]
  	],
  	[
  		[
  			119820,
  			119820
  		],
  		"mapped",
  		[
  			109
  		]
  	],
  	[
  		[
  			119821,
  			119821
  		],
  		"mapped",
  		[
  			110
  		]
  	],
  	[
  		[
  			119822,
  			119822
  		],
  		"mapped",
  		[
  			111
  		]
  	],
  	[
  		[
  			119823,
  			119823
  		],
  		"mapped",
  		[
  			112
  		]
  	],
  	[
  		[
  			119824,
  			119824
  		],
  		"mapped",
  		[
  			113
  		]
  	],
  	[
  		[
  			119825,
  			119825
  		],
  		"mapped",
  		[
  			114
  		]
  	],
  	[
  		[
  			119826,
  			119826
  		],
  		"mapped",
  		[
  			115
  		]
  	],
  	[
  		[
  			119827,
  			119827
  		],
  		"mapped",
  		[
  			116
  		]
  	],
  	[
  		[
  			119828,
  			119828
  		],
  		"mapped",
  		[
  			117
  		]
  	],
  	[
  		[
  			119829,
  			119829
  		],
  		"mapped",
  		[
  			118
  		]
  	],
  	[
  		[
  			119830,
  			119830
  		],
  		"mapped",
  		[
  			119
  		]
  	],
  	[
  		[
  			119831,
  			119831
  		],
  		"mapped",
  		[
  			120
  		]
  	],
  	[
  		[
  			119832,
  			119832
  		],
  		"mapped",
  		[
  			121
  		]
  	],
  	[
  		[
  			119833,
  			119833
  		],
  		"mapped",
  		[
  			122
  		]
  	],
  	[
  		[
  			119834,
  			119834
  		],
  		"mapped",
  		[
  			97
  		]
  	],
  	[
  		[
  			119835,
  			119835
  		],
  		"mapped",
  		[
  			98
  		]
  	],
  	[
  		[
  			119836,
  			119836
  		],
  		"mapped",
  		[
  			99
  		]
  	],
  	[
  		[
  			119837,
  			119837
  		],
  		"mapped",
  		[
  			100
  		]
  	],
  	[
  		[
  			119838,
  			119838
  		],
  		"mapped",
  		[
  			101
  		]
  	],
  	[
  		[
  			119839,
  			119839
  		],
  		"mapped",
  		[
  			102
  		]
  	],
  	[
  		[
  			119840,
  			119840
  		],
  		"mapped",
  		[
  			103
  		]
  	],
  	[
  		[
  			119841,
  			119841
  		],
  		"mapped",
  		[
  			104
  		]
  	],
  	[
  		[
  			119842,
  			119842
  		],
  		"mapped",
  		[
  			105
  		]
  	],
  	[
  		[
  			119843,
  			119843
  		],
  		"mapped",
  		[
  			106
  		]
  	],
  	[
  		[
  			119844,
  			119844
  		],
  		"mapped",
  		[
  			107
  		]
  	],
  	[
  		[
  			119845,
  			119845
  		],
  		"mapped",
  		[
  			108
  		]
  	],
  	[
  		[
  			119846,
  			119846
  		],
  		"mapped",
  		[
  			109
  		]
  	],
  	[
  		[
  			119847,
  			119847
  		],
  		"mapped",
  		[
  			110
  		]
  	],
  	[
  		[
  			119848,
  			119848
  		],
  		"mapped",
  		[
  			111
  		]
  	],
  	[
  		[
  			119849,
  			119849
  		],
  		"mapped",
  		[
  			112
  		]
  	],
  	[
  		[
  			119850,
  			119850
  		],
  		"mapped",
  		[
  			113
  		]
  	],
  	[
  		[
  			119851,
  			119851
  		],
  		"mapped",
  		[
  			114
  		]
  	],
  	[
  		[
  			119852,
  			119852
  		],
  		"mapped",
  		[
  			115
  		]
  	],
  	[
  		[
  			119853,
  			119853
  		],
  		"mapped",
  		[
  			116
  		]
  	],
  	[
  		[
  			119854,
  			119854
  		],
  		"mapped",
  		[
  			117
  		]
  	],
  	[
  		[
  			119855,
  			119855
  		],
  		"mapped",
  		[
  			118
  		]
  	],
  	[
  		[
  			119856,
  			119856
  		],
  		"mapped",
  		[
  			119
  		]
  	],
  	[
  		[
  			119857,
  			119857
  		],
  		"mapped",
  		[
  			120
  		]
  	],
  	[
  		[
  			119858,
  			119858
  		],
  		"mapped",
  		[
  			121
  		]
  	],
  	[
  		[
  			119859,
  			119859
  		],
  		"mapped",
  		[
  			122
  		]
  	],
  	[
  		[
  			119860,
  			119860
  		],
  		"mapped",
  		[
  			97
  		]
  	],
  	[
  		[
  			119861,
  			119861
  		],
  		"mapped",
  		[
  			98
  		]
  	],
  	[
  		[
  			119862,
  			119862
  		],
  		"mapped",
  		[
  			99
  		]
  	],
  	[
  		[
  			119863,
  			119863
  		],
  		"mapped",
  		[
  			100
  		]
  	],
  	[
  		[
  			119864,
  			119864
  		],
  		"mapped",
  		[
  			101
  		]
  	],
  	[
  		[
  			119865,
  			119865
  		],
  		"mapped",
  		[
  			102
  		]
  	],
  	[
  		[
  			119866,
  			119866
  		],
  		"mapped",
  		[
  			103
  		]
  	],
  	[
  		[
  			119867,
  			119867
  		],
  		"mapped",
  		[
  			104
  		]
  	],
  	[
  		[
  			119868,
  			119868
  		],
  		"mapped",
  		[
  			105
  		]
  	],
  	[
  		[
  			119869,
  			119869
  		],
  		"mapped",
  		[
  			106
  		]
  	],
  	[
  		[
  			119870,
  			119870
  		],
  		"mapped",
  		[
  			107
  		]
  	],
  	[
  		[
  			119871,
  			119871
  		],
  		"mapped",
  		[
  			108
  		]
  	],
  	[
  		[
  			119872,
  			119872
  		],
  		"mapped",
  		[
  			109
  		]
  	],
  	[
  		[
  			119873,
  			119873
  		],
  		"mapped",
  		[
  			110
  		]
  	],
  	[
  		[
  			119874,
  			119874
  		],
  		"mapped",
  		[
  			111
  		]
  	],
  	[
  		[
  			119875,
  			119875
  		],
  		"mapped",
  		[
  			112
  		]
  	],
  	[
  		[
  			119876,
  			119876
  		],
  		"mapped",
  		[
  			113
  		]
  	],
  	[
  		[
  			119877,
  			119877
  		],
  		"mapped",
  		[
  			114
  		]
  	],
  	[
  		[
  			119878,
  			119878
  		],
  		"mapped",
  		[
  			115
  		]
  	],
  	[
  		[
  			119879,
  			119879
  		],
  		"mapped",
  		[
  			116
  		]
  	],
  	[
  		[
  			119880,
  			119880
  		],
  		"mapped",
  		[
  			117
  		]
  	],
  	[
  		[
  			119881,
  			119881
  		],
  		"mapped",
  		[
  			118
  		]
  	],
  	[
  		[
  			119882,
  			119882
  		],
  		"mapped",
  		[
  			119
  		]
  	],
  	[
  		[
  			119883,
  			119883
  		],
  		"mapped",
  		[
  			120
  		]
  	],
  	[
  		[
  			119884,
  			119884
  		],
  		"mapped",
  		[
  			121
  		]
  	],
  	[
  		[
  			119885,
  			119885
  		],
  		"mapped",
  		[
  			122
  		]
  	],
  	[
  		[
  			119886,
  			119886
  		],
  		"mapped",
  		[
  			97
  		]
  	],
  	[
  		[
  			119887,
  			119887
  		],
  		"mapped",
  		[
  			98
  		]
  	],
  	[
  		[
  			119888,
  			119888
  		],
  		"mapped",
  		[
  			99
  		]
  	],
  	[
  		[
  			119889,
  			119889
  		],
  		"mapped",
  		[
  			100
  		]
  	],
  	[
  		[
  			119890,
  			119890
  		],
  		"mapped",
  		[
  			101
  		]
  	],
  	[
  		[
  			119891,
  			119891
  		],
  		"mapped",
  		[
  			102
  		]
  	],
  	[
  		[
  			119892,
  			119892
  		],
  		"mapped",
  		[
  			103
  		]
  	],
  	[
  		[
  			119893,
  			119893
  		],
  		"disallowed"
  	],
  	[
  		[
  			119894,
  			119894
  		],
  		"mapped",
  		[
  			105
  		]
  	],
  	[
  		[
  			119895,
  			119895
  		],
  		"mapped",
  		[
  			106
  		]
  	],
  	[
  		[
  			119896,
  			119896
  		],
  		"mapped",
  		[
  			107
  		]
  	],
  	[
  		[
  			119897,
  			119897
  		],
  		"mapped",
  		[
  			108
  		]
  	],
  	[
  		[
  			119898,
  			119898
  		],
  		"mapped",
  		[
  			109
  		]
  	],
  	[
  		[
  			119899,
  			119899
  		],
  		"mapped",
  		[
  			110
  		]
  	],
  	[
  		[
  			119900,
  			119900
  		],
  		"mapped",
  		[
  			111
  		]
  	],
  	[
  		[
  			119901,
  			119901
  		],
  		"mapped",
  		[
  			112
  		]
  	],
  	[
  		[
  			119902,
  			119902
  		],
  		"mapped",
  		[
  			113
  		]
  	],
  	[
  		[
  			119903,
  			119903
  		],
  		"mapped",
  		[
  			114
  		]
  	],
  	[
  		[
  			119904,
  			119904
  		],
  		"mapped",
  		[
  			115
  		]
  	],
  	[
  		[
  			119905,
  			119905
  		],
  		"mapped",
  		[
  			116
  		]
  	],
  	[
  		[
  			119906,
  			119906
  		],
  		"mapped",
  		[
  			117
  		]
  	],
  	[
  		[
  			119907,
  			119907
  		],
  		"mapped",
  		[
  			118
  		]
  	],
  	[
  		[
  			119908,
  			119908
  		],
  		"mapped",
  		[
  			119
  		]
  	],
  	[
  		[
  			119909,
  			119909
  		],
  		"mapped",
  		[
  			120
  		]
  	],
  	[
  		[
  			119910,
  			119910
  		],
  		"mapped",
  		[
  			121
  		]
  	],
  	[
  		[
  			119911,
  			119911
  		],
  		"mapped",
  		[
  			122
  		]
  	],
  	[
  		[
  			119912,
  			119912
  		],
  		"mapped",
  		[
  			97
  		]
  	],
  	[
  		[
  			119913,
  			119913
  		],
  		"mapped",
  		[
  			98
  		]
  	],
  	[
  		[
  			119914,
  			119914
  		],
  		"mapped",
  		[
  			99
  		]
  	],
  	[
  		[
  			119915,
  			119915
  		],
  		"mapped",
  		[
  			100
  		]
  	],
  	[
  		[
  			119916,
  			119916
  		],
  		"mapped",
  		[
  			101
  		]
  	],
  	[
  		[
  			119917,
  			119917
  		],
  		"mapped",
  		[
  			102
  		]
  	],
  	[
  		[
  			119918,
  			119918
  		],
  		"mapped",
  		[
  			103
  		]
  	],
  	[
  		[
  			119919,
  			119919
  		],
  		"mapped",
  		[
  			104
  		]
  	],
  	[
  		[
  			119920,
  			119920
  		],
  		"mapped",
  		[
  			105
  		]
  	],
  	[
  		[
  			119921,
  			119921
  		],
  		"mapped",
  		[
  			106
  		]
  	],
  	[
  		[
  			119922,
  			119922
  		],
  		"mapped",
  		[
  			107
  		]
  	],
  	[
  		[
  			119923,
  			119923
  		],
  		"mapped",
  		[
  			108
  		]
  	],
  	[
  		[
  			119924,
  			119924
  		],
  		"mapped",
  		[
  			109
  		]
  	],
  	[
  		[
  			119925,
  			119925
  		],
  		"mapped",
  		[
  			110
  		]
  	],
  	[
  		[
  			119926,
  			119926
  		],
  		"mapped",
  		[
  			111
  		]
  	],
  	[
  		[
  			119927,
  			119927
  		],
  		"mapped",
  		[
  			112
  		]
  	],
  	[
  		[
  			119928,
  			119928
  		],
  		"mapped",
  		[
  			113
  		]
  	],
  	[
  		[
  			119929,
  			119929
  		],
  		"mapped",
  		[
  			114
  		]
  	],
  	[
  		[
  			119930,
  			119930
  		],
  		"mapped",
  		[
  			115
  		]
  	],
  	[
  		[
  			119931,
  			119931
  		],
  		"mapped",
  		[
  			116
  		]
  	],
  	[
  		[
  			119932,
  			119932
  		],
  		"mapped",
  		[
  			117
  		]
  	],
  	[
  		[
  			119933,
  			119933
  		],
  		"mapped",
  		[
  			118
  		]
  	],
  	[
  		[
  			119934,
  			119934
  		],
  		"mapped",
  		[
  			119
  		]
  	],
  	[
  		[
  			119935,
  			119935
  		],
  		"mapped",
  		[
  			120
  		]
  	],
  	[
  		[
  			119936,
  			119936
  		],
  		"mapped",
  		[
  			121
  		]
  	],
  	[
  		[
  			119937,
  			119937
  		],
  		"mapped",
  		[
  			122
  		]
  	],
  	[
  		[
  			119938,
  			119938
  		],
  		"mapped",
  		[
  			97
  		]
  	],
  	[
  		[
  			119939,
  			119939
  		],
  		"mapped",
  		[
  			98
  		]
  	],
  	[
  		[
  			119940,
  			119940
  		],
  		"mapped",
  		[
  			99
  		]
  	],
  	[
  		[
  			119941,
  			119941
  		],
  		"mapped",
  		[
  			100
  		]
  	],
  	[
  		[
  			119942,
  			119942
  		],
  		"mapped",
  		[
  			101
  		]
  	],
  	[
  		[
  			119943,
  			119943
  		],
  		"mapped",
  		[
  			102
  		]
  	],
  	[
  		[
  			119944,
  			119944
  		],
  		"mapped",
  		[
  			103
  		]
  	],
  	[
  		[
  			119945,
  			119945
  		],
  		"mapped",
  		[
  			104
  		]
  	],
  	[
  		[
  			119946,
  			119946
  		],
  		"mapped",
  		[
  			105
  		]
  	],
  	[
  		[
  			119947,
  			119947
  		],
  		"mapped",
  		[
  			106
  		]
  	],
  	[
  		[
  			119948,
  			119948
  		],
  		"mapped",
  		[
  			107
  		]
  	],
  	[
  		[
  			119949,
  			119949
  		],
  		"mapped",
  		[
  			108
  		]
  	],
  	[
  		[
  			119950,
  			119950
  		],
  		"mapped",
  		[
  			109
  		]
  	],
  	[
  		[
  			119951,
  			119951
  		],
  		"mapped",
  		[
  			110
  		]
  	],
  	[
  		[
  			119952,
  			119952
  		],
  		"mapped",
  		[
  			111
  		]
  	],
  	[
  		[
  			119953,
  			119953
  		],
  		"mapped",
  		[
  			112
  		]
  	],
  	[
  		[
  			119954,
  			119954
  		],
  		"mapped",
  		[
  			113
  		]
  	],
  	[
  		[
  			119955,
  			119955
  		],
  		"mapped",
  		[
  			114
  		]
  	],
  	[
  		[
  			119956,
  			119956
  		],
  		"mapped",
  		[
  			115
  		]
  	],
  	[
  		[
  			119957,
  			119957
  		],
  		"mapped",
  		[
  			116
  		]
  	],
  	[
  		[
  			119958,
  			119958
  		],
  		"mapped",
  		[
  			117
  		]
  	],
  	[
  		[
  			119959,
  			119959
  		],
  		"mapped",
  		[
  			118
  		]
  	],
  	[
  		[
  			119960,
  			119960
  		],
  		"mapped",
  		[
  			119
  		]
  	],
  	[
  		[
  			119961,
  			119961
  		],
  		"mapped",
  		[
  			120
  		]
  	],
  	[
  		[
  			119962,
  			119962
  		],
  		"mapped",
  		[
  			121
  		]
  	],
  	[
  		[
  			119963,
  			119963
  		],
  		"mapped",
  		[
  			122
  		]
  	],
  	[
  		[
  			119964,
  			119964
  		],
  		"mapped",
  		[
  			97
  		]
  	],
  	[
  		[
  			119965,
  			119965
  		],
  		"disallowed"
  	],
  	[
  		[
  			119966,
  			119966
  		],
  		"mapped",
  		[
  			99
  		]
  	],
  	[
  		[
  			119967,
  			119967
  		],
  		"mapped",
  		[
  			100
  		]
  	],
  	[
  		[
  			119968,
  			119969
  		],
  		"disallowed"
  	],
  	[
  		[
  			119970,
  			119970
  		],
  		"mapped",
  		[
  			103
  		]
  	],
  	[
  		[
  			119971,
  			119972
  		],
  		"disallowed"
  	],
  	[
  		[
  			119973,
  			119973
  		],
  		"mapped",
  		[
  			106
  		]
  	],
  	[
  		[
  			119974,
  			119974
  		],
  		"mapped",
  		[
  			107
  		]
  	],
  	[
  		[
  			119975,
  			119976
  		],
  		"disallowed"
  	],
  	[
  		[
  			119977,
  			119977
  		],
  		"mapped",
  		[
  			110
  		]
  	],
  	[
  		[
  			119978,
  			119978
  		],
  		"mapped",
  		[
  			111
  		]
  	],
  	[
  		[
  			119979,
  			119979
  		],
  		"mapped",
  		[
  			112
  		]
  	],
  	[
  		[
  			119980,
  			119980
  		],
  		"mapped",
  		[
  			113
  		]
  	],
  	[
  		[
  			119981,
  			119981
  		],
  		"disallowed"
  	],
  	[
  		[
  			119982,
  			119982
  		],
  		"mapped",
  		[
  			115
  		]
  	],
  	[
  		[
  			119983,
  			119983
  		],
  		"mapped",
  		[
  			116
  		]
  	],
  	[
  		[
  			119984,
  			119984
  		],
  		"mapped",
  		[
  			117
  		]
  	],
  	[
  		[
  			119985,
  			119985
  		],
  		"mapped",
  		[
  			118
  		]
  	],
  	[
  		[
  			119986,
  			119986
  		],
  		"mapped",
  		[
  			119
  		]
  	],
  	[
  		[
  			119987,
  			119987
  		],
  		"mapped",
  		[
  			120
  		]
  	],
  	[
  		[
  			119988,
  			119988
  		],
  		"mapped",
  		[
  			121
  		]
  	],
  	[
  		[
  			119989,
  			119989
  		],
  		"mapped",
  		[
  			122
  		]
  	],
  	[
  		[
  			119990,
  			119990
  		],
  		"mapped",
  		[
  			97
  		]
  	],
  	[
  		[
  			119991,
  			119991
  		],
  		"mapped",
  		[
  			98
  		]
  	],
  	[
  		[
  			119992,
  			119992
  		],
  		"mapped",
  		[
  			99
  		]
  	],
  	[
  		[
  			119993,
  			119993
  		],
  		"mapped",
  		[
  			100
  		]
  	],
  	[
  		[
  			119994,
  			119994
  		],
  		"disallowed"
  	],
  	[
  		[
  			119995,
  			119995
  		],
  		"mapped",
  		[
  			102
  		]
  	],
  	[
  		[
  			119996,
  			119996
  		],
  		"disallowed"
  	],
  	[
  		[
  			119997,
  			119997
  		],
  		"mapped",
  		[
  			104
  		]
  	],
  	[
  		[
  			119998,
  			119998
  		],
  		"mapped",
  		[
  			105
  		]
  	],
  	[
  		[
  			119999,
  			119999
  		],
  		"mapped",
  		[
  			106
  		]
  	],
  	[
  		[
  			120000,
  			120000
  		],
  		"mapped",
  		[
  			107
  		]
  	],
  	[
  		[
  			120001,
  			120001
  		],
  		"mapped",
  		[
  			108
  		]
  	],
  	[
  		[
  			120002,
  			120002
  		],
  		"mapped",
  		[
  			109
  		]
  	],
  	[
  		[
  			120003,
  			120003
  		],
  		"mapped",
  		[
  			110
  		]
  	],
  	[
  		[
  			120004,
  			120004
  		],
  		"disallowed"
  	],
  	[
  		[
  			120005,
  			120005
  		],
  		"mapped",
  		[
  			112
  		]
  	],
  	[
  		[
  			120006,
  			120006
  		],
  		"mapped",
  		[
  			113
  		]
  	],
  	[
  		[
  			120007,
  			120007
  		],
  		"mapped",
  		[
  			114
  		]
  	],
  	[
  		[
  			120008,
  			120008
  		],
  		"mapped",
  		[
  			115
  		]
  	],
  	[
  		[
  			120009,
  			120009
  		],
  		"mapped",
  		[
  			116
  		]
  	],
  	[
  		[
  			120010,
  			120010
  		],
  		"mapped",
  		[
  			117
  		]
  	],
  	[
  		[
  			120011,
  			120011
  		],
  		"mapped",
  		[
  			118
  		]
  	],
  	[
  		[
  			120012,
  			120012
  		],
  		"mapped",
  		[
  			119
  		]
  	],
  	[
  		[
  			120013,
  			120013
  		],
  		"mapped",
  		[
  			120
  		]
  	],
  	[
  		[
  			120014,
  			120014
  		],
  		"mapped",
  		[
  			121
  		]
  	],
  	[
  		[
  			120015,
  			120015
  		],
  		"mapped",
  		[
  			122
  		]
  	],
  	[
  		[
  			120016,
  			120016
  		],
  		"mapped",
  		[
  			97
  		]
  	],
  	[
  		[
  			120017,
  			120017
  		],
  		"mapped",
  		[
  			98
  		]
  	],
  	[
  		[
  			120018,
  			120018
  		],
  		"mapped",
  		[
  			99
  		]
  	],
  	[
  		[
  			120019,
  			120019
  		],
  		"mapped",
  		[
  			100
  		]
  	],
  	[
  		[
  			120020,
  			120020
  		],
  		"mapped",
  		[
  			101
  		]
  	],
  	[
  		[
  			120021,
  			120021
  		],
  		"mapped",
  		[
  			102
  		]
  	],
  	[
  		[
  			120022,
  			120022
  		],
  		"mapped",
  		[
  			103
  		]
  	],
  	[
  		[
  			120023,
  			120023
  		],
  		"mapped",
  		[
  			104
  		]
  	],
  	[
  		[
  			120024,
  			120024
  		],
  		"mapped",
  		[
  			105
  		]
  	],
  	[
  		[
  			120025,
  			120025
  		],
  		"mapped",
  		[
  			106
  		]
  	],
  	[
  		[
  			120026,
  			120026
  		],
  		"mapped",
  		[
  			107
  		]
  	],
  	[
  		[
  			120027,
  			120027
  		],
  		"mapped",
  		[
  			108
  		]
  	],
  	[
  		[
  			120028,
  			120028
  		],
  		"mapped",
  		[
  			109
  		]
  	],
  	[
  		[
  			120029,
  			120029
  		],
  		"mapped",
  		[
  			110
  		]
  	],
  	[
  		[
  			120030,
  			120030
  		],
  		"mapped",
  		[
  			111
  		]
  	],
  	[
  		[
  			120031,
  			120031
  		],
  		"mapped",
  		[
  			112
  		]
  	],
  	[
  		[
  			120032,
  			120032
  		],
  		"mapped",
  		[
  			113
  		]
  	],
  	[
  		[
  			120033,
  			120033
  		],
  		"mapped",
  		[
  			114
  		]
  	],
  	[
  		[
  			120034,
  			120034
  		],
  		"mapped",
  		[
  			115
  		]
  	],
  	[
  		[
  			120035,
  			120035
  		],
  		"mapped",
  		[
  			116
  		]
  	],
  	[
  		[
  			120036,
  			120036
  		],
  		"mapped",
  		[
  			117
  		]
  	],
  	[
  		[
  			120037,
  			120037
  		],
  		"mapped",
  		[
  			118
  		]
  	],
  	[
  		[
  			120038,
  			120038
  		],
  		"mapped",
  		[
  			119
  		]
  	],
  	[
  		[
  			120039,
  			120039
  		],
  		"mapped",
  		[
  			120
  		]
  	],
  	[
  		[
  			120040,
  			120040
  		],
  		"mapped",
  		[
  			121
  		]
  	],
  	[
  		[
  			120041,
  			120041
  		],
  		"mapped",
  		[
  			122
  		]
  	],
  	[
  		[
  			120042,
  			120042
  		],
  		"mapped",
  		[
  			97
  		]
  	],
  	[
  		[
  			120043,
  			120043
  		],
  		"mapped",
  		[
  			98
  		]
  	],
  	[
  		[
  			120044,
  			120044
  		],
  		"mapped",
  		[
  			99
  		]
  	],
  	[
  		[
  			120045,
  			120045
  		],
  		"mapped",
  		[
  			100
  		]
  	],
  	[
  		[
  			120046,
  			120046
  		],
  		"mapped",
  		[
  			101
  		]
  	],
  	[
  		[
  			120047,
  			120047
  		],
  		"mapped",
  		[
  			102
  		]
  	],
  	[
  		[
  			120048,
  			120048
  		],
  		"mapped",
  		[
  			103
  		]
  	],
  	[
  		[
  			120049,
  			120049
  		],
  		"mapped",
  		[
  			104
  		]
  	],
  	[
  		[
  			120050,
  			120050
  		],
  		"mapped",
  		[
  			105
  		]
  	],
  	[
  		[
  			120051,
  			120051
  		],
  		"mapped",
  		[
  			106
  		]
  	],
  	[
  		[
  			120052,
  			120052
  		],
  		"mapped",
  		[
  			107
  		]
  	],
  	[
  		[
  			120053,
  			120053
  		],
  		"mapped",
  		[
  			108
  		]
  	],
  	[
  		[
  			120054,
  			120054
  		],
  		"mapped",
  		[
  			109
  		]
  	],
  	[
  		[
  			120055,
  			120055
  		],
  		"mapped",
  		[
  			110
  		]
  	],
  	[
  		[
  			120056,
  			120056
  		],
  		"mapped",
  		[
  			111
  		]
  	],
  	[
  		[
  			120057,
  			120057
  		],
  		"mapped",
  		[
  			112
  		]
  	],
  	[
  		[
  			120058,
  			120058
  		],
  		"mapped",
  		[
  			113
  		]
  	],
  	[
  		[
  			120059,
  			120059
  		],
  		"mapped",
  		[
  			114
  		]
  	],
  	[
  		[
  			120060,
  			120060
  		],
  		"mapped",
  		[
  			115
  		]
  	],
  	[
  		[
  			120061,
  			120061
  		],
  		"mapped",
  		[
  			116
  		]
  	],
  	[
  		[
  			120062,
  			120062
  		],
  		"mapped",
  		[
  			117
  		]
  	],
  	[
  		[
  			120063,
  			120063
  		],
  		"mapped",
  		[
  			118
  		]
  	],
  	[
  		[
  			120064,
  			120064
  		],
  		"mapped",
  		[
  			119
  		]
  	],
  	[
  		[
  			120065,
  			120065
  		],
  		"mapped",
  		[
  			120
  		]
  	],
  	[
  		[
  			120066,
  			120066
  		],
  		"mapped",
  		[
  			121
  		]
  	],
  	[
  		[
  			120067,
  			120067
  		],
  		"mapped",
  		[
  			122
  		]
  	],
  	[
  		[
  			120068,
  			120068
  		],
  		"mapped",
  		[
  			97
  		]
  	],
  	[
  		[
  			120069,
  			120069
  		],
  		"mapped",
  		[
  			98
  		]
  	],
  	[
  		[
  			120070,
  			120070
  		],
  		"disallowed"
  	],
  	[
  		[
  			120071,
  			120071
  		],
  		"mapped",
  		[
  			100
  		]
  	],
  	[
  		[
  			120072,
  			120072
  		],
  		"mapped",
  		[
  			101
  		]
  	],
  	[
  		[
  			120073,
  			120073
  		],
  		"mapped",
  		[
  			102
  		]
  	],
  	[
  		[
  			120074,
  			120074
  		],
  		"mapped",
  		[
  			103
  		]
  	],
  	[
  		[
  			120075,
  			120076
  		],
  		"disallowed"
  	],
  	[
  		[
  			120077,
  			120077
  		],
  		"mapped",
  		[
  			106
  		]
  	],
  	[
  		[
  			120078,
  			120078
  		],
  		"mapped",
  		[
  			107
  		]
  	],
  	[
  		[
  			120079,
  			120079
  		],
  		"mapped",
  		[
  			108
  		]
  	],
  	[
  		[
  			120080,
  			120080
  		],
  		"mapped",
  		[
  			109
  		]
  	],
  	[
  		[
  			120081,
  			120081
  		],
  		"mapped",
  		[
  			110
  		]
  	],
  	[
  		[
  			120082,
  			120082
  		],
  		"mapped",
  		[
  			111
  		]
  	],
  	[
  		[
  			120083,
  			120083
  		],
  		"mapped",
  		[
  			112
  		]
  	],
  	[
  		[
  			120084,
  			120084
  		],
  		"mapped",
  		[
  			113
  		]
  	],
  	[
  		[
  			120085,
  			120085
  		],
  		"disallowed"
  	],
  	[
  		[
  			120086,
  			120086
  		],
  		"mapped",
  		[
  			115
  		]
  	],
  	[
  		[
  			120087,
  			120087
  		],
  		"mapped",
  		[
  			116
  		]
  	],
  	[
  		[
  			120088,
  			120088
  		],
  		"mapped",
  		[
  			117
  		]
  	],
  	[
  		[
  			120089,
  			120089
  		],
  		"mapped",
  		[
  			118
  		]
  	],
  	[
  		[
  			120090,
  			120090
  		],
  		"mapped",
  		[
  			119
  		]
  	],
  	[
  		[
  			120091,
  			120091
  		],
  		"mapped",
  		[
  			120
  		]
  	],
  	[
  		[
  			120092,
  			120092
  		],
  		"mapped",
  		[
  			121
  		]
  	],
  	[
  		[
  			120093,
  			120093
  		],
  		"disallowed"
  	],
  	[
  		[
  			120094,
  			120094
  		],
  		"mapped",
  		[
  			97
  		]
  	],
  	[
  		[
  			120095,
  			120095
  		],
  		"mapped",
  		[
  			98
  		]
  	],
  	[
  		[
  			120096,
  			120096
  		],
  		"mapped",
  		[
  			99
  		]
  	],
  	[
  		[
  			120097,
  			120097
  		],
  		"mapped",
  		[
  			100
  		]
  	],
  	[
  		[
  			120098,
  			120098
  		],
  		"mapped",
  		[
  			101
  		]
  	],
  	[
  		[
  			120099,
  			120099
  		],
  		"mapped",
  		[
  			102
  		]
  	],
  	[
  		[
  			120100,
  			120100
  		],
  		"mapped",
  		[
  			103
  		]
  	],
  	[
  		[
  			120101,
  			120101
  		],
  		"mapped",
  		[
  			104
  		]
  	],
  	[
  		[
  			120102,
  			120102
  		],
  		"mapped",
  		[
  			105
  		]
  	],
  	[
  		[
  			120103,
  			120103
  		],
  		"mapped",
  		[
  			106
  		]
  	],
  	[
  		[
  			120104,
  			120104
  		],
  		"mapped",
  		[
  			107
  		]
  	],
  	[
  		[
  			120105,
  			120105
  		],
  		"mapped",
  		[
  			108
  		]
  	],
  	[
  		[
  			120106,
  			120106
  		],
  		"mapped",
  		[
  			109
  		]
  	],
  	[
  		[
  			120107,
  			120107
  		],
  		"mapped",
  		[
  			110
  		]
  	],
  	[
  		[
  			120108,
  			120108
  		],
  		"mapped",
  		[
  			111
  		]
  	],
  	[
  		[
  			120109,
  			120109
  		],
  		"mapped",
  		[
  			112
  		]
  	],
  	[
  		[
  			120110,
  			120110
  		],
  		"mapped",
  		[
  			113
  		]
  	],
  	[
  		[
  			120111,
  			120111
  		],
  		"mapped",
  		[
  			114
  		]
  	],
  	[
  		[
  			120112,
  			120112
  		],
  		"mapped",
  		[
  			115
  		]
  	],
  	[
  		[
  			120113,
  			120113
  		],
  		"mapped",
  		[
  			116
  		]
  	],
  	[
  		[
  			120114,
  			120114
  		],
  		"mapped",
  		[
  			117
  		]
  	],
  	[
  		[
  			120115,
  			120115
  		],
  		"mapped",
  		[
  			118
  		]
  	],
  	[
  		[
  			120116,
  			120116
  		],
  		"mapped",
  		[
  			119
  		]
  	],
  	[
  		[
  			120117,
  			120117
  		],
  		"mapped",
  		[
  			120
  		]
  	],
  	[
  		[
  			120118,
  			120118
  		],
  		"mapped",
  		[
  			121
  		]
  	],
  	[
  		[
  			120119,
  			120119
  		],
  		"mapped",
  		[
  			122
  		]
  	],
  	[
  		[
  			120120,
  			120120
  		],
  		"mapped",
  		[
  			97
  		]
  	],
  	[
  		[
  			120121,
  			120121
  		],
  		"mapped",
  		[
  			98
  		]
  	],
  	[
  		[
  			120122,
  			120122
  		],
  		"disallowed"
  	],
  	[
  		[
  			120123,
  			120123
  		],
  		"mapped",
  		[
  			100
  		]
  	],
  	[
  		[
  			120124,
  			120124
  		],
  		"mapped",
  		[
  			101
  		]
  	],
  	[
  		[
  			120125,
  			120125
  		],
  		"mapped",
  		[
  			102
  		]
  	],
  	[
  		[
  			120126,
  			120126
  		],
  		"mapped",
  		[
  			103
  		]
  	],
  	[
  		[
  			120127,
  			120127
  		],
  		"disallowed"
  	],
  	[
  		[
  			120128,
  			120128
  		],
  		"mapped",
  		[
  			105
  		]
  	],
  	[
  		[
  			120129,
  			120129
  		],
  		"mapped",
  		[
  			106
  		]
  	],
  	[
  		[
  			120130,
  			120130
  		],
  		"mapped",
  		[
  			107
  		]
  	],
  	[
  		[
  			120131,
  			120131
  		],
  		"mapped",
  		[
  			108
  		]
  	],
  	[
  		[
  			120132,
  			120132
  		],
  		"mapped",
  		[
  			109
  		]
  	],
  	[
  		[
  			120133,
  			120133
  		],
  		"disallowed"
  	],
  	[
  		[
  			120134,
  			120134
  		],
  		"mapped",
  		[
  			111
  		]
  	],
  	[
  		[
  			120135,
  			120137
  		],
  		"disallowed"
  	],
  	[
  		[
  			120138,
  			120138
  		],
  		"mapped",
  		[
  			115
  		]
  	],
  	[
  		[
  			120139,
  			120139
  		],
  		"mapped",
  		[
  			116
  		]
  	],
  	[
  		[
  			120140,
  			120140
  		],
  		"mapped",
  		[
  			117
  		]
  	],
  	[
  		[
  			120141,
  			120141
  		],
  		"mapped",
  		[
  			118
  		]
  	],
  	[
  		[
  			120142,
  			120142
  		],
  		"mapped",
  		[
  			119
  		]
  	],
  	[
  		[
  			120143,
  			120143
  		],
  		"mapped",
  		[
  			120
  		]
  	],
  	[
  		[
  			120144,
  			120144
  		],
  		"mapped",
  		[
  			121
  		]
  	],
  	[
  		[
  			120145,
  			120145
  		],
  		"disallowed"
  	],
  	[
  		[
  			120146,
  			120146
  		],
  		"mapped",
  		[
  			97
  		]
  	],
  	[
  		[
  			120147,
  			120147
  		],
  		"mapped",
  		[
  			98
  		]
  	],
  	[
  		[
  			120148,
  			120148
  		],
  		"mapped",
  		[
  			99
  		]
  	],
  	[
  		[
  			120149,
  			120149
  		],
  		"mapped",
  		[
  			100
  		]
  	],
  	[
  		[
  			120150,
  			120150
  		],
  		"mapped",
  		[
  			101
  		]
  	],
  	[
  		[
  			120151,
  			120151
  		],
  		"mapped",
  		[
  			102
  		]
  	],
  	[
  		[
  			120152,
  			120152
  		],
  		"mapped",
  		[
  			103
  		]
  	],
  	[
  		[
  			120153,
  			120153
  		],
  		"mapped",
  		[
  			104
  		]
  	],
  	[
  		[
  			120154,
  			120154
  		],
  		"mapped",
  		[
  			105
  		]
  	],
  	[
  		[
  			120155,
  			120155
  		],
  		"mapped",
  		[
  			106
  		]
  	],
  	[
  		[
  			120156,
  			120156
  		],
  		"mapped",
  		[
  			107
  		]
  	],
  	[
  		[
  			120157,
  			120157
  		],
  		"mapped",
  		[
  			108
  		]
  	],
  	[
  		[
  			120158,
  			120158
  		],
  		"mapped",
  		[
  			109
  		]
  	],
  	[
  		[
  			120159,
  			120159
  		],
  		"mapped",
  		[
  			110
  		]
  	],
  	[
  		[
  			120160,
  			120160
  		],
  		"mapped",
  		[
  			111
  		]
  	],
  	[
  		[
  			120161,
  			120161
  		],
  		"mapped",
  		[
  			112
  		]
  	],
  	[
  		[
  			120162,
  			120162
  		],
  		"mapped",
  		[
  			113
  		]
  	],
  	[
  		[
  			120163,
  			120163
  		],
  		"mapped",
  		[
  			114
  		]
  	],
  	[
  		[
  			120164,
  			120164
  		],
  		"mapped",
  		[
  			115
  		]
  	],
  	[
  		[
  			120165,
  			120165
  		],
  		"mapped",
  		[
  			116
  		]
  	],
  	[
  		[
  			120166,
  			120166
  		],
  		"mapped",
  		[
  			117
  		]
  	],
  	[
  		[
  			120167,
  			120167
  		],
  		"mapped",
  		[
  			118
  		]
  	],
  	[
  		[
  			120168,
  			120168
  		],
  		"mapped",
  		[
  			119
  		]
  	],
  	[
  		[
  			120169,
  			120169
  		],
  		"mapped",
  		[
  			120
  		]
  	],
  	[
  		[
  			120170,
  			120170
  		],
  		"mapped",
  		[
  			121
  		]
  	],
  	[
  		[
  			120171,
  			120171
  		],
  		"mapped",
  		[
  			122
  		]
  	],
  	[
  		[
  			120172,
  			120172
  		],
  		"mapped",
  		[
  			97
  		]
  	],
  	[
  		[
  			120173,
  			120173
  		],
  		"mapped",
  		[
  			98
  		]
  	],
  	[
  		[
  			120174,
  			120174
  		],
  		"mapped",
  		[
  			99
  		]
  	],
  	[
  		[
  			120175,
  			120175
  		],
  		"mapped",
  		[
  			100
  		]
  	],
  	[
  		[
  			120176,
  			120176
  		],
  		"mapped",
  		[
  			101
  		]
  	],
  	[
  		[
  			120177,
  			120177
  		],
  		"mapped",
  		[
  			102
  		]
  	],
  	[
  		[
  			120178,
  			120178
  		],
  		"mapped",
  		[
  			103
  		]
  	],
  	[
  		[
  			120179,
  			120179
  		],
  		"mapped",
  		[
  			104
  		]
  	],
  	[
  		[
  			120180,
  			120180
  		],
  		"mapped",
  		[
  			105
  		]
  	],
  	[
  		[
  			120181,
  			120181
  		],
  		"mapped",
  		[
  			106
  		]
  	],
  	[
  		[
  			120182,
  			120182
  		],
  		"mapped",
  		[
  			107
  		]
  	],
  	[
  		[
  			120183,
  			120183
  		],
  		"mapped",
  		[
  			108
  		]
  	],
  	[
  		[
  			120184,
  			120184
  		],
  		"mapped",
  		[
  			109
  		]
  	],
  	[
  		[
  			120185,
  			120185
  		],
  		"mapped",
  		[
  			110
  		]
  	],
  	[
  		[
  			120186,
  			120186
  		],
  		"mapped",
  		[
  			111
  		]
  	],
  	[
  		[
  			120187,
  			120187
  		],
  		"mapped",
  		[
  			112
  		]
  	],
  	[
  		[
  			120188,
  			120188
  		],
  		"mapped",
  		[
  			113
  		]
  	],
  	[
  		[
  			120189,
  			120189
  		],
  		"mapped",
  		[
  			114
  		]
  	],
  	[
  		[
  			120190,
  			120190
  		],
  		"mapped",
  		[
  			115
  		]
  	],
  	[
  		[
  			120191,
  			120191
  		],
  		"mapped",
  		[
  			116
  		]
  	],
  	[
  		[
  			120192,
  			120192
  		],
  		"mapped",
  		[
  			117
  		]
  	],
  	[
  		[
  			120193,
  			120193
  		],
  		"mapped",
  		[
  			118
  		]
  	],
  	[
  		[
  			120194,
  			120194
  		],
  		"mapped",
  		[
  			119
  		]
  	],
  	[
  		[
  			120195,
  			120195
  		],
  		"mapped",
  		[
  			120
  		]
  	],
  	[
  		[
  			120196,
  			120196
  		],
  		"mapped",
  		[
  			121
  		]
  	],
  	[
  		[
  			120197,
  			120197
  		],
  		"mapped",
  		[
  			122
  		]
  	],
  	[
  		[
  			120198,
  			120198
  		],
  		"mapped",
  		[
  			97
  		]
  	],
  	[
  		[
  			120199,
  			120199
  		],
  		"mapped",
  		[
  			98
  		]
  	],
  	[
  		[
  			120200,
  			120200
  		],
  		"mapped",
  		[
  			99
  		]
  	],
  	[
  		[
  			120201,
  			120201
  		],
  		"mapped",
  		[
  			100
  		]
  	],
  	[
  		[
  			120202,
  			120202
  		],
  		"mapped",
  		[
  			101
  		]
  	],
  	[
  		[
  			120203,
  			120203
  		],
  		"mapped",
  		[
  			102
  		]
  	],
  	[
  		[
  			120204,
  			120204
  		],
  		"mapped",
  		[
  			103
  		]
  	],
  	[
  		[
  			120205,
  			120205
  		],
  		"mapped",
  		[
  			104
  		]
  	],
  	[
  		[
  			120206,
  			120206
  		],
  		"mapped",
  		[
  			105
  		]
  	],
  	[
  		[
  			120207,
  			120207
  		],
  		"mapped",
  		[
  			106
  		]
  	],
  	[
  		[
  			120208,
  			120208
  		],
  		"mapped",
  		[
  			107
  		]
  	],
  	[
  		[
  			120209,
  			120209
  		],
  		"mapped",
  		[
  			108
  		]
  	],
  	[
  		[
  			120210,
  			120210
  		],
  		"mapped",
  		[
  			109
  		]
  	],
  	[
  		[
  			120211,
  			120211
  		],
  		"mapped",
  		[
  			110
  		]
  	],
  	[
  		[
  			120212,
  			120212
  		],
  		"mapped",
  		[
  			111
  		]
  	],
  	[
  		[
  			120213,
  			120213
  		],
  		"mapped",
  		[
  			112
  		]
  	],
  	[
  		[
  			120214,
  			120214
  		],
  		"mapped",
  		[
  			113
  		]
  	],
  	[
  		[
  			120215,
  			120215
  		],
  		"mapped",
  		[
  			114
  		]
  	],
  	[
  		[
  			120216,
  			120216
  		],
  		"mapped",
  		[
  			115
  		]
  	],
  	[
  		[
  			120217,
  			120217
  		],
  		"mapped",
  		[
  			116
  		]
  	],
  	[
  		[
  			120218,
  			120218
  		],
  		"mapped",
  		[
  			117
  		]
  	],
  	[
  		[
  			120219,
  			120219
  		],
  		"mapped",
  		[
  			118
  		]
  	],
  	[
  		[
  			120220,
  			120220
  		],
  		"mapped",
  		[
  			119
  		]
  	],
  	[
  		[
  			120221,
  			120221
  		],
  		"mapped",
  		[
  			120
  		]
  	],
  	[
  		[
  			120222,
  			120222
  		],
  		"mapped",
  		[
  			121
  		]
  	],
  	[
  		[
  			120223,
  			120223
  		],
  		"mapped",
  		[
  			122
  		]
  	],
  	[
  		[
  			120224,
  			120224
  		],
  		"mapped",
  		[
  			97
  		]
  	],
  	[
  		[
  			120225,
  			120225
  		],
  		"mapped",
  		[
  			98
  		]
  	],
  	[
  		[
  			120226,
  			120226
  		],
  		"mapped",
  		[
  			99
  		]
  	],
  	[
  		[
  			120227,
  			120227
  		],
  		"mapped",
  		[
  			100
  		]
  	],
  	[
  		[
  			120228,
  			120228
  		],
  		"mapped",
  		[
  			101
  		]
  	],
  	[
  		[
  			120229,
  			120229
  		],
  		"mapped",
  		[
  			102
  		]
  	],
  	[
  		[
  			120230,
  			120230
  		],
  		"mapped",
  		[
  			103
  		]
  	],
  	[
  		[
  			120231,
  			120231
  		],
  		"mapped",
  		[
  			104
  		]
  	],
  	[
  		[
  			120232,
  			120232
  		],
  		"mapped",
  		[
  			105
  		]
  	],
  	[
  		[
  			120233,
  			120233
  		],
  		"mapped",
  		[
  			106
  		]
  	],
  	[
  		[
  			120234,
  			120234
  		],
  		"mapped",
  		[
  			107
  		]
  	],
  	[
  		[
  			120235,
  			120235
  		],
  		"mapped",
  		[
  			108
  		]
  	],
  	[
  		[
  			120236,
  			120236
  		],
  		"mapped",
  		[
  			109
  		]
  	],
  	[
  		[
  			120237,
  			120237
  		],
  		"mapped",
  		[
  			110
  		]
  	],
  	[
  		[
  			120238,
  			120238
  		],
  		"mapped",
  		[
  			111
  		]
  	],
  	[
  		[
  			120239,
  			120239
  		],
  		"mapped",
  		[
  			112
  		]
  	],
  	[
  		[
  			120240,
  			120240
  		],
  		"mapped",
  		[
  			113
  		]
  	],
  	[
  		[
  			120241,
  			120241
  		],
  		"mapped",
  		[
  			114
  		]
  	],
  	[
  		[
  			120242,
  			120242
  		],
  		"mapped",
  		[
  			115
  		]
  	],
  	[
  		[
  			120243,
  			120243
  		],
  		"mapped",
  		[
  			116
  		]
  	],
  	[
  		[
  			120244,
  			120244
  		],
  		"mapped",
  		[
  			117
  		]
  	],
  	[
  		[
  			120245,
  			120245
  		],
  		"mapped",
  		[
  			118
  		]
  	],
  	[
  		[
  			120246,
  			120246
  		],
  		"mapped",
  		[
  			119
  		]
  	],
  	[
  		[
  			120247,
  			120247
  		],
  		"mapped",
  		[
  			120
  		]
  	],
  	[
  		[
  			120248,
  			120248
  		],
  		"mapped",
  		[
  			121
  		]
  	],
  	[
  		[
  			120249,
  			120249
  		],
  		"mapped",
  		[
  			122
  		]
  	],
  	[
  		[
  			120250,
  			120250
  		],
  		"mapped",
  		[
  			97
  		]
  	],
  	[
  		[
  			120251,
  			120251
  		],
  		"mapped",
  		[
  			98
  		]
  	],
  	[
  		[
  			120252,
  			120252
  		],
  		"mapped",
  		[
  			99
  		]
  	],
  	[
  		[
  			120253,
  			120253
  		],
  		"mapped",
  		[
  			100
  		]
  	],
  	[
  		[
  			120254,
  			120254
  		],
  		"mapped",
  		[
  			101
  		]
  	],
  	[
  		[
  			120255,
  			120255
  		],
  		"mapped",
  		[
  			102
  		]
  	],
  	[
  		[
  			120256,
  			120256
  		],
  		"mapped",
  		[
  			103
  		]
  	],
  	[
  		[
  			120257,
  			120257
  		],
  		"mapped",
  		[
  			104
  		]
  	],
  	[
  		[
  			120258,
  			120258
  		],
  		"mapped",
  		[
  			105
  		]
  	],
  	[
  		[
  			120259,
  			120259
  		],
  		"mapped",
  		[
  			106
  		]
  	],
  	[
  		[
  			120260,
  			120260
  		],
  		"mapped",
  		[
  			107
  		]
  	],
  	[
  		[
  			120261,
  			120261
  		],
  		"mapped",
  		[
  			108
  		]
  	],
  	[
  		[
  			120262,
  			120262
  		],
  		"mapped",
  		[
  			109
  		]
  	],
  	[
  		[
  			120263,
  			120263
  		],
  		"mapped",
  		[
  			110
  		]
  	],
  	[
  		[
  			120264,
  			120264
  		],
  		"mapped",
  		[
  			111
  		]
  	],
  	[
  		[
  			120265,
  			120265
  		],
  		"mapped",
  		[
  			112
  		]
  	],
  	[
  		[
  			120266,
  			120266
  		],
  		"mapped",
  		[
  			113
  		]
  	],
  	[
  		[
  			120267,
  			120267
  		],
  		"mapped",
  		[
  			114
  		]
  	],
  	[
  		[
  			120268,
  			120268
  		],
  		"mapped",
  		[
  			115
  		]
  	],
  	[
  		[
  			120269,
  			120269
  		],
  		"mapped",
  		[
  			116
  		]
  	],
  	[
  		[
  			120270,
  			120270
  		],
  		"mapped",
  		[
  			117
  		]
  	],
  	[
  		[
  			120271,
  			120271
  		],
  		"mapped",
  		[
  			118
  		]
  	],
  	[
  		[
  			120272,
  			120272
  		],
  		"mapped",
  		[
  			119
  		]
  	],
  	[
  		[
  			120273,
  			120273
  		],
  		"mapped",
  		[
  			120
  		]
  	],
  	[
  		[
  			120274,
  			120274
  		],
  		"mapped",
  		[
  			121
  		]
  	],
  	[
  		[
  			120275,
  			120275
  		],
  		"mapped",
  		[
  			122
  		]
  	],
  	[
  		[
  			120276,
  			120276
  		],
  		"mapped",
  		[
  			97
  		]
  	],
  	[
  		[
  			120277,
  			120277
  		],
  		"mapped",
  		[
  			98
  		]
  	],
  	[
  		[
  			120278,
  			120278
  		],
  		"mapped",
  		[
  			99
  		]
  	],
  	[
  		[
  			120279,
  			120279
  		],
  		"mapped",
  		[
  			100
  		]
  	],
  	[
  		[
  			120280,
  			120280
  		],
  		"mapped",
  		[
  			101
  		]
  	],
  	[
  		[
  			120281,
  			120281
  		],
  		"mapped",
  		[
  			102
  		]
  	],
  	[
  		[
  			120282,
  			120282
  		],
  		"mapped",
  		[
  			103
  		]
  	],
  	[
  		[
  			120283,
  			120283
  		],
  		"mapped",
  		[
  			104
  		]
  	],
  	[
  		[
  			120284,
  			120284
  		],
  		"mapped",
  		[
  			105
  		]
  	],
  	[
  		[
  			120285,
  			120285
  		],
  		"mapped",
  		[
  			106
  		]
  	],
  	[
  		[
  			120286,
  			120286
  		],
  		"mapped",
  		[
  			107
  		]
  	],
  	[
  		[
  			120287,
  			120287
  		],
  		"mapped",
  		[
  			108
  		]
  	],
  	[
  		[
  			120288,
  			120288
  		],
  		"mapped",
  		[
  			109
  		]
  	],
  	[
  		[
  			120289,
  			120289
  		],
  		"mapped",
  		[
  			110
  		]
  	],
  	[
  		[
  			120290,
  			120290
  		],
  		"mapped",
  		[
  			111
  		]
  	],
  	[
  		[
  			120291,
  			120291
  		],
  		"mapped",
  		[
  			112
  		]
  	],
  	[
  		[
  			120292,
  			120292
  		],
  		"mapped",
  		[
  			113
  		]
  	],
  	[
  		[
  			120293,
  			120293
  		],
  		"mapped",
  		[
  			114
  		]
  	],
  	[
  		[
  			120294,
  			120294
  		],
  		"mapped",
  		[
  			115
  		]
  	],
  	[
  		[
  			120295,
  			120295
  		],
  		"mapped",
  		[
  			116
  		]
  	],
  	[
  		[
  			120296,
  			120296
  		],
  		"mapped",
  		[
  			117
  		]
  	],
  	[
  		[
  			120297,
  			120297
  		],
  		"mapped",
  		[
  			118
  		]
  	],
  	[
  		[
  			120298,
  			120298
  		],
  		"mapped",
  		[
  			119
  		]
  	],
  	[
  		[
  			120299,
  			120299
  		],
  		"mapped",
  		[
  			120
  		]
  	],
  	[
  		[
  			120300,
  			120300
  		],
  		"mapped",
  		[
  			121
  		]
  	],
  	[
  		[
  			120301,
  			120301
  		],
  		"mapped",
  		[
  			122
  		]
  	],
  	[
  		[
  			120302,
  			120302
  		],
  		"mapped",
  		[
  			97
  		]
  	],
  	[
  		[
  			120303,
  			120303
  		],
  		"mapped",
  		[
  			98
  		]
  	],
  	[
  		[
  			120304,
  			120304
  		],
  		"mapped",
  		[
  			99
  		]
  	],
  	[
  		[
  			120305,
  			120305
  		],
  		"mapped",
  		[
  			100
  		]
  	],
  	[
  		[
  			120306,
  			120306
  		],
  		"mapped",
  		[
  			101
  		]
  	],
  	[
  		[
  			120307,
  			120307
  		],
  		"mapped",
  		[
  			102
  		]
  	],
  	[
  		[
  			120308,
  			120308
  		],
  		"mapped",
  		[
  			103
  		]
  	],
  	[
  		[
  			120309,
  			120309
  		],
  		"mapped",
  		[
  			104
  		]
  	],
  	[
  		[
  			120310,
  			120310
  		],
  		"mapped",
  		[
  			105
  		]
  	],
  	[
  		[
  			120311,
  			120311
  		],
  		"mapped",
  		[
  			106
  		]
  	],
  	[
  		[
  			120312,
  			120312
  		],
  		"mapped",
  		[
  			107
  		]
  	],
  	[
  		[
  			120313,
  			120313
  		],
  		"mapped",
  		[
  			108
  		]
  	],
  	[
  		[
  			120314,
  			120314
  		],
  		"mapped",
  		[
  			109
  		]
  	],
  	[
  		[
  			120315,
  			120315
  		],
  		"mapped",
  		[
  			110
  		]
  	],
  	[
  		[
  			120316,
  			120316
  		],
  		"mapped",
  		[
  			111
  		]
  	],
  	[
  		[
  			120317,
  			120317
  		],
  		"mapped",
  		[
  			112
  		]
  	],
  	[
  		[
  			120318,
  			120318
  		],
  		"mapped",
  		[
  			113
  		]
  	],
  	[
  		[
  			120319,
  			120319
  		],
  		"mapped",
  		[
  			114
  		]
  	],
  	[
  		[
  			120320,
  			120320
  		],
  		"mapped",
  		[
  			115
  		]
  	],
  	[
  		[
  			120321,
  			120321
  		],
  		"mapped",
  		[
  			116
  		]
  	],
  	[
  		[
  			120322,
  			120322
  		],
  		"mapped",
  		[
  			117
  		]
  	],
  	[
  		[
  			120323,
  			120323
  		],
  		"mapped",
  		[
  			118
  		]
  	],
  	[
  		[
  			120324,
  			120324
  		],
  		"mapped",
  		[
  			119
  		]
  	],
  	[
  		[
  			120325,
  			120325
  		],
  		"mapped",
  		[
  			120
  		]
  	],
  	[
  		[
  			120326,
  			120326
  		],
  		"mapped",
  		[
  			121
  		]
  	],
  	[
  		[
  			120327,
  			120327
  		],
  		"mapped",
  		[
  			122
  		]
  	],
  	[
  		[
  			120328,
  			120328
  		],
  		"mapped",
  		[
  			97
  		]
  	],
  	[
  		[
  			120329,
  			120329
  		],
  		"mapped",
  		[
  			98
  		]
  	],
  	[
  		[
  			120330,
  			120330
  		],
  		"mapped",
  		[
  			99
  		]
  	],
  	[
  		[
  			120331,
  			120331
  		],
  		"mapped",
  		[
  			100
  		]
  	],
  	[
  		[
  			120332,
  			120332
  		],
  		"mapped",
  		[
  			101
  		]
  	],
  	[
  		[
  			120333,
  			120333
  		],
  		"mapped",
  		[
  			102
  		]
  	],
  	[
  		[
  			120334,
  			120334
  		],
  		"mapped",
  		[
  			103
  		]
  	],
  	[
  		[
  			120335,
  			120335
  		],
  		"mapped",
  		[
  			104
  		]
  	],
  	[
  		[
  			120336,
  			120336
  		],
  		"mapped",
  		[
  			105
  		]
  	],
  	[
  		[
  			120337,
  			120337
  		],
  		"mapped",
  		[
  			106
  		]
  	],
  	[
  		[
  			120338,
  			120338
  		],
  		"mapped",
  		[
  			107
  		]
  	],
  	[
  		[
  			120339,
  			120339
  		],
  		"mapped",
  		[
  			108
  		]
  	],
  	[
  		[
  			120340,
  			120340
  		],
  		"mapped",
  		[
  			109
  		]
  	],
  	[
  		[
  			120341,
  			120341
  		],
  		"mapped",
  		[
  			110
  		]
  	],
  	[
  		[
  			120342,
  			120342
  		],
  		"mapped",
  		[
  			111
  		]
  	],
  	[
  		[
  			120343,
  			120343
  		],
  		"mapped",
  		[
  			112
  		]
  	],
  	[
  		[
  			120344,
  			120344
  		],
  		"mapped",
  		[
  			113
  		]
  	],
  	[
  		[
  			120345,
  			120345
  		],
  		"mapped",
  		[
  			114
  		]
  	],
  	[
  		[
  			120346,
  			120346
  		],
  		"mapped",
  		[
  			115
  		]
  	],
  	[
  		[
  			120347,
  			120347
  		],
  		"mapped",
  		[
  			116
  		]
  	],
  	[
  		[
  			120348,
  			120348
  		],
  		"mapped",
  		[
  			117
  		]
  	],
  	[
  		[
  			120349,
  			120349
  		],
  		"mapped",
  		[
  			118
  		]
  	],
  	[
  		[
  			120350,
  			120350
  		],
  		"mapped",
  		[
  			119
  		]
  	],
  	[
  		[
  			120351,
  			120351
  		],
  		"mapped",
  		[
  			120
  		]
  	],
  	[
  		[
  			120352,
  			120352
  		],
  		"mapped",
  		[
  			121
  		]
  	],
  	[
  		[
  			120353,
  			120353
  		],
  		"mapped",
  		[
  			122
  		]
  	],
  	[
  		[
  			120354,
  			120354
  		],
  		"mapped",
  		[
  			97
  		]
  	],
  	[
  		[
  			120355,
  			120355
  		],
  		"mapped",
  		[
  			98
  		]
  	],
  	[
  		[
  			120356,
  			120356
  		],
  		"mapped",
  		[
  			99
  		]
  	],
  	[
  		[
  			120357,
  			120357
  		],
  		"mapped",
  		[
  			100
  		]
  	],
  	[
  		[
  			120358,
  			120358
  		],
  		"mapped",
  		[
  			101
  		]
  	],
  	[
  		[
  			120359,
  			120359
  		],
  		"mapped",
  		[
  			102
  		]
  	],
  	[
  		[
  			120360,
  			120360
  		],
  		"mapped",
  		[
  			103
  		]
  	],
  	[
  		[
  			120361,
  			120361
  		],
  		"mapped",
  		[
  			104
  		]
  	],
  	[
  		[
  			120362,
  			120362
  		],
  		"mapped",
  		[
  			105
  		]
  	],
  	[
  		[
  			120363,
  			120363
  		],
  		"mapped",
  		[
  			106
  		]
  	],
  	[
  		[
  			120364,
  			120364
  		],
  		"mapped",
  		[
  			107
  		]
  	],
  	[
  		[
  			120365,
  			120365
  		],
  		"mapped",
  		[
  			108
  		]
  	],
  	[
  		[
  			120366,
  			120366
  		],
  		"mapped",
  		[
  			109
  		]
  	],
  	[
  		[
  			120367,
  			120367
  		],
  		"mapped",
  		[
  			110
  		]
  	],
  	[
  		[
  			120368,
  			120368
  		],
  		"mapped",
  		[
  			111
  		]
  	],
  	[
  		[
  			120369,
  			120369
  		],
  		"mapped",
  		[
  			112
  		]
  	],
  	[
  		[
  			120370,
  			120370
  		],
  		"mapped",
  		[
  			113
  		]
  	],
  	[
  		[
  			120371,
  			120371
  		],
  		"mapped",
  		[
  			114
  		]
  	],
  	[
  		[
  			120372,
  			120372
  		],
  		"mapped",
  		[
  			115
  		]
  	],
  	[
  		[
  			120373,
  			120373
  		],
  		"mapped",
  		[
  			116
  		]
  	],
  	[
  		[
  			120374,
  			120374
  		],
  		"mapped",
  		[
  			117
  		]
  	],
  	[
  		[
  			120375,
  			120375
  		],
  		"mapped",
  		[
  			118
  		]
  	],
  	[
  		[
  			120376,
  			120376
  		],
  		"mapped",
  		[
  			119
  		]
  	],
  	[
  		[
  			120377,
  			120377
  		],
  		"mapped",
  		[
  			120
  		]
  	],
  	[
  		[
  			120378,
  			120378
  		],
  		"mapped",
  		[
  			121
  		]
  	],
  	[
  		[
  			120379,
  			120379
  		],
  		"mapped",
  		[
  			122
  		]
  	],
  	[
  		[
  			120380,
  			120380
  		],
  		"mapped",
  		[
  			97
  		]
  	],
  	[
  		[
  			120381,
  			120381
  		],
  		"mapped",
  		[
  			98
  		]
  	],
  	[
  		[
  			120382,
  			120382
  		],
  		"mapped",
  		[
  			99
  		]
  	],
  	[
  		[
  			120383,
  			120383
  		],
  		"mapped",
  		[
  			100
  		]
  	],
  	[
  		[
  			120384,
  			120384
  		],
  		"mapped",
  		[
  			101
  		]
  	],
  	[
  		[
  			120385,
  			120385
  		],
  		"mapped",
  		[
  			102
  		]
  	],
  	[
  		[
  			120386,
  			120386
  		],
  		"mapped",
  		[
  			103
  		]
  	],
  	[
  		[
  			120387,
  			120387
  		],
  		"mapped",
  		[
  			104
  		]
  	],
  	[
  		[
  			120388,
  			120388
  		],
  		"mapped",
  		[
  			105
  		]
  	],
  	[
  		[
  			120389,
  			120389
  		],
  		"mapped",
  		[
  			106
  		]
  	],
  	[
  		[
  			120390,
  			120390
  		],
  		"mapped",
  		[
  			107
  		]
  	],
  	[
  		[
  			120391,
  			120391
  		],
  		"mapped",
  		[
  			108
  		]
  	],
  	[
  		[
  			120392,
  			120392
  		],
  		"mapped",
  		[
  			109
  		]
  	],
  	[
  		[
  			120393,
  			120393
  		],
  		"mapped",
  		[
  			110
  		]
  	],
  	[
  		[
  			120394,
  			120394
  		],
  		"mapped",
  		[
  			111
  		]
  	],
  	[
  		[
  			120395,
  			120395
  		],
  		"mapped",
  		[
  			112
  		]
  	],
  	[
  		[
  			120396,
  			120396
  		],
  		"mapped",
  		[
  			113
  		]
  	],
  	[
  		[
  			120397,
  			120397
  		],
  		"mapped",
  		[
  			114
  		]
  	],
  	[
  		[
  			120398,
  			120398
  		],
  		"mapped",
  		[
  			115
  		]
  	],
  	[
  		[
  			120399,
  			120399
  		],
  		"mapped",
  		[
  			116
  		]
  	],
  	[
  		[
  			120400,
  			120400
  		],
  		"mapped",
  		[
  			117
  		]
  	],
  	[
  		[
  			120401,
  			120401
  		],
  		"mapped",
  		[
  			118
  		]
  	],
  	[
  		[
  			120402,
  			120402
  		],
  		"mapped",
  		[
  			119
  		]
  	],
  	[
  		[
  			120403,
  			120403
  		],
  		"mapped",
  		[
  			120
  		]
  	],
  	[
  		[
  			120404,
  			120404
  		],
  		"mapped",
  		[
  			121
  		]
  	],
  	[
  		[
  			120405,
  			120405
  		],
  		"mapped",
  		[
  			122
  		]
  	],
  	[
  		[
  			120406,
  			120406
  		],
  		"mapped",
  		[
  			97
  		]
  	],
  	[
  		[
  			120407,
  			120407
  		],
  		"mapped",
  		[
  			98
  		]
  	],
  	[
  		[
  			120408,
  			120408
  		],
  		"mapped",
  		[
  			99
  		]
  	],
  	[
  		[
  			120409,
  			120409
  		],
  		"mapped",
  		[
  			100
  		]
  	],
  	[
  		[
  			120410,
  			120410
  		],
  		"mapped",
  		[
  			101
  		]
  	],
  	[
  		[
  			120411,
  			120411
  		],
  		"mapped",
  		[
  			102
  		]
  	],
  	[
  		[
  			120412,
  			120412
  		],
  		"mapped",
  		[
  			103
  		]
  	],
  	[
  		[
  			120413,
  			120413
  		],
  		"mapped",
  		[
  			104
  		]
  	],
  	[
  		[
  			120414,
  			120414
  		],
  		"mapped",
  		[
  			105
  		]
  	],
  	[
  		[
  			120415,
  			120415
  		],
  		"mapped",
  		[
  			106
  		]
  	],
  	[
  		[
  			120416,
  			120416
  		],
  		"mapped",
  		[
  			107
  		]
  	],
  	[
  		[
  			120417,
  			120417
  		],
  		"mapped",
  		[
  			108
  		]
  	],
  	[
  		[
  			120418,
  			120418
  		],
  		"mapped",
  		[
  			109
  		]
  	],
  	[
  		[
  			120419,
  			120419
  		],
  		"mapped",
  		[
  			110
  		]
  	],
  	[
  		[
  			120420,
  			120420
  		],
  		"mapped",
  		[
  			111
  		]
  	],
  	[
  		[
  			120421,
  			120421
  		],
  		"mapped",
  		[
  			112
  		]
  	],
  	[
  		[
  			120422,
  			120422
  		],
  		"mapped",
  		[
  			113
  		]
  	],
  	[
  		[
  			120423,
  			120423
  		],
  		"mapped",
  		[
  			114
  		]
  	],
  	[
  		[
  			120424,
  			120424
  		],
  		"mapped",
  		[
  			115
  		]
  	],
  	[
  		[
  			120425,
  			120425
  		],
  		"mapped",
  		[
  			116
  		]
  	],
  	[
  		[
  			120426,
  			120426
  		],
  		"mapped",
  		[
  			117
  		]
  	],
  	[
  		[
  			120427,
  			120427
  		],
  		"mapped",
  		[
  			118
  		]
  	],
  	[
  		[
  			120428,
  			120428
  		],
  		"mapped",
  		[
  			119
  		]
  	],
  	[
  		[
  			120429,
  			120429
  		],
  		"mapped",
  		[
  			120
  		]
  	],
  	[
  		[
  			120430,
  			120430
  		],
  		"mapped",
  		[
  			121
  		]
  	],
  	[
  		[
  			120431,
  			120431
  		],
  		"mapped",
  		[
  			122
  		]
  	],
  	[
  		[
  			120432,
  			120432
  		],
  		"mapped",
  		[
  			97
  		]
  	],
  	[
  		[
  			120433,
  			120433
  		],
  		"mapped",
  		[
  			98
  		]
  	],
  	[
  		[
  			120434,
  			120434
  		],
  		"mapped",
  		[
  			99
  		]
  	],
  	[
  		[
  			120435,
  			120435
  		],
  		"mapped",
  		[
  			100
  		]
  	],
  	[
  		[
  			120436,
  			120436
  		],
  		"mapped",
  		[
  			101
  		]
  	],
  	[
  		[
  			120437,
  			120437
  		],
  		"mapped",
  		[
  			102
  		]
  	],
  	[
  		[
  			120438,
  			120438
  		],
  		"mapped",
  		[
  			103
  		]
  	],
  	[
  		[
  			120439,
  			120439
  		],
  		"mapped",
  		[
  			104
  		]
  	],
  	[
  		[
  			120440,
  			120440
  		],
  		"mapped",
  		[
  			105
  		]
  	],
  	[
  		[
  			120441,
  			120441
  		],
  		"mapped",
  		[
  			106
  		]
  	],
  	[
  		[
  			120442,
  			120442
  		],
  		"mapped",
  		[
  			107
  		]
  	],
  	[
  		[
  			120443,
  			120443
  		],
  		"mapped",
  		[
  			108
  		]
  	],
  	[
  		[
  			120444,
  			120444
  		],
  		"mapped",
  		[
  			109
  		]
  	],
  	[
  		[
  			120445,
  			120445
  		],
  		"mapped",
  		[
  			110
  		]
  	],
  	[
  		[
  			120446,
  			120446
  		],
  		"mapped",
  		[
  			111
  		]
  	],
  	[
  		[
  			120447,
  			120447
  		],
  		"mapped",
  		[
  			112
  		]
  	],
  	[
  		[
  			120448,
  			120448
  		],
  		"mapped",
  		[
  			113
  		]
  	],
  	[
  		[
  			120449,
  			120449
  		],
  		"mapped",
  		[
  			114
  		]
  	],
  	[
  		[
  			120450,
  			120450
  		],
  		"mapped",
  		[
  			115
  		]
  	],
  	[
  		[
  			120451,
  			120451
  		],
  		"mapped",
  		[
  			116
  		]
  	],
  	[
  		[
  			120452,
  			120452
  		],
  		"mapped",
  		[
  			117
  		]
  	],
  	[
  		[
  			120453,
  			120453
  		],
  		"mapped",
  		[
  			118
  		]
  	],
  	[
  		[
  			120454,
  			120454
  		],
  		"mapped",
  		[
  			119
  		]
  	],
  	[
  		[
  			120455,
  			120455
  		],
  		"mapped",
  		[
  			120
  		]
  	],
  	[
  		[
  			120456,
  			120456
  		],
  		"mapped",
  		[
  			121
  		]
  	],
  	[
  		[
  			120457,
  			120457
  		],
  		"mapped",
  		[
  			122
  		]
  	],
  	[
  		[
  			120458,
  			120458
  		],
  		"mapped",
  		[
  			97
  		]
  	],
  	[
  		[
  			120459,
  			120459
  		],
  		"mapped",
  		[
  			98
  		]
  	],
  	[
  		[
  			120460,
  			120460
  		],
  		"mapped",
  		[
  			99
  		]
  	],
  	[
  		[
  			120461,
  			120461
  		],
  		"mapped",
  		[
  			100
  		]
  	],
  	[
  		[
  			120462,
  			120462
  		],
  		"mapped",
  		[
  			101
  		]
  	],
  	[
  		[
  			120463,
  			120463
  		],
  		"mapped",
  		[
  			102
  		]
  	],
  	[
  		[
  			120464,
  			120464
  		],
  		"mapped",
  		[
  			103
  		]
  	],
  	[
  		[
  			120465,
  			120465
  		],
  		"mapped",
  		[
  			104
  		]
  	],
  	[
  		[
  			120466,
  			120466
  		],
  		"mapped",
  		[
  			105
  		]
  	],
  	[
  		[
  			120467,
  			120467
  		],
  		"mapped",
  		[
  			106
  		]
  	],
  	[
  		[
  			120468,
  			120468
  		],
  		"mapped",
  		[
  			107
  		]
  	],
  	[
  		[
  			120469,
  			120469
  		],
  		"mapped",
  		[
  			108
  		]
  	],
  	[
  		[
  			120470,
  			120470
  		],
  		"mapped",
  		[
  			109
  		]
  	],
  	[
  		[
  			120471,
  			120471
  		],
  		"mapped",
  		[
  			110
  		]
  	],
  	[
  		[
  			120472,
  			120472
  		],
  		"mapped",
  		[
  			111
  		]
  	],
  	[
  		[
  			120473,
  			120473
  		],
  		"mapped",
  		[
  			112
  		]
  	],
  	[
  		[
  			120474,
  			120474
  		],
  		"mapped",
  		[
  			113
  		]
  	],
  	[
  		[
  			120475,
  			120475
  		],
  		"mapped",
  		[
  			114
  		]
  	],
  	[
  		[
  			120476,
  			120476
  		],
  		"mapped",
  		[
  			115
  		]
  	],
  	[
  		[
  			120477,
  			120477
  		],
  		"mapped",
  		[
  			116
  		]
  	],
  	[
  		[
  			120478,
  			120478
  		],
  		"mapped",
  		[
  			117
  		]
  	],
  	[
  		[
  			120479,
  			120479
  		],
  		"mapped",
  		[
  			118
  		]
  	],
  	[
  		[
  			120480,
  			120480
  		],
  		"mapped",
  		[
  			119
  		]
  	],
  	[
  		[
  			120481,
  			120481
  		],
  		"mapped",
  		[
  			120
  		]
  	],
  	[
  		[
  			120482,
  			120482
  		],
  		"mapped",
  		[
  			121
  		]
  	],
  	[
  		[
  			120483,
  			120483
  		],
  		"mapped",
  		[
  			122
  		]
  	],
  	[
  		[
  			120484,
  			120484
  		],
  		"mapped",
  		[
  			305
  		]
  	],
  	[
  		[
  			120485,
  			120485
  		],
  		"mapped",
  		[
  			567
  		]
  	],
  	[
  		[
  			120486,
  			120487
  		],
  		"disallowed"
  	],
  	[
  		[
  			120488,
  			120488
  		],
  		"mapped",
  		[
  			945
  		]
  	],
  	[
  		[
  			120489,
  			120489
  		],
  		"mapped",
  		[
  			946
  		]
  	],
  	[
  		[
  			120490,
  			120490
  		],
  		"mapped",
  		[
  			947
  		]
  	],
  	[
  		[
  			120491,
  			120491
  		],
  		"mapped",
  		[
  			948
  		]
  	],
  	[
  		[
  			120492,
  			120492
  		],
  		"mapped",
  		[
  			949
  		]
  	],
  	[
  		[
  			120493,
  			120493
  		],
  		"mapped",
  		[
  			950
  		]
  	],
  	[
  		[
  			120494,
  			120494
  		],
  		"mapped",
  		[
  			951
  		]
  	],
  	[
  		[
  			120495,
  			120495
  		],
  		"mapped",
  		[
  			952
  		]
  	],
  	[
  		[
  			120496,
  			120496
  		],
  		"mapped",
  		[
  			953
  		]
  	],
  	[
  		[
  			120497,
  			120497
  		],
  		"mapped",
  		[
  			954
  		]
  	],
  	[
  		[
  			120498,
  			120498
  		],
  		"mapped",
  		[
  			955
  		]
  	],
  	[
  		[
  			120499,
  			120499
  		],
  		"mapped",
  		[
  			956
  		]
  	],
  	[
  		[
  			120500,
  			120500
  		],
  		"mapped",
  		[
  			957
  		]
  	],
  	[
  		[
  			120501,
  			120501
  		],
  		"mapped",
  		[
  			958
  		]
  	],
  	[
  		[
  			120502,
  			120502
  		],
  		"mapped",
  		[
  			959
  		]
  	],
  	[
  		[
  			120503,
  			120503
  		],
  		"mapped",
  		[
  			960
  		]
  	],
  	[
  		[
  			120504,
  			120504
  		],
  		"mapped",
  		[
  			961
  		]
  	],
  	[
  		[
  			120505,
  			120505
  		],
  		"mapped",
  		[
  			952
  		]
  	],
  	[
  		[
  			120506,
  			120506
  		],
  		"mapped",
  		[
  			963
  		]
  	],
  	[
  		[
  			120507,
  			120507
  		],
  		"mapped",
  		[
  			964
  		]
  	],
  	[
  		[
  			120508,
  			120508
  		],
  		"mapped",
  		[
  			965
  		]
  	],
  	[
  		[
  			120509,
  			120509
  		],
  		"mapped",
  		[
  			966
  		]
  	],
  	[
  		[
  			120510,
  			120510
  		],
  		"mapped",
  		[
  			967
  		]
  	],
  	[
  		[
  			120511,
  			120511
  		],
  		"mapped",
  		[
  			968
  		]
  	],
  	[
  		[
  			120512,
  			120512
  		],
  		"mapped",
  		[
  			969
  		]
  	],
  	[
  		[
  			120513,
  			120513
  		],
  		"mapped",
  		[
  			8711
  		]
  	],
  	[
  		[
  			120514,
  			120514
  		],
  		"mapped",
  		[
  			945
  		]
  	],
  	[
  		[
  			120515,
  			120515
  		],
  		"mapped",
  		[
  			946
  		]
  	],
  	[
  		[
  			120516,
  			120516
  		],
  		"mapped",
  		[
  			947
  		]
  	],
  	[
  		[
  			120517,
  			120517
  		],
  		"mapped",
  		[
  			948
  		]
  	],
  	[
  		[
  			120518,
  			120518
  		],
  		"mapped",
  		[
  			949
  		]
  	],
  	[
  		[
  			120519,
  			120519
  		],
  		"mapped",
  		[
  			950
  		]
  	],
  	[
  		[
  			120520,
  			120520
  		],
  		"mapped",
  		[
  			951
  		]
  	],
  	[
  		[
  			120521,
  			120521
  		],
  		"mapped",
  		[
  			952
  		]
  	],
  	[
  		[
  			120522,
  			120522
  		],
  		"mapped",
  		[
  			953
  		]
  	],
  	[
  		[
  			120523,
  			120523
  		],
  		"mapped",
  		[
  			954
  		]
  	],
  	[
  		[
  			120524,
  			120524
  		],
  		"mapped",
  		[
  			955
  		]
  	],
  	[
  		[
  			120525,
  			120525
  		],
  		"mapped",
  		[
  			956
  		]
  	],
  	[
  		[
  			120526,
  			120526
  		],
  		"mapped",
  		[
  			957
  		]
  	],
  	[
  		[
  			120527,
  			120527
  		],
  		"mapped",
  		[
  			958
  		]
  	],
  	[
  		[
  			120528,
  			120528
  		],
  		"mapped",
  		[
  			959
  		]
  	],
  	[
  		[
  			120529,
  			120529
  		],
  		"mapped",
  		[
  			960
  		]
  	],
  	[
  		[
  			120530,
  			120530
  		],
  		"mapped",
  		[
  			961
  		]
  	],
  	[
  		[
  			120531,
  			120532
  		],
  		"mapped",
  		[
  			963
  		]
  	],
  	[
  		[
  			120533,
  			120533
  		],
  		"mapped",
  		[
  			964
  		]
  	],
  	[
  		[
  			120534,
  			120534
  		],
  		"mapped",
  		[
  			965
  		]
  	],
  	[
  		[
  			120535,
  			120535
  		],
  		"mapped",
  		[
  			966
  		]
  	],
  	[
  		[
  			120536,
  			120536
  		],
  		"mapped",
  		[
  			967
  		]
  	],
  	[
  		[
  			120537,
  			120537
  		],
  		"mapped",
  		[
  			968
  		]
  	],
  	[
  		[
  			120538,
  			120538
  		],
  		"mapped",
  		[
  			969
  		]
  	],
  	[
  		[
  			120539,
  			120539
  		],
  		"mapped",
  		[
  			8706
  		]
  	],
  	[
  		[
  			120540,
  			120540
  		],
  		"mapped",
  		[
  			949
  		]
  	],
  	[
  		[
  			120541,
  			120541
  		],
  		"mapped",
  		[
  			952
  		]
  	],
  	[
  		[
  			120542,
  			120542
  		],
  		"mapped",
  		[
  			954
  		]
  	],
  	[
  		[
  			120543,
  			120543
  		],
  		"mapped",
  		[
  			966
  		]
  	],
  	[
  		[
  			120544,
  			120544
  		],
  		"mapped",
  		[
  			961
  		]
  	],
  	[
  		[
  			120545,
  			120545
  		],
  		"mapped",
  		[
  			960
  		]
  	],
  	[
  		[
  			120546,
  			120546
  		],
  		"mapped",
  		[
  			945
  		]
  	],
  	[
  		[
  			120547,
  			120547
  		],
  		"mapped",
  		[
  			946
  		]
  	],
  	[
  		[
  			120548,
  			120548
  		],
  		"mapped",
  		[
  			947
  		]
  	],
  	[
  		[
  			120549,
  			120549
  		],
  		"mapped",
  		[
  			948
  		]
  	],
  	[
  		[
  			120550,
  			120550
  		],
  		"mapped",
  		[
  			949
  		]
  	],
  	[
  		[
  			120551,
  			120551
  		],
  		"mapped",
  		[
  			950
  		]
  	],
  	[
  		[
  			120552,
  			120552
  		],
  		"mapped",
  		[
  			951
  		]
  	],
  	[
  		[
  			120553,
  			120553
  		],
  		"mapped",
  		[
  			952
  		]
  	],
  	[
  		[
  			120554,
  			120554
  		],
  		"mapped",
  		[
  			953
  		]
  	],
  	[
  		[
  			120555,
  			120555
  		],
  		"mapped",
  		[
  			954
  		]
  	],
  	[
  		[
  			120556,
  			120556
  		],
  		"mapped",
  		[
  			955
  		]
  	],
  	[
  		[
  			120557,
  			120557
  		],
  		"mapped",
  		[
  			956
  		]
  	],
  	[
  		[
  			120558,
  			120558
  		],
  		"mapped",
  		[
  			957
  		]
  	],
  	[
  		[
  			120559,
  			120559
  		],
  		"mapped",
  		[
  			958
  		]
  	],
  	[
  		[
  			120560,
  			120560
  		],
  		"mapped",
  		[
  			959
  		]
  	],
  	[
  		[
  			120561,
  			120561
  		],
  		"mapped",
  		[
  			960
  		]
  	],
  	[
  		[
  			120562,
  			120562
  		],
  		"mapped",
  		[
  			961
  		]
  	],
  	[
  		[
  			120563,
  			120563
  		],
  		"mapped",
  		[
  			952
  		]
  	],
  	[
  		[
  			120564,
  			120564
  		],
  		"mapped",
  		[
  			963
  		]
  	],
  	[
  		[
  			120565,
  			120565
  		],
  		"mapped",
  		[
  			964
  		]
  	],
  	[
  		[
  			120566,
  			120566
  		],
  		"mapped",
  		[
  			965
  		]
  	],
  	[
  		[
  			120567,
  			120567
  		],
  		"mapped",
  		[
  			966
  		]
  	],
  	[
  		[
  			120568,
  			120568
  		],
  		"mapped",
  		[
  			967
  		]
  	],
  	[
  		[
  			120569,
  			120569
  		],
  		"mapped",
  		[
  			968
  		]
  	],
  	[
  		[
  			120570,
  			120570
  		],
  		"mapped",
  		[
  			969
  		]
  	],
  	[
  		[
  			120571,
  			120571
  		],
  		"mapped",
  		[
  			8711
  		]
  	],
  	[
  		[
  			120572,
  			120572
  		],
  		"mapped",
  		[
  			945
  		]
  	],
  	[
  		[
  			120573,
  			120573
  		],
  		"mapped",
  		[
  			946
  		]
  	],
  	[
  		[
  			120574,
  			120574
  		],
  		"mapped",
  		[
  			947
  		]
  	],
  	[
  		[
  			120575,
  			120575
  		],
  		"mapped",
  		[
  			948
  		]
  	],
  	[
  		[
  			120576,
  			120576
  		],
  		"mapped",
  		[
  			949
  		]
  	],
  	[
  		[
  			120577,
  			120577
  		],
  		"mapped",
  		[
  			950
  		]
  	],
  	[
  		[
  			120578,
  			120578
  		],
  		"mapped",
  		[
  			951
  		]
  	],
  	[
  		[
  			120579,
  			120579
  		],
  		"mapped",
  		[
  			952
  		]
  	],
  	[
  		[
  			120580,
  			120580
  		],
  		"mapped",
  		[
  			953
  		]
  	],
  	[
  		[
  			120581,
  			120581
  		],
  		"mapped",
  		[
  			954
  		]
  	],
  	[
  		[
  			120582,
  			120582
  		],
  		"mapped",
  		[
  			955
  		]
  	],
  	[
  		[
  			120583,
  			120583
  		],
  		"mapped",
  		[
  			956
  		]
  	],
  	[
  		[
  			120584,
  			120584
  		],
  		"mapped",
  		[
  			957
  		]
  	],
  	[
  		[
  			120585,
  			120585
  		],
  		"mapped",
  		[
  			958
  		]
  	],
  	[
  		[
  			120586,
  			120586
  		],
  		"mapped",
  		[
  			959
  		]
  	],
  	[
  		[
  			120587,
  			120587
  		],
  		"mapped",
  		[
  			960
  		]
  	],
  	[
  		[
  			120588,
  			120588
  		],
  		"mapped",
  		[
  			961
  		]
  	],
  	[
  		[
  			120589,
  			120590
  		],
  		"mapped",
  		[
  			963
  		]
  	],
  	[
  		[
  			120591,
  			120591
  		],
  		"mapped",
  		[
  			964
  		]
  	],
  	[
  		[
  			120592,
  			120592
  		],
  		"mapped",
  		[
  			965
  		]
  	],
  	[
  		[
  			120593,
  			120593
  		],
  		"mapped",
  		[
  			966
  		]
  	],
  	[
  		[
  			120594,
  			120594
  		],
  		"mapped",
  		[
  			967
  		]
  	],
  	[
  		[
  			120595,
  			120595
  		],
  		"mapped",
  		[
  			968
  		]
  	],
  	[
  		[
  			120596,
  			120596
  		],
  		"mapped",
  		[
  			969
  		]
  	],
  	[
  		[
  			120597,
  			120597
  		],
  		"mapped",
  		[
  			8706
  		]
  	],
  	[
  		[
  			120598,
  			120598
  		],
  		"mapped",
  		[
  			949
  		]
  	],
  	[
  		[
  			120599,
  			120599
  		],
  		"mapped",
  		[
  			952
  		]
  	],
  	[
  		[
  			120600,
  			120600
  		],
  		"mapped",
  		[
  			954
  		]
  	],
  	[
  		[
  			120601,
  			120601
  		],
  		"mapped",
  		[
  			966
  		]
  	],
  	[
  		[
  			120602,
  			120602
  		],
  		"mapped",
  		[
  			961
  		]
  	],
  	[
  		[
  			120603,
  			120603
  		],
  		"mapped",
  		[
  			960
  		]
  	],
  	[
  		[
  			120604,
  			120604
  		],
  		"mapped",
  		[
  			945
  		]
  	],
  	[
  		[
  			120605,
  			120605
  		],
  		"mapped",
  		[
  			946
  		]
  	],
  	[
  		[
  			120606,
  			120606
  		],
  		"mapped",
  		[
  			947
  		]
  	],
  	[
  		[
  			120607,
  			120607
  		],
  		"mapped",
  		[
  			948
  		]
  	],
  	[
  		[
  			120608,
  			120608
  		],
  		"mapped",
  		[
  			949
  		]
  	],
  	[
  		[
  			120609,
  			120609
  		],
  		"mapped",
  		[
  			950
  		]
  	],
  	[
  		[
  			120610,
  			120610
  		],
  		"mapped",
  		[
  			951
  		]
  	],
  	[
  		[
  			120611,
  			120611
  		],
  		"mapped",
  		[
  			952
  		]
  	],
  	[
  		[
  			120612,
  			120612
  		],
  		"mapped",
  		[
  			953
  		]
  	],
  	[
  		[
  			120613,
  			120613
  		],
  		"mapped",
  		[
  			954
  		]
  	],
  	[
  		[
  			120614,
  			120614
  		],
  		"mapped",
  		[
  			955
  		]
  	],
  	[
  		[
  			120615,
  			120615
  		],
  		"mapped",
  		[
  			956
  		]
  	],
  	[
  		[
  			120616,
  			120616
  		],
  		"mapped",
  		[
  			957
  		]
  	],
  	[
  		[
  			120617,
  			120617
  		],
  		"mapped",
  		[
  			958
  		]
  	],
  	[
  		[
  			120618,
  			120618
  		],
  		"mapped",
  		[
  			959
  		]
  	],
  	[
  		[
  			120619,
  			120619
  		],
  		"mapped",
  		[
  			960
  		]
  	],
  	[
  		[
  			120620,
  			120620
  		],
  		"mapped",
  		[
  			961
  		]
  	],
  	[
  		[
  			120621,
  			120621
  		],
  		"mapped",
  		[
  			952
  		]
  	],
  	[
  		[
  			120622,
  			120622
  		],
  		"mapped",
  		[
  			963
  		]
  	],
  	[
  		[
  			120623,
  			120623
  		],
  		"mapped",
  		[
  			964
  		]
  	],
  	[
  		[
  			120624,
  			120624
  		],
  		"mapped",
  		[
  			965
  		]
  	],
  	[
  		[
  			120625,
  			120625
  		],
  		"mapped",
  		[
  			966
  		]
  	],
  	[
  		[
  			120626,
  			120626
  		],
  		"mapped",
  		[
  			967
  		]
  	],
  	[
  		[
  			120627,
  			120627
  		],
  		"mapped",
  		[
  			968
  		]
  	],
  	[
  		[
  			120628,
  			120628
  		],
  		"mapped",
  		[
  			969
  		]
  	],
  	[
  		[
  			120629,
  			120629
  		],
  		"mapped",
  		[
  			8711
  		]
  	],
  	[
  		[
  			120630,
  			120630
  		],
  		"mapped",
  		[
  			945
  		]
  	],
  	[
  		[
  			120631,
  			120631
  		],
  		"mapped",
  		[
  			946
  		]
  	],
  	[
  		[
  			120632,
  			120632
  		],
  		"mapped",
  		[
  			947
  		]
  	],
  	[
  		[
  			120633,
  			120633
  		],
  		"mapped",
  		[
  			948
  		]
  	],
  	[
  		[
  			120634,
  			120634
  		],
  		"mapped",
  		[
  			949
  		]
  	],
  	[
  		[
  			120635,
  			120635
  		],
  		"mapped",
  		[
  			950
  		]
  	],
  	[
  		[
  			120636,
  			120636
  		],
  		"mapped",
  		[
  			951
  		]
  	],
  	[
  		[
  			120637,
  			120637
  		],
  		"mapped",
  		[
  			952
  		]
  	],
  	[
  		[
  			120638,
  			120638
  		],
  		"mapped",
  		[
  			953
  		]
  	],
  	[
  		[
  			120639,
  			120639
  		],
  		"mapped",
  		[
  			954
  		]
  	],
  	[
  		[
  			120640,
  			120640
  		],
  		"mapped",
  		[
  			955
  		]
  	],
  	[
  		[
  			120641,
  			120641
  		],
  		"mapped",
  		[
  			956
  		]
  	],
  	[
  		[
  			120642,
  			120642
  		],
  		"mapped",
  		[
  			957
  		]
  	],
  	[
  		[
  			120643,
  			120643
  		],
  		"mapped",
  		[
  			958
  		]
  	],
  	[
  		[
  			120644,
  			120644
  		],
  		"mapped",
  		[
  			959
  		]
  	],
  	[
  		[
  			120645,
  			120645
  		],
  		"mapped",
  		[
  			960
  		]
  	],
  	[
  		[
  			120646,
  			120646
  		],
  		"mapped",
  		[
  			961
  		]
  	],
  	[
  		[
  			120647,
  			120648
  		],
  		"mapped",
  		[
  			963
  		]
  	],
  	[
  		[
  			120649,
  			120649
  		],
  		"mapped",
  		[
  			964
  		]
  	],
  	[
  		[
  			120650,
  			120650
  		],
  		"mapped",
  		[
  			965
  		]
  	],
  	[
  		[
  			120651,
  			120651
  		],
  		"mapped",
  		[
  			966
  		]
  	],
  	[
  		[
  			120652,
  			120652
  		],
  		"mapped",
  		[
  			967
  		]
  	],
  	[
  		[
  			120653,
  			120653
  		],
  		"mapped",
  		[
  			968
  		]
  	],
  	[
  		[
  			120654,
  			120654
  		],
  		"mapped",
  		[
  			969
  		]
  	],
  	[
  		[
  			120655,
  			120655
  		],
  		"mapped",
  		[
  			8706
  		]
  	],
  	[
  		[
  			120656,
  			120656
  		],
  		"mapped",
  		[
  			949
  		]
  	],
  	[
  		[
  			120657,
  			120657
  		],
  		"mapped",
  		[
  			952
  		]
  	],
  	[
  		[
  			120658,
  			120658
  		],
  		"mapped",
  		[
  			954
  		]
  	],
  	[
  		[
  			120659,
  			120659
  		],
  		"mapped",
  		[
  			966
  		]
  	],
  	[
  		[
  			120660,
  			120660
  		],
  		"mapped",
  		[
  			961
  		]
  	],
  	[
  		[
  			120661,
  			120661
  		],
  		"mapped",
  		[
  			960
  		]
  	],
  	[
  		[
  			120662,
  			120662
  		],
  		"mapped",
  		[
  			945
  		]
  	],
  	[
  		[
  			120663,
  			120663
  		],
  		"mapped",
  		[
  			946
  		]
  	],
  	[
  		[
  			120664,
  			120664
  		],
  		"mapped",
  		[
  			947
  		]
  	],
  	[
  		[
  			120665,
  			120665
  		],
  		"mapped",
  		[
  			948
  		]
  	],
  	[
  		[
  			120666,
  			120666
  		],
  		"mapped",
  		[
  			949
  		]
  	],
  	[
  		[
  			120667,
  			120667
  		],
  		"mapped",
  		[
  			950
  		]
  	],
  	[
  		[
  			120668,
  			120668
  		],
  		"mapped",
  		[
  			951
  		]
  	],
  	[
  		[
  			120669,
  			120669
  		],
  		"mapped",
  		[
  			952
  		]
  	],
  	[
  		[
  			120670,
  			120670
  		],
  		"mapped",
  		[
  			953
  		]
  	],
  	[
  		[
  			120671,
  			120671
  		],
  		"mapped",
  		[
  			954
  		]
  	],
  	[
  		[
  			120672,
  			120672
  		],
  		"mapped",
  		[
  			955
  		]
  	],
  	[
  		[
  			120673,
  			120673
  		],
  		"mapped",
  		[
  			956
  		]
  	],
  	[
  		[
  			120674,
  			120674
  		],
  		"mapped",
  		[
  			957
  		]
  	],
  	[
  		[
  			120675,
  			120675
  		],
  		"mapped",
  		[
  			958
  		]
  	],
  	[
  		[
  			120676,
  			120676
  		],
  		"mapped",
  		[
  			959
  		]
  	],
  	[
  		[
  			120677,
  			120677
  		],
  		"mapped",
  		[
  			960
  		]
  	],
  	[
  		[
  			120678,
  			120678
  		],
  		"mapped",
  		[
  			961
  		]
  	],
  	[
  		[
  			120679,
  			120679
  		],
  		"mapped",
  		[
  			952
  		]
  	],
  	[
  		[
  			120680,
  			120680
  		],
  		"mapped",
  		[
  			963
  		]
  	],
  	[
  		[
  			120681,
  			120681
  		],
  		"mapped",
  		[
  			964
  		]
  	],
  	[
  		[
  			120682,
  			120682
  		],
  		"mapped",
  		[
  			965
  		]
  	],
  	[
  		[
  			120683,
  			120683
  		],
  		"mapped",
  		[
  			966
  		]
  	],
  	[
  		[
  			120684,
  			120684
  		],
  		"mapped",
  		[
  			967
  		]
  	],
  	[
  		[
  			120685,
  			120685
  		],
  		"mapped",
  		[
  			968
  		]
  	],
  	[
  		[
  			120686,
  			120686
  		],
  		"mapped",
  		[
  			969
  		]
  	],
  	[
  		[
  			120687,
  			120687
  		],
  		"mapped",
  		[
  			8711
  		]
  	],
  	[
  		[
  			120688,
  			120688
  		],
  		"mapped",
  		[
  			945
  		]
  	],
  	[
  		[
  			120689,
  			120689
  		],
  		"mapped",
  		[
  			946
  		]
  	],
  	[
  		[
  			120690,
  			120690
  		],
  		"mapped",
  		[
  			947
  		]
  	],
  	[
  		[
  			120691,
  			120691
  		],
  		"mapped",
  		[
  			948
  		]
  	],
  	[
  		[
  			120692,
  			120692
  		],
  		"mapped",
  		[
  			949
  		]
  	],
  	[
  		[
  			120693,
  			120693
  		],
  		"mapped",
  		[
  			950
  		]
  	],
  	[
  		[
  			120694,
  			120694
  		],
  		"mapped",
  		[
  			951
  		]
  	],
  	[
  		[
  			120695,
  			120695
  		],
  		"mapped",
  		[
  			952
  		]
  	],
  	[
  		[
  			120696,
  			120696
  		],
  		"mapped",
  		[
  			953
  		]
  	],
  	[
  		[
  			120697,
  			120697
  		],
  		"mapped",
  		[
  			954
  		]
  	],
  	[
  		[
  			120698,
  			120698
  		],
  		"mapped",
  		[
  			955
  		]
  	],
  	[
  		[
  			120699,
  			120699
  		],
  		"mapped",
  		[
  			956
  		]
  	],
  	[
  		[
  			120700,
  			120700
  		],
  		"mapped",
  		[
  			957
  		]
  	],
  	[
  		[
  			120701,
  			120701
  		],
  		"mapped",
  		[
  			958
  		]
  	],
  	[
  		[
  			120702,
  			120702
  		],
  		"mapped",
  		[
  			959
  		]
  	],
  	[
  		[
  			120703,
  			120703
  		],
  		"mapped",
  		[
  			960
  		]
  	],
  	[
  		[
  			120704,
  			120704
  		],
  		"mapped",
  		[
  			961
  		]
  	],
  	[
  		[
  			120705,
  			120706
  		],
  		"mapped",
  		[
  			963
  		]
  	],
  	[
  		[
  			120707,
  			120707
  		],
  		"mapped",
  		[
  			964
  		]
  	],
  	[
  		[
  			120708,
  			120708
  		],
  		"mapped",
  		[
  			965
  		]
  	],
  	[
  		[
  			120709,
  			120709
  		],
  		"mapped",
  		[
  			966
  		]
  	],
  	[
  		[
  			120710,
  			120710
  		],
  		"mapped",
  		[
  			967
  		]
  	],
  	[
  		[
  			120711,
  			120711
  		],
  		"mapped",
  		[
  			968
  		]
  	],
  	[
  		[
  			120712,
  			120712
  		],
  		"mapped",
  		[
  			969
  		]
  	],
  	[
  		[
  			120713,
  			120713
  		],
  		"mapped",
  		[
  			8706
  		]
  	],
  	[
  		[
  			120714,
  			120714
  		],
  		"mapped",
  		[
  			949
  		]
  	],
  	[
  		[
  			120715,
  			120715
  		],
  		"mapped",
  		[
  			952
  		]
  	],
  	[
  		[
  			120716,
  			120716
  		],
  		"mapped",
  		[
  			954
  		]
  	],
  	[
  		[
  			120717,
  			120717
  		],
  		"mapped",
  		[
  			966
  		]
  	],
  	[
  		[
  			120718,
  			120718
  		],
  		"mapped",
  		[
  			961
  		]
  	],
  	[
  		[
  			120719,
  			120719
  		],
  		"mapped",
  		[
  			960
  		]
  	],
  	[
  		[
  			120720,
  			120720
  		],
  		"mapped",
  		[
  			945
  		]
  	],
  	[
  		[
  			120721,
  			120721
  		],
  		"mapped",
  		[
  			946
  		]
  	],
  	[
  		[
  			120722,
  			120722
  		],
  		"mapped",
  		[
  			947
  		]
  	],
  	[
  		[
  			120723,
  			120723
  		],
  		"mapped",
  		[
  			948
  		]
  	],
  	[
  		[
  			120724,
  			120724
  		],
  		"mapped",
  		[
  			949
  		]
  	],
  	[
  		[
  			120725,
  			120725
  		],
  		"mapped",
  		[
  			950
  		]
  	],
  	[
  		[
  			120726,
  			120726
  		],
  		"mapped",
  		[
  			951
  		]
  	],
  	[
  		[
  			120727,
  			120727
  		],
  		"mapped",
  		[
  			952
  		]
  	],
  	[
  		[
  			120728,
  			120728
  		],
  		"mapped",
  		[
  			953
  		]
  	],
  	[
  		[
  			120729,
  			120729
  		],
  		"mapped",
  		[
  			954
  		]
  	],
  	[
  		[
  			120730,
  			120730
  		],
  		"mapped",
  		[
  			955
  		]
  	],
  	[
  		[
  			120731,
  			120731
  		],
  		"mapped",
  		[
  			956
  		]
  	],
  	[
  		[
  			120732,
  			120732
  		],
  		"mapped",
  		[
  			957
  		]
  	],
  	[
  		[
  			120733,
  			120733
  		],
  		"mapped",
  		[
  			958
  		]
  	],
  	[
  		[
  			120734,
  			120734
  		],
  		"mapped",
  		[
  			959
  		]
  	],
  	[
  		[
  			120735,
  			120735
  		],
  		"mapped",
  		[
  			960
  		]
  	],
  	[
  		[
  			120736,
  			120736
  		],
  		"mapped",
  		[
  			961
  		]
  	],
  	[
  		[
  			120737,
  			120737
  		],
  		"mapped",
  		[
  			952
  		]
  	],
  	[
  		[
  			120738,
  			120738
  		],
  		"mapped",
  		[
  			963
  		]
  	],
  	[
  		[
  			120739,
  			120739
  		],
  		"mapped",
  		[
  			964
  		]
  	],
  	[
  		[
  			120740,
  			120740
  		],
  		"mapped",
  		[
  			965
  		]
  	],
  	[
  		[
  			120741,
  			120741
  		],
  		"mapped",
  		[
  			966
  		]
  	],
  	[
  		[
  			120742,
  			120742
  		],
  		"mapped",
  		[
  			967
  		]
  	],
  	[
  		[
  			120743,
  			120743
  		],
  		"mapped",
  		[
  			968
  		]
  	],
  	[
  		[
  			120744,
  			120744
  		],
  		"mapped",
  		[
  			969
  		]
  	],
  	[
  		[
  			120745,
  			120745
  		],
  		"mapped",
  		[
  			8711
  		]
  	],
  	[
  		[
  			120746,
  			120746
  		],
  		"mapped",
  		[
  			945
  		]
  	],
  	[
  		[
  			120747,
  			120747
  		],
  		"mapped",
  		[
  			946
  		]
  	],
  	[
  		[
  			120748,
  			120748
  		],
  		"mapped",
  		[
  			947
  		]
  	],
  	[
  		[
  			120749,
  			120749
  		],
  		"mapped",
  		[
  			948
  		]
  	],
  	[
  		[
  			120750,
  			120750
  		],
  		"mapped",
  		[
  			949
  		]
  	],
  	[
  		[
  			120751,
  			120751
  		],
  		"mapped",
  		[
  			950
  		]
  	],
  	[
  		[
  			120752,
  			120752
  		],
  		"mapped",
  		[
  			951
  		]
  	],
  	[
  		[
  			120753,
  			120753
  		],
  		"mapped",
  		[
  			952
  		]
  	],
  	[
  		[
  			120754,
  			120754
  		],
  		"mapped",
  		[
  			953
  		]
  	],
  	[
  		[
  			120755,
  			120755
  		],
  		"mapped",
  		[
  			954
  		]
  	],
  	[
  		[
  			120756,
  			120756
  		],
  		"mapped",
  		[
  			955
  		]
  	],
  	[
  		[
  			120757,
  			120757
  		],
  		"mapped",
  		[
  			956
  		]
  	],
  	[
  		[
  			120758,
  			120758
  		],
  		"mapped",
  		[
  			957
  		]
  	],
  	[
  		[
  			120759,
  			120759
  		],
  		"mapped",
  		[
  			958
  		]
  	],
  	[
  		[
  			120760,
  			120760
  		],
  		"mapped",
  		[
  			959
  		]
  	],
  	[
  		[
  			120761,
  			120761
  		],
  		"mapped",
  		[
  			960
  		]
  	],
  	[
  		[
  			120762,
  			120762
  		],
  		"mapped",
  		[
  			961
  		]
  	],
  	[
  		[
  			120763,
  			120764
  		],
  		"mapped",
  		[
  			963
  		]
  	],
  	[
  		[
  			120765,
  			120765
  		],
  		"mapped",
  		[
  			964
  		]
  	],
  	[
  		[
  			120766,
  			120766
  		],
  		"mapped",
  		[
  			965
  		]
  	],
  	[
  		[
  			120767,
  			120767
  		],
  		"mapped",
  		[
  			966
  		]
  	],
  	[
  		[
  			120768,
  			120768
  		],
  		"mapped",
  		[
  			967
  		]
  	],
  	[
  		[
  			120769,
  			120769
  		],
  		"mapped",
  		[
  			968
  		]
  	],
  	[
  		[
  			120770,
  			120770
  		],
  		"mapped",
  		[
  			969
  		]
  	],
  	[
  		[
  			120771,
  			120771
  		],
  		"mapped",
  		[
  			8706
  		]
  	],
  	[
  		[
  			120772,
  			120772
  		],
  		"mapped",
  		[
  			949
  		]
  	],
  	[
  		[
  			120773,
  			120773
  		],
  		"mapped",
  		[
  			952
  		]
  	],
  	[
  		[
  			120774,
  			120774
  		],
  		"mapped",
  		[
  			954
  		]
  	],
  	[
  		[
  			120775,
  			120775
  		],
  		"mapped",
  		[
  			966
  		]
  	],
  	[
  		[
  			120776,
  			120776
  		],
  		"mapped",
  		[
  			961
  		]
  	],
  	[
  		[
  			120777,
  			120777
  		],
  		"mapped",
  		[
  			960
  		]
  	],
  	[
  		[
  			120778,
  			120779
  		],
  		"mapped",
  		[
  			989
  		]
  	],
  	[
  		[
  			120780,
  			120781
  		],
  		"disallowed"
  	],
  	[
  		[
  			120782,
  			120782
  		],
  		"mapped",
  		[
  			48
  		]
  	],
  	[
  		[
  			120783,
  			120783
  		],
  		"mapped",
  		[
  			49
  		]
  	],
  	[
  		[
  			120784,
  			120784
  		],
  		"mapped",
  		[
  			50
  		]
  	],
  	[
  		[
  			120785,
  			120785
  		],
  		"mapped",
  		[
  			51
  		]
  	],
  	[
  		[
  			120786,
  			120786
  		],
  		"mapped",
  		[
  			52
  		]
  	],
  	[
  		[
  			120787,
  			120787
  		],
  		"mapped",
  		[
  			53
  		]
  	],
  	[
  		[
  			120788,
  			120788
  		],
  		"mapped",
  		[
  			54
  		]
  	],
  	[
  		[
  			120789,
  			120789
  		],
  		"mapped",
  		[
  			55
  		]
  	],
  	[
  		[
  			120790,
  			120790
  		],
  		"mapped",
  		[
  			56
  		]
  	],
  	[
  		[
  			120791,
  			120791
  		],
  		"mapped",
  		[
  			57
  		]
  	],
  	[
  		[
  			120792,
  			120792
  		],
  		"mapped",
  		[
  			48
  		]
  	],
  	[
  		[
  			120793,
  			120793
  		],
  		"mapped",
  		[
  			49
  		]
  	],
  	[
  		[
  			120794,
  			120794
  		],
  		"mapped",
  		[
  			50
  		]
  	],
  	[
  		[
  			120795,
  			120795
  		],
  		"mapped",
  		[
  			51
  		]
  	],
  	[
  		[
  			120796,
  			120796
  		],
  		"mapped",
  		[
  			52
  		]
  	],
  	[
  		[
  			120797,
  			120797
  		],
  		"mapped",
  		[
  			53
  		]
  	],
  	[
  		[
  			120798,
  			120798
  		],
  		"mapped",
  		[
  			54
  		]
  	],
  	[
  		[
  			120799,
  			120799
  		],
  		"mapped",
  		[
  			55
  		]
  	],
  	[
  		[
  			120800,
  			120800
  		],
  		"mapped",
  		[
  			56
  		]
  	],
  	[
  		[
  			120801,
  			120801
  		],
  		"mapped",
  		[
  			57
  		]
  	],
  	[
  		[
  			120802,
  			120802
  		],
  		"mapped",
  		[
  			48
  		]
  	],
  	[
  		[
  			120803,
  			120803
  		],
  		"mapped",
  		[
  			49
  		]
  	],
  	[
  		[
  			120804,
  			120804
  		],
  		"mapped",
  		[
  			50
  		]
  	],
  	[
  		[
  			120805,
  			120805
  		],
  		"mapped",
  		[
  			51
  		]
  	],
  	[
  		[
  			120806,
  			120806
  		],
  		"mapped",
  		[
  			52
  		]
  	],
  	[
  		[
  			120807,
  			120807
  		],
  		"mapped",
  		[
  			53
  		]
  	],
  	[
  		[
  			120808,
  			120808
  		],
  		"mapped",
  		[
  			54
  		]
  	],
  	[
  		[
  			120809,
  			120809
  		],
  		"mapped",
  		[
  			55
  		]
  	],
  	[
  		[
  			120810,
  			120810
  		],
  		"mapped",
  		[
  			56
  		]
  	],
  	[
  		[
  			120811,
  			120811
  		],
  		"mapped",
  		[
  			57
  		]
  	],
  	[
  		[
  			120812,
  			120812
  		],
  		"mapped",
  		[
  			48
  		]
  	],
  	[
  		[
  			120813,
  			120813
  		],
  		"mapped",
  		[
  			49
  		]
  	],
  	[
  		[
  			120814,
  			120814
  		],
  		"mapped",
  		[
  			50
  		]
  	],
  	[
  		[
  			120815,
  			120815
  		],
  		"mapped",
  		[
  			51
  		]
  	],
  	[
  		[
  			120816,
  			120816
  		],
  		"mapped",
  		[
  			52
  		]
  	],
  	[
  		[
  			120817,
  			120817
  		],
  		"mapped",
  		[
  			53
  		]
  	],
  	[
  		[
  			120818,
  			120818
  		],
  		"mapped",
  		[
  			54
  		]
  	],
  	[
  		[
  			120819,
  			120819
  		],
  		"mapped",
  		[
  			55
  		]
  	],
  	[
  		[
  			120820,
  			120820
  		],
  		"mapped",
  		[
  			56
  		]
  	],
  	[
  		[
  			120821,
  			120821
  		],
  		"mapped",
  		[
  			57
  		]
  	],
  	[
  		[
  			120822,
  			120822
  		],
  		"mapped",
  		[
  			48
  		]
  	],
  	[
  		[
  			120823,
  			120823
  		],
  		"mapped",
  		[
  			49
  		]
  	],
  	[
  		[
  			120824,
  			120824
  		],
  		"mapped",
  		[
  			50
  		]
  	],
  	[
  		[
  			120825,
  			120825
  		],
  		"mapped",
  		[
  			51
  		]
  	],
  	[
  		[
  			120826,
  			120826
  		],
  		"mapped",
  		[
  			52
  		]
  	],
  	[
  		[
  			120827,
  			120827
  		],
  		"mapped",
  		[
  			53
  		]
  	],
  	[
  		[
  			120828,
  			120828
  		],
  		"mapped",
  		[
  			54
  		]
  	],
  	[
  		[
  			120829,
  			120829
  		],
  		"mapped",
  		[
  			55
  		]
  	],
  	[
  		[
  			120830,
  			120830
  		],
  		"mapped",
  		[
  			56
  		]
  	],
  	[
  		[
  			120831,
  			120831
  		],
  		"mapped",
  		[
  			57
  		]
  	],
  	[
  		[
  			120832,
  			121343
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			121344,
  			121398
  		],
  		"valid"
  	],
  	[
  		[
  			121399,
  			121402
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			121403,
  			121452
  		],
  		"valid"
  	],
  	[
  		[
  			121453,
  			121460
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			121461,
  			121461
  		],
  		"valid"
  	],
  	[
  		[
  			121462,
  			121475
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			121476,
  			121476
  		],
  		"valid"
  	],
  	[
  		[
  			121477,
  			121483
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			121484,
  			121498
  		],
  		"disallowed"
  	],
  	[
  		[
  			121499,
  			121503
  		],
  		"valid"
  	],
  	[
  		[
  			121504,
  			121504
  		],
  		"disallowed"
  	],
  	[
  		[
  			121505,
  			121519
  		],
  		"valid"
  	],
  	[
  		[
  			121520,
  			124927
  		],
  		"disallowed"
  	],
  	[
  		[
  			124928,
  			125124
  		],
  		"valid"
  	],
  	[
  		[
  			125125,
  			125126
  		],
  		"disallowed"
  	],
  	[
  		[
  			125127,
  			125135
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			125136,
  			125142
  		],
  		"valid"
  	],
  	[
  		[
  			125143,
  			126463
  		],
  		"disallowed"
  	],
  	[
  		[
  			126464,
  			126464
  		],
  		"mapped",
  		[
  			1575
  		]
  	],
  	[
  		[
  			126465,
  			126465
  		],
  		"mapped",
  		[
  			1576
  		]
  	],
  	[
  		[
  			126466,
  			126466
  		],
  		"mapped",
  		[
  			1580
  		]
  	],
  	[
  		[
  			126467,
  			126467
  		],
  		"mapped",
  		[
  			1583
  		]
  	],
  	[
  		[
  			126468,
  			126468
  		],
  		"disallowed"
  	],
  	[
  		[
  			126469,
  			126469
  		],
  		"mapped",
  		[
  			1608
  		]
  	],
  	[
  		[
  			126470,
  			126470
  		],
  		"mapped",
  		[
  			1586
  		]
  	],
  	[
  		[
  			126471,
  			126471
  		],
  		"mapped",
  		[
  			1581
  		]
  	],
  	[
  		[
  			126472,
  			126472
  		],
  		"mapped",
  		[
  			1591
  		]
  	],
  	[
  		[
  			126473,
  			126473
  		],
  		"mapped",
  		[
  			1610
  		]
  	],
  	[
  		[
  			126474,
  			126474
  		],
  		"mapped",
  		[
  			1603
  		]
  	],
  	[
  		[
  			126475,
  			126475
  		],
  		"mapped",
  		[
  			1604
  		]
  	],
  	[
  		[
  			126476,
  			126476
  		],
  		"mapped",
  		[
  			1605
  		]
  	],
  	[
  		[
  			126477,
  			126477
  		],
  		"mapped",
  		[
  			1606
  		]
  	],
  	[
  		[
  			126478,
  			126478
  		],
  		"mapped",
  		[
  			1587
  		]
  	],
  	[
  		[
  			126479,
  			126479
  		],
  		"mapped",
  		[
  			1593
  		]
  	],
  	[
  		[
  			126480,
  			126480
  		],
  		"mapped",
  		[
  			1601
  		]
  	],
  	[
  		[
  			126481,
  			126481
  		],
  		"mapped",
  		[
  			1589
  		]
  	],
  	[
  		[
  			126482,
  			126482
  		],
  		"mapped",
  		[
  			1602
  		]
  	],
  	[
  		[
  			126483,
  			126483
  		],
  		"mapped",
  		[
  			1585
  		]
  	],
  	[
  		[
  			126484,
  			126484
  		],
  		"mapped",
  		[
  			1588
  		]
  	],
  	[
  		[
  			126485,
  			126485
  		],
  		"mapped",
  		[
  			1578
  		]
  	],
  	[
  		[
  			126486,
  			126486
  		],
  		"mapped",
  		[
  			1579
  		]
  	],
  	[
  		[
  			126487,
  			126487
  		],
  		"mapped",
  		[
  			1582
  		]
  	],
  	[
  		[
  			126488,
  			126488
  		],
  		"mapped",
  		[
  			1584
  		]
  	],
  	[
  		[
  			126489,
  			126489
  		],
  		"mapped",
  		[
  			1590
  		]
  	],
  	[
  		[
  			126490,
  			126490
  		],
  		"mapped",
  		[
  			1592
  		]
  	],
  	[
  		[
  			126491,
  			126491
  		],
  		"mapped",
  		[
  			1594
  		]
  	],
  	[
  		[
  			126492,
  			126492
  		],
  		"mapped",
  		[
  			1646
  		]
  	],
  	[
  		[
  			126493,
  			126493
  		],
  		"mapped",
  		[
  			1722
  		]
  	],
  	[
  		[
  			126494,
  			126494
  		],
  		"mapped",
  		[
  			1697
  		]
  	],
  	[
  		[
  			126495,
  			126495
  		],
  		"mapped",
  		[
  			1647
  		]
  	],
  	[
  		[
  			126496,
  			126496
  		],
  		"disallowed"
  	],
  	[
  		[
  			126497,
  			126497
  		],
  		"mapped",
  		[
  			1576
  		]
  	],
  	[
  		[
  			126498,
  			126498
  		],
  		"mapped",
  		[
  			1580
  		]
  	],
  	[
  		[
  			126499,
  			126499
  		],
  		"disallowed"
  	],
  	[
  		[
  			126500,
  			126500
  		],
  		"mapped",
  		[
  			1607
  		]
  	],
  	[
  		[
  			126501,
  			126502
  		],
  		"disallowed"
  	],
  	[
  		[
  			126503,
  			126503
  		],
  		"mapped",
  		[
  			1581
  		]
  	],
  	[
  		[
  			126504,
  			126504
  		],
  		"disallowed"
  	],
  	[
  		[
  			126505,
  			126505
  		],
  		"mapped",
  		[
  			1610
  		]
  	],
  	[
  		[
  			126506,
  			126506
  		],
  		"mapped",
  		[
  			1603
  		]
  	],
  	[
  		[
  			126507,
  			126507
  		],
  		"mapped",
  		[
  			1604
  		]
  	],
  	[
  		[
  			126508,
  			126508
  		],
  		"mapped",
  		[
  			1605
  		]
  	],
  	[
  		[
  			126509,
  			126509
  		],
  		"mapped",
  		[
  			1606
  		]
  	],
  	[
  		[
  			126510,
  			126510
  		],
  		"mapped",
  		[
  			1587
  		]
  	],
  	[
  		[
  			126511,
  			126511
  		],
  		"mapped",
  		[
  			1593
  		]
  	],
  	[
  		[
  			126512,
  			126512
  		],
  		"mapped",
  		[
  			1601
  		]
  	],
  	[
  		[
  			126513,
  			126513
  		],
  		"mapped",
  		[
  			1589
  		]
  	],
  	[
  		[
  			126514,
  			126514
  		],
  		"mapped",
  		[
  			1602
  		]
  	],
  	[
  		[
  			126515,
  			126515
  		],
  		"disallowed"
  	],
  	[
  		[
  			126516,
  			126516
  		],
  		"mapped",
  		[
  			1588
  		]
  	],
  	[
  		[
  			126517,
  			126517
  		],
  		"mapped",
  		[
  			1578
  		]
  	],
  	[
  		[
  			126518,
  			126518
  		],
  		"mapped",
  		[
  			1579
  		]
  	],
  	[
  		[
  			126519,
  			126519
  		],
  		"mapped",
  		[
  			1582
  		]
  	],
  	[
  		[
  			126520,
  			126520
  		],
  		"disallowed"
  	],
  	[
  		[
  			126521,
  			126521
  		],
  		"mapped",
  		[
  			1590
  		]
  	],
  	[
  		[
  			126522,
  			126522
  		],
  		"disallowed"
  	],
  	[
  		[
  			126523,
  			126523
  		],
  		"mapped",
  		[
  			1594
  		]
  	],
  	[
  		[
  			126524,
  			126529
  		],
  		"disallowed"
  	],
  	[
  		[
  			126530,
  			126530
  		],
  		"mapped",
  		[
  			1580
  		]
  	],
  	[
  		[
  			126531,
  			126534
  		],
  		"disallowed"
  	],
  	[
  		[
  			126535,
  			126535
  		],
  		"mapped",
  		[
  			1581
  		]
  	],
  	[
  		[
  			126536,
  			126536
  		],
  		"disallowed"
  	],
  	[
  		[
  			126537,
  			126537
  		],
  		"mapped",
  		[
  			1610
  		]
  	],
  	[
  		[
  			126538,
  			126538
  		],
  		"disallowed"
  	],
  	[
  		[
  			126539,
  			126539
  		],
  		"mapped",
  		[
  			1604
  		]
  	],
  	[
  		[
  			126540,
  			126540
  		],
  		"disallowed"
  	],
  	[
  		[
  			126541,
  			126541
  		],
  		"mapped",
  		[
  			1606
  		]
  	],
  	[
  		[
  			126542,
  			126542
  		],
  		"mapped",
  		[
  			1587
  		]
  	],
  	[
  		[
  			126543,
  			126543
  		],
  		"mapped",
  		[
  			1593
  		]
  	],
  	[
  		[
  			126544,
  			126544
  		],
  		"disallowed"
  	],
  	[
  		[
  			126545,
  			126545
  		],
  		"mapped",
  		[
  			1589
  		]
  	],
  	[
  		[
  			126546,
  			126546
  		],
  		"mapped",
  		[
  			1602
  		]
  	],
  	[
  		[
  			126547,
  			126547
  		],
  		"disallowed"
  	],
  	[
  		[
  			126548,
  			126548
  		],
  		"mapped",
  		[
  			1588
  		]
  	],
  	[
  		[
  			126549,
  			126550
  		],
  		"disallowed"
  	],
  	[
  		[
  			126551,
  			126551
  		],
  		"mapped",
  		[
  			1582
  		]
  	],
  	[
  		[
  			126552,
  			126552
  		],
  		"disallowed"
  	],
  	[
  		[
  			126553,
  			126553
  		],
  		"mapped",
  		[
  			1590
  		]
  	],
  	[
  		[
  			126554,
  			126554
  		],
  		"disallowed"
  	],
  	[
  		[
  			126555,
  			126555
  		],
  		"mapped",
  		[
  			1594
  		]
  	],
  	[
  		[
  			126556,
  			126556
  		],
  		"disallowed"
  	],
  	[
  		[
  			126557,
  			126557
  		],
  		"mapped",
  		[
  			1722
  		]
  	],
  	[
  		[
  			126558,
  			126558
  		],
  		"disallowed"
  	],
  	[
  		[
  			126559,
  			126559
  		],
  		"mapped",
  		[
  			1647
  		]
  	],
  	[
  		[
  			126560,
  			126560
  		],
  		"disallowed"
  	],
  	[
  		[
  			126561,
  			126561
  		],
  		"mapped",
  		[
  			1576
  		]
  	],
  	[
  		[
  			126562,
  			126562
  		],
  		"mapped",
  		[
  			1580
  		]
  	],
  	[
  		[
  			126563,
  			126563
  		],
  		"disallowed"
  	],
  	[
  		[
  			126564,
  			126564
  		],
  		"mapped",
  		[
  			1607
  		]
  	],
  	[
  		[
  			126565,
  			126566
  		],
  		"disallowed"
  	],
  	[
  		[
  			126567,
  			126567
  		],
  		"mapped",
  		[
  			1581
  		]
  	],
  	[
  		[
  			126568,
  			126568
  		],
  		"mapped",
  		[
  			1591
  		]
  	],
  	[
  		[
  			126569,
  			126569
  		],
  		"mapped",
  		[
  			1610
  		]
  	],
  	[
  		[
  			126570,
  			126570
  		],
  		"mapped",
  		[
  			1603
  		]
  	],
  	[
  		[
  			126571,
  			126571
  		],
  		"disallowed"
  	],
  	[
  		[
  			126572,
  			126572
  		],
  		"mapped",
  		[
  			1605
  		]
  	],
  	[
  		[
  			126573,
  			126573
  		],
  		"mapped",
  		[
  			1606
  		]
  	],
  	[
  		[
  			126574,
  			126574
  		],
  		"mapped",
  		[
  			1587
  		]
  	],
  	[
  		[
  			126575,
  			126575
  		],
  		"mapped",
  		[
  			1593
  		]
  	],
  	[
  		[
  			126576,
  			126576
  		],
  		"mapped",
  		[
  			1601
  		]
  	],
  	[
  		[
  			126577,
  			126577
  		],
  		"mapped",
  		[
  			1589
  		]
  	],
  	[
  		[
  			126578,
  			126578
  		],
  		"mapped",
  		[
  			1602
  		]
  	],
  	[
  		[
  			126579,
  			126579
  		],
  		"disallowed"
  	],
  	[
  		[
  			126580,
  			126580
  		],
  		"mapped",
  		[
  			1588
  		]
  	],
  	[
  		[
  			126581,
  			126581
  		],
  		"mapped",
  		[
  			1578
  		]
  	],
  	[
  		[
  			126582,
  			126582
  		],
  		"mapped",
  		[
  			1579
  		]
  	],
  	[
  		[
  			126583,
  			126583
  		],
  		"mapped",
  		[
  			1582
  		]
  	],
  	[
  		[
  			126584,
  			126584
  		],
  		"disallowed"
  	],
  	[
  		[
  			126585,
  			126585
  		],
  		"mapped",
  		[
  			1590
  		]
  	],
  	[
  		[
  			126586,
  			126586
  		],
  		"mapped",
  		[
  			1592
  		]
  	],
  	[
  		[
  			126587,
  			126587
  		],
  		"mapped",
  		[
  			1594
  		]
  	],
  	[
  		[
  			126588,
  			126588
  		],
  		"mapped",
  		[
  			1646
  		]
  	],
  	[
  		[
  			126589,
  			126589
  		],
  		"disallowed"
  	],
  	[
  		[
  			126590,
  			126590
  		],
  		"mapped",
  		[
  			1697
  		]
  	],
  	[
  		[
  			126591,
  			126591
  		],
  		"disallowed"
  	],
  	[
  		[
  			126592,
  			126592
  		],
  		"mapped",
  		[
  			1575
  		]
  	],
  	[
  		[
  			126593,
  			126593
  		],
  		"mapped",
  		[
  			1576
  		]
  	],
  	[
  		[
  			126594,
  			126594
  		],
  		"mapped",
  		[
  			1580
  		]
  	],
  	[
  		[
  			126595,
  			126595
  		],
  		"mapped",
  		[
  			1583
  		]
  	],
  	[
  		[
  			126596,
  			126596
  		],
  		"mapped",
  		[
  			1607
  		]
  	],
  	[
  		[
  			126597,
  			126597
  		],
  		"mapped",
  		[
  			1608
  		]
  	],
  	[
  		[
  			126598,
  			126598
  		],
  		"mapped",
  		[
  			1586
  		]
  	],
  	[
  		[
  			126599,
  			126599
  		],
  		"mapped",
  		[
  			1581
  		]
  	],
  	[
  		[
  			126600,
  			126600
  		],
  		"mapped",
  		[
  			1591
  		]
  	],
  	[
  		[
  			126601,
  			126601
  		],
  		"mapped",
  		[
  			1610
  		]
  	],
  	[
  		[
  			126602,
  			126602
  		],
  		"disallowed"
  	],
  	[
  		[
  			126603,
  			126603
  		],
  		"mapped",
  		[
  			1604
  		]
  	],
  	[
  		[
  			126604,
  			126604
  		],
  		"mapped",
  		[
  			1605
  		]
  	],
  	[
  		[
  			126605,
  			126605
  		],
  		"mapped",
  		[
  			1606
  		]
  	],
  	[
  		[
  			126606,
  			126606
  		],
  		"mapped",
  		[
  			1587
  		]
  	],
  	[
  		[
  			126607,
  			126607
  		],
  		"mapped",
  		[
  			1593
  		]
  	],
  	[
  		[
  			126608,
  			126608
  		],
  		"mapped",
  		[
  			1601
  		]
  	],
  	[
  		[
  			126609,
  			126609
  		],
  		"mapped",
  		[
  			1589
  		]
  	],
  	[
  		[
  			126610,
  			126610
  		],
  		"mapped",
  		[
  			1602
  		]
  	],
  	[
  		[
  			126611,
  			126611
  		],
  		"mapped",
  		[
  			1585
  		]
  	],
  	[
  		[
  			126612,
  			126612
  		],
  		"mapped",
  		[
  			1588
  		]
  	],
  	[
  		[
  			126613,
  			126613
  		],
  		"mapped",
  		[
  			1578
  		]
  	],
  	[
  		[
  			126614,
  			126614
  		],
  		"mapped",
  		[
  			1579
  		]
  	],
  	[
  		[
  			126615,
  			126615
  		],
  		"mapped",
  		[
  			1582
  		]
  	],
  	[
  		[
  			126616,
  			126616
  		],
  		"mapped",
  		[
  			1584
  		]
  	],
  	[
  		[
  			126617,
  			126617
  		],
  		"mapped",
  		[
  			1590
  		]
  	],
  	[
  		[
  			126618,
  			126618
  		],
  		"mapped",
  		[
  			1592
  		]
  	],
  	[
  		[
  			126619,
  			126619
  		],
  		"mapped",
  		[
  			1594
  		]
  	],
  	[
  		[
  			126620,
  			126624
  		],
  		"disallowed"
  	],
  	[
  		[
  			126625,
  			126625
  		],
  		"mapped",
  		[
  			1576
  		]
  	],
  	[
  		[
  			126626,
  			126626
  		],
  		"mapped",
  		[
  			1580
  		]
  	],
  	[
  		[
  			126627,
  			126627
  		],
  		"mapped",
  		[
  			1583
  		]
  	],
  	[
  		[
  			126628,
  			126628
  		],
  		"disallowed"
  	],
  	[
  		[
  			126629,
  			126629
  		],
  		"mapped",
  		[
  			1608
  		]
  	],
  	[
  		[
  			126630,
  			126630
  		],
  		"mapped",
  		[
  			1586
  		]
  	],
  	[
  		[
  			126631,
  			126631
  		],
  		"mapped",
  		[
  			1581
  		]
  	],
  	[
  		[
  			126632,
  			126632
  		],
  		"mapped",
  		[
  			1591
  		]
  	],
  	[
  		[
  			126633,
  			126633
  		],
  		"mapped",
  		[
  			1610
  		]
  	],
  	[
  		[
  			126634,
  			126634
  		],
  		"disallowed"
  	],
  	[
  		[
  			126635,
  			126635
  		],
  		"mapped",
  		[
  			1604
  		]
  	],
  	[
  		[
  			126636,
  			126636
  		],
  		"mapped",
  		[
  			1605
  		]
  	],
  	[
  		[
  			126637,
  			126637
  		],
  		"mapped",
  		[
  			1606
  		]
  	],
  	[
  		[
  			126638,
  			126638
  		],
  		"mapped",
  		[
  			1587
  		]
  	],
  	[
  		[
  			126639,
  			126639
  		],
  		"mapped",
  		[
  			1593
  		]
  	],
  	[
  		[
  			126640,
  			126640
  		],
  		"mapped",
  		[
  			1601
  		]
  	],
  	[
  		[
  			126641,
  			126641
  		],
  		"mapped",
  		[
  			1589
  		]
  	],
  	[
  		[
  			126642,
  			126642
  		],
  		"mapped",
  		[
  			1602
  		]
  	],
  	[
  		[
  			126643,
  			126643
  		],
  		"mapped",
  		[
  			1585
  		]
  	],
  	[
  		[
  			126644,
  			126644
  		],
  		"mapped",
  		[
  			1588
  		]
  	],
  	[
  		[
  			126645,
  			126645
  		],
  		"mapped",
  		[
  			1578
  		]
  	],
  	[
  		[
  			126646,
  			126646
  		],
  		"mapped",
  		[
  			1579
  		]
  	],
  	[
  		[
  			126647,
  			126647
  		],
  		"mapped",
  		[
  			1582
  		]
  	],
  	[
  		[
  			126648,
  			126648
  		],
  		"mapped",
  		[
  			1584
  		]
  	],
  	[
  		[
  			126649,
  			126649
  		],
  		"mapped",
  		[
  			1590
  		]
  	],
  	[
  		[
  			126650,
  			126650
  		],
  		"mapped",
  		[
  			1592
  		]
  	],
  	[
  		[
  			126651,
  			126651
  		],
  		"mapped",
  		[
  			1594
  		]
  	],
  	[
  		[
  			126652,
  			126703
  		],
  		"disallowed"
  	],
  	[
  		[
  			126704,
  			126705
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			126706,
  			126975
  		],
  		"disallowed"
  	],
  	[
  		[
  			126976,
  			127019
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			127020,
  			127023
  		],
  		"disallowed"
  	],
  	[
  		[
  			127024,
  			127123
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			127124,
  			127135
  		],
  		"disallowed"
  	],
  	[
  		[
  			127136,
  			127150
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			127151,
  			127152
  		],
  		"disallowed"
  	],
  	[
  		[
  			127153,
  			127166
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			127167,
  			127167
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			127168,
  			127168
  		],
  		"disallowed"
  	],
  	[
  		[
  			127169,
  			127183
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			127184,
  			127184
  		],
  		"disallowed"
  	],
  	[
  		[
  			127185,
  			127199
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			127200,
  			127221
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			127222,
  			127231
  		],
  		"disallowed"
  	],
  	[
  		[
  			127232,
  			127232
  		],
  		"disallowed"
  	],
  	[
  		[
  			127233,
  			127233
  		],
  		"disallowed_STD3_mapped",
  		[
  			48,
  			44
  		]
  	],
  	[
  		[
  			127234,
  			127234
  		],
  		"disallowed_STD3_mapped",
  		[
  			49,
  			44
  		]
  	],
  	[
  		[
  			127235,
  			127235
  		],
  		"disallowed_STD3_mapped",
  		[
  			50,
  			44
  		]
  	],
  	[
  		[
  			127236,
  			127236
  		],
  		"disallowed_STD3_mapped",
  		[
  			51,
  			44
  		]
  	],
  	[
  		[
  			127237,
  			127237
  		],
  		"disallowed_STD3_mapped",
  		[
  			52,
  			44
  		]
  	],
  	[
  		[
  			127238,
  			127238
  		],
  		"disallowed_STD3_mapped",
  		[
  			53,
  			44
  		]
  	],
  	[
  		[
  			127239,
  			127239
  		],
  		"disallowed_STD3_mapped",
  		[
  			54,
  			44
  		]
  	],
  	[
  		[
  			127240,
  			127240
  		],
  		"disallowed_STD3_mapped",
  		[
  			55,
  			44
  		]
  	],
  	[
  		[
  			127241,
  			127241
  		],
  		"disallowed_STD3_mapped",
  		[
  			56,
  			44
  		]
  	],
  	[
  		[
  			127242,
  			127242
  		],
  		"disallowed_STD3_mapped",
  		[
  			57,
  			44
  		]
  	],
  	[
  		[
  			127243,
  			127244
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			127245,
  			127247
  		],
  		"disallowed"
  	],
  	[
  		[
  			127248,
  			127248
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			97,
  			41
  		]
  	],
  	[
  		[
  			127249,
  			127249
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			98,
  			41
  		]
  	],
  	[
  		[
  			127250,
  			127250
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			99,
  			41
  		]
  	],
  	[
  		[
  			127251,
  			127251
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			100,
  			41
  		]
  	],
  	[
  		[
  			127252,
  			127252
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			101,
  			41
  		]
  	],
  	[
  		[
  			127253,
  			127253
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			102,
  			41
  		]
  	],
  	[
  		[
  			127254,
  			127254
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			103,
  			41
  		]
  	],
  	[
  		[
  			127255,
  			127255
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			104,
  			41
  		]
  	],
  	[
  		[
  			127256,
  			127256
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			105,
  			41
  		]
  	],
  	[
  		[
  			127257,
  			127257
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			106,
  			41
  		]
  	],
  	[
  		[
  			127258,
  			127258
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			107,
  			41
  		]
  	],
  	[
  		[
  			127259,
  			127259
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			108,
  			41
  		]
  	],
  	[
  		[
  			127260,
  			127260
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			109,
  			41
  		]
  	],
  	[
  		[
  			127261,
  			127261
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			110,
  			41
  		]
  	],
  	[
  		[
  			127262,
  			127262
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			111,
  			41
  		]
  	],
  	[
  		[
  			127263,
  			127263
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			112,
  			41
  		]
  	],
  	[
  		[
  			127264,
  			127264
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			113,
  			41
  		]
  	],
  	[
  		[
  			127265,
  			127265
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			114,
  			41
  		]
  	],
  	[
  		[
  			127266,
  			127266
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			115,
  			41
  		]
  	],
  	[
  		[
  			127267,
  			127267
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			116,
  			41
  		]
  	],
  	[
  		[
  			127268,
  			127268
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			117,
  			41
  		]
  	],
  	[
  		[
  			127269,
  			127269
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			118,
  			41
  		]
  	],
  	[
  		[
  			127270,
  			127270
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			119,
  			41
  		]
  	],
  	[
  		[
  			127271,
  			127271
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			120,
  			41
  		]
  	],
  	[
  		[
  			127272,
  			127272
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			121,
  			41
  		]
  	],
  	[
  		[
  			127273,
  			127273
  		],
  		"disallowed_STD3_mapped",
  		[
  			40,
  			122,
  			41
  		]
  	],
  	[
  		[
  			127274,
  			127274
  		],
  		"mapped",
  		[
  			12308,
  			115,
  			12309
  		]
  	],
  	[
  		[
  			127275,
  			127275
  		],
  		"mapped",
  		[
  			99
  		]
  	],
  	[
  		[
  			127276,
  			127276
  		],
  		"mapped",
  		[
  			114
  		]
  	],
  	[
  		[
  			127277,
  			127277
  		],
  		"mapped",
  		[
  			99,
  			100
  		]
  	],
  	[
  		[
  			127278,
  			127278
  		],
  		"mapped",
  		[
  			119,
  			122
  		]
  	],
  	[
  		[
  			127279,
  			127279
  		],
  		"disallowed"
  	],
  	[
  		[
  			127280,
  			127280
  		],
  		"mapped",
  		[
  			97
  		]
  	],
  	[
  		[
  			127281,
  			127281
  		],
  		"mapped",
  		[
  			98
  		]
  	],
  	[
  		[
  			127282,
  			127282
  		],
  		"mapped",
  		[
  			99
  		]
  	],
  	[
  		[
  			127283,
  			127283
  		],
  		"mapped",
  		[
  			100
  		]
  	],
  	[
  		[
  			127284,
  			127284
  		],
  		"mapped",
  		[
  			101
  		]
  	],
  	[
  		[
  			127285,
  			127285
  		],
  		"mapped",
  		[
  			102
  		]
  	],
  	[
  		[
  			127286,
  			127286
  		],
  		"mapped",
  		[
  			103
  		]
  	],
  	[
  		[
  			127287,
  			127287
  		],
  		"mapped",
  		[
  			104
  		]
  	],
  	[
  		[
  			127288,
  			127288
  		],
  		"mapped",
  		[
  			105
  		]
  	],
  	[
  		[
  			127289,
  			127289
  		],
  		"mapped",
  		[
  			106
  		]
  	],
  	[
  		[
  			127290,
  			127290
  		],
  		"mapped",
  		[
  			107
  		]
  	],
  	[
  		[
  			127291,
  			127291
  		],
  		"mapped",
  		[
  			108
  		]
  	],
  	[
  		[
  			127292,
  			127292
  		],
  		"mapped",
  		[
  			109
  		]
  	],
  	[
  		[
  			127293,
  			127293
  		],
  		"mapped",
  		[
  			110
  		]
  	],
  	[
  		[
  			127294,
  			127294
  		],
  		"mapped",
  		[
  			111
  		]
  	],
  	[
  		[
  			127295,
  			127295
  		],
  		"mapped",
  		[
  			112
  		]
  	],
  	[
  		[
  			127296,
  			127296
  		],
  		"mapped",
  		[
  			113
  		]
  	],
  	[
  		[
  			127297,
  			127297
  		],
  		"mapped",
  		[
  			114
  		]
  	],
  	[
  		[
  			127298,
  			127298
  		],
  		"mapped",
  		[
  			115
  		]
  	],
  	[
  		[
  			127299,
  			127299
  		],
  		"mapped",
  		[
  			116
  		]
  	],
  	[
  		[
  			127300,
  			127300
  		],
  		"mapped",
  		[
  			117
  		]
  	],
  	[
  		[
  			127301,
  			127301
  		],
  		"mapped",
  		[
  			118
  		]
  	],
  	[
  		[
  			127302,
  			127302
  		],
  		"mapped",
  		[
  			119
  		]
  	],
  	[
  		[
  			127303,
  			127303
  		],
  		"mapped",
  		[
  			120
  		]
  	],
  	[
  		[
  			127304,
  			127304
  		],
  		"mapped",
  		[
  			121
  		]
  	],
  	[
  		[
  			127305,
  			127305
  		],
  		"mapped",
  		[
  			122
  		]
  	],
  	[
  		[
  			127306,
  			127306
  		],
  		"mapped",
  		[
  			104,
  			118
  		]
  	],
  	[
  		[
  			127307,
  			127307
  		],
  		"mapped",
  		[
  			109,
  			118
  		]
  	],
  	[
  		[
  			127308,
  			127308
  		],
  		"mapped",
  		[
  			115,
  			100
  		]
  	],
  	[
  		[
  			127309,
  			127309
  		],
  		"mapped",
  		[
  			115,
  			115
  		]
  	],
  	[
  		[
  			127310,
  			127310
  		],
  		"mapped",
  		[
  			112,
  			112,
  			118
  		]
  	],
  	[
  		[
  			127311,
  			127311
  		],
  		"mapped",
  		[
  			119,
  			99
  		]
  	],
  	[
  		[
  			127312,
  			127318
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			127319,
  			127319
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			127320,
  			127326
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			127327,
  			127327
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			127328,
  			127337
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			127338,
  			127338
  		],
  		"mapped",
  		[
  			109,
  			99
  		]
  	],
  	[
  		[
  			127339,
  			127339
  		],
  		"mapped",
  		[
  			109,
  			100
  		]
  	],
  	[
  		[
  			127340,
  			127343
  		],
  		"disallowed"
  	],
  	[
  		[
  			127344,
  			127352
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			127353,
  			127353
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			127354,
  			127354
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			127355,
  			127356
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			127357,
  			127358
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			127359,
  			127359
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			127360,
  			127369
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			127370,
  			127373
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			127374,
  			127375
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			127376,
  			127376
  		],
  		"mapped",
  		[
  			100,
  			106
  		]
  	],
  	[
  		[
  			127377,
  			127386
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			127387,
  			127461
  		],
  		"disallowed"
  	],
  	[
  		[
  			127462,
  			127487
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			127488,
  			127488
  		],
  		"mapped",
  		[
  			12411,
  			12363
  		]
  	],
  	[
  		[
  			127489,
  			127489
  		],
  		"mapped",
  		[
  			12467,
  			12467
  		]
  	],
  	[
  		[
  			127490,
  			127490
  		],
  		"mapped",
  		[
  			12469
  		]
  	],
  	[
  		[
  			127491,
  			127503
  		],
  		"disallowed"
  	],
  	[
  		[
  			127504,
  			127504
  		],
  		"mapped",
  		[
  			25163
  		]
  	],
  	[
  		[
  			127505,
  			127505
  		],
  		"mapped",
  		[
  			23383
  		]
  	],
  	[
  		[
  			127506,
  			127506
  		],
  		"mapped",
  		[
  			21452
  		]
  	],
  	[
  		[
  			127507,
  			127507
  		],
  		"mapped",
  		[
  			12487
  		]
  	],
  	[
  		[
  			127508,
  			127508
  		],
  		"mapped",
  		[
  			20108
  		]
  	],
  	[
  		[
  			127509,
  			127509
  		],
  		"mapped",
  		[
  			22810
  		]
  	],
  	[
  		[
  			127510,
  			127510
  		],
  		"mapped",
  		[
  			35299
  		]
  	],
  	[
  		[
  			127511,
  			127511
  		],
  		"mapped",
  		[
  			22825
  		]
  	],
  	[
  		[
  			127512,
  			127512
  		],
  		"mapped",
  		[
  			20132
  		]
  	],
  	[
  		[
  			127513,
  			127513
  		],
  		"mapped",
  		[
  			26144
  		]
  	],
  	[
  		[
  			127514,
  			127514
  		],
  		"mapped",
  		[
  			28961
  		]
  	],
  	[
  		[
  			127515,
  			127515
  		],
  		"mapped",
  		[
  			26009
  		]
  	],
  	[
  		[
  			127516,
  			127516
  		],
  		"mapped",
  		[
  			21069
  		]
  	],
  	[
  		[
  			127517,
  			127517
  		],
  		"mapped",
  		[
  			24460
  		]
  	],
  	[
  		[
  			127518,
  			127518
  		],
  		"mapped",
  		[
  			20877
  		]
  	],
  	[
  		[
  			127519,
  			127519
  		],
  		"mapped",
  		[
  			26032
  		]
  	],
  	[
  		[
  			127520,
  			127520
  		],
  		"mapped",
  		[
  			21021
  		]
  	],
  	[
  		[
  			127521,
  			127521
  		],
  		"mapped",
  		[
  			32066
  		]
  	],
  	[
  		[
  			127522,
  			127522
  		],
  		"mapped",
  		[
  			29983
  		]
  	],
  	[
  		[
  			127523,
  			127523
  		],
  		"mapped",
  		[
  			36009
  		]
  	],
  	[
  		[
  			127524,
  			127524
  		],
  		"mapped",
  		[
  			22768
  		]
  	],
  	[
  		[
  			127525,
  			127525
  		],
  		"mapped",
  		[
  			21561
  		]
  	],
  	[
  		[
  			127526,
  			127526
  		],
  		"mapped",
  		[
  			28436
  		]
  	],
  	[
  		[
  			127527,
  			127527
  		],
  		"mapped",
  		[
  			25237
  		]
  	],
  	[
  		[
  			127528,
  			127528
  		],
  		"mapped",
  		[
  			25429
  		]
  	],
  	[
  		[
  			127529,
  			127529
  		],
  		"mapped",
  		[
  			19968
  		]
  	],
  	[
  		[
  			127530,
  			127530
  		],
  		"mapped",
  		[
  			19977
  		]
  	],
  	[
  		[
  			127531,
  			127531
  		],
  		"mapped",
  		[
  			36938
  		]
  	],
  	[
  		[
  			127532,
  			127532
  		],
  		"mapped",
  		[
  			24038
  		]
  	],
  	[
  		[
  			127533,
  			127533
  		],
  		"mapped",
  		[
  			20013
  		]
  	],
  	[
  		[
  			127534,
  			127534
  		],
  		"mapped",
  		[
  			21491
  		]
  	],
  	[
  		[
  			127535,
  			127535
  		],
  		"mapped",
  		[
  			25351
  		]
  	],
  	[
  		[
  			127536,
  			127536
  		],
  		"mapped",
  		[
  			36208
  		]
  	],
  	[
  		[
  			127537,
  			127537
  		],
  		"mapped",
  		[
  			25171
  		]
  	],
  	[
  		[
  			127538,
  			127538
  		],
  		"mapped",
  		[
  			31105
  		]
  	],
  	[
  		[
  			127539,
  			127539
  		],
  		"mapped",
  		[
  			31354
  		]
  	],
  	[
  		[
  			127540,
  			127540
  		],
  		"mapped",
  		[
  			21512
  		]
  	],
  	[
  		[
  			127541,
  			127541
  		],
  		"mapped",
  		[
  			28288
  		]
  	],
  	[
  		[
  			127542,
  			127542
  		],
  		"mapped",
  		[
  			26377
  		]
  	],
  	[
  		[
  			127543,
  			127543
  		],
  		"mapped",
  		[
  			26376
  		]
  	],
  	[
  		[
  			127544,
  			127544
  		],
  		"mapped",
  		[
  			30003
  		]
  	],
  	[
  		[
  			127545,
  			127545
  		],
  		"mapped",
  		[
  			21106
  		]
  	],
  	[
  		[
  			127546,
  			127546
  		],
  		"mapped",
  		[
  			21942
  		]
  	],
  	[
  		[
  			127547,
  			127551
  		],
  		"disallowed"
  	],
  	[
  		[
  			127552,
  			127552
  		],
  		"mapped",
  		[
  			12308,
  			26412,
  			12309
  		]
  	],
  	[
  		[
  			127553,
  			127553
  		],
  		"mapped",
  		[
  			12308,
  			19977,
  			12309
  		]
  	],
  	[
  		[
  			127554,
  			127554
  		],
  		"mapped",
  		[
  			12308,
  			20108,
  			12309
  		]
  	],
  	[
  		[
  			127555,
  			127555
  		],
  		"mapped",
  		[
  			12308,
  			23433,
  			12309
  		]
  	],
  	[
  		[
  			127556,
  			127556
  		],
  		"mapped",
  		[
  			12308,
  			28857,
  			12309
  		]
  	],
  	[
  		[
  			127557,
  			127557
  		],
  		"mapped",
  		[
  			12308,
  			25171,
  			12309
  		]
  	],
  	[
  		[
  			127558,
  			127558
  		],
  		"mapped",
  		[
  			12308,
  			30423,
  			12309
  		]
  	],
  	[
  		[
  			127559,
  			127559
  		],
  		"mapped",
  		[
  			12308,
  			21213,
  			12309
  		]
  	],
  	[
  		[
  			127560,
  			127560
  		],
  		"mapped",
  		[
  			12308,
  			25943,
  			12309
  		]
  	],
  	[
  		[
  			127561,
  			127567
  		],
  		"disallowed"
  	],
  	[
  		[
  			127568,
  			127568
  		],
  		"mapped",
  		[
  			24471
  		]
  	],
  	[
  		[
  			127569,
  			127569
  		],
  		"mapped",
  		[
  			21487
  		]
  	],
  	[
  		[
  			127570,
  			127743
  		],
  		"disallowed"
  	],
  	[
  		[
  			127744,
  			127776
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			127777,
  			127788
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			127789,
  			127791
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			127792,
  			127797
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			127798,
  			127798
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			127799,
  			127868
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			127869,
  			127869
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			127870,
  			127871
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			127872,
  			127891
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			127892,
  			127903
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			127904,
  			127940
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			127941,
  			127941
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			127942,
  			127946
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			127947,
  			127950
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			127951,
  			127955
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			127956,
  			127967
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			127968,
  			127984
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			127985,
  			127991
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			127992,
  			127999
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128000,
  			128062
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128063,
  			128063
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128064,
  			128064
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128065,
  			128065
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128066,
  			128247
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128248,
  			128248
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128249,
  			128252
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128253,
  			128254
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128255,
  			128255
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128256,
  			128317
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128318,
  			128319
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128320,
  			128323
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128324,
  			128330
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128331,
  			128335
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128336,
  			128359
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128360,
  			128377
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128378,
  			128378
  		],
  		"disallowed"
  	],
  	[
  		[
  			128379,
  			128419
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128420,
  			128420
  		],
  		"disallowed"
  	],
  	[
  		[
  			128421,
  			128506
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128507,
  			128511
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128512,
  			128512
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128513,
  			128528
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128529,
  			128529
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128530,
  			128532
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128533,
  			128533
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128534,
  			128534
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128535,
  			128535
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128536,
  			128536
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128537,
  			128537
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128538,
  			128538
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128539,
  			128539
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128540,
  			128542
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128543,
  			128543
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128544,
  			128549
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128550,
  			128551
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128552,
  			128555
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128556,
  			128556
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128557,
  			128557
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128558,
  			128559
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128560,
  			128563
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128564,
  			128564
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128565,
  			128576
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128577,
  			128578
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128579,
  			128580
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128581,
  			128591
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128592,
  			128639
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128640,
  			128709
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128710,
  			128719
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128720,
  			128720
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128721,
  			128735
  		],
  		"disallowed"
  	],
  	[
  		[
  			128736,
  			128748
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128749,
  			128751
  		],
  		"disallowed"
  	],
  	[
  		[
  			128752,
  			128755
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128756,
  			128767
  		],
  		"disallowed"
  	],
  	[
  		[
  			128768,
  			128883
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128884,
  			128895
  		],
  		"disallowed"
  	],
  	[
  		[
  			128896,
  			128980
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			128981,
  			129023
  		],
  		"disallowed"
  	],
  	[
  		[
  			129024,
  			129035
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			129036,
  			129039
  		],
  		"disallowed"
  	],
  	[
  		[
  			129040,
  			129095
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			129096,
  			129103
  		],
  		"disallowed"
  	],
  	[
  		[
  			129104,
  			129113
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			129114,
  			129119
  		],
  		"disallowed"
  	],
  	[
  		[
  			129120,
  			129159
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			129160,
  			129167
  		],
  		"disallowed"
  	],
  	[
  		[
  			129168,
  			129197
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			129198,
  			129295
  		],
  		"disallowed"
  	],
  	[
  		[
  			129296,
  			129304
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			129305,
  			129407
  		],
  		"disallowed"
  	],
  	[
  		[
  			129408,
  			129412
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			129413,
  			129471
  		],
  		"disallowed"
  	],
  	[
  		[
  			129472,
  			129472
  		],
  		"valid",
  		[
  		],
  		"NV8"
  	],
  	[
  		[
  			129473,
  			131069
  		],
  		"disallowed"
  	],
  	[
  		[
  			131070,
  			131071
  		],
  		"disallowed"
  	],
  	[
  		[
  			131072,
  			173782
  		],
  		"valid"
  	],
  	[
  		[
  			173783,
  			173823
  		],
  		"disallowed"
  	],
  	[
  		[
  			173824,
  			177972
  		],
  		"valid"
  	],
  	[
  		[
  			177973,
  			177983
  		],
  		"disallowed"
  	],
  	[
  		[
  			177984,
  			178205
  		],
  		"valid"
  	],
  	[
  		[
  			178206,
  			178207
  		],
  		"disallowed"
  	],
  	[
  		[
  			178208,
  			183969
  		],
  		"valid"
  	],
  	[
  		[
  			183970,
  			194559
  		],
  		"disallowed"
  	],
  	[
  		[
  			194560,
  			194560
  		],
  		"mapped",
  		[
  			20029
  		]
  	],
  	[
  		[
  			194561,
  			194561
  		],
  		"mapped",
  		[
  			20024
  		]
  	],
  	[
  		[
  			194562,
  			194562
  		],
  		"mapped",
  		[
  			20033
  		]
  	],
  	[
  		[
  			194563,
  			194563
  		],
  		"mapped",
  		[
  			131362
  		]
  	],
  	[
  		[
  			194564,
  			194564
  		],
  		"mapped",
  		[
  			20320
  		]
  	],
  	[
  		[
  			194565,
  			194565
  		],
  		"mapped",
  		[
  			20398
  		]
  	],
  	[
  		[
  			194566,
  			194566
  		],
  		"mapped",
  		[
  			20411
  		]
  	],
  	[
  		[
  			194567,
  			194567
  		],
  		"mapped",
  		[
  			20482
  		]
  	],
  	[
  		[
  			194568,
  			194568
  		],
  		"mapped",
  		[
  			20602
  		]
  	],
  	[
  		[
  			194569,
  			194569
  		],
  		"mapped",
  		[
  			20633
  		]
  	],
  	[
  		[
  			194570,
  			194570
  		],
  		"mapped",
  		[
  			20711
  		]
  	],
  	[
  		[
  			194571,
  			194571
  		],
  		"mapped",
  		[
  			20687
  		]
  	],
  	[
  		[
  			194572,
  			194572
  		],
  		"mapped",
  		[
  			13470
  		]
  	],
  	[
  		[
  			194573,
  			194573
  		],
  		"mapped",
  		[
  			132666
  		]
  	],
  	[
  		[
  			194574,
  			194574
  		],
  		"mapped",
  		[
  			20813
  		]
  	],
  	[
  		[
  			194575,
  			194575
  		],
  		"mapped",
  		[
  			20820
  		]
  	],
  	[
  		[
  			194576,
  			194576
  		],
  		"mapped",
  		[
  			20836
  		]
  	],
  	[
  		[
  			194577,
  			194577
  		],
  		"mapped",
  		[
  			20855
  		]
  	],
  	[
  		[
  			194578,
  			194578
  		],
  		"mapped",
  		[
  			132380
  		]
  	],
  	[
  		[
  			194579,
  			194579
  		],
  		"mapped",
  		[
  			13497
  		]
  	],
  	[
  		[
  			194580,
  			194580
  		],
  		"mapped",
  		[
  			20839
  		]
  	],
  	[
  		[
  			194581,
  			194581
  		],
  		"mapped",
  		[
  			20877
  		]
  	],
  	[
  		[
  			194582,
  			194582
  		],
  		"mapped",
  		[
  			132427
  		]
  	],
  	[
  		[
  			194583,
  			194583
  		],
  		"mapped",
  		[
  			20887
  		]
  	],
  	[
  		[
  			194584,
  			194584
  		],
  		"mapped",
  		[
  			20900
  		]
  	],
  	[
  		[
  			194585,
  			194585
  		],
  		"mapped",
  		[
  			20172
  		]
  	],
  	[
  		[
  			194586,
  			194586
  		],
  		"mapped",
  		[
  			20908
  		]
  	],
  	[
  		[
  			194587,
  			194587
  		],
  		"mapped",
  		[
  			20917
  		]
  	],
  	[
  		[
  			194588,
  			194588
  		],
  		"mapped",
  		[
  			168415
  		]
  	],
  	[
  		[
  			194589,
  			194589
  		],
  		"mapped",
  		[
  			20981
  		]
  	],
  	[
  		[
  			194590,
  			194590
  		],
  		"mapped",
  		[
  			20995
  		]
  	],
  	[
  		[
  			194591,
  			194591
  		],
  		"mapped",
  		[
  			13535
  		]
  	],
  	[
  		[
  			194592,
  			194592
  		],
  		"mapped",
  		[
  			21051
  		]
  	],
  	[
  		[
  			194593,
  			194593
  		],
  		"mapped",
  		[
  			21062
  		]
  	],
  	[
  		[
  			194594,
  			194594
  		],
  		"mapped",
  		[
  			21106
  		]
  	],
  	[
  		[
  			194595,
  			194595
  		],
  		"mapped",
  		[
  			21111
  		]
  	],
  	[
  		[
  			194596,
  			194596
  		],
  		"mapped",
  		[
  			13589
  		]
  	],
  	[
  		[
  			194597,
  			194597
  		],
  		"mapped",
  		[
  			21191
  		]
  	],
  	[
  		[
  			194598,
  			194598
  		],
  		"mapped",
  		[
  			21193
  		]
  	],
  	[
  		[
  			194599,
  			194599
  		],
  		"mapped",
  		[
  			21220
  		]
  	],
  	[
  		[
  			194600,
  			194600
  		],
  		"mapped",
  		[
  			21242
  		]
  	],
  	[
  		[
  			194601,
  			194601
  		],
  		"mapped",
  		[
  			21253
  		]
  	],
  	[
  		[
  			194602,
  			194602
  		],
  		"mapped",
  		[
  			21254
  		]
  	],
  	[
  		[
  			194603,
  			194603
  		],
  		"mapped",
  		[
  			21271
  		]
  	],
  	[
  		[
  			194604,
  			194604
  		],
  		"mapped",
  		[
  			21321
  		]
  	],
  	[
  		[
  			194605,
  			194605
  		],
  		"mapped",
  		[
  			21329
  		]
  	],
  	[
  		[
  			194606,
  			194606
  		],
  		"mapped",
  		[
  			21338
  		]
  	],
  	[
  		[
  			194607,
  			194607
  		],
  		"mapped",
  		[
  			21363
  		]
  	],
  	[
  		[
  			194608,
  			194608
  		],
  		"mapped",
  		[
  			21373
  		]
  	],
  	[
  		[
  			194609,
  			194611
  		],
  		"mapped",
  		[
  			21375
  		]
  	],
  	[
  		[
  			194612,
  			194612
  		],
  		"mapped",
  		[
  			133676
  		]
  	],
  	[
  		[
  			194613,
  			194613
  		],
  		"mapped",
  		[
  			28784
  		]
  	],
  	[
  		[
  			194614,
  			194614
  		],
  		"mapped",
  		[
  			21450
  		]
  	],
  	[
  		[
  			194615,
  			194615
  		],
  		"mapped",
  		[
  			21471
  		]
  	],
  	[
  		[
  			194616,
  			194616
  		],
  		"mapped",
  		[
  			133987
  		]
  	],
  	[
  		[
  			194617,
  			194617
  		],
  		"mapped",
  		[
  			21483
  		]
  	],
  	[
  		[
  			194618,
  			194618
  		],
  		"mapped",
  		[
  			21489
  		]
  	],
  	[
  		[
  			194619,
  			194619
  		],
  		"mapped",
  		[
  			21510
  		]
  	],
  	[
  		[
  			194620,
  			194620
  		],
  		"mapped",
  		[
  			21662
  		]
  	],
  	[
  		[
  			194621,
  			194621
  		],
  		"mapped",
  		[
  			21560
  		]
  	],
  	[
  		[
  			194622,
  			194622
  		],
  		"mapped",
  		[
  			21576
  		]
  	],
  	[
  		[
  			194623,
  			194623
  		],
  		"mapped",
  		[
  			21608
  		]
  	],
  	[
  		[
  			194624,
  			194624
  		],
  		"mapped",
  		[
  			21666
  		]
  	],
  	[
  		[
  			194625,
  			194625
  		],
  		"mapped",
  		[
  			21750
  		]
  	],
  	[
  		[
  			194626,
  			194626
  		],
  		"mapped",
  		[
  			21776
  		]
  	],
  	[
  		[
  			194627,
  			194627
  		],
  		"mapped",
  		[
  			21843
  		]
  	],
  	[
  		[
  			194628,
  			194628
  		],
  		"mapped",
  		[
  			21859
  		]
  	],
  	[
  		[
  			194629,
  			194630
  		],
  		"mapped",
  		[
  			21892
  		]
  	],
  	[
  		[
  			194631,
  			194631
  		],
  		"mapped",
  		[
  			21913
  		]
  	],
  	[
  		[
  			194632,
  			194632
  		],
  		"mapped",
  		[
  			21931
  		]
  	],
  	[
  		[
  			194633,
  			194633
  		],
  		"mapped",
  		[
  			21939
  		]
  	],
  	[
  		[
  			194634,
  			194634
  		],
  		"mapped",
  		[
  			21954
  		]
  	],
  	[
  		[
  			194635,
  			194635
  		],
  		"mapped",
  		[
  			22294
  		]
  	],
  	[
  		[
  			194636,
  			194636
  		],
  		"mapped",
  		[
  			22022
  		]
  	],
  	[
  		[
  			194637,
  			194637
  		],
  		"mapped",
  		[
  			22295
  		]
  	],
  	[
  		[
  			194638,
  			194638
  		],
  		"mapped",
  		[
  			22097
  		]
  	],
  	[
  		[
  			194639,
  			194639
  		],
  		"mapped",
  		[
  			22132
  		]
  	],
  	[
  		[
  			194640,
  			194640
  		],
  		"mapped",
  		[
  			20999
  		]
  	],
  	[
  		[
  			194641,
  			194641
  		],
  		"mapped",
  		[
  			22766
  		]
  	],
  	[
  		[
  			194642,
  			194642
  		],
  		"mapped",
  		[
  			22478
  		]
  	],
  	[
  		[
  			194643,
  			194643
  		],
  		"mapped",
  		[
  			22516
  		]
  	],
  	[
  		[
  			194644,
  			194644
  		],
  		"mapped",
  		[
  			22541
  		]
  	],
  	[
  		[
  			194645,
  			194645
  		],
  		"mapped",
  		[
  			22411
  		]
  	],
  	[
  		[
  			194646,
  			194646
  		],
  		"mapped",
  		[
  			22578
  		]
  	],
  	[
  		[
  			194647,
  			194647
  		],
  		"mapped",
  		[
  			22577
  		]
  	],
  	[
  		[
  			194648,
  			194648
  		],
  		"mapped",
  		[
  			22700
  		]
  	],
  	[
  		[
  			194649,
  			194649
  		],
  		"mapped",
  		[
  			136420
  		]
  	],
  	[
  		[
  			194650,
  			194650
  		],
  		"mapped",
  		[
  			22770
  		]
  	],
  	[
  		[
  			194651,
  			194651
  		],
  		"mapped",
  		[
  			22775
  		]
  	],
  	[
  		[
  			194652,
  			194652
  		],
  		"mapped",
  		[
  			22790
  		]
  	],
  	[
  		[
  			194653,
  			194653
  		],
  		"mapped",
  		[
  			22810
  		]
  	],
  	[
  		[
  			194654,
  			194654
  		],
  		"mapped",
  		[
  			22818
  		]
  	],
  	[
  		[
  			194655,
  			194655
  		],
  		"mapped",
  		[
  			22882
  		]
  	],
  	[
  		[
  			194656,
  			194656
  		],
  		"mapped",
  		[
  			136872
  		]
  	],
  	[
  		[
  			194657,
  			194657
  		],
  		"mapped",
  		[
  			136938
  		]
  	],
  	[
  		[
  			194658,
  			194658
  		],
  		"mapped",
  		[
  			23020
  		]
  	],
  	[
  		[
  			194659,
  			194659
  		],
  		"mapped",
  		[
  			23067
  		]
  	],
  	[
  		[
  			194660,
  			194660
  		],
  		"mapped",
  		[
  			23079
  		]
  	],
  	[
  		[
  			194661,
  			194661
  		],
  		"mapped",
  		[
  			23000
  		]
  	],
  	[
  		[
  			194662,
  			194662
  		],
  		"mapped",
  		[
  			23142
  		]
  	],
  	[
  		[
  			194663,
  			194663
  		],
  		"mapped",
  		[
  			14062
  		]
  	],
  	[
  		[
  			194664,
  			194664
  		],
  		"disallowed"
  	],
  	[
  		[
  			194665,
  			194665
  		],
  		"mapped",
  		[
  			23304
  		]
  	],
  	[
  		[
  			194666,
  			194667
  		],
  		"mapped",
  		[
  			23358
  		]
  	],
  	[
  		[
  			194668,
  			194668
  		],
  		"mapped",
  		[
  			137672
  		]
  	],
  	[
  		[
  			194669,
  			194669
  		],
  		"mapped",
  		[
  			23491
  		]
  	],
  	[
  		[
  			194670,
  			194670
  		],
  		"mapped",
  		[
  			23512
  		]
  	],
  	[
  		[
  			194671,
  			194671
  		],
  		"mapped",
  		[
  			23527
  		]
  	],
  	[
  		[
  			194672,
  			194672
  		],
  		"mapped",
  		[
  			23539
  		]
  	],
  	[
  		[
  			194673,
  			194673
  		],
  		"mapped",
  		[
  			138008
  		]
  	],
  	[
  		[
  			194674,
  			194674
  		],
  		"mapped",
  		[
  			23551
  		]
  	],
  	[
  		[
  			194675,
  			194675
  		],
  		"mapped",
  		[
  			23558
  		]
  	],
  	[
  		[
  			194676,
  			194676
  		],
  		"disallowed"
  	],
  	[
  		[
  			194677,
  			194677
  		],
  		"mapped",
  		[
  			23586
  		]
  	],
  	[
  		[
  			194678,
  			194678
  		],
  		"mapped",
  		[
  			14209
  		]
  	],
  	[
  		[
  			194679,
  			194679
  		],
  		"mapped",
  		[
  			23648
  		]
  	],
  	[
  		[
  			194680,
  			194680
  		],
  		"mapped",
  		[
  			23662
  		]
  	],
  	[
  		[
  			194681,
  			194681
  		],
  		"mapped",
  		[
  			23744
  		]
  	],
  	[
  		[
  			194682,
  			194682
  		],
  		"mapped",
  		[
  			23693
  		]
  	],
  	[
  		[
  			194683,
  			194683
  		],
  		"mapped",
  		[
  			138724
  		]
  	],
  	[
  		[
  			194684,
  			194684
  		],
  		"mapped",
  		[
  			23875
  		]
  	],
  	[
  		[
  			194685,
  			194685
  		],
  		"mapped",
  		[
  			138726
  		]
  	],
  	[
  		[
  			194686,
  			194686
  		],
  		"mapped",
  		[
  			23918
  		]
  	],
  	[
  		[
  			194687,
  			194687
  		],
  		"mapped",
  		[
  			23915
  		]
  	],
  	[
  		[
  			194688,
  			194688
  		],
  		"mapped",
  		[
  			23932
  		]
  	],
  	[
  		[
  			194689,
  			194689
  		],
  		"mapped",
  		[
  			24033
  		]
  	],
  	[
  		[
  			194690,
  			194690
  		],
  		"mapped",
  		[
  			24034
  		]
  	],
  	[
  		[
  			194691,
  			194691
  		],
  		"mapped",
  		[
  			14383
  		]
  	],
  	[
  		[
  			194692,
  			194692
  		],
  		"mapped",
  		[
  			24061
  		]
  	],
  	[
  		[
  			194693,
  			194693
  		],
  		"mapped",
  		[
  			24104
  		]
  	],
  	[
  		[
  			194694,
  			194694
  		],
  		"mapped",
  		[
  			24125
  		]
  	],
  	[
  		[
  			194695,
  			194695
  		],
  		"mapped",
  		[
  			24169
  		]
  	],
  	[
  		[
  			194696,
  			194696
  		],
  		"mapped",
  		[
  			14434
  		]
  	],
  	[
  		[
  			194697,
  			194697
  		],
  		"mapped",
  		[
  			139651
  		]
  	],
  	[
  		[
  			194698,
  			194698
  		],
  		"mapped",
  		[
  			14460
  		]
  	],
  	[
  		[
  			194699,
  			194699
  		],
  		"mapped",
  		[
  			24240
  		]
  	],
  	[
  		[
  			194700,
  			194700
  		],
  		"mapped",
  		[
  			24243
  		]
  	],
  	[
  		[
  			194701,
  			194701
  		],
  		"mapped",
  		[
  			24246
  		]
  	],
  	[
  		[
  			194702,
  			194702
  		],
  		"mapped",
  		[
  			24266
  		]
  	],
  	[
  		[
  			194703,
  			194703
  		],
  		"mapped",
  		[
  			172946
  		]
  	],
  	[
  		[
  			194704,
  			194704
  		],
  		"mapped",
  		[
  			24318
  		]
  	],
  	[
  		[
  			194705,
  			194706
  		],
  		"mapped",
  		[
  			140081
  		]
  	],
  	[
  		[
  			194707,
  			194707
  		],
  		"mapped",
  		[
  			33281
  		]
  	],
  	[
  		[
  			194708,
  			194709
  		],
  		"mapped",
  		[
  			24354
  		]
  	],
  	[
  		[
  			194710,
  			194710
  		],
  		"mapped",
  		[
  			14535
  		]
  	],
  	[
  		[
  			194711,
  			194711
  		],
  		"mapped",
  		[
  			144056
  		]
  	],
  	[
  		[
  			194712,
  			194712
  		],
  		"mapped",
  		[
  			156122
  		]
  	],
  	[
  		[
  			194713,
  			194713
  		],
  		"mapped",
  		[
  			24418
  		]
  	],
  	[
  		[
  			194714,
  			194714
  		],
  		"mapped",
  		[
  			24427
  		]
  	],
  	[
  		[
  			194715,
  			194715
  		],
  		"mapped",
  		[
  			14563
  		]
  	],
  	[
  		[
  			194716,
  			194716
  		],
  		"mapped",
  		[
  			24474
  		]
  	],
  	[
  		[
  			194717,
  			194717
  		],
  		"mapped",
  		[
  			24525
  		]
  	],
  	[
  		[
  			194718,
  			194718
  		],
  		"mapped",
  		[
  			24535
  		]
  	],
  	[
  		[
  			194719,
  			194719
  		],
  		"mapped",
  		[
  			24569
  		]
  	],
  	[
  		[
  			194720,
  			194720
  		],
  		"mapped",
  		[
  			24705
  		]
  	],
  	[
  		[
  			194721,
  			194721
  		],
  		"mapped",
  		[
  			14650
  		]
  	],
  	[
  		[
  			194722,
  			194722
  		],
  		"mapped",
  		[
  			14620
  		]
  	],
  	[
  		[
  			194723,
  			194723
  		],
  		"mapped",
  		[
  			24724
  		]
  	],
  	[
  		[
  			194724,
  			194724
  		],
  		"mapped",
  		[
  			141012
  		]
  	],
  	[
  		[
  			194725,
  			194725
  		],
  		"mapped",
  		[
  			24775
  		]
  	],
  	[
  		[
  			194726,
  			194726
  		],
  		"mapped",
  		[
  			24904
  		]
  	],
  	[
  		[
  			194727,
  			194727
  		],
  		"mapped",
  		[
  			24908
  		]
  	],
  	[
  		[
  			194728,
  			194728
  		],
  		"mapped",
  		[
  			24910
  		]
  	],
  	[
  		[
  			194729,
  			194729
  		],
  		"mapped",
  		[
  			24908
  		]
  	],
  	[
  		[
  			194730,
  			194730
  		],
  		"mapped",
  		[
  			24954
  		]
  	],
  	[
  		[
  			194731,
  			194731
  		],
  		"mapped",
  		[
  			24974
  		]
  	],
  	[
  		[
  			194732,
  			194732
  		],
  		"mapped",
  		[
  			25010
  		]
  	],
  	[
  		[
  			194733,
  			194733
  		],
  		"mapped",
  		[
  			24996
  		]
  	],
  	[
  		[
  			194734,
  			194734
  		],
  		"mapped",
  		[
  			25007
  		]
  	],
  	[
  		[
  			194735,
  			194735
  		],
  		"mapped",
  		[
  			25054
  		]
  	],
  	[
  		[
  			194736,
  			194736
  		],
  		"mapped",
  		[
  			25074
  		]
  	],
  	[
  		[
  			194737,
  			194737
  		],
  		"mapped",
  		[
  			25078
  		]
  	],
  	[
  		[
  			194738,
  			194738
  		],
  		"mapped",
  		[
  			25104
  		]
  	],
  	[
  		[
  			194739,
  			194739
  		],
  		"mapped",
  		[
  			25115
  		]
  	],
  	[
  		[
  			194740,
  			194740
  		],
  		"mapped",
  		[
  			25181
  		]
  	],
  	[
  		[
  			194741,
  			194741
  		],
  		"mapped",
  		[
  			25265
  		]
  	],
  	[
  		[
  			194742,
  			194742
  		],
  		"mapped",
  		[
  			25300
  		]
  	],
  	[
  		[
  			194743,
  			194743
  		],
  		"mapped",
  		[
  			25424
  		]
  	],
  	[
  		[
  			194744,
  			194744
  		],
  		"mapped",
  		[
  			142092
  		]
  	],
  	[
  		[
  			194745,
  			194745
  		],
  		"mapped",
  		[
  			25405
  		]
  	],
  	[
  		[
  			194746,
  			194746
  		],
  		"mapped",
  		[
  			25340
  		]
  	],
  	[
  		[
  			194747,
  			194747
  		],
  		"mapped",
  		[
  			25448
  		]
  	],
  	[
  		[
  			194748,
  			194748
  		],
  		"mapped",
  		[
  			25475
  		]
  	],
  	[
  		[
  			194749,
  			194749
  		],
  		"mapped",
  		[
  			25572
  		]
  	],
  	[
  		[
  			194750,
  			194750
  		],
  		"mapped",
  		[
  			142321
  		]
  	],
  	[
  		[
  			194751,
  			194751
  		],
  		"mapped",
  		[
  			25634
  		]
  	],
  	[
  		[
  			194752,
  			194752
  		],
  		"mapped",
  		[
  			25541
  		]
  	],
  	[
  		[
  			194753,
  			194753
  		],
  		"mapped",
  		[
  			25513
  		]
  	],
  	[
  		[
  			194754,
  			194754
  		],
  		"mapped",
  		[
  			14894
  		]
  	],
  	[
  		[
  			194755,
  			194755
  		],
  		"mapped",
  		[
  			25705
  		]
  	],
  	[
  		[
  			194756,
  			194756
  		],
  		"mapped",
  		[
  			25726
  		]
  	],
  	[
  		[
  			194757,
  			194757
  		],
  		"mapped",
  		[
  			25757
  		]
  	],
  	[
  		[
  			194758,
  			194758
  		],
  		"mapped",
  		[
  			25719
  		]
  	],
  	[
  		[
  			194759,
  			194759
  		],
  		"mapped",
  		[
  			14956
  		]
  	],
  	[
  		[
  			194760,
  			194760
  		],
  		"mapped",
  		[
  			25935
  		]
  	],
  	[
  		[
  			194761,
  			194761
  		],
  		"mapped",
  		[
  			25964
  		]
  	],
  	[
  		[
  			194762,
  			194762
  		],
  		"mapped",
  		[
  			143370
  		]
  	],
  	[
  		[
  			194763,
  			194763
  		],
  		"mapped",
  		[
  			26083
  		]
  	],
  	[
  		[
  			194764,
  			194764
  		],
  		"mapped",
  		[
  			26360
  		]
  	],
  	[
  		[
  			194765,
  			194765
  		],
  		"mapped",
  		[
  			26185
  		]
  	],
  	[
  		[
  			194766,
  			194766
  		],
  		"mapped",
  		[
  			15129
  		]
  	],
  	[
  		[
  			194767,
  			194767
  		],
  		"mapped",
  		[
  			26257
  		]
  	],
  	[
  		[
  			194768,
  			194768
  		],
  		"mapped",
  		[
  			15112
  		]
  	],
  	[
  		[
  			194769,
  			194769
  		],
  		"mapped",
  		[
  			15076
  		]
  	],
  	[
  		[
  			194770,
  			194770
  		],
  		"mapped",
  		[
  			20882
  		]
  	],
  	[
  		[
  			194771,
  			194771
  		],
  		"mapped",
  		[
  			20885
  		]
  	],
  	[
  		[
  			194772,
  			194772
  		],
  		"mapped",
  		[
  			26368
  		]
  	],
  	[
  		[
  			194773,
  			194773
  		],
  		"mapped",
  		[
  			26268
  		]
  	],
  	[
  		[
  			194774,
  			194774
  		],
  		"mapped",
  		[
  			32941
  		]
  	],
  	[
  		[
  			194775,
  			194775
  		],
  		"mapped",
  		[
  			17369
  		]
  	],
  	[
  		[
  			194776,
  			194776
  		],
  		"mapped",
  		[
  			26391
  		]
  	],
  	[
  		[
  			194777,
  			194777
  		],
  		"mapped",
  		[
  			26395
  		]
  	],
  	[
  		[
  			194778,
  			194778
  		],
  		"mapped",
  		[
  			26401
  		]
  	],
  	[
  		[
  			194779,
  			194779
  		],
  		"mapped",
  		[
  			26462
  		]
  	],
  	[
  		[
  			194780,
  			194780
  		],
  		"mapped",
  		[
  			26451
  		]
  	],
  	[
  		[
  			194781,
  			194781
  		],
  		"mapped",
  		[
  			144323
  		]
  	],
  	[
  		[
  			194782,
  			194782
  		],
  		"mapped",
  		[
  			15177
  		]
  	],
  	[
  		[
  			194783,
  			194783
  		],
  		"mapped",
  		[
  			26618
  		]
  	],
  	[
  		[
  			194784,
  			194784
  		],
  		"mapped",
  		[
  			26501
  		]
  	],
  	[
  		[
  			194785,
  			194785
  		],
  		"mapped",
  		[
  			26706
  		]
  	],
  	[
  		[
  			194786,
  			194786
  		],
  		"mapped",
  		[
  			26757
  		]
  	],
  	[
  		[
  			194787,
  			194787
  		],
  		"mapped",
  		[
  			144493
  		]
  	],
  	[
  		[
  			194788,
  			194788
  		],
  		"mapped",
  		[
  			26766
  		]
  	],
  	[
  		[
  			194789,
  			194789
  		],
  		"mapped",
  		[
  			26655
  		]
  	],
  	[
  		[
  			194790,
  			194790
  		],
  		"mapped",
  		[
  			26900
  		]
  	],
  	[
  		[
  			194791,
  			194791
  		],
  		"mapped",
  		[
  			15261
  		]
  	],
  	[
  		[
  			194792,
  			194792
  		],
  		"mapped",
  		[
  			26946
  		]
  	],
  	[
  		[
  			194793,
  			194793
  		],
  		"mapped",
  		[
  			27043
  		]
  	],
  	[
  		[
  			194794,
  			194794
  		],
  		"mapped",
  		[
  			27114
  		]
  	],
  	[
  		[
  			194795,
  			194795
  		],
  		"mapped",
  		[
  			27304
  		]
  	],
  	[
  		[
  			194796,
  			194796
  		],
  		"mapped",
  		[
  			145059
  		]
  	],
  	[
  		[
  			194797,
  			194797
  		],
  		"mapped",
  		[
  			27355
  		]
  	],
  	[
  		[
  			194798,
  			194798
  		],
  		"mapped",
  		[
  			15384
  		]
  	],
  	[
  		[
  			194799,
  			194799
  		],
  		"mapped",
  		[
  			27425
  		]
  	],
  	[
  		[
  			194800,
  			194800
  		],
  		"mapped",
  		[
  			145575
  		]
  	],
  	[
  		[
  			194801,
  			194801
  		],
  		"mapped",
  		[
  			27476
  		]
  	],
  	[
  		[
  			194802,
  			194802
  		],
  		"mapped",
  		[
  			15438
  		]
  	],
  	[
  		[
  			194803,
  			194803
  		],
  		"mapped",
  		[
  			27506
  		]
  	],
  	[
  		[
  			194804,
  			194804
  		],
  		"mapped",
  		[
  			27551
  		]
  	],
  	[
  		[
  			194805,
  			194805
  		],
  		"mapped",
  		[
  			27578
  		]
  	],
  	[
  		[
  			194806,
  			194806
  		],
  		"mapped",
  		[
  			27579
  		]
  	],
  	[
  		[
  			194807,
  			194807
  		],
  		"mapped",
  		[
  			146061
  		]
  	],
  	[
  		[
  			194808,
  			194808
  		],
  		"mapped",
  		[
  			138507
  		]
  	],
  	[
  		[
  			194809,
  			194809
  		],
  		"mapped",
  		[
  			146170
  		]
  	],
  	[
  		[
  			194810,
  			194810
  		],
  		"mapped",
  		[
  			27726
  		]
  	],
  	[
  		[
  			194811,
  			194811
  		],
  		"mapped",
  		[
  			146620
  		]
  	],
  	[
  		[
  			194812,
  			194812
  		],
  		"mapped",
  		[
  			27839
  		]
  	],
  	[
  		[
  			194813,
  			194813
  		],
  		"mapped",
  		[
  			27853
  		]
  	],
  	[
  		[
  			194814,
  			194814
  		],
  		"mapped",
  		[
  			27751
  		]
  	],
  	[
  		[
  			194815,
  			194815
  		],
  		"mapped",
  		[
  			27926
  		]
  	],
  	[
  		[
  			194816,
  			194816
  		],
  		"mapped",
  		[
  			27966
  		]
  	],
  	[
  		[
  			194817,
  			194817
  		],
  		"mapped",
  		[
  			28023
  		]
  	],
  	[
  		[
  			194818,
  			194818
  		],
  		"mapped",
  		[
  			27969
  		]
  	],
  	[
  		[
  			194819,
  			194819
  		],
  		"mapped",
  		[
  			28009
  		]
  	],
  	[
  		[
  			194820,
  			194820
  		],
  		"mapped",
  		[
  			28024
  		]
  	],
  	[
  		[
  			194821,
  			194821
  		],
  		"mapped",
  		[
  			28037
  		]
  	],
  	[
  		[
  			194822,
  			194822
  		],
  		"mapped",
  		[
  			146718
  		]
  	],
  	[
  		[
  			194823,
  			194823
  		],
  		"mapped",
  		[
  			27956
  		]
  	],
  	[
  		[
  			194824,
  			194824
  		],
  		"mapped",
  		[
  			28207
  		]
  	],
  	[
  		[
  			194825,
  			194825
  		],
  		"mapped",
  		[
  			28270
  		]
  	],
  	[
  		[
  			194826,
  			194826
  		],
  		"mapped",
  		[
  			15667
  		]
  	],
  	[
  		[
  			194827,
  			194827
  		],
  		"mapped",
  		[
  			28363
  		]
  	],
  	[
  		[
  			194828,
  			194828
  		],
  		"mapped",
  		[
  			28359
  		]
  	],
  	[
  		[
  			194829,
  			194829
  		],
  		"mapped",
  		[
  			147153
  		]
  	],
  	[
  		[
  			194830,
  			194830
  		],
  		"mapped",
  		[
  			28153
  		]
  	],
  	[
  		[
  			194831,
  			194831
  		],
  		"mapped",
  		[
  			28526
  		]
  	],
  	[
  		[
  			194832,
  			194832
  		],
  		"mapped",
  		[
  			147294
  		]
  	],
  	[
  		[
  			194833,
  			194833
  		],
  		"mapped",
  		[
  			147342
  		]
  	],
  	[
  		[
  			194834,
  			194834
  		],
  		"mapped",
  		[
  			28614
  		]
  	],
  	[
  		[
  			194835,
  			194835
  		],
  		"mapped",
  		[
  			28729
  		]
  	],
  	[
  		[
  			194836,
  			194836
  		],
  		"mapped",
  		[
  			28702
  		]
  	],
  	[
  		[
  			194837,
  			194837
  		],
  		"mapped",
  		[
  			28699
  		]
  	],
  	[
  		[
  			194838,
  			194838
  		],
  		"mapped",
  		[
  			15766
  		]
  	],
  	[
  		[
  			194839,
  			194839
  		],
  		"mapped",
  		[
  			28746
  		]
  	],
  	[
  		[
  			194840,
  			194840
  		],
  		"mapped",
  		[
  			28797
  		]
  	],
  	[
  		[
  			194841,
  			194841
  		],
  		"mapped",
  		[
  			28791
  		]
  	],
  	[
  		[
  			194842,
  			194842
  		],
  		"mapped",
  		[
  			28845
  		]
  	],
  	[
  		[
  			194843,
  			194843
  		],
  		"mapped",
  		[
  			132389
  		]
  	],
  	[
  		[
  			194844,
  			194844
  		],
  		"mapped",
  		[
  			28997
  		]
  	],
  	[
  		[
  			194845,
  			194845
  		],
  		"mapped",
  		[
  			148067
  		]
  	],
  	[
  		[
  			194846,
  			194846
  		],
  		"mapped",
  		[
  			29084
  		]
  	],
  	[
  		[
  			194847,
  			194847
  		],
  		"disallowed"
  	],
  	[
  		[
  			194848,
  			194848
  		],
  		"mapped",
  		[
  			29224
  		]
  	],
  	[
  		[
  			194849,
  			194849
  		],
  		"mapped",
  		[
  			29237
  		]
  	],
  	[
  		[
  			194850,
  			194850
  		],
  		"mapped",
  		[
  			29264
  		]
  	],
  	[
  		[
  			194851,
  			194851
  		],
  		"mapped",
  		[
  			149000
  		]
  	],
  	[
  		[
  			194852,
  			194852
  		],
  		"mapped",
  		[
  			29312
  		]
  	],
  	[
  		[
  			194853,
  			194853
  		],
  		"mapped",
  		[
  			29333
  		]
  	],
  	[
  		[
  			194854,
  			194854
  		],
  		"mapped",
  		[
  			149301
  		]
  	],
  	[
  		[
  			194855,
  			194855
  		],
  		"mapped",
  		[
  			149524
  		]
  	],
  	[
  		[
  			194856,
  			194856
  		],
  		"mapped",
  		[
  			29562
  		]
  	],
  	[
  		[
  			194857,
  			194857
  		],
  		"mapped",
  		[
  			29579
  		]
  	],
  	[
  		[
  			194858,
  			194858
  		],
  		"mapped",
  		[
  			16044
  		]
  	],
  	[
  		[
  			194859,
  			194859
  		],
  		"mapped",
  		[
  			29605
  		]
  	],
  	[
  		[
  			194860,
  			194861
  		],
  		"mapped",
  		[
  			16056
  		]
  	],
  	[
  		[
  			194862,
  			194862
  		],
  		"mapped",
  		[
  			29767
  		]
  	],
  	[
  		[
  			194863,
  			194863
  		],
  		"mapped",
  		[
  			29788
  		]
  	],
  	[
  		[
  			194864,
  			194864
  		],
  		"mapped",
  		[
  			29809
  		]
  	],
  	[
  		[
  			194865,
  			194865
  		],
  		"mapped",
  		[
  			29829
  		]
  	],
  	[
  		[
  			194866,
  			194866
  		],
  		"mapped",
  		[
  			29898
  		]
  	],
  	[
  		[
  			194867,
  			194867
  		],
  		"mapped",
  		[
  			16155
  		]
  	],
  	[
  		[
  			194868,
  			194868
  		],
  		"mapped",
  		[
  			29988
  		]
  	],
  	[
  		[
  			194869,
  			194869
  		],
  		"mapped",
  		[
  			150582
  		]
  	],
  	[
  		[
  			194870,
  			194870
  		],
  		"mapped",
  		[
  			30014
  		]
  	],
  	[
  		[
  			194871,
  			194871
  		],
  		"mapped",
  		[
  			150674
  		]
  	],
  	[
  		[
  			194872,
  			194872
  		],
  		"mapped",
  		[
  			30064
  		]
  	],
  	[
  		[
  			194873,
  			194873
  		],
  		"mapped",
  		[
  			139679
  		]
  	],
  	[
  		[
  			194874,
  			194874
  		],
  		"mapped",
  		[
  			30224
  		]
  	],
  	[
  		[
  			194875,
  			194875
  		],
  		"mapped",
  		[
  			151457
  		]
  	],
  	[
  		[
  			194876,
  			194876
  		],
  		"mapped",
  		[
  			151480
  		]
  	],
  	[
  		[
  			194877,
  			194877
  		],
  		"mapped",
  		[
  			151620
  		]
  	],
  	[
  		[
  			194878,
  			194878
  		],
  		"mapped",
  		[
  			16380
  		]
  	],
  	[
  		[
  			194879,
  			194879
  		],
  		"mapped",
  		[
  			16392
  		]
  	],
  	[
  		[
  			194880,
  			194880
  		],
  		"mapped",
  		[
  			30452
  		]
  	],
  	[
  		[
  			194881,
  			194881
  		],
  		"mapped",
  		[
  			151795
  		]
  	],
  	[
  		[
  			194882,
  			194882
  		],
  		"mapped",
  		[
  			151794
  		]
  	],
  	[
  		[
  			194883,
  			194883
  		],
  		"mapped",
  		[
  			151833
  		]
  	],
  	[
  		[
  			194884,
  			194884
  		],
  		"mapped",
  		[
  			151859
  		]
  	],
  	[
  		[
  			194885,
  			194885
  		],
  		"mapped",
  		[
  			30494
  		]
  	],
  	[
  		[
  			194886,
  			194887
  		],
  		"mapped",
  		[
  			30495
  		]
  	],
  	[
  		[
  			194888,
  			194888
  		],
  		"mapped",
  		[
  			30538
  		]
  	],
  	[
  		[
  			194889,
  			194889
  		],
  		"mapped",
  		[
  			16441
  		]
  	],
  	[
  		[
  			194890,
  			194890
  		],
  		"mapped",
  		[
  			30603
  		]
  	],
  	[
  		[
  			194891,
  			194891
  		],
  		"mapped",
  		[
  			16454
  		]
  	],
  	[
  		[
  			194892,
  			194892
  		],
  		"mapped",
  		[
  			16534
  		]
  	],
  	[
  		[
  			194893,
  			194893
  		],
  		"mapped",
  		[
  			152605
  		]
  	],
  	[
  		[
  			194894,
  			194894
  		],
  		"mapped",
  		[
  			30798
  		]
  	],
  	[
  		[
  			194895,
  			194895
  		],
  		"mapped",
  		[
  			30860
  		]
  	],
  	[
  		[
  			194896,
  			194896
  		],
  		"mapped",
  		[
  			30924
  		]
  	],
  	[
  		[
  			194897,
  			194897
  		],
  		"mapped",
  		[
  			16611
  		]
  	],
  	[
  		[
  			194898,
  			194898
  		],
  		"mapped",
  		[
  			153126
  		]
  	],
  	[
  		[
  			194899,
  			194899
  		],
  		"mapped",
  		[
  			31062
  		]
  	],
  	[
  		[
  			194900,
  			194900
  		],
  		"mapped",
  		[
  			153242
  		]
  	],
  	[
  		[
  			194901,
  			194901
  		],
  		"mapped",
  		[
  			153285
  		]
  	],
  	[
  		[
  			194902,
  			194902
  		],
  		"mapped",
  		[
  			31119
  		]
  	],
  	[
  		[
  			194903,
  			194903
  		],
  		"mapped",
  		[
  			31211
  		]
  	],
  	[
  		[
  			194904,
  			194904
  		],
  		"mapped",
  		[
  			16687
  		]
  	],
  	[
  		[
  			194905,
  			194905
  		],
  		"mapped",
  		[
  			31296
  		]
  	],
  	[
  		[
  			194906,
  			194906
  		],
  		"mapped",
  		[
  			31306
  		]
  	],
  	[
  		[
  			194907,
  			194907
  		],
  		"mapped",
  		[
  			31311
  		]
  	],
  	[
  		[
  			194908,
  			194908
  		],
  		"mapped",
  		[
  			153980
  		]
  	],
  	[
  		[
  			194909,
  			194910
  		],
  		"mapped",
  		[
  			154279
  		]
  	],
  	[
  		[
  			194911,
  			194911
  		],
  		"disallowed"
  	],
  	[
  		[
  			194912,
  			194912
  		],
  		"mapped",
  		[
  			16898
  		]
  	],
  	[
  		[
  			194913,
  			194913
  		],
  		"mapped",
  		[
  			154539
  		]
  	],
  	[
  		[
  			194914,
  			194914
  		],
  		"mapped",
  		[
  			31686
  		]
  	],
  	[
  		[
  			194915,
  			194915
  		],
  		"mapped",
  		[
  			31689
  		]
  	],
  	[
  		[
  			194916,
  			194916
  		],
  		"mapped",
  		[
  			16935
  		]
  	],
  	[
  		[
  			194917,
  			194917
  		],
  		"mapped",
  		[
  			154752
  		]
  	],
  	[
  		[
  			194918,
  			194918
  		],
  		"mapped",
  		[
  			31954
  		]
  	],
  	[
  		[
  			194919,
  			194919
  		],
  		"mapped",
  		[
  			17056
  		]
  	],
  	[
  		[
  			194920,
  			194920
  		],
  		"mapped",
  		[
  			31976
  		]
  	],
  	[
  		[
  			194921,
  			194921
  		],
  		"mapped",
  		[
  			31971
  		]
  	],
  	[
  		[
  			194922,
  			194922
  		],
  		"mapped",
  		[
  			32000
  		]
  	],
  	[
  		[
  			194923,
  			194923
  		],
  		"mapped",
  		[
  			155526
  		]
  	],
  	[
  		[
  			194924,
  			194924
  		],
  		"mapped",
  		[
  			32099
  		]
  	],
  	[
  		[
  			194925,
  			194925
  		],
  		"mapped",
  		[
  			17153
  		]
  	],
  	[
  		[
  			194926,
  			194926
  		],
  		"mapped",
  		[
  			32199
  		]
  	],
  	[
  		[
  			194927,
  			194927
  		],
  		"mapped",
  		[
  			32258
  		]
  	],
  	[
  		[
  			194928,
  			194928
  		],
  		"mapped",
  		[
  			32325
  		]
  	],
  	[
  		[
  			194929,
  			194929
  		],
  		"mapped",
  		[
  			17204
  		]
  	],
  	[
  		[
  			194930,
  			194930
  		],
  		"mapped",
  		[
  			156200
  		]
  	],
  	[
  		[
  			194931,
  			194931
  		],
  		"mapped",
  		[
  			156231
  		]
  	],
  	[
  		[
  			194932,
  			194932
  		],
  		"mapped",
  		[
  			17241
  		]
  	],
  	[
  		[
  			194933,
  			194933
  		],
  		"mapped",
  		[
  			156377
  		]
  	],
  	[
  		[
  			194934,
  			194934
  		],
  		"mapped",
  		[
  			32634
  		]
  	],
  	[
  		[
  			194935,
  			194935
  		],
  		"mapped",
  		[
  			156478
  		]
  	],
  	[
  		[
  			194936,
  			194936
  		],
  		"mapped",
  		[
  			32661
  		]
  	],
  	[
  		[
  			194937,
  			194937
  		],
  		"mapped",
  		[
  			32762
  		]
  	],
  	[
  		[
  			194938,
  			194938
  		],
  		"mapped",
  		[
  			32773
  		]
  	],
  	[
  		[
  			194939,
  			194939
  		],
  		"mapped",
  		[
  			156890
  		]
  	],
  	[
  		[
  			194940,
  			194940
  		],
  		"mapped",
  		[
  			156963
  		]
  	],
  	[
  		[
  			194941,
  			194941
  		],
  		"mapped",
  		[
  			32864
  		]
  	],
  	[
  		[
  			194942,
  			194942
  		],
  		"mapped",
  		[
  			157096
  		]
  	],
  	[
  		[
  			194943,
  			194943
  		],
  		"mapped",
  		[
  			32880
  		]
  	],
  	[
  		[
  			194944,
  			194944
  		],
  		"mapped",
  		[
  			144223
  		]
  	],
  	[
  		[
  			194945,
  			194945
  		],
  		"mapped",
  		[
  			17365
  		]
  	],
  	[
  		[
  			194946,
  			194946
  		],
  		"mapped",
  		[
  			32946
  		]
  	],
  	[
  		[
  			194947,
  			194947
  		],
  		"mapped",
  		[
  			33027
  		]
  	],
  	[
  		[
  			194948,
  			194948
  		],
  		"mapped",
  		[
  			17419
  		]
  	],
  	[
  		[
  			194949,
  			194949
  		],
  		"mapped",
  		[
  			33086
  		]
  	],
  	[
  		[
  			194950,
  			194950
  		],
  		"mapped",
  		[
  			23221
  		]
  	],
  	[
  		[
  			194951,
  			194951
  		],
  		"mapped",
  		[
  			157607
  		]
  	],
  	[
  		[
  			194952,
  			194952
  		],
  		"mapped",
  		[
  			157621
  		]
  	],
  	[
  		[
  			194953,
  			194953
  		],
  		"mapped",
  		[
  			144275
  		]
  	],
  	[
  		[
  			194954,
  			194954
  		],
  		"mapped",
  		[
  			144284
  		]
  	],
  	[
  		[
  			194955,
  			194955
  		],
  		"mapped",
  		[
  			33281
  		]
  	],
  	[
  		[
  			194956,
  			194956
  		],
  		"mapped",
  		[
  			33284
  		]
  	],
  	[
  		[
  			194957,
  			194957
  		],
  		"mapped",
  		[
  			36766
  		]
  	],
  	[
  		[
  			194958,
  			194958
  		],
  		"mapped",
  		[
  			17515
  		]
  	],
  	[
  		[
  			194959,
  			194959
  		],
  		"mapped",
  		[
  			33425
  		]
  	],
  	[
  		[
  			194960,
  			194960
  		],
  		"mapped",
  		[
  			33419
  		]
  	],
  	[
  		[
  			194961,
  			194961
  		],
  		"mapped",
  		[
  			33437
  		]
  	],
  	[
  		[
  			194962,
  			194962
  		],
  		"mapped",
  		[
  			21171
  		]
  	],
  	[
  		[
  			194963,
  			194963
  		],
  		"mapped",
  		[
  			33457
  		]
  	],
  	[
  		[
  			194964,
  			194964
  		],
  		"mapped",
  		[
  			33459
  		]
  	],
  	[
  		[
  			194965,
  			194965
  		],
  		"mapped",
  		[
  			33469
  		]
  	],
  	[
  		[
  			194966,
  			194966
  		],
  		"mapped",
  		[
  			33510
  		]
  	],
  	[
  		[
  			194967,
  			194967
  		],
  		"mapped",
  		[
  			158524
  		]
  	],
  	[
  		[
  			194968,
  			194968
  		],
  		"mapped",
  		[
  			33509
  		]
  	],
  	[
  		[
  			194969,
  			194969
  		],
  		"mapped",
  		[
  			33565
  		]
  	],
  	[
  		[
  			194970,
  			194970
  		],
  		"mapped",
  		[
  			33635
  		]
  	],
  	[
  		[
  			194971,
  			194971
  		],
  		"mapped",
  		[
  			33709
  		]
  	],
  	[
  		[
  			194972,
  			194972
  		],
  		"mapped",
  		[
  			33571
  		]
  	],
  	[
  		[
  			194973,
  			194973
  		],
  		"mapped",
  		[
  			33725
  		]
  	],
  	[
  		[
  			194974,
  			194974
  		],
  		"mapped",
  		[
  			33767
  		]
  	],
  	[
  		[
  			194975,
  			194975
  		],
  		"mapped",
  		[
  			33879
  		]
  	],
  	[
  		[
  			194976,
  			194976
  		],
  		"mapped",
  		[
  			33619
  		]
  	],
  	[
  		[
  			194977,
  			194977
  		],
  		"mapped",
  		[
  			33738
  		]
  	],
  	[
  		[
  			194978,
  			194978
  		],
  		"mapped",
  		[
  			33740
  		]
  	],
  	[
  		[
  			194979,
  			194979
  		],
  		"mapped",
  		[
  			33756
  		]
  	],
  	[
  		[
  			194980,
  			194980
  		],
  		"mapped",
  		[
  			158774
  		]
  	],
  	[
  		[
  			194981,
  			194981
  		],
  		"mapped",
  		[
  			159083
  		]
  	],
  	[
  		[
  			194982,
  			194982
  		],
  		"mapped",
  		[
  			158933
  		]
  	],
  	[
  		[
  			194983,
  			194983
  		],
  		"mapped",
  		[
  			17707
  		]
  	],
  	[
  		[
  			194984,
  			194984
  		],
  		"mapped",
  		[
  			34033
  		]
  	],
  	[
  		[
  			194985,
  			194985
  		],
  		"mapped",
  		[
  			34035
  		]
  	],
  	[
  		[
  			194986,
  			194986
  		],
  		"mapped",
  		[
  			34070
  		]
  	],
  	[
  		[
  			194987,
  			194987
  		],
  		"mapped",
  		[
  			160714
  		]
  	],
  	[
  		[
  			194988,
  			194988
  		],
  		"mapped",
  		[
  			34148
  		]
  	],
  	[
  		[
  			194989,
  			194989
  		],
  		"mapped",
  		[
  			159532
  		]
  	],
  	[
  		[
  			194990,
  			194990
  		],
  		"mapped",
  		[
  			17757
  		]
  	],
  	[
  		[
  			194991,
  			194991
  		],
  		"mapped",
  		[
  			17761
  		]
  	],
  	[
  		[
  			194992,
  			194992
  		],
  		"mapped",
  		[
  			159665
  		]
  	],
  	[
  		[
  			194993,
  			194993
  		],
  		"mapped",
  		[
  			159954
  		]
  	],
  	[
  		[
  			194994,
  			194994
  		],
  		"mapped",
  		[
  			17771
  		]
  	],
  	[
  		[
  			194995,
  			194995
  		],
  		"mapped",
  		[
  			34384
  		]
  	],
  	[
  		[
  			194996,
  			194996
  		],
  		"mapped",
  		[
  			34396
  		]
  	],
  	[
  		[
  			194997,
  			194997
  		],
  		"mapped",
  		[
  			34407
  		]
  	],
  	[
  		[
  			194998,
  			194998
  		],
  		"mapped",
  		[
  			34409
  		]
  	],
  	[
  		[
  			194999,
  			194999
  		],
  		"mapped",
  		[
  			34473
  		]
  	],
  	[
  		[
  			195000,
  			195000
  		],
  		"mapped",
  		[
  			34440
  		]
  	],
  	[
  		[
  			195001,
  			195001
  		],
  		"mapped",
  		[
  			34574
  		]
  	],
  	[
  		[
  			195002,
  			195002
  		],
  		"mapped",
  		[
  			34530
  		]
  	],
  	[
  		[
  			195003,
  			195003
  		],
  		"mapped",
  		[
  			34681
  		]
  	],
  	[
  		[
  			195004,
  			195004
  		],
  		"mapped",
  		[
  			34600
  		]
  	],
  	[
  		[
  			195005,
  			195005
  		],
  		"mapped",
  		[
  			34667
  		]
  	],
  	[
  		[
  			195006,
  			195006
  		],
  		"mapped",
  		[
  			34694
  		]
  	],
  	[
  		[
  			195007,
  			195007
  		],
  		"disallowed"
  	],
  	[
  		[
  			195008,
  			195008
  		],
  		"mapped",
  		[
  			34785
  		]
  	],
  	[
  		[
  			195009,
  			195009
  		],
  		"mapped",
  		[
  			34817
  		]
  	],
  	[
  		[
  			195010,
  			195010
  		],
  		"mapped",
  		[
  			17913
  		]
  	],
  	[
  		[
  			195011,
  			195011
  		],
  		"mapped",
  		[
  			34912
  		]
  	],
  	[
  		[
  			195012,
  			195012
  		],
  		"mapped",
  		[
  			34915
  		]
  	],
  	[
  		[
  			195013,
  			195013
  		],
  		"mapped",
  		[
  			161383
  		]
  	],
  	[
  		[
  			195014,
  			195014
  		],
  		"mapped",
  		[
  			35031
  		]
  	],
  	[
  		[
  			195015,
  			195015
  		],
  		"mapped",
  		[
  			35038
  		]
  	],
  	[
  		[
  			195016,
  			195016
  		],
  		"mapped",
  		[
  			17973
  		]
  	],
  	[
  		[
  			195017,
  			195017
  		],
  		"mapped",
  		[
  			35066
  		]
  	],
  	[
  		[
  			195018,
  			195018
  		],
  		"mapped",
  		[
  			13499
  		]
  	],
  	[
  		[
  			195019,
  			195019
  		],
  		"mapped",
  		[
  			161966
  		]
  	],
  	[
  		[
  			195020,
  			195020
  		],
  		"mapped",
  		[
  			162150
  		]
  	],
  	[
  		[
  			195021,
  			195021
  		],
  		"mapped",
  		[
  			18110
  		]
  	],
  	[
  		[
  			195022,
  			195022
  		],
  		"mapped",
  		[
  			18119
  		]
  	],
  	[
  		[
  			195023,
  			195023
  		],
  		"mapped",
  		[
  			35488
  		]
  	],
  	[
  		[
  			195024,
  			195024
  		],
  		"mapped",
  		[
  			35565
  		]
  	],
  	[
  		[
  			195025,
  			195025
  		],
  		"mapped",
  		[
  			35722
  		]
  	],
  	[
  		[
  			195026,
  			195026
  		],
  		"mapped",
  		[
  			35925
  		]
  	],
  	[
  		[
  			195027,
  			195027
  		],
  		"mapped",
  		[
  			162984
  		]
  	],
  	[
  		[
  			195028,
  			195028
  		],
  		"mapped",
  		[
  			36011
  		]
  	],
  	[
  		[
  			195029,
  			195029
  		],
  		"mapped",
  		[
  			36033
  		]
  	],
  	[
  		[
  			195030,
  			195030
  		],
  		"mapped",
  		[
  			36123
  		]
  	],
  	[
  		[
  			195031,
  			195031
  		],
  		"mapped",
  		[
  			36215
  		]
  	],
  	[
  		[
  			195032,
  			195032
  		],
  		"mapped",
  		[
  			163631
  		]
  	],
  	[
  		[
  			195033,
  			195033
  		],
  		"mapped",
  		[
  			133124
  		]
  	],
  	[
  		[
  			195034,
  			195034
  		],
  		"mapped",
  		[
  			36299
  		]
  	],
  	[
  		[
  			195035,
  			195035
  		],
  		"mapped",
  		[
  			36284
  		]
  	],
  	[
  		[
  			195036,
  			195036
  		],
  		"mapped",
  		[
  			36336
  		]
  	],
  	[
  		[
  			195037,
  			195037
  		],
  		"mapped",
  		[
  			133342
  		]
  	],
  	[
  		[
  			195038,
  			195038
  		],
  		"mapped",
  		[
  			36564
  		]
  	],
  	[
  		[
  			195039,
  			195039
  		],
  		"mapped",
  		[
  			36664
  		]
  	],
  	[
  		[
  			195040,
  			195040
  		],
  		"mapped",
  		[
  			165330
  		]
  	],
  	[
  		[
  			195041,
  			195041
  		],
  		"mapped",
  		[
  			165357
  		]
  	],
  	[
  		[
  			195042,
  			195042
  		],
  		"mapped",
  		[
  			37012
  		]
  	],
  	[
  		[
  			195043,
  			195043
  		],
  		"mapped",
  		[
  			37105
  		]
  	],
  	[
  		[
  			195044,
  			195044
  		],
  		"mapped",
  		[
  			37137
  		]
  	],
  	[
  		[
  			195045,
  			195045
  		],
  		"mapped",
  		[
  			165678
  		]
  	],
  	[
  		[
  			195046,
  			195046
  		],
  		"mapped",
  		[
  			37147
  		]
  	],
  	[
  		[
  			195047,
  			195047
  		],
  		"mapped",
  		[
  			37432
  		]
  	],
  	[
  		[
  			195048,
  			195048
  		],
  		"mapped",
  		[
  			37591
  		]
  	],
  	[
  		[
  			195049,
  			195049
  		],
  		"mapped",
  		[
  			37592
  		]
  	],
  	[
  		[
  			195050,
  			195050
  		],
  		"mapped",
  		[
  			37500
  		]
  	],
  	[
  		[
  			195051,
  			195051
  		],
  		"mapped",
  		[
  			37881
  		]
  	],
  	[
  		[
  			195052,
  			195052
  		],
  		"mapped",
  		[
  			37909
  		]
  	],
  	[
  		[
  			195053,
  			195053
  		],
  		"mapped",
  		[
  			166906
  		]
  	],
  	[
  		[
  			195054,
  			195054
  		],
  		"mapped",
  		[
  			38283
  		]
  	],
  	[
  		[
  			195055,
  			195055
  		],
  		"mapped",
  		[
  			18837
  		]
  	],
  	[
  		[
  			195056,
  			195056
  		],
  		"mapped",
  		[
  			38327
  		]
  	],
  	[
  		[
  			195057,
  			195057
  		],
  		"mapped",
  		[
  			167287
  		]
  	],
  	[
  		[
  			195058,
  			195058
  		],
  		"mapped",
  		[
  			18918
  		]
  	],
  	[
  		[
  			195059,
  			195059
  		],
  		"mapped",
  		[
  			38595
  		]
  	],
  	[
  		[
  			195060,
  			195060
  		],
  		"mapped",
  		[
  			23986
  		]
  	],
  	[
  		[
  			195061,
  			195061
  		],
  		"mapped",
  		[
  			38691
  		]
  	],
  	[
  		[
  			195062,
  			195062
  		],
  		"mapped",
  		[
  			168261
  		]
  	],
  	[
  		[
  			195063,
  			195063
  		],
  		"mapped",
  		[
  			168474
  		]
  	],
  	[
  		[
  			195064,
  			195064
  		],
  		"mapped",
  		[
  			19054
  		]
  	],
  	[
  		[
  			195065,
  			195065
  		],
  		"mapped",
  		[
  			19062
  		]
  	],
  	[
  		[
  			195066,
  			195066
  		],
  		"mapped",
  		[
  			38880
  		]
  	],
  	[
  		[
  			195067,
  			195067
  		],
  		"mapped",
  		[
  			168970
  		]
  	],
  	[
  		[
  			195068,
  			195068
  		],
  		"mapped",
  		[
  			19122
  		]
  	],
  	[
  		[
  			195069,
  			195069
  		],
  		"mapped",
  		[
  			169110
  		]
  	],
  	[
  		[
  			195070,
  			195071
  		],
  		"mapped",
  		[
  			38923
  		]
  	],
  	[
  		[
  			195072,
  			195072
  		],
  		"mapped",
  		[
  			38953
  		]
  	],
  	[
  		[
  			195073,
  			195073
  		],
  		"mapped",
  		[
  			169398
  		]
  	],
  	[
  		[
  			195074,
  			195074
  		],
  		"mapped",
  		[
  			39138
  		]
  	],
  	[
  		[
  			195075,
  			195075
  		],
  		"mapped",
  		[
  			19251
  		]
  	],
  	[
  		[
  			195076,
  			195076
  		],
  		"mapped",
  		[
  			39209
  		]
  	],
  	[
  		[
  			195077,
  			195077
  		],
  		"mapped",
  		[
  			39335
  		]
  	],
  	[
  		[
  			195078,
  			195078
  		],
  		"mapped",
  		[
  			39362
  		]
  	],
  	[
  		[
  			195079,
  			195079
  		],
  		"mapped",
  		[
  			39422
  		]
  	],
  	[
  		[
  			195080,
  			195080
  		],
  		"mapped",
  		[
  			19406
  		]
  	],
  	[
  		[
  			195081,
  			195081
  		],
  		"mapped",
  		[
  			170800
  		]
  	],
  	[
  		[
  			195082,
  			195082
  		],
  		"mapped",
  		[
  			39698
  		]
  	],
  	[
  		[
  			195083,
  			195083
  		],
  		"mapped",
  		[
  			40000
  		]
  	],
  	[
  		[
  			195084,
  			195084
  		],
  		"mapped",
  		[
  			40189
  		]
  	],
  	[
  		[
  			195085,
  			195085
  		],
  		"mapped",
  		[
  			19662
  		]
  	],
  	[
  		[
  			195086,
  			195086
  		],
  		"mapped",
  		[
  			19693
  		]
  	],
  	[
  		[
  			195087,
  			195087
  		],
  		"mapped",
  		[
  			40295
  		]
  	],
  	[
  		[
  			195088,
  			195088
  		],
  		"mapped",
  		[
  			172238
  		]
  	],
  	[
  		[
  			195089,
  			195089
  		],
  		"mapped",
  		[
  			19704
  		]
  	],
  	[
  		[
  			195090,
  			195090
  		],
  		"mapped",
  		[
  			172293
  		]
  	],
  	[
  		[
  			195091,
  			195091
  		],
  		"mapped",
  		[
  			172558
  		]
  	],
  	[
  		[
  			195092,
  			195092
  		],
  		"mapped",
  		[
  			172689
  		]
  	],
  	[
  		[
  			195093,
  			195093
  		],
  		"mapped",
  		[
  			40635
  		]
  	],
  	[
  		[
  			195094,
  			195094
  		],
  		"mapped",
  		[
  			19798
  		]
  	],
  	[
  		[
  			195095,
  			195095
  		],
  		"mapped",
  		[
  			40697
  		]
  	],
  	[
  		[
  			195096,
  			195096
  		],
  		"mapped",
  		[
  			40702
  		]
  	],
  	[
  		[
  			195097,
  			195097
  		],
  		"mapped",
  		[
  			40709
  		]
  	],
  	[
  		[
  			195098,
  			195098
  		],
  		"mapped",
  		[
  			40719
  		]
  	],
  	[
  		[
  			195099,
  			195099
  		],
  		"mapped",
  		[
  			40726
  		]
  	],
  	[
  		[
  			195100,
  			195100
  		],
  		"mapped",
  		[
  			40763
  		]
  	],
  	[
  		[
  			195101,
  			195101
  		],
  		"mapped",
  		[
  			173568
  		]
  	],
  	[
  		[
  			195102,
  			196605
  		],
  		"disallowed"
  	],
  	[
  		[
  			196606,
  			196607
  		],
  		"disallowed"
  	],
  	[
  		[
  			196608,
  			262141
  		],
  		"disallowed"
  	],
  	[
  		[
  			262142,
  			262143
  		],
  		"disallowed"
  	],
  	[
  		[
  			262144,
  			327677
  		],
  		"disallowed"
  	],
  	[
  		[
  			327678,
  			327679
  		],
  		"disallowed"
  	],
  	[
  		[
  			327680,
  			393213
  		],
  		"disallowed"
  	],
  	[
  		[
  			393214,
  			393215
  		],
  		"disallowed"
  	],
  	[
  		[
  			393216,
  			458749
  		],
  		"disallowed"
  	],
  	[
  		[
  			458750,
  			458751
  		],
  		"disallowed"
  	],
  	[
  		[
  			458752,
  			524285
  		],
  		"disallowed"
  	],
  	[
  		[
  			524286,
  			524287
  		],
  		"disallowed"
  	],
  	[
  		[
  			524288,
  			589821
  		],
  		"disallowed"
  	],
  	[
  		[
  			589822,
  			589823
  		],
  		"disallowed"
  	],
  	[
  		[
  			589824,
  			655357
  		],
  		"disallowed"
  	],
  	[
  		[
  			655358,
  			655359
  		],
  		"disallowed"
  	],
  	[
  		[
  			655360,
  			720893
  		],
  		"disallowed"
  	],
  	[
  		[
  			720894,
  			720895
  		],
  		"disallowed"
  	],
  	[
  		[
  			720896,
  			786429
  		],
  		"disallowed"
  	],
  	[
  		[
  			786430,
  			786431
  		],
  		"disallowed"
  	],
  	[
  		[
  			786432,
  			851965
  		],
  		"disallowed"
  	],
  	[
  		[
  			851966,
  			851967
  		],
  		"disallowed"
  	],
  	[
  		[
  			851968,
  			917501
  		],
  		"disallowed"
  	],
  	[
  		[
  			917502,
  			917503
  		],
  		"disallowed"
  	],
  	[
  		[
  			917504,
  			917504
  		],
  		"disallowed"
  	],
  	[
  		[
  			917505,
  			917505
  		],
  		"disallowed"
  	],
  	[
  		[
  			917506,
  			917535
  		],
  		"disallowed"
  	],
  	[
  		[
  			917536,
  			917631
  		],
  		"disallowed"
  	],
  	[
  		[
  			917632,
  			917759
  		],
  		"disallowed"
  	],
  	[
  		[
  			917760,
  			917999
  		],
  		"ignored"
  	],
  	[
  		[
  			918000,
  			983037
  		],
  		"disallowed"
  	],
  	[
  		[
  			983038,
  			983039
  		],
  		"disallowed"
  	],
  	[
  		[
  			983040,
  			1048573
  		],
  		"disallowed"
  	],
  	[
  		[
  			1048574,
  			1048575
  		],
  		"disallowed"
  	],
  	[
  		[
  			1048576,
  			1114109
  		],
  		"disallowed"
  	],
  	[
  		[
  			1114110,
  			1114111
  		],
  		"disallowed"
  	]
  ];

  var punycode$2 = require$$0$2;
  var mappingTable = require$$1$2;
  var PROCESSING_OPTIONS = {
    TRANSITIONAL: 0,
    NONTRANSITIONAL: 1
  };
  function normalize(str) {
    // fix bug in v8
    return str.split("\0").map(function (s) {
      return s.normalize('NFC');
    }).join("\0");
  }
  function findStatus(val) {
    var start = 0;
    var end = mappingTable.length - 1;
    while (start <= end) {
      var mid = Math.floor((start + end) / 2);
      var target = mappingTable[mid];
      if (target[0][0] <= val && target[0][1] >= val) {
        return target;
      } else if (target[0][0] > val) {
        end = mid - 1;
      } else {
        start = mid + 1;
      }
    }
    return null;
  }
  var regexAstralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
  function countSymbols(string) {
    return string
    // replace every surrogate pair with a BMP symbol
    .replace(regexAstralSymbols, '_')
    // then get the length
    .length;
  }
  function mapChars(domain_name, useSTD3, processing_option) {
    var hasError = false;
    var processed = "";
    var len = countSymbols(domain_name);
    for (var i = 0; i < len; ++i) {
      var codePoint = domain_name.codePointAt(i);
      var status = findStatus(codePoint);
      switch (status[1]) {
        case "disallowed":
          hasError = true;
          processed += String.fromCodePoint(codePoint);
          break;
        case "ignored":
          break;
        case "mapped":
          processed += String.fromCodePoint.apply(String, status[2]);
          break;
        case "deviation":
          if (processing_option === PROCESSING_OPTIONS.TRANSITIONAL) {
            processed += String.fromCodePoint.apply(String, status[2]);
          } else {
            processed += String.fromCodePoint(codePoint);
          }
          break;
        case "valid":
          processed += String.fromCodePoint(codePoint);
          break;
        case "disallowed_STD3_mapped":
          if (useSTD3) {
            hasError = true;
            processed += String.fromCodePoint(codePoint);
          } else {
            processed += String.fromCodePoint.apply(String, status[2]);
          }
          break;
        case "disallowed_STD3_valid":
          if (useSTD3) {
            hasError = true;
          }
          processed += String.fromCodePoint(codePoint);
          break;
      }
    }
    return {
      string: processed,
      error: hasError
    };
  }
  var combiningMarksRegex = /[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E4-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C03\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D01-\u0D03\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u192B\u1930-\u193B\u19B0-\u19C0\u19C8\u19C9\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFC-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2D]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC7F-\uDC82\uDCB0-\uDCBA\uDD00-\uDD02\uDD27-\uDD34\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDE2C-\uDE37\uDEDF-\uDEEA\uDF01-\uDF03\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDE30-\uDE40\uDEAB-\uDEB7]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF51-\uDF7E\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD83A[\uDCD0-\uDCD6]|\uDB40[\uDD00-\uDDEF]/;
  function validateLabel(label, processing_option) {
    if (label.substr(0, 4) === "xn--") {
      label = punycode$2.toUnicode(label);
      PROCESSING_OPTIONS.NONTRANSITIONAL;
    }
    var error = false;
    if (normalize(label) !== label || label[3] === "-" && label[4] === "-" || label[0] === "-" || label[label.length - 1] === "-" || label.indexOf(".") !== -1 || label.search(combiningMarksRegex) === 0) {
      error = true;
    }
    var len = countSymbols(label);
    for (var i = 0; i < len; ++i) {
      var status = findStatus(label.codePointAt(i));
      if (processing === PROCESSING_OPTIONS.TRANSITIONAL && status[1] !== "valid" || processing === PROCESSING_OPTIONS.NONTRANSITIONAL && status[1] !== "valid" && status[1] !== "deviation") {
        error = true;
        break;
      }
    }
    return {
      label: label,
      error: error
    };
  }
  function processing(domain_name, useSTD3, processing_option) {
    var result = mapChars(domain_name, useSTD3, processing_option);
    result.string = normalize(result.string);
    var labels = result.string.split(".");
    for (var i = 0; i < labels.length; ++i) {
      try {
        var validation = validateLabel(labels[i]);
        labels[i] = validation.label;
        result.error = result.error || validation.error;
      } catch (e) {
        result.error = true;
      }
    }
    return {
      string: labels.join("."),
      error: result.error
    };
  }
  tr46.toASCII = function (domain_name, useSTD3, processing_option, verifyDnsLength) {
    var result = processing(domain_name, useSTD3, processing_option);
    var labels = result.string.split(".");
    labels = labels.map(function (l) {
      try {
        return punycode$2.toASCII(l);
      } catch (e) {
        result.error = true;
        return l;
      }
    });
    if (verifyDnsLength) {
      var total = labels.slice(0, labels.length - 1).join(".").length;
      if (total.length > 253 || total.length === 0) {
        result.error = true;
      }
      for (var i = 0; i < labels.length; ++i) {
        if (labels.length > 63 || labels.length === 0) {
          result.error = true;
          break;
        }
      }
    }
    if (result.error) return null;
    return labels.join(".");
  };
  tr46.toUnicode = function (domain_name, useSTD3) {
    var result = processing(domain_name, useSTD3, PROCESSING_OPTIONS.NONTRANSITIONAL);
    return {
      domain: result.string,
      error: result.error
    };
  };
  tr46.PROCESSING_OPTIONS = PROCESSING_OPTIONS;

  (function (module) {

    var punycode = require$$0$2;
    var tr46$1 = tr46;
    var specialSchemes = {
      ftp: 21,
      file: null,
      gopher: 70,
      http: 80,
      https: 443,
      ws: 80,
      wss: 443
    };
    var failure = Symbol("failure");
    function countSymbols(str) {
      return punycode.ucs2.decode(str).length;
    }
    function at(input, idx) {
      var c = input[idx];
      return isNaN(c) ? undefined : String.fromCodePoint(c);
    }
    function isASCIIDigit(c) {
      return c >= 0x30 && c <= 0x39;
    }
    function isASCIIAlpha(c) {
      return c >= 0x41 && c <= 0x5A || c >= 0x61 && c <= 0x7A;
    }
    function isASCIIAlphanumeric(c) {
      return isASCIIAlpha(c) || isASCIIDigit(c);
    }
    function isASCIIHex(c) {
      return isASCIIDigit(c) || c >= 0x41 && c <= 0x46 || c >= 0x61 && c <= 0x66;
    }
    function isSingleDot(buffer) {
      return buffer === "." || buffer.toLowerCase() === "%2e";
    }
    function isDoubleDot(buffer) {
      buffer = buffer.toLowerCase();
      return buffer === ".." || buffer === "%2e." || buffer === ".%2e" || buffer === "%2e%2e";
    }
    function isWindowsDriveLetterCodePoints(cp1, cp2) {
      return isASCIIAlpha(cp1) && (cp2 === 58 || cp2 === 124);
    }
    function isWindowsDriveLetterString(string) {
      return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && (string[1] === ":" || string[1] === "|");
    }
    function isNormalizedWindowsDriveLetterString(string) {
      return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && string[1] === ":";
    }
    function containsForbiddenHostCodePoint(string) {
      return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|%|\/|:|\?|@|\[|\\|\]/) !== -1;
    }
    function containsForbiddenHostCodePointExcludingPercent(string) {
      return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|\/|:|\?|@|\[|\\|\]/) !== -1;
    }
    function isSpecialScheme(scheme) {
      return specialSchemes[scheme] !== undefined;
    }
    function isSpecial(url) {
      return isSpecialScheme(url.scheme);
    }
    function defaultPort(scheme) {
      return specialSchemes[scheme];
    }
    function percentEncode(c) {
      var hex = c.toString(16).toUpperCase();
      if (hex.length === 1) {
        hex = "0" + hex;
      }
      return "%" + hex;
    }
    function utf8PercentEncode(c) {
      var buf = new Buffer(c);
      var str = "";
      for (var i = 0; i < buf.length; ++i) {
        str += percentEncode(buf[i]);
      }
      return str;
    }
    function utf8PercentDecode(str) {
      var input = new Buffer(str);
      var output = [];
      for (var i = 0; i < input.length; ++i) {
        if (input[i] !== 37) {
          output.push(input[i]);
        } else if (input[i] === 37 && isASCIIHex(input[i + 1]) && isASCIIHex(input[i + 2])) {
          output.push(parseInt(input.slice(i + 1, i + 3).toString(), 16));
          i += 2;
        } else {
          output.push(input[i]);
        }
      }
      return new Buffer(output).toString();
    }
    function isC0ControlPercentEncode(c) {
      return c <= 0x1F || c > 0x7E;
    }
    var extraPathPercentEncodeSet = new Set([32, 34, 35, 60, 62, 63, 96, 123, 125]);
    function isPathPercentEncode(c) {
      return isC0ControlPercentEncode(c) || extraPathPercentEncodeSet.has(c);
    }
    var extraUserinfoPercentEncodeSet = new Set([47, 58, 59, 61, 64, 91, 92, 93, 94, 124]);
    function isUserinfoPercentEncode(c) {
      return isPathPercentEncode(c) || extraUserinfoPercentEncodeSet.has(c);
    }
    function percentEncodeChar(c, encodeSetPredicate) {
      var cStr = String.fromCodePoint(c);
      if (encodeSetPredicate(c)) {
        return utf8PercentEncode(cStr);
      }
      return cStr;
    }
    function parseIPv4Number(input) {
      var R = 10;
      if (input.length >= 2 && input.charAt(0) === "0" && input.charAt(1).toLowerCase() === "x") {
        input = input.substring(2);
        R = 16;
      } else if (input.length >= 2 && input.charAt(0) === "0") {
        input = input.substring(1);
        R = 8;
      }
      if (input === "") {
        return 0;
      }
      var regex = R === 10 ? /[^0-9]/ : R === 16 ? /[^0-9A-Fa-f]/ : /[^0-7]/;
      if (regex.test(input)) {
        return failure;
      }
      return parseInt(input, R);
    }
    function parseIPv4(input) {
      var parts = input.split(".");
      if (parts[parts.length - 1] === "") {
        if (parts.length > 1) {
          parts.pop();
        }
      }
      if (parts.length > 4) {
        return input;
      }
      var numbers = [];
      var _iterator = _createForOfIteratorHelper(parts),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var part = _step.value;
          if (part === "") {
            return input;
          }
          var _n = parseIPv4Number(part);
          if (_n === failure) {
            return input;
          }
          numbers.push(_n);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      for (var i = 0; i < numbers.length - 1; ++i) {
        if (numbers[i] > 255) {
          return failure;
        }
      }
      if (numbers[numbers.length - 1] >= Math.pow(256, 5 - numbers.length)) {
        return failure;
      }
      var ipv4 = numbers.pop();
      var counter = 0;
      for (var _i = 0, _numbers = numbers; _i < _numbers.length; _i++) {
        var n = _numbers[_i];
        ipv4 += n * Math.pow(256, 3 - counter);
        ++counter;
      }
      return ipv4;
    }
    function serializeIPv4(address) {
      var output = "";
      var n = address;
      for (var i = 1; i <= 4; ++i) {
        output = String(n % 256) + output;
        if (i !== 4) {
          output = "." + output;
        }
        n = Math.floor(n / 256);
      }
      return output;
    }
    function parseIPv6(input) {
      var address = [0, 0, 0, 0, 0, 0, 0, 0];
      var pieceIndex = 0;
      var compress = null;
      var pointer = 0;
      input = punycode.ucs2.decode(input);
      if (input[pointer] === 58) {
        if (input[pointer + 1] !== 58) {
          return failure;
        }
        pointer += 2;
        ++pieceIndex;
        compress = pieceIndex;
      }
      while (pointer < input.length) {
        if (pieceIndex === 8) {
          return failure;
        }
        if (input[pointer] === 58) {
          if (compress !== null) {
            return failure;
          }
          ++pointer;
          ++pieceIndex;
          compress = pieceIndex;
          continue;
        }
        var value = 0;
        var length = 0;
        while (length < 4 && isASCIIHex(input[pointer])) {
          value = value * 0x10 + parseInt(at(input, pointer), 16);
          ++pointer;
          ++length;
        }
        if (input[pointer] === 46) {
          if (length === 0) {
            return failure;
          }
          pointer -= length;
          if (pieceIndex > 6) {
            return failure;
          }
          var numbersSeen = 0;
          while (input[pointer] !== undefined) {
            var ipv4Piece = null;
            if (numbersSeen > 0) {
              if (input[pointer] === 46 && numbersSeen < 4) {
                ++pointer;
              } else {
                return failure;
              }
            }
            if (!isASCIIDigit(input[pointer])) {
              return failure;
            }
            while (isASCIIDigit(input[pointer])) {
              var number = parseInt(at(input, pointer));
              if (ipv4Piece === null) {
                ipv4Piece = number;
              } else if (ipv4Piece === 0) {
                return failure;
              } else {
                ipv4Piece = ipv4Piece * 10 + number;
              }
              if (ipv4Piece > 255) {
                return failure;
              }
              ++pointer;
            }
            address[pieceIndex] = address[pieceIndex] * 0x100 + ipv4Piece;
            ++numbersSeen;
            if (numbersSeen === 2 || numbersSeen === 4) {
              ++pieceIndex;
            }
          }
          if (numbersSeen !== 4) {
            return failure;
          }
          break;
        } else if (input[pointer] === 58) {
          ++pointer;
          if (input[pointer] === undefined) {
            return failure;
          }
        } else if (input[pointer] !== undefined) {
          return failure;
        }
        address[pieceIndex] = value;
        ++pieceIndex;
      }
      if (compress !== null) {
        var swaps = pieceIndex - compress;
        pieceIndex = 7;
        while (pieceIndex !== 0 && swaps > 0) {
          var temp = address[compress + swaps - 1];
          address[compress + swaps - 1] = address[pieceIndex];
          address[pieceIndex] = temp;
          --pieceIndex;
          --swaps;
        }
      } else if (compress === null && pieceIndex !== 8) {
        return failure;
      }
      return address;
    }
    function serializeIPv6(address) {
      var output = "";
      var seqResult = findLongestZeroSequence(address);
      var compress = seqResult.idx;
      var ignore0 = false;
      for (var pieceIndex = 0; pieceIndex <= 7; ++pieceIndex) {
        if (ignore0 && address[pieceIndex] === 0) {
          continue;
        } else if (ignore0) {
          ignore0 = false;
        }
        if (compress === pieceIndex) {
          var separator = pieceIndex === 0 ? "::" : ":";
          output += separator;
          ignore0 = true;
          continue;
        }
        output += address[pieceIndex].toString(16);
        if (pieceIndex !== 7) {
          output += ":";
        }
      }
      return output;
    }
    function parseHost(input, isSpecialArg) {
      if (input[0] === "[") {
        if (input[input.length - 1] !== "]") {
          return failure;
        }
        return parseIPv6(input.substring(1, input.length - 1));
      }
      if (!isSpecialArg) {
        return parseOpaqueHost(input);
      }
      var domain = utf8PercentDecode(input);
      var asciiDomain = tr46$1.toASCII(domain, false, tr46$1.PROCESSING_OPTIONS.NONTRANSITIONAL, false);
      if (asciiDomain === null) {
        return failure;
      }
      if (containsForbiddenHostCodePoint(asciiDomain)) {
        return failure;
      }
      var ipv4Host = parseIPv4(asciiDomain);
      if (typeof ipv4Host === "number" || ipv4Host === failure) {
        return ipv4Host;
      }
      return asciiDomain;
    }
    function parseOpaqueHost(input) {
      if (containsForbiddenHostCodePointExcludingPercent(input)) {
        return failure;
      }
      var output = "";
      var decoded = punycode.ucs2.decode(input);
      for (var i = 0; i < decoded.length; ++i) {
        output += percentEncodeChar(decoded[i], isC0ControlPercentEncode);
      }
      return output;
    }
    function findLongestZeroSequence(arr) {
      var maxIdx = null;
      var maxLen = 1; // only find elements > 1
      var currStart = null;
      var currLen = 0;
      for (var i = 0; i < arr.length; ++i) {
        if (arr[i] !== 0) {
          if (currLen > maxLen) {
            maxIdx = currStart;
            maxLen = currLen;
          }
          currStart = null;
          currLen = 0;
        } else {
          if (currStart === null) {
            currStart = i;
          }
          ++currLen;
        }
      }

      // if trailing zeros
      if (currLen > maxLen) {
        maxIdx = currStart;
        maxLen = currLen;
      }
      return {
        idx: maxIdx,
        len: maxLen
      };
    }
    function serializeHost(host) {
      if (typeof host === "number") {
        return serializeIPv4(host);
      }

      // IPv6 serializer
      if (host instanceof Array) {
        return "[" + serializeIPv6(host) + "]";
      }
      return host;
    }
    function trimControlChars(url) {
      return url.replace(/^[\u0000-\u001F\u0020]+|[\u0000-\u001F\u0020]+$/g, "");
    }
    function trimTabAndNewline(url) {
      return url.replace(/\u0009|\u000A|\u000D/g, "");
    }
    function shortenPath(url) {
      var path = url.path;
      if (path.length === 0) {
        return;
      }
      if (url.scheme === "file" && path.length === 1 && isNormalizedWindowsDriveLetter(path[0])) {
        return;
      }
      path.pop();
    }
    function includesCredentials(url) {
      return url.username !== "" || url.password !== "";
    }
    function cannotHaveAUsernamePasswordPort(url) {
      return url.host === null || url.host === "" || url.cannotBeABaseURL || url.scheme === "file";
    }
    function isNormalizedWindowsDriveLetter(string) {
      return /^[A-Za-z]:$/.test(string);
    }
    function URLStateMachine(input, base, encodingOverride, url, stateOverride) {
      this.pointer = 0;
      this.input = input;
      this.base = base || null;
      this.encodingOverride = encodingOverride || "utf-8";
      this.stateOverride = stateOverride;
      this.url = url;
      this.failure = false;
      this.parseError = false;
      if (!this.url) {
        this.url = {
          scheme: "",
          username: "",
          password: "",
          host: null,
          port: null,
          path: [],
          query: null,
          fragment: null,
          cannotBeABaseURL: false
        };
        var _res = trimControlChars(this.input);
        if (_res !== this.input) {
          this.parseError = true;
        }
        this.input = _res;
      }
      var res = trimTabAndNewline(this.input);
      if (res !== this.input) {
        this.parseError = true;
      }
      this.input = res;
      this.state = stateOverride || "scheme start";
      this.buffer = "";
      this.atFlag = false;
      this.arrFlag = false;
      this.passwordTokenSeenFlag = false;
      this.input = punycode.ucs2.decode(this.input);
      for (; this.pointer <= this.input.length; ++this.pointer) {
        var c = this.input[this.pointer];
        var cStr = isNaN(c) ? undefined : String.fromCodePoint(c);

        // exec state machine
        var ret = this["parse " + this.state](c, cStr);
        if (!ret) {
          break; // terminate algorithm
        } else if (ret === failure) {
          this.failure = true;
          break;
        }
      }
    }
    URLStateMachine.prototype["parse scheme start"] = function parseSchemeStart(c, cStr) {
      if (isASCIIAlpha(c)) {
        this.buffer += cStr.toLowerCase();
        this.state = "scheme";
      } else if (!this.stateOverride) {
        this.state = "no scheme";
        --this.pointer;
      } else {
        this.parseError = true;
        return failure;
      }
      return true;
    };
    URLStateMachine.prototype["parse scheme"] = function parseScheme(c, cStr) {
      if (isASCIIAlphanumeric(c) || c === 43 || c === 45 || c === 46) {
        this.buffer += cStr.toLowerCase();
      } else if (c === 58) {
        if (this.stateOverride) {
          if (isSpecial(this.url) && !isSpecialScheme(this.buffer)) {
            return false;
          }
          if (!isSpecial(this.url) && isSpecialScheme(this.buffer)) {
            return false;
          }
          if ((includesCredentials(this.url) || this.url.port !== null) && this.buffer === "file") {
            return false;
          }
          if (this.url.scheme === "file" && (this.url.host === "" || this.url.host === null)) {
            return false;
          }
        }
        this.url.scheme = this.buffer;
        this.buffer = "";
        if (this.stateOverride) {
          return false;
        }
        if (this.url.scheme === "file") {
          if (this.input[this.pointer + 1] !== 47 || this.input[this.pointer + 2] !== 47) {
            this.parseError = true;
          }
          this.state = "file";
        } else if (isSpecial(this.url) && this.base !== null && this.base.scheme === this.url.scheme) {
          this.state = "special relative or authority";
        } else if (isSpecial(this.url)) {
          this.state = "special authority slashes";
        } else if (this.input[this.pointer + 1] === 47) {
          this.state = "path or authority";
          ++this.pointer;
        } else {
          this.url.cannotBeABaseURL = true;
          this.url.path.push("");
          this.state = "cannot-be-a-base-URL path";
        }
      } else if (!this.stateOverride) {
        this.buffer = "";
        this.state = "no scheme";
        this.pointer = -1;
      } else {
        this.parseError = true;
        return failure;
      }
      return true;
    };
    URLStateMachine.prototype["parse no scheme"] = function parseNoScheme(c) {
      if (this.base === null || this.base.cannotBeABaseURL && c !== 35) {
        return failure;
      } else if (this.base.cannotBeABaseURL && c === 35) {
        this.url.scheme = this.base.scheme;
        this.url.path = this.base.path.slice();
        this.url.query = this.base.query;
        this.url.fragment = "";
        this.url.cannotBeABaseURL = true;
        this.state = "fragment";
      } else if (this.base.scheme === "file") {
        this.state = "file";
        --this.pointer;
      } else {
        this.state = "relative";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse special relative or authority"] = function parseSpecialRelativeOrAuthority(c) {
      if (c === 47 && this.input[this.pointer + 1] === 47) {
        this.state = "special authority ignore slashes";
        ++this.pointer;
      } else {
        this.parseError = true;
        this.state = "relative";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse path or authority"] = function parsePathOrAuthority(c) {
      if (c === 47) {
        this.state = "authority";
      } else {
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse relative"] = function parseRelative(c) {
      this.url.scheme = this.base.scheme;
      if (isNaN(c)) {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.url.path = this.base.path.slice();
        this.url.query = this.base.query;
      } else if (c === 47) {
        this.state = "relative slash";
      } else if (c === 63) {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.url.path = this.base.path.slice();
        this.url.query = "";
        this.state = "query";
      } else if (c === 35) {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.url.path = this.base.path.slice();
        this.url.query = this.base.query;
        this.url.fragment = "";
        this.state = "fragment";
      } else if (isSpecial(this.url) && c === 92) {
        this.parseError = true;
        this.state = "relative slash";
      } else {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.url.path = this.base.path.slice(0, this.base.path.length - 1);
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse relative slash"] = function parseRelativeSlash(c) {
      if (isSpecial(this.url) && (c === 47 || c === 92)) {
        if (c === 92) {
          this.parseError = true;
        }
        this.state = "special authority ignore slashes";
      } else if (c === 47) {
        this.state = "authority";
      } else {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse special authority slashes"] = function parseSpecialAuthoritySlashes(c) {
      if (c === 47 && this.input[this.pointer + 1] === 47) {
        this.state = "special authority ignore slashes";
        ++this.pointer;
      } else {
        this.parseError = true;
        this.state = "special authority ignore slashes";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse special authority ignore slashes"] = function parseSpecialAuthorityIgnoreSlashes(c) {
      if (c !== 47 && c !== 92) {
        this.state = "authority";
        --this.pointer;
      } else {
        this.parseError = true;
      }
      return true;
    };
    URLStateMachine.prototype["parse authority"] = function parseAuthority(c, cStr) {
      if (c === 64) {
        this.parseError = true;
        if (this.atFlag) {
          this.buffer = "%40" + this.buffer;
        }
        this.atFlag = true;

        // careful, this is based on buffer and has its own pointer (this.pointer != pointer) and inner chars
        var len = countSymbols(this.buffer);
        for (var pointer = 0; pointer < len; ++pointer) {
          var codePoint = this.buffer.codePointAt(pointer);
          if (codePoint === 58 && !this.passwordTokenSeenFlag) {
            this.passwordTokenSeenFlag = true;
            continue;
          }
          var encodedCodePoints = percentEncodeChar(codePoint, isUserinfoPercentEncode);
          if (this.passwordTokenSeenFlag) {
            this.url.password += encodedCodePoints;
          } else {
            this.url.username += encodedCodePoints;
          }
        }
        this.buffer = "";
      } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92) {
        if (this.atFlag && this.buffer === "") {
          this.parseError = true;
          return failure;
        }
        this.pointer -= countSymbols(this.buffer) + 1;
        this.buffer = "";
        this.state = "host";
      } else {
        this.buffer += cStr;
      }
      return true;
    };
    URLStateMachine.prototype["parse hostname"] = URLStateMachine.prototype["parse host"] = function parseHostName(c, cStr) {
      if (this.stateOverride && this.url.scheme === "file") {
        --this.pointer;
        this.state = "file host";
      } else if (c === 58 && !this.arrFlag) {
        if (this.buffer === "") {
          this.parseError = true;
          return failure;
        }
        var host = parseHost(this.buffer, isSpecial(this.url));
        if (host === failure) {
          return failure;
        }
        this.url.host = host;
        this.buffer = "";
        this.state = "port";
        if (this.stateOverride === "hostname") {
          return false;
        }
      } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92) {
        --this.pointer;
        if (isSpecial(this.url) && this.buffer === "") {
          this.parseError = true;
          return failure;
        } else if (this.stateOverride && this.buffer === "" && (includesCredentials(this.url) || this.url.port !== null)) {
          this.parseError = true;
          return false;
        }
        var _host = parseHost(this.buffer, isSpecial(this.url));
        if (_host === failure) {
          return failure;
        }
        this.url.host = _host;
        this.buffer = "";
        this.state = "path start";
        if (this.stateOverride) {
          return false;
        }
      } else {
        if (c === 91) {
          this.arrFlag = true;
        } else if (c === 93) {
          this.arrFlag = false;
        }
        this.buffer += cStr;
      }
      return true;
    };
    URLStateMachine.prototype["parse port"] = function parsePort(c, cStr) {
      if (isASCIIDigit(c)) {
        this.buffer += cStr;
      } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92 || this.stateOverride) {
        if (this.buffer !== "") {
          var port = parseInt(this.buffer);
          if (port > Math.pow(2, 16) - 1) {
            this.parseError = true;
            return failure;
          }
          this.url.port = port === defaultPort(this.url.scheme) ? null : port;
          this.buffer = "";
        }
        if (this.stateOverride) {
          return false;
        }
        this.state = "path start";
        --this.pointer;
      } else {
        this.parseError = true;
        return failure;
      }
      return true;
    };
    var fileOtherwiseCodePoints = new Set([47, 92, 63, 35]);
    URLStateMachine.prototype["parse file"] = function parseFile(c) {
      this.url.scheme = "file";
      if (c === 47 || c === 92) {
        if (c === 92) {
          this.parseError = true;
        }
        this.state = "file slash";
      } else if (this.base !== null && this.base.scheme === "file") {
        if (isNaN(c)) {
          this.url.host = this.base.host;
          this.url.path = this.base.path.slice();
          this.url.query = this.base.query;
        } else if (c === 63) {
          this.url.host = this.base.host;
          this.url.path = this.base.path.slice();
          this.url.query = "";
          this.state = "query";
        } else if (c === 35) {
          this.url.host = this.base.host;
          this.url.path = this.base.path.slice();
          this.url.query = this.base.query;
          this.url.fragment = "";
          this.state = "fragment";
        } else {
          if (this.input.length - this.pointer - 1 === 0 ||
          // remaining consists of 0 code points
          !isWindowsDriveLetterCodePoints(c, this.input[this.pointer + 1]) || this.input.length - this.pointer - 1 >= 2 &&
          // remaining has at least 2 code points
          !fileOtherwiseCodePoints.has(this.input[this.pointer + 2])) {
            this.url.host = this.base.host;
            this.url.path = this.base.path.slice();
            shortenPath(this.url);
          } else {
            this.parseError = true;
          }
          this.state = "path";
          --this.pointer;
        }
      } else {
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse file slash"] = function parseFileSlash(c) {
      if (c === 47 || c === 92) {
        if (c === 92) {
          this.parseError = true;
        }
        this.state = "file host";
      } else {
        if (this.base !== null && this.base.scheme === "file") {
          if (isNormalizedWindowsDriveLetterString(this.base.path[0])) {
            this.url.path.push(this.base.path[0]);
          } else {
            this.url.host = this.base.host;
          }
        }
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse file host"] = function parseFileHost(c, cStr) {
      if (isNaN(c) || c === 47 || c === 92 || c === 63 || c === 35) {
        --this.pointer;
        if (!this.stateOverride && isWindowsDriveLetterString(this.buffer)) {
          this.parseError = true;
          this.state = "path";
        } else if (this.buffer === "") {
          this.url.host = "";
          if (this.stateOverride) {
            return false;
          }
          this.state = "path start";
        } else {
          var host = parseHost(this.buffer, isSpecial(this.url));
          if (host === failure) {
            return failure;
          }
          if (host === "localhost") {
            host = "";
          }
          this.url.host = host;
          if (this.stateOverride) {
            return false;
          }
          this.buffer = "";
          this.state = "path start";
        }
      } else {
        this.buffer += cStr;
      }
      return true;
    };
    URLStateMachine.prototype["parse path start"] = function parsePathStart(c) {
      if (isSpecial(this.url)) {
        if (c === 92) {
          this.parseError = true;
        }
        this.state = "path";
        if (c !== 47 && c !== 92) {
          --this.pointer;
        }
      } else if (!this.stateOverride && c === 63) {
        this.url.query = "";
        this.state = "query";
      } else if (!this.stateOverride && c === 35) {
        this.url.fragment = "";
        this.state = "fragment";
      } else if (c !== undefined) {
        this.state = "path";
        if (c !== 47) {
          --this.pointer;
        }
      }
      return true;
    };
    URLStateMachine.prototype["parse path"] = function parsePath(c) {
      if (isNaN(c) || c === 47 || isSpecial(this.url) && c === 92 || !this.stateOverride && (c === 63 || c === 35)) {
        if (isSpecial(this.url) && c === 92) {
          this.parseError = true;
        }
        if (isDoubleDot(this.buffer)) {
          shortenPath(this.url);
          if (c !== 47 && !(isSpecial(this.url) && c === 92)) {
            this.url.path.push("");
          }
        } else if (isSingleDot(this.buffer) && c !== 47 && !(isSpecial(this.url) && c === 92)) {
          this.url.path.push("");
        } else if (!isSingleDot(this.buffer)) {
          if (this.url.scheme === "file" && this.url.path.length === 0 && isWindowsDriveLetterString(this.buffer)) {
            if (this.url.host !== "" && this.url.host !== null) {
              this.parseError = true;
              this.url.host = "";
            }
            this.buffer = this.buffer[0] + ":";
          }
          this.url.path.push(this.buffer);
        }
        this.buffer = "";
        if (this.url.scheme === "file" && (c === undefined || c === 63 || c === 35)) {
          while (this.url.path.length > 1 && this.url.path[0] === "") {
            this.parseError = true;
            this.url.path.shift();
          }
        }
        if (c === 63) {
          this.url.query = "";
          this.state = "query";
        }
        if (c === 35) {
          this.url.fragment = "";
          this.state = "fragment";
        }
      } else {
        // TODO: If c is not a URL code point and not "%", parse error.

        if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
          this.parseError = true;
        }
        this.buffer += percentEncodeChar(c, isPathPercentEncode);
      }
      return true;
    };
    URLStateMachine.prototype["parse cannot-be-a-base-URL path"] = function parseCannotBeABaseURLPath(c) {
      if (c === 63) {
        this.url.query = "";
        this.state = "query";
      } else if (c === 35) {
        this.url.fragment = "";
        this.state = "fragment";
      } else {
        // TODO: Add: not a URL code point
        if (!isNaN(c) && c !== 37) {
          this.parseError = true;
        }
        if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
          this.parseError = true;
        }
        if (!isNaN(c)) {
          this.url.path[0] = this.url.path[0] + percentEncodeChar(c, isC0ControlPercentEncode);
        }
      }
      return true;
    };
    URLStateMachine.prototype["parse query"] = function parseQuery(c, cStr) {
      if (isNaN(c) || !this.stateOverride && c === 35) {
        if (!isSpecial(this.url) || this.url.scheme === "ws" || this.url.scheme === "wss") {
          this.encodingOverride = "utf-8";
        }
        var buffer = new Buffer(this.buffer); // TODO: Use encoding override instead
        for (var i = 0; i < buffer.length; ++i) {
          if (buffer[i] < 0x21 || buffer[i] > 0x7E || buffer[i] === 0x22 || buffer[i] === 0x23 || buffer[i] === 0x3C || buffer[i] === 0x3E) {
            this.url.query += percentEncode(buffer[i]);
          } else {
            this.url.query += String.fromCodePoint(buffer[i]);
          }
        }
        this.buffer = "";
        if (c === 35) {
          this.url.fragment = "";
          this.state = "fragment";
        }
      } else {
        // TODO: If c is not a URL code point and not "%", parse error.
        if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
          this.parseError = true;
        }
        this.buffer += cStr;
      }
      return true;
    };
    URLStateMachine.prototype["parse fragment"] = function parseFragment(c) {
      if (isNaN(c)) ; else if (c === 0x0) {
        this.parseError = true;
      } else {
        // TODO: If c is not a URL code point and not "%", parse error.
        if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
          this.parseError = true;
        }
        this.url.fragment += percentEncodeChar(c, isC0ControlPercentEncode);
      }
      return true;
    };
    function serializeURL(url, excludeFragment) {
      var output = url.scheme + ":";
      if (url.host !== null) {
        output += "//";
        if (url.username !== "" || url.password !== "") {
          output += url.username;
          if (url.password !== "") {
            output += ":" + url.password;
          }
          output += "@";
        }
        output += serializeHost(url.host);
        if (url.port !== null) {
          output += ":" + url.port;
        }
      } else if (url.host === null && url.scheme === "file") {
        output += "//";
      }
      if (url.cannotBeABaseURL) {
        output += url.path[0];
      } else {
        var _iterator2 = _createForOfIteratorHelper(url.path),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var string = _step2.value;
            output += "/" + string;
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
      if (url.query !== null) {
        output += "?" + url.query;
      }
      if (!excludeFragment && url.fragment !== null) {
        output += "#" + url.fragment;
      }
      return output;
    }
    function serializeOrigin(tuple) {
      var result = tuple.scheme + "://";
      result += serializeHost(tuple.host);
      if (tuple.port !== null) {
        result += ":" + tuple.port;
      }
      return result;
    }
    module.exports.serializeURL = serializeURL;
    module.exports.serializeURLOrigin = function (url) {
      // https://url.spec.whatwg.org/#concept-url-origin
      switch (url.scheme) {
        case "blob":
          try {
            return module.exports.serializeURLOrigin(module.exports.parseURL(url.path[0]));
          } catch (e) {
            // serializing an opaque origin returns "null"
            return "null";
          }
        case "ftp":
        case "gopher":
        case "http":
        case "https":
        case "ws":
        case "wss":
          return serializeOrigin({
            scheme: url.scheme,
            host: url.host,
            port: url.port
          });
        case "file":
          // spec says "exercise to the reader", chrome says "file://"
          return "file://";
        default:
          // serializing an opaque origin returns "null"
          return "null";
      }
    };
    module.exports.basicURLParse = function (input, options) {
      if (options === undefined) {
        options = {};
      }
      var usm = new URLStateMachine(input, options.baseURL, options.encodingOverride, options.url, options.stateOverride);
      if (usm.failure) {
        return "failure";
      }
      return usm.url;
    };
    module.exports.setTheUsername = function (url, username) {
      url.username = "";
      var decoded = punycode.ucs2.decode(username);
      for (var i = 0; i < decoded.length; ++i) {
        url.username += percentEncodeChar(decoded[i], isUserinfoPercentEncode);
      }
    };
    module.exports.setThePassword = function (url, password) {
      url.password = "";
      var decoded = punycode.ucs2.decode(password);
      for (var i = 0; i < decoded.length; ++i) {
        url.password += percentEncodeChar(decoded[i], isUserinfoPercentEncode);
      }
    };
    module.exports.serializeHost = serializeHost;
    module.exports.cannotHaveAUsernamePasswordPort = cannotHaveAUsernamePasswordPort;
    module.exports.serializeInteger = function (integer) {
      return String(integer);
    };
    module.exports.parseURL = function (input, options) {
      if (options === undefined) {
        options = {};
      }

      // We don't handle blobs, so this just delegates:
      return module.exports.basicURLParse(input, {
        baseURL: options.baseURL,
        encodingOverride: options.encodingOverride
      });
    };
  })(urlStateMachine);
  var urlStateMachineExports = urlStateMachine.exports;

  var usm = urlStateMachineExports;
  URLImpl.implementation = /*#__PURE__*/function () {
    function URLImpl(constructorArgs) {
      _classCallCheck(this, URLImpl);
      var url = constructorArgs[0];
      var base = constructorArgs[1];
      var parsedBase = null;
      if (base !== undefined) {
        parsedBase = usm.basicURLParse(base);
        if (parsedBase === "failure") {
          throw new TypeError("Invalid base URL");
        }
      }
      var parsedURL = usm.basicURLParse(url, {
        baseURL: parsedBase
      });
      if (parsedURL === "failure") {
        throw new TypeError("Invalid URL");
      }
      this._url = parsedURL;

      // TODO: query stuff
    }
    return _createClass(URLImpl, [{
      key: "href",
      get: function get() {
        return usm.serializeURL(this._url);
      },
      set: function set(v) {
        var parsedURL = usm.basicURLParse(v);
        if (parsedURL === "failure") {
          throw new TypeError("Invalid URL");
        }
        this._url = parsedURL;
      }
    }, {
      key: "origin",
      get: function get() {
        return usm.serializeURLOrigin(this._url);
      }
    }, {
      key: "protocol",
      get: function get() {
        return this._url.scheme + ":";
      },
      set: function set(v) {
        usm.basicURLParse(v + ":", {
          url: this._url,
          stateOverride: "scheme start"
        });
      }
    }, {
      key: "username",
      get: function get() {
        return this._url.username;
      },
      set: function set(v) {
        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
          return;
        }
        usm.setTheUsername(this._url, v);
      }
    }, {
      key: "password",
      get: function get() {
        return this._url.password;
      },
      set: function set(v) {
        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
          return;
        }
        usm.setThePassword(this._url, v);
      }
    }, {
      key: "host",
      get: function get() {
        var url = this._url;
        if (url.host === null) {
          return "";
        }
        if (url.port === null) {
          return usm.serializeHost(url.host);
        }
        return usm.serializeHost(url.host) + ":" + usm.serializeInteger(url.port);
      },
      set: function set(v) {
        if (this._url.cannotBeABaseURL) {
          return;
        }
        usm.basicURLParse(v, {
          url: this._url,
          stateOverride: "host"
        });
      }
    }, {
      key: "hostname",
      get: function get() {
        if (this._url.host === null) {
          return "";
        }
        return usm.serializeHost(this._url.host);
      },
      set: function set(v) {
        if (this._url.cannotBeABaseURL) {
          return;
        }
        usm.basicURLParse(v, {
          url: this._url,
          stateOverride: "hostname"
        });
      }
    }, {
      key: "port",
      get: function get() {
        if (this._url.port === null) {
          return "";
        }
        return usm.serializeInteger(this._url.port);
      },
      set: function set(v) {
        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
          return;
        }
        if (v === "") {
          this._url.port = null;
        } else {
          usm.basicURLParse(v, {
            url: this._url,
            stateOverride: "port"
          });
        }
      }
    }, {
      key: "pathname",
      get: function get() {
        if (this._url.cannotBeABaseURL) {
          return this._url.path[0];
        }
        if (this._url.path.length === 0) {
          return "";
        }
        return "/" + this._url.path.join("/");
      },
      set: function set(v) {
        if (this._url.cannotBeABaseURL) {
          return;
        }
        this._url.path = [];
        usm.basicURLParse(v, {
          url: this._url,
          stateOverride: "path start"
        });
      }
    }, {
      key: "search",
      get: function get() {
        if (this._url.query === null || this._url.query === "") {
          return "";
        }
        return "?" + this._url.query;
      },
      set: function set(v) {
        // TODO: query stuff

        var url = this._url;
        if (v === "") {
          url.query = null;
          return;
        }
        var input = v[0] === "?" ? v.substring(1) : v;
        url.query = "";
        usm.basicURLParse(input, {
          url: url,
          stateOverride: "query"
        });
      }
    }, {
      key: "hash",
      get: function get() {
        if (this._url.fragment === null || this._url.fragment === "") {
          return "";
        }
        return "#" + this._url.fragment;
      },
      set: function set(v) {
        if (v === "") {
          this._url.fragment = null;
          return;
        }
        var input = v[0] === "#" ? v.substring(1) : v;
        this._url.fragment = "";
        usm.basicURLParse(input, {
          url: this._url,
          stateOverride: "fragment"
        });
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return this.href;
      }
    }]);
  }();

  (function (module) {

    var conversions = lib$2;
    var utils = utilsExports;
    var Impl = URLImpl;
    var impl = utils.implSymbol;
    function URL(url) {
      if (!this || this[impl] || !(this instanceof URL)) {
        throw new TypeError("Failed to construct 'URL': Please use the 'new' operator, this DOM object constructor cannot be called as a function.");
      }
      if (arguments.length < 1) {
        throw new TypeError("Failed to construct 'URL': 1 argument required, but only " + arguments.length + " present.");
      }
      var args = [];
      for (var i = 0; i < arguments.length && i < 2; ++i) {
        args[i] = arguments[i];
      }
      args[0] = conversions["USVString"](args[0]);
      if (args[1] !== undefined) {
        args[1] = conversions["USVString"](args[1]);
      }
      module.exports.setup(this, args);
    }
    URL.prototype.toJSON = function toJSON() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }
      var args = [];
      for (var i = 0; i < arguments.length && i < 0; ++i) {
        args[i] = arguments[i];
      }
      return this[impl].toJSON.apply(this[impl], args);
    };
    Object.defineProperty(URL.prototype, "href", {
      get: function get() {
        return this[impl].href;
      },
      set: function set(V) {
        V = conversions["USVString"](V);
        this[impl].href = V;
      },
      enumerable: true,
      configurable: true
    });
    URL.prototype.toString = function () {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }
      return this.href;
    };
    Object.defineProperty(URL.prototype, "origin", {
      get: function get() {
        return this[impl].origin;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL.prototype, "protocol", {
      get: function get() {
        return this[impl].protocol;
      },
      set: function set(V) {
        V = conversions["USVString"](V);
        this[impl].protocol = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL.prototype, "username", {
      get: function get() {
        return this[impl].username;
      },
      set: function set(V) {
        V = conversions["USVString"](V);
        this[impl].username = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL.prototype, "password", {
      get: function get() {
        return this[impl].password;
      },
      set: function set(V) {
        V = conversions["USVString"](V);
        this[impl].password = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL.prototype, "host", {
      get: function get() {
        return this[impl].host;
      },
      set: function set(V) {
        V = conversions["USVString"](V);
        this[impl].host = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL.prototype, "hostname", {
      get: function get() {
        return this[impl].hostname;
      },
      set: function set(V) {
        V = conversions["USVString"](V);
        this[impl].hostname = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL.prototype, "port", {
      get: function get() {
        return this[impl].port;
      },
      set: function set(V) {
        V = conversions["USVString"](V);
        this[impl].port = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL.prototype, "pathname", {
      get: function get() {
        return this[impl].pathname;
      },
      set: function set(V) {
        V = conversions["USVString"](V);
        this[impl].pathname = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL.prototype, "search", {
      get: function get() {
        return this[impl].search;
      },
      set: function set(V) {
        V = conversions["USVString"](V);
        this[impl].search = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL.prototype, "hash", {
      get: function get() {
        return this[impl].hash;
      },
      set: function set(V) {
        V = conversions["USVString"](V);
        this[impl].hash = V;
      },
      enumerable: true,
      configurable: true
    });
    module.exports = {
      is: function is(obj) {
        return !!obj && obj[impl] instanceof Impl.implementation;
      },
      create: function create(constructorArgs, privateData) {
        var obj = Object.create(URL.prototype);
        this.setup(obj, constructorArgs, privateData);
        return obj;
      },
      setup: function setup(obj, constructorArgs, privateData) {
        if (!privateData) privateData = {};
        privateData.wrapper = obj;
        obj[impl] = new Impl.implementation(constructorArgs, privateData);
        obj[impl][utils.wrapperSymbol] = obj;
      },
      "interface": URL,
      expose: {
        Window: {
          URL: URL
        },
        Worker: {
          URL: URL
        }
      }
    };
  })(URL$2);
  var URLExports = URL$2.exports;

  publicApi.URL = URLExports["interface"];
  publicApi.serializeURL = urlStateMachineExports.serializeURL;
  publicApi.serializeURLOrigin = urlStateMachineExports.serializeURLOrigin;
  publicApi.basicURLParse = urlStateMachineExports.basicURLParse;
  publicApi.setTheUsername = urlStateMachineExports.setTheUsername;
  publicApi.setThePassword = urlStateMachineExports.setThePassword;
  publicApi.serializeHost = urlStateMachineExports.serializeHost;
  publicApi.serializeInteger = urlStateMachineExports.serializeInteger;
  publicApi.parseURL = urlStateMachineExports.parseURL;

  // Based on https://github.com/tmpvar/jsdom/blob/aa85b2abf07766ff7bf5c1f6daafb3726f2f2db5/lib/jsdom/living/blob.js

  // fix for "Readable" isn't a named export issue
  var Readable = require$$0$3.Readable;
  var BUFFER = Symbol('buffer');
  var TYPE = Symbol('type');
  var Blob = /*#__PURE__*/function () {
    function Blob() {
      _classCallCheck(this, Blob);
      this[TYPE] = '';
      var blobParts = arguments[0];
      var options = arguments[1];
      var buffers = [];
      var size = 0;
      if (blobParts) {
        var a = blobParts;
        var length = Number(a.length);
        for (var i = 0; i < length; i++) {
          var element = a[i];
          var buffer = void 0;
          if (element instanceof Buffer) {
            buffer = element;
          } else if (ArrayBuffer.isView(element)) {
            buffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);
          } else if (element instanceof ArrayBuffer) {
            buffer = Buffer.from(element);
          } else if (element instanceof Blob) {
            buffer = element[BUFFER];
          } else {
            buffer = Buffer.from(typeof element === 'string' ? element : String(element));
          }
          size += buffer.length;
          buffers.push(buffer);
        }
      }
      this[BUFFER] = Buffer.concat(buffers);
      var type = options && options.type !== undefined && String(options.type).toLowerCase();
      if (type && !/[^\u0020-\u007E]/.test(type)) {
        this[TYPE] = type;
      }
    }
    return _createClass(Blob, [{
      key: "size",
      get: function get() {
        return this[BUFFER].length;
      }
    }, {
      key: "type",
      get: function get() {
        return this[TYPE];
      }
    }, {
      key: "text",
      value: function text() {
        return Promise.resolve(this[BUFFER].toString());
      }
    }, {
      key: "arrayBuffer",
      value: function arrayBuffer() {
        var buf = this[BUFFER];
        var ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
        return Promise.resolve(ab);
      }
    }, {
      key: "stream",
      value: function stream() {
        var readable = new Readable();
        readable._read = function () {};
        readable.push(this[BUFFER]);
        readable.push(null);
        return readable;
      }
    }, {
      key: "toString",
      value: function toString() {
        return '[object Blob]';
      }
    }, {
      key: "slice",
      value: function slice() {
        var size = this.size;
        var start = arguments[0];
        var end = arguments[1];
        var relativeStart, relativeEnd;
        if (start === undefined) {
          relativeStart = 0;
        } else if (start < 0) {
          relativeStart = Math.max(size + start, 0);
        } else {
          relativeStart = Math.min(start, size);
        }
        if (end === undefined) {
          relativeEnd = size;
        } else if (end < 0) {
          relativeEnd = Math.max(size + end, 0);
        } else {
          relativeEnd = Math.min(end, size);
        }
        var span = Math.max(relativeEnd - relativeStart, 0);
        var buffer = this[BUFFER];
        var slicedBuffer = buffer.slice(relativeStart, relativeStart + span);
        var blob = new Blob([], {
          type: arguments[2]
        });
        blob[BUFFER] = slicedBuffer;
        return blob;
      }
    }]);
  }();
  Object.defineProperties(Blob.prototype, {
    size: {
      enumerable: true
    },
    type: {
      enumerable: true
    },
    slice: {
      enumerable: true
    }
  });
  Object.defineProperty(Blob.prototype, Symbol.toStringTag, {
    value: 'Blob',
    writable: false,
    enumerable: false,
    configurable: true
  });

  /**
   * fetch-error.js
   *
   * FetchError interface for operational errors
   */

  /**
   * Create FetchError instance
   *
   * @param   String      message      Error message for human
   * @param   String      type         Error type for machine
   * @param   String      systemError  For Node.js system error
   * @return  FetchError
   */
  function FetchError(message, type, systemError) {
    Error.call(this, message);
    this.message = message;
    this.type = type;

    // when err.type is `system`, err.code contains system error code
    if (systemError) {
      this.code = this.errno = systemError.code;
    }

    // hide custom error implementation details from end-users
    Error.captureStackTrace(this, this.constructor);
  }
  FetchError.prototype = Object.create(Error.prototype);
  FetchError.prototype.constructor = FetchError;
  FetchError.prototype.name = 'FetchError';
  var convert;
  try {
    convert = require('encoding').convert;
  } catch (e) {}
  var INTERNALS = Symbol('Body internals');

  // fix an issue where "PassThrough" isn't a named export for node <10
  var PassThrough = require$$0$3.PassThrough;

  /**
   * Body mixin
   *
   * Ref: https://fetch.spec.whatwg.org/#body
   *
   * @param   Stream  body  Readable stream
   * @param   Object  opts  Response options
   * @return  Void
   */
  function Body(body) {
    var _this = this;
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$size = _ref.size;
    var size = _ref$size === undefined ? 0 : _ref$size;
    var _ref$timeout = _ref.timeout;
    var timeout = _ref$timeout === undefined ? 0 : _ref$timeout;
    if (body == null) {
      // body is undefined or null
      body = null;
    } else if (isURLSearchParams(body)) {
      // body is a URLSearchParams
      body = Buffer.from(body.toString());
    } else if (isBlob(body)) ;else if (Buffer.isBuffer(body)) ;else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {
      // body is ArrayBuffer
      body = Buffer.from(body);
    } else if (ArrayBuffer.isView(body)) {
      // body is ArrayBufferView
      body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
    } else if (body instanceof require$$0$3) ;else {
      // none of the above
      // coerce to string then buffer
      body = Buffer.from(String(body));
    }
    this[INTERNALS] = {
      body: body,
      disturbed: false,
      error: null
    };
    this.size = size;
    this.timeout = timeout;
    if (body instanceof require$$0$3) {
      body.on('error', function (err) {
        var error = err.name === 'AbortError' ? err : new FetchError("Invalid response body while trying to fetch ".concat(_this.url, ": ").concat(err.message), 'system', err);
        _this[INTERNALS].error = error;
      });
    }
  }
  Body.prototype = {
    get body() {
      return this[INTERNALS].body;
    },
    get bodyUsed() {
      return this[INTERNALS].disturbed;
    },
    /**
     * Decode response as ArrayBuffer
     *
     * @return  Promise
     */
    arrayBuffer: function arrayBuffer() {
      return consumeBody.call(this).then(function (buf) {
        return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
      });
    },
    /**
     * Return raw response as Blob
     *
     * @return Promise
     */
    blob: function blob() {
      var ct = this.headers && this.headers.get('content-type') || '';
      return consumeBody.call(this).then(function (buf) {
        return Object.assign(
        // Prevent copying
        new Blob([], {
          type: ct.toLowerCase()
        }), _defineProperty({}, BUFFER, buf));
      });
    },
    /**
     * Decode response as json
     *
     * @return  Promise
     */
    json: function json() {
      var _this2 = this;
      return consumeBody.call(this).then(function (buffer) {
        try {
          return JSON.parse(buffer.toString());
        } catch (err) {
          return Body.Promise.reject(new FetchError("invalid json response body at ".concat(_this2.url, " reason: ").concat(err.message), 'invalid-json'));
        }
      });
    },
    /**
     * Decode response as text
     *
     * @return  Promise
     */
    text: function text() {
      return consumeBody.call(this).then(function (buffer) {
        return buffer.toString();
      });
    },
    /**
     * Decode response as buffer (non-spec api)
     *
     * @return  Promise
     */
    buffer: function buffer() {
      return consumeBody.call(this);
    },
    /**
     * Decode response as text, while automatically detecting the encoding and
     * trying to decode to UTF-8 (non-spec api)
     *
     * @return  Promise
     */
    textConverted: function textConverted() {
      var _this3 = this;
      return consumeBody.call(this).then(function (buffer) {
        return convertBody(buffer, _this3.headers);
      });
    }
  };

  // In browsers, all properties are enumerable.
  Object.defineProperties(Body.prototype, {
    body: {
      enumerable: true
    },
    bodyUsed: {
      enumerable: true
    },
    arrayBuffer: {
      enumerable: true
    },
    blob: {
      enumerable: true
    },
    json: {
      enumerable: true
    },
    text: {
      enumerable: true
    }
  });
  Body.mixIn = function (proto) {
    var _iterator = _createForOfIteratorHelper(Object.getOwnPropertyNames(Body.prototype)),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var name = _step.value;
        // istanbul ignore else: future proof
        if (!(name in proto)) {
          var desc = Object.getOwnPropertyDescriptor(Body.prototype, name);
          Object.defineProperty(proto, name, desc);
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  };

  /**
   * Consume and convert an entire Body to a Buffer.
   *
   * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body
   *
   * @return  Promise
   */
  function consumeBody() {
    var _this4 = this;
    if (this[INTERNALS].disturbed) {
      return Body.Promise.reject(new TypeError("body used already for: ".concat(this.url)));
    }
    this[INTERNALS].disturbed = true;
    if (this[INTERNALS].error) {
      return Body.Promise.reject(this[INTERNALS].error);
    }
    var body = this.body;

    // body is null
    if (body === null) {
      return Body.Promise.resolve(Buffer.alloc(0));
    }

    // body is blob
    if (isBlob(body)) {
      body = body.stream();
    }

    // body is buffer
    if (Buffer.isBuffer(body)) {
      return Body.Promise.resolve(body);
    }

    // istanbul ignore if: should never happen
    if (!(body instanceof require$$0$3)) {
      return Body.Promise.resolve(Buffer.alloc(0));
    }

    // body is stream
    // get ready to actually consume the body
    var accum = [];
    var accumBytes = 0;
    var abort = false;
    return new Body.Promise(function (resolve, reject) {
      var resTimeout;

      // allow timeout on slow response body
      if (_this4.timeout) {
        resTimeout = setTimeout(function () {
          abort = true;
          reject(new FetchError("Response timeout while trying to fetch ".concat(_this4.url, " (over ").concat(_this4.timeout, "ms)"), 'body-timeout'));
        }, _this4.timeout);
      }

      // handle stream errors
      body.on('error', function (err) {
        if (err.name === 'AbortError') {
          // if the request was aborted, reject with this Error
          abort = true;
          reject(err);
        } else {
          // other errors, such as incorrect content-encoding
          reject(new FetchError("Invalid response body while trying to fetch ".concat(_this4.url, ": ").concat(err.message), 'system', err));
        }
      });
      body.on('data', function (chunk) {
        if (abort || chunk === null) {
          return;
        }
        if (_this4.size && accumBytes + chunk.length > _this4.size) {
          abort = true;
          reject(new FetchError("content size at ".concat(_this4.url, " over limit: ").concat(_this4.size), 'max-size'));
          return;
        }
        accumBytes += chunk.length;
        accum.push(chunk);
      });
      body.on('end', function () {
        if (abort) {
          return;
        }
        clearTimeout(resTimeout);
        try {
          resolve(Buffer.concat(accum, accumBytes));
        } catch (err) {
          // handle streams that have accumulated too much data (issue #414)
          reject(new FetchError("Could not create Buffer from response body for ".concat(_this4.url, ": ").concat(err.message), 'system', err));
        }
      });
    });
  }

  /**
   * Detect buffer encoding and convert to target encoding
   * ref: http://www.w3.org/TR/2011/WD-html5-20110113/parsing.html#determining-the-character-encoding
   *
   * @param   Buffer  buffer    Incoming buffer
   * @param   String  encoding  Target encoding
   * @return  String
   */
  function convertBody(buffer, headers) {
    if (typeof convert !== 'function') {
      throw new Error('The package `encoding` must be installed to use the textConverted() function');
    }
    var ct = headers.get('content-type');
    var charset = 'utf-8';
    var res, str;

    // header
    if (ct) {
      res = /charset=([^;]*)/i.exec(ct);
    }

    // no charset in content type, peek at response body for at most 1024 bytes
    str = buffer.slice(0, 1024).toString();

    // html5
    if (!res && str) {
      res = /<meta.+?charset=(['"])(.+?)\1/i.exec(str);
    }

    // html4
    if (!res && str) {
      res = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(str);
      if (!res) {
        res = /<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(str);
        if (res) {
          res.pop(); // drop last quote
        }
      }
      if (res) {
        res = /charset=(.*)/i.exec(res.pop());
      }
    }

    // xml
    if (!res && str) {
      res = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(str);
    }

    // found charset
    if (res) {
      charset = res.pop();

      // prevent decode issues when sites use incorrect encoding
      // ref: https://hsivonen.fi/encoding-menu/
      if (charset === 'gb2312' || charset === 'gbk') {
        charset = 'gb18030';
      }
    }

    // turn raw buffers into a single utf-8 buffer
    return convert(buffer, 'UTF-8', charset).toString();
  }

  /**
   * Detect a URLSearchParams object
   * ref: https://github.com/bitinn/node-fetch/issues/296#issuecomment-307598143
   *
   * @param   Object  obj     Object to detect by type or brand
   * @return  String
   */
  function isURLSearchParams(obj) {
    // Duck-typing as a necessary condition.
    if (_typeof(obj) !== 'object' || typeof obj.append !== 'function' || typeof obj["delete"] !== 'function' || typeof obj.get !== 'function' || typeof obj.getAll !== 'function' || typeof obj.has !== 'function' || typeof obj.set !== 'function') {
      return false;
    }

    // Brand-checking and more duck-typing as optional condition.
    return obj.constructor.name === 'URLSearchParams' || Object.prototype.toString.call(obj) === '[object URLSearchParams]' || typeof obj.sort === 'function';
  }

  /**
   * Check if `obj` is a W3C `Blob` object (which `File` inherits from)
   * @param  {*} obj
   * @return {boolean}
   */
  function isBlob(obj) {
    return _typeof(obj) === 'object' && typeof obj.arrayBuffer === 'function' && typeof obj.type === 'string' && typeof obj.stream === 'function' && typeof obj.constructor === 'function' && typeof obj.constructor.name === 'string' && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);
  }

  /**
   * Clone body given Res/Req instance
   *
   * @param   Mixed  instance  Response or Request instance
   * @return  Mixed
   */
  function _clone(instance) {
    var p1, p2;
    var body = instance.body;

    // don't allow cloning a used body
    if (instance.bodyUsed) {
      throw new Error('cannot clone body after it is used');
    }

    // check that body is a stream and not form-data object
    // note: we can't clone the form-data object without having it as a dependency
    if (body instanceof require$$0$3 && typeof body.getBoundary !== 'function') {
      // tee instance body
      p1 = new PassThrough();
      p2 = new PassThrough();
      body.pipe(p1);
      body.pipe(p2);
      // set instance body to teed body and return the other teed body
      instance[INTERNALS].body = p1;
      body = p2;
    }
    return body;
  }

  /**
   * Performs the operation "extract a `Content-Type` value from |object|" as
   * specified in the specification:
   * https://fetch.spec.whatwg.org/#concept-bodyinit-extract
   *
   * This function assumes that instance.body is present.
   *
   * @param   Mixed  instance  Any options.body input
   */
  function extractContentType(body) {
    if (body === null) {
      // body is null
      return null;
    } else if (typeof body === 'string') {
      // body is string
      return 'text/plain;charset=UTF-8';
    } else if (isURLSearchParams(body)) {
      // body is a URLSearchParams
      return 'application/x-www-form-urlencoded;charset=UTF-8';
    } else if (isBlob(body)) {
      // body is blob
      return body.type || null;
    } else if (Buffer.isBuffer(body)) {
      // body is buffer
      return null;
    } else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {
      // body is ArrayBuffer
      return null;
    } else if (ArrayBuffer.isView(body)) {
      // body is ArrayBufferView
      return null;
    } else if (typeof body.getBoundary === 'function') {
      // detect form data input from form-data module
      return "multipart/form-data;boundary=".concat(body.getBoundary());
    } else if (body instanceof require$$0$3) {
      // body is stream
      // can't really do much about this
      return null;
    } else {
      // Body constructor defaults other things to string
      return 'text/plain;charset=UTF-8';
    }
  }

  /**
   * The Fetch Standard treats this as if "total bytes" is a property on the body.
   * For us, we have to explicitly get it with a function.
   *
   * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes
   *
   * @param   Body    instance   Instance of Body
   * @return  Number?            Number of bytes, or null if not possible
   */
  function getTotalBytes(instance) {
    var body = instance.body;
    if (body === null) {
      // body is null
      return 0;
    } else if (isBlob(body)) {
      return body.size;
    } else if (Buffer.isBuffer(body)) {
      // body is buffer
      return body.length;
    } else if (body && typeof body.getLengthSync === 'function') {
      // detect form data input from form-data module
      if (body._lengthRetrievers && body._lengthRetrievers.length == 0 ||
      // 1.x
      body.hasKnownLength && body.hasKnownLength()) {
        // 2.x
        return body.getLengthSync();
      }
      return null;
    } else {
      // body is stream
      return null;
    }
  }

  /**
   * Write a Body to a Node.js WritableStream (e.g. http.Request) object.
   *
   * @param   Body    instance   Instance of Body
   * @return  Void
   */
  function writeToStream(dest, instance) {
    var body = instance.body;
    if (body === null) {
      // body is null
      dest.end();
    } else if (isBlob(body)) {
      body.stream().pipe(dest);
    } else if (Buffer.isBuffer(body)) {
      // body is buffer
      dest.write(body);
      dest.end();
    } else {
      // body is stream
      body.pipe(dest);
    }
  }

  // expose Promise
  Body.Promise = global.Promise;

  /**
   * headers.js
   *
   * Headers class offers convenient helpers
   */

  var invalidTokenRegex = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
  var invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/;
  function validateName(name) {
    name = "".concat(name);
    if (invalidTokenRegex.test(name) || name === '') {
      throw new TypeError("".concat(name, " is not a legal HTTP header name"));
    }
  }
  function validateValue(value) {
    value = "".concat(value);
    if (invalidHeaderCharRegex.test(value)) {
      throw new TypeError("".concat(value, " is not a legal HTTP header value"));
    }
  }

  /**
   * Find the key in the map object given a header name.
   *
   * Returns undefined if not found.
   *
   * @param   String  name  Header name
   * @return  String|Undefined
   */
  function find(map, name) {
    name = name.toLowerCase();
    for (var key in map) {
      if (key.toLowerCase() === name) {
        return key;
      }
    }
    return undefined;
  }
  var MAP = Symbol('map');
  var Headers$2 = /*#__PURE__*/function () {
    /**
     * Headers class
     *
     * @param   Object  headers  Response headers
     * @return  Void
     */
    function Headers() {
      _classCallCheck(this, Headers);
      var init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
      this[MAP] = Object.create(null);
      if (init instanceof Headers) {
        var rawHeaders = init.raw();
        var headerNames = Object.keys(rawHeaders);
        for (var _i = 0, _headerNames = headerNames; _i < _headerNames.length; _i++) {
          var headerName = _headerNames[_i];
          var _iterator2 = _createForOfIteratorHelper(rawHeaders[headerName]),
            _step2;
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var value = _step2.value;
              this.append(headerName, value);
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
        return;
      }

      // We don't worry about converting prop to ByteString here as append()
      // will handle it.
      if (init == null) ;else if (_typeof(init) === 'object') {
        var method = init[Symbol.iterator];
        if (method != null) {
          if (typeof method !== 'function') {
            throw new TypeError('Header pairs must be iterable');
          }

          // sequence<sequence<ByteString>>
          // Note: per spec we have to first exhaust the lists then process them
          var pairs = [];
          var _iterator3 = _createForOfIteratorHelper(init),
            _step3;
          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              var _pair = _step3.value;
              if (_typeof(_pair) !== 'object' || typeof _pair[Symbol.iterator] !== 'function') {
                throw new TypeError('Each header pair must be iterable');
              }
              pairs.push(Array.from(_pair));
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }
          for (var _i2 = 0, _pairs = pairs; _i2 < _pairs.length; _i2++) {
            var pair = _pairs[_i2];
            if (pair.length !== 2) {
              throw new TypeError('Each header pair must be a name/value tuple');
            }
            this.append(pair[0], pair[1]);
          }
        } else {
          // record<ByteString, ByteString>
          for (var _i3 = 0, _Object$keys = Object.keys(init); _i3 < _Object$keys.length; _i3++) {
            var key = _Object$keys[_i3];
            var _value = init[key];
            this.append(key, _value);
          }
        }
      } else {
        throw new TypeError('Provided initializer must be an object');
      }
    }

    /**
     * Return combined header value given name
     *
     * @param   String  name  Header name
     * @return  Mixed
     */
    return _createClass(Headers, [{
      key: "get",
      value: function get(name) {
        name = "".concat(name);
        validateName(name);
        var key = find(this[MAP], name);
        if (key === undefined) {
          return null;
        }
        return this[MAP][key].join(', ');
      }

      /**
       * Iterate over all headers
       *
       * @param   Function  callback  Executed for each item with parameters (value, name, thisArg)
       * @param   Boolean   thisArg   `this` context for callback function
       * @return  Void
       */
    }, {
      key: "forEach",
      value: function forEach(callback) {
        var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
        var pairs = getHeaders(this);
        var i = 0;
        while (i < pairs.length) {
          var _pairs$i = pairs[i];
          var name = _pairs$i[0],
            value = _pairs$i[1];
          callback.call(thisArg, value, name, this);
          pairs = getHeaders(this);
          i++;
        }
      }

      /**
       * Overwrite header values given name
       *
       * @param   String  name   Header name
       * @param   String  value  Header value
       * @return  Void
       */
    }, {
      key: "set",
      value: function set(name, value) {
        name = "".concat(name);
        value = "".concat(value);
        validateName(name);
        validateValue(value);
        var key = find(this[MAP], name);
        this[MAP][key !== undefined ? key : name] = [value];
      }

      /**
       * Append a value onto existing header
       *
       * @param   String  name   Header name
       * @param   String  value  Header value
       * @return  Void
       */
    }, {
      key: "append",
      value: function append(name, value) {
        name = "".concat(name);
        value = "".concat(value);
        validateName(name);
        validateValue(value);
        var key = find(this[MAP], name);
        if (key !== undefined) {
          this[MAP][key].push(value);
        } else {
          this[MAP][name] = [value];
        }
      }

      /**
       * Check for header name existence
       *
       * @param   String   name  Header name
       * @return  Boolean
       */
    }, {
      key: "has",
      value: function has(name) {
        name = "".concat(name);
        validateName(name);
        return find(this[MAP], name) !== undefined;
      }

      /**
       * Delete all header values given name
       *
       * @param   String  name  Header name
       * @return  Void
       */
    }, {
      key: "delete",
      value: function _delete(name) {
        name = "".concat(name);
        validateName(name);
        var key = find(this[MAP], name);
        if (key !== undefined) {
          delete this[MAP][key];
        }
      }

      /**
       * Return raw headers (non-spec api)
       *
       * @return  Object
       */
    }, {
      key: "raw",
      value: function raw() {
        return this[MAP];
      }

      /**
       * Get an iterator on keys.
       *
       * @return  Iterator
       */
    }, {
      key: "keys",
      value: function keys() {
        return createHeadersIterator(this, 'key');
      }

      /**
       * Get an iterator on values.
       *
       * @return  Iterator
       */
    }, {
      key: "values",
      value: function values() {
        return createHeadersIterator(this, 'value');
      }

      /**
       * Get an iterator on entries.
       *
       * This is the default iterator of the Headers object.
       *
       * @return  Iterator
       */
    }, {
      key: Symbol.iterator,
      value: function value() {
        return createHeadersIterator(this, 'key+value');
      }
    }]);
  }();
  Headers$2.prototype.entries = Headers$2.prototype[Symbol.iterator];
  Object.defineProperty(Headers$2.prototype, Symbol.toStringTag, {
    value: 'Headers',
    writable: false,
    enumerable: false,
    configurable: true
  });
  Object.defineProperties(Headers$2.prototype, {
    get: {
      enumerable: true
    },
    forEach: {
      enumerable: true
    },
    set: {
      enumerable: true
    },
    append: {
      enumerable: true
    },
    has: {
      enumerable: true
    },
    "delete": {
      enumerable: true
    },
    keys: {
      enumerable: true
    },
    values: {
      enumerable: true
    },
    entries: {
      enumerable: true
    }
  });
  function getHeaders(headers) {
    var kind = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'key+value';
    var keys = Object.keys(headers[MAP]).sort();
    return keys.map(kind === 'key' ? function (k) {
      return k.toLowerCase();
    } : kind === 'value' ? function (k) {
      return headers[MAP][k].join(', ');
    } : function (k) {
      return [k.toLowerCase(), headers[MAP][k].join(', ')];
    });
  }
  var INTERNAL = Symbol('internal');
  function createHeadersIterator(target, kind) {
    var iterator = Object.create(HeadersIteratorPrototype);
    iterator[INTERNAL] = {
      target: target,
      kind: kind,
      index: 0
    };
    return iterator;
  }
  var HeadersIteratorPrototype = Object.setPrototypeOf({
    next: function next() {
      // istanbul ignore if
      if (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {
        throw new TypeError('Value of `this` is not a HeadersIterator');
      }
      var _INTERNAL = this[INTERNAL];
      var target = _INTERNAL.target,
        kind = _INTERNAL.kind,
        index = _INTERNAL.index;
      var values = getHeaders(target, kind);
      var len = values.length;
      if (index >= len) {
        return {
          value: undefined,
          done: true
        };
      }
      this[INTERNAL].index = index + 1;
      return {
        value: values[index],
        done: false
      };
    }
  }, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));
  Object.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {
    value: 'HeadersIterator',
    writable: false,
    enumerable: false,
    configurable: true
  });

  /**
   * Export the Headers object in a form that Node.js can consume.
   *
   * @param   Headers  headers
   * @return  Object
   */
  function exportNodeCompatibleHeaders(headers) {
    var obj = Object.assign({
      __proto__: null
    }, headers[MAP]);

    // http.request() only supports string as Host header. This hack makes
    // specifying custom Host header possible.
    var hostHeaderKey = find(headers[MAP], 'Host');
    if (hostHeaderKey !== undefined) {
      obj[hostHeaderKey] = obj[hostHeaderKey][0];
    }
    return obj;
  }

  /**
   * Create a Headers object from an object of headers, ignoring those that do
   * not conform to HTTP grammar productions.
   *
   * @param   Object  obj  Object of headers
   * @return  Headers
   */
  function createHeadersLenient(obj) {
    var headers = new Headers$2();
    for (var _i4 = 0, _Object$keys2 = Object.keys(obj); _i4 < _Object$keys2.length; _i4++) {
      var name = _Object$keys2[_i4];
      if (invalidTokenRegex.test(name)) {
        continue;
      }
      if (Array.isArray(obj[name])) {
        var _iterator4 = _createForOfIteratorHelper(obj[name]),
          _step4;
        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var val = _step4.value;
            if (invalidHeaderCharRegex.test(val)) {
              continue;
            }
            if (headers[MAP][name] === undefined) {
              headers[MAP][name] = [val];
            } else {
              headers[MAP][name].push(val);
            }
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
      } else if (!invalidHeaderCharRegex.test(obj[name])) {
        headers[MAP][name] = [obj[name]];
      }
    }
    return headers;
  }
  var INTERNALS$1 = Symbol('Response internals');

  // fix an issue where "STATUS_CODES" aren't a named export for node <10
  var STATUS_CODES = http$1.STATUS_CODES;

  /**
   * Response class
   *
   * @param   Stream  body  Readable stream
   * @param   Object  opts  Response options
   * @return  Void
   */
  var Response = /*#__PURE__*/function () {
    function Response() {
      _classCallCheck(this, Response);
      var body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      Body.call(this, body, opts);
      var status = opts.status || 200;
      var headers = new Headers$2(opts.headers);
      if (body != null && !headers.has('Content-Type')) {
        var contentType = extractContentType(body);
        if (contentType) {
          headers.append('Content-Type', contentType);
        }
      }
      this[INTERNALS$1] = {
        url: opts.url,
        status: status,
        statusText: opts.statusText || STATUS_CODES[status],
        headers: headers,
        counter: opts.counter
      };
    }
    return _createClass(Response, [{
      key: "url",
      get: function get() {
        return this[INTERNALS$1].url || '';
      }
    }, {
      key: "status",
      get: function get() {
        return this[INTERNALS$1].status;
      }

      /**
       * Convenience property representing if the request ended normally
       */
    }, {
      key: "ok",
      get: function get() {
        return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
      }
    }, {
      key: "redirected",
      get: function get() {
        return this[INTERNALS$1].counter > 0;
      }
    }, {
      key: "statusText",
      get: function get() {
        return this[INTERNALS$1].statusText;
      }
    }, {
      key: "headers",
      get: function get() {
        return this[INTERNALS$1].headers;
      }

      /**
       * Clone this response
       *
       * @return  Response
       */
    }, {
      key: "clone",
      value: function clone() {
        return new Response(_clone(this), {
          url: this.url,
          status: this.status,
          statusText: this.statusText,
          headers: this.headers,
          ok: this.ok,
          redirected: this.redirected
        });
      }
    }]);
  }();
  Body.mixIn(Response.prototype);
  Object.defineProperties(Response.prototype, {
    url: {
      enumerable: true
    },
    status: {
      enumerable: true
    },
    ok: {
      enumerable: true
    },
    redirected: {
      enumerable: true
    },
    statusText: {
      enumerable: true
    },
    headers: {
      enumerable: true
    },
    clone: {
      enumerable: true
    }
  });
  Object.defineProperty(Response.prototype, Symbol.toStringTag, {
    value: 'Response',
    writable: false,
    enumerable: false,
    configurable: true
  });
  var INTERNALS$2 = Symbol('Request internals');
  var URL$1 = Url$1.URL || publicApi.URL;

  // fix an issue where "format", "parse" aren't a named export for node <10
  var parse_url = Url$1.parse;
  var format_url = Url$1.format;

  /**
   * Wrapper around `new URL` to handle arbitrary URLs
   *
   * @param  {string} urlStr
   * @return {void}
   */
  function parseURL(urlStr) {
    /*
    	Check whether the URL is absolute or not
    		Scheme: https://tools.ietf.org/html/rfc3986#section-3.1
    	Absolute URL: https://tools.ietf.org/html/rfc3986#section-4.3
    */
    if (/^[a-zA-Z][a-zA-Z\d+\-.]*:/.exec(urlStr)) {
      urlStr = new URL$1(urlStr).toString();
    }

    // Fallback to old implementation for arbitrary URLs
    return parse_url(urlStr);
  }
  var streamDestructionSupported = 'destroy' in require$$0$3.Readable.prototype;

  /**
   * Check if a value is an instance of Request.
   *
   * @param   Mixed   input
   * @return  Boolean
   */
  function isRequest(input) {
    return _typeof(input) === 'object' && _typeof(input[INTERNALS$2]) === 'object';
  }
  function isAbortSignal(signal) {
    var proto = signal && _typeof(signal) === 'object' && Object.getPrototypeOf(signal);
    return !!(proto && proto.constructor.name === 'AbortSignal');
  }

  /**
   * Request class
   *
   * @param   Mixed   input  Url or Request instance
   * @param   Object  init   Custom options
   * @return  Void
   */
  var Request$1 = /*#__PURE__*/function () {
    function Request(input) {
      _classCallCheck(this, Request);
      var init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var parsedURL;

      // normalize input
      if (!isRequest(input)) {
        if (input && input.href) {
          // in order to support Node.js' Url objects; though WHATWG's URL objects
          // will fall into this branch also (since their `toString()` will return
          // `href` property anyway)
          parsedURL = parseURL(input.href);
        } else {
          // coerce input to a string before attempting to parse
          parsedURL = parseURL("".concat(input));
        }
        input = {};
      } else {
        parsedURL = parseURL(input.url);
      }
      var method = init.method || input.method || 'GET';
      method = method.toUpperCase();
      if ((init.body != null || isRequest(input) && input.body !== null) && (method === 'GET' || method === 'HEAD')) {
        throw new TypeError('Request with GET/HEAD method cannot have body');
      }
      var inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? _clone(input) : null;
      Body.call(this, inputBody, {
        timeout: init.timeout || input.timeout || 0,
        size: init.size || input.size || 0
      });
      var headers = new Headers$2(init.headers || input.headers || {});
      if (inputBody != null && !headers.has('Content-Type')) {
        var contentType = extractContentType(inputBody);
        if (contentType) {
          headers.append('Content-Type', contentType);
        }
      }
      var signal = isRequest(input) ? input.signal : null;
      if ('signal' in init) signal = init.signal;
      if (signal != null && !isAbortSignal(signal)) {
        throw new TypeError('Expected signal to be an instanceof AbortSignal');
      }
      this[INTERNALS$2] = {
        method: method,
        redirect: init.redirect || input.redirect || 'follow',
        headers: headers,
        parsedURL: parsedURL,
        signal: signal
      };

      // node-fetch-only options
      this.follow = init.follow !== undefined ? init.follow : input.follow !== undefined ? input.follow : 20;
      this.compress = init.compress !== undefined ? init.compress : input.compress !== undefined ? input.compress : true;
      this.counter = init.counter || input.counter || 0;
      this.agent = init.agent || input.agent;
    }
    return _createClass(Request, [{
      key: "method",
      get: function get() {
        return this[INTERNALS$2].method;
      }
    }, {
      key: "url",
      get: function get() {
        return format_url(this[INTERNALS$2].parsedURL);
      }
    }, {
      key: "headers",
      get: function get() {
        return this[INTERNALS$2].headers;
      }
    }, {
      key: "redirect",
      get: function get() {
        return this[INTERNALS$2].redirect;
      }
    }, {
      key: "signal",
      get: function get() {
        return this[INTERNALS$2].signal;
      }

      /**
       * Clone this request
       *
       * @return  Request
       */
    }, {
      key: "clone",
      value: function clone() {
        return new Request(this);
      }
    }]);
  }();
  Body.mixIn(Request$1.prototype);
  Object.defineProperty(Request$1.prototype, Symbol.toStringTag, {
    value: 'Request',
    writable: false,
    enumerable: false,
    configurable: true
  });
  Object.defineProperties(Request$1.prototype, {
    method: {
      enumerable: true
    },
    url: {
      enumerable: true
    },
    headers: {
      enumerable: true
    },
    redirect: {
      enumerable: true
    },
    clone: {
      enumerable: true
    },
    signal: {
      enumerable: true
    }
  });

  /**
   * Convert a Request to Node.js http request options.
   *
   * @param   Request  A Request instance
   * @return  Object   The options object to be passed to http.request
   */
  function getNodeRequestOptions(request) {
    var parsedURL = request[INTERNALS$2].parsedURL;
    var headers = new Headers$2(request[INTERNALS$2].headers);

    // fetch step 1.3
    if (!headers.has('Accept')) {
      headers.set('Accept', '*/*');
    }

    // Basic fetch
    if (!parsedURL.protocol || !parsedURL.hostname) {
      throw new TypeError('Only absolute URLs are supported');
    }
    if (!/^https?:$/.test(parsedURL.protocol)) {
      throw new TypeError('Only HTTP(S) protocols are supported');
    }
    if (request.signal && request.body instanceof require$$0$3.Readable && !streamDestructionSupported) {
      throw new Error('Cancellation of streamed requests with AbortSignal is not supported in node < 8');
    }

    // HTTP-network-or-cache fetch steps 2.4-2.7
    var contentLengthValue = null;
    if (request.body == null && /^(POST|PUT)$/i.test(request.method)) {
      contentLengthValue = '0';
    }
    if (request.body != null) {
      var totalBytes = getTotalBytes(request);
      if (typeof totalBytes === 'number') {
        contentLengthValue = String(totalBytes);
      }
    }
    if (contentLengthValue) {
      headers.set('Content-Length', contentLengthValue);
    }

    // HTTP-network-or-cache fetch step 2.11
    if (!headers.has('User-Agent')) {
      headers.set('User-Agent', 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)');
    }

    // HTTP-network-or-cache fetch step 2.15
    if (request.compress && !headers.has('Accept-Encoding')) {
      headers.set('Accept-Encoding', 'gzip,deflate');
    }
    var agent = request.agent;
    if (typeof agent === 'function') {
      agent = agent(parsedURL);
    }

    // HTTP-network fetch step 4.2
    // chunked encoding is handled by Node.js

    return Object.assign({}, parsedURL, {
      method: request.method,
      headers: exportNodeCompatibleHeaders(headers),
      agent: agent
    });
  }

  /**
   * abort-error.js
   *
   * AbortError interface for cancelled requests
   */

  /**
   * Create AbortError instance
   *
   * @param   String      message      Error message for human
   * @return  AbortError
   */
  function AbortError(message) {
    Error.call(this, message);
    this.type = 'aborted';
    this.message = message;

    // hide custom error implementation details from end-users
    Error.captureStackTrace(this, this.constructor);
  }
  AbortError.prototype = Object.create(Error.prototype);
  AbortError.prototype.constructor = AbortError;
  AbortError.prototype.name = 'AbortError';
  var URL$1$1 = Url$1.URL || publicApi.URL;

  // fix an issue where "PassThrough", "resolve" aren't a named export for node <10
  var PassThrough$1 = require$$0$3.PassThrough;
  var isDomainOrSubdomain = function isDomainOrSubdomain(destination, original) {
    var orig = new URL$1$1(original).hostname;
    var dest = new URL$1$1(destination).hostname;
    return orig === dest || orig[orig.length - dest.length - 1] === '.' && orig.endsWith(dest);
  };

  /**
   * isSameProtocol reports whether the two provided URLs use the same protocol.
   *
   * Both domains must already be in canonical form.
   * @param {string|URL} original
   * @param {string|URL} destination
   */
  var isSameProtocol = function isSameProtocol(destination, original) {
    var orig = new URL$1$1(original).protocol;
    var dest = new URL$1$1(destination).protocol;
    return orig === dest;
  };

  /**
   * Fetch function
   *
   * @param   Mixed    url   Absolute url or Request instance
   * @param   Object   opts  Fetch options
   * @return  Promise
   */
  function fetch(url, opts) {
    // allow custom promise
    if (!fetch.Promise) {
      throw new Error('native promise missing, set fetch.Promise to your favorite alternative');
    }
    Body.Promise = fetch.Promise;

    // wrap http.request into fetch
    return new fetch.Promise(function (resolve, reject) {
      // build request object
      var request = new Request$1(url, opts);
      var options = getNodeRequestOptions(request);
      var send = (options.protocol === 'https:' ? https$1 : http$1).request;
      var signal = request.signal;
      var response = null;
      var abort = function abort() {
        var error = new AbortError('The user aborted a request.');
        reject(error);
        if (request.body && request.body instanceof require$$0$3.Readable) {
          destroyStream(request.body, error);
        }
        if (!response || !response.body) return;
        response.body.emit('error', error);
      };
      if (signal && signal.aborted) {
        abort();
        return;
      }
      var abortAndFinalize = function abortAndFinalize() {
        abort();
        finalize();
      };

      // send request
      var req = send(options);
      var reqTimeout;
      if (signal) {
        signal.addEventListener('abort', abortAndFinalize);
      }
      function finalize() {
        req.abort();
        if (signal) signal.removeEventListener('abort', abortAndFinalize);
        clearTimeout(reqTimeout);
      }
      if (request.timeout) {
        req.once('socket', function (socket) {
          reqTimeout = setTimeout(function () {
            reject(new FetchError("network timeout at: ".concat(request.url), 'request-timeout'));
            finalize();
          }, request.timeout);
        });
      }
      req.on('error', function (err) {
        reject(new FetchError("request to ".concat(request.url, " failed, reason: ").concat(err.message), 'system', err));
        if (response && response.body) {
          destroyStream(response.body, err);
        }
        finalize();
      });
      fixResponseChunkedTransferBadEnding(req, function (err) {
        if (signal && signal.aborted) {
          return;
        }
        if (response && response.body) {
          destroyStream(response.body, err);
        }
      });

      /* c8 ignore next 18 */
      if (parseInt(process.version.substring(1)) < 14) {
        // Before Node.js 14, pipeline() does not fully support async iterators and does not always
        // properly handle when the socket close/end events are out of order.
        req.on('socket', function (s) {
          s.addListener('close', function (hadError) {
            // if a data listener is still present we didn't end cleanly
            var hasDataListener = s.listenerCount('data') > 0;

            // if end happened before close but the socket didn't emit an error, do it now
            if (response && hasDataListener && !hadError && !(signal && signal.aborted)) {
              var err = new Error('Premature close');
              err.code = 'ERR_STREAM_PREMATURE_CLOSE';
              response.body.emit('error', err);
            }
          });
        });
      }
      req.on('response', function (res) {
        clearTimeout(reqTimeout);
        var headers = createHeadersLenient(res.headers);

        // HTTP fetch step 5
        if (fetch.isRedirect(res.statusCode)) {
          // HTTP fetch step 5.2
          var location = headers.get('Location');

          // HTTP fetch step 5.3
          var locationURL = null;
          try {
            locationURL = location === null ? null : new URL$1$1(location, request.url).toString();
          } catch (err) {
            // error here can only be invalid URL in Location: header
            // do not throw when options.redirect == manual
            // let the user extract the errorneous redirect URL
            if (request.redirect !== 'manual') {
              reject(new FetchError("uri requested responds with an invalid redirect URL: ".concat(location), 'invalid-redirect'));
              finalize();
              return;
            }
          }

          // HTTP fetch step 5.5
          switch (request.redirect) {
            case 'error':
              reject(new FetchError("uri requested responds with a redirect, redirect mode is set to error: ".concat(request.url), 'no-redirect'));
              finalize();
              return;
            case 'manual':
              // node-fetch-specific step: make manual redirect a bit easier to use by setting the Location header value to the resolved URL.
              if (locationURL !== null) {
                // handle corrupted header
                try {
                  headers.set('Location', locationURL);
                } catch (err) {
                  // istanbul ignore next: nodejs server prevent invalid response headers, we can't test this through normal request
                  reject(err);
                }
              }
              break;
            case 'follow':
              // HTTP-redirect fetch step 2
              if (locationURL === null) {
                break;
              }

              // HTTP-redirect fetch step 5
              if (request.counter >= request.follow) {
                reject(new FetchError("maximum redirect reached at: ".concat(request.url), 'max-redirect'));
                finalize();
                return;
              }

              // HTTP-redirect fetch step 6 (counter increment)
              // Create a new Request object.
              var requestOpts = {
                headers: new Headers$2(request.headers),
                follow: request.follow,
                counter: request.counter + 1,
                agent: request.agent,
                compress: request.compress,
                method: request.method,
                body: request.body,
                signal: request.signal,
                timeout: request.timeout,
                size: request.size
              };
              if (!isDomainOrSubdomain(request.url, locationURL) || !isSameProtocol(request.url, locationURL)) {
                for (var _i5 = 0, _arr = ['authorization', 'www-authenticate', 'cookie', 'cookie2']; _i5 < _arr.length; _i5++) {
                  var name = _arr[_i5];
                  requestOpts.headers["delete"](name);
                }
              }

              // HTTP-redirect fetch step 9
              if (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {
                reject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));
                finalize();
                return;
              }

              // HTTP-redirect fetch step 11
              if (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === 'POST') {
                requestOpts.method = 'GET';
                requestOpts.body = undefined;
                requestOpts.headers["delete"]('content-length');
              }

              // HTTP-redirect fetch step 15
              resolve(fetch(new Request$1(locationURL, requestOpts)));
              finalize();
              return;
          }
        }

        // prepare response
        res.once('end', function () {
          if (signal) signal.removeEventListener('abort', abortAndFinalize);
        });
        var body = res.pipe(new PassThrough$1());
        var response_options = {
          url: request.url,
          status: res.statusCode,
          statusText: res.statusMessage,
          headers: headers,
          size: request.size,
          timeout: request.timeout,
          counter: request.counter
        };

        // HTTP-network fetch step 12.1.1.3
        var codings = headers.get('Content-Encoding');

        // HTTP-network fetch step 12.1.1.4: handle content codings

        // in following scenarios we ignore compression support
        // 1. compression support is disabled
        // 2. HEAD request
        // 3. no Content-Encoding header
        // 4. no content response (204)
        // 5. content not modified response (304)
        if (!request.compress || request.method === 'HEAD' || codings === null || res.statusCode === 204 || res.statusCode === 304) {
          response = new Response(body, response_options);
          resolve(response);
          return;
        }

        // For Node v6+
        // Be less strict when decoding compressed responses, since sometimes
        // servers send slightly invalid responses that are still accepted
        // by common browsers.
        // Always using Z_SYNC_FLUSH is what cURL does.
        var zlibOptions = {
          flush: zlib.Z_SYNC_FLUSH,
          finishFlush: zlib.Z_SYNC_FLUSH
        };

        // for gzip
        if (codings == 'gzip' || codings == 'x-gzip') {
          body = body.pipe(zlib.createGunzip(zlibOptions));
          response = new Response(body, response_options);
          resolve(response);
          return;
        }

        // for deflate
        if (codings == 'deflate' || codings == 'x-deflate') {
          // handle the infamous raw deflate response from old servers
          // a hack for old IIS and Apache servers
          var raw = res.pipe(new PassThrough$1());
          raw.once('data', function (chunk) {
            // see http://stackoverflow.com/questions/37519828
            if ((chunk[0] & 0x0F) === 0x08) {
              body = body.pipe(zlib.createInflate());
            } else {
              body = body.pipe(zlib.createInflateRaw());
            }
            response = new Response(body, response_options);
            resolve(response);
          });
          raw.on('end', function () {
            // some old IIS servers return zero-length OK deflate responses, so 'data' is never emitted.
            if (!response) {
              response = new Response(body, response_options);
              resolve(response);
            }
          });
          return;
        }

        // for br
        if (codings == 'br' && typeof zlib.createBrotliDecompress === 'function') {
          body = body.pipe(zlib.createBrotliDecompress());
          response = new Response(body, response_options);
          resolve(response);
          return;
        }

        // otherwise, use response as-is
        response = new Response(body, response_options);
        resolve(response);
      });
      writeToStream(req, request);
    });
  }
  function fixResponseChunkedTransferBadEnding(request, errorCallback) {
    var socket;
    request.on('socket', function (s) {
      socket = s;
    });
    request.on('response', function (response) {
      var headers = response.headers;
      if (headers['transfer-encoding'] === 'chunked' && !headers['content-length']) {
        response.once('close', function (hadError) {
          // tests for socket presence, as in some situations the
          // the 'socket' event is not triggered for the request
          // (happens in deno), avoids `TypeError`
          // if a data listener is still present we didn't end cleanly
          var hasDataListener = socket && socket.listenerCount('data') > 0;
          if (hasDataListener && !hadError) {
            var err = new Error('Premature close');
            err.code = 'ERR_STREAM_PREMATURE_CLOSE';
            errorCallback(err);
          }
        });
      }
    });
  }
  function destroyStream(stream, err) {
    if (stream.destroy) {
      stream.destroy(err);
    } else {
      // node < 8
      stream.emit('error', err);
      stream.end();
    }
  }

  /**
   * Redirect code matching
   *
   * @param   Number   code  Status code
   * @return  Boolean
   */
  fetch.isRedirect = function (code) {
    return code === 301 || code === 302 || code === 303 || code === 307 || code === 308;
  };

  // expose Promise
  fetch.Promise = global.Promise;

  var lib$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    AbortError: AbortError,
    FetchError: FetchError,
    Headers: Headers$2,
    Request: Request$1,
    Response: Response,
    default: fetch
  });

  var require$$1$1 = /*@__PURE__*/getAugmentedNamespace(lib$1);

  /**
   * @author Toru Nagashima <https://github.com/mysticatea>
   * @copyright 2015 Toru Nagashima. All rights reserved.
   * See LICENSE file in root directory for full license.
   */
  /**
   * @typedef {object} PrivateData
   * @property {EventTarget} eventTarget The event target.
   * @property {{type:string}} event The original event object.
   * @property {number} eventPhase The current event phase.
   * @property {EventTarget|null} currentTarget The current event target.
   * @property {boolean} canceled The flag to prevent default.
   * @property {boolean} stopped The flag to stop propagation.
   * @property {boolean} immediateStopped The flag to stop propagation immediately.
   * @property {Function|null} passiveListener The listener if the current listener is passive. Otherwise this is null.
   * @property {number} timeStamp The unix time.
   * @private
   */

  /**
   * Private data for event wrappers.
   * @type {WeakMap<Event, PrivateData>}
   * @private
   */
  var privateData = new WeakMap();

  /**
   * Cache for wrapper classes.
   * @type {WeakMap<Object, Function>}
   * @private
   */
  var wrappers = new WeakMap();

  /**
   * Get private data.
   * @param {Event} event The event object to get private data.
   * @returns {PrivateData} The private data of the event.
   * @private
   */
  function pd(event) {
    var retv = privateData.get(event);
    console.assert(retv != null, "'this' is expected an Event object, but got", event);
    return retv;
  }

  /**
   * https://dom.spec.whatwg.org/#set-the-canceled-flag
   * @param data {PrivateData} private data.
   */
  function setCancelFlag(data) {
    if (data.passiveListener != null) {
      if (typeof console !== "undefined" && typeof console.error === "function") {
        console.error("Unable to preventDefault inside passive event listener invocation.", data.passiveListener);
      }
      return;
    }
    if (!data.event.cancelable) {
      return;
    }
    data.canceled = true;
    if (typeof data.event.preventDefault === "function") {
      data.event.preventDefault();
    }
  }

  /**
   * @see https://dom.spec.whatwg.org/#interface-event
   * @private
   */
  /**
   * The event wrapper.
   * @constructor
   * @param {EventTarget} eventTarget The event target of this dispatching.
   * @param {Event|{type:string}} event The original event to wrap.
   */
  function Event$3(eventTarget, event) {
    privateData.set(this, {
      eventTarget: eventTarget,
      event: event,
      eventPhase: 2,
      currentTarget: eventTarget,
      canceled: false,
      stopped: false,
      immediateStopped: false,
      passiveListener: null,
      timeStamp: event.timeStamp || Date.now()
    });

    // https://heycam.github.io/webidl/#Unforgeable
    Object.defineProperty(this, "isTrusted", {
      value: false,
      enumerable: true
    });

    // Define accessors
    var keys = Object.keys(event);
    for (var i = 0; i < keys.length; ++i) {
      var key = keys[i];
      if (!(key in this)) {
        Object.defineProperty(this, key, defineRedirectDescriptor(key));
      }
    }
  }

  // Should be enumerable, but class methods are not enumerable.
  Event$3.prototype = {
    /**
     * The type of this event.
     * @type {string}
     */
    get type() {
      return pd(this).event.type;
    },
    /**
     * The target of this event.
     * @type {EventTarget}
     */
    get target() {
      return pd(this).eventTarget;
    },
    /**
     * The target of this event.
     * @type {EventTarget}
     */
    get currentTarget() {
      return pd(this).currentTarget;
    },
    /**
     * @returns {EventTarget[]} The composed path of this event.
     */
    composedPath: function composedPath() {
      var currentTarget = pd(this).currentTarget;
      if (currentTarget == null) {
        return [];
      }
      return [currentTarget];
    },
    /**
     * Constant of NONE.
     * @type {number}
     */
    get NONE() {
      return 0;
    },
    /**
     * Constant of CAPTURING_PHASE.
     * @type {number}
     */
    get CAPTURING_PHASE() {
      return 1;
    },
    /**
     * Constant of AT_TARGET.
     * @type {number}
     */
    get AT_TARGET() {
      return 2;
    },
    /**
     * Constant of BUBBLING_PHASE.
     * @type {number}
     */
    get BUBBLING_PHASE() {
      return 3;
    },
    /**
     * The target of this event.
     * @type {number}
     */
    get eventPhase() {
      return pd(this).eventPhase;
    },
    /**
     * Stop event bubbling.
     * @returns {void}
     */
    stopPropagation: function stopPropagation() {
      var data = pd(this);
      data.stopped = true;
      if (typeof data.event.stopPropagation === "function") {
        data.event.stopPropagation();
      }
    },
    /**
     * Stop event bubbling.
     * @returns {void}
     */
    stopImmediatePropagation: function stopImmediatePropagation() {
      var data = pd(this);
      data.stopped = true;
      data.immediateStopped = true;
      if (typeof data.event.stopImmediatePropagation === "function") {
        data.event.stopImmediatePropagation();
      }
    },
    /**
     * The flag to be bubbling.
     * @type {boolean}
     */
    get bubbles() {
      return Boolean(pd(this).event.bubbles);
    },
    /**
     * The flag to be cancelable.
     * @type {boolean}
     */
    get cancelable() {
      return Boolean(pd(this).event.cancelable);
    },
    /**
     * Cancel this event.
     * @returns {void}
     */
    preventDefault: function preventDefault() {
      setCancelFlag(pd(this));
    },
    /**
     * The flag to indicate cancellation state.
     * @type {boolean}
     */
    get defaultPrevented() {
      return pd(this).canceled;
    },
    /**
     * The flag to be composed.
     * @type {boolean}
     */
    get composed() {
      return Boolean(pd(this).event.composed);
    },
    /**
     * The unix time of this event.
     * @type {number}
     */
    get timeStamp() {
      return pd(this).timeStamp;
    },
    /**
     * The target of this event.
     * @type {EventTarget}
     * @deprecated
     */
    get srcElement() {
      return pd(this).eventTarget;
    },
    /**
     * The flag to stop event bubbling.
     * @type {boolean}
     * @deprecated
     */
    get cancelBubble() {
      return pd(this).stopped;
    },
    set cancelBubble(value) {
      if (!value) {
        return;
      }
      var data = pd(this);
      data.stopped = true;
      if (typeof data.event.cancelBubble === "boolean") {
        data.event.cancelBubble = true;
      }
    },
    /**
     * The flag to indicate cancellation state.
     * @type {boolean}
     * @deprecated
     */
    get returnValue() {
      return !pd(this).canceled;
    },
    set returnValue(value) {
      if (!value) {
        setCancelFlag(pd(this));
      }
    },
    /**
     * Initialize this event object. But do nothing under event dispatching.
     * @param {string} type The event type.
     * @param {boolean} [bubbles=false] The flag to be possible to bubble up.
     * @param {boolean} [cancelable=false] The flag to be possible to cancel.
     * @deprecated
     */
    initEvent: function initEvent() {
      // Do nothing.
    }
  };

  // `constructor` is not enumerable.
  Object.defineProperty(Event$3.prototype, "constructor", {
    value: Event$3,
    configurable: true,
    writable: true
  });

  // Ensure `event instanceof window.Event` is `true`.
  if (typeof window !== "undefined" && typeof window.Event !== "undefined") {
    Object.setPrototypeOf(Event$3.prototype, window.Event.prototype);

    // Make association for wrappers.
    wrappers.set(window.Event.prototype, Event$3);
  }

  /**
   * Get the property descriptor to redirect a given property.
   * @param {string} key Property name to define property descriptor.
   * @returns {PropertyDescriptor} The property descriptor to redirect the property.
   * @private
   */
  function defineRedirectDescriptor(key) {
    return {
      get: function get() {
        return pd(this).event[key];
      },
      set: function set(value) {
        pd(this).event[key] = value;
      },
      configurable: true,
      enumerable: true
    };
  }

  /**
   * Get the property descriptor to call a given method property.
   * @param {string} key Property name to define property descriptor.
   * @returns {PropertyDescriptor} The property descriptor to call the method property.
   * @private
   */
  function defineCallDescriptor(key) {
    return {
      value: function value() {
        var event = pd(this).event;
        return event[key].apply(event, arguments);
      },
      configurable: true,
      enumerable: true
    };
  }

  /**
   * Define new wrapper class.
   * @param {Function} BaseEvent The base wrapper class.
   * @param {Object} proto The prototype of the original event.
   * @returns {Function} The defined wrapper class.
   * @private
   */
  function defineWrapper(BaseEvent, proto) {
    var keys = Object.keys(proto);
    if (keys.length === 0) {
      return BaseEvent;
    }

    /** CustomEvent */
    function CustomEvent(eventTarget, event) {
      BaseEvent.call(this, eventTarget, event);
    }
    CustomEvent.prototype = Object.create(BaseEvent.prototype, {
      constructor: {
        value: CustomEvent,
        configurable: true,
        writable: true
      }
    });

    // Define accessors.
    for (var i = 0; i < keys.length; ++i) {
      var key = keys[i];
      if (!(key in BaseEvent.prototype)) {
        var descriptor = Object.getOwnPropertyDescriptor(proto, key);
        var isFunc = typeof descriptor.value === "function";
        Object.defineProperty(CustomEvent.prototype, key, isFunc ? defineCallDescriptor(key) : defineRedirectDescriptor(key));
      }
    }
    return CustomEvent;
  }

  /**
   * Get the wrapper class of a given prototype.
   * @param {Object} proto The prototype of the original event to get its wrapper.
   * @returns {Function} The wrapper class.
   * @private
   */
  function getWrapper(proto) {
    if (proto == null || proto === Object.prototype) {
      return Event$3;
    }
    var wrapper = wrappers.get(proto);
    if (wrapper == null) {
      wrapper = defineWrapper(getWrapper(Object.getPrototypeOf(proto)), proto);
      wrappers.set(proto, wrapper);
    }
    return wrapper;
  }

  /**
   * Wrap a given event to management a dispatching.
   * @param {EventTarget} eventTarget The event target of this dispatching.
   * @param {Object} event The event to wrap.
   * @returns {Event} The wrapper instance.
   * @private
   */
  function wrapEvent(eventTarget, event) {
    var Wrapper = getWrapper(Object.getPrototypeOf(event));
    return new Wrapper(eventTarget, event);
  }

  /**
   * Get the immediateStopped flag of a given event.
   * @param {Event} event The event to get.
   * @returns {boolean} The flag to stop propagation immediately.
   * @private
   */
  function isStopped(event) {
    return pd(event).immediateStopped;
  }

  /**
   * Set the current event phase of a given event.
   * @param {Event} event The event to set current target.
   * @param {number} eventPhase New event phase.
   * @returns {void}
   * @private
   */
  function setEventPhase(event, eventPhase) {
    pd(event).eventPhase = eventPhase;
  }

  /**
   * Set the current target of a given event.
   * @param {Event} event The event to set current target.
   * @param {EventTarget|null} currentTarget New current target.
   * @returns {void}
   * @private
   */
  function setCurrentTarget(event, currentTarget) {
    pd(event).currentTarget = currentTarget;
  }

  /**
   * Set a passive listener of a given event.
   * @param {Event} event The event to set current target.
   * @param {Function|null} passiveListener New passive listener.
   * @returns {void}
   * @private
   */
  function setPassiveListener(event, passiveListener) {
    pd(event).passiveListener = passiveListener;
  }

  /**
   * @typedef {object} ListenerNode
   * @property {Function} listener
   * @property {1|2|3} listenerType
   * @property {boolean} passive
   * @property {boolean} once
   * @property {ListenerNode|null} next
   * @private
   */

  /**
   * @type {WeakMap<object, Map<string, ListenerNode>>}
   * @private
   */
  var listenersMap = new WeakMap();

  // Listener types
  var CAPTURE = 1;
  var BUBBLE = 2;
  var ATTRIBUTE = 3;

  /**
   * Check whether a given value is an object or not.
   * @param {any} x The value to check.
   * @returns {boolean} `true` if the value is an object.
   */
  function isObject$2(x) {
    return x !== null && _typeof(x) === "object"; //eslint-disable-line no-restricted-syntax
  }

  /**
   * Get listeners.
   * @param {EventTarget} eventTarget The event target to get.
   * @returns {Map<string, ListenerNode>} The listeners.
   * @private
   */
  function getListeners(eventTarget) {
    var listeners = listenersMap.get(eventTarget);
    if (listeners == null) {
      throw new TypeError("'this' is expected an EventTarget object, but got another value.");
    }
    return listeners;
  }

  /**
   * Get the property descriptor for the event attribute of a given event.
   * @param {string} eventName The event name to get property descriptor.
   * @returns {PropertyDescriptor} The property descriptor.
   * @private
   */
  function defineEventAttributeDescriptor(eventName) {
    return {
      get: function get() {
        var listeners = getListeners(this);
        var node = listeners.get(eventName);
        while (node != null) {
          if (node.listenerType === ATTRIBUTE) {
            return node.listener;
          }
          node = node.next;
        }
        return null;
      },
      set: function set(listener) {
        if (typeof listener !== "function" && !isObject$2(listener)) {
          listener = null; // eslint-disable-line no-param-reassign
        }
        var listeners = getListeners(this);

        // Traverse to the tail while removing old value.
        var prev = null;
        var node = listeners.get(eventName);
        while (node != null) {
          if (node.listenerType === ATTRIBUTE) {
            // Remove old value.
            if (prev !== null) {
              prev.next = node.next;
            } else if (node.next !== null) {
              listeners.set(eventName, node.next);
            } else {
              listeners["delete"](eventName);
            }
          } else {
            prev = node;
          }
          node = node.next;
        }

        // Add new value.
        if (listener !== null) {
          var newNode = {
            listener: listener,
            listenerType: ATTRIBUTE,
            passive: false,
            once: false,
            next: null
          };
          if (prev === null) {
            listeners.set(eventName, newNode);
          } else {
            prev.next = newNode;
          }
        }
      },
      configurable: true,
      enumerable: true
    };
  }

  /**
   * Define an event attribute (e.g. `eventTarget.onclick`).
   * @param {Object} eventTargetPrototype The event target prototype to define an event attrbite.
   * @param {string} eventName The event name to define.
   * @returns {void}
   */
  function defineEventAttribute(eventTargetPrototype, eventName) {
    Object.defineProperty(eventTargetPrototype, "on".concat(eventName), defineEventAttributeDescriptor(eventName));
  }

  /**
   * Define a custom EventTarget with event attributes.
   * @param {string[]} eventNames Event names for event attributes.
   * @returns {EventTarget} The custom EventTarget.
   * @private
   */
  function defineCustomEventTarget(eventNames) {
    /** CustomEventTarget */
    function CustomEventTarget() {
      EventTarget$2.call(this);
    }
    CustomEventTarget.prototype = Object.create(EventTarget$2.prototype, {
      constructor: {
        value: CustomEventTarget,
        configurable: true,
        writable: true
      }
    });
    for (var i = 0; i < eventNames.length; ++i) {
      defineEventAttribute(CustomEventTarget.prototype, eventNames[i]);
    }
    return CustomEventTarget;
  }

  /**
   * EventTarget.
   *
   * - This is constructor if no arguments.
   * - This is a function which returns a CustomEventTarget constructor if there are arguments.
   *
   * For example:
   *
   *     class A extends EventTarget {}
   *     class B extends EventTarget("message") {}
   *     class C extends EventTarget("message", "error") {}
   *     class D extends EventTarget(["message", "error"]) {}
   */
  function EventTarget$2() {
    /*eslint-disable consistent-return */
    if (this instanceof EventTarget$2) {
      listenersMap.set(this, new Map());
      return;
    }
    if (arguments.length === 1 && Array.isArray(arguments[0])) {
      return defineCustomEventTarget(arguments[0]);
    }
    if (arguments.length > 0) {
      var types = new Array(arguments.length);
      for (var i = 0; i < arguments.length; ++i) {
        types[i] = arguments[i];
      }
      return defineCustomEventTarget(types);
    }
    throw new TypeError("Cannot call a class as a function");
    /*eslint-enable consistent-return */
  }

  // Should be enumerable, but class methods are not enumerable.
  EventTarget$2.prototype = {
    /**
     * Add a given listener to this event target.
     * @param {string} eventName The event name to add.
     * @param {Function} listener The listener to add.
     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.
     * @returns {void}
     */
    addEventListener: function addEventListener(eventName, listener, options) {
      if (listener == null) {
        return;
      }
      if (typeof listener !== "function" && !isObject$2(listener)) {
        throw new TypeError("'listener' should be a function or an object.");
      }
      var listeners = getListeners(this);
      var optionsIsObj = isObject$2(options);
      var capture = optionsIsObj ? Boolean(options.capture) : Boolean(options);
      var listenerType = capture ? CAPTURE : BUBBLE;
      var newNode = {
        listener: listener,
        listenerType: listenerType,
        passive: optionsIsObj && Boolean(options.passive),
        once: optionsIsObj && Boolean(options.once),
        next: null
      };

      // Set it as the first node if the first node is null.
      var node = listeners.get(eventName);
      if (node === undefined) {
        listeners.set(eventName, newNode);
        return;
      }

      // Traverse to the tail while checking duplication..
      var prev = null;
      while (node != null) {
        if (node.listener === listener && node.listenerType === listenerType) {
          // Should ignore duplication.
          return;
        }
        prev = node;
        node = node.next;
      }

      // Add it.
      prev.next = newNode;
    },
    /**
     * Remove a given listener from this event target.
     * @param {string} eventName The event name to remove.
     * @param {Function} listener The listener to remove.
     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.
     * @returns {void}
     */
    removeEventListener: function removeEventListener(eventName, listener, options) {
      if (listener == null) {
        return;
      }
      var listeners = getListeners(this);
      var capture = isObject$2(options) ? Boolean(options.capture) : Boolean(options);
      var listenerType = capture ? CAPTURE : BUBBLE;
      var prev = null;
      var node = listeners.get(eventName);
      while (node != null) {
        if (node.listener === listener && node.listenerType === listenerType) {
          if (prev !== null) {
            prev.next = node.next;
          } else if (node.next !== null) {
            listeners.set(eventName, node.next);
          } else {
            listeners["delete"](eventName);
          }
          return;
        }
        prev = node;
        node = node.next;
      }
    },
    /**
     * Dispatch a given event.
     * @param {Event|{type:string}} event The event to dispatch.
     * @returns {boolean} `false` if canceled.
     */
    dispatchEvent: function dispatchEvent(event) {
      if (event == null || typeof event.type !== "string") {
        throw new TypeError('"event.type" should be a string.');
      }

      // If listeners aren't registered, terminate.
      var listeners = getListeners(this);
      var eventName = event.type;
      var node = listeners.get(eventName);
      if (node == null) {
        return true;
      }

      // Since we cannot rewrite several properties, so wrap object.
      var wrappedEvent = wrapEvent(this, event);

      // This doesn't process capturing phase and bubbling phase.
      // This isn't participating in a tree.
      var prev = null;
      while (node != null) {
        // Remove this listener if it's once
        if (node.once) {
          if (prev !== null) {
            prev.next = node.next;
          } else if (node.next !== null) {
            listeners.set(eventName, node.next);
          } else {
            listeners["delete"](eventName);
          }
        } else {
          prev = node;
        }

        // Call this listener
        setPassiveListener(wrappedEvent, node.passive ? node.listener : null);
        if (typeof node.listener === "function") {
          try {
            node.listener.call(this, wrappedEvent);
          } catch (err) {
            if (typeof console !== "undefined" && typeof console.error === "function") {
              console.error(err);
            }
          }
        } else if (node.listenerType !== ATTRIBUTE && typeof node.listener.handleEvent === "function") {
          node.listener.handleEvent(wrappedEvent);
        }

        // Break if `event.stopImmediatePropagation` was called.
        if (isStopped(wrappedEvent)) {
          break;
        }
        node = node.next;
      }
      setPassiveListener(wrappedEvent, null);
      setEventPhase(wrappedEvent, 0);
      setCurrentTarget(wrappedEvent, null);
      return !wrappedEvent.defaultPrevented;
    }
  };

  // `constructor` is not enumerable.
  Object.defineProperty(EventTarget$2.prototype, "constructor", {
    value: EventTarget$2,
    configurable: true,
    writable: true
  });

  // Ensure `eventTarget instanceof window.EventTarget` is `true`.
  if (typeof window !== "undefined" && typeof window.EventTarget !== "undefined") {
    Object.setPrototypeOf(EventTarget$2.prototype, window.EventTarget.prototype);
  }

  /**
   * The signal class.
   * @see https://dom.spec.whatwg.org/#abortsignal
   */
  var AbortSignal = /*#__PURE__*/function (_EventTarget) {
    /**
     * AbortSignal cannot be constructed directly.
     */
    function AbortSignal() {
      _classCallCheck(this, AbortSignal);
      _callSuper(this, AbortSignal);
      throw new TypeError("AbortSignal cannot be constructed directly");
    }
    /**
     * Returns `true` if this `AbortSignal`'s `AbortController` has signaled to abort, and `false` otherwise.
     */
    _inherits(AbortSignal, _EventTarget);
    return _createClass(AbortSignal, [{
      key: "aborted",
      get: function get() {
        var aborted = abortedFlags.get(this);
        if (typeof aborted !== "boolean") {
          throw new TypeError("Expected 'this' to be an 'AbortSignal' object, but got ".concat(this === null ? "null" : _typeof(this)));
        }
        return aborted;
      }
    }]);
  }(EventTarget$2);
  defineEventAttribute(AbortSignal.prototype, "abort");
  /**
   * Create an AbortSignal object.
   */
  function createAbortSignal() {
    var signal = Object.create(AbortSignal.prototype);
    EventTarget$2.call(signal);
    abortedFlags.set(signal, false);
    return signal;
  }
  /**
   * Abort a given signal.
   */
  function abortSignal(signal) {
    if (abortedFlags.get(signal) !== false) {
      return;
    }
    abortedFlags.set(signal, true);
    signal.dispatchEvent({
      type: "abort"
    });
  }
  /**
   * Aborted flag for each instances.
   */
  var abortedFlags = new WeakMap();
  // Properties should be enumerable.
  Object.defineProperties(AbortSignal.prototype, {
    aborted: {
      enumerable: true
    }
  });
  // `toString()` should return `"[object AbortSignal]"`
  if (typeof Symbol === "function" && _typeof(Symbol.toStringTag) === "symbol") {
    Object.defineProperty(AbortSignal.prototype, Symbol.toStringTag, {
      configurable: true,
      value: "AbortSignal"
    });
  }

  /**
   * The AbortController.
   * @see https://dom.spec.whatwg.org/#abortcontroller
   */
  var AbortController = /*#__PURE__*/function () {
    /**
     * Initialize this controller.
     */
    function AbortController() {
      _classCallCheck(this, AbortController);
      signals.set(this, createAbortSignal());
    }
    /**
     * Returns the `AbortSignal` object associated with this object.
     */
    return _createClass(AbortController, [{
      key: "signal",
      get: function get() {
        return getSignal(this);
      }
      /**
       * Abort and signal to any observers that the associated activity is to be aborted.
       */
    }, {
      key: "abort",
      value: function abort() {
        abortSignal(getSignal(this));
      }
    }]);
  }();
  /**
   * Associated signals.
   */
  var signals = new WeakMap();
  /**
   * Get the associated signal of a given controller.
   */
  function getSignal(controller) {
    var signal = signals.get(controller);
    if (signal == null) {
      throw new TypeError("Expected 'this' to be an 'AbortController' object, but got ".concat(controller === null ? "null" : _typeof(controller)));
    }
    return signal;
  }
  // Properties should be enumerable.
  Object.defineProperties(AbortController.prototype, {
    signal: {
      enumerable: true
    },
    abort: {
      enumerable: true
    }
  });
  if (typeof Symbol === "function" && _typeof(Symbol.toStringTag) === "symbol") {
    Object.defineProperty(AbortController.prototype, Symbol.toStringTag, {
      configurable: true,
      value: "AbortController"
    });
  }

  var abortController = /*#__PURE__*/Object.freeze({
    __proto__: null,
    AbortController: AbortController,
    AbortSignal: AbortSignal,
    default: AbortController
  });

  var require$$2 = /*@__PURE__*/getAugmentedNamespace(abortController);

  var agent = {};

  var src$1 = {exports: {}};

  var browser$1 = {exports: {}};

  var ms;
  var hasRequiredMs;
  function requireMs() {
    if (hasRequiredMs) return ms;
    hasRequiredMs = 1;
    var s = 1000;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var w = d * 7;
    var y = d * 365.25;

    /**
     * Parse or format the given `val`.
     *
     * Options:
     *
     *  - `long` verbose formatting [false]
     *
     * @param {String|Number} val
     * @param {Object} [options]
     * @throws {Error} throw an error if val is not a non-empty string or a number
     * @return {String|Number}
     * @api public
     */

    ms = function ms(val, options) {
      options = options || {};
      var type = _typeof(val);
      if (type === 'string' && val.length > 0) {
        return parse(val);
      } else if (type === 'number' && isFinite(val)) {
        return options["long"] ? fmtLong(val) : fmtShort(val);
      }
      throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
    };

    /**
     * Parse the given `str` and return milliseconds.
     *
     * @param {String} str
     * @return {Number}
     * @api private
     */

    function parse(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || 'ms').toLowerCase();
      switch (type) {
        case 'years':
        case 'year':
        case 'yrs':
        case 'yr':
        case 'y':
          return n * y;
        case 'weeks':
        case 'week':
        case 'w':
          return n * w;
        case 'days':
        case 'day':
        case 'd':
          return n * d;
        case 'hours':
        case 'hour':
        case 'hrs':
        case 'hr':
        case 'h':
          return n * h;
        case 'minutes':
        case 'minute':
        case 'mins':
        case 'min':
        case 'm':
          return n * m;
        case 'seconds':
        case 'second':
        case 'secs':
        case 'sec':
        case 's':
          return n * s;
        case 'milliseconds':
        case 'millisecond':
        case 'msecs':
        case 'msec':
        case 'ms':
          return n;
        default:
          return undefined;
      }
    }

    /**
     * Short format for `ms`.
     *
     * @param {Number} ms
     * @return {String}
     * @api private
     */

    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return Math.round(ms / d) + 'd';
      }
      if (msAbs >= h) {
        return Math.round(ms / h) + 'h';
      }
      if (msAbs >= m) {
        return Math.round(ms / m) + 'm';
      }
      if (msAbs >= s) {
        return Math.round(ms / s) + 's';
      }
      return ms + 'ms';
    }

    /**
     * Long format for `ms`.
     *
     * @param {Number} ms
     * @return {String}
     * @api private
     */

    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return plural(ms, msAbs, d, 'day');
      }
      if (msAbs >= h) {
        return plural(ms, msAbs, h, 'hour');
      }
      if (msAbs >= m) {
        return plural(ms, msAbs, m, 'minute');
      }
      if (msAbs >= s) {
        return plural(ms, msAbs, s, 'second');
      }
      return ms + ' ms';
    }

    /**
     * Pluralization helper.
     */

    function plural(ms, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
    }
    return ms;
  }

  var common$1;
  var hasRequiredCommon;
  function requireCommon() {
    if (hasRequiredCommon) return common$1;
    hasRequiredCommon = 1;
    /**
     * This is the common logic for both the Node.js and web browser
     * implementations of `debug()`.
     */

    function setup(env) {
      createDebug.debug = createDebug;
      createDebug["default"] = createDebug;
      createDebug.coerce = coerce;
      createDebug.disable = disable;
      createDebug.enable = enable;
      createDebug.enabled = enabled;
      createDebug.humanize = requireMs();
      createDebug.destroy = destroy;
      Object.keys(env).forEach(function (key) {
        createDebug[key] = env[key];
      });

      /**
      * The currently active debug mode names, and names to skip.
      */

      createDebug.names = [];
      createDebug.skips = [];

      /**
      * Map of special "%n" handling functions, for the debug "format" argument.
      *
      * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
      */
      createDebug.formatters = {};

      /**
      * Selects a color for a debug namespace
      * @param {String} namespace The namespace string for the debug instance to be colored
      * @return {Number|String} An ANSI color code for the given namespace
      * @api private
      */
      function selectColor(namespace) {
        var hash = 0;
        for (var i = 0; i < namespace.length; i++) {
          hash = (hash << 5) - hash + namespace.charCodeAt(i);
          hash |= 0; // Convert to 32bit integer
        }
        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
      }
      createDebug.selectColor = selectColor;

      /**
      * Create a debugger with the given `namespace`.
      *
      * @param {String} namespace
      * @return {Function}
      * @api public
      */
      function createDebug(namespace) {
        var prevTime;
        var enableOverride = null;
        var namespacesCache;
        var enabledCache;
        function debug() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          // Disabled?
          if (!debug.enabled) {
            return;
          }
          var self = debug;

          // Set `diff` timestamp
          var curr = Number(new Date());
          var ms = curr - (prevTime || curr);
          self.diff = ms;
          self.prev = prevTime;
          self.curr = curr;
          prevTime = curr;
          args[0] = createDebug.coerce(args[0]);
          if (typeof args[0] !== 'string') {
            // Anything else let's inspect with %O
            args.unshift('%O');
          }

          // Apply any `formatters` transformations
          var index = 0;
          args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
            // If we encounter an escaped % then don't increase the array index
            if (match === '%%') {
              return '%';
            }
            index++;
            var formatter = createDebug.formatters[format];
            if (typeof formatter === 'function') {
              var val = args[index];
              match = formatter.call(self, val);

              // Now we need to remove `args[index]` since it's inlined in the `format`
              args.splice(index, 1);
              index--;
            }
            return match;
          });

          // Apply env-specific formatting (colors, etc.)
          createDebug.formatArgs.call(self, args);
          var logFn = self.log || createDebug.log;
          logFn.apply(self, args);
        }
        debug.namespace = namespace;
        debug.useColors = createDebug.useColors();
        debug.color = createDebug.selectColor(namespace);
        debug.extend = extend;
        debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.

        Object.defineProperty(debug, 'enabled', {
          enumerable: true,
          configurable: false,
          get: function get() {
            if (enableOverride !== null) {
              return enableOverride;
            }
            if (namespacesCache !== createDebug.namespaces) {
              namespacesCache = createDebug.namespaces;
              enabledCache = createDebug.enabled(namespace);
            }
            return enabledCache;
          },
          set: function set(v) {
            enableOverride = v;
          }
        });

        // Env-specific initialization logic for debug instances
        if (typeof createDebug.init === 'function') {
          createDebug.init(debug);
        }
        return debug;
      }
      function extend(namespace, delimiter) {
        var newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
        newDebug.log = this.log;
        return newDebug;
      }

      /**
      * Enables a debug mode by namespaces. This can include modes
      * separated by a colon and wildcards.
      *
      * @param {String} namespaces
      * @api public
      */
      function enable(namespaces) {
        createDebug.save(namespaces);
        createDebug.namespaces = namespaces;
        createDebug.names = [];
        createDebug.skips = [];
        var i;
        var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
        var len = split.length;
        for (i = 0; i < len; i++) {
          if (!split[i]) {
            // ignore empty strings
            continue;
          }
          namespaces = split[i].replace(/\*/g, '.*?');
          if (namespaces[0] === '-') {
            createDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));
          } else {
            createDebug.names.push(new RegExp('^' + namespaces + '$'));
          }
        }
      }

      /**
      * Disable debug output.
      *
      * @return {String} namespaces
      * @api public
      */
      function disable() {
        var namespaces = [].concat(_toConsumableArray(createDebug.names.map(toNamespace)), _toConsumableArray(createDebug.skips.map(toNamespace).map(function (namespace) {
          return '-' + namespace;
        }))).join(',');
        createDebug.enable('');
        return namespaces;
      }

      /**
      * Returns true if the given mode name is enabled, false otherwise.
      *
      * @param {String} name
      * @return {Boolean}
      * @api public
      */
      function enabled(name) {
        if (name[name.length - 1] === '*') {
          return true;
        }
        var i;
        var len;
        for (i = 0, len = createDebug.skips.length; i < len; i++) {
          if (createDebug.skips[i].test(name)) {
            return false;
          }
        }
        for (i = 0, len = createDebug.names.length; i < len; i++) {
          if (createDebug.names[i].test(name)) {
            return true;
          }
        }
        return false;
      }

      /**
      * Convert regexp to namespace
      *
      * @param {RegExp} regxep
      * @return {String} namespace
      * @api private
      */
      function toNamespace(regexp) {
        return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, '*');
      }

      /**
      * Coerce `val`.
      *
      * @param {Mixed} val
      * @return {Mixed}
      * @api private
      */
      function coerce(val) {
        if (val instanceof Error) {
          return val.stack || val.message;
        }
        return val;
      }

      /**
      * XXX DO NOT USE. This is a temporary stub function.
      * XXX It WILL be removed in the next major release.
      */
      function destroy() {
        console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
      }
      createDebug.enable(createDebug.load());
      return createDebug;
    }
    common$1 = setup;
    return common$1;
  }

  /* eslint-env browser */
  var hasRequiredBrowser;
  function requireBrowser() {
    if (hasRequiredBrowser) return browser$1.exports;
    hasRequiredBrowser = 1;
    (function (module, exports) {
      /**
       * This is the web browser implementation of `debug()`.
       */

      exports.formatArgs = formatArgs;
      exports.save = save;
      exports.load = load;
      exports.useColors = useColors;
      exports.storage = localstorage();
      exports.destroy = function () {
        var warned = false;
        return function () {
          if (!warned) {
            warned = true;
            console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
          }
        };
      }();

      /**
       * Colors.
       */

      exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];

      /**
       * Currently only WebKit-based Web Inspectors, Firefox >= v31,
       * and the Firebug extension (any Firefox version) are known
       * to support "%c" CSS customizations.
       *
       * TODO: add a `localStorage` variable to explicitly enable/disable colors
       */

      // eslint-disable-next-line complexity
      function useColors() {
        // NB: In an Electron preload script, document will be defined but not fully
        // initialized. Since we know we're in Chrome, we'll just detect this case
        // explicitly
        if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
          return true;
        }

        // Internet Explorer and Edge do not support colors.
        if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
          return false;
        }

        // Is webkit? http://stackoverflow.com/a/16459606/376773
        // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
        return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance ||
        // Is firebug? http://stackoverflow.com/a/398120/376773
        typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) ||
        // Is firefox >= v31?
        // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
        typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 ||
        // Double check webkit in userAgent just in case we are in a worker
        typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
      }

      /**
       * Colorize log arguments if enabled.
       *
       * @api public
       */

      function formatArgs(args) {
        args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);
        if (!this.useColors) {
          return;
        }
        var c = 'color: ' + this.color;
        args.splice(1, 0, c, 'color: inherit');

        // The final "%c" is somewhat tricky, because there could be other
        // arguments passed either before or after the %c, so we need to
        // figure out the correct index to insert the CSS into
        var index = 0;
        var lastC = 0;
        args[0].replace(/%[a-zA-Z%]/g, function (match) {
          if (match === '%%') {
            return;
          }
          index++;
          if (match === '%c') {
            // We only are interested in the *last* %c
            // (the user may have provided their own)
            lastC = index;
          }
        });
        args.splice(lastC, 0, c);
      }

      /**
       * Invokes `console.debug()` when available.
       * No-op when `console.debug` is not a "function".
       * If `console.debug` is not available, falls back
       * to `console.log`.
       *
       * @api public
       */
      exports.log = console.debug || console.log || function () {};

      /**
       * Save `namespaces`.
       *
       * @param {String} namespaces
       * @api private
       */
      function save(namespaces) {
        try {
          if (namespaces) {
            exports.storage.setItem('debug', namespaces);
          } else {
            exports.storage.removeItem('debug');
          }
        } catch (error) {
          // Swallow
          // XXX (@Qix-) should we be logging these?
        }
      }

      /**
       * Load `namespaces`.
       *
       * @return {String} returns the previously persisted debug modes
       * @api private
       */
      function load() {
        var r;
        try {
          r = exports.storage.getItem('debug');
        } catch (error) {
          // Swallow
          // XXX (@Qix-) should we be logging these?
        }

        // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
        if (!r && typeof process !== 'undefined' && 'env' in process) {
          r = process.env.DEBUG;
        }
        return r;
      }

      /**
       * Localstorage attempts to return the localstorage.
       *
       * This is necessary because safari throws
       * when a user disables cookies/localstorage
       * and you attempt to access it.
       *
       * @return {LocalStorage}
       * @api private
       */

      function localstorage() {
        try {
          // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
          // The Browser also has localStorage in the global context.
          return localStorage;
        } catch (error) {
          // Swallow
          // XXX (@Qix-) should we be logging these?
        }
      }
      module.exports = requireCommon()(exports);
      var formatters = module.exports.formatters;

      /**
       * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
       */

      formatters.j = function (v) {
        try {
          return JSON.stringify(v);
        } catch (error) {
          return '[UnexpectedJSONParseError]: ' + error.message;
        }
      };
    })(browser$1, browser$1.exports);
    return browser$1.exports;
  }

  var node$1 = {exports: {}};

  var hasFlag;
  var hasRequiredHasFlag;
  function requireHasFlag() {
    if (hasRequiredHasFlag) return hasFlag;
    hasRequiredHasFlag = 1;
    hasFlag = function hasFlag(flag, argv) {
      argv = argv || process.argv;
      var prefix = flag.startsWith('-') ? '' : flag.length === 1 ? '-' : '--';
      var pos = argv.indexOf(prefix + flag);
      var terminatorPos = argv.indexOf('--');
      return pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);
    };
    return hasFlag;
  }

  var supportsColor_1;
  var hasRequiredSupportsColor;
  function requireSupportsColor() {
    if (hasRequiredSupportsColor) return supportsColor_1;
    hasRequiredSupportsColor = 1;
    var os = require$$0$4;
    var hasFlag = requireHasFlag();
    var env = process.env;
    var forceColor;
    if (hasFlag('no-color') || hasFlag('no-colors') || hasFlag('color=false')) {
      forceColor = false;
    } else if (hasFlag('color') || hasFlag('colors') || hasFlag('color=true') || hasFlag('color=always')) {
      forceColor = true;
    }
    if ('FORCE_COLOR' in env) {
      forceColor = env.FORCE_COLOR.length === 0 || parseInt(env.FORCE_COLOR, 10) !== 0;
    }
    function translateLevel(level) {
      if (level === 0) {
        return false;
      }
      return {
        level: level,
        hasBasic: true,
        has256: level >= 2,
        has16m: level >= 3
      };
    }
    function supportsColor(stream) {
      if (forceColor === false) {
        return 0;
      }
      if (hasFlag('color=16m') || hasFlag('color=full') || hasFlag('color=truecolor')) {
        return 3;
      }
      if (hasFlag('color=256')) {
        return 2;
      }
      if (stream && !stream.isTTY && forceColor !== true) {
        return 0;
      }
      var min = forceColor ? 1 : 0;
      if (process.platform === 'win32') {
        // Node.js 7.5.0 is the first version of Node.js to include a patch to
        // libuv that enables 256 color output on Windows. Anything earlier and it
        // won't work. However, here we target Node.js 8 at minimum as it is an LTS
        // release, and Node.js 7 is not. Windows 10 build 10586 is the first Windows
        // release that supports 256 colors. Windows 10 build 14931 is the first release
        // that supports 16m/TrueColor.
        var osRelease = os.release().split('.');
        if (Number(process.versions.node.split('.')[0]) >= 8 && Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
          return Number(osRelease[2]) >= 14931 ? 3 : 2;
        }
        return 1;
      }
      if ('CI' in env) {
        if (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI'].some(function (sign) {
          return sign in env;
        }) || env.CI_NAME === 'codeship') {
          return 1;
        }
        return min;
      }
      if ('TEAMCITY_VERSION' in env) {
        return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
      }
      if (env.COLORTERM === 'truecolor') {
        return 3;
      }
      if ('TERM_PROGRAM' in env) {
        var version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);
        switch (env.TERM_PROGRAM) {
          case 'iTerm.app':
            return version >= 3 ? 3 : 2;
          case 'Apple_Terminal':
            return 2;
          // No default
        }
      }
      if (/-256(color)?$/i.test(env.TERM)) {
        return 2;
      }
      if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
        return 1;
      }
      if ('COLORTERM' in env) {
        return 1;
      }
      if (env.TERM === 'dumb') {
        return min;
      }
      return min;
    }
    function getSupportLevel(stream) {
      var level = supportsColor(stream);
      return translateLevel(level);
    }
    supportsColor_1 = {
      supportsColor: getSupportLevel,
      stdout: getSupportLevel(process.stdout),
      stderr: getSupportLevel(process.stderr)
    };
    return supportsColor_1;
  }

  /**
   * Module dependencies.
   */
  var hasRequiredNode$1;
  function requireNode$1() {
    if (hasRequiredNode$1) return node$1.exports;
    hasRequiredNode$1 = 1;
    (function (module, exports) {
      var tty = require$$0$5;
      var util = require$$1$3;

      /**
       * This is the Node.js implementation of `debug()`.
       */

      exports.init = init;
      exports.log = log;
      exports.formatArgs = formatArgs;
      exports.save = save;
      exports.load = load;
      exports.useColors = useColors;
      exports.destroy = util.deprecate(function () {}, 'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');

      /**
       * Colors.
       */

      exports.colors = [6, 2, 3, 4, 5, 1];
      try {
        // Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)
        // eslint-disable-next-line import/no-extraneous-dependencies
        var supportsColor = requireSupportsColor();
        if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
          exports.colors = [20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62, 63, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113, 128, 129, 134, 135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 220, 221];
        }
      } catch (error) {
        // Swallow - we only care if `supports-color` is available; it doesn't have to be.
      }

      /**
       * Build up the default `inspectOpts` object from the environment variables.
       *
       *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
       */

      exports.inspectOpts = Object.keys(process.env).filter(function (key) {
        return /^debug_/i.test(key);
      }).reduce(function (obj, key) {
        // Camel-case
        var prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, function (_, k) {
          return k.toUpperCase();
        });

        // Coerce string value into JS value
        var val = process.env[key];
        if (/^(yes|on|true|enabled)$/i.test(val)) {
          val = true;
        } else if (/^(no|off|false|disabled)$/i.test(val)) {
          val = false;
        } else if (val === 'null') {
          val = null;
        } else {
          val = Number(val);
        }
        obj[prop] = val;
        return obj;
      }, {});

      /**
       * Is stdout a TTY? Colored output is enabled when `true`.
       */

      function useColors() {
        return 'colors' in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(process.stderr.fd);
      }

      /**
       * Adds ANSI color escape codes if enabled.
       *
       * @api public
       */

      function formatArgs(args) {
        var name = this.namespace,
          useColors = this.useColors;
        if (useColors) {
          var c = this.color;
          var colorCode = "\x1B[3" + (c < 8 ? c : '8;5;' + c);
          var prefix = "  ".concat(colorCode, ";1m").concat(name, " \x1B[0m");
          args[0] = prefix + args[0].split('\n').join('\n' + prefix);
          args.push(colorCode + 'm+' + module.exports.humanize(this.diff) + "\x1B[0m");
        } else {
          args[0] = getDate() + name + ' ' + args[0];
        }
      }
      function getDate() {
        if (exports.inspectOpts.hideDate) {
          return '';
        }
        return new Date().toISOString() + ' ';
      }

      /**
       * Invokes `util.formatWithOptions()` with the specified arguments and writes to stderr.
       */

      function log() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return process.stderr.write(util.formatWithOptions.apply(util, [exports.inspectOpts].concat(args)) + '\n');
      }

      /**
       * Save `namespaces`.
       *
       * @param {String} namespaces
       * @api private
       */
      function save(namespaces) {
        if (namespaces) {
          process.env.DEBUG = namespaces;
        } else {
          // If you set a process.env field to null or undefined, it gets cast to the
          // string 'null' or 'undefined'. Just delete instead.
          delete process.env.DEBUG;
        }
      }

      /**
       * Load `namespaces`.
       *
       * @return {String} returns the previously persisted debug modes
       * @api private
       */

      function load() {
        return process.env.DEBUG;
      }

      /**
       * Init logic for `debug` instances.
       *
       * Create a new `inspectOpts` object in case `useColors` is set
       * differently for a particular `debug` instance.
       */

      function init(debug) {
        debug.inspectOpts = {};
        var keys = Object.keys(exports.inspectOpts);
        for (var i = 0; i < keys.length; i++) {
          debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
        }
      }
      module.exports = requireCommon()(exports);
      var formatters = module.exports.formatters;

      /**
       * Map %o to `util.inspect()`, all on a single line.
       */

      formatters.o = function (v) {
        this.inspectOpts.colors = this.useColors;
        return util.inspect(v, this.inspectOpts).split('\n').map(function (str) {
          return str.trim();
        }).join(' ');
      };

      /**
       * Map %O to `util.inspect()`, allowing multiple lines if needed.
       */

      formatters.O = function (v) {
        this.inspectOpts.colors = this.useColors;
        return util.inspect(v, this.inspectOpts);
      };
    })(node$1, node$1.exports);
    return node$1.exports;
  }

  /**
   * Detect Electron renderer / nwjs process, which is node, but we should
   * treat as a browser.
   */
  if (typeof process === 'undefined' || process.type === 'renderer' || process.browser === true || process.__nwjs) {
    src$1.exports = requireBrowser();
  } else {
    src$1.exports = requireNode$1();
  }
  var srcExports = src$1.exports;

  var promisify$1 = {};

  Object.defineProperty(promisify$1, "__esModule", {
    value: true
  });
  function promisify(fn) {
    return function (req, opts) {
      var _this = this;
      return new Promise(function (resolve, reject) {
        fn.call(_this, req, opts, function (err, rtn) {
          if (err) {
            reject(err);
          } else {
            resolve(rtn);
          }
        });
      });
    };
  }
  promisify$1["default"] = promisify;

  var __importDefault$g = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };
  var events_1$4 = require$$0$6;
  var debug_1$2 = __importDefault$g(srcExports);
  var promisify_1 = __importDefault$g(promisify$1);
  var debug$2 = debug_1$2["default"]('agent-base');
  function isAgent(v) {
    return Boolean(v) && typeof v.addRequest === 'function';
  }
  function isSecureEndpoint() {
    var _Error = new Error(),
      stack = _Error.stack;
    if (typeof stack !== 'string') return false;
    return stack.split('\n').some(function (l) {
      return l.indexOf('(https.js:') !== -1 || l.indexOf('node:https:') !== -1;
    });
  }
  function createAgent(callback, opts) {
    return new createAgent.Agent(callback, opts);
  }
  (function (createAgent) {
    /**
     * Base `http.Agent` implementation.
     * No pooling/keep-alive is implemented by default.
     *
     * @param {Function} callback
     * @api public
     */
    var Agent = /*#__PURE__*/function (_events_1$EventEmitte) {
      function Agent(callback, _opts) {
        var _this;
        _classCallCheck(this, Agent);
        _this = _callSuper(this, Agent);
        var opts = _opts;
        if (typeof callback === 'function') {
          _this.callback = callback;
        } else if (callback) {
          opts = callback;
        }
        // Timeout for the socket to be returned from the callback
        _this.timeout = null;
        if (opts && typeof opts.timeout === 'number') {
          _this.timeout = opts.timeout;
        }
        // These aren't actually used by `agent-base`, but are required
        // for the TypeScript definition files in `@types/node` :/
        _this.maxFreeSockets = 1;
        _this.maxSockets = 1;
        _this.maxTotalSockets = Infinity;
        _this.sockets = {};
        _this.freeSockets = {};
        _this.requests = {};
        _this.options = {};
        return _this;
      }
      _inherits(Agent, _events_1$EventEmitte);
      return _createClass(Agent, [{
        key: "defaultPort",
        get: function get() {
          if (typeof this.explicitDefaultPort === 'number') {
            return this.explicitDefaultPort;
          }
          return isSecureEndpoint() ? 443 : 80;
        },
        set: function set(v) {
          this.explicitDefaultPort = v;
        }
      }, {
        key: "protocol",
        get: function get() {
          if (typeof this.explicitProtocol === 'string') {
            return this.explicitProtocol;
          }
          return isSecureEndpoint() ? 'https:' : 'http:';
        },
        set: function set(v) {
          this.explicitProtocol = v;
        }
      }, {
        key: "callback",
        value: function callback(req, opts, fn) {
          throw new Error('"agent-base" has no default implementation, you must subclass and override `callback()`');
        }
        /**
         * Called by node-core's "_http_client.js" module when creating
         * a new HTTP request with this Agent instance.
         *
         * @api public
         */
      }, {
        key: "addRequest",
        value: function addRequest(req, _opts) {
          var _this2 = this;
          var opts = Object.assign({}, _opts);
          if (typeof opts.secureEndpoint !== 'boolean') {
            opts.secureEndpoint = isSecureEndpoint();
          }
          if (opts.host == null) {
            opts.host = 'localhost';
          }
          if (opts.port == null) {
            opts.port = opts.secureEndpoint ? 443 : 80;
          }
          if (opts.protocol == null) {
            opts.protocol = opts.secureEndpoint ? 'https:' : 'http:';
          }
          if (opts.host && opts.path) {
            // If both a `host` and `path` are specified then it's most
            // likely the result of a `url.parse()` call... we need to
            // remove the `path` portion so that `net.connect()` doesn't
            // attempt to open that as a unix socket file.
            delete opts.path;
          }
          delete opts.agent;
          delete opts.hostname;
          delete opts._defaultAgent;
          delete opts.defaultPort;
          delete opts.createConnection;
          // Hint to use "Connection: close"
          // XXX: non-documented `http` module API :(
          req._last = true;
          req.shouldKeepAlive = false;
          var timedOut = false;
          var timeoutId = null;
          var timeoutMs = opts.timeout || this.timeout;
          var onerror = function onerror(err) {
            if (req._hadError) return;
            req.emit('error', err);
            // For Safety. Some additional errors might fire later on
            // and we need to make sure we don't double-fire the error event.
            req._hadError = true;
          };
          var ontimeout = function ontimeout() {
            timeoutId = null;
            timedOut = true;
            var err = new Error("A \"socket\" was not created for HTTP request before ".concat(timeoutMs, "ms"));
            err.code = 'ETIMEOUT';
            onerror(err);
          };
          var callbackError = function callbackError(err) {
            if (timedOut) return;
            if (timeoutId !== null) {
              clearTimeout(timeoutId);
              timeoutId = null;
            }
            onerror(err);
          };
          var onsocket = function onsocket(socket) {
            if (timedOut) return;
            if (timeoutId != null) {
              clearTimeout(timeoutId);
              timeoutId = null;
            }
            if (isAgent(socket)) {
              // `socket` is actually an `http.Agent` instance, so
              // relinquish responsibility for this `req` to the Agent
              // from here on
              debug$2('Callback returned another Agent instance %o', socket.constructor.name);
              socket.addRequest(req, opts);
              return;
            }
            if (socket) {
              socket.once('free', function () {
                _this2.freeSocket(socket, opts);
              });
              req.onSocket(socket);
              return;
            }
            var err = new Error("no Duplex stream was returned to agent-base for `".concat(req.method, " ").concat(req.path, "`"));
            onerror(err);
          };
          if (typeof this.callback !== 'function') {
            onerror(new Error('`callback` is not defined'));
            return;
          }
          if (!this.promisifiedCallback) {
            if (this.callback.length >= 3) {
              debug$2('Converting legacy callback function to promise');
              this.promisifiedCallback = promisify_1["default"](this.callback);
            } else {
              this.promisifiedCallback = this.callback;
            }
          }
          if (typeof timeoutMs === 'number' && timeoutMs > 0) {
            timeoutId = setTimeout(ontimeout, timeoutMs);
          }
          if ('port' in opts && typeof opts.port !== 'number') {
            opts.port = Number(opts.port);
          }
          try {
            debug$2('Resolving socket for %o request: %o', opts.protocol, "".concat(req.method, " ").concat(req.path));
            Promise.resolve(this.promisifiedCallback(req, opts)).then(onsocket, callbackError);
          } catch (err) {
            Promise.reject(err)["catch"](callbackError);
          }
        }
      }, {
        key: "freeSocket",
        value: function freeSocket(socket, opts) {
          debug$2('Freeing socket %o %o', socket.constructor.name, opts);
          socket.destroy();
        }
      }, {
        key: "destroy",
        value: function destroy() {
          debug$2('Destroying agent %o', this.constructor.name);
        }
      }]);
    }(events_1$4.EventEmitter);
    createAgent.Agent = Agent;
    // So that `instanceof` works correctly
    createAgent.prototype = createAgent.Agent.prototype;
  })(createAgent || (createAgent = {}));
  var src = createAgent;

  var parseProxyResponse$1 = {};

  var __importDefault$f = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };
  Object.defineProperty(parseProxyResponse$1, "__esModule", {
    value: true
  });
  var debug_1$1 = __importDefault$f(srcExports);
  var debug$1 = debug_1$1["default"]('https-proxy-agent:parse-proxy-response');
  function parseProxyResponse(socket) {
    return new Promise(function (resolve, reject) {
      // we need to buffer any HTTP traffic that happens with the proxy before we get
      // the CONNECT response, so that if the response is anything other than an "200"
      // response code, then we can re-play the "data" events on the socket once the
      // HTTP parser is hooked up...
      var buffersLength = 0;
      var buffers = [];
      function read() {
        var b = socket.read();
        if (b) ondata(b);else socket.once('readable', read);
      }
      function cleanup() {
        socket.removeListener('end', onend);
        socket.removeListener('error', onerror);
        socket.removeListener('close', onclose);
        socket.removeListener('readable', read);
      }
      function onclose(err) {
        debug$1('onclose had error %o', err);
      }
      function onend() {
        debug$1('onend');
      }
      function onerror(err) {
        cleanup();
        debug$1('onerror %o', err);
        reject(err);
      }
      function ondata(b) {
        buffers.push(b);
        buffersLength += b.length;
        var buffered = Buffer.concat(buffers, buffersLength);
        var endOfHeaders = buffered.indexOf('\r\n\r\n');
        if (endOfHeaders === -1) {
          // keep buffering
          debug$1('have not received end of HTTP headers yet...');
          read();
          return;
        }
        var firstLine = buffered.toString('ascii', 0, buffered.indexOf('\r\n'));
        var statusCode = +firstLine.split(' ')[1];
        debug$1('got proxy server response: %o', firstLine);
        resolve({
          statusCode: statusCode,
          buffered: buffered
        });
      }
      socket.on('error', onerror);
      socket.on('close', onclose);
      socket.on('end', onend);
      read();
    });
  }
  parseProxyResponse$1["default"] = parseProxyResponse;

  var __awaiter = commonjsGlobal && commonjsGlobal.__awaiter || function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function (resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var __importDefault$e = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };
  Object.defineProperty(agent, "__esModule", {
    value: true
  });
  var net_1 = __importDefault$e(require$$0$7);
  var tls_1 = __importDefault$e(require$$1$4);
  var url_1 = __importDefault$e(Url$1);
  var assert_1 = __importDefault$e(require$$3);
  var debug_1 = __importDefault$e(srcExports);
  var agent_base_1 = src;
  var parse_proxy_response_1 = __importDefault$e(parseProxyResponse$1);
  var debug = debug_1["default"]('https-proxy-agent:agent');
  /**
   * The `HttpsProxyAgent` implements an HTTP Agent subclass that connects to
   * the specified "HTTP(s) proxy server" in order to proxy HTTPS requests.
   *
   * Outgoing HTTP requests are first tunneled through the proxy server using the
   * `CONNECT` HTTP request method to establish a connection to the proxy server,
   * and then the proxy server connects to the destination target and issues the
   * HTTP request from the proxy server.
   *
   * `https:` requests have their socket connection upgraded to TLS once
   * the connection to the proxy server has been established.
   *
   * @api public
   */
  var HttpsProxyAgent = /*#__PURE__*/function (_agent_base_1$Agent) {
    function HttpsProxyAgent(_opts) {
      var _this;
      _classCallCheck(this, HttpsProxyAgent);
      var opts;
      if (typeof _opts === 'string') {
        opts = url_1["default"].parse(_opts);
      } else {
        opts = _opts;
      }
      if (!opts) {
        throw new Error('an HTTP(S) proxy server `host` and `port` must be specified!');
      }
      debug('creating new HttpsProxyAgent instance: %o', opts);
      _this = _callSuper(this, HttpsProxyAgent, [opts]);
      var proxy = Object.assign({}, opts);
      // If `true`, then connect to the proxy server over TLS.
      // Defaults to `false`.
      _this.secureProxy = opts.secureProxy || isHTTPS(proxy.protocol);
      // Prefer `hostname` over `host`, and set the `port` if needed.
      proxy.host = proxy.hostname || proxy.host;
      if (typeof proxy.port === 'string') {
        proxy.port = parseInt(proxy.port, 10);
      }
      if (!proxy.port && proxy.host) {
        proxy.port = _this.secureProxy ? 443 : 80;
      }
      // ALPN is supported by Node.js >= v5.
      // attempt to negotiate http/1.1 for proxy servers that support http/2
      if (_this.secureProxy && !('ALPNProtocols' in proxy)) {
        proxy.ALPNProtocols = ['http 1.1'];
      }
      if (proxy.host && proxy.path) {
        // If both a `host` and `path` are specified then it's most likely
        // the result of a `url.parse()` call... we need to remove the
        // `path` portion so that `net.connect()` doesn't attempt to open
        // that as a Unix socket file.
        delete proxy.path;
        delete proxy.pathname;
      }
      _this.proxy = proxy;
      return _this;
    }
    /**
     * Called when the node-core HTTP client library is creating a
     * new HTTP request.
     *
     * @api protected
     */
    _inherits(HttpsProxyAgent, _agent_base_1$Agent);
    return _createClass(HttpsProxyAgent, [{
      key: "callback",
      value: function callback(req, opts) {
        return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
          var proxy, secureProxy, socket, headers, hostname, payload, host, port, secureEndpoint, _i, _Object$keys, name, proxyResponsePromise, _yield$proxyResponseP, statusCode, buffered, servername, fakeSocket;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                proxy = this.proxy, secureProxy = this.secureProxy; // Create a socket connection to the proxy server.
                if (secureProxy) {
                  debug('Creating `tls.Socket`: %o', proxy);
                  socket = tls_1["default"].connect(proxy);
                } else {
                  debug('Creating `net.Socket`: %o', proxy);
                  socket = net_1["default"].connect(proxy);
                }
                headers = Object.assign({}, proxy.headers);
                hostname = "".concat(opts.host, ":").concat(opts.port);
                payload = "CONNECT ".concat(hostname, " HTTP/1.1\r\n"); // Inject the `Proxy-Authorization` header if necessary.
                if (proxy.auth) {
                  headers['Proxy-Authorization'] = "Basic ".concat(Buffer.from(proxy.auth).toString('base64'));
                }
                // The `Host` header should only include the port
                // number when it is not the default port.
                host = opts.host, port = opts.port, secureEndpoint = opts.secureEndpoint;
                if (!isDefaultPort(port, secureEndpoint)) {
                  host += ":".concat(port);
                }
                headers.Host = host;
                headers.Connection = 'close';
                for (_i = 0, _Object$keys = Object.keys(headers); _i < _Object$keys.length; _i++) {
                  name = _Object$keys[_i];
                  payload += "".concat(name, ": ").concat(headers[name], "\r\n");
                }
                proxyResponsePromise = parse_proxy_response_1["default"](socket);
                socket.write("".concat(payload, "\r\n"));
                _context.next = 15;
                return proxyResponsePromise;
              case 15:
                _yield$proxyResponseP = _context.sent;
                statusCode = _yield$proxyResponseP.statusCode;
                buffered = _yield$proxyResponseP.buffered;
                if (!(statusCode === 200)) {
                  _context.next = 25;
                  break;
                }
                req.once('socket', resume);
                if (!opts.secureEndpoint) {
                  _context.next = 24;
                  break;
                }
                // The proxy is connecting to a TLS server, so upgrade
                // this socket connection to a TLS connection.
                debug('Upgrading socket connection to TLS');
                servername = opts.servername || opts.host;
                return _context.abrupt("return", tls_1["default"].connect(Object.assign(Object.assign({}, omit(opts, 'host', 'hostname', 'path', 'port')), {
                  socket: socket,
                  servername: servername
                })));
              case 24:
                return _context.abrupt("return", socket);
              case 25:
                // Some other status code that's not 200... need to re-play the HTTP
                // header "data" events onto the socket once the HTTP machinery is
                // attached so that the node core `http` can parse and handle the
                // error status code.
                // Close the original socket, and a new "fake" socket is returned
                // instead, so that the proxy doesn't get the HTTP request
                // written to it (which may contain `Authorization` headers or other
                // sensitive data).
                //
                // See: https://hackerone.com/reports/541502
                socket.destroy();
                fakeSocket = new net_1["default"].Socket({
                  writable: false
                });
                fakeSocket.readable = true;
                // Need to wait for the "socket" event to re-play the "data" events.
                req.once('socket', function (s) {
                  debug('replaying proxy buffer for failed request');
                  assert_1["default"](s.listenerCount('data') > 0);
                  // Replay the "buffered" Buffer onto the fake `socket`, since at
                  // this point the HTTP module machinery has been hooked up for
                  // the user.
                  s.push(buffered);
                  s.push(null);
                });
                return _context.abrupt("return", fakeSocket);
              case 30:
              case "end":
                return _context.stop();
            }
          }, _callee, this);
        }));
      }
    }]);
  }(agent_base_1.Agent);
  agent["default"] = HttpsProxyAgent;
  function resume(socket) {
    socket.resume();
  }
  function isDefaultPort(port, secure) {
    return Boolean(!secure && port === 80 || secure && port === 443);
  }
  function isHTTPS(protocol) {
    return typeof protocol === 'string' ? /^https:?$/i.test(protocol) : false;
  }
  function omit(obj) {
    var ret = {};
    var key;
    for (var _len = arguments.length, keys = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      keys[_key - 1] = arguments[_key];
    }
    for (key in obj) {
      if (!keys.includes(key)) {
        ret[key] = obj[key];
      }
    }
    return ret;
  }

  var __importDefault$d = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };
  var agent_1 = __importDefault$d(agent);
  function createHttpsProxyAgent(opts) {
    return new agent_1["default"](opts);
  }
  (function (createHttpsProxyAgent) {
    createHttpsProxyAgent.HttpsProxyAgent = agent_1["default"];
    createHttpsProxyAgent.prototype = agent_1["default"].prototype;
  })(createHttpsProxyAgent || (createHttpsProxyAgent = {}));
  var dist$1 = createHttpsProxyAgent;

  var requestHelper = {};

  var stream$4 = {};

  Object.defineProperty(stream$4, "__esModule", {
    value: true
  });
  stream$4.concatStreamsAsDuplex = stream$4.readAll = stream$4.createLazyStream = void 0;
  var stream_1$9 = require$$0$3;
  function createLazyStream() {
    var ins = new stream_1$9.PassThrough();
    var outs = new stream_1$9.PassThrough();
    var stream = concatStreamsAsDuplex(ins, outs);
    var piped = false;
    var setStream = function setStream(str) {
      if (piped) {
        throw new Error('stream is already piped to actual stream');
      }
      piped = true;
      ins.pipe(str).pipe(outs);
    };
    return {
      stream: stream,
      setStream: setStream
    };
  }
  stream$4.createLazyStream = createLazyStream;
  var MemoryWriteStream = /*#__PURE__*/function (_stream_1$Writable) {
    function MemoryWriteStream() {
      var _this;
      _classCallCheck(this, MemoryWriteStream);
      _this = _callSuper(this, MemoryWriteStream);
      _defineProperty(_this, "_buf", void 0);
      _this._buf = Buffer.alloc(0);
      return _this;
    }
    _inherits(MemoryWriteStream, _stream_1$Writable);
    return _createClass(MemoryWriteStream, [{
      key: "_write",
      value: function _write(chunk, encoding, callback) {
        this._buf = Buffer.concat([this._buf, chunk]);
        callback();
      }
    }, {
      key: "_writev",
      value: function _writev(data, callback) {
        this._buf = Buffer.concat([this._buf].concat(_toConsumableArray(data.map(function (_ref) {
          var chunk = _ref.chunk;
          return chunk;
        }))));
        callback();
      }
    }, {
      key: "toString",
      value: function toString() {
        var encoding = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'utf-8';
        return this._buf.toString(encoding);
      }
    }]);
  }(stream_1$9.Writable);
  function readAll(_x) {
    return _readAll.apply(this, arguments);
  }
  function _readAll() {
    _readAll = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(rs) {
      var encoding,
        _args = arguments;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            encoding = _args.length > 1 && _args[1] !== undefined ? _args[1] : 'utf-8';
            return _context.abrupt("return", new Promise(function (resolve, reject) {
              var ws = new MemoryWriteStream();
              rs.on('error', reject).pipe(ws).on('finish', function () {
                return resolve(ws.toString(encoding));
              });
            }));
          case 2:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return _readAll.apply(this, arguments);
  }
  stream$4.readAll = readAll;
  var DuplexifiedStream = /*#__PURE__*/function (_stream_1$Duplex) {
    function DuplexifiedStream(ws, rs) {
      var _opts$writableObjectM, _opts$readableObjectM;
      var _this2;
      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      _classCallCheck(this, DuplexifiedStream);
      _this2 = _callSuper(this, DuplexifiedStream, [{
        writableObjectMode: (_opts$writableObjectM = opts.writableObjectMode) !== null && _opts$writableObjectM !== void 0 ? _opts$writableObjectM : ws.writableObjectMode,
        readableObjectMode: (_opts$readableObjectM = opts.readableObjectMode) !== null && _opts$readableObjectM !== void 0 ? _opts$readableObjectM : rs.readableObjectMode
      }]);
      _defineProperty(_this2, "_writable", void 0);
      _defineProperty(_this2, "_readable", void 0);
      _this2._writable = ws;
      _this2._readable = rs;
      ws.once('finish', function () {
        _this2.end();
      });
      _this2.once('finish', function () {
        ws.end();
      });
      rs.on('readable', function () {
        _this2._readStream();
      });
      rs.once('end', function () {
        _this2.push(null);
      });
      ws.on('error', function (err) {
        return _this2.emit('error', err);
      });
      rs.on('error', function (err) {
        return _this2.emit('error', err);
      });
      return _this2;
    }
    _inherits(DuplexifiedStream, _stream_1$Duplex);
    return _createClass(DuplexifiedStream, [{
      key: "_write",
      value: function _write(chunk, encoding, callback) {
        this._writable.write(chunk, encoding, callback);
      }
    }, {
      key: "_read",
      value: function _read(n) {
        this._readStream(n);
      }
    }, {
      key: "_readStream",
      value: function _readStream(n) {
        var data;
        while ((data = this._readable.read(n)) !== null) {
          this.push(data);
        }
      }
    }]);
  }(stream_1$9.Duplex);
  function concatStreamsAsDuplex(ws, rs, opts) {
    return new DuplexifiedStream(ws, rs, opts);
  }
  stream$4.concatStreamsAsDuplex = concatStreamsAsDuplex;

  var Stream$6 = require$$0$3.Stream;
  var util$e = require$$1$3;
  var delayed_stream = DelayedStream$1;
  function DelayedStream$1() {
    this.source = null;
    this.dataSize = 0;
    this.maxDataSize = 1024 * 1024;
    this.pauseStream = true;
    this._maxDataSizeExceeded = false;
    this._released = false;
    this._bufferedEvents = [];
  }
  util$e.inherits(DelayedStream$1, Stream$6);
  DelayedStream$1.create = function (source, options) {
    var delayedStream = new this();
    options = options || {};
    for (var option in options) {
      delayedStream[option] = options[option];
    }
    delayedStream.source = source;
    var realEmit = source.emit;
    source.emit = function () {
      delayedStream._handleEmit(arguments);
      return realEmit.apply(source, arguments);
    };
    source.on('error', function () {});
    if (delayedStream.pauseStream) {
      source.pause();
    }
    return delayedStream;
  };
  Object.defineProperty(DelayedStream$1.prototype, 'readable', {
    configurable: true,
    enumerable: true,
    get: function get() {
      return this.source.readable;
    }
  });
  DelayedStream$1.prototype.setEncoding = function () {
    return this.source.setEncoding.apply(this.source, arguments);
  };
  DelayedStream$1.prototype.resume = function () {
    if (!this._released) {
      this.release();
    }
    this.source.resume();
  };
  DelayedStream$1.prototype.pause = function () {
    this.source.pause();
  };
  DelayedStream$1.prototype.release = function () {
    this._released = true;
    this._bufferedEvents.forEach(function (args) {
      this.emit.apply(this, args);
    }.bind(this));
    this._bufferedEvents = [];
  };
  DelayedStream$1.prototype.pipe = function () {
    var r = Stream$6.prototype.pipe.apply(this, arguments);
    this.resume();
    return r;
  };
  DelayedStream$1.prototype._handleEmit = function (args) {
    if (this._released) {
      this.emit.apply(this, args);
      return;
    }
    if (args[0] === 'data') {
      this.dataSize += args[1].length;
      this._checkIfMaxDataSizeExceeded();
    }
    this._bufferedEvents.push(args);
  };
  DelayedStream$1.prototype._checkIfMaxDataSizeExceeded = function () {
    if (this._maxDataSizeExceeded) {
      return;
    }
    if (this.dataSize <= this.maxDataSize) {
      return;
    }
    this._maxDataSizeExceeded = true;
    var message = 'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.';
    this.emit('error', new Error(message));
  };

  var util$d = require$$1$3;
  var Stream$5 = require$$0$3.Stream;
  var DelayedStream = delayed_stream;
  var combined_stream = CombinedStream$1;
  function CombinedStream$1() {
    this.writable = false;
    this.readable = true;
    this.dataSize = 0;
    this.maxDataSize = 2 * 1024 * 1024;
    this.pauseStreams = true;
    this._released = false;
    this._streams = [];
    this._currentStream = null;
    this._insideLoop = false;
    this._pendingNext = false;
  }
  util$d.inherits(CombinedStream$1, Stream$5);
  CombinedStream$1.create = function (options) {
    var combinedStream = new this();
    options = options || {};
    for (var option in options) {
      combinedStream[option] = options[option];
    }
    return combinedStream;
  };
  CombinedStream$1.isStreamLike = function (stream) {
    return typeof stream !== 'function' && typeof stream !== 'string' && typeof stream !== 'boolean' && typeof stream !== 'number' && !Buffer.isBuffer(stream);
  };
  CombinedStream$1.prototype.append = function (stream) {
    var isStreamLike = CombinedStream$1.isStreamLike(stream);
    if (isStreamLike) {
      if (!(stream instanceof DelayedStream)) {
        var newStream = DelayedStream.create(stream, {
          maxDataSize: Infinity,
          pauseStream: this.pauseStreams
        });
        stream.on('data', this._checkDataSize.bind(this));
        stream = newStream;
      }
      this._handleErrors(stream);
      if (this.pauseStreams) {
        stream.pause();
      }
    }
    this._streams.push(stream);
    return this;
  };
  CombinedStream$1.prototype.pipe = function (dest, options) {
    Stream$5.prototype.pipe.call(this, dest, options);
    this.resume();
    return dest;
  };
  CombinedStream$1.prototype._getNext = function () {
    this._currentStream = null;
    if (this._insideLoop) {
      this._pendingNext = true;
      return; // defer call
    }
    this._insideLoop = true;
    try {
      do {
        this._pendingNext = false;
        this._realGetNext();
      } while (this._pendingNext);
    } finally {
      this._insideLoop = false;
    }
  };
  CombinedStream$1.prototype._realGetNext = function () {
    var stream = this._streams.shift();
    if (typeof stream == 'undefined') {
      this.end();
      return;
    }
    if (typeof stream !== 'function') {
      this._pipeNext(stream);
      return;
    }
    var getStream = stream;
    getStream(function (stream) {
      var isStreamLike = CombinedStream$1.isStreamLike(stream);
      if (isStreamLike) {
        stream.on('data', this._checkDataSize.bind(this));
        this._handleErrors(stream);
      }
      this._pipeNext(stream);
    }.bind(this));
  };
  CombinedStream$1.prototype._pipeNext = function (stream) {
    this._currentStream = stream;
    var isStreamLike = CombinedStream$1.isStreamLike(stream);
    if (isStreamLike) {
      stream.on('end', this._getNext.bind(this));
      stream.pipe(this, {
        end: false
      });
      return;
    }
    var value = stream;
    this.write(value);
    this._getNext();
  };
  CombinedStream$1.prototype._handleErrors = function (stream) {
    var self = this;
    stream.on('error', function (err) {
      self._emitError(err);
    });
  };
  CombinedStream$1.prototype.write = function (data) {
    this.emit('data', data);
  };
  CombinedStream$1.prototype.pause = function () {
    if (!this.pauseStreams) {
      return;
    }
    if (this.pauseStreams && this._currentStream && typeof this._currentStream.pause == 'function') this._currentStream.pause();
    this.emit('pause');
  };
  CombinedStream$1.prototype.resume = function () {
    if (!this._released) {
      this._released = true;
      this.writable = true;
      this._getNext();
    }
    if (this.pauseStreams && this._currentStream && typeof this._currentStream.resume == 'function') this._currentStream.resume();
    this.emit('resume');
  };
  CombinedStream$1.prototype.end = function () {
    this._reset();
    this.emit('end');
  };
  CombinedStream$1.prototype.destroy = function () {
    this._reset();
    this.emit('close');
  };
  CombinedStream$1.prototype._reset = function () {
    this.writable = false;
    this._streams = [];
    this._currentStream = null;
  };
  CombinedStream$1.prototype._checkDataSize = function () {
    this._updateDataSize();
    if (this.dataSize <= this.maxDataSize) {
      return;
    }
    var message = 'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.';
    this._emitError(new Error(message));
  };
  CombinedStream$1.prototype._updateDataSize = function () {
    this.dataSize = 0;
    var self = this;
    this._streams.forEach(function (stream) {
      if (!stream.dataSize) {
        return;
      }
      self.dataSize += stream.dataSize;
    });
    if (this._currentStream && this._currentStream.dataSize) {
      this.dataSize += this._currentStream.dataSize;
    }
  };
  CombinedStream$1.prototype._emitError = function (err) {
    this._reset();
    this.emit('error', err);
  };

  var mimeTypes = {};

  var require$$0$1 = {
  	"application/1d-interleaved-parityfec": {
  	source: "iana"
  },
  	"application/3gpdash-qoe-report+xml": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true
  },
  	"application/3gpp-ims+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/3gpphal+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/3gpphalforms+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/a2l": {
  	source: "iana"
  },
  	"application/ace+cbor": {
  	source: "iana"
  },
  	"application/activemessage": {
  	source: "iana"
  },
  	"application/activity+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/alto-costmap+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/alto-costmapfilter+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/alto-directory+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/alto-endpointcost+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/alto-endpointcostparams+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/alto-endpointprop+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/alto-endpointpropparams+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/alto-error+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/alto-networkmap+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/alto-networkmapfilter+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/alto-updatestreamcontrol+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/alto-updatestreamparams+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/aml": {
  	source: "iana"
  },
  	"application/andrew-inset": {
  	source: "iana",
  	extensions: [
  		"ez"
  	]
  },
  	"application/applefile": {
  	source: "iana"
  },
  	"application/applixware": {
  	source: "apache",
  	extensions: [
  		"aw"
  	]
  },
  	"application/at+jwt": {
  	source: "iana"
  },
  	"application/atf": {
  	source: "iana"
  },
  	"application/atfx": {
  	source: "iana"
  },
  	"application/atom+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"atom"
  	]
  },
  	"application/atomcat+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"atomcat"
  	]
  },
  	"application/atomdeleted+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"atomdeleted"
  	]
  },
  	"application/atomicmail": {
  	source: "iana"
  },
  	"application/atomsvc+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"atomsvc"
  	]
  },
  	"application/atsc-dwd+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"dwd"
  	]
  },
  	"application/atsc-dynamic-event-message": {
  	source: "iana"
  },
  	"application/atsc-held+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"held"
  	]
  },
  	"application/atsc-rdt+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/atsc-rsat+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"rsat"
  	]
  },
  	"application/atxml": {
  	source: "iana"
  },
  	"application/auth-policy+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/bacnet-xdd+zip": {
  	source: "iana",
  	compressible: false
  },
  	"application/batch-smtp": {
  	source: "iana"
  },
  	"application/bdoc": {
  	compressible: false,
  	extensions: [
  		"bdoc"
  	]
  },
  	"application/beep+xml": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true
  },
  	"application/calendar+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/calendar+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"xcs"
  	]
  },
  	"application/call-completion": {
  	source: "iana"
  },
  	"application/cals-1840": {
  	source: "iana"
  },
  	"application/captive+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/cbor": {
  	source: "iana"
  },
  	"application/cbor-seq": {
  	source: "iana"
  },
  	"application/cccex": {
  	source: "iana"
  },
  	"application/ccmp+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/ccxml+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"ccxml"
  	]
  },
  	"application/cdfx+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"cdfx"
  	]
  },
  	"application/cdmi-capability": {
  	source: "iana",
  	extensions: [
  		"cdmia"
  	]
  },
  	"application/cdmi-container": {
  	source: "iana",
  	extensions: [
  		"cdmic"
  	]
  },
  	"application/cdmi-domain": {
  	source: "iana",
  	extensions: [
  		"cdmid"
  	]
  },
  	"application/cdmi-object": {
  	source: "iana",
  	extensions: [
  		"cdmio"
  	]
  },
  	"application/cdmi-queue": {
  	source: "iana",
  	extensions: [
  		"cdmiq"
  	]
  },
  	"application/cdni": {
  	source: "iana"
  },
  	"application/cea": {
  	source: "iana"
  },
  	"application/cea-2018+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/cellml+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/cfw": {
  	source: "iana"
  },
  	"application/city+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/clr": {
  	source: "iana"
  },
  	"application/clue+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/clue_info+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/cms": {
  	source: "iana"
  },
  	"application/cnrp+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/coap-group+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/coap-payload": {
  	source: "iana"
  },
  	"application/commonground": {
  	source: "iana"
  },
  	"application/conference-info+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/cose": {
  	source: "iana"
  },
  	"application/cose-key": {
  	source: "iana"
  },
  	"application/cose-key-set": {
  	source: "iana"
  },
  	"application/cpl+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"cpl"
  	]
  },
  	"application/csrattrs": {
  	source: "iana"
  },
  	"application/csta+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/cstadata+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/csvm+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/cu-seeme": {
  	source: "apache",
  	extensions: [
  		"cu"
  	]
  },
  	"application/cwt": {
  	source: "iana"
  },
  	"application/cybercash": {
  	source: "iana"
  },
  	"application/dart": {
  	compressible: true
  },
  	"application/dash+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"mpd"
  	]
  },
  	"application/dash-patch+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"mpp"
  	]
  },
  	"application/dashdelta": {
  	source: "iana"
  },
  	"application/davmount+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"davmount"
  	]
  },
  	"application/dca-rft": {
  	source: "iana"
  },
  	"application/dcd": {
  	source: "iana"
  },
  	"application/dec-dx": {
  	source: "iana"
  },
  	"application/dialog-info+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/dicom": {
  	source: "iana"
  },
  	"application/dicom+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/dicom+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/dii": {
  	source: "iana"
  },
  	"application/dit": {
  	source: "iana"
  },
  	"application/dns": {
  	source: "iana"
  },
  	"application/dns+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/dns-message": {
  	source: "iana"
  },
  	"application/docbook+xml": {
  	source: "apache",
  	compressible: true,
  	extensions: [
  		"dbk"
  	]
  },
  	"application/dots+cbor": {
  	source: "iana"
  },
  	"application/dskpp+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/dssc+der": {
  	source: "iana",
  	extensions: [
  		"dssc"
  	]
  },
  	"application/dssc+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"xdssc"
  	]
  },
  	"application/dvcs": {
  	source: "iana"
  },
  	"application/ecmascript": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"es",
  		"ecma"
  	]
  },
  	"application/edi-consent": {
  	source: "iana"
  },
  	"application/edi-x12": {
  	source: "iana",
  	compressible: false
  },
  	"application/edifact": {
  	source: "iana",
  	compressible: false
  },
  	"application/efi": {
  	source: "iana"
  },
  	"application/elm+json": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true
  },
  	"application/elm+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/emergencycalldata.cap+xml": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true
  },
  	"application/emergencycalldata.comment+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/emergencycalldata.control+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/emergencycalldata.deviceinfo+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/emergencycalldata.ecall.msd": {
  	source: "iana"
  },
  	"application/emergencycalldata.providerinfo+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/emergencycalldata.serviceinfo+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/emergencycalldata.subscriberinfo+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/emergencycalldata.veds+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/emma+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"emma"
  	]
  },
  	"application/emotionml+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"emotionml"
  	]
  },
  	"application/encaprtp": {
  	source: "iana"
  },
  	"application/epp+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/epub+zip": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"epub"
  	]
  },
  	"application/eshop": {
  	source: "iana"
  },
  	"application/exi": {
  	source: "iana",
  	extensions: [
  		"exi"
  	]
  },
  	"application/expect-ct-report+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/express": {
  	source: "iana",
  	extensions: [
  		"exp"
  	]
  },
  	"application/fastinfoset": {
  	source: "iana"
  },
  	"application/fastsoap": {
  	source: "iana"
  },
  	"application/fdt+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"fdt"
  	]
  },
  	"application/fhir+json": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true
  },
  	"application/fhir+xml": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true
  },
  	"application/fido.trusted-apps+json": {
  	compressible: true
  },
  	"application/fits": {
  	source: "iana"
  },
  	"application/flexfec": {
  	source: "iana"
  },
  	"application/font-sfnt": {
  	source: "iana"
  },
  	"application/font-tdpfr": {
  	source: "iana",
  	extensions: [
  		"pfr"
  	]
  },
  	"application/font-woff": {
  	source: "iana",
  	compressible: false
  },
  	"application/framework-attributes+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/geo+json": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"geojson"
  	]
  },
  	"application/geo+json-seq": {
  	source: "iana"
  },
  	"application/geopackage+sqlite3": {
  	source: "iana"
  },
  	"application/geoxacml+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/gltf-buffer": {
  	source: "iana"
  },
  	"application/gml+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"gml"
  	]
  },
  	"application/gpx+xml": {
  	source: "apache",
  	compressible: true,
  	extensions: [
  		"gpx"
  	]
  },
  	"application/gxf": {
  	source: "apache",
  	extensions: [
  		"gxf"
  	]
  },
  	"application/gzip": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"gz"
  	]
  },
  	"application/h224": {
  	source: "iana"
  },
  	"application/held+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/hjson": {
  	extensions: [
  		"hjson"
  	]
  },
  	"application/http": {
  	source: "iana"
  },
  	"application/hyperstudio": {
  	source: "iana",
  	extensions: [
  		"stk"
  	]
  },
  	"application/ibe-key-request+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/ibe-pkg-reply+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/ibe-pp-data": {
  	source: "iana"
  },
  	"application/iges": {
  	source: "iana"
  },
  	"application/im-iscomposing+xml": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true
  },
  	"application/index": {
  	source: "iana"
  },
  	"application/index.cmd": {
  	source: "iana"
  },
  	"application/index.obj": {
  	source: "iana"
  },
  	"application/index.response": {
  	source: "iana"
  },
  	"application/index.vnd": {
  	source: "iana"
  },
  	"application/inkml+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"ink",
  		"inkml"
  	]
  },
  	"application/iotp": {
  	source: "iana"
  },
  	"application/ipfix": {
  	source: "iana",
  	extensions: [
  		"ipfix"
  	]
  },
  	"application/ipp": {
  	source: "iana"
  },
  	"application/isup": {
  	source: "iana"
  },
  	"application/its+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"its"
  	]
  },
  	"application/java-archive": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"jar",
  		"war",
  		"ear"
  	]
  },
  	"application/java-serialized-object": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"ser"
  	]
  },
  	"application/java-vm": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"class"
  	]
  },
  	"application/javascript": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true,
  	extensions: [
  		"js",
  		"mjs"
  	]
  },
  	"application/jf2feed+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/jose": {
  	source: "iana"
  },
  	"application/jose+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/jrd+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/jscalendar+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/json": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true,
  	extensions: [
  		"json",
  		"map"
  	]
  },
  	"application/json-patch+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/json-seq": {
  	source: "iana"
  },
  	"application/json5": {
  	extensions: [
  		"json5"
  	]
  },
  	"application/jsonml+json": {
  	source: "apache",
  	compressible: true,
  	extensions: [
  		"jsonml"
  	]
  },
  	"application/jwk+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/jwk-set+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/jwt": {
  	source: "iana"
  },
  	"application/kpml-request+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/kpml-response+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/ld+json": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"jsonld"
  	]
  },
  	"application/lgr+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"lgr"
  	]
  },
  	"application/link-format": {
  	source: "iana"
  },
  	"application/load-control+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/lost+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"lostxml"
  	]
  },
  	"application/lostsync+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/lpf+zip": {
  	source: "iana",
  	compressible: false
  },
  	"application/lxf": {
  	source: "iana"
  },
  	"application/mac-binhex40": {
  	source: "iana",
  	extensions: [
  		"hqx"
  	]
  },
  	"application/mac-compactpro": {
  	source: "apache",
  	extensions: [
  		"cpt"
  	]
  },
  	"application/macwriteii": {
  	source: "iana"
  },
  	"application/mads+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"mads"
  	]
  },
  	"application/manifest+json": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true,
  	extensions: [
  		"webmanifest"
  	]
  },
  	"application/marc": {
  	source: "iana",
  	extensions: [
  		"mrc"
  	]
  },
  	"application/marcxml+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"mrcx"
  	]
  },
  	"application/mathematica": {
  	source: "iana",
  	extensions: [
  		"ma",
  		"nb",
  		"mb"
  	]
  },
  	"application/mathml+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"mathml"
  	]
  },
  	"application/mathml-content+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/mathml-presentation+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/mbms-associated-procedure-description+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/mbms-deregister+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/mbms-envelope+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/mbms-msk+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/mbms-msk-response+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/mbms-protection-description+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/mbms-reception-report+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/mbms-register+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/mbms-register-response+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/mbms-schedule+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/mbms-user-service-description+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/mbox": {
  	source: "iana",
  	extensions: [
  		"mbox"
  	]
  },
  	"application/media-policy-dataset+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"mpf"
  	]
  },
  	"application/media_control+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/mediaservercontrol+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"mscml"
  	]
  },
  	"application/merge-patch+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/metalink+xml": {
  	source: "apache",
  	compressible: true,
  	extensions: [
  		"metalink"
  	]
  },
  	"application/metalink4+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"meta4"
  	]
  },
  	"application/mets+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"mets"
  	]
  },
  	"application/mf4": {
  	source: "iana"
  },
  	"application/mikey": {
  	source: "iana"
  },
  	"application/mipc": {
  	source: "iana"
  },
  	"application/missing-blocks+cbor-seq": {
  	source: "iana"
  },
  	"application/mmt-aei+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"maei"
  	]
  },
  	"application/mmt-usd+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"musd"
  	]
  },
  	"application/mods+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"mods"
  	]
  },
  	"application/moss-keys": {
  	source: "iana"
  },
  	"application/moss-signature": {
  	source: "iana"
  },
  	"application/mosskey-data": {
  	source: "iana"
  },
  	"application/mosskey-request": {
  	source: "iana"
  },
  	"application/mp21": {
  	source: "iana",
  	extensions: [
  		"m21",
  		"mp21"
  	]
  },
  	"application/mp4": {
  	source: "iana",
  	extensions: [
  		"mp4s",
  		"m4p"
  	]
  },
  	"application/mpeg4-generic": {
  	source: "iana"
  },
  	"application/mpeg4-iod": {
  	source: "iana"
  },
  	"application/mpeg4-iod-xmt": {
  	source: "iana"
  },
  	"application/mrb-consumer+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/mrb-publish+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/msc-ivr+xml": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true
  },
  	"application/msc-mixer+xml": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true
  },
  	"application/msword": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"doc",
  		"dot"
  	]
  },
  	"application/mud+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/multipart-core": {
  	source: "iana"
  },
  	"application/mxf": {
  	source: "iana",
  	extensions: [
  		"mxf"
  	]
  },
  	"application/n-quads": {
  	source: "iana",
  	extensions: [
  		"nq"
  	]
  },
  	"application/n-triples": {
  	source: "iana",
  	extensions: [
  		"nt"
  	]
  },
  	"application/nasdata": {
  	source: "iana"
  },
  	"application/news-checkgroups": {
  	source: "iana",
  	charset: "US-ASCII"
  },
  	"application/news-groupinfo": {
  	source: "iana",
  	charset: "US-ASCII"
  },
  	"application/news-transmission": {
  	source: "iana"
  },
  	"application/nlsml+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/node": {
  	source: "iana",
  	extensions: [
  		"cjs"
  	]
  },
  	"application/nss": {
  	source: "iana"
  },
  	"application/oauth-authz-req+jwt": {
  	source: "iana"
  },
  	"application/oblivious-dns-message": {
  	source: "iana"
  },
  	"application/ocsp-request": {
  	source: "iana"
  },
  	"application/ocsp-response": {
  	source: "iana"
  },
  	"application/octet-stream": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"bin",
  		"dms",
  		"lrf",
  		"mar",
  		"so",
  		"dist",
  		"distz",
  		"pkg",
  		"bpk",
  		"dump",
  		"elc",
  		"deploy",
  		"exe",
  		"dll",
  		"deb",
  		"dmg",
  		"iso",
  		"img",
  		"msi",
  		"msp",
  		"msm",
  		"buffer"
  	]
  },
  	"application/oda": {
  	source: "iana",
  	extensions: [
  		"oda"
  	]
  },
  	"application/odm+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/odx": {
  	source: "iana"
  },
  	"application/oebps-package+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"opf"
  	]
  },
  	"application/ogg": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"ogx"
  	]
  },
  	"application/omdoc+xml": {
  	source: "apache",
  	compressible: true,
  	extensions: [
  		"omdoc"
  	]
  },
  	"application/onenote": {
  	source: "apache",
  	extensions: [
  		"onetoc",
  		"onetoc2",
  		"onetmp",
  		"onepkg"
  	]
  },
  	"application/opc-nodeset+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/oscore": {
  	source: "iana"
  },
  	"application/oxps": {
  	source: "iana",
  	extensions: [
  		"oxps"
  	]
  },
  	"application/p21": {
  	source: "iana"
  },
  	"application/p21+zip": {
  	source: "iana",
  	compressible: false
  },
  	"application/p2p-overlay+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"relo"
  	]
  },
  	"application/parityfec": {
  	source: "iana"
  },
  	"application/passport": {
  	source: "iana"
  },
  	"application/patch-ops-error+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"xer"
  	]
  },
  	"application/pdf": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"pdf"
  	]
  },
  	"application/pdx": {
  	source: "iana"
  },
  	"application/pem-certificate-chain": {
  	source: "iana"
  },
  	"application/pgp-encrypted": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"pgp"
  	]
  },
  	"application/pgp-keys": {
  	source: "iana",
  	extensions: [
  		"asc"
  	]
  },
  	"application/pgp-signature": {
  	source: "iana",
  	extensions: [
  		"asc",
  		"sig"
  	]
  },
  	"application/pics-rules": {
  	source: "apache",
  	extensions: [
  		"prf"
  	]
  },
  	"application/pidf+xml": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true
  },
  	"application/pidf-diff+xml": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true
  },
  	"application/pkcs10": {
  	source: "iana",
  	extensions: [
  		"p10"
  	]
  },
  	"application/pkcs12": {
  	source: "iana"
  },
  	"application/pkcs7-mime": {
  	source: "iana",
  	extensions: [
  		"p7m",
  		"p7c"
  	]
  },
  	"application/pkcs7-signature": {
  	source: "iana",
  	extensions: [
  		"p7s"
  	]
  },
  	"application/pkcs8": {
  	source: "iana",
  	extensions: [
  		"p8"
  	]
  },
  	"application/pkcs8-encrypted": {
  	source: "iana"
  },
  	"application/pkix-attr-cert": {
  	source: "iana",
  	extensions: [
  		"ac"
  	]
  },
  	"application/pkix-cert": {
  	source: "iana",
  	extensions: [
  		"cer"
  	]
  },
  	"application/pkix-crl": {
  	source: "iana",
  	extensions: [
  		"crl"
  	]
  },
  	"application/pkix-pkipath": {
  	source: "iana",
  	extensions: [
  		"pkipath"
  	]
  },
  	"application/pkixcmp": {
  	source: "iana",
  	extensions: [
  		"pki"
  	]
  },
  	"application/pls+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"pls"
  	]
  },
  	"application/poc-settings+xml": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true
  },
  	"application/postscript": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"ai",
  		"eps",
  		"ps"
  	]
  },
  	"application/ppsp-tracker+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/problem+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/problem+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/provenance+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"provx"
  	]
  },
  	"application/prs.alvestrand.titrax-sheet": {
  	source: "iana"
  },
  	"application/prs.cww": {
  	source: "iana",
  	extensions: [
  		"cww"
  	]
  },
  	"application/prs.cyn": {
  	source: "iana",
  	charset: "7-BIT"
  },
  	"application/prs.hpub+zip": {
  	source: "iana",
  	compressible: false
  },
  	"application/prs.nprend": {
  	source: "iana"
  },
  	"application/prs.plucker": {
  	source: "iana"
  },
  	"application/prs.rdf-xml-crypt": {
  	source: "iana"
  },
  	"application/prs.xsf+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/pskc+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"pskcxml"
  	]
  },
  	"application/pvd+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/qsig": {
  	source: "iana"
  },
  	"application/raml+yaml": {
  	compressible: true,
  	extensions: [
  		"raml"
  	]
  },
  	"application/raptorfec": {
  	source: "iana"
  },
  	"application/rdap+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/rdf+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"rdf",
  		"owl"
  	]
  },
  	"application/reginfo+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"rif"
  	]
  },
  	"application/relax-ng-compact-syntax": {
  	source: "iana",
  	extensions: [
  		"rnc"
  	]
  },
  	"application/remote-printing": {
  	source: "iana"
  },
  	"application/reputon+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/resource-lists+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"rl"
  	]
  },
  	"application/resource-lists-diff+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"rld"
  	]
  },
  	"application/rfc+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/riscos": {
  	source: "iana"
  },
  	"application/rlmi+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/rls-services+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"rs"
  	]
  },
  	"application/route-apd+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"rapd"
  	]
  },
  	"application/route-s-tsid+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"sls"
  	]
  },
  	"application/route-usd+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"rusd"
  	]
  },
  	"application/rpki-ghostbusters": {
  	source: "iana",
  	extensions: [
  		"gbr"
  	]
  },
  	"application/rpki-manifest": {
  	source: "iana",
  	extensions: [
  		"mft"
  	]
  },
  	"application/rpki-publication": {
  	source: "iana"
  },
  	"application/rpki-roa": {
  	source: "iana",
  	extensions: [
  		"roa"
  	]
  },
  	"application/rpki-updown": {
  	source: "iana"
  },
  	"application/rsd+xml": {
  	source: "apache",
  	compressible: true,
  	extensions: [
  		"rsd"
  	]
  },
  	"application/rss+xml": {
  	source: "apache",
  	compressible: true,
  	extensions: [
  		"rss"
  	]
  },
  	"application/rtf": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"rtf"
  	]
  },
  	"application/rtploopback": {
  	source: "iana"
  },
  	"application/rtx": {
  	source: "iana"
  },
  	"application/samlassertion+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/samlmetadata+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/sarif+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/sarif-external-properties+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/sbe": {
  	source: "iana"
  },
  	"application/sbml+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"sbml"
  	]
  },
  	"application/scaip+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/scim+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/scvp-cv-request": {
  	source: "iana",
  	extensions: [
  		"scq"
  	]
  },
  	"application/scvp-cv-response": {
  	source: "iana",
  	extensions: [
  		"scs"
  	]
  },
  	"application/scvp-vp-request": {
  	source: "iana",
  	extensions: [
  		"spq"
  	]
  },
  	"application/scvp-vp-response": {
  	source: "iana",
  	extensions: [
  		"spp"
  	]
  },
  	"application/sdp": {
  	source: "iana",
  	extensions: [
  		"sdp"
  	]
  },
  	"application/secevent+jwt": {
  	source: "iana"
  },
  	"application/senml+cbor": {
  	source: "iana"
  },
  	"application/senml+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/senml+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"senmlx"
  	]
  },
  	"application/senml-etch+cbor": {
  	source: "iana"
  },
  	"application/senml-etch+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/senml-exi": {
  	source: "iana"
  },
  	"application/sensml+cbor": {
  	source: "iana"
  },
  	"application/sensml+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/sensml+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"sensmlx"
  	]
  },
  	"application/sensml-exi": {
  	source: "iana"
  },
  	"application/sep+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/sep-exi": {
  	source: "iana"
  },
  	"application/session-info": {
  	source: "iana"
  },
  	"application/set-payment": {
  	source: "iana"
  },
  	"application/set-payment-initiation": {
  	source: "iana",
  	extensions: [
  		"setpay"
  	]
  },
  	"application/set-registration": {
  	source: "iana"
  },
  	"application/set-registration-initiation": {
  	source: "iana",
  	extensions: [
  		"setreg"
  	]
  },
  	"application/sgml": {
  	source: "iana"
  },
  	"application/sgml-open-catalog": {
  	source: "iana"
  },
  	"application/shf+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"shf"
  	]
  },
  	"application/sieve": {
  	source: "iana",
  	extensions: [
  		"siv",
  		"sieve"
  	]
  },
  	"application/simple-filter+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/simple-message-summary": {
  	source: "iana"
  },
  	"application/simplesymbolcontainer": {
  	source: "iana"
  },
  	"application/sipc": {
  	source: "iana"
  },
  	"application/slate": {
  	source: "iana"
  },
  	"application/smil": {
  	source: "iana"
  },
  	"application/smil+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"smi",
  		"smil"
  	]
  },
  	"application/smpte336m": {
  	source: "iana"
  },
  	"application/soap+fastinfoset": {
  	source: "iana"
  },
  	"application/soap+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/sparql-query": {
  	source: "iana",
  	extensions: [
  		"rq"
  	]
  },
  	"application/sparql-results+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"srx"
  	]
  },
  	"application/spdx+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/spirits-event+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/sql": {
  	source: "iana"
  },
  	"application/srgs": {
  	source: "iana",
  	extensions: [
  		"gram"
  	]
  },
  	"application/srgs+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"grxml"
  	]
  },
  	"application/sru+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"sru"
  	]
  },
  	"application/ssdl+xml": {
  	source: "apache",
  	compressible: true,
  	extensions: [
  		"ssdl"
  	]
  },
  	"application/ssml+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"ssml"
  	]
  },
  	"application/stix+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/swid+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"swidtag"
  	]
  },
  	"application/tamp-apex-update": {
  	source: "iana"
  },
  	"application/tamp-apex-update-confirm": {
  	source: "iana"
  },
  	"application/tamp-community-update": {
  	source: "iana"
  },
  	"application/tamp-community-update-confirm": {
  	source: "iana"
  },
  	"application/tamp-error": {
  	source: "iana"
  },
  	"application/tamp-sequence-adjust": {
  	source: "iana"
  },
  	"application/tamp-sequence-adjust-confirm": {
  	source: "iana"
  },
  	"application/tamp-status-query": {
  	source: "iana"
  },
  	"application/tamp-status-response": {
  	source: "iana"
  },
  	"application/tamp-update": {
  	source: "iana"
  },
  	"application/tamp-update-confirm": {
  	source: "iana"
  },
  	"application/tar": {
  	compressible: true
  },
  	"application/taxii+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/td+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/tei+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"tei",
  		"teicorpus"
  	]
  },
  	"application/tetra_isi": {
  	source: "iana"
  },
  	"application/thraud+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"tfi"
  	]
  },
  	"application/timestamp-query": {
  	source: "iana"
  },
  	"application/timestamp-reply": {
  	source: "iana"
  },
  	"application/timestamped-data": {
  	source: "iana",
  	extensions: [
  		"tsd"
  	]
  },
  	"application/tlsrpt+gzip": {
  	source: "iana"
  },
  	"application/tlsrpt+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/tnauthlist": {
  	source: "iana"
  },
  	"application/token-introspection+jwt": {
  	source: "iana"
  },
  	"application/toml": {
  	compressible: true,
  	extensions: [
  		"toml"
  	]
  },
  	"application/trickle-ice-sdpfrag": {
  	source: "iana"
  },
  	"application/trig": {
  	source: "iana",
  	extensions: [
  		"trig"
  	]
  },
  	"application/ttml+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"ttml"
  	]
  },
  	"application/tve-trigger": {
  	source: "iana"
  },
  	"application/tzif": {
  	source: "iana"
  },
  	"application/tzif-leap": {
  	source: "iana"
  },
  	"application/ubjson": {
  	compressible: false,
  	extensions: [
  		"ubj"
  	]
  },
  	"application/ulpfec": {
  	source: "iana"
  },
  	"application/urc-grpsheet+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/urc-ressheet+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"rsheet"
  	]
  },
  	"application/urc-targetdesc+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"td"
  	]
  },
  	"application/urc-uisocketdesc+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vcard+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vcard+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vemmi": {
  	source: "iana"
  },
  	"application/vividence.scriptfile": {
  	source: "apache"
  },
  	"application/vnd.1000minds.decision-model+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"1km"
  	]
  },
  	"application/vnd.3gpp-prose+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp-prose-pc3ch+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp-v2x-local-service-information": {
  	source: "iana"
  },
  	"application/vnd.3gpp.5gnas": {
  	source: "iana"
  },
  	"application/vnd.3gpp.access-transfer-events+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.bsf+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.gmop+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.gtpc": {
  	source: "iana"
  },
  	"application/vnd.3gpp.interworking-data": {
  	source: "iana"
  },
  	"application/vnd.3gpp.lpp": {
  	source: "iana"
  },
  	"application/vnd.3gpp.mc-signalling-ear": {
  	source: "iana"
  },
  	"application/vnd.3gpp.mcdata-affiliation-command+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mcdata-info+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mcdata-payload": {
  	source: "iana"
  },
  	"application/vnd.3gpp.mcdata-service-config+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mcdata-signalling": {
  	source: "iana"
  },
  	"application/vnd.3gpp.mcdata-ue-config+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mcdata-user-profile+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mcptt-affiliation-command+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mcptt-floor-request+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mcptt-info+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mcptt-location-info+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mcptt-mbms-usage-info+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mcptt-service-config+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mcptt-signed+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mcptt-ue-config+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mcptt-ue-init-config+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mcptt-user-profile+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mcvideo-affiliation-command+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mcvideo-affiliation-info+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mcvideo-info+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mcvideo-location-info+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mcvideo-mbms-usage-info+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mcvideo-service-config+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mcvideo-transmission-request+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mcvideo-ue-config+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mcvideo-user-profile+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mid-call+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.ngap": {
  	source: "iana"
  },
  	"application/vnd.3gpp.pfcp": {
  	source: "iana"
  },
  	"application/vnd.3gpp.pic-bw-large": {
  	source: "iana",
  	extensions: [
  		"plb"
  	]
  },
  	"application/vnd.3gpp.pic-bw-small": {
  	source: "iana",
  	extensions: [
  		"psb"
  	]
  },
  	"application/vnd.3gpp.pic-bw-var": {
  	source: "iana",
  	extensions: [
  		"pvb"
  	]
  },
  	"application/vnd.3gpp.s1ap": {
  	source: "iana"
  },
  	"application/vnd.3gpp.sms": {
  	source: "iana"
  },
  	"application/vnd.3gpp.sms+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.srvcc-ext+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.srvcc-info+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.state-and-event-info+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.ussd+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp2.bcmcsinfo+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp2.sms": {
  	source: "iana"
  },
  	"application/vnd.3gpp2.tcap": {
  	source: "iana",
  	extensions: [
  		"tcap"
  	]
  },
  	"application/vnd.3lightssoftware.imagescal": {
  	source: "iana"
  },
  	"application/vnd.3m.post-it-notes": {
  	source: "iana",
  	extensions: [
  		"pwn"
  	]
  },
  	"application/vnd.accpac.simply.aso": {
  	source: "iana",
  	extensions: [
  		"aso"
  	]
  },
  	"application/vnd.accpac.simply.imp": {
  	source: "iana",
  	extensions: [
  		"imp"
  	]
  },
  	"application/vnd.acucobol": {
  	source: "iana",
  	extensions: [
  		"acu"
  	]
  },
  	"application/vnd.acucorp": {
  	source: "iana",
  	extensions: [
  		"atc",
  		"acutc"
  	]
  },
  	"application/vnd.adobe.air-application-installer-package+zip": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"air"
  	]
  },
  	"application/vnd.adobe.flash.movie": {
  	source: "iana"
  },
  	"application/vnd.adobe.formscentral.fcdt": {
  	source: "iana",
  	extensions: [
  		"fcdt"
  	]
  },
  	"application/vnd.adobe.fxp": {
  	source: "iana",
  	extensions: [
  		"fxp",
  		"fxpl"
  	]
  },
  	"application/vnd.adobe.partial-upload": {
  	source: "iana"
  },
  	"application/vnd.adobe.xdp+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"xdp"
  	]
  },
  	"application/vnd.adobe.xfdf": {
  	source: "iana",
  	extensions: [
  		"xfdf"
  	]
  },
  	"application/vnd.aether.imp": {
  	source: "iana"
  },
  	"application/vnd.afpc.afplinedata": {
  	source: "iana"
  },
  	"application/vnd.afpc.afplinedata-pagedef": {
  	source: "iana"
  },
  	"application/vnd.afpc.cmoca-cmresource": {
  	source: "iana"
  },
  	"application/vnd.afpc.foca-charset": {
  	source: "iana"
  },
  	"application/vnd.afpc.foca-codedfont": {
  	source: "iana"
  },
  	"application/vnd.afpc.foca-codepage": {
  	source: "iana"
  },
  	"application/vnd.afpc.modca": {
  	source: "iana"
  },
  	"application/vnd.afpc.modca-cmtable": {
  	source: "iana"
  },
  	"application/vnd.afpc.modca-formdef": {
  	source: "iana"
  },
  	"application/vnd.afpc.modca-mediummap": {
  	source: "iana"
  },
  	"application/vnd.afpc.modca-objectcontainer": {
  	source: "iana"
  },
  	"application/vnd.afpc.modca-overlay": {
  	source: "iana"
  },
  	"application/vnd.afpc.modca-pagesegment": {
  	source: "iana"
  },
  	"application/vnd.age": {
  	source: "iana",
  	extensions: [
  		"age"
  	]
  },
  	"application/vnd.ah-barcode": {
  	source: "iana"
  },
  	"application/vnd.ahead.space": {
  	source: "iana",
  	extensions: [
  		"ahead"
  	]
  },
  	"application/vnd.airzip.filesecure.azf": {
  	source: "iana",
  	extensions: [
  		"azf"
  	]
  },
  	"application/vnd.airzip.filesecure.azs": {
  	source: "iana",
  	extensions: [
  		"azs"
  	]
  },
  	"application/vnd.amadeus+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.amazon.ebook": {
  	source: "apache",
  	extensions: [
  		"azw"
  	]
  },
  	"application/vnd.amazon.mobi8-ebook": {
  	source: "iana"
  },
  	"application/vnd.americandynamics.acc": {
  	source: "iana",
  	extensions: [
  		"acc"
  	]
  },
  	"application/vnd.amiga.ami": {
  	source: "iana",
  	extensions: [
  		"ami"
  	]
  },
  	"application/vnd.amundsen.maze+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.android.ota": {
  	source: "iana"
  },
  	"application/vnd.android.package-archive": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"apk"
  	]
  },
  	"application/vnd.anki": {
  	source: "iana"
  },
  	"application/vnd.anser-web-certificate-issue-initiation": {
  	source: "iana",
  	extensions: [
  		"cii"
  	]
  },
  	"application/vnd.anser-web-funds-transfer-initiation": {
  	source: "apache",
  	extensions: [
  		"fti"
  	]
  },
  	"application/vnd.antix.game-component": {
  	source: "iana",
  	extensions: [
  		"atx"
  	]
  },
  	"application/vnd.apache.arrow.file": {
  	source: "iana"
  },
  	"application/vnd.apache.arrow.stream": {
  	source: "iana"
  },
  	"application/vnd.apache.thrift.binary": {
  	source: "iana"
  },
  	"application/vnd.apache.thrift.compact": {
  	source: "iana"
  },
  	"application/vnd.apache.thrift.json": {
  	source: "iana"
  },
  	"application/vnd.api+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.aplextor.warrp+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.apothekende.reservation+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.apple.installer+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"mpkg"
  	]
  },
  	"application/vnd.apple.keynote": {
  	source: "iana",
  	extensions: [
  		"key"
  	]
  },
  	"application/vnd.apple.mpegurl": {
  	source: "iana",
  	extensions: [
  		"m3u8"
  	]
  },
  	"application/vnd.apple.numbers": {
  	source: "iana",
  	extensions: [
  		"numbers"
  	]
  },
  	"application/vnd.apple.pages": {
  	source: "iana",
  	extensions: [
  		"pages"
  	]
  },
  	"application/vnd.apple.pkpass": {
  	compressible: false,
  	extensions: [
  		"pkpass"
  	]
  },
  	"application/vnd.arastra.swi": {
  	source: "iana"
  },
  	"application/vnd.aristanetworks.swi": {
  	source: "iana",
  	extensions: [
  		"swi"
  	]
  },
  	"application/vnd.artisan+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.artsquare": {
  	source: "iana"
  },
  	"application/vnd.astraea-software.iota": {
  	source: "iana",
  	extensions: [
  		"iota"
  	]
  },
  	"application/vnd.audiograph": {
  	source: "iana",
  	extensions: [
  		"aep"
  	]
  },
  	"application/vnd.autopackage": {
  	source: "iana"
  },
  	"application/vnd.avalon+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.avistar+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.balsamiq.bmml+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"bmml"
  	]
  },
  	"application/vnd.balsamiq.bmpr": {
  	source: "iana"
  },
  	"application/vnd.banana-accounting": {
  	source: "iana"
  },
  	"application/vnd.bbf.usp.error": {
  	source: "iana"
  },
  	"application/vnd.bbf.usp.msg": {
  	source: "iana"
  },
  	"application/vnd.bbf.usp.msg+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.bekitzur-stech+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.bint.med-content": {
  	source: "iana"
  },
  	"application/vnd.biopax.rdf+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.blink-idb-value-wrapper": {
  	source: "iana"
  },
  	"application/vnd.blueice.multipass": {
  	source: "iana",
  	extensions: [
  		"mpm"
  	]
  },
  	"application/vnd.bluetooth.ep.oob": {
  	source: "iana"
  },
  	"application/vnd.bluetooth.le.oob": {
  	source: "iana"
  },
  	"application/vnd.bmi": {
  	source: "iana",
  	extensions: [
  		"bmi"
  	]
  },
  	"application/vnd.bpf": {
  	source: "iana"
  },
  	"application/vnd.bpf3": {
  	source: "iana"
  },
  	"application/vnd.businessobjects": {
  	source: "iana",
  	extensions: [
  		"rep"
  	]
  },
  	"application/vnd.byu.uapi+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.cab-jscript": {
  	source: "iana"
  },
  	"application/vnd.canon-cpdl": {
  	source: "iana"
  },
  	"application/vnd.canon-lips": {
  	source: "iana"
  },
  	"application/vnd.capasystems-pg+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.cendio.thinlinc.clientconf": {
  	source: "iana"
  },
  	"application/vnd.century-systems.tcp_stream": {
  	source: "iana"
  },
  	"application/vnd.chemdraw+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"cdxml"
  	]
  },
  	"application/vnd.chess-pgn": {
  	source: "iana"
  },
  	"application/vnd.chipnuts.karaoke-mmd": {
  	source: "iana",
  	extensions: [
  		"mmd"
  	]
  },
  	"application/vnd.ciedi": {
  	source: "iana"
  },
  	"application/vnd.cinderella": {
  	source: "iana",
  	extensions: [
  		"cdy"
  	]
  },
  	"application/vnd.cirpack.isdn-ext": {
  	source: "iana"
  },
  	"application/vnd.citationstyles.style+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"csl"
  	]
  },
  	"application/vnd.claymore": {
  	source: "iana",
  	extensions: [
  		"cla"
  	]
  },
  	"application/vnd.cloanto.rp9": {
  	source: "iana",
  	extensions: [
  		"rp9"
  	]
  },
  	"application/vnd.clonk.c4group": {
  	source: "iana",
  	extensions: [
  		"c4g",
  		"c4d",
  		"c4f",
  		"c4p",
  		"c4u"
  	]
  },
  	"application/vnd.cluetrust.cartomobile-config": {
  	source: "iana",
  	extensions: [
  		"c11amc"
  	]
  },
  	"application/vnd.cluetrust.cartomobile-config-pkg": {
  	source: "iana",
  	extensions: [
  		"c11amz"
  	]
  },
  	"application/vnd.coffeescript": {
  	source: "iana"
  },
  	"application/vnd.collabio.xodocuments.document": {
  	source: "iana"
  },
  	"application/vnd.collabio.xodocuments.document-template": {
  	source: "iana"
  },
  	"application/vnd.collabio.xodocuments.presentation": {
  	source: "iana"
  },
  	"application/vnd.collabio.xodocuments.presentation-template": {
  	source: "iana"
  },
  	"application/vnd.collabio.xodocuments.spreadsheet": {
  	source: "iana"
  },
  	"application/vnd.collabio.xodocuments.spreadsheet-template": {
  	source: "iana"
  },
  	"application/vnd.collection+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.collection.doc+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.collection.next+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.comicbook+zip": {
  	source: "iana",
  	compressible: false
  },
  	"application/vnd.comicbook-rar": {
  	source: "iana"
  },
  	"application/vnd.commerce-battelle": {
  	source: "iana"
  },
  	"application/vnd.commonspace": {
  	source: "iana",
  	extensions: [
  		"csp"
  	]
  },
  	"application/vnd.contact.cmsg": {
  	source: "iana",
  	extensions: [
  		"cdbcmsg"
  	]
  },
  	"application/vnd.coreos.ignition+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.cosmocaller": {
  	source: "iana",
  	extensions: [
  		"cmc"
  	]
  },
  	"application/vnd.crick.clicker": {
  	source: "iana",
  	extensions: [
  		"clkx"
  	]
  },
  	"application/vnd.crick.clicker.keyboard": {
  	source: "iana",
  	extensions: [
  		"clkk"
  	]
  },
  	"application/vnd.crick.clicker.palette": {
  	source: "iana",
  	extensions: [
  		"clkp"
  	]
  },
  	"application/vnd.crick.clicker.template": {
  	source: "iana",
  	extensions: [
  		"clkt"
  	]
  },
  	"application/vnd.crick.clicker.wordbank": {
  	source: "iana",
  	extensions: [
  		"clkw"
  	]
  },
  	"application/vnd.criticaltools.wbs+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"wbs"
  	]
  },
  	"application/vnd.cryptii.pipe+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.crypto-shade-file": {
  	source: "iana"
  },
  	"application/vnd.cryptomator.encrypted": {
  	source: "iana"
  },
  	"application/vnd.cryptomator.vault": {
  	source: "iana"
  },
  	"application/vnd.ctc-posml": {
  	source: "iana",
  	extensions: [
  		"pml"
  	]
  },
  	"application/vnd.ctct.ws+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.cups-pdf": {
  	source: "iana"
  },
  	"application/vnd.cups-postscript": {
  	source: "iana"
  },
  	"application/vnd.cups-ppd": {
  	source: "iana",
  	extensions: [
  		"ppd"
  	]
  },
  	"application/vnd.cups-raster": {
  	source: "iana"
  },
  	"application/vnd.cups-raw": {
  	source: "iana"
  },
  	"application/vnd.curl": {
  	source: "iana"
  },
  	"application/vnd.curl.car": {
  	source: "apache",
  	extensions: [
  		"car"
  	]
  },
  	"application/vnd.curl.pcurl": {
  	source: "apache",
  	extensions: [
  		"pcurl"
  	]
  },
  	"application/vnd.cyan.dean.root+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.cybank": {
  	source: "iana"
  },
  	"application/vnd.cyclonedx+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.cyclonedx+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.d2l.coursepackage1p0+zip": {
  	source: "iana",
  	compressible: false
  },
  	"application/vnd.d3m-dataset": {
  	source: "iana"
  },
  	"application/vnd.d3m-problem": {
  	source: "iana"
  },
  	"application/vnd.dart": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"dart"
  	]
  },
  	"application/vnd.data-vision.rdz": {
  	source: "iana",
  	extensions: [
  		"rdz"
  	]
  },
  	"application/vnd.datapackage+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.dataresource+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.dbf": {
  	source: "iana",
  	extensions: [
  		"dbf"
  	]
  },
  	"application/vnd.debian.binary-package": {
  	source: "iana"
  },
  	"application/vnd.dece.data": {
  	source: "iana",
  	extensions: [
  		"uvf",
  		"uvvf",
  		"uvd",
  		"uvvd"
  	]
  },
  	"application/vnd.dece.ttml+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"uvt",
  		"uvvt"
  	]
  },
  	"application/vnd.dece.unspecified": {
  	source: "iana",
  	extensions: [
  		"uvx",
  		"uvvx"
  	]
  },
  	"application/vnd.dece.zip": {
  	source: "iana",
  	extensions: [
  		"uvz",
  		"uvvz"
  	]
  },
  	"application/vnd.denovo.fcselayout-link": {
  	source: "iana",
  	extensions: [
  		"fe_launch"
  	]
  },
  	"application/vnd.desmume.movie": {
  	source: "iana"
  },
  	"application/vnd.dir-bi.plate-dl-nosuffix": {
  	source: "iana"
  },
  	"application/vnd.dm.delegation+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.dna": {
  	source: "iana",
  	extensions: [
  		"dna"
  	]
  },
  	"application/vnd.document+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.dolby.mlp": {
  	source: "apache",
  	extensions: [
  		"mlp"
  	]
  },
  	"application/vnd.dolby.mobile.1": {
  	source: "iana"
  },
  	"application/vnd.dolby.mobile.2": {
  	source: "iana"
  },
  	"application/vnd.doremir.scorecloud-binary-document": {
  	source: "iana"
  },
  	"application/vnd.dpgraph": {
  	source: "iana",
  	extensions: [
  		"dpg"
  	]
  },
  	"application/vnd.dreamfactory": {
  	source: "iana",
  	extensions: [
  		"dfac"
  	]
  },
  	"application/vnd.drive+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.ds-keypoint": {
  	source: "apache",
  	extensions: [
  		"kpxx"
  	]
  },
  	"application/vnd.dtg.local": {
  	source: "iana"
  },
  	"application/vnd.dtg.local.flash": {
  	source: "iana"
  },
  	"application/vnd.dtg.local.html": {
  	source: "iana"
  },
  	"application/vnd.dvb.ait": {
  	source: "iana",
  	extensions: [
  		"ait"
  	]
  },
  	"application/vnd.dvb.dvbisl+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.dvb.dvbj": {
  	source: "iana"
  },
  	"application/vnd.dvb.esgcontainer": {
  	source: "iana"
  },
  	"application/vnd.dvb.ipdcdftnotifaccess": {
  	source: "iana"
  },
  	"application/vnd.dvb.ipdcesgaccess": {
  	source: "iana"
  },
  	"application/vnd.dvb.ipdcesgaccess2": {
  	source: "iana"
  },
  	"application/vnd.dvb.ipdcesgpdd": {
  	source: "iana"
  },
  	"application/vnd.dvb.ipdcroaming": {
  	source: "iana"
  },
  	"application/vnd.dvb.iptv.alfec-base": {
  	source: "iana"
  },
  	"application/vnd.dvb.iptv.alfec-enhancement": {
  	source: "iana"
  },
  	"application/vnd.dvb.notif-aggregate-root+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.dvb.notif-container+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.dvb.notif-generic+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.dvb.notif-ia-msglist+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.dvb.notif-ia-registration-request+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.dvb.notif-ia-registration-response+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.dvb.notif-init+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.dvb.pfr": {
  	source: "iana"
  },
  	"application/vnd.dvb.service": {
  	source: "iana",
  	extensions: [
  		"svc"
  	]
  },
  	"application/vnd.dxr": {
  	source: "iana"
  },
  	"application/vnd.dynageo": {
  	source: "iana",
  	extensions: [
  		"geo"
  	]
  },
  	"application/vnd.dzr": {
  	source: "iana"
  },
  	"application/vnd.easykaraoke.cdgdownload": {
  	source: "iana"
  },
  	"application/vnd.ecdis-update": {
  	source: "iana"
  },
  	"application/vnd.ecip.rlp": {
  	source: "iana"
  },
  	"application/vnd.eclipse.ditto+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.ecowin.chart": {
  	source: "iana",
  	extensions: [
  		"mag"
  	]
  },
  	"application/vnd.ecowin.filerequest": {
  	source: "iana"
  },
  	"application/vnd.ecowin.fileupdate": {
  	source: "iana"
  },
  	"application/vnd.ecowin.series": {
  	source: "iana"
  },
  	"application/vnd.ecowin.seriesrequest": {
  	source: "iana"
  },
  	"application/vnd.ecowin.seriesupdate": {
  	source: "iana"
  },
  	"application/vnd.efi.img": {
  	source: "iana"
  },
  	"application/vnd.efi.iso": {
  	source: "iana"
  },
  	"application/vnd.emclient.accessrequest+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.enliven": {
  	source: "iana",
  	extensions: [
  		"nml"
  	]
  },
  	"application/vnd.enphase.envoy": {
  	source: "iana"
  },
  	"application/vnd.eprints.data+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.epson.esf": {
  	source: "iana",
  	extensions: [
  		"esf"
  	]
  },
  	"application/vnd.epson.msf": {
  	source: "iana",
  	extensions: [
  		"msf"
  	]
  },
  	"application/vnd.epson.quickanime": {
  	source: "iana",
  	extensions: [
  		"qam"
  	]
  },
  	"application/vnd.epson.salt": {
  	source: "iana",
  	extensions: [
  		"slt"
  	]
  },
  	"application/vnd.epson.ssf": {
  	source: "iana",
  	extensions: [
  		"ssf"
  	]
  },
  	"application/vnd.ericsson.quickcall": {
  	source: "iana"
  },
  	"application/vnd.espass-espass+zip": {
  	source: "iana",
  	compressible: false
  },
  	"application/vnd.eszigno3+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"es3",
  		"et3"
  	]
  },
  	"application/vnd.etsi.aoc+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.etsi.asic-e+zip": {
  	source: "iana",
  	compressible: false
  },
  	"application/vnd.etsi.asic-s+zip": {
  	source: "iana",
  	compressible: false
  },
  	"application/vnd.etsi.cug+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.etsi.iptvcommand+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.etsi.iptvdiscovery+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.etsi.iptvprofile+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.etsi.iptvsad-bc+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.etsi.iptvsad-cod+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.etsi.iptvsad-npvr+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.etsi.iptvservice+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.etsi.iptvsync+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.etsi.iptvueprofile+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.etsi.mcid+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.etsi.mheg5": {
  	source: "iana"
  },
  	"application/vnd.etsi.overload-control-policy-dataset+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.etsi.pstn+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.etsi.sci+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.etsi.simservs+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.etsi.timestamp-token": {
  	source: "iana"
  },
  	"application/vnd.etsi.tsl+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.etsi.tsl.der": {
  	source: "iana"
  },
  	"application/vnd.eu.kasparian.car+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.eudora.data": {
  	source: "iana"
  },
  	"application/vnd.evolv.ecig.profile": {
  	source: "iana"
  },
  	"application/vnd.evolv.ecig.settings": {
  	source: "iana"
  },
  	"application/vnd.evolv.ecig.theme": {
  	source: "iana"
  },
  	"application/vnd.exstream-empower+zip": {
  	source: "iana",
  	compressible: false
  },
  	"application/vnd.exstream-package": {
  	source: "iana"
  },
  	"application/vnd.ezpix-album": {
  	source: "iana",
  	extensions: [
  		"ez2"
  	]
  },
  	"application/vnd.ezpix-package": {
  	source: "iana",
  	extensions: [
  		"ez3"
  	]
  },
  	"application/vnd.f-secure.mobile": {
  	source: "iana"
  },
  	"application/vnd.familysearch.gedcom+zip": {
  	source: "iana",
  	compressible: false
  },
  	"application/vnd.fastcopy-disk-image": {
  	source: "iana"
  },
  	"application/vnd.fdf": {
  	source: "iana",
  	extensions: [
  		"fdf"
  	]
  },
  	"application/vnd.fdsn.mseed": {
  	source: "iana",
  	extensions: [
  		"mseed"
  	]
  },
  	"application/vnd.fdsn.seed": {
  	source: "iana",
  	extensions: [
  		"seed",
  		"dataless"
  	]
  },
  	"application/vnd.ffsns": {
  	source: "iana"
  },
  	"application/vnd.ficlab.flb+zip": {
  	source: "iana",
  	compressible: false
  },
  	"application/vnd.filmit.zfc": {
  	source: "iana"
  },
  	"application/vnd.fints": {
  	source: "iana"
  },
  	"application/vnd.firemonkeys.cloudcell": {
  	source: "iana"
  },
  	"application/vnd.flographit": {
  	source: "iana",
  	extensions: [
  		"gph"
  	]
  },
  	"application/vnd.fluxtime.clip": {
  	source: "iana",
  	extensions: [
  		"ftc"
  	]
  },
  	"application/vnd.font-fontforge-sfd": {
  	source: "iana"
  },
  	"application/vnd.framemaker": {
  	source: "iana",
  	extensions: [
  		"fm",
  		"frame",
  		"maker",
  		"book"
  	]
  },
  	"application/vnd.frogans.fnc": {
  	source: "iana",
  	extensions: [
  		"fnc"
  	]
  },
  	"application/vnd.frogans.ltf": {
  	source: "iana",
  	extensions: [
  		"ltf"
  	]
  },
  	"application/vnd.fsc.weblaunch": {
  	source: "iana",
  	extensions: [
  		"fsc"
  	]
  },
  	"application/vnd.fujifilm.fb.docuworks": {
  	source: "iana"
  },
  	"application/vnd.fujifilm.fb.docuworks.binder": {
  	source: "iana"
  },
  	"application/vnd.fujifilm.fb.docuworks.container": {
  	source: "iana"
  },
  	"application/vnd.fujifilm.fb.jfi+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.fujitsu.oasys": {
  	source: "iana",
  	extensions: [
  		"oas"
  	]
  },
  	"application/vnd.fujitsu.oasys2": {
  	source: "iana",
  	extensions: [
  		"oa2"
  	]
  },
  	"application/vnd.fujitsu.oasys3": {
  	source: "iana",
  	extensions: [
  		"oa3"
  	]
  },
  	"application/vnd.fujitsu.oasysgp": {
  	source: "iana",
  	extensions: [
  		"fg5"
  	]
  },
  	"application/vnd.fujitsu.oasysprs": {
  	source: "iana",
  	extensions: [
  		"bh2"
  	]
  },
  	"application/vnd.fujixerox.art-ex": {
  	source: "iana"
  },
  	"application/vnd.fujixerox.art4": {
  	source: "iana"
  },
  	"application/vnd.fujixerox.ddd": {
  	source: "iana",
  	extensions: [
  		"ddd"
  	]
  },
  	"application/vnd.fujixerox.docuworks": {
  	source: "iana",
  	extensions: [
  		"xdw"
  	]
  },
  	"application/vnd.fujixerox.docuworks.binder": {
  	source: "iana",
  	extensions: [
  		"xbd"
  	]
  },
  	"application/vnd.fujixerox.docuworks.container": {
  	source: "iana"
  },
  	"application/vnd.fujixerox.hbpl": {
  	source: "iana"
  },
  	"application/vnd.fut-misnet": {
  	source: "iana"
  },
  	"application/vnd.futoin+cbor": {
  	source: "iana"
  },
  	"application/vnd.futoin+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.fuzzysheet": {
  	source: "iana",
  	extensions: [
  		"fzs"
  	]
  },
  	"application/vnd.genomatix.tuxedo": {
  	source: "iana",
  	extensions: [
  		"txd"
  	]
  },
  	"application/vnd.gentics.grd+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.geo+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.geocube+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.geogebra.file": {
  	source: "iana",
  	extensions: [
  		"ggb"
  	]
  },
  	"application/vnd.geogebra.slides": {
  	source: "iana"
  },
  	"application/vnd.geogebra.tool": {
  	source: "iana",
  	extensions: [
  		"ggt"
  	]
  },
  	"application/vnd.geometry-explorer": {
  	source: "iana",
  	extensions: [
  		"gex",
  		"gre"
  	]
  },
  	"application/vnd.geonext": {
  	source: "iana",
  	extensions: [
  		"gxt"
  	]
  },
  	"application/vnd.geoplan": {
  	source: "iana",
  	extensions: [
  		"g2w"
  	]
  },
  	"application/vnd.geospace": {
  	source: "iana",
  	extensions: [
  		"g3w"
  	]
  },
  	"application/vnd.gerber": {
  	source: "iana"
  },
  	"application/vnd.globalplatform.card-content-mgt": {
  	source: "iana"
  },
  	"application/vnd.globalplatform.card-content-mgt-response": {
  	source: "iana"
  },
  	"application/vnd.gmx": {
  	source: "iana",
  	extensions: [
  		"gmx"
  	]
  },
  	"application/vnd.google-apps.document": {
  	compressible: false,
  	extensions: [
  		"gdoc"
  	]
  },
  	"application/vnd.google-apps.presentation": {
  	compressible: false,
  	extensions: [
  		"gslides"
  	]
  },
  	"application/vnd.google-apps.spreadsheet": {
  	compressible: false,
  	extensions: [
  		"gsheet"
  	]
  },
  	"application/vnd.google-earth.kml+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"kml"
  	]
  },
  	"application/vnd.google-earth.kmz": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"kmz"
  	]
  },
  	"application/vnd.gov.sk.e-form+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.gov.sk.e-form+zip": {
  	source: "iana",
  	compressible: false
  },
  	"application/vnd.gov.sk.xmldatacontainer+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.grafeq": {
  	source: "iana",
  	extensions: [
  		"gqf",
  		"gqs"
  	]
  },
  	"application/vnd.gridmp": {
  	source: "iana"
  },
  	"application/vnd.groove-account": {
  	source: "iana",
  	extensions: [
  		"gac"
  	]
  },
  	"application/vnd.groove-help": {
  	source: "iana",
  	extensions: [
  		"ghf"
  	]
  },
  	"application/vnd.groove-identity-message": {
  	source: "iana",
  	extensions: [
  		"gim"
  	]
  },
  	"application/vnd.groove-injector": {
  	source: "iana",
  	extensions: [
  		"grv"
  	]
  },
  	"application/vnd.groove-tool-message": {
  	source: "iana",
  	extensions: [
  		"gtm"
  	]
  },
  	"application/vnd.groove-tool-template": {
  	source: "iana",
  	extensions: [
  		"tpl"
  	]
  },
  	"application/vnd.groove-vcard": {
  	source: "iana",
  	extensions: [
  		"vcg"
  	]
  },
  	"application/vnd.hal+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.hal+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"hal"
  	]
  },
  	"application/vnd.handheld-entertainment+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"zmm"
  	]
  },
  	"application/vnd.hbci": {
  	source: "iana",
  	extensions: [
  		"hbci"
  	]
  },
  	"application/vnd.hc+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.hcl-bireports": {
  	source: "iana"
  },
  	"application/vnd.hdt": {
  	source: "iana"
  },
  	"application/vnd.heroku+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.hhe.lesson-player": {
  	source: "iana",
  	extensions: [
  		"les"
  	]
  },
  	"application/vnd.hl7cda+xml": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true
  },
  	"application/vnd.hl7v2+xml": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true
  },
  	"application/vnd.hp-hpgl": {
  	source: "iana",
  	extensions: [
  		"hpgl"
  	]
  },
  	"application/vnd.hp-hpid": {
  	source: "iana",
  	extensions: [
  		"hpid"
  	]
  },
  	"application/vnd.hp-hps": {
  	source: "iana",
  	extensions: [
  		"hps"
  	]
  },
  	"application/vnd.hp-jlyt": {
  	source: "iana",
  	extensions: [
  		"jlt"
  	]
  },
  	"application/vnd.hp-pcl": {
  	source: "iana",
  	extensions: [
  		"pcl"
  	]
  },
  	"application/vnd.hp-pclxl": {
  	source: "iana",
  	extensions: [
  		"pclxl"
  	]
  },
  	"application/vnd.httphone": {
  	source: "iana"
  },
  	"application/vnd.hydrostatix.sof-data": {
  	source: "iana",
  	extensions: [
  		"sfd-hdstx"
  	]
  },
  	"application/vnd.hyper+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.hyper-item+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.hyperdrive+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.hzn-3d-crossword": {
  	source: "iana"
  },
  	"application/vnd.ibm.afplinedata": {
  	source: "iana"
  },
  	"application/vnd.ibm.electronic-media": {
  	source: "iana"
  },
  	"application/vnd.ibm.minipay": {
  	source: "iana",
  	extensions: [
  		"mpy"
  	]
  },
  	"application/vnd.ibm.modcap": {
  	source: "iana",
  	extensions: [
  		"afp",
  		"listafp",
  		"list3820"
  	]
  },
  	"application/vnd.ibm.rights-management": {
  	source: "iana",
  	extensions: [
  		"irm"
  	]
  },
  	"application/vnd.ibm.secure-container": {
  	source: "iana",
  	extensions: [
  		"sc"
  	]
  },
  	"application/vnd.iccprofile": {
  	source: "iana",
  	extensions: [
  		"icc",
  		"icm"
  	]
  },
  	"application/vnd.ieee.1905": {
  	source: "iana"
  },
  	"application/vnd.igloader": {
  	source: "iana",
  	extensions: [
  		"igl"
  	]
  },
  	"application/vnd.imagemeter.folder+zip": {
  	source: "iana",
  	compressible: false
  },
  	"application/vnd.imagemeter.image+zip": {
  	source: "iana",
  	compressible: false
  },
  	"application/vnd.immervision-ivp": {
  	source: "iana",
  	extensions: [
  		"ivp"
  	]
  },
  	"application/vnd.immervision-ivu": {
  	source: "iana",
  	extensions: [
  		"ivu"
  	]
  },
  	"application/vnd.ims.imsccv1p1": {
  	source: "iana"
  },
  	"application/vnd.ims.imsccv1p2": {
  	source: "iana"
  },
  	"application/vnd.ims.imsccv1p3": {
  	source: "iana"
  },
  	"application/vnd.ims.lis.v2.result+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.ims.lti.v2.toolconsumerprofile+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.ims.lti.v2.toolproxy+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.ims.lti.v2.toolproxy.id+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.ims.lti.v2.toolsettings+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.ims.lti.v2.toolsettings.simple+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.informedcontrol.rms+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.informix-visionary": {
  	source: "iana"
  },
  	"application/vnd.infotech.project": {
  	source: "iana"
  },
  	"application/vnd.infotech.project+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.innopath.wamp.notification": {
  	source: "iana"
  },
  	"application/vnd.insors.igm": {
  	source: "iana",
  	extensions: [
  		"igm"
  	]
  },
  	"application/vnd.intercon.formnet": {
  	source: "iana",
  	extensions: [
  		"xpw",
  		"xpx"
  	]
  },
  	"application/vnd.intergeo": {
  	source: "iana",
  	extensions: [
  		"i2g"
  	]
  },
  	"application/vnd.intertrust.digibox": {
  	source: "iana"
  },
  	"application/vnd.intertrust.nncp": {
  	source: "iana"
  },
  	"application/vnd.intu.qbo": {
  	source: "iana",
  	extensions: [
  		"qbo"
  	]
  },
  	"application/vnd.intu.qfx": {
  	source: "iana",
  	extensions: [
  		"qfx"
  	]
  },
  	"application/vnd.iptc.g2.catalogitem+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.iptc.g2.conceptitem+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.iptc.g2.knowledgeitem+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.iptc.g2.newsitem+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.iptc.g2.newsmessage+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.iptc.g2.packageitem+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.iptc.g2.planningitem+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.ipunplugged.rcprofile": {
  	source: "iana",
  	extensions: [
  		"rcprofile"
  	]
  },
  	"application/vnd.irepository.package+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"irp"
  	]
  },
  	"application/vnd.is-xpr": {
  	source: "iana",
  	extensions: [
  		"xpr"
  	]
  },
  	"application/vnd.isac.fcs": {
  	source: "iana",
  	extensions: [
  		"fcs"
  	]
  },
  	"application/vnd.iso11783-10+zip": {
  	source: "iana",
  	compressible: false
  },
  	"application/vnd.jam": {
  	source: "iana",
  	extensions: [
  		"jam"
  	]
  },
  	"application/vnd.japannet-directory-service": {
  	source: "iana"
  },
  	"application/vnd.japannet-jpnstore-wakeup": {
  	source: "iana"
  },
  	"application/vnd.japannet-payment-wakeup": {
  	source: "iana"
  },
  	"application/vnd.japannet-registration": {
  	source: "iana"
  },
  	"application/vnd.japannet-registration-wakeup": {
  	source: "iana"
  },
  	"application/vnd.japannet-setstore-wakeup": {
  	source: "iana"
  },
  	"application/vnd.japannet-verification": {
  	source: "iana"
  },
  	"application/vnd.japannet-verification-wakeup": {
  	source: "iana"
  },
  	"application/vnd.jcp.javame.midlet-rms": {
  	source: "iana",
  	extensions: [
  		"rms"
  	]
  },
  	"application/vnd.jisp": {
  	source: "iana",
  	extensions: [
  		"jisp"
  	]
  },
  	"application/vnd.joost.joda-archive": {
  	source: "iana",
  	extensions: [
  		"joda"
  	]
  },
  	"application/vnd.jsk.isdn-ngn": {
  	source: "iana"
  },
  	"application/vnd.kahootz": {
  	source: "iana",
  	extensions: [
  		"ktz",
  		"ktr"
  	]
  },
  	"application/vnd.kde.karbon": {
  	source: "iana",
  	extensions: [
  		"karbon"
  	]
  },
  	"application/vnd.kde.kchart": {
  	source: "iana",
  	extensions: [
  		"chrt"
  	]
  },
  	"application/vnd.kde.kformula": {
  	source: "iana",
  	extensions: [
  		"kfo"
  	]
  },
  	"application/vnd.kde.kivio": {
  	source: "iana",
  	extensions: [
  		"flw"
  	]
  },
  	"application/vnd.kde.kontour": {
  	source: "iana",
  	extensions: [
  		"kon"
  	]
  },
  	"application/vnd.kde.kpresenter": {
  	source: "iana",
  	extensions: [
  		"kpr",
  		"kpt"
  	]
  },
  	"application/vnd.kde.kspread": {
  	source: "iana",
  	extensions: [
  		"ksp"
  	]
  },
  	"application/vnd.kde.kword": {
  	source: "iana",
  	extensions: [
  		"kwd",
  		"kwt"
  	]
  },
  	"application/vnd.kenameaapp": {
  	source: "iana",
  	extensions: [
  		"htke"
  	]
  },
  	"application/vnd.kidspiration": {
  	source: "iana",
  	extensions: [
  		"kia"
  	]
  },
  	"application/vnd.kinar": {
  	source: "iana",
  	extensions: [
  		"kne",
  		"knp"
  	]
  },
  	"application/vnd.koan": {
  	source: "iana",
  	extensions: [
  		"skp",
  		"skd",
  		"skt",
  		"skm"
  	]
  },
  	"application/vnd.kodak-descriptor": {
  	source: "iana",
  	extensions: [
  		"sse"
  	]
  },
  	"application/vnd.las": {
  	source: "iana"
  },
  	"application/vnd.las.las+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.las.las+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"lasxml"
  	]
  },
  	"application/vnd.laszip": {
  	source: "iana"
  },
  	"application/vnd.leap+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.liberty-request+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.llamagraphics.life-balance.desktop": {
  	source: "iana",
  	extensions: [
  		"lbd"
  	]
  },
  	"application/vnd.llamagraphics.life-balance.exchange+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"lbe"
  	]
  },
  	"application/vnd.logipipe.circuit+zip": {
  	source: "iana",
  	compressible: false
  },
  	"application/vnd.loom": {
  	source: "iana"
  },
  	"application/vnd.lotus-1-2-3": {
  	source: "iana",
  	extensions: [
  		"123"
  	]
  },
  	"application/vnd.lotus-approach": {
  	source: "iana",
  	extensions: [
  		"apr"
  	]
  },
  	"application/vnd.lotus-freelance": {
  	source: "iana",
  	extensions: [
  		"pre"
  	]
  },
  	"application/vnd.lotus-notes": {
  	source: "iana",
  	extensions: [
  		"nsf"
  	]
  },
  	"application/vnd.lotus-organizer": {
  	source: "iana",
  	extensions: [
  		"org"
  	]
  },
  	"application/vnd.lotus-screencam": {
  	source: "iana",
  	extensions: [
  		"scm"
  	]
  },
  	"application/vnd.lotus-wordpro": {
  	source: "iana",
  	extensions: [
  		"lwp"
  	]
  },
  	"application/vnd.macports.portpkg": {
  	source: "iana",
  	extensions: [
  		"portpkg"
  	]
  },
  	"application/vnd.mapbox-vector-tile": {
  	source: "iana",
  	extensions: [
  		"mvt"
  	]
  },
  	"application/vnd.marlin.drm.actiontoken+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.marlin.drm.conftoken+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.marlin.drm.license+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.marlin.drm.mdcf": {
  	source: "iana"
  },
  	"application/vnd.mason+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.maxar.archive.3tz+zip": {
  	source: "iana",
  	compressible: false
  },
  	"application/vnd.maxmind.maxmind-db": {
  	source: "iana"
  },
  	"application/vnd.mcd": {
  	source: "iana",
  	extensions: [
  		"mcd"
  	]
  },
  	"application/vnd.medcalcdata": {
  	source: "iana",
  	extensions: [
  		"mc1"
  	]
  },
  	"application/vnd.mediastation.cdkey": {
  	source: "iana",
  	extensions: [
  		"cdkey"
  	]
  },
  	"application/vnd.meridian-slingshot": {
  	source: "iana"
  },
  	"application/vnd.mfer": {
  	source: "iana",
  	extensions: [
  		"mwf"
  	]
  },
  	"application/vnd.mfmp": {
  	source: "iana",
  	extensions: [
  		"mfm"
  	]
  },
  	"application/vnd.micro+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.micrografx.flo": {
  	source: "iana",
  	extensions: [
  		"flo"
  	]
  },
  	"application/vnd.micrografx.igx": {
  	source: "iana",
  	extensions: [
  		"igx"
  	]
  },
  	"application/vnd.microsoft.portable-executable": {
  	source: "iana"
  },
  	"application/vnd.microsoft.windows.thumbnail-cache": {
  	source: "iana"
  },
  	"application/vnd.miele+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.mif": {
  	source: "iana",
  	extensions: [
  		"mif"
  	]
  },
  	"application/vnd.minisoft-hp3000-save": {
  	source: "iana"
  },
  	"application/vnd.mitsubishi.misty-guard.trustweb": {
  	source: "iana"
  },
  	"application/vnd.mobius.daf": {
  	source: "iana",
  	extensions: [
  		"daf"
  	]
  },
  	"application/vnd.mobius.dis": {
  	source: "iana",
  	extensions: [
  		"dis"
  	]
  },
  	"application/vnd.mobius.mbk": {
  	source: "iana",
  	extensions: [
  		"mbk"
  	]
  },
  	"application/vnd.mobius.mqy": {
  	source: "iana",
  	extensions: [
  		"mqy"
  	]
  },
  	"application/vnd.mobius.msl": {
  	source: "iana",
  	extensions: [
  		"msl"
  	]
  },
  	"application/vnd.mobius.plc": {
  	source: "iana",
  	extensions: [
  		"plc"
  	]
  },
  	"application/vnd.mobius.txf": {
  	source: "iana",
  	extensions: [
  		"txf"
  	]
  },
  	"application/vnd.mophun.application": {
  	source: "iana",
  	extensions: [
  		"mpn"
  	]
  },
  	"application/vnd.mophun.certificate": {
  	source: "iana",
  	extensions: [
  		"mpc"
  	]
  },
  	"application/vnd.motorola.flexsuite": {
  	source: "iana"
  },
  	"application/vnd.motorola.flexsuite.adsi": {
  	source: "iana"
  },
  	"application/vnd.motorola.flexsuite.fis": {
  	source: "iana"
  },
  	"application/vnd.motorola.flexsuite.gotap": {
  	source: "iana"
  },
  	"application/vnd.motorola.flexsuite.kmr": {
  	source: "iana"
  },
  	"application/vnd.motorola.flexsuite.ttc": {
  	source: "iana"
  },
  	"application/vnd.motorola.flexsuite.wem": {
  	source: "iana"
  },
  	"application/vnd.motorola.iprm": {
  	source: "iana"
  },
  	"application/vnd.mozilla.xul+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"xul"
  	]
  },
  	"application/vnd.ms-3mfdocument": {
  	source: "iana"
  },
  	"application/vnd.ms-artgalry": {
  	source: "iana",
  	extensions: [
  		"cil"
  	]
  },
  	"application/vnd.ms-asf": {
  	source: "iana"
  },
  	"application/vnd.ms-cab-compressed": {
  	source: "iana",
  	extensions: [
  		"cab"
  	]
  },
  	"application/vnd.ms-color.iccprofile": {
  	source: "apache"
  },
  	"application/vnd.ms-excel": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"xls",
  		"xlm",
  		"xla",
  		"xlc",
  		"xlt",
  		"xlw"
  	]
  },
  	"application/vnd.ms-excel.addin.macroenabled.12": {
  	source: "iana",
  	extensions: [
  		"xlam"
  	]
  },
  	"application/vnd.ms-excel.sheet.binary.macroenabled.12": {
  	source: "iana",
  	extensions: [
  		"xlsb"
  	]
  },
  	"application/vnd.ms-excel.sheet.macroenabled.12": {
  	source: "iana",
  	extensions: [
  		"xlsm"
  	]
  },
  	"application/vnd.ms-excel.template.macroenabled.12": {
  	source: "iana",
  	extensions: [
  		"xltm"
  	]
  },
  	"application/vnd.ms-fontobject": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"eot"
  	]
  },
  	"application/vnd.ms-htmlhelp": {
  	source: "iana",
  	extensions: [
  		"chm"
  	]
  },
  	"application/vnd.ms-ims": {
  	source: "iana",
  	extensions: [
  		"ims"
  	]
  },
  	"application/vnd.ms-lrm": {
  	source: "iana",
  	extensions: [
  		"lrm"
  	]
  },
  	"application/vnd.ms-office.activex+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.ms-officetheme": {
  	source: "iana",
  	extensions: [
  		"thmx"
  	]
  },
  	"application/vnd.ms-opentype": {
  	source: "apache",
  	compressible: true
  },
  	"application/vnd.ms-outlook": {
  	compressible: false,
  	extensions: [
  		"msg"
  	]
  },
  	"application/vnd.ms-package.obfuscated-opentype": {
  	source: "apache"
  },
  	"application/vnd.ms-pki.seccat": {
  	source: "apache",
  	extensions: [
  		"cat"
  	]
  },
  	"application/vnd.ms-pki.stl": {
  	source: "apache",
  	extensions: [
  		"stl"
  	]
  },
  	"application/vnd.ms-playready.initiator+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.ms-powerpoint": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"ppt",
  		"pps",
  		"pot"
  	]
  },
  	"application/vnd.ms-powerpoint.addin.macroenabled.12": {
  	source: "iana",
  	extensions: [
  		"ppam"
  	]
  },
  	"application/vnd.ms-powerpoint.presentation.macroenabled.12": {
  	source: "iana",
  	extensions: [
  		"pptm"
  	]
  },
  	"application/vnd.ms-powerpoint.slide.macroenabled.12": {
  	source: "iana",
  	extensions: [
  		"sldm"
  	]
  },
  	"application/vnd.ms-powerpoint.slideshow.macroenabled.12": {
  	source: "iana",
  	extensions: [
  		"ppsm"
  	]
  },
  	"application/vnd.ms-powerpoint.template.macroenabled.12": {
  	source: "iana",
  	extensions: [
  		"potm"
  	]
  },
  	"application/vnd.ms-printdevicecapabilities+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.ms-printing.printticket+xml": {
  	source: "apache",
  	compressible: true
  },
  	"application/vnd.ms-printschematicket+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.ms-project": {
  	source: "iana",
  	extensions: [
  		"mpp",
  		"mpt"
  	]
  },
  	"application/vnd.ms-tnef": {
  	source: "iana"
  },
  	"application/vnd.ms-windows.devicepairing": {
  	source: "iana"
  },
  	"application/vnd.ms-windows.nwprinting.oob": {
  	source: "iana"
  },
  	"application/vnd.ms-windows.printerpairing": {
  	source: "iana"
  },
  	"application/vnd.ms-windows.wsd.oob": {
  	source: "iana"
  },
  	"application/vnd.ms-wmdrm.lic-chlg-req": {
  	source: "iana"
  },
  	"application/vnd.ms-wmdrm.lic-resp": {
  	source: "iana"
  },
  	"application/vnd.ms-wmdrm.meter-chlg-req": {
  	source: "iana"
  },
  	"application/vnd.ms-wmdrm.meter-resp": {
  	source: "iana"
  },
  	"application/vnd.ms-word.document.macroenabled.12": {
  	source: "iana",
  	extensions: [
  		"docm"
  	]
  },
  	"application/vnd.ms-word.template.macroenabled.12": {
  	source: "iana",
  	extensions: [
  		"dotm"
  	]
  },
  	"application/vnd.ms-works": {
  	source: "iana",
  	extensions: [
  		"wps",
  		"wks",
  		"wcm",
  		"wdb"
  	]
  },
  	"application/vnd.ms-wpl": {
  	source: "iana",
  	extensions: [
  		"wpl"
  	]
  },
  	"application/vnd.ms-xpsdocument": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"xps"
  	]
  },
  	"application/vnd.msa-disk-image": {
  	source: "iana"
  },
  	"application/vnd.mseq": {
  	source: "iana",
  	extensions: [
  		"mseq"
  	]
  },
  	"application/vnd.msign": {
  	source: "iana"
  },
  	"application/vnd.multiad.creator": {
  	source: "iana"
  },
  	"application/vnd.multiad.creator.cif": {
  	source: "iana"
  },
  	"application/vnd.music-niff": {
  	source: "iana"
  },
  	"application/vnd.musician": {
  	source: "iana",
  	extensions: [
  		"mus"
  	]
  },
  	"application/vnd.muvee.style": {
  	source: "iana",
  	extensions: [
  		"msty"
  	]
  },
  	"application/vnd.mynfc": {
  	source: "iana",
  	extensions: [
  		"taglet"
  	]
  },
  	"application/vnd.nacamar.ybrid+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.ncd.control": {
  	source: "iana"
  },
  	"application/vnd.ncd.reference": {
  	source: "iana"
  },
  	"application/vnd.nearst.inv+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.nebumind.line": {
  	source: "iana"
  },
  	"application/vnd.nervana": {
  	source: "iana"
  },
  	"application/vnd.netfpx": {
  	source: "iana"
  },
  	"application/vnd.neurolanguage.nlu": {
  	source: "iana",
  	extensions: [
  		"nlu"
  	]
  },
  	"application/vnd.nimn": {
  	source: "iana"
  },
  	"application/vnd.nintendo.nitro.rom": {
  	source: "iana"
  },
  	"application/vnd.nintendo.snes.rom": {
  	source: "iana"
  },
  	"application/vnd.nitf": {
  	source: "iana",
  	extensions: [
  		"ntf",
  		"nitf"
  	]
  },
  	"application/vnd.noblenet-directory": {
  	source: "iana",
  	extensions: [
  		"nnd"
  	]
  },
  	"application/vnd.noblenet-sealer": {
  	source: "iana",
  	extensions: [
  		"nns"
  	]
  },
  	"application/vnd.noblenet-web": {
  	source: "iana",
  	extensions: [
  		"nnw"
  	]
  },
  	"application/vnd.nokia.catalogs": {
  	source: "iana"
  },
  	"application/vnd.nokia.conml+wbxml": {
  	source: "iana"
  },
  	"application/vnd.nokia.conml+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.nokia.iptv.config+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.nokia.isds-radio-presets": {
  	source: "iana"
  },
  	"application/vnd.nokia.landmark+wbxml": {
  	source: "iana"
  },
  	"application/vnd.nokia.landmark+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.nokia.landmarkcollection+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.nokia.n-gage.ac+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"ac"
  	]
  },
  	"application/vnd.nokia.n-gage.data": {
  	source: "iana",
  	extensions: [
  		"ngdat"
  	]
  },
  	"application/vnd.nokia.n-gage.symbian.install": {
  	source: "iana",
  	extensions: [
  		"n-gage"
  	]
  },
  	"application/vnd.nokia.ncd": {
  	source: "iana"
  },
  	"application/vnd.nokia.pcd+wbxml": {
  	source: "iana"
  },
  	"application/vnd.nokia.pcd+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.nokia.radio-preset": {
  	source: "iana",
  	extensions: [
  		"rpst"
  	]
  },
  	"application/vnd.nokia.radio-presets": {
  	source: "iana",
  	extensions: [
  		"rpss"
  	]
  },
  	"application/vnd.novadigm.edm": {
  	source: "iana",
  	extensions: [
  		"edm"
  	]
  },
  	"application/vnd.novadigm.edx": {
  	source: "iana",
  	extensions: [
  		"edx"
  	]
  },
  	"application/vnd.novadigm.ext": {
  	source: "iana",
  	extensions: [
  		"ext"
  	]
  },
  	"application/vnd.ntt-local.content-share": {
  	source: "iana"
  },
  	"application/vnd.ntt-local.file-transfer": {
  	source: "iana"
  },
  	"application/vnd.ntt-local.ogw_remote-access": {
  	source: "iana"
  },
  	"application/vnd.ntt-local.sip-ta_remote": {
  	source: "iana"
  },
  	"application/vnd.ntt-local.sip-ta_tcp_stream": {
  	source: "iana"
  },
  	"application/vnd.oasis.opendocument.chart": {
  	source: "iana",
  	extensions: [
  		"odc"
  	]
  },
  	"application/vnd.oasis.opendocument.chart-template": {
  	source: "iana",
  	extensions: [
  		"otc"
  	]
  },
  	"application/vnd.oasis.opendocument.database": {
  	source: "iana",
  	extensions: [
  		"odb"
  	]
  },
  	"application/vnd.oasis.opendocument.formula": {
  	source: "iana",
  	extensions: [
  		"odf"
  	]
  },
  	"application/vnd.oasis.opendocument.formula-template": {
  	source: "iana",
  	extensions: [
  		"odft"
  	]
  },
  	"application/vnd.oasis.opendocument.graphics": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"odg"
  	]
  },
  	"application/vnd.oasis.opendocument.graphics-template": {
  	source: "iana",
  	extensions: [
  		"otg"
  	]
  },
  	"application/vnd.oasis.opendocument.image": {
  	source: "iana",
  	extensions: [
  		"odi"
  	]
  },
  	"application/vnd.oasis.opendocument.image-template": {
  	source: "iana",
  	extensions: [
  		"oti"
  	]
  },
  	"application/vnd.oasis.opendocument.presentation": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"odp"
  	]
  },
  	"application/vnd.oasis.opendocument.presentation-template": {
  	source: "iana",
  	extensions: [
  		"otp"
  	]
  },
  	"application/vnd.oasis.opendocument.spreadsheet": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"ods"
  	]
  },
  	"application/vnd.oasis.opendocument.spreadsheet-template": {
  	source: "iana",
  	extensions: [
  		"ots"
  	]
  },
  	"application/vnd.oasis.opendocument.text": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"odt"
  	]
  },
  	"application/vnd.oasis.opendocument.text-master": {
  	source: "iana",
  	extensions: [
  		"odm"
  	]
  },
  	"application/vnd.oasis.opendocument.text-template": {
  	source: "iana",
  	extensions: [
  		"ott"
  	]
  },
  	"application/vnd.oasis.opendocument.text-web": {
  	source: "iana",
  	extensions: [
  		"oth"
  	]
  },
  	"application/vnd.obn": {
  	source: "iana"
  },
  	"application/vnd.ocf+cbor": {
  	source: "iana"
  },
  	"application/vnd.oci.image.manifest.v1+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oftn.l10n+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oipf.contentaccessdownload+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oipf.contentaccessstreaming+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oipf.cspg-hexbinary": {
  	source: "iana"
  },
  	"application/vnd.oipf.dae.svg+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oipf.dae.xhtml+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oipf.mippvcontrolmessage+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oipf.pae.gem": {
  	source: "iana"
  },
  	"application/vnd.oipf.spdiscovery+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oipf.spdlist+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oipf.ueprofile+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oipf.userprofile+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.olpc-sugar": {
  	source: "iana",
  	extensions: [
  		"xo"
  	]
  },
  	"application/vnd.oma-scws-config": {
  	source: "iana"
  },
  	"application/vnd.oma-scws-http-request": {
  	source: "iana"
  },
  	"application/vnd.oma-scws-http-response": {
  	source: "iana"
  },
  	"application/vnd.oma.bcast.associated-procedure-parameter+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oma.bcast.drm-trigger+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oma.bcast.imd+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oma.bcast.ltkm": {
  	source: "iana"
  },
  	"application/vnd.oma.bcast.notification+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oma.bcast.provisioningtrigger": {
  	source: "iana"
  },
  	"application/vnd.oma.bcast.sgboot": {
  	source: "iana"
  },
  	"application/vnd.oma.bcast.sgdd+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oma.bcast.sgdu": {
  	source: "iana"
  },
  	"application/vnd.oma.bcast.simple-symbol-container": {
  	source: "iana"
  },
  	"application/vnd.oma.bcast.smartcard-trigger+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oma.bcast.sprov+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oma.bcast.stkm": {
  	source: "iana"
  },
  	"application/vnd.oma.cab-address-book+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oma.cab-feature-handler+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oma.cab-pcc+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oma.cab-subs-invite+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oma.cab-user-prefs+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oma.dcd": {
  	source: "iana"
  },
  	"application/vnd.oma.dcdc": {
  	source: "iana"
  },
  	"application/vnd.oma.dd2+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"dd2"
  	]
  },
  	"application/vnd.oma.drm.risd+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oma.group-usage-list+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oma.lwm2m+cbor": {
  	source: "iana"
  },
  	"application/vnd.oma.lwm2m+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oma.lwm2m+tlv": {
  	source: "iana"
  },
  	"application/vnd.oma.pal+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oma.poc.detailed-progress-report+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oma.poc.final-report+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oma.poc.groups+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oma.poc.invocation-descriptor+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oma.poc.optimized-progress-report+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oma.push": {
  	source: "iana"
  },
  	"application/vnd.oma.scidm.messages+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oma.xcap-directory+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.omads-email+xml": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true
  },
  	"application/vnd.omads-file+xml": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true
  },
  	"application/vnd.omads-folder+xml": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true
  },
  	"application/vnd.omaloc-supl-init": {
  	source: "iana"
  },
  	"application/vnd.onepager": {
  	source: "iana"
  },
  	"application/vnd.onepagertamp": {
  	source: "iana"
  },
  	"application/vnd.onepagertamx": {
  	source: "iana"
  },
  	"application/vnd.onepagertat": {
  	source: "iana"
  },
  	"application/vnd.onepagertatp": {
  	source: "iana"
  },
  	"application/vnd.onepagertatx": {
  	source: "iana"
  },
  	"application/vnd.openblox.game+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"obgx"
  	]
  },
  	"application/vnd.openblox.game-binary": {
  	source: "iana"
  },
  	"application/vnd.openeye.oeb": {
  	source: "iana"
  },
  	"application/vnd.openofficeorg.extension": {
  	source: "apache",
  	extensions: [
  		"oxt"
  	]
  },
  	"application/vnd.openstreetmap.data+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"osm"
  	]
  },
  	"application/vnd.opentimestamps.ots": {
  	source: "iana"
  },
  	"application/vnd.openxmlformats-officedocument.custom-properties+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.customxmlproperties+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.drawing+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.drawingml.chart+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.extended-properties+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.presentationml.comments+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.presentationml.presentation": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"pptx"
  	]
  },
  	"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.presentationml.slide": {
  	source: "iana",
  	extensions: [
  		"sldx"
  	]
  },
  	"application/vnd.openxmlformats-officedocument.presentationml.slide+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.presentationml.slideshow": {
  	source: "iana",
  	extensions: [
  		"ppsx"
  	]
  },
  	"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.presentationml.tags+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.presentationml.template": {
  	source: "iana",
  	extensions: [
  		"potx"
  	]
  },
  	"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"xlsx"
  	]
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.template": {
  	source: "iana",
  	extensions: [
  		"xltx"
  	]
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.theme+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.themeoverride+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.vmldrawing": {
  	source: "iana"
  },
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"docx"
  	]
  },
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.template": {
  	source: "iana",
  	extensions: [
  		"dotx"
  	]
  },
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-package.core-properties+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-package.relationships+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oracle.resource+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.orange.indata": {
  	source: "iana"
  },
  	"application/vnd.osa.netdeploy": {
  	source: "iana"
  },
  	"application/vnd.osgeo.mapguide.package": {
  	source: "iana",
  	extensions: [
  		"mgp"
  	]
  },
  	"application/vnd.osgi.bundle": {
  	source: "iana"
  },
  	"application/vnd.osgi.dp": {
  	source: "iana",
  	extensions: [
  		"dp"
  	]
  },
  	"application/vnd.osgi.subsystem": {
  	source: "iana",
  	extensions: [
  		"esa"
  	]
  },
  	"application/vnd.otps.ct-kip+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oxli.countgraph": {
  	source: "iana"
  },
  	"application/vnd.pagerduty+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.palm": {
  	source: "iana",
  	extensions: [
  		"pdb",
  		"pqa",
  		"oprc"
  	]
  },
  	"application/vnd.panoply": {
  	source: "iana"
  },
  	"application/vnd.paos.xml": {
  	source: "iana"
  },
  	"application/vnd.patentdive": {
  	source: "iana"
  },
  	"application/vnd.patientecommsdoc": {
  	source: "iana"
  },
  	"application/vnd.pawaafile": {
  	source: "iana",
  	extensions: [
  		"paw"
  	]
  },
  	"application/vnd.pcos": {
  	source: "iana"
  },
  	"application/vnd.pg.format": {
  	source: "iana",
  	extensions: [
  		"str"
  	]
  },
  	"application/vnd.pg.osasli": {
  	source: "iana",
  	extensions: [
  		"ei6"
  	]
  },
  	"application/vnd.piaccess.application-licence": {
  	source: "iana"
  },
  	"application/vnd.picsel": {
  	source: "iana",
  	extensions: [
  		"efif"
  	]
  },
  	"application/vnd.pmi.widget": {
  	source: "iana",
  	extensions: [
  		"wg"
  	]
  },
  	"application/vnd.poc.group-advertisement+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.pocketlearn": {
  	source: "iana",
  	extensions: [
  		"plf"
  	]
  },
  	"application/vnd.powerbuilder6": {
  	source: "iana",
  	extensions: [
  		"pbd"
  	]
  },
  	"application/vnd.powerbuilder6-s": {
  	source: "iana"
  },
  	"application/vnd.powerbuilder7": {
  	source: "iana"
  },
  	"application/vnd.powerbuilder7-s": {
  	source: "iana"
  },
  	"application/vnd.powerbuilder75": {
  	source: "iana"
  },
  	"application/vnd.powerbuilder75-s": {
  	source: "iana"
  },
  	"application/vnd.preminet": {
  	source: "iana"
  },
  	"application/vnd.previewsystems.box": {
  	source: "iana",
  	extensions: [
  		"box"
  	]
  },
  	"application/vnd.proteus.magazine": {
  	source: "iana",
  	extensions: [
  		"mgz"
  	]
  },
  	"application/vnd.psfs": {
  	source: "iana"
  },
  	"application/vnd.publishare-delta-tree": {
  	source: "iana",
  	extensions: [
  		"qps"
  	]
  },
  	"application/vnd.pvi.ptid1": {
  	source: "iana",
  	extensions: [
  		"ptid"
  	]
  },
  	"application/vnd.pwg-multiplexed": {
  	source: "iana"
  },
  	"application/vnd.pwg-xhtml-print+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.qualcomm.brew-app-res": {
  	source: "iana"
  },
  	"application/vnd.quarantainenet": {
  	source: "iana"
  },
  	"application/vnd.quark.quarkxpress": {
  	source: "iana",
  	extensions: [
  		"qxd",
  		"qxt",
  		"qwd",
  		"qwt",
  		"qxl",
  		"qxb"
  	]
  },
  	"application/vnd.quobject-quoxdocument": {
  	source: "iana"
  },
  	"application/vnd.radisys.moml+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.radisys.msml+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.radisys.msml-audit+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.radisys.msml-audit-conf+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.radisys.msml-audit-conn+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.radisys.msml-audit-dialog+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.radisys.msml-audit-stream+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.radisys.msml-conf+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.radisys.msml-dialog+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.radisys.msml-dialog-base+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.radisys.msml-dialog-fax-detect+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.radisys.msml-dialog-group+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.radisys.msml-dialog-speech+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.radisys.msml-dialog-transform+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.rainstor.data": {
  	source: "iana"
  },
  	"application/vnd.rapid": {
  	source: "iana"
  },
  	"application/vnd.rar": {
  	source: "iana",
  	extensions: [
  		"rar"
  	]
  },
  	"application/vnd.realvnc.bed": {
  	source: "iana",
  	extensions: [
  		"bed"
  	]
  },
  	"application/vnd.recordare.musicxml": {
  	source: "iana",
  	extensions: [
  		"mxl"
  	]
  },
  	"application/vnd.recordare.musicxml+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"musicxml"
  	]
  },
  	"application/vnd.renlearn.rlprint": {
  	source: "iana"
  },
  	"application/vnd.resilient.logic": {
  	source: "iana"
  },
  	"application/vnd.restful+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.rig.cryptonote": {
  	source: "iana",
  	extensions: [
  		"cryptonote"
  	]
  },
  	"application/vnd.rim.cod": {
  	source: "apache",
  	extensions: [
  		"cod"
  	]
  },
  	"application/vnd.rn-realmedia": {
  	source: "apache",
  	extensions: [
  		"rm"
  	]
  },
  	"application/vnd.rn-realmedia-vbr": {
  	source: "apache",
  	extensions: [
  		"rmvb"
  	]
  },
  	"application/vnd.route66.link66+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"link66"
  	]
  },
  	"application/vnd.rs-274x": {
  	source: "iana"
  },
  	"application/vnd.ruckus.download": {
  	source: "iana"
  },
  	"application/vnd.s3sms": {
  	source: "iana"
  },
  	"application/vnd.sailingtracker.track": {
  	source: "iana",
  	extensions: [
  		"st"
  	]
  },
  	"application/vnd.sar": {
  	source: "iana"
  },
  	"application/vnd.sbm.cid": {
  	source: "iana"
  },
  	"application/vnd.sbm.mid2": {
  	source: "iana"
  },
  	"application/vnd.scribus": {
  	source: "iana"
  },
  	"application/vnd.sealed.3df": {
  	source: "iana"
  },
  	"application/vnd.sealed.csf": {
  	source: "iana"
  },
  	"application/vnd.sealed.doc": {
  	source: "iana"
  },
  	"application/vnd.sealed.eml": {
  	source: "iana"
  },
  	"application/vnd.sealed.mht": {
  	source: "iana"
  },
  	"application/vnd.sealed.net": {
  	source: "iana"
  },
  	"application/vnd.sealed.ppt": {
  	source: "iana"
  },
  	"application/vnd.sealed.tiff": {
  	source: "iana"
  },
  	"application/vnd.sealed.xls": {
  	source: "iana"
  },
  	"application/vnd.sealedmedia.softseal.html": {
  	source: "iana"
  },
  	"application/vnd.sealedmedia.softseal.pdf": {
  	source: "iana"
  },
  	"application/vnd.seemail": {
  	source: "iana",
  	extensions: [
  		"see"
  	]
  },
  	"application/vnd.seis+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.sema": {
  	source: "iana",
  	extensions: [
  		"sema"
  	]
  },
  	"application/vnd.semd": {
  	source: "iana",
  	extensions: [
  		"semd"
  	]
  },
  	"application/vnd.semf": {
  	source: "iana",
  	extensions: [
  		"semf"
  	]
  },
  	"application/vnd.shade-save-file": {
  	source: "iana"
  },
  	"application/vnd.shana.informed.formdata": {
  	source: "iana",
  	extensions: [
  		"ifm"
  	]
  },
  	"application/vnd.shana.informed.formtemplate": {
  	source: "iana",
  	extensions: [
  		"itp"
  	]
  },
  	"application/vnd.shana.informed.interchange": {
  	source: "iana",
  	extensions: [
  		"iif"
  	]
  },
  	"application/vnd.shana.informed.package": {
  	source: "iana",
  	extensions: [
  		"ipk"
  	]
  },
  	"application/vnd.shootproof+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.shopkick+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.shp": {
  	source: "iana"
  },
  	"application/vnd.shx": {
  	source: "iana"
  },
  	"application/vnd.sigrok.session": {
  	source: "iana"
  },
  	"application/vnd.simtech-mindmapper": {
  	source: "iana",
  	extensions: [
  		"twd",
  		"twds"
  	]
  },
  	"application/vnd.siren+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.smaf": {
  	source: "iana",
  	extensions: [
  		"mmf"
  	]
  },
  	"application/vnd.smart.notebook": {
  	source: "iana"
  },
  	"application/vnd.smart.teacher": {
  	source: "iana",
  	extensions: [
  		"teacher"
  	]
  },
  	"application/vnd.snesdev-page-table": {
  	source: "iana"
  },
  	"application/vnd.software602.filler.form+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"fo"
  	]
  },
  	"application/vnd.software602.filler.form-xml-zip": {
  	source: "iana"
  },
  	"application/vnd.solent.sdkm+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"sdkm",
  		"sdkd"
  	]
  },
  	"application/vnd.spotfire.dxp": {
  	source: "iana",
  	extensions: [
  		"dxp"
  	]
  },
  	"application/vnd.spotfire.sfs": {
  	source: "iana",
  	extensions: [
  		"sfs"
  	]
  },
  	"application/vnd.sqlite3": {
  	source: "iana"
  },
  	"application/vnd.sss-cod": {
  	source: "iana"
  },
  	"application/vnd.sss-dtf": {
  	source: "iana"
  },
  	"application/vnd.sss-ntf": {
  	source: "iana"
  },
  	"application/vnd.stardivision.calc": {
  	source: "apache",
  	extensions: [
  		"sdc"
  	]
  },
  	"application/vnd.stardivision.draw": {
  	source: "apache",
  	extensions: [
  		"sda"
  	]
  },
  	"application/vnd.stardivision.impress": {
  	source: "apache",
  	extensions: [
  		"sdd"
  	]
  },
  	"application/vnd.stardivision.math": {
  	source: "apache",
  	extensions: [
  		"smf"
  	]
  },
  	"application/vnd.stardivision.writer": {
  	source: "apache",
  	extensions: [
  		"sdw",
  		"vor"
  	]
  },
  	"application/vnd.stardivision.writer-global": {
  	source: "apache",
  	extensions: [
  		"sgl"
  	]
  },
  	"application/vnd.stepmania.package": {
  	source: "iana",
  	extensions: [
  		"smzip"
  	]
  },
  	"application/vnd.stepmania.stepchart": {
  	source: "iana",
  	extensions: [
  		"sm"
  	]
  },
  	"application/vnd.street-stream": {
  	source: "iana"
  },
  	"application/vnd.sun.wadl+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"wadl"
  	]
  },
  	"application/vnd.sun.xml.calc": {
  	source: "apache",
  	extensions: [
  		"sxc"
  	]
  },
  	"application/vnd.sun.xml.calc.template": {
  	source: "apache",
  	extensions: [
  		"stc"
  	]
  },
  	"application/vnd.sun.xml.draw": {
  	source: "apache",
  	extensions: [
  		"sxd"
  	]
  },
  	"application/vnd.sun.xml.draw.template": {
  	source: "apache",
  	extensions: [
  		"std"
  	]
  },
  	"application/vnd.sun.xml.impress": {
  	source: "apache",
  	extensions: [
  		"sxi"
  	]
  },
  	"application/vnd.sun.xml.impress.template": {
  	source: "apache",
  	extensions: [
  		"sti"
  	]
  },
  	"application/vnd.sun.xml.math": {
  	source: "apache",
  	extensions: [
  		"sxm"
  	]
  },
  	"application/vnd.sun.xml.writer": {
  	source: "apache",
  	extensions: [
  		"sxw"
  	]
  },
  	"application/vnd.sun.xml.writer.global": {
  	source: "apache",
  	extensions: [
  		"sxg"
  	]
  },
  	"application/vnd.sun.xml.writer.template": {
  	source: "apache",
  	extensions: [
  		"stw"
  	]
  },
  	"application/vnd.sus-calendar": {
  	source: "iana",
  	extensions: [
  		"sus",
  		"susp"
  	]
  },
  	"application/vnd.svd": {
  	source: "iana",
  	extensions: [
  		"svd"
  	]
  },
  	"application/vnd.swiftview-ics": {
  	source: "iana"
  },
  	"application/vnd.sycle+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.syft+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.symbian.install": {
  	source: "apache",
  	extensions: [
  		"sis",
  		"sisx"
  	]
  },
  	"application/vnd.syncml+xml": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true,
  	extensions: [
  		"xsm"
  	]
  },
  	"application/vnd.syncml.dm+wbxml": {
  	source: "iana",
  	charset: "UTF-8",
  	extensions: [
  		"bdm"
  	]
  },
  	"application/vnd.syncml.dm+xml": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true,
  	extensions: [
  		"xdm"
  	]
  },
  	"application/vnd.syncml.dm.notification": {
  	source: "iana"
  },
  	"application/vnd.syncml.dmddf+wbxml": {
  	source: "iana"
  },
  	"application/vnd.syncml.dmddf+xml": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true,
  	extensions: [
  		"ddf"
  	]
  },
  	"application/vnd.syncml.dmtnds+wbxml": {
  	source: "iana"
  },
  	"application/vnd.syncml.dmtnds+xml": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true
  },
  	"application/vnd.syncml.ds.notification": {
  	source: "iana"
  },
  	"application/vnd.tableschema+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.tao.intent-module-archive": {
  	source: "iana",
  	extensions: [
  		"tao"
  	]
  },
  	"application/vnd.tcpdump.pcap": {
  	source: "iana",
  	extensions: [
  		"pcap",
  		"cap",
  		"dmp"
  	]
  },
  	"application/vnd.think-cell.ppttc+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.tmd.mediaflex.api+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.tml": {
  	source: "iana"
  },
  	"application/vnd.tmobile-livetv": {
  	source: "iana",
  	extensions: [
  		"tmo"
  	]
  },
  	"application/vnd.tri.onesource": {
  	source: "iana"
  },
  	"application/vnd.trid.tpt": {
  	source: "iana",
  	extensions: [
  		"tpt"
  	]
  },
  	"application/vnd.triscape.mxs": {
  	source: "iana",
  	extensions: [
  		"mxs"
  	]
  },
  	"application/vnd.trueapp": {
  	source: "iana",
  	extensions: [
  		"tra"
  	]
  },
  	"application/vnd.truedoc": {
  	source: "iana"
  },
  	"application/vnd.ubisoft.webplayer": {
  	source: "iana"
  },
  	"application/vnd.ufdl": {
  	source: "iana",
  	extensions: [
  		"ufd",
  		"ufdl"
  	]
  },
  	"application/vnd.uiq.theme": {
  	source: "iana",
  	extensions: [
  		"utz"
  	]
  },
  	"application/vnd.umajin": {
  	source: "iana",
  	extensions: [
  		"umj"
  	]
  },
  	"application/vnd.unity": {
  	source: "iana",
  	extensions: [
  		"unityweb"
  	]
  },
  	"application/vnd.uoml+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"uoml"
  	]
  },
  	"application/vnd.uplanet.alert": {
  	source: "iana"
  },
  	"application/vnd.uplanet.alert-wbxml": {
  	source: "iana"
  },
  	"application/vnd.uplanet.bearer-choice": {
  	source: "iana"
  },
  	"application/vnd.uplanet.bearer-choice-wbxml": {
  	source: "iana"
  },
  	"application/vnd.uplanet.cacheop": {
  	source: "iana"
  },
  	"application/vnd.uplanet.cacheop-wbxml": {
  	source: "iana"
  },
  	"application/vnd.uplanet.channel": {
  	source: "iana"
  },
  	"application/vnd.uplanet.channel-wbxml": {
  	source: "iana"
  },
  	"application/vnd.uplanet.list": {
  	source: "iana"
  },
  	"application/vnd.uplanet.list-wbxml": {
  	source: "iana"
  },
  	"application/vnd.uplanet.listcmd": {
  	source: "iana"
  },
  	"application/vnd.uplanet.listcmd-wbxml": {
  	source: "iana"
  },
  	"application/vnd.uplanet.signal": {
  	source: "iana"
  },
  	"application/vnd.uri-map": {
  	source: "iana"
  },
  	"application/vnd.valve.source.material": {
  	source: "iana"
  },
  	"application/vnd.vcx": {
  	source: "iana",
  	extensions: [
  		"vcx"
  	]
  },
  	"application/vnd.vd-study": {
  	source: "iana"
  },
  	"application/vnd.vectorworks": {
  	source: "iana"
  },
  	"application/vnd.vel+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.verimatrix.vcas": {
  	source: "iana"
  },
  	"application/vnd.veritone.aion+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.veryant.thin": {
  	source: "iana"
  },
  	"application/vnd.ves.encrypted": {
  	source: "iana"
  },
  	"application/vnd.vidsoft.vidconference": {
  	source: "iana"
  },
  	"application/vnd.visio": {
  	source: "iana",
  	extensions: [
  		"vsd",
  		"vst",
  		"vss",
  		"vsw"
  	]
  },
  	"application/vnd.visionary": {
  	source: "iana",
  	extensions: [
  		"vis"
  	]
  },
  	"application/vnd.vividence.scriptfile": {
  	source: "iana"
  },
  	"application/vnd.vsf": {
  	source: "iana",
  	extensions: [
  		"vsf"
  	]
  },
  	"application/vnd.wap.sic": {
  	source: "iana"
  },
  	"application/vnd.wap.slc": {
  	source: "iana"
  },
  	"application/vnd.wap.wbxml": {
  	source: "iana",
  	charset: "UTF-8",
  	extensions: [
  		"wbxml"
  	]
  },
  	"application/vnd.wap.wmlc": {
  	source: "iana",
  	extensions: [
  		"wmlc"
  	]
  },
  	"application/vnd.wap.wmlscriptc": {
  	source: "iana",
  	extensions: [
  		"wmlsc"
  	]
  },
  	"application/vnd.webturbo": {
  	source: "iana",
  	extensions: [
  		"wtb"
  	]
  },
  	"application/vnd.wfa.dpp": {
  	source: "iana"
  },
  	"application/vnd.wfa.p2p": {
  	source: "iana"
  },
  	"application/vnd.wfa.wsc": {
  	source: "iana"
  },
  	"application/vnd.windows.devicepairing": {
  	source: "iana"
  },
  	"application/vnd.wmc": {
  	source: "iana"
  },
  	"application/vnd.wmf.bootstrap": {
  	source: "iana"
  },
  	"application/vnd.wolfram.mathematica": {
  	source: "iana"
  },
  	"application/vnd.wolfram.mathematica.package": {
  	source: "iana"
  },
  	"application/vnd.wolfram.player": {
  	source: "iana",
  	extensions: [
  		"nbp"
  	]
  },
  	"application/vnd.wordperfect": {
  	source: "iana",
  	extensions: [
  		"wpd"
  	]
  },
  	"application/vnd.wqd": {
  	source: "iana",
  	extensions: [
  		"wqd"
  	]
  },
  	"application/vnd.wrq-hp3000-labelled": {
  	source: "iana"
  },
  	"application/vnd.wt.stf": {
  	source: "iana",
  	extensions: [
  		"stf"
  	]
  },
  	"application/vnd.wv.csp+wbxml": {
  	source: "iana"
  },
  	"application/vnd.wv.csp+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.wv.ssp+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.xacml+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.xara": {
  	source: "iana",
  	extensions: [
  		"xar"
  	]
  },
  	"application/vnd.xfdl": {
  	source: "iana",
  	extensions: [
  		"xfdl"
  	]
  },
  	"application/vnd.xfdl.webform": {
  	source: "iana"
  },
  	"application/vnd.xmi+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.xmpie.cpkg": {
  	source: "iana"
  },
  	"application/vnd.xmpie.dpkg": {
  	source: "iana"
  },
  	"application/vnd.xmpie.plan": {
  	source: "iana"
  },
  	"application/vnd.xmpie.ppkg": {
  	source: "iana"
  },
  	"application/vnd.xmpie.xlim": {
  	source: "iana"
  },
  	"application/vnd.yamaha.hv-dic": {
  	source: "iana",
  	extensions: [
  		"hvd"
  	]
  },
  	"application/vnd.yamaha.hv-script": {
  	source: "iana",
  	extensions: [
  		"hvs"
  	]
  },
  	"application/vnd.yamaha.hv-voice": {
  	source: "iana",
  	extensions: [
  		"hvp"
  	]
  },
  	"application/vnd.yamaha.openscoreformat": {
  	source: "iana",
  	extensions: [
  		"osf"
  	]
  },
  	"application/vnd.yamaha.openscoreformat.osfpvg+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"osfpvg"
  	]
  },
  	"application/vnd.yamaha.remote-setup": {
  	source: "iana"
  },
  	"application/vnd.yamaha.smaf-audio": {
  	source: "iana",
  	extensions: [
  		"saf"
  	]
  },
  	"application/vnd.yamaha.smaf-phrase": {
  	source: "iana",
  	extensions: [
  		"spf"
  	]
  },
  	"application/vnd.yamaha.through-ngn": {
  	source: "iana"
  },
  	"application/vnd.yamaha.tunnel-udpencap": {
  	source: "iana"
  },
  	"application/vnd.yaoweme": {
  	source: "iana"
  },
  	"application/vnd.yellowriver-custom-menu": {
  	source: "iana",
  	extensions: [
  		"cmp"
  	]
  },
  	"application/vnd.youtube.yt": {
  	source: "iana"
  },
  	"application/vnd.zul": {
  	source: "iana",
  	extensions: [
  		"zir",
  		"zirz"
  	]
  },
  	"application/vnd.zzazz.deck+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"zaz"
  	]
  },
  	"application/voicexml+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"vxml"
  	]
  },
  	"application/voucher-cms+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vq-rtcpxr": {
  	source: "iana"
  },
  	"application/wasm": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"wasm"
  	]
  },
  	"application/watcherinfo+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"wif"
  	]
  },
  	"application/webpush-options+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/whoispp-query": {
  	source: "iana"
  },
  	"application/whoispp-response": {
  	source: "iana"
  },
  	"application/widget": {
  	source: "iana",
  	extensions: [
  		"wgt"
  	]
  },
  	"application/winhlp": {
  	source: "apache",
  	extensions: [
  		"hlp"
  	]
  },
  	"application/wita": {
  	source: "iana"
  },
  	"application/wordperfect5.1": {
  	source: "iana"
  },
  	"application/wsdl+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"wsdl"
  	]
  },
  	"application/wspolicy+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"wspolicy"
  	]
  },
  	"application/x-7z-compressed": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"7z"
  	]
  },
  	"application/x-abiword": {
  	source: "apache",
  	extensions: [
  		"abw"
  	]
  },
  	"application/x-ace-compressed": {
  	source: "apache",
  	extensions: [
  		"ace"
  	]
  },
  	"application/x-amf": {
  	source: "apache"
  },
  	"application/x-apple-diskimage": {
  	source: "apache",
  	extensions: [
  		"dmg"
  	]
  },
  	"application/x-arj": {
  	compressible: false,
  	extensions: [
  		"arj"
  	]
  },
  	"application/x-authorware-bin": {
  	source: "apache",
  	extensions: [
  		"aab",
  		"x32",
  		"u32",
  		"vox"
  	]
  },
  	"application/x-authorware-map": {
  	source: "apache",
  	extensions: [
  		"aam"
  	]
  },
  	"application/x-authorware-seg": {
  	source: "apache",
  	extensions: [
  		"aas"
  	]
  },
  	"application/x-bcpio": {
  	source: "apache",
  	extensions: [
  		"bcpio"
  	]
  },
  	"application/x-bdoc": {
  	compressible: false,
  	extensions: [
  		"bdoc"
  	]
  },
  	"application/x-bittorrent": {
  	source: "apache",
  	extensions: [
  		"torrent"
  	]
  },
  	"application/x-blorb": {
  	source: "apache",
  	extensions: [
  		"blb",
  		"blorb"
  	]
  },
  	"application/x-bzip": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"bz"
  	]
  },
  	"application/x-bzip2": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"bz2",
  		"boz"
  	]
  },
  	"application/x-cbr": {
  	source: "apache",
  	extensions: [
  		"cbr",
  		"cba",
  		"cbt",
  		"cbz",
  		"cb7"
  	]
  },
  	"application/x-cdlink": {
  	source: "apache",
  	extensions: [
  		"vcd"
  	]
  },
  	"application/x-cfs-compressed": {
  	source: "apache",
  	extensions: [
  		"cfs"
  	]
  },
  	"application/x-chat": {
  	source: "apache",
  	extensions: [
  		"chat"
  	]
  },
  	"application/x-chess-pgn": {
  	source: "apache",
  	extensions: [
  		"pgn"
  	]
  },
  	"application/x-chrome-extension": {
  	extensions: [
  		"crx"
  	]
  },
  	"application/x-cocoa": {
  	source: "nginx",
  	extensions: [
  		"cco"
  	]
  },
  	"application/x-compress": {
  	source: "apache"
  },
  	"application/x-conference": {
  	source: "apache",
  	extensions: [
  		"nsc"
  	]
  },
  	"application/x-cpio": {
  	source: "apache",
  	extensions: [
  		"cpio"
  	]
  },
  	"application/x-csh": {
  	source: "apache",
  	extensions: [
  		"csh"
  	]
  },
  	"application/x-deb": {
  	compressible: false
  },
  	"application/x-debian-package": {
  	source: "apache",
  	extensions: [
  		"deb",
  		"udeb"
  	]
  },
  	"application/x-dgc-compressed": {
  	source: "apache",
  	extensions: [
  		"dgc"
  	]
  },
  	"application/x-director": {
  	source: "apache",
  	extensions: [
  		"dir",
  		"dcr",
  		"dxr",
  		"cst",
  		"cct",
  		"cxt",
  		"w3d",
  		"fgd",
  		"swa"
  	]
  },
  	"application/x-doom": {
  	source: "apache",
  	extensions: [
  		"wad"
  	]
  },
  	"application/x-dtbncx+xml": {
  	source: "apache",
  	compressible: true,
  	extensions: [
  		"ncx"
  	]
  },
  	"application/x-dtbook+xml": {
  	source: "apache",
  	compressible: true,
  	extensions: [
  		"dtb"
  	]
  },
  	"application/x-dtbresource+xml": {
  	source: "apache",
  	compressible: true,
  	extensions: [
  		"res"
  	]
  },
  	"application/x-dvi": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"dvi"
  	]
  },
  	"application/x-envoy": {
  	source: "apache",
  	extensions: [
  		"evy"
  	]
  },
  	"application/x-eva": {
  	source: "apache",
  	extensions: [
  		"eva"
  	]
  },
  	"application/x-font-bdf": {
  	source: "apache",
  	extensions: [
  		"bdf"
  	]
  },
  	"application/x-font-dos": {
  	source: "apache"
  },
  	"application/x-font-framemaker": {
  	source: "apache"
  },
  	"application/x-font-ghostscript": {
  	source: "apache",
  	extensions: [
  		"gsf"
  	]
  },
  	"application/x-font-libgrx": {
  	source: "apache"
  },
  	"application/x-font-linux-psf": {
  	source: "apache",
  	extensions: [
  		"psf"
  	]
  },
  	"application/x-font-pcf": {
  	source: "apache",
  	extensions: [
  		"pcf"
  	]
  },
  	"application/x-font-snf": {
  	source: "apache",
  	extensions: [
  		"snf"
  	]
  },
  	"application/x-font-speedo": {
  	source: "apache"
  },
  	"application/x-font-sunos-news": {
  	source: "apache"
  },
  	"application/x-font-type1": {
  	source: "apache",
  	extensions: [
  		"pfa",
  		"pfb",
  		"pfm",
  		"afm"
  	]
  },
  	"application/x-font-vfont": {
  	source: "apache"
  },
  	"application/x-freearc": {
  	source: "apache",
  	extensions: [
  		"arc"
  	]
  },
  	"application/x-futuresplash": {
  	source: "apache",
  	extensions: [
  		"spl"
  	]
  },
  	"application/x-gca-compressed": {
  	source: "apache",
  	extensions: [
  		"gca"
  	]
  },
  	"application/x-glulx": {
  	source: "apache",
  	extensions: [
  		"ulx"
  	]
  },
  	"application/x-gnumeric": {
  	source: "apache",
  	extensions: [
  		"gnumeric"
  	]
  },
  	"application/x-gramps-xml": {
  	source: "apache",
  	extensions: [
  		"gramps"
  	]
  },
  	"application/x-gtar": {
  	source: "apache",
  	extensions: [
  		"gtar"
  	]
  },
  	"application/x-gzip": {
  	source: "apache"
  },
  	"application/x-hdf": {
  	source: "apache",
  	extensions: [
  		"hdf"
  	]
  },
  	"application/x-httpd-php": {
  	compressible: true,
  	extensions: [
  		"php"
  	]
  },
  	"application/x-install-instructions": {
  	source: "apache",
  	extensions: [
  		"install"
  	]
  },
  	"application/x-iso9660-image": {
  	source: "apache",
  	extensions: [
  		"iso"
  	]
  },
  	"application/x-iwork-keynote-sffkey": {
  	extensions: [
  		"key"
  	]
  },
  	"application/x-iwork-numbers-sffnumbers": {
  	extensions: [
  		"numbers"
  	]
  },
  	"application/x-iwork-pages-sffpages": {
  	extensions: [
  		"pages"
  	]
  },
  	"application/x-java-archive-diff": {
  	source: "nginx",
  	extensions: [
  		"jardiff"
  	]
  },
  	"application/x-java-jnlp-file": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"jnlp"
  	]
  },
  	"application/x-javascript": {
  	compressible: true
  },
  	"application/x-keepass2": {
  	extensions: [
  		"kdbx"
  	]
  },
  	"application/x-latex": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"latex"
  	]
  },
  	"application/x-lua-bytecode": {
  	extensions: [
  		"luac"
  	]
  },
  	"application/x-lzh-compressed": {
  	source: "apache",
  	extensions: [
  		"lzh",
  		"lha"
  	]
  },
  	"application/x-makeself": {
  	source: "nginx",
  	extensions: [
  		"run"
  	]
  },
  	"application/x-mie": {
  	source: "apache",
  	extensions: [
  		"mie"
  	]
  },
  	"application/x-mobipocket-ebook": {
  	source: "apache",
  	extensions: [
  		"prc",
  		"mobi"
  	]
  },
  	"application/x-mpegurl": {
  	compressible: false
  },
  	"application/x-ms-application": {
  	source: "apache",
  	extensions: [
  		"application"
  	]
  },
  	"application/x-ms-shortcut": {
  	source: "apache",
  	extensions: [
  		"lnk"
  	]
  },
  	"application/x-ms-wmd": {
  	source: "apache",
  	extensions: [
  		"wmd"
  	]
  },
  	"application/x-ms-wmz": {
  	source: "apache",
  	extensions: [
  		"wmz"
  	]
  },
  	"application/x-ms-xbap": {
  	source: "apache",
  	extensions: [
  		"xbap"
  	]
  },
  	"application/x-msaccess": {
  	source: "apache",
  	extensions: [
  		"mdb"
  	]
  },
  	"application/x-msbinder": {
  	source: "apache",
  	extensions: [
  		"obd"
  	]
  },
  	"application/x-mscardfile": {
  	source: "apache",
  	extensions: [
  		"crd"
  	]
  },
  	"application/x-msclip": {
  	source: "apache",
  	extensions: [
  		"clp"
  	]
  },
  	"application/x-msdos-program": {
  	extensions: [
  		"exe"
  	]
  },
  	"application/x-msdownload": {
  	source: "apache",
  	extensions: [
  		"exe",
  		"dll",
  		"com",
  		"bat",
  		"msi"
  	]
  },
  	"application/x-msmediaview": {
  	source: "apache",
  	extensions: [
  		"mvb",
  		"m13",
  		"m14"
  	]
  },
  	"application/x-msmetafile": {
  	source: "apache",
  	extensions: [
  		"wmf",
  		"wmz",
  		"emf",
  		"emz"
  	]
  },
  	"application/x-msmoney": {
  	source: "apache",
  	extensions: [
  		"mny"
  	]
  },
  	"application/x-mspublisher": {
  	source: "apache",
  	extensions: [
  		"pub"
  	]
  },
  	"application/x-msschedule": {
  	source: "apache",
  	extensions: [
  		"scd"
  	]
  },
  	"application/x-msterminal": {
  	source: "apache",
  	extensions: [
  		"trm"
  	]
  },
  	"application/x-mswrite": {
  	source: "apache",
  	extensions: [
  		"wri"
  	]
  },
  	"application/x-netcdf": {
  	source: "apache",
  	extensions: [
  		"nc",
  		"cdf"
  	]
  },
  	"application/x-ns-proxy-autoconfig": {
  	compressible: true,
  	extensions: [
  		"pac"
  	]
  },
  	"application/x-nzb": {
  	source: "apache",
  	extensions: [
  		"nzb"
  	]
  },
  	"application/x-perl": {
  	source: "nginx",
  	extensions: [
  		"pl",
  		"pm"
  	]
  },
  	"application/x-pilot": {
  	source: "nginx",
  	extensions: [
  		"prc",
  		"pdb"
  	]
  },
  	"application/x-pkcs12": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"p12",
  		"pfx"
  	]
  },
  	"application/x-pkcs7-certificates": {
  	source: "apache",
  	extensions: [
  		"p7b",
  		"spc"
  	]
  },
  	"application/x-pkcs7-certreqresp": {
  	source: "apache",
  	extensions: [
  		"p7r"
  	]
  },
  	"application/x-pki-message": {
  	source: "iana"
  },
  	"application/x-rar-compressed": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"rar"
  	]
  },
  	"application/x-redhat-package-manager": {
  	source: "nginx",
  	extensions: [
  		"rpm"
  	]
  },
  	"application/x-research-info-systems": {
  	source: "apache",
  	extensions: [
  		"ris"
  	]
  },
  	"application/x-sea": {
  	source: "nginx",
  	extensions: [
  		"sea"
  	]
  },
  	"application/x-sh": {
  	source: "apache",
  	compressible: true,
  	extensions: [
  		"sh"
  	]
  },
  	"application/x-shar": {
  	source: "apache",
  	extensions: [
  		"shar"
  	]
  },
  	"application/x-shockwave-flash": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"swf"
  	]
  },
  	"application/x-silverlight-app": {
  	source: "apache",
  	extensions: [
  		"xap"
  	]
  },
  	"application/x-sql": {
  	source: "apache",
  	extensions: [
  		"sql"
  	]
  },
  	"application/x-stuffit": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"sit"
  	]
  },
  	"application/x-stuffitx": {
  	source: "apache",
  	extensions: [
  		"sitx"
  	]
  },
  	"application/x-subrip": {
  	source: "apache",
  	extensions: [
  		"srt"
  	]
  },
  	"application/x-sv4cpio": {
  	source: "apache",
  	extensions: [
  		"sv4cpio"
  	]
  },
  	"application/x-sv4crc": {
  	source: "apache",
  	extensions: [
  		"sv4crc"
  	]
  },
  	"application/x-t3vm-image": {
  	source: "apache",
  	extensions: [
  		"t3"
  	]
  },
  	"application/x-tads": {
  	source: "apache",
  	extensions: [
  		"gam"
  	]
  },
  	"application/x-tar": {
  	source: "apache",
  	compressible: true,
  	extensions: [
  		"tar"
  	]
  },
  	"application/x-tcl": {
  	source: "apache",
  	extensions: [
  		"tcl",
  		"tk"
  	]
  },
  	"application/x-tex": {
  	source: "apache",
  	extensions: [
  		"tex"
  	]
  },
  	"application/x-tex-tfm": {
  	source: "apache",
  	extensions: [
  		"tfm"
  	]
  },
  	"application/x-texinfo": {
  	source: "apache",
  	extensions: [
  		"texinfo",
  		"texi"
  	]
  },
  	"application/x-tgif": {
  	source: "apache",
  	extensions: [
  		"obj"
  	]
  },
  	"application/x-ustar": {
  	source: "apache",
  	extensions: [
  		"ustar"
  	]
  },
  	"application/x-virtualbox-hdd": {
  	compressible: true,
  	extensions: [
  		"hdd"
  	]
  },
  	"application/x-virtualbox-ova": {
  	compressible: true,
  	extensions: [
  		"ova"
  	]
  },
  	"application/x-virtualbox-ovf": {
  	compressible: true,
  	extensions: [
  		"ovf"
  	]
  },
  	"application/x-virtualbox-vbox": {
  	compressible: true,
  	extensions: [
  		"vbox"
  	]
  },
  	"application/x-virtualbox-vbox-extpack": {
  	compressible: false,
  	extensions: [
  		"vbox-extpack"
  	]
  },
  	"application/x-virtualbox-vdi": {
  	compressible: true,
  	extensions: [
  		"vdi"
  	]
  },
  	"application/x-virtualbox-vhd": {
  	compressible: true,
  	extensions: [
  		"vhd"
  	]
  },
  	"application/x-virtualbox-vmdk": {
  	compressible: true,
  	extensions: [
  		"vmdk"
  	]
  },
  	"application/x-wais-source": {
  	source: "apache",
  	extensions: [
  		"src"
  	]
  },
  	"application/x-web-app-manifest+json": {
  	compressible: true,
  	extensions: [
  		"webapp"
  	]
  },
  	"application/x-www-form-urlencoded": {
  	source: "iana",
  	compressible: true
  },
  	"application/x-x509-ca-cert": {
  	source: "iana",
  	extensions: [
  		"der",
  		"crt",
  		"pem"
  	]
  },
  	"application/x-x509-ca-ra-cert": {
  	source: "iana"
  },
  	"application/x-x509-next-ca-cert": {
  	source: "iana"
  },
  	"application/x-xfig": {
  	source: "apache",
  	extensions: [
  		"fig"
  	]
  },
  	"application/x-xliff+xml": {
  	source: "apache",
  	compressible: true,
  	extensions: [
  		"xlf"
  	]
  },
  	"application/x-xpinstall": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"xpi"
  	]
  },
  	"application/x-xz": {
  	source: "apache",
  	extensions: [
  		"xz"
  	]
  },
  	"application/x-zmachine": {
  	source: "apache",
  	extensions: [
  		"z1",
  		"z2",
  		"z3",
  		"z4",
  		"z5",
  		"z6",
  		"z7",
  		"z8"
  	]
  },
  	"application/x400-bp": {
  	source: "iana"
  },
  	"application/xacml+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/xaml+xml": {
  	source: "apache",
  	compressible: true,
  	extensions: [
  		"xaml"
  	]
  },
  	"application/xcap-att+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"xav"
  	]
  },
  	"application/xcap-caps+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"xca"
  	]
  },
  	"application/xcap-diff+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"xdf"
  	]
  },
  	"application/xcap-el+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"xel"
  	]
  },
  	"application/xcap-error+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/xcap-ns+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"xns"
  	]
  },
  	"application/xcon-conference-info+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/xcon-conference-info-diff+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/xenc+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"xenc"
  	]
  },
  	"application/xhtml+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"xhtml",
  		"xht"
  	]
  },
  	"application/xhtml-voice+xml": {
  	source: "apache",
  	compressible: true
  },
  	"application/xliff+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"xlf"
  	]
  },
  	"application/xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"xml",
  		"xsl",
  		"xsd",
  		"rng"
  	]
  },
  	"application/xml-dtd": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"dtd"
  	]
  },
  	"application/xml-external-parsed-entity": {
  	source: "iana"
  },
  	"application/xml-patch+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/xmpp+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/xop+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"xop"
  	]
  },
  	"application/xproc+xml": {
  	source: "apache",
  	compressible: true,
  	extensions: [
  		"xpl"
  	]
  },
  	"application/xslt+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"xsl",
  		"xslt"
  	]
  },
  	"application/xspf+xml": {
  	source: "apache",
  	compressible: true,
  	extensions: [
  		"xspf"
  	]
  },
  	"application/xv+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"mxml",
  		"xhvml",
  		"xvml",
  		"xvm"
  	]
  },
  	"application/yang": {
  	source: "iana",
  	extensions: [
  		"yang"
  	]
  },
  	"application/yang-data+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/yang-data+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/yang-patch+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/yang-patch+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/yin+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"yin"
  	]
  },
  	"application/zip": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"zip"
  	]
  },
  	"application/zlib": {
  	source: "iana"
  },
  	"application/zstd": {
  	source: "iana"
  },
  	"audio/1d-interleaved-parityfec": {
  	source: "iana"
  },
  	"audio/32kadpcm": {
  	source: "iana"
  },
  	"audio/3gpp": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"3gpp"
  	]
  },
  	"audio/3gpp2": {
  	source: "iana"
  },
  	"audio/aac": {
  	source: "iana"
  },
  	"audio/ac3": {
  	source: "iana"
  },
  	"audio/adpcm": {
  	source: "apache",
  	extensions: [
  		"adp"
  	]
  },
  	"audio/amr": {
  	source: "iana",
  	extensions: [
  		"amr"
  	]
  },
  	"audio/amr-wb": {
  	source: "iana"
  },
  	"audio/amr-wb+": {
  	source: "iana"
  },
  	"audio/aptx": {
  	source: "iana"
  },
  	"audio/asc": {
  	source: "iana"
  },
  	"audio/atrac-advanced-lossless": {
  	source: "iana"
  },
  	"audio/atrac-x": {
  	source: "iana"
  },
  	"audio/atrac3": {
  	source: "iana"
  },
  	"audio/basic": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"au",
  		"snd"
  	]
  },
  	"audio/bv16": {
  	source: "iana"
  },
  	"audio/bv32": {
  	source: "iana"
  },
  	"audio/clearmode": {
  	source: "iana"
  },
  	"audio/cn": {
  	source: "iana"
  },
  	"audio/dat12": {
  	source: "iana"
  },
  	"audio/dls": {
  	source: "iana"
  },
  	"audio/dsr-es201108": {
  	source: "iana"
  },
  	"audio/dsr-es202050": {
  	source: "iana"
  },
  	"audio/dsr-es202211": {
  	source: "iana"
  },
  	"audio/dsr-es202212": {
  	source: "iana"
  },
  	"audio/dv": {
  	source: "iana"
  },
  	"audio/dvi4": {
  	source: "iana"
  },
  	"audio/eac3": {
  	source: "iana"
  },
  	"audio/encaprtp": {
  	source: "iana"
  },
  	"audio/evrc": {
  	source: "iana"
  },
  	"audio/evrc-qcp": {
  	source: "iana"
  },
  	"audio/evrc0": {
  	source: "iana"
  },
  	"audio/evrc1": {
  	source: "iana"
  },
  	"audio/evrcb": {
  	source: "iana"
  },
  	"audio/evrcb0": {
  	source: "iana"
  },
  	"audio/evrcb1": {
  	source: "iana"
  },
  	"audio/evrcnw": {
  	source: "iana"
  },
  	"audio/evrcnw0": {
  	source: "iana"
  },
  	"audio/evrcnw1": {
  	source: "iana"
  },
  	"audio/evrcwb": {
  	source: "iana"
  },
  	"audio/evrcwb0": {
  	source: "iana"
  },
  	"audio/evrcwb1": {
  	source: "iana"
  },
  	"audio/evs": {
  	source: "iana"
  },
  	"audio/flexfec": {
  	source: "iana"
  },
  	"audio/fwdred": {
  	source: "iana"
  },
  	"audio/g711-0": {
  	source: "iana"
  },
  	"audio/g719": {
  	source: "iana"
  },
  	"audio/g722": {
  	source: "iana"
  },
  	"audio/g7221": {
  	source: "iana"
  },
  	"audio/g723": {
  	source: "iana"
  },
  	"audio/g726-16": {
  	source: "iana"
  },
  	"audio/g726-24": {
  	source: "iana"
  },
  	"audio/g726-32": {
  	source: "iana"
  },
  	"audio/g726-40": {
  	source: "iana"
  },
  	"audio/g728": {
  	source: "iana"
  },
  	"audio/g729": {
  	source: "iana"
  },
  	"audio/g7291": {
  	source: "iana"
  },
  	"audio/g729d": {
  	source: "iana"
  },
  	"audio/g729e": {
  	source: "iana"
  },
  	"audio/gsm": {
  	source: "iana"
  },
  	"audio/gsm-efr": {
  	source: "iana"
  },
  	"audio/gsm-hr-08": {
  	source: "iana"
  },
  	"audio/ilbc": {
  	source: "iana"
  },
  	"audio/ip-mr_v2.5": {
  	source: "iana"
  },
  	"audio/isac": {
  	source: "apache"
  },
  	"audio/l16": {
  	source: "iana"
  },
  	"audio/l20": {
  	source: "iana"
  },
  	"audio/l24": {
  	source: "iana",
  	compressible: false
  },
  	"audio/l8": {
  	source: "iana"
  },
  	"audio/lpc": {
  	source: "iana"
  },
  	"audio/melp": {
  	source: "iana"
  },
  	"audio/melp1200": {
  	source: "iana"
  },
  	"audio/melp2400": {
  	source: "iana"
  },
  	"audio/melp600": {
  	source: "iana"
  },
  	"audio/mhas": {
  	source: "iana"
  },
  	"audio/midi": {
  	source: "apache",
  	extensions: [
  		"mid",
  		"midi",
  		"kar",
  		"rmi"
  	]
  },
  	"audio/mobile-xmf": {
  	source: "iana",
  	extensions: [
  		"mxmf"
  	]
  },
  	"audio/mp3": {
  	compressible: false,
  	extensions: [
  		"mp3"
  	]
  },
  	"audio/mp4": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"m4a",
  		"mp4a"
  	]
  },
  	"audio/mp4a-latm": {
  	source: "iana"
  },
  	"audio/mpa": {
  	source: "iana"
  },
  	"audio/mpa-robust": {
  	source: "iana"
  },
  	"audio/mpeg": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"mpga",
  		"mp2",
  		"mp2a",
  		"mp3",
  		"m2a",
  		"m3a"
  	]
  },
  	"audio/mpeg4-generic": {
  	source: "iana"
  },
  	"audio/musepack": {
  	source: "apache"
  },
  	"audio/ogg": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"oga",
  		"ogg",
  		"spx",
  		"opus"
  	]
  },
  	"audio/opus": {
  	source: "iana"
  },
  	"audio/parityfec": {
  	source: "iana"
  },
  	"audio/pcma": {
  	source: "iana"
  },
  	"audio/pcma-wb": {
  	source: "iana"
  },
  	"audio/pcmu": {
  	source: "iana"
  },
  	"audio/pcmu-wb": {
  	source: "iana"
  },
  	"audio/prs.sid": {
  	source: "iana"
  },
  	"audio/qcelp": {
  	source: "iana"
  },
  	"audio/raptorfec": {
  	source: "iana"
  },
  	"audio/red": {
  	source: "iana"
  },
  	"audio/rtp-enc-aescm128": {
  	source: "iana"
  },
  	"audio/rtp-midi": {
  	source: "iana"
  },
  	"audio/rtploopback": {
  	source: "iana"
  },
  	"audio/rtx": {
  	source: "iana"
  },
  	"audio/s3m": {
  	source: "apache",
  	extensions: [
  		"s3m"
  	]
  },
  	"audio/scip": {
  	source: "iana"
  },
  	"audio/silk": {
  	source: "apache",
  	extensions: [
  		"sil"
  	]
  },
  	"audio/smv": {
  	source: "iana"
  },
  	"audio/smv-qcp": {
  	source: "iana"
  },
  	"audio/smv0": {
  	source: "iana"
  },
  	"audio/sofa": {
  	source: "iana"
  },
  	"audio/sp-midi": {
  	source: "iana"
  },
  	"audio/speex": {
  	source: "iana"
  },
  	"audio/t140c": {
  	source: "iana"
  },
  	"audio/t38": {
  	source: "iana"
  },
  	"audio/telephone-event": {
  	source: "iana"
  },
  	"audio/tetra_acelp": {
  	source: "iana"
  },
  	"audio/tetra_acelp_bb": {
  	source: "iana"
  },
  	"audio/tone": {
  	source: "iana"
  },
  	"audio/tsvcis": {
  	source: "iana"
  },
  	"audio/uemclip": {
  	source: "iana"
  },
  	"audio/ulpfec": {
  	source: "iana"
  },
  	"audio/usac": {
  	source: "iana"
  },
  	"audio/vdvi": {
  	source: "iana"
  },
  	"audio/vmr-wb": {
  	source: "iana"
  },
  	"audio/vnd.3gpp.iufp": {
  	source: "iana"
  },
  	"audio/vnd.4sb": {
  	source: "iana"
  },
  	"audio/vnd.audiokoz": {
  	source: "iana"
  },
  	"audio/vnd.celp": {
  	source: "iana"
  },
  	"audio/vnd.cisco.nse": {
  	source: "iana"
  },
  	"audio/vnd.cmles.radio-events": {
  	source: "iana"
  },
  	"audio/vnd.cns.anp1": {
  	source: "iana"
  },
  	"audio/vnd.cns.inf1": {
  	source: "iana"
  },
  	"audio/vnd.dece.audio": {
  	source: "iana",
  	extensions: [
  		"uva",
  		"uvva"
  	]
  },
  	"audio/vnd.digital-winds": {
  	source: "iana",
  	extensions: [
  		"eol"
  	]
  },
  	"audio/vnd.dlna.adts": {
  	source: "iana"
  },
  	"audio/vnd.dolby.heaac.1": {
  	source: "iana"
  },
  	"audio/vnd.dolby.heaac.2": {
  	source: "iana"
  },
  	"audio/vnd.dolby.mlp": {
  	source: "iana"
  },
  	"audio/vnd.dolby.mps": {
  	source: "iana"
  },
  	"audio/vnd.dolby.pl2": {
  	source: "iana"
  },
  	"audio/vnd.dolby.pl2x": {
  	source: "iana"
  },
  	"audio/vnd.dolby.pl2z": {
  	source: "iana"
  },
  	"audio/vnd.dolby.pulse.1": {
  	source: "iana"
  },
  	"audio/vnd.dra": {
  	source: "iana",
  	extensions: [
  		"dra"
  	]
  },
  	"audio/vnd.dts": {
  	source: "iana",
  	extensions: [
  		"dts"
  	]
  },
  	"audio/vnd.dts.hd": {
  	source: "iana",
  	extensions: [
  		"dtshd"
  	]
  },
  	"audio/vnd.dts.uhd": {
  	source: "iana"
  },
  	"audio/vnd.dvb.file": {
  	source: "iana"
  },
  	"audio/vnd.everad.plj": {
  	source: "iana"
  },
  	"audio/vnd.hns.audio": {
  	source: "iana"
  },
  	"audio/vnd.lucent.voice": {
  	source: "iana",
  	extensions: [
  		"lvp"
  	]
  },
  	"audio/vnd.ms-playready.media.pya": {
  	source: "iana",
  	extensions: [
  		"pya"
  	]
  },
  	"audio/vnd.nokia.mobile-xmf": {
  	source: "iana"
  },
  	"audio/vnd.nortel.vbk": {
  	source: "iana"
  },
  	"audio/vnd.nuera.ecelp4800": {
  	source: "iana",
  	extensions: [
  		"ecelp4800"
  	]
  },
  	"audio/vnd.nuera.ecelp7470": {
  	source: "iana",
  	extensions: [
  		"ecelp7470"
  	]
  },
  	"audio/vnd.nuera.ecelp9600": {
  	source: "iana",
  	extensions: [
  		"ecelp9600"
  	]
  },
  	"audio/vnd.octel.sbc": {
  	source: "iana"
  },
  	"audio/vnd.presonus.multitrack": {
  	source: "iana"
  },
  	"audio/vnd.qcelp": {
  	source: "iana"
  },
  	"audio/vnd.rhetorex.32kadpcm": {
  	source: "iana"
  },
  	"audio/vnd.rip": {
  	source: "iana",
  	extensions: [
  		"rip"
  	]
  },
  	"audio/vnd.rn-realaudio": {
  	compressible: false
  },
  	"audio/vnd.sealedmedia.softseal.mpeg": {
  	source: "iana"
  },
  	"audio/vnd.vmx.cvsd": {
  	source: "iana"
  },
  	"audio/vnd.wave": {
  	compressible: false
  },
  	"audio/vorbis": {
  	source: "iana",
  	compressible: false
  },
  	"audio/vorbis-config": {
  	source: "iana"
  },
  	"audio/wav": {
  	compressible: false,
  	extensions: [
  		"wav"
  	]
  },
  	"audio/wave": {
  	compressible: false,
  	extensions: [
  		"wav"
  	]
  },
  	"audio/webm": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"weba"
  	]
  },
  	"audio/x-aac": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"aac"
  	]
  },
  	"audio/x-aiff": {
  	source: "apache",
  	extensions: [
  		"aif",
  		"aiff",
  		"aifc"
  	]
  },
  	"audio/x-caf": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"caf"
  	]
  },
  	"audio/x-flac": {
  	source: "apache",
  	extensions: [
  		"flac"
  	]
  },
  	"audio/x-m4a": {
  	source: "nginx",
  	extensions: [
  		"m4a"
  	]
  },
  	"audio/x-matroska": {
  	source: "apache",
  	extensions: [
  		"mka"
  	]
  },
  	"audio/x-mpegurl": {
  	source: "apache",
  	extensions: [
  		"m3u"
  	]
  },
  	"audio/x-ms-wax": {
  	source: "apache",
  	extensions: [
  		"wax"
  	]
  },
  	"audio/x-ms-wma": {
  	source: "apache",
  	extensions: [
  		"wma"
  	]
  },
  	"audio/x-pn-realaudio": {
  	source: "apache",
  	extensions: [
  		"ram",
  		"ra"
  	]
  },
  	"audio/x-pn-realaudio-plugin": {
  	source: "apache",
  	extensions: [
  		"rmp"
  	]
  },
  	"audio/x-realaudio": {
  	source: "nginx",
  	extensions: [
  		"ra"
  	]
  },
  	"audio/x-tta": {
  	source: "apache"
  },
  	"audio/x-wav": {
  	source: "apache",
  	extensions: [
  		"wav"
  	]
  },
  	"audio/xm": {
  	source: "apache",
  	extensions: [
  		"xm"
  	]
  },
  	"chemical/x-cdx": {
  	source: "apache",
  	extensions: [
  		"cdx"
  	]
  },
  	"chemical/x-cif": {
  	source: "apache",
  	extensions: [
  		"cif"
  	]
  },
  	"chemical/x-cmdf": {
  	source: "apache",
  	extensions: [
  		"cmdf"
  	]
  },
  	"chemical/x-cml": {
  	source: "apache",
  	extensions: [
  		"cml"
  	]
  },
  	"chemical/x-csml": {
  	source: "apache",
  	extensions: [
  		"csml"
  	]
  },
  	"chemical/x-pdb": {
  	source: "apache"
  },
  	"chemical/x-xyz": {
  	source: "apache",
  	extensions: [
  		"xyz"
  	]
  },
  	"font/collection": {
  	source: "iana",
  	extensions: [
  		"ttc"
  	]
  },
  	"font/otf": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"otf"
  	]
  },
  	"font/sfnt": {
  	source: "iana"
  },
  	"font/ttf": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"ttf"
  	]
  },
  	"font/woff": {
  	source: "iana",
  	extensions: [
  		"woff"
  	]
  },
  	"font/woff2": {
  	source: "iana",
  	extensions: [
  		"woff2"
  	]
  },
  	"image/aces": {
  	source: "iana",
  	extensions: [
  		"exr"
  	]
  },
  	"image/apng": {
  	compressible: false,
  	extensions: [
  		"apng"
  	]
  },
  	"image/avci": {
  	source: "iana",
  	extensions: [
  		"avci"
  	]
  },
  	"image/avcs": {
  	source: "iana",
  	extensions: [
  		"avcs"
  	]
  },
  	"image/avif": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"avif"
  	]
  },
  	"image/bmp": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"bmp"
  	]
  },
  	"image/cgm": {
  	source: "iana",
  	extensions: [
  		"cgm"
  	]
  },
  	"image/dicom-rle": {
  	source: "iana",
  	extensions: [
  		"drle"
  	]
  },
  	"image/emf": {
  	source: "iana",
  	extensions: [
  		"emf"
  	]
  },
  	"image/fits": {
  	source: "iana",
  	extensions: [
  		"fits"
  	]
  },
  	"image/g3fax": {
  	source: "iana",
  	extensions: [
  		"g3"
  	]
  },
  	"image/gif": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"gif"
  	]
  },
  	"image/heic": {
  	source: "iana",
  	extensions: [
  		"heic"
  	]
  },
  	"image/heic-sequence": {
  	source: "iana",
  	extensions: [
  		"heics"
  	]
  },
  	"image/heif": {
  	source: "iana",
  	extensions: [
  		"heif"
  	]
  },
  	"image/heif-sequence": {
  	source: "iana",
  	extensions: [
  		"heifs"
  	]
  },
  	"image/hej2k": {
  	source: "iana",
  	extensions: [
  		"hej2"
  	]
  },
  	"image/hsj2": {
  	source: "iana",
  	extensions: [
  		"hsj2"
  	]
  },
  	"image/ief": {
  	source: "iana",
  	extensions: [
  		"ief"
  	]
  },
  	"image/jls": {
  	source: "iana",
  	extensions: [
  		"jls"
  	]
  },
  	"image/jp2": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"jp2",
  		"jpg2"
  	]
  },
  	"image/jpeg": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"jpeg",
  		"jpg",
  		"jpe"
  	]
  },
  	"image/jph": {
  	source: "iana",
  	extensions: [
  		"jph"
  	]
  },
  	"image/jphc": {
  	source: "iana",
  	extensions: [
  		"jhc"
  	]
  },
  	"image/jpm": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"jpm"
  	]
  },
  	"image/jpx": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"jpx",
  		"jpf"
  	]
  },
  	"image/jxr": {
  	source: "iana",
  	extensions: [
  		"jxr"
  	]
  },
  	"image/jxra": {
  	source: "iana",
  	extensions: [
  		"jxra"
  	]
  },
  	"image/jxrs": {
  	source: "iana",
  	extensions: [
  		"jxrs"
  	]
  },
  	"image/jxs": {
  	source: "iana",
  	extensions: [
  		"jxs"
  	]
  },
  	"image/jxsc": {
  	source: "iana",
  	extensions: [
  		"jxsc"
  	]
  },
  	"image/jxsi": {
  	source: "iana",
  	extensions: [
  		"jxsi"
  	]
  },
  	"image/jxss": {
  	source: "iana",
  	extensions: [
  		"jxss"
  	]
  },
  	"image/ktx": {
  	source: "iana",
  	extensions: [
  		"ktx"
  	]
  },
  	"image/ktx2": {
  	source: "iana",
  	extensions: [
  		"ktx2"
  	]
  },
  	"image/naplps": {
  	source: "iana"
  },
  	"image/pjpeg": {
  	compressible: false
  },
  	"image/png": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"png"
  	]
  },
  	"image/prs.btif": {
  	source: "iana",
  	extensions: [
  		"btif"
  	]
  },
  	"image/prs.pti": {
  	source: "iana",
  	extensions: [
  		"pti"
  	]
  },
  	"image/pwg-raster": {
  	source: "iana"
  },
  	"image/sgi": {
  	source: "apache",
  	extensions: [
  		"sgi"
  	]
  },
  	"image/svg+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"svg",
  		"svgz"
  	]
  },
  	"image/t38": {
  	source: "iana",
  	extensions: [
  		"t38"
  	]
  },
  	"image/tiff": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"tif",
  		"tiff"
  	]
  },
  	"image/tiff-fx": {
  	source: "iana",
  	extensions: [
  		"tfx"
  	]
  },
  	"image/vnd.adobe.photoshop": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"psd"
  	]
  },
  	"image/vnd.airzip.accelerator.azv": {
  	source: "iana",
  	extensions: [
  		"azv"
  	]
  },
  	"image/vnd.cns.inf2": {
  	source: "iana"
  },
  	"image/vnd.dece.graphic": {
  	source: "iana",
  	extensions: [
  		"uvi",
  		"uvvi",
  		"uvg",
  		"uvvg"
  	]
  },
  	"image/vnd.djvu": {
  	source: "iana",
  	extensions: [
  		"djvu",
  		"djv"
  	]
  },
  	"image/vnd.dvb.subtitle": {
  	source: "iana",
  	extensions: [
  		"sub"
  	]
  },
  	"image/vnd.dwg": {
  	source: "iana",
  	extensions: [
  		"dwg"
  	]
  },
  	"image/vnd.dxf": {
  	source: "iana",
  	extensions: [
  		"dxf"
  	]
  },
  	"image/vnd.fastbidsheet": {
  	source: "iana",
  	extensions: [
  		"fbs"
  	]
  },
  	"image/vnd.fpx": {
  	source: "iana",
  	extensions: [
  		"fpx"
  	]
  },
  	"image/vnd.fst": {
  	source: "iana",
  	extensions: [
  		"fst"
  	]
  },
  	"image/vnd.fujixerox.edmics-mmr": {
  	source: "iana",
  	extensions: [
  		"mmr"
  	]
  },
  	"image/vnd.fujixerox.edmics-rlc": {
  	source: "iana",
  	extensions: [
  		"rlc"
  	]
  },
  	"image/vnd.globalgraphics.pgb": {
  	source: "iana"
  },
  	"image/vnd.microsoft.icon": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"ico"
  	]
  },
  	"image/vnd.mix": {
  	source: "iana"
  },
  	"image/vnd.mozilla.apng": {
  	source: "iana"
  },
  	"image/vnd.ms-dds": {
  	compressible: true,
  	extensions: [
  		"dds"
  	]
  },
  	"image/vnd.ms-modi": {
  	source: "iana",
  	extensions: [
  		"mdi"
  	]
  },
  	"image/vnd.ms-photo": {
  	source: "apache",
  	extensions: [
  		"wdp"
  	]
  },
  	"image/vnd.net-fpx": {
  	source: "iana",
  	extensions: [
  		"npx"
  	]
  },
  	"image/vnd.pco.b16": {
  	source: "iana",
  	extensions: [
  		"b16"
  	]
  },
  	"image/vnd.radiance": {
  	source: "iana"
  },
  	"image/vnd.sealed.png": {
  	source: "iana"
  },
  	"image/vnd.sealedmedia.softseal.gif": {
  	source: "iana"
  },
  	"image/vnd.sealedmedia.softseal.jpg": {
  	source: "iana"
  },
  	"image/vnd.svf": {
  	source: "iana"
  },
  	"image/vnd.tencent.tap": {
  	source: "iana",
  	extensions: [
  		"tap"
  	]
  },
  	"image/vnd.valve.source.texture": {
  	source: "iana",
  	extensions: [
  		"vtf"
  	]
  },
  	"image/vnd.wap.wbmp": {
  	source: "iana",
  	extensions: [
  		"wbmp"
  	]
  },
  	"image/vnd.xiff": {
  	source: "iana",
  	extensions: [
  		"xif"
  	]
  },
  	"image/vnd.zbrush.pcx": {
  	source: "iana",
  	extensions: [
  		"pcx"
  	]
  },
  	"image/webp": {
  	source: "apache",
  	extensions: [
  		"webp"
  	]
  },
  	"image/wmf": {
  	source: "iana",
  	extensions: [
  		"wmf"
  	]
  },
  	"image/x-3ds": {
  	source: "apache",
  	extensions: [
  		"3ds"
  	]
  },
  	"image/x-cmu-raster": {
  	source: "apache",
  	extensions: [
  		"ras"
  	]
  },
  	"image/x-cmx": {
  	source: "apache",
  	extensions: [
  		"cmx"
  	]
  },
  	"image/x-freehand": {
  	source: "apache",
  	extensions: [
  		"fh",
  		"fhc",
  		"fh4",
  		"fh5",
  		"fh7"
  	]
  },
  	"image/x-icon": {
  	source: "apache",
  	compressible: true,
  	extensions: [
  		"ico"
  	]
  },
  	"image/x-jng": {
  	source: "nginx",
  	extensions: [
  		"jng"
  	]
  },
  	"image/x-mrsid-image": {
  	source: "apache",
  	extensions: [
  		"sid"
  	]
  },
  	"image/x-ms-bmp": {
  	source: "nginx",
  	compressible: true,
  	extensions: [
  		"bmp"
  	]
  },
  	"image/x-pcx": {
  	source: "apache",
  	extensions: [
  		"pcx"
  	]
  },
  	"image/x-pict": {
  	source: "apache",
  	extensions: [
  		"pic",
  		"pct"
  	]
  },
  	"image/x-portable-anymap": {
  	source: "apache",
  	extensions: [
  		"pnm"
  	]
  },
  	"image/x-portable-bitmap": {
  	source: "apache",
  	extensions: [
  		"pbm"
  	]
  },
  	"image/x-portable-graymap": {
  	source: "apache",
  	extensions: [
  		"pgm"
  	]
  },
  	"image/x-portable-pixmap": {
  	source: "apache",
  	extensions: [
  		"ppm"
  	]
  },
  	"image/x-rgb": {
  	source: "apache",
  	extensions: [
  		"rgb"
  	]
  },
  	"image/x-tga": {
  	source: "apache",
  	extensions: [
  		"tga"
  	]
  },
  	"image/x-xbitmap": {
  	source: "apache",
  	extensions: [
  		"xbm"
  	]
  },
  	"image/x-xcf": {
  	compressible: false
  },
  	"image/x-xpixmap": {
  	source: "apache",
  	extensions: [
  		"xpm"
  	]
  },
  	"image/x-xwindowdump": {
  	source: "apache",
  	extensions: [
  		"xwd"
  	]
  },
  	"message/cpim": {
  	source: "iana"
  },
  	"message/delivery-status": {
  	source: "iana"
  },
  	"message/disposition-notification": {
  	source: "iana",
  	extensions: [
  		"disposition-notification"
  	]
  },
  	"message/external-body": {
  	source: "iana"
  },
  	"message/feedback-report": {
  	source: "iana"
  },
  	"message/global": {
  	source: "iana",
  	extensions: [
  		"u8msg"
  	]
  },
  	"message/global-delivery-status": {
  	source: "iana",
  	extensions: [
  		"u8dsn"
  	]
  },
  	"message/global-disposition-notification": {
  	source: "iana",
  	extensions: [
  		"u8mdn"
  	]
  },
  	"message/global-headers": {
  	source: "iana",
  	extensions: [
  		"u8hdr"
  	]
  },
  	"message/http": {
  	source: "iana",
  	compressible: false
  },
  	"message/imdn+xml": {
  	source: "iana",
  	compressible: true
  },
  	"message/news": {
  	source: "iana"
  },
  	"message/partial": {
  	source: "iana",
  	compressible: false
  },
  	"message/rfc822": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"eml",
  		"mime"
  	]
  },
  	"message/s-http": {
  	source: "iana"
  },
  	"message/sip": {
  	source: "iana"
  },
  	"message/sipfrag": {
  	source: "iana"
  },
  	"message/tracking-status": {
  	source: "iana"
  },
  	"message/vnd.si.simp": {
  	source: "iana"
  },
  	"message/vnd.wfa.wsc": {
  	source: "iana",
  	extensions: [
  		"wsc"
  	]
  },
  	"model/3mf": {
  	source: "iana",
  	extensions: [
  		"3mf"
  	]
  },
  	"model/e57": {
  	source: "iana"
  },
  	"model/gltf+json": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"gltf"
  	]
  },
  	"model/gltf-binary": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"glb"
  	]
  },
  	"model/iges": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"igs",
  		"iges"
  	]
  },
  	"model/mesh": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"msh",
  		"mesh",
  		"silo"
  	]
  },
  	"model/mtl": {
  	source: "iana",
  	extensions: [
  		"mtl"
  	]
  },
  	"model/obj": {
  	source: "iana",
  	extensions: [
  		"obj"
  	]
  },
  	"model/step": {
  	source: "iana"
  },
  	"model/step+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"stpx"
  	]
  },
  	"model/step+zip": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"stpz"
  	]
  },
  	"model/step-xml+zip": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"stpxz"
  	]
  },
  	"model/stl": {
  	source: "iana",
  	extensions: [
  		"stl"
  	]
  },
  	"model/vnd.collada+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"dae"
  	]
  },
  	"model/vnd.dwf": {
  	source: "iana",
  	extensions: [
  		"dwf"
  	]
  },
  	"model/vnd.flatland.3dml": {
  	source: "iana"
  },
  	"model/vnd.gdl": {
  	source: "iana",
  	extensions: [
  		"gdl"
  	]
  },
  	"model/vnd.gs-gdl": {
  	source: "apache"
  },
  	"model/vnd.gs.gdl": {
  	source: "iana"
  },
  	"model/vnd.gtw": {
  	source: "iana",
  	extensions: [
  		"gtw"
  	]
  },
  	"model/vnd.moml+xml": {
  	source: "iana",
  	compressible: true
  },
  	"model/vnd.mts": {
  	source: "iana",
  	extensions: [
  		"mts"
  	]
  },
  	"model/vnd.opengex": {
  	source: "iana",
  	extensions: [
  		"ogex"
  	]
  },
  	"model/vnd.parasolid.transmit.binary": {
  	source: "iana",
  	extensions: [
  		"x_b"
  	]
  },
  	"model/vnd.parasolid.transmit.text": {
  	source: "iana",
  	extensions: [
  		"x_t"
  	]
  },
  	"model/vnd.pytha.pyox": {
  	source: "iana"
  },
  	"model/vnd.rosette.annotated-data-model": {
  	source: "iana"
  },
  	"model/vnd.sap.vds": {
  	source: "iana",
  	extensions: [
  		"vds"
  	]
  },
  	"model/vnd.usdz+zip": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"usdz"
  	]
  },
  	"model/vnd.valve.source.compiled-map": {
  	source: "iana",
  	extensions: [
  		"bsp"
  	]
  },
  	"model/vnd.vtu": {
  	source: "iana",
  	extensions: [
  		"vtu"
  	]
  },
  	"model/vrml": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"wrl",
  		"vrml"
  	]
  },
  	"model/x3d+binary": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"x3db",
  		"x3dbz"
  	]
  },
  	"model/x3d+fastinfoset": {
  	source: "iana",
  	extensions: [
  		"x3db"
  	]
  },
  	"model/x3d+vrml": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"x3dv",
  		"x3dvz"
  	]
  },
  	"model/x3d+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"x3d",
  		"x3dz"
  	]
  },
  	"model/x3d-vrml": {
  	source: "iana",
  	extensions: [
  		"x3dv"
  	]
  },
  	"multipart/alternative": {
  	source: "iana",
  	compressible: false
  },
  	"multipart/appledouble": {
  	source: "iana"
  },
  	"multipart/byteranges": {
  	source: "iana"
  },
  	"multipart/digest": {
  	source: "iana"
  },
  	"multipart/encrypted": {
  	source: "iana",
  	compressible: false
  },
  	"multipart/form-data": {
  	source: "iana",
  	compressible: false
  },
  	"multipart/header-set": {
  	source: "iana"
  },
  	"multipart/mixed": {
  	source: "iana"
  },
  	"multipart/multilingual": {
  	source: "iana"
  },
  	"multipart/parallel": {
  	source: "iana"
  },
  	"multipart/related": {
  	source: "iana",
  	compressible: false
  },
  	"multipart/report": {
  	source: "iana"
  },
  	"multipart/signed": {
  	source: "iana",
  	compressible: false
  },
  	"multipart/vnd.bint.med-plus": {
  	source: "iana"
  },
  	"multipart/voice-message": {
  	source: "iana"
  },
  	"multipart/x-mixed-replace": {
  	source: "iana"
  },
  	"text/1d-interleaved-parityfec": {
  	source: "iana"
  },
  	"text/cache-manifest": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"appcache",
  		"manifest"
  	]
  },
  	"text/calendar": {
  	source: "iana",
  	extensions: [
  		"ics",
  		"ifb"
  	]
  },
  	"text/calender": {
  	compressible: true
  },
  	"text/cmd": {
  	compressible: true
  },
  	"text/coffeescript": {
  	extensions: [
  		"coffee",
  		"litcoffee"
  	]
  },
  	"text/cql": {
  	source: "iana"
  },
  	"text/cql-expression": {
  	source: "iana"
  },
  	"text/cql-identifier": {
  	source: "iana"
  },
  	"text/css": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true,
  	extensions: [
  		"css"
  	]
  },
  	"text/csv": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"csv"
  	]
  },
  	"text/csv-schema": {
  	source: "iana"
  },
  	"text/directory": {
  	source: "iana"
  },
  	"text/dns": {
  	source: "iana"
  },
  	"text/ecmascript": {
  	source: "iana"
  },
  	"text/encaprtp": {
  	source: "iana"
  },
  	"text/enriched": {
  	source: "iana"
  },
  	"text/fhirpath": {
  	source: "iana"
  },
  	"text/flexfec": {
  	source: "iana"
  },
  	"text/fwdred": {
  	source: "iana"
  },
  	"text/gff3": {
  	source: "iana"
  },
  	"text/grammar-ref-list": {
  	source: "iana"
  },
  	"text/html": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"html",
  		"htm",
  		"shtml"
  	]
  },
  	"text/jade": {
  	extensions: [
  		"jade"
  	]
  },
  	"text/javascript": {
  	source: "iana",
  	compressible: true
  },
  	"text/jcr-cnd": {
  	source: "iana"
  },
  	"text/jsx": {
  	compressible: true,
  	extensions: [
  		"jsx"
  	]
  },
  	"text/less": {
  	compressible: true,
  	extensions: [
  		"less"
  	]
  },
  	"text/markdown": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"markdown",
  		"md"
  	]
  },
  	"text/mathml": {
  	source: "nginx",
  	extensions: [
  		"mml"
  	]
  },
  	"text/mdx": {
  	compressible: true,
  	extensions: [
  		"mdx"
  	]
  },
  	"text/mizar": {
  	source: "iana"
  },
  	"text/n3": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true,
  	extensions: [
  		"n3"
  	]
  },
  	"text/parameters": {
  	source: "iana",
  	charset: "UTF-8"
  },
  	"text/parityfec": {
  	source: "iana"
  },
  	"text/plain": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"txt",
  		"text",
  		"conf",
  		"def",
  		"list",
  		"log",
  		"in",
  		"ini"
  	]
  },
  	"text/provenance-notation": {
  	source: "iana",
  	charset: "UTF-8"
  },
  	"text/prs.fallenstein.rst": {
  	source: "iana"
  },
  	"text/prs.lines.tag": {
  	source: "iana",
  	extensions: [
  		"dsc"
  	]
  },
  	"text/prs.prop.logic": {
  	source: "iana"
  },
  	"text/raptorfec": {
  	source: "iana"
  },
  	"text/red": {
  	source: "iana"
  },
  	"text/rfc822-headers": {
  	source: "iana"
  },
  	"text/richtext": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"rtx"
  	]
  },
  	"text/rtf": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"rtf"
  	]
  },
  	"text/rtp-enc-aescm128": {
  	source: "iana"
  },
  	"text/rtploopback": {
  	source: "iana"
  },
  	"text/rtx": {
  	source: "iana"
  },
  	"text/sgml": {
  	source: "iana",
  	extensions: [
  		"sgml",
  		"sgm"
  	]
  },
  	"text/shaclc": {
  	source: "iana"
  },
  	"text/shex": {
  	source: "iana",
  	extensions: [
  		"shex"
  	]
  },
  	"text/slim": {
  	extensions: [
  		"slim",
  		"slm"
  	]
  },
  	"text/spdx": {
  	source: "iana",
  	extensions: [
  		"spdx"
  	]
  },
  	"text/strings": {
  	source: "iana"
  },
  	"text/stylus": {
  	extensions: [
  		"stylus",
  		"styl"
  	]
  },
  	"text/t140": {
  	source: "iana"
  },
  	"text/tab-separated-values": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"tsv"
  	]
  },
  	"text/troff": {
  	source: "iana",
  	extensions: [
  		"t",
  		"tr",
  		"roff",
  		"man",
  		"me",
  		"ms"
  	]
  },
  	"text/turtle": {
  	source: "iana",
  	charset: "UTF-8",
  	extensions: [
  		"ttl"
  	]
  },
  	"text/ulpfec": {
  	source: "iana"
  },
  	"text/uri-list": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"uri",
  		"uris",
  		"urls"
  	]
  },
  	"text/vcard": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"vcard"
  	]
  },
  	"text/vnd.a": {
  	source: "iana"
  },
  	"text/vnd.abc": {
  	source: "iana"
  },
  	"text/vnd.ascii-art": {
  	source: "iana"
  },
  	"text/vnd.curl": {
  	source: "iana",
  	extensions: [
  		"curl"
  	]
  },
  	"text/vnd.curl.dcurl": {
  	source: "apache",
  	extensions: [
  		"dcurl"
  	]
  },
  	"text/vnd.curl.mcurl": {
  	source: "apache",
  	extensions: [
  		"mcurl"
  	]
  },
  	"text/vnd.curl.scurl": {
  	source: "apache",
  	extensions: [
  		"scurl"
  	]
  },
  	"text/vnd.debian.copyright": {
  	source: "iana",
  	charset: "UTF-8"
  },
  	"text/vnd.dmclientscript": {
  	source: "iana"
  },
  	"text/vnd.dvb.subtitle": {
  	source: "iana",
  	extensions: [
  		"sub"
  	]
  },
  	"text/vnd.esmertec.theme-descriptor": {
  	source: "iana",
  	charset: "UTF-8"
  },
  	"text/vnd.familysearch.gedcom": {
  	source: "iana",
  	extensions: [
  		"ged"
  	]
  },
  	"text/vnd.ficlab.flt": {
  	source: "iana"
  },
  	"text/vnd.fly": {
  	source: "iana",
  	extensions: [
  		"fly"
  	]
  },
  	"text/vnd.fmi.flexstor": {
  	source: "iana",
  	extensions: [
  		"flx"
  	]
  },
  	"text/vnd.gml": {
  	source: "iana"
  },
  	"text/vnd.graphviz": {
  	source: "iana",
  	extensions: [
  		"gv"
  	]
  },
  	"text/vnd.hans": {
  	source: "iana"
  },
  	"text/vnd.hgl": {
  	source: "iana"
  },
  	"text/vnd.in3d.3dml": {
  	source: "iana",
  	extensions: [
  		"3dml"
  	]
  },
  	"text/vnd.in3d.spot": {
  	source: "iana",
  	extensions: [
  		"spot"
  	]
  },
  	"text/vnd.iptc.newsml": {
  	source: "iana"
  },
  	"text/vnd.iptc.nitf": {
  	source: "iana"
  },
  	"text/vnd.latex-z": {
  	source: "iana"
  },
  	"text/vnd.motorola.reflex": {
  	source: "iana"
  },
  	"text/vnd.ms-mediapackage": {
  	source: "iana"
  },
  	"text/vnd.net2phone.commcenter.command": {
  	source: "iana"
  },
  	"text/vnd.radisys.msml-basic-layout": {
  	source: "iana"
  },
  	"text/vnd.senx.warpscript": {
  	source: "iana"
  },
  	"text/vnd.si.uricatalogue": {
  	source: "iana"
  },
  	"text/vnd.sosi": {
  	source: "iana"
  },
  	"text/vnd.sun.j2me.app-descriptor": {
  	source: "iana",
  	charset: "UTF-8",
  	extensions: [
  		"jad"
  	]
  },
  	"text/vnd.trolltech.linguist": {
  	source: "iana",
  	charset: "UTF-8"
  },
  	"text/vnd.wap.si": {
  	source: "iana"
  },
  	"text/vnd.wap.sl": {
  	source: "iana"
  },
  	"text/vnd.wap.wml": {
  	source: "iana",
  	extensions: [
  		"wml"
  	]
  },
  	"text/vnd.wap.wmlscript": {
  	source: "iana",
  	extensions: [
  		"wmls"
  	]
  },
  	"text/vtt": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true,
  	extensions: [
  		"vtt"
  	]
  },
  	"text/x-asm": {
  	source: "apache",
  	extensions: [
  		"s",
  		"asm"
  	]
  },
  	"text/x-c": {
  	source: "apache",
  	extensions: [
  		"c",
  		"cc",
  		"cxx",
  		"cpp",
  		"h",
  		"hh",
  		"dic"
  	]
  },
  	"text/x-component": {
  	source: "nginx",
  	extensions: [
  		"htc"
  	]
  },
  	"text/x-fortran": {
  	source: "apache",
  	extensions: [
  		"f",
  		"for",
  		"f77",
  		"f90"
  	]
  },
  	"text/x-gwt-rpc": {
  	compressible: true
  },
  	"text/x-handlebars-template": {
  	extensions: [
  		"hbs"
  	]
  },
  	"text/x-java-source": {
  	source: "apache",
  	extensions: [
  		"java"
  	]
  },
  	"text/x-jquery-tmpl": {
  	compressible: true
  },
  	"text/x-lua": {
  	extensions: [
  		"lua"
  	]
  },
  	"text/x-markdown": {
  	compressible: true,
  	extensions: [
  		"mkd"
  	]
  },
  	"text/x-nfo": {
  	source: "apache",
  	extensions: [
  		"nfo"
  	]
  },
  	"text/x-opml": {
  	source: "apache",
  	extensions: [
  		"opml"
  	]
  },
  	"text/x-org": {
  	compressible: true,
  	extensions: [
  		"org"
  	]
  },
  	"text/x-pascal": {
  	source: "apache",
  	extensions: [
  		"p",
  		"pas"
  	]
  },
  	"text/x-processing": {
  	compressible: true,
  	extensions: [
  		"pde"
  	]
  },
  	"text/x-sass": {
  	extensions: [
  		"sass"
  	]
  },
  	"text/x-scss": {
  	extensions: [
  		"scss"
  	]
  },
  	"text/x-setext": {
  	source: "apache",
  	extensions: [
  		"etx"
  	]
  },
  	"text/x-sfv": {
  	source: "apache",
  	extensions: [
  		"sfv"
  	]
  },
  	"text/x-suse-ymp": {
  	compressible: true,
  	extensions: [
  		"ymp"
  	]
  },
  	"text/x-uuencode": {
  	source: "apache",
  	extensions: [
  		"uu"
  	]
  },
  	"text/x-vcalendar": {
  	source: "apache",
  	extensions: [
  		"vcs"
  	]
  },
  	"text/x-vcard": {
  	source: "apache",
  	extensions: [
  		"vcf"
  	]
  },
  	"text/xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"xml"
  	]
  },
  	"text/xml-external-parsed-entity": {
  	source: "iana"
  },
  	"text/yaml": {
  	compressible: true,
  	extensions: [
  		"yaml",
  		"yml"
  	]
  },
  	"video/1d-interleaved-parityfec": {
  	source: "iana"
  },
  	"video/3gpp": {
  	source: "iana",
  	extensions: [
  		"3gp",
  		"3gpp"
  	]
  },
  	"video/3gpp-tt": {
  	source: "iana"
  },
  	"video/3gpp2": {
  	source: "iana",
  	extensions: [
  		"3g2"
  	]
  },
  	"video/av1": {
  	source: "iana"
  },
  	"video/bmpeg": {
  	source: "iana"
  },
  	"video/bt656": {
  	source: "iana"
  },
  	"video/celb": {
  	source: "iana"
  },
  	"video/dv": {
  	source: "iana"
  },
  	"video/encaprtp": {
  	source: "iana"
  },
  	"video/ffv1": {
  	source: "iana"
  },
  	"video/flexfec": {
  	source: "iana"
  },
  	"video/h261": {
  	source: "iana",
  	extensions: [
  		"h261"
  	]
  },
  	"video/h263": {
  	source: "iana",
  	extensions: [
  		"h263"
  	]
  },
  	"video/h263-1998": {
  	source: "iana"
  },
  	"video/h263-2000": {
  	source: "iana"
  },
  	"video/h264": {
  	source: "iana",
  	extensions: [
  		"h264"
  	]
  },
  	"video/h264-rcdo": {
  	source: "iana"
  },
  	"video/h264-svc": {
  	source: "iana"
  },
  	"video/h265": {
  	source: "iana"
  },
  	"video/iso.segment": {
  	source: "iana",
  	extensions: [
  		"m4s"
  	]
  },
  	"video/jpeg": {
  	source: "iana",
  	extensions: [
  		"jpgv"
  	]
  },
  	"video/jpeg2000": {
  	source: "iana"
  },
  	"video/jpm": {
  	source: "apache",
  	extensions: [
  		"jpm",
  		"jpgm"
  	]
  },
  	"video/jxsv": {
  	source: "iana"
  },
  	"video/mj2": {
  	source: "iana",
  	extensions: [
  		"mj2",
  		"mjp2"
  	]
  },
  	"video/mp1s": {
  	source: "iana"
  },
  	"video/mp2p": {
  	source: "iana"
  },
  	"video/mp2t": {
  	source: "iana",
  	extensions: [
  		"ts"
  	]
  },
  	"video/mp4": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"mp4",
  		"mp4v",
  		"mpg4"
  	]
  },
  	"video/mp4v-es": {
  	source: "iana"
  },
  	"video/mpeg": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"mpeg",
  		"mpg",
  		"mpe",
  		"m1v",
  		"m2v"
  	]
  },
  	"video/mpeg4-generic": {
  	source: "iana"
  },
  	"video/mpv": {
  	source: "iana"
  },
  	"video/nv": {
  	source: "iana"
  },
  	"video/ogg": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"ogv"
  	]
  },
  	"video/parityfec": {
  	source: "iana"
  },
  	"video/pointer": {
  	source: "iana"
  },
  	"video/quicktime": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"qt",
  		"mov"
  	]
  },
  	"video/raptorfec": {
  	source: "iana"
  },
  	"video/raw": {
  	source: "iana"
  },
  	"video/rtp-enc-aescm128": {
  	source: "iana"
  },
  	"video/rtploopback": {
  	source: "iana"
  },
  	"video/rtx": {
  	source: "iana"
  },
  	"video/scip": {
  	source: "iana"
  },
  	"video/smpte291": {
  	source: "iana"
  },
  	"video/smpte292m": {
  	source: "iana"
  },
  	"video/ulpfec": {
  	source: "iana"
  },
  	"video/vc1": {
  	source: "iana"
  },
  	"video/vc2": {
  	source: "iana"
  },
  	"video/vnd.cctv": {
  	source: "iana"
  },
  	"video/vnd.dece.hd": {
  	source: "iana",
  	extensions: [
  		"uvh",
  		"uvvh"
  	]
  },
  	"video/vnd.dece.mobile": {
  	source: "iana",
  	extensions: [
  		"uvm",
  		"uvvm"
  	]
  },
  	"video/vnd.dece.mp4": {
  	source: "iana"
  },
  	"video/vnd.dece.pd": {
  	source: "iana",
  	extensions: [
  		"uvp",
  		"uvvp"
  	]
  },
  	"video/vnd.dece.sd": {
  	source: "iana",
  	extensions: [
  		"uvs",
  		"uvvs"
  	]
  },
  	"video/vnd.dece.video": {
  	source: "iana",
  	extensions: [
  		"uvv",
  		"uvvv"
  	]
  },
  	"video/vnd.directv.mpeg": {
  	source: "iana"
  },
  	"video/vnd.directv.mpeg-tts": {
  	source: "iana"
  },
  	"video/vnd.dlna.mpeg-tts": {
  	source: "iana"
  },
  	"video/vnd.dvb.file": {
  	source: "iana",
  	extensions: [
  		"dvb"
  	]
  },
  	"video/vnd.fvt": {
  	source: "iana",
  	extensions: [
  		"fvt"
  	]
  },
  	"video/vnd.hns.video": {
  	source: "iana"
  },
  	"video/vnd.iptvforum.1dparityfec-1010": {
  	source: "iana"
  },
  	"video/vnd.iptvforum.1dparityfec-2005": {
  	source: "iana"
  },
  	"video/vnd.iptvforum.2dparityfec-1010": {
  	source: "iana"
  },
  	"video/vnd.iptvforum.2dparityfec-2005": {
  	source: "iana"
  },
  	"video/vnd.iptvforum.ttsavc": {
  	source: "iana"
  },
  	"video/vnd.iptvforum.ttsmpeg2": {
  	source: "iana"
  },
  	"video/vnd.motorola.video": {
  	source: "iana"
  },
  	"video/vnd.motorola.videop": {
  	source: "iana"
  },
  	"video/vnd.mpegurl": {
  	source: "iana",
  	extensions: [
  		"mxu",
  		"m4u"
  	]
  },
  	"video/vnd.ms-playready.media.pyv": {
  	source: "iana",
  	extensions: [
  		"pyv"
  	]
  },
  	"video/vnd.nokia.interleaved-multimedia": {
  	source: "iana"
  },
  	"video/vnd.nokia.mp4vr": {
  	source: "iana"
  },
  	"video/vnd.nokia.videovoip": {
  	source: "iana"
  },
  	"video/vnd.objectvideo": {
  	source: "iana"
  },
  	"video/vnd.radgamettools.bink": {
  	source: "iana"
  },
  	"video/vnd.radgamettools.smacker": {
  	source: "iana"
  },
  	"video/vnd.sealed.mpeg1": {
  	source: "iana"
  },
  	"video/vnd.sealed.mpeg4": {
  	source: "iana"
  },
  	"video/vnd.sealed.swf": {
  	source: "iana"
  },
  	"video/vnd.sealedmedia.softseal.mov": {
  	source: "iana"
  },
  	"video/vnd.uvvu.mp4": {
  	source: "iana",
  	extensions: [
  		"uvu",
  		"uvvu"
  	]
  },
  	"video/vnd.vivo": {
  	source: "iana",
  	extensions: [
  		"viv"
  	]
  },
  	"video/vnd.youtube.yt": {
  	source: "iana"
  },
  	"video/vp8": {
  	source: "iana"
  },
  	"video/vp9": {
  	source: "iana"
  },
  	"video/webm": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"webm"
  	]
  },
  	"video/x-f4v": {
  	source: "apache",
  	extensions: [
  		"f4v"
  	]
  },
  	"video/x-fli": {
  	source: "apache",
  	extensions: [
  		"fli"
  	]
  },
  	"video/x-flv": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"flv"
  	]
  },
  	"video/x-m4v": {
  	source: "apache",
  	extensions: [
  		"m4v"
  	]
  },
  	"video/x-matroska": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"mkv",
  		"mk3d",
  		"mks"
  	]
  },
  	"video/x-mng": {
  	source: "apache",
  	extensions: [
  		"mng"
  	]
  },
  	"video/x-ms-asf": {
  	source: "apache",
  	extensions: [
  		"asf",
  		"asx"
  	]
  },
  	"video/x-ms-vob": {
  	source: "apache",
  	extensions: [
  		"vob"
  	]
  },
  	"video/x-ms-wm": {
  	source: "apache",
  	extensions: [
  		"wm"
  	]
  },
  	"video/x-ms-wmv": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"wmv"
  	]
  },
  	"video/x-ms-wmx": {
  	source: "apache",
  	extensions: [
  		"wmx"
  	]
  },
  	"video/x-ms-wvx": {
  	source: "apache",
  	extensions: [
  		"wvx"
  	]
  },
  	"video/x-msvideo": {
  	source: "apache",
  	extensions: [
  		"avi"
  	]
  },
  	"video/x-sgi-movie": {
  	source: "apache",
  	extensions: [
  		"movie"
  	]
  },
  	"video/x-smv": {
  	source: "apache",
  	extensions: [
  		"smv"
  	]
  },
  	"x-conference/x-cooltalk": {
  	source: "apache",
  	extensions: [
  		"ice"
  	]
  },
  	"x-shader/x-fragment": {
  	compressible: true
  },
  	"x-shader/x-vertex": {
  	compressible: true
  }
  };

  /*!
   * mime-db
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015-2022 Douglas Christopher Wilson
   * MIT Licensed
   */

  /**
   * Module exports.
   */

  var mimeDb = require$$0$1;

  /*!
   * mime-types
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  (function (exports) {

    /**
     * Module dependencies.
     * @private
     */
    var db = mimeDb;
    var extname = require$$1$5.extname;

    /**
     * Module variables.
     * @private
     */

    var EXTRACT_TYPE_REGEXP = /^\s*([^;\s]*)(?:;|\s|$)/;
    var TEXT_TYPE_REGEXP = /^text\//i;

    /**
     * Module exports.
     * @public
     */

    exports.charset = charset;
    exports.charsets = {
      lookup: charset
    };
    exports.contentType = contentType;
    exports.extension = extension;
    exports.extensions = Object.create(null);
    exports.lookup = lookup;
    exports.types = Object.create(null);

    // Populate the extensions/types maps
    populateMaps(exports.extensions, exports.types);

    /**
     * Get the default charset for a MIME type.
     *
     * @param {string} type
     * @return {boolean|string}
     */

    function charset(type) {
      if (!type || typeof type !== 'string') {
        return false;
      }

      // TODO: use media-typer
      var match = EXTRACT_TYPE_REGEXP.exec(type);
      var mime = match && db[match[1].toLowerCase()];
      if (mime && mime.charset) {
        return mime.charset;
      }

      // default text/* to utf-8
      if (match && TEXT_TYPE_REGEXP.test(match[1])) {
        return 'UTF-8';
      }
      return false;
    }

    /**
     * Create a full Content-Type header given a MIME type or extension.
     *
     * @param {string} str
     * @return {boolean|string}
     */

    function contentType(str) {
      // TODO: should this even be in this module?
      if (!str || typeof str !== 'string') {
        return false;
      }
      var mime = str.indexOf('/') === -1 ? exports.lookup(str) : str;
      if (!mime) {
        return false;
      }

      // TODO: use content-type or other module
      if (mime.indexOf('charset') === -1) {
        var charset = exports.charset(mime);
        if (charset) mime += '; charset=' + charset.toLowerCase();
      }
      return mime;
    }

    /**
     * Get the default extension for a MIME type.
     *
     * @param {string} type
     * @return {boolean|string}
     */

    function extension(type) {
      if (!type || typeof type !== 'string') {
        return false;
      }

      // TODO: use media-typer
      var match = EXTRACT_TYPE_REGEXP.exec(type);

      // get extensions
      var exts = match && exports.extensions[match[1].toLowerCase()];
      if (!exts || !exts.length) {
        return false;
      }
      return exts[0];
    }

    /**
     * Lookup the MIME type for a file path/extension.
     *
     * @param {string} path
     * @return {boolean|string}
     */

    function lookup(path) {
      if (!path || typeof path !== 'string') {
        return false;
      }

      // get the extension ("ext" or ".ext" or full path)
      var extension = extname('x.' + path).toLowerCase().substr(1);
      if (!extension) {
        return false;
      }
      return exports.types[extension] || false;
    }

    /**
     * Populate the extensions and types maps.
     * @private
     */

    function populateMaps(extensions, types) {
      // source preference (least -> most)
      var preference = ['nginx', 'apache', undefined, 'iana'];
      Object.keys(db).forEach(function forEachMimeType(type) {
        var mime = db[type];
        var exts = mime.extensions;
        if (!exts || !exts.length) {
          return;
        }

        // mime -> extensions
        extensions[type] = exts;

        // extension -> mime
        for (var i = 0; i < exts.length; i++) {
          var extension = exts[i];
          if (types[extension]) {
            var from = preference.indexOf(db[types[extension]].source);
            var to = preference.indexOf(mime.source);
            if (types[extension] !== 'application/octet-stream' && (from > to || from === to && types[extension].substr(0, 12) === 'application/')) {
              // skip the remapping
              continue;
            }
          }

          // set the extension -> mime
          types[extension] = type;
        }
      });
    }
  })(mimeTypes);

  var defer_1 = defer$2;

  /**
   * Runs provided function on next iteration of the event loop
   *
   * @param {function} fn - function to run
   */
  function defer$2(fn) {
    var nextTick = typeof setImmediate == 'function' ? setImmediate : (typeof process === "undefined" ? "undefined" : _typeof(process)) == 'object' && typeof process.nextTick == 'function' ? process.nextTick : null;
    if (nextTick) {
      nextTick(fn);
    } else {
      setTimeout(fn, 0);
    }
  }

  var defer$1 = defer_1;

  // API
  var async_1 = async$2;

  /**
   * Runs provided callback asynchronously
   * even if callback itself is not
   *
   * @param   {function} callback - callback to invoke
   * @returns {function} - augmented callback
   */
  function async$2(callback) {
    var isAsync = false;

    // check if async happened
    defer$1(function () {
      isAsync = true;
    });
    return function async_callback(err, result) {
      if (isAsync) {
        callback(err, result);
      } else {
        defer$1(function nextTick_callback() {
          callback(err, result);
        });
      }
    };
  }

  // API
  var abort_1 = abort$2;

  /**
   * Aborts leftover active jobs
   *
   * @param {object} state - current state object
   */
  function abort$2(state) {
    Object.keys(state.jobs).forEach(clean.bind(state));

    // reset leftover jobs
    state.jobs = {};
  }

  /**
   * Cleans up leftover job by invoking abort function for the provided job id
   *
   * @this  state
   * @param {string|number} key - job id to abort
   */
  function clean(key) {
    if (typeof this.jobs[key] == 'function') {
      this.jobs[key]();
    }
  }

  var async$1 = async_1,
    abort$1 = abort_1;

  // API
  var iterate_1 = iterate$2;

  /**
   * Iterates over each job object
   *
   * @param {array|object} list - array or object (named list) to iterate over
   * @param {function} iterator - iterator to run
   * @param {object} state - current job status
   * @param {function} callback - invoked when all elements processed
   */
  function iterate$2(list, iterator, state, callback) {
    // store current index
    var key = state['keyedList'] ? state['keyedList'][state.index] : state.index;
    state.jobs[key] = runJob(iterator, key, list[key], function (error, output) {
      // don't repeat yourself
      // skip secondary callbacks
      if (!(key in state.jobs)) {
        return;
      }

      // clean up jobs
      delete state.jobs[key];
      if (error) {
        // don't process rest of the results
        // stop still active jobs
        // and reset the list
        abort$1(state);
      } else {
        state.results[key] = output;
      }

      // return salvaged results
      callback(error, state.results);
    });
  }

  /**
   * Runs iterator over provided job element
   *
   * @param   {function} iterator - iterator to invoke
   * @param   {string|number} key - key/index of the element in the list of jobs
   * @param   {mixed} item - job description
   * @param   {function} callback - invoked after iterator is done with the job
   * @returns {function|mixed} - job abort function or something else
   */
  function runJob(iterator, key, item, callback) {
    var aborter;

    // allow shortcut if iterator expects only two arguments
    if (iterator.length == 2) {
      aborter = iterator(item, async$1(callback));
    }
    // otherwise go with full three arguments
    else {
      aborter = iterator(item, key, async$1(callback));
    }
    return aborter;
  }

  // API
  var state_1 = state$1;

  /**
   * Creates initial state object
   * for iteration over list
   *
   * @param   {array|object} list - list to iterate over
   * @param   {function|null} sortMethod - function to use for keys sort,
   *                                     or `null` to keep them as is
   * @returns {object} - initial state object
   */
  function state$1(list, sortMethod) {
    var isNamedList = !Array.isArray(list),
      initState = {
        index: 0,
        keyedList: isNamedList || sortMethod ? Object.keys(list) : null,
        jobs: {},
        results: isNamedList ? {} : [],
        size: isNamedList ? Object.keys(list).length : list.length
      };
    if (sortMethod) {
      // sort array keys based on it's values
      // sort object's keys just on own merit
      initState.keyedList.sort(isNamedList ? sortMethod : function (a, b) {
        return sortMethod(list[a], list[b]);
      });
    }
    return initState;
  }

  var abort = abort_1,
    async = async_1;

  // API
  var terminator_1 = terminator$2;

  /**
   * Terminates jobs in the attached state context
   *
   * @this  AsyncKitState#
   * @param {function} callback - final callback to invoke after termination
   */
  function terminator$2(callback) {
    if (!Object.keys(this.jobs).length) {
      return;
    }

    // fast forward iteration index
    this.index = this.size;

    // abort jobs
    abort(this);

    // send back results we have so far
    async(callback)(null, this.results);
  }

  var iterate$1 = iterate_1,
    initState$1 = state_1,
    terminator$1 = terminator_1;

  // Public API
  var parallel_1 = parallel;

  /**
   * Runs iterator over provided array elements in parallel
   *
   * @param   {array|object} list - array or object (named list) to iterate over
   * @param   {function} iterator - iterator to run
   * @param   {function} callback - invoked when all elements processed
   * @returns {function} - jobs terminator
   */
  function parallel(list, iterator, callback) {
    var state = initState$1(list);
    while (state.index < (state['keyedList'] || list).length) {
      iterate$1(list, iterator, state, function (error, result) {
        if (error) {
          callback(error, result);
          return;
        }

        // looks like it's the last one
        if (Object.keys(state.jobs).length === 0) {
          callback(null, state.results);
          return;
        }
      });
      state.index++;
    }
    return terminator$1.bind(state, callback);
  }

  var serialOrdered$2 = {exports: {}};

  var iterate = iterate_1,
    initState = state_1,
    terminator = terminator_1;

  // Public API
  serialOrdered$2.exports = serialOrdered$1;
  // sorting helpers
  serialOrdered$2.exports.ascending = ascending;
  serialOrdered$2.exports.descending = descending;

  /**
   * Runs iterator over provided sorted array elements in series
   *
   * @param   {array|object} list - array or object (named list) to iterate over
   * @param   {function} iterator - iterator to run
   * @param   {function} sortMethod - custom sort function
   * @param   {function} callback - invoked when all elements processed
   * @returns {function} - jobs terminator
   */
  function serialOrdered$1(list, iterator, sortMethod, callback) {
    var state = initState(list, sortMethod);
    iterate(list, iterator, state, function iteratorHandler(error, result) {
      if (error) {
        callback(error, result);
        return;
      }
      state.index++;

      // are we there yet?
      if (state.index < (state['keyedList'] || list).length) {
        iterate(list, iterator, state, iteratorHandler);
        return;
      }

      // done here
      callback(null, state.results);
    });
    return terminator.bind(state, callback);
  }

  /*
   * -- Sort methods
   */

  /**
   * sort helper to sort array elements in ascending order
   *
   * @param   {mixed} a - an item to compare
   * @param   {mixed} b - an item to compare
   * @returns {number} - comparison result
   */
  function ascending(a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
  }

  /**
   * sort helper to sort array elements in descending order
   *
   * @param   {mixed} a - an item to compare
   * @param   {mixed} b - an item to compare
   * @returns {number} - comparison result
   */
  function descending(a, b) {
    return -1 * ascending(a, b);
  }
  var serialOrderedExports = serialOrdered$2.exports;

  var serialOrdered = serialOrderedExports;

  // Public API
  var serial_1 = serial;

  /**
   * Runs iterator over provided array elements in series
   *
   * @param   {array|object} list - array or object (named list) to iterate over
   * @param   {function} iterator - iterator to run
   * @param   {function} callback - invoked when all elements processed
   * @returns {function} - jobs terminator
   */
  function serial(list, iterator, callback) {
    return serialOrdered(list, iterator, null, callback);
  }

  var asynckit$1 = {
    parallel: parallel_1,
    serial: serial_1,
    serialOrdered: serialOrderedExports
  };

  // populates missing values
  var populate$1 = function populate(dst, src) {
    Object.keys(src).forEach(function (prop) {
      dst[prop] = dst[prop] || src[prop];
    });
    return dst;
  };

  var CombinedStream = combined_stream;
  var util$c = require$$1$3;
  var path$2 = require$$1$5;
  var http = http$1;
  var https = https$1;
  var parseUrl = Url$1.parse;
  var fs$1 = require$$6;
  var Stream$4 = require$$0$3.Stream;
  var mime = mimeTypes;
  var asynckit = asynckit$1;
  var populate = populate$1;

  // Public API
  var form_data = FormData;

  // make it a Stream
  util$c.inherits(FormData, CombinedStream);

  /**
   * Create readable "multipart/form-data" streams.
   * Can be used to submit forms
   * and file uploads to other web applications.
   *
   * @constructor
   * @param {Object} options - Properties to be added/overriden for FormData and CombinedStream
   */
  function FormData(options) {
    if (!(this instanceof FormData)) {
      return new FormData(options);
    }
    this._overheadLength = 0;
    this._valueLength = 0;
    this._valuesToMeasure = [];
    CombinedStream.call(this);
    options = options || {};
    for (var option in options) {
      this[option] = options[option];
    }
  }
  FormData.LINE_BREAK = '\r\n';
  FormData.DEFAULT_CONTENT_TYPE = 'application/octet-stream';
  FormData.prototype.append = function (field, value, options) {
    options = options || {};

    // allow filename as single option
    if (typeof options == 'string') {
      options = {
        filename: options
      };
    }
    var append = CombinedStream.prototype.append.bind(this);

    // all that streamy business can't handle numbers
    if (typeof value == 'number') {
      value = '' + value;
    }

    // https://github.com/felixge/node-form-data/issues/38
    if (util$c.isArray(value)) {
      // Please convert your array into string
      // the way web server expects it
      this._error(new Error('Arrays are not supported.'));
      return;
    }
    var header = this._multiPartHeader(field, value, options);
    var footer = this._multiPartFooter();
    append(header);
    append(value);
    append(footer);

    // pass along options.knownLength
    this._trackLength(header, value, options);
  };
  FormData.prototype._trackLength = function (header, value, options) {
    var valueLength = 0;

    // used w/ getLengthSync(), when length is known.
    // e.g. for streaming directly from a remote server,
    // w/ a known file a size, and not wanting to wait for
    // incoming file to finish to get its size.
    if (options.knownLength != null) {
      valueLength += +options.knownLength;
    } else if (Buffer.isBuffer(value)) {
      valueLength = value.length;
    } else if (typeof value === 'string') {
      valueLength = Buffer.byteLength(value);
    }
    this._valueLength += valueLength;

    // @check why add CRLF? does this account for custom/multiple CRLFs?
    this._overheadLength += Buffer.byteLength(header) + FormData.LINE_BREAK.length;

    // empty or either doesn't have path or not an http response or not a stream
    if (!value || !value.path && !(value.readable && value.hasOwnProperty('httpVersion')) && !(value instanceof Stream$4)) {
      return;
    }

    // no need to bother with the length
    if (!options.knownLength) {
      this._valuesToMeasure.push(value);
    }
  };
  FormData.prototype._lengthRetriever = function (value, callback) {
    if (value.hasOwnProperty('fd')) {
      // take read range into a account
      // `end` = Infinity –> read file till the end
      //
      // TODO: Looks like there is bug in Node fs.createReadStream
      // it doesn't respect `end` options without `start` options
      // Fix it when node fixes it.
      // https://github.com/joyent/node/issues/7819
      if (value.end != undefined && value.end != Infinity && value.start != undefined) {
        // when end specified
        // no need to calculate range
        // inclusive, starts with 0
        callback(null, value.end + 1 - (value.start ? value.start : 0));

        // not that fast snoopy
      } else {
        // still need to fetch file size from fs
        fs$1.stat(value.path, function (err, stat) {
          var fileSize;
          if (err) {
            callback(err);
            return;
          }

          // update final size based on the range options
          fileSize = stat.size - (value.start ? value.start : 0);
          callback(null, fileSize);
        });
      }

      // or http response
    } else if (value.hasOwnProperty('httpVersion')) {
      callback(null, +value.headers['content-length']);

      // or request stream http://github.com/mikeal/request
    } else if (value.hasOwnProperty('httpModule')) {
      // wait till response come back
      value.on('response', function (response) {
        value.pause();
        callback(null, +response.headers['content-length']);
      });
      value.resume();

      // something else
    } else {
      callback('Unknown stream');
    }
  };
  FormData.prototype._multiPartHeader = function (field, value, options) {
    // custom header specified (as string)?
    // it becomes responsible for boundary
    // (e.g. to handle extra CRLFs on .NET servers)
    if (typeof options.header == 'string') {
      return options.header;
    }
    var contentDisposition = this._getContentDisposition(value, options);
    var contentType = this._getContentType(value, options);
    var contents = '';
    var headers = {
      // add custom disposition as third element or keep it two elements if not
      'Content-Disposition': ['form-data', 'name="' + field + '"'].concat(contentDisposition || []),
      // if no content type. allow it to be empty array
      'Content-Type': [].concat(contentType || [])
    };

    // allow custom headers.
    if (_typeof(options.header) == 'object') {
      populate(headers, options.header);
    }
    var header;
    for (var prop in headers) {
      if (!headers.hasOwnProperty(prop)) continue;
      header = headers[prop];

      // skip nullish headers.
      if (header == null) {
        continue;
      }

      // convert all headers to arrays.
      if (!Array.isArray(header)) {
        header = [header];
      }

      // add non-empty headers.
      if (header.length) {
        contents += prop + ': ' + header.join('; ') + FormData.LINE_BREAK;
      }
    }
    return '--' + this.getBoundary() + FormData.LINE_BREAK + contents + FormData.LINE_BREAK;
  };
  FormData.prototype._getContentDisposition = function (value, options) {
    var filename, contentDisposition;
    if (typeof options.filepath === 'string') {
      // custom filepath for relative paths
      filename = path$2.normalize(options.filepath).replace(/\\/g, '/');
    } else if (options.filename || value.name || value.path) {
      // custom filename take precedence
      // formidable and the browser add a name property
      // fs- and request- streams have path property
      filename = path$2.basename(options.filename || value.name || value.path);
    } else if (value.readable && value.hasOwnProperty('httpVersion')) {
      // or try http response
      filename = path$2.basename(value.client._httpMessage.path || '');
    }
    if (filename) {
      contentDisposition = 'filename="' + filename + '"';
    }
    return contentDisposition;
  };
  FormData.prototype._getContentType = function (value, options) {
    // use custom content-type above all
    var contentType = options.contentType;

    // or try `name` from formidable, browser
    if (!contentType && value.name) {
      contentType = mime.lookup(value.name);
    }

    // or try `path` from fs-, request- streams
    if (!contentType && value.path) {
      contentType = mime.lookup(value.path);
    }

    // or if it's http-reponse
    if (!contentType && value.readable && value.hasOwnProperty('httpVersion')) {
      contentType = value.headers['content-type'];
    }

    // or guess it from the filepath or filename
    if (!contentType && (options.filepath || options.filename)) {
      contentType = mime.lookup(options.filepath || options.filename);
    }

    // fallback to the default content type if `value` is not simple value
    if (!contentType && _typeof(value) == 'object') {
      contentType = FormData.DEFAULT_CONTENT_TYPE;
    }
    return contentType;
  };
  FormData.prototype._multiPartFooter = function () {
    return function (next) {
      var footer = FormData.LINE_BREAK;
      var lastPart = this._streams.length === 0;
      if (lastPart) {
        footer += this._lastBoundary();
      }
      next(footer);
    }.bind(this);
  };
  FormData.prototype._lastBoundary = function () {
    return '--' + this.getBoundary() + '--' + FormData.LINE_BREAK;
  };
  FormData.prototype.getHeaders = function (userHeaders) {
    var header;
    var formHeaders = {
      'content-type': 'multipart/form-data; boundary=' + this.getBoundary()
    };
    for (header in userHeaders) {
      if (userHeaders.hasOwnProperty(header)) {
        formHeaders[header.toLowerCase()] = userHeaders[header];
      }
    }
    return formHeaders;
  };
  FormData.prototype.setBoundary = function (boundary) {
    this._boundary = boundary;
  };
  FormData.prototype.getBoundary = function () {
    if (!this._boundary) {
      this._generateBoundary();
    }
    return this._boundary;
  };
  FormData.prototype.getBuffer = function () {
    var dataBuffer = new Buffer.alloc(0);
    var boundary = this.getBoundary();

    // Create the form content. Add Line breaks to the end of data.
    for (var i = 0, len = this._streams.length; i < len; i++) {
      if (typeof this._streams[i] !== 'function') {
        // Add content to the buffer.
        if (Buffer.isBuffer(this._streams[i])) {
          dataBuffer = Buffer.concat([dataBuffer, this._streams[i]]);
        } else {
          dataBuffer = Buffer.concat([dataBuffer, Buffer.from(this._streams[i])]);
        }

        // Add break after content.
        if (typeof this._streams[i] !== 'string' || this._streams[i].substring(2, boundary.length + 2) !== boundary) {
          dataBuffer = Buffer.concat([dataBuffer, Buffer.from(FormData.LINE_BREAK)]);
        }
      }
    }

    // Add the footer and return the Buffer object.
    return Buffer.concat([dataBuffer, Buffer.from(this._lastBoundary())]);
  };
  FormData.prototype._generateBoundary = function () {
    // This generates a 50 character boundary similar to those used by Firefox.
    // They are optimized for boyer-moore parsing.
    var boundary = '--------------------------';
    for (var i = 0; i < 24; i++) {
      boundary += Math.floor(Math.random() * 10).toString(16);
    }
    this._boundary = boundary;
  };

  // Note: getLengthSync DOESN'T calculate streams length
  // As workaround one can calculate file size manually
  // and add it as knownLength option
  FormData.prototype.getLengthSync = function () {
    var knownLength = this._overheadLength + this._valueLength;

    // Don't get confused, there are 3 "internal" streams for each keyval pair
    // so it basically checks if there is any value added to the form
    if (this._streams.length) {
      knownLength += this._lastBoundary().length;
    }

    // https://github.com/form-data/form-data/issues/40
    if (!this.hasKnownLength()) {
      // Some async length retrievers are present
      // therefore synchronous length calculation is false.
      // Please use getLength(callback) to get proper length
      this._error(new Error('Cannot calculate proper length in synchronous way.'));
    }
    return knownLength;
  };

  // Public API to check if length of added values is known
  // https://github.com/form-data/form-data/issues/196
  // https://github.com/form-data/form-data/issues/262
  FormData.prototype.hasKnownLength = function () {
    var hasKnownLength = true;
    if (this._valuesToMeasure.length) {
      hasKnownLength = false;
    }
    return hasKnownLength;
  };
  FormData.prototype.getLength = function (cb) {
    var knownLength = this._overheadLength + this._valueLength;
    if (this._streams.length) {
      knownLength += this._lastBoundary().length;
    }
    if (!this._valuesToMeasure.length) {
      process.nextTick(cb.bind(this, null, knownLength));
      return;
    }
    asynckit.parallel(this._valuesToMeasure, this._lengthRetriever, function (err, values) {
      if (err) {
        cb(err);
        return;
      }
      values.forEach(function (length) {
        knownLength += length;
      });
      cb(null, knownLength);
    });
  };
  FormData.prototype.submit = function (params, cb) {
    var request,
      options,
      defaults = {
        method: 'post'
      };

    // parse provided url if it's string
    // or treat it as options object
    if (typeof params == 'string') {
      params = parseUrl(params);
      options = populate({
        port: params.port,
        path: params.pathname,
        host: params.hostname,
        protocol: params.protocol
      }, defaults);

      // use custom params
    } else {
      options = populate(params, defaults);
      // if no port provided use default one
      if (!options.port) {
        options.port = options.protocol == 'https:' ? 443 : 80;
      }
    }

    // put that good code in getHeaders to some use
    options.headers = this.getHeaders(params.headers);

    // https if specified, fallback to http in any other case
    if (options.protocol == 'https:') {
      request = https.request(options);
    } else {
      request = http.request(options);
    }

    // get content length and fire away
    this.getLength(function (err, length) {
      if (err && err !== 'Unknown stream') {
        this._error(err);
        return;
      }

      // add content length
      if (length) {
        request.setHeader('Content-Length', length);
      }
      this.pipe(request);
      if (cb) {
        var onResponse;
        var callback = function callback(error, responce) {
          request.removeListener('error', callback);
          request.removeListener('response', onResponse);
          return cb.call(this, error, responce);
        };
        onResponse = callback.bind(this, null);
        request.on('error', callback);
        request.on('response', onResponse);
      }
    }.bind(this));
    return request;
  };
  FormData.prototype._error = function (err) {
    if (!this.error) {
      this.error = err;
      this.pause();
      this.emit('error', err);
    }
  };
  FormData.prototype.toString = function () {
    return '[object FormData]';
  };

  var __importDefault$c = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };
  Object.defineProperty(requestHelper, "__esModule", {
    value: true
  });
  requestHelper.executeWithTimeout = requestHelper.performRedirectRequest = requestHelper.isRedirect = requestHelper.createHttpRequestHandlerStreams = void 0;
  var stream_1$8 = require$$0$3;
  var stream_2$3 = stream$4;
  var form_data_1 = __importDefault$c(form_data);
  /**
   *
   */
  function createHttpRequestHandlerStreams(req) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var reqBody = req.body;
    var input = new stream_1$8.PassThrough();
    var output = new stream_1$8.PassThrough();
    var duplex = (0, stream_2$3.concatStreamsAsDuplex)(input, output);
    if (typeof reqBody !== 'undefined') {
      setTimeout(function () {
        if (reqBody instanceof form_data_1["default"]) {
          duplex.end(reqBody.getBuffer());
        } else {
          duplex.end(reqBody, 'utf8');
        }
      }, 0);
    }
    duplex.on('response', /*#__PURE__*/function () {
      var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(res) {
        var resBody;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (!(duplex.listenerCount('complete') > 0)) {
                _context.next = 5;
                break;
              }
              _context.next = 3;
              return (0, stream_2$3.readAll)(duplex, options.encoding);
            case 3:
              resBody = _context.sent;
              duplex.emit('complete', _objectSpread2(_objectSpread2({}, res), {}, {
                body: resBody
              }));
            case 5:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    return {
      input: input,
      output: output,
      stream: duplex
    };
  }
  requestHelper.createHttpRequestHandlerStreams = createHttpRequestHandlerStreams;
  var redirectStatuses = new Set([301, 302, 303, 307, 308]);
  /**
   *
   */
  function isRedirect(status) {
    return redirectStatuses.has(status);
  }
  requestHelper.isRedirect = isRedirect;
  /**
   *
   */
  var MAX_REDIRECT_COUNT = 10;
  /**
   *
   */
  function performRedirectRequest(req, res, followRedirect, counter, redirectCallback) {
    if (counter >= MAX_REDIRECT_COUNT) {
      throw new Error('Reached to maximum redirect count');
    }
    var redirectUrl = res.headers['location'];
    if (!redirectUrl) {
      throw new Error('No redirect URI found');
    }
    var getRedirectRequest = typeof followRedirect === 'function' ? followRedirect : function () {
      return {
        method: 'GET',
        url: redirectUrl,
        headers: req.headers
      };
    };
    var nextReqParams = getRedirectRequest(redirectUrl);
    if (!nextReqParams) {
      throw new Error('Cannot handle redirect for ' + redirectUrl);
    }
    redirectCallback(nextReqParams);
  }
  requestHelper.performRedirectRequest = performRedirectRequest;
  /**
   *
   */
  function executeWithTimeout(_x2, _x3, _x4) {
    return _executeWithTimeout.apply(this, arguments);
  }
  function _executeWithTimeout() {
    _executeWithTimeout = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(execFn, msec, cancelCallback) {
      var timeout, pid, res;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            timeout = false;
            pid = msec != null ? setTimeout(function () {
              timeout = true;
              cancelCallback === null || cancelCallback === void 0 || cancelCallback();
            }, msec) : undefined;
            _context2.prev = 2;
            _context2.next = 5;
            return execFn();
          case 5:
            res = _context2.sent;
          case 6:
            _context2.prev = 6;
            if (pid) {
              clearTimeout(pid);
            }
            return _context2.finish(6);
          case 9:
            if (!timeout) {
              _context2.next = 11;
              break;
            }
            throw new Error('Request Timeout');
          case 11:
            return _context2.abrupt("return", res);
          case 12:
          case "end":
            return _context2.stop();
        }
      }, _callee2, null, [[2,, 6, 9]]);
    }));
    return _executeWithTimeout.apply(this, arguments);
  }
  requestHelper.executeWithTimeout = executeWithTimeout;

  var logger = {};

  (function (exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.getLogger = exports.Logger = exports.LogLevels = void 0;
    /**
     *
     */
    exports.LogLevels = {
      DEBUG: 1,
      INFO: 2,
      WARN: 3,
      ERROR: 4,
      FATAL: 5,
      NONE: 6
    };
    var LogLevelLabels = ['', 'DEBUG', 'INFO', 'WARN', 'ERROR', 'FATAL', 'NONE'];
    var globalLogLevelConfig = function () {
      var globalLogLevelStr = process.env.JSFORCE_LOG_LEVEL || commonjsGlobal.__JSFORCE_LOG_LEVEL__ || 'NONE';
      if (/^(DEBUG|INFO|WARN|ERROR|FATAL|NONE)$/i.test(globalLogLevelStr)) {
        return {
          '*': globalLogLevelStr
        };
      }
      try {
        return JSON.parse(globalLogLevelStr);
      } catch (e) {
        return {
          '*': 'NONE'
        };
      }
    }();
    function getModuleLogLevel(logLevelConfig, moduleName) {
      var logLevel = logLevelConfig[moduleName] || logLevelConfig['*'];
      return typeof logLevel === 'number' ? logLevel : exports.LogLevels[logLevel] || exports.LogLevels.NONE;
    }
    /**
     *
     */
    var Logger = /*#__PURE__*/function () {
      function Logger(moduleName) {
        var logLevelConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : globalLogLevelConfig;
        _classCallCheck(this, Logger);
        _defineProperty(this, "_moduleName", void 0);
        _defineProperty(this, "_logLevel", void 0);
        this._moduleName = moduleName;
        this._logLevel = typeof logLevelConfig === 'number' ? logLevelConfig : typeof logLevelConfig === 'string' ? exports.LogLevels[logLevelConfig] || exports.LogLevels.NONE : getModuleLogLevel(logLevelConfig, moduleName);
      }
      return _createClass(Logger, [{
        key: "createInstance",
        value: function createInstance() {
          var logLevelConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._logLevel;
          return new Logger(this._moduleName, logLevelConfig);
        }
      }, {
        key: "setLogLevel",
        value: function setLogLevel(logLevel) {
          if (typeof logLevel === 'string') {
            this._logLevel = exports.LogLevels[logLevel] || exports.LogLevels.NONE;
          } else {
            this._logLevel = logLevel;
          }
        }
      }, {
        key: "log",
        value: function log(logLevel) {
          if (this._logLevel <= logLevel) {
            for (var _len = arguments.length, messages = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              messages[_key - 1] = arguments[_key];
            }
            var msgs = ["".concat(LogLevelLabels[logLevel], "\t[").concat(this._moduleName, "] ")].concat(messages);
            if (logLevel < exports.LogLevels.ERROR) {
              var _console;
              (_console = console).log.apply(_console, _toConsumableArray(msgs)); // eslint-disable-line no-console
            } else {
              var _console2;
              (_console2 = console).error.apply(_console2, _toConsumableArray(msgs)); // eslint-disable-line no-console
            }
          }
        }
      }, {
        key: "debug",
        value: function debug() {
          for (var _len2 = arguments.length, messages = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            messages[_key2] = arguments[_key2];
          }
          this.log.apply(this, [exports.LogLevels.DEBUG].concat(messages));
        }
      }, {
        key: "info",
        value: function info() {
          for (var _len3 = arguments.length, messages = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            messages[_key3] = arguments[_key3];
          }
          this.log.apply(this, [exports.LogLevels.INFO].concat(messages));
        }
      }, {
        key: "warn",
        value: function warn() {
          for (var _len4 = arguments.length, messages = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            messages[_key4] = arguments[_key4];
          }
          this.log.apply(this, [exports.LogLevels.WARN].concat(messages));
        }
      }, {
        key: "error",
        value: function error() {
          for (var _len5 = arguments.length, messages = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
            messages[_key5] = arguments[_key5];
          }
          this.log.apply(this, [exports.LogLevels.ERROR].concat(messages));
        }
      }, {
        key: "fatal",
        value: function fatal() {
          for (var _len6 = arguments.length, messages = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
            messages[_key6] = arguments[_key6];
          }
          this.log.apply(this, [exports.LogLevels.FATAL].concat(messages));
        }
      }]);
    }();
    exports.Logger = Logger;
    var loggers = {};
    /**
     *
     */
    function getLogger(moduleName) {
      var logger = loggers[moduleName] || new Logger(moduleName);
      loggers[moduleName] = logger;
      return logger;
    }
    exports.getLogger = getLogger;
  })(logger);

  var dist = {exports: {}};

  (function (module, exports) {

    /// <reference lib="es2018"/>
    /// <reference lib="dom"/>
    /// <reference types="node"/>
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var typedArrayTypeNames = ['Int8Array', 'Uint8Array', 'Uint8ClampedArray', 'Int16Array', 'Uint16Array', 'Int32Array', 'Uint32Array', 'Float32Array', 'Float64Array', 'BigInt64Array', 'BigUint64Array'];
    function isTypedArrayName(name) {
      return typedArrayTypeNames.includes(name);
    }
    var objectTypeNames = ['Function', 'Generator', 'AsyncGenerator', 'GeneratorFunction', 'AsyncGeneratorFunction', 'AsyncFunction', 'Observable', 'Array', 'Buffer', 'Blob', 'Object', 'RegExp', 'Date', 'Error', 'Map', 'Set', 'WeakMap', 'WeakSet', 'ArrayBuffer', 'SharedArrayBuffer', 'DataView', 'Promise', 'URL', 'FormData', 'URLSearchParams', 'HTMLElement'].concat(typedArrayTypeNames);
    function isObjectTypeName(name) {
      return objectTypeNames.includes(name);
    }
    var primitiveTypeNames = ['null', 'undefined', 'string', 'number', 'bigint', 'boolean', 'symbol'];
    function isPrimitiveTypeName(name) {
      return primitiveTypeNames.includes(name);
    }
    // eslint-disable-next-line @typescript-eslint/ban-types
    function isOfType(type) {
      return function (value) {
        return _typeof(value) === type;
      };
    }
    var toString = Object.prototype.toString;
    var getObjectType = function getObjectType(value) {
      var objectTypeName = toString.call(value).slice(8, -1);
      if (/HTML\w+Element/.test(objectTypeName) && is.domElement(value)) {
        return 'HTMLElement';
      }
      if (isObjectTypeName(objectTypeName)) {
        return objectTypeName;
      }
      return undefined;
    };
    var isObjectOfType = function isObjectOfType(type) {
      return function (value) {
        return getObjectType(value) === type;
      };
    };
    function is(value) {
      if (value === null) {
        return 'null';
      }
      switch (_typeof(value)) {
        case 'undefined':
          return 'undefined';
        case 'string':
          return 'string';
        case 'number':
          return 'number';
        case 'boolean':
          return 'boolean';
        case 'function':
          return 'Function';
        case 'bigint':
          return 'bigint';
        case 'symbol':
          return 'symbol';
      }
      if (is.observable(value)) {
        return 'Observable';
      }
      if (is.array(value)) {
        return 'Array';
      }
      if (is.buffer(value)) {
        return 'Buffer';
      }
      var tagType = getObjectType(value);
      if (tagType) {
        return tagType;
      }
      if (value instanceof String || value instanceof Boolean || value instanceof Number) {
        throw new TypeError('Please don\'t use object wrappers for primitive types');
      }
      return 'Object';
    }
    is.undefined = isOfType('undefined');
    is.string = isOfType('string');
    var isNumberType = isOfType('number');
    is.number = function (value) {
      return isNumberType(value) && !is.nan(value);
    };
    is.bigint = isOfType('bigint');
    // eslint-disable-next-line @typescript-eslint/ban-types
    is.function_ = isOfType('function');
    is.null_ = function (value) {
      return value === null;
    };
    is.class_ = function (value) {
      return is.function_(value) && value.toString().startsWith('class ');
    };
    is["boolean"] = function (value) {
      return value === true || value === false;
    };
    is.symbol = isOfType('symbol');
    is.numericString = function (value) {
      return is.string(value) && !is.emptyStringOrWhitespace(value) && !Number.isNaN(Number(value));
    };
    is.array = function (value, assertion) {
      if (!Array.isArray(value)) {
        return false;
      }
      if (!is.function_(assertion)) {
        return true;
      }
      return value.every(assertion);
    };
    is.buffer = function (value) {
      var _a, _b, _c, _d;
      return (_d = (_c = (_b = (_a = value) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.isBuffer) === null || _c === void 0 ? void 0 : _c.call(_b, value)) !== null && _d !== void 0 ? _d : false;
    };
    is.blob = function (value) {
      return isObjectOfType('Blob')(value);
    };
    is.nullOrUndefined = function (value) {
      return is.null_(value) || is.undefined(value);
    };
    is.object = function (value) {
      return !is.null_(value) && (_typeof(value) === 'object' || is.function_(value));
    };
    is.iterable = function (value) {
      var _a;
      return is.function_((_a = value) === null || _a === void 0 ? void 0 : _a[Symbol.iterator]);
    };
    is.asyncIterable = function (value) {
      var _a;
      return is.function_((_a = value) === null || _a === void 0 ? void 0 : _a[Symbol.asyncIterator]);
    };
    is.generator = function (value) {
      var _a, _b;
      return is.iterable(value) && is.function_((_a = value) === null || _a === void 0 ? void 0 : _a.next) && is.function_((_b = value) === null || _b === void 0 ? void 0 : _b["throw"]);
    };
    is.asyncGenerator = function (value) {
      return is.asyncIterable(value) && is.function_(value.next) && is.function_(value["throw"]);
    };
    is.nativePromise = function (value) {
      return isObjectOfType('Promise')(value);
    };
    var hasPromiseAPI = function hasPromiseAPI(value) {
      var _a, _b;
      return is.function_((_a = value) === null || _a === void 0 ? void 0 : _a.then) && is.function_((_b = value) === null || _b === void 0 ? void 0 : _b["catch"]);
    };
    is.promise = function (value) {
      return is.nativePromise(value) || hasPromiseAPI(value);
    };
    is.generatorFunction = isObjectOfType('GeneratorFunction');
    is.asyncGeneratorFunction = function (value) {
      return getObjectType(value) === 'AsyncGeneratorFunction';
    };
    is.asyncFunction = function (value) {
      return getObjectType(value) === 'AsyncFunction';
    };
    // eslint-disable-next-line no-prototype-builtins, @typescript-eslint/ban-types
    is.boundFunction = function (value) {
      return is.function_(value) && !value.hasOwnProperty('prototype');
    };
    is.regExp = isObjectOfType('RegExp');
    is.date = isObjectOfType('Date');
    is.error = isObjectOfType('Error');
    is.map = function (value) {
      return isObjectOfType('Map')(value);
    };
    is.set = function (value) {
      return isObjectOfType('Set')(value);
    };
    is.weakMap = function (value) {
      return isObjectOfType('WeakMap')(value);
    };
    is.weakSet = function (value) {
      return isObjectOfType('WeakSet')(value);
    };
    is.int8Array = isObjectOfType('Int8Array');
    is.uint8Array = isObjectOfType('Uint8Array');
    is.uint8ClampedArray = isObjectOfType('Uint8ClampedArray');
    is.int16Array = isObjectOfType('Int16Array');
    is.uint16Array = isObjectOfType('Uint16Array');
    is.int32Array = isObjectOfType('Int32Array');
    is.uint32Array = isObjectOfType('Uint32Array');
    is.float32Array = isObjectOfType('Float32Array');
    is.float64Array = isObjectOfType('Float64Array');
    is.bigInt64Array = isObjectOfType('BigInt64Array');
    is.bigUint64Array = isObjectOfType('BigUint64Array');
    is.arrayBuffer = isObjectOfType('ArrayBuffer');
    is.sharedArrayBuffer = isObjectOfType('SharedArrayBuffer');
    is.dataView = isObjectOfType('DataView');
    is.enumCase = function (value, targetEnum) {
      return Object.values(targetEnum).includes(value);
    };
    is.directInstanceOf = function (instance, class_) {
      return Object.getPrototypeOf(instance) === class_.prototype;
    };
    is.urlInstance = function (value) {
      return isObjectOfType('URL')(value);
    };
    is.urlString = function (value) {
      if (!is.string(value)) {
        return false;
      }
      try {
        new URL(value); // eslint-disable-line no-new
        return true;
      } catch (_a) {
        return false;
      }
    };
    // Example: `is.truthy = (value: unknown): value is (not false | not 0 | not '' | not undefined | not null) => Boolean(value);`
    is.truthy = function (value) {
      return Boolean(value);
    };
    // Example: `is.falsy = (value: unknown): value is (not true | 0 | '' | undefined | null) => Boolean(value);`
    is.falsy = function (value) {
      return !value;
    };
    is.nan = function (value) {
      return Number.isNaN(value);
    };
    is.primitive = function (value) {
      return is.null_(value) || isPrimitiveTypeName(_typeof(value));
    };
    is.integer = function (value) {
      return Number.isInteger(value);
    };
    is.safeInteger = function (value) {
      return Number.isSafeInteger(value);
    };
    is.plainObject = function (value) {
      // From: https://github.com/sindresorhus/is-plain-obj/blob/main/index.js
      if (toString.call(value) !== '[object Object]') {
        return false;
      }
      var prototype = Object.getPrototypeOf(value);
      return prototype === null || prototype === Object.getPrototypeOf({});
    };
    is.typedArray = function (value) {
      return isTypedArrayName(getObjectType(value));
    };
    var isValidLength = function isValidLength(value) {
      return is.safeInteger(value) && value >= 0;
    };
    is.arrayLike = function (value) {
      return !is.nullOrUndefined(value) && !is.function_(value) && isValidLength(value.length);
    };
    is.inRange = function (value, range) {
      if (is.number(range)) {
        return value >= Math.min(0, range) && value <= Math.max(range, 0);
      }
      if (is.array(range) && range.length === 2) {
        return value >= Math.min.apply(Math, _toConsumableArray(range)) && value <= Math.max.apply(Math, _toConsumableArray(range));
      }
      throw new TypeError("Invalid range: ".concat(JSON.stringify(range)));
    };
    var NODE_TYPE_ELEMENT = 1;
    var DOM_PROPERTIES_TO_CHECK = ['innerHTML', 'ownerDocument', 'style', 'attributes', 'nodeValue'];
    is.domElement = function (value) {
      return is.object(value) && value.nodeType === NODE_TYPE_ELEMENT && is.string(value.nodeName) && !is.plainObject(value) && DOM_PROPERTIES_TO_CHECK.every(function (property) {
        return property in value;
      });
    };
    is.observable = function (value) {
      var _a, _b, _c, _d;
      if (!value) {
        return false;
      }
      // eslint-disable-next-line no-use-extend-native/no-use-extend-native
      if (value === ((_b = (_a = value)[Symbol.observable]) === null || _b === void 0 ? void 0 : _b.call(_a))) {
        return true;
      }
      if (value === ((_d = (_c = value)['@@observable']) === null || _d === void 0 ? void 0 : _d.call(_c))) {
        return true;
      }
      return false;
    };
    is.nodeStream = function (value) {
      return is.object(value) && is.function_(value.pipe) && !is.observable(value);
    };
    is.infinite = function (value) {
      return value === Infinity || value === -Infinity;
    };
    var isAbsoluteMod2 = function isAbsoluteMod2(remainder) {
      return function (value) {
        return is.integer(value) && Math.abs(value % 2) === remainder;
      };
    };
    is.evenInteger = isAbsoluteMod2(0);
    is.oddInteger = isAbsoluteMod2(1);
    is.emptyArray = function (value) {
      return is.array(value) && value.length === 0;
    };
    is.nonEmptyArray = function (value) {
      return is.array(value) && value.length > 0;
    };
    is.emptyString = function (value) {
      return is.string(value) && value.length === 0;
    };
    var isWhiteSpaceString = function isWhiteSpaceString(value) {
      return is.string(value) && !/\S/.test(value);
    };
    is.emptyStringOrWhitespace = function (value) {
      return is.emptyString(value) || isWhiteSpaceString(value);
    };
    // TODO: Use `not ''` when the `not` operator is available.
    is.nonEmptyString = function (value) {
      return is.string(value) && value.length > 0;
    };
    // TODO: Use `not ''` when the `not` operator is available.
    is.nonEmptyStringAndNotWhitespace = function (value) {
      return is.string(value) && !is.emptyStringOrWhitespace(value);
    };
    is.emptyObject = function (value) {
      return is.object(value) && !is.map(value) && !is.set(value) && Object.keys(value).length === 0;
    };
    // TODO: Use `not` operator here to remove `Map` and `Set` from type guard:
    // - https://github.com/Microsoft/TypeScript/pull/29317
    is.nonEmptyObject = function (value) {
      return is.object(value) && !is.map(value) && !is.set(value) && Object.keys(value).length > 0;
    };
    is.emptySet = function (value) {
      return is.set(value) && value.size === 0;
    };
    is.nonEmptySet = function (value) {
      return is.set(value) && value.size > 0;
    };
    is.emptyMap = function (value) {
      return is.map(value) && value.size === 0;
    };
    is.nonEmptyMap = function (value) {
      return is.map(value) && value.size > 0;
    };
    // `PropertyKey` is any value that can be used as an object key (string, number, or symbol)
    is.propertyKey = function (value) {
      return is.any([is.string, is.number, is.symbol], value);
    };
    is.formData = function (value) {
      return isObjectOfType('FormData')(value);
    };
    is.urlSearchParams = function (value) {
      return isObjectOfType('URLSearchParams')(value);
    };
    var predicateOnArray = function predicateOnArray(method, predicate, values) {
      if (!is.function_(predicate)) {
        throw new TypeError("Invalid predicate: ".concat(JSON.stringify(predicate)));
      }
      if (values.length === 0) {
        throw new TypeError('Invalid number of values');
      }
      return method.call(values, predicate);
    };
    is.any = function (predicate) {
      for (var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        values[_key - 1] = arguments[_key];
      }
      var predicates = is.array(predicate) ? predicate : [predicate];
      return predicates.some(function (singlePredicate) {
        return predicateOnArray(Array.prototype.some, singlePredicate, values);
      });
    };
    is.all = function (predicate) {
      for (var _len2 = arguments.length, values = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        values[_key2 - 1] = arguments[_key2];
      }
      return predicateOnArray(Array.prototype.every, predicate, values);
    };
    var assertType = function assertType(condition, description, value) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      if (!condition) {
        var multipleValues = options.multipleValues;
        var valuesMessage = multipleValues ? "received values of types ".concat(_toConsumableArray(new Set(value.map(function (singleValue) {
          return "`".concat(is(singleValue), "`");
        }))).join(', ')) : "received value of type `".concat(is(value), "`");
        throw new TypeError("Expected value which is `".concat(description, "`, ").concat(valuesMessage, "."));
      }
    };
    exports.assert = {
      // Unknowns.
      undefined: function undefined$1(value) {
        return assertType(is.undefined(value), 'undefined', value);
      },
      string: function string(value) {
        return assertType(is.string(value), 'string', value);
      },
      number: function number(value) {
        return assertType(is.number(value), 'number', value);
      },
      bigint: function bigint(value) {
        return assertType(is.bigint(value), 'bigint', value);
      },
      // eslint-disable-next-line @typescript-eslint/ban-types
      function_: function function_(value) {
        return assertType(is.function_(value), 'Function', value);
      },
      null_: function null_(value) {
        return assertType(is.null_(value), 'null', value);
      },
      class_: function class_(value) {
        return assertType(is.class_(value), "Class" /* class_ */, value);
      },
      "boolean": function boolean(value) {
        return assertType(is["boolean"](value), 'boolean', value);
      },
      symbol: function symbol(value) {
        return assertType(is.symbol(value), 'symbol', value);
      },
      numericString: function numericString(value) {
        return assertType(is.numericString(value), "string with a number" /* numericString */, value);
      },
      array: function array(value, assertion) {
        var assert = assertType;
        assert(is.array(value), 'Array', value);
        if (assertion) {
          value.forEach(assertion);
        }
      },
      buffer: function buffer(value) {
        return assertType(is.buffer(value), 'Buffer', value);
      },
      blob: function blob(value) {
        return assertType(is.blob(value), 'Blob', value);
      },
      nullOrUndefined: function nullOrUndefined(value) {
        return assertType(is.nullOrUndefined(value), "null or undefined" /* nullOrUndefined */, value);
      },
      object: function object(value) {
        return assertType(is.object(value), 'Object', value);
      },
      iterable: function iterable(value) {
        return assertType(is.iterable(value), "Iterable" /* iterable */, value);
      },
      asyncIterable: function asyncIterable(value) {
        return assertType(is.asyncIterable(value), "AsyncIterable" /* asyncIterable */, value);
      },
      generator: function generator(value) {
        return assertType(is.generator(value), 'Generator', value);
      },
      asyncGenerator: function asyncGenerator(value) {
        return assertType(is.asyncGenerator(value), 'AsyncGenerator', value);
      },
      nativePromise: function nativePromise(value) {
        return assertType(is.nativePromise(value), "native Promise" /* nativePromise */, value);
      },
      promise: function promise(value) {
        return assertType(is.promise(value), 'Promise', value);
      },
      generatorFunction: function generatorFunction(value) {
        return assertType(is.generatorFunction(value), 'GeneratorFunction', value);
      },
      asyncGeneratorFunction: function asyncGeneratorFunction(value) {
        return assertType(is.asyncGeneratorFunction(value), 'AsyncGeneratorFunction', value);
      },
      // eslint-disable-next-line @typescript-eslint/ban-types
      asyncFunction: function asyncFunction(value) {
        return assertType(is.asyncFunction(value), 'AsyncFunction', value);
      },
      // eslint-disable-next-line @typescript-eslint/ban-types
      boundFunction: function boundFunction(value) {
        return assertType(is.boundFunction(value), 'Function', value);
      },
      regExp: function regExp(value) {
        return assertType(is.regExp(value), 'RegExp', value);
      },
      date: function date(value) {
        return assertType(is.date(value), 'Date', value);
      },
      error: function error(value) {
        return assertType(is.error(value), 'Error', value);
      },
      map: function map(value) {
        return assertType(is.map(value), 'Map', value);
      },
      set: function set(value) {
        return assertType(is.set(value), 'Set', value);
      },
      weakMap: function weakMap(value) {
        return assertType(is.weakMap(value), 'WeakMap', value);
      },
      weakSet: function weakSet(value) {
        return assertType(is.weakSet(value), 'WeakSet', value);
      },
      int8Array: function int8Array(value) {
        return assertType(is.int8Array(value), 'Int8Array', value);
      },
      uint8Array: function uint8Array(value) {
        return assertType(is.uint8Array(value), 'Uint8Array', value);
      },
      uint8ClampedArray: function uint8ClampedArray(value) {
        return assertType(is.uint8ClampedArray(value), 'Uint8ClampedArray', value);
      },
      int16Array: function int16Array(value) {
        return assertType(is.int16Array(value), 'Int16Array', value);
      },
      uint16Array: function uint16Array(value) {
        return assertType(is.uint16Array(value), 'Uint16Array', value);
      },
      int32Array: function int32Array(value) {
        return assertType(is.int32Array(value), 'Int32Array', value);
      },
      uint32Array: function uint32Array(value) {
        return assertType(is.uint32Array(value), 'Uint32Array', value);
      },
      float32Array: function float32Array(value) {
        return assertType(is.float32Array(value), 'Float32Array', value);
      },
      float64Array: function float64Array(value) {
        return assertType(is.float64Array(value), 'Float64Array', value);
      },
      bigInt64Array: function bigInt64Array(value) {
        return assertType(is.bigInt64Array(value), 'BigInt64Array', value);
      },
      bigUint64Array: function bigUint64Array(value) {
        return assertType(is.bigUint64Array(value), 'BigUint64Array', value);
      },
      arrayBuffer: function arrayBuffer(value) {
        return assertType(is.arrayBuffer(value), 'ArrayBuffer', value);
      },
      sharedArrayBuffer: function sharedArrayBuffer(value) {
        return assertType(is.sharedArrayBuffer(value), 'SharedArrayBuffer', value);
      },
      dataView: function dataView(value) {
        return assertType(is.dataView(value), 'DataView', value);
      },
      enumCase: function enumCase(value, targetEnum) {
        return assertType(is.enumCase(value, targetEnum), 'EnumCase', value);
      },
      urlInstance: function urlInstance(value) {
        return assertType(is.urlInstance(value), 'URL', value);
      },
      urlString: function urlString(value) {
        return assertType(is.urlString(value), "string with a URL" /* urlString */, value);
      },
      truthy: function truthy(value) {
        return assertType(is.truthy(value), "truthy" /* truthy */, value);
      },
      falsy: function falsy(value) {
        return assertType(is.falsy(value), "falsy" /* falsy */, value);
      },
      nan: function nan(value) {
        return assertType(is.nan(value), "NaN" /* nan */, value);
      },
      primitive: function primitive(value) {
        return assertType(is.primitive(value), "primitive" /* primitive */, value);
      },
      integer: function integer(value) {
        return assertType(is.integer(value), "integer" /* integer */, value);
      },
      safeInteger: function safeInteger(value) {
        return assertType(is.safeInteger(value), "integer" /* safeInteger */, value);
      },
      plainObject: function plainObject(value) {
        return assertType(is.plainObject(value), "plain object" /* plainObject */, value);
      },
      typedArray: function typedArray(value) {
        return assertType(is.typedArray(value), "TypedArray" /* typedArray */, value);
      },
      arrayLike: function arrayLike(value) {
        return assertType(is.arrayLike(value), "array-like" /* arrayLike */, value);
      },
      domElement: function domElement(value) {
        return assertType(is.domElement(value), "HTMLElement" /* domElement */, value);
      },
      observable: function observable(value) {
        return assertType(is.observable(value), 'Observable', value);
      },
      nodeStream: function nodeStream(value) {
        return assertType(is.nodeStream(value), "Node.js Stream" /* nodeStream */, value);
      },
      infinite: function infinite(value) {
        return assertType(is.infinite(value), "infinite number" /* infinite */, value);
      },
      emptyArray: function emptyArray(value) {
        return assertType(is.emptyArray(value), "empty array" /* emptyArray */, value);
      },
      nonEmptyArray: function nonEmptyArray(value) {
        return assertType(is.nonEmptyArray(value), "non-empty array" /* nonEmptyArray */, value);
      },
      emptyString: function emptyString(value) {
        return assertType(is.emptyString(value), "empty string" /* emptyString */, value);
      },
      emptyStringOrWhitespace: function emptyStringOrWhitespace(value) {
        return assertType(is.emptyStringOrWhitespace(value), "empty string or whitespace" /* emptyStringOrWhitespace */, value);
      },
      nonEmptyString: function nonEmptyString(value) {
        return assertType(is.nonEmptyString(value), "non-empty string" /* nonEmptyString */, value);
      },
      nonEmptyStringAndNotWhitespace: function nonEmptyStringAndNotWhitespace(value) {
        return assertType(is.nonEmptyStringAndNotWhitespace(value), "non-empty string and not whitespace" /* nonEmptyStringAndNotWhitespace */, value);
      },
      emptyObject: function emptyObject(value) {
        return assertType(is.emptyObject(value), "empty object" /* emptyObject */, value);
      },
      nonEmptyObject: function nonEmptyObject(value) {
        return assertType(is.nonEmptyObject(value), "non-empty object" /* nonEmptyObject */, value);
      },
      emptySet: function emptySet(value) {
        return assertType(is.emptySet(value), "empty set" /* emptySet */, value);
      },
      nonEmptySet: function nonEmptySet(value) {
        return assertType(is.nonEmptySet(value), "non-empty set" /* nonEmptySet */, value);
      },
      emptyMap: function emptyMap(value) {
        return assertType(is.emptyMap(value), "empty map" /* emptyMap */, value);
      },
      nonEmptyMap: function nonEmptyMap(value) {
        return assertType(is.nonEmptyMap(value), "non-empty map" /* nonEmptyMap */, value);
      },
      propertyKey: function propertyKey(value) {
        return assertType(is.propertyKey(value), 'PropertyKey', value);
      },
      formData: function formData(value) {
        return assertType(is.formData(value), 'FormData', value);
      },
      urlSearchParams: function urlSearchParams(value) {
        return assertType(is.urlSearchParams(value), 'URLSearchParams', value);
      },
      // Numbers.
      evenInteger: function evenInteger(value) {
        return assertType(is.evenInteger(value), "even integer" /* evenInteger */, value);
      },
      oddInteger: function oddInteger(value) {
        return assertType(is.oddInteger(value), "odd integer" /* oddInteger */, value);
      },
      // Two arguments.
      directInstanceOf: function directInstanceOf(instance, class_) {
        return assertType(is.directInstanceOf(instance, class_), "T" /* directInstanceOf */, instance);
      },
      inRange: function inRange(value, range) {
        return assertType(is.inRange(value, range), "in range" /* inRange */, value);
      },
      // Variadic functions.
      any: function any(predicate) {
        for (var _len3 = arguments.length, values = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
          values[_key3 - 1] = arguments[_key3];
        }
        return assertType(is.any.apply(is, [predicate].concat(values)), "predicate returns truthy for any value" /* any */, values, {
          multipleValues: true
        });
      },
      all: function all(predicate) {
        for (var _len4 = arguments.length, values = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
          values[_key4 - 1] = arguments[_key4];
        }
        return assertType(is.all.apply(is, [predicate].concat(values)), "predicate returns truthy for all values" /* all */, values, {
          multipleValues: true
        });
      }
    };
    // Some few keywords are reserved, but we'll populate them for Node.js users
    // See https://github.com/Microsoft/TypeScript/issues/2536
    Object.defineProperties(is, {
      "class": {
        value: is.class_
      },
      "function": {
        value: is.function_
      },
      "null": {
        value: is.null_
      }
    });
    Object.defineProperties(exports.assert, {
      "class": {
        value: exports.assert.class_
      },
      "function": {
        value: exports.assert.function_
      },
      "null": {
        value: exports.assert.null_
      }
    });
    exports["default"] = is;
    // For CommonJS default export support
    module.exports = is;
    module.exports["default"] = is;
    module.exports.assert = exports.assert;
  })(dist, dist.exports);
  var distExports = dist.exports;

  var _excluded$a = ["url", "body"];
  var __createBinding$3 = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = {
        enumerable: true,
        get: function get() {
          return m[k];
        }
      };
    }
    Object.defineProperty(o, k2, desc);
  } : function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault$3 = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function (o, v) {
    Object.defineProperty(o, "default", {
      enumerable: true,
      value: v
    });
  } : function (o, v) {
    o["default"] = v;
  });
  var __importStar$3 = commonjsGlobal && commonjsGlobal.__importStar || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$3(result, mod, k);
    __setModuleDefault$3(result, mod);
    return result;
  };
  var __importDefault$b = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };
  Object.defineProperty(request$1, "__esModule", {
    value: true
  });
  request$1.setDefaults = void 0;
  var stream_1$7 = require$$0$3;
  var node_fetch_1 = __importStar$3(require$$1$1);
  var abort_controller_1 = __importDefault$b(require$$2);
  var https_proxy_agent_1 = __importDefault$b(dist$1);
  var request_helper_1 = requestHelper;
  var logger_1$4 = logger;
  var is_1$3 = __importDefault$b(distExports);
  /**
   *
   */
  var defaults$1 = {};
  /**
   *
   */
  function setDefaults(defaults_) {
    defaults$1 = defaults_;
  }
  request$1.setDefaults = setDefaults;
  /**
   *
   */
  function startFetchRequest(_x, _x2, _x3, _x4, _x5) {
    return _startFetchRequest.apply(this, arguments);
  }
  /**
   *
   */
  function _startFetchRequest() {
    _startFetchRequest = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(request, options, input, output, emitter) {
      var _options$retry$status, _options$retry, _options$retry$maxRet, _options$retry2, _options$retry$minTim, _options$retry3, _options$retry$timeou, _options$retry4, _options$retry$errorC, _options$retry5, _options$retry$method, _options$retry6;
      var counter,
        logger,
        httpProxy,
        followRedirect,
        agent,
        url,
        body,
        rrequest,
        controller,
        retryCount,
        retryOpts,
        shouldRetryRequest,
        fetchWithRetries,
        res,
        headers,
        _iterator,
        _step,
        headerName,
        response,
        _args2 = arguments;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            counter = _args2.length > 5 && _args2[5] !== undefined ? _args2[5] : 0;
            logger = (0, logger_1$4.getLogger)('fetch');
            httpProxy = options.httpProxy, followRedirect = options.followRedirect;
            agent = httpProxy ? (0, https_proxy_agent_1["default"])(httpProxy) : undefined;
            url = request.url, body = request.body, rrequest = _objectWithoutProperties(request, _excluded$a);
            controller = new abort_controller_1["default"]();
            retryCount = 0;
            retryOpts = {
              statusCodes: (_options$retry$status = (_options$retry = options.retry) === null || _options$retry === void 0 ? void 0 : _options$retry.statusCodes) !== null && _options$retry$status !== void 0 ? _options$retry$status : [420, 429, 500, 502, 503, 504],
              maxRetries: (_options$retry$maxRet = (_options$retry2 = options.retry) === null || _options$retry2 === void 0 ? void 0 : _options$retry2.maxRetries) !== null && _options$retry$maxRet !== void 0 ? _options$retry$maxRet : 5,
              minTimeout: (_options$retry$minTim = (_options$retry3 = options.retry) === null || _options$retry3 === void 0 ? void 0 : _options$retry3.minTimeout) !== null && _options$retry$minTim !== void 0 ? _options$retry$minTim : 500,
              timeoutFactor: (_options$retry$timeou = (_options$retry4 = options.retry) === null || _options$retry4 === void 0 ? void 0 : _options$retry4.timeoutFactor) !== null && _options$retry$timeou !== void 0 ? _options$retry$timeou : 2,
              errorCodes: (_options$retry$errorC = (_options$retry5 = options.retry) === null || _options$retry5 === void 0 ? void 0 : _options$retry5.errorCodes) !== null && _options$retry$errorC !== void 0 ? _options$retry$errorC : ['ECONNRESET', 'ECONNREFUSED', 'ENOTFOUND', 'ENETDOWN', 'ENETUNREACH', 'EHOSTDOWN', 'UND_ERR_SOCKET', 'ETIMEDOUT', 'EPIPE'],
              methods: (_options$retry$method = (_options$retry6 = options.retry) === null || _options$retry6 === void 0 ? void 0 : _options$retry6.methods) !== null && _options$retry$method !== void 0 ? _options$retry$method : ['GET', 'PUT', 'HEAD', 'OPTIONS', 'DELETE']
            };
            shouldRetryRequest = function shouldRetryRequest(maxRetry, resOrErr) {
              if (!retryOpts.methods.includes(request.method)) return false;
              if (resOrErr instanceof node_fetch_1.Response) {
                if (retryOpts.statusCodes.includes(resOrErr.status)) {
                  if (maxRetry === retryCount) {
                    var err = new Error('Request failed');
                    err.name = 'RequestRetryError';
                    throw err;
                  } else {
                    return true;
                  }
                }
                return false;
              } else {
                var _retryOpts$errorCodes;
                if (maxRetry === retryCount) return false;
                // only retry on operational errors
                // https://github.com/node-fetch/node-fetch/blob/2.x/ERROR-HANDLING.md#error-handling-with-node-fetch
                if (resOrErr.name != 'FetchError') return false;
                if (is_1$3["default"].nodeStream(body) && stream_1$7.Readable.isDisturbed(body)) {
                  logger.debug('Body of type stream was read, unable to retry request.');
                  return false;
                }
                if ('code' in resOrErr && resOrErr.code && retryOpts !== null && retryOpts !== void 0 && (_retryOpts$errorCodes = retryOpts.errorCodes) !== null && _retryOpts$errorCodes !== void 0 && _retryOpts$errorCodes.includes(resOrErr.code)) return true;
                return false;
              }
            };
            fetchWithRetries = /*#__PURE__*/function () {
              var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
                var maxRetry,
                  fetchOpts,
                  _res,
                  error,
                  _error,
                  _args = arguments;
                return _regeneratorRuntime().wrap(function _callee$(_context) {
                  while (1) switch (_context.prev = _context.next) {
                    case 0:
                      maxRetry = _args.length > 0 && _args[0] !== undefined ? _args[0] : retryOpts === null || retryOpts === void 0 ? void 0 : retryOpts.maxRetries;
                      fetchOpts = _objectSpread2(_objectSpread2(_objectSpread2({}, rrequest), input && /^(post|put|patch)$/i.test(request.method) ? {
                        body: input
                      } : {}), {}, {
                        redirect: 'manual',
                        // @ts-expect-error - differing types of signal? this started abruptly
                        signal: controller.signal,
                        agent: agent
                      });
                      _context.prev = 2;
                      _context.next = 5;
                      return (0, node_fetch_1["default"])(url, fetchOpts);
                    case 5:
                      _res = _context.sent;
                      if (!shouldRetryRequest(retryOpts.maxRetries, _res)) {
                        _context.next = 16;
                        break;
                      }
                      logger.debug("retrying for the ".concat(retryCount + 1, " time"));
                      logger.debug('reason: statusCode match');
                      _context.next = 11;
                      return sleep(retryCount === 0 ? retryOpts.minTimeout : retryOpts.minTimeout * Math.pow(retryOpts.timeoutFactor, retryCount));
                    case 11:
                      // NOTE: this event is only used by tests and will be removed at any time.
                      // jsforce may switch to node's fetch which doesn't emit this event on retries.
                      emitter.emit('retry', retryCount);
                      retryCount++;
                      _context.next = 15;
                      return fetchWithRetries(maxRetry);
                    case 15:
                      return _context.abrupt("return", _context.sent);
                    case 16:
                      return _context.abrupt("return", _res);
                    case 19:
                      _context.prev = 19;
                      _context.t0 = _context["catch"](2);
                      logger.debug('Request failed');
                      error = _context.t0; // request was canceled by consumer (AbortController), skip retry and rethrow.
                      if (!(error.name === 'AbortError')) {
                        _context.next = 25;
                        break;
                      }
                      throw error;
                    case 25:
                      if (!shouldRetryRequest(retryOpts.maxRetries, error)) {
                        _context.next = 33;
                        break;
                      }
                      logger.debug("retrying for the ".concat(retryCount + 1, " time"));
                      logger.debug("Error: ".concat(_context.t0.message));
                      _context.next = 30;
                      return sleep(retryCount === 0 ? retryOpts.minTimeout : retryOpts.minTimeout * Math.pow(retryOpts.timeoutFactor, retryCount));
                    case 30:
                      // NOTE: this event is only used by tests and will be removed at any time.
                      // jsforce may switch to node's fetch which doesn't emit this event on retries.
                      emitter.emit('retry', retryCount);
                      retryCount++;
                      return _context.abrupt("return", fetchWithRetries(maxRetry));
                    case 33:
                      logger.debug('Skipping retry...');
                      if (!(maxRetry === retryCount)) {
                        _context.next = 40;
                        break;
                      }
                      _error = new Error('Request failed', {
                        cause: _context.t0
                      });
                      _error.name = 'RequestRetryError';
                      throw _error;
                    case 40:
                      throw _context.t0;
                    case 41:
                    case "end":
                      return _context.stop();
                  }
                }, _callee, null, [[2, 19]]);
              }));
              return function fetchWithRetries() {
                return _ref2.apply(this, arguments);
              };
            }();
            _context2.prev = 10;
            _context2.next = 13;
            return (0, request_helper_1.executeWithTimeout)(fetchWithRetries, options.timeout, function () {
              return controller.abort();
            });
          case 13:
            res = _context2.sent;
            _context2.next = 20;
            break;
          case 16:
            _context2.prev = 16;
            _context2.t0 = _context2["catch"](10);
            emitter.emit('error', _context2.t0);
            return _context2.abrupt("return");
          case 20:
            headers = {};
            _iterator = _createForOfIteratorHelper(res.headers.keys());
            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                headerName = _step.value;
                headers[headerName.toLowerCase()] = res.headers.get(headerName);
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
            response = {
              statusCode: res.status,
              headers: headers
            };
            if (!(followRedirect && (0, request_helper_1.isRedirect)(response.statusCode))) {
              _context2.next = 27;
              break;
            }
            try {
              (0, request_helper_1.performRedirectRequest)(request, response, followRedirect, counter, function (req) {
                return startFetchRequest(req, options, undefined, output, emitter, counter + 1);
              });
            } catch (err) {
              emitter.emit('error', err);
            }
            return _context2.abrupt("return");
          case 27:
            emitter.emit('response', response);
            res.body.pipe(output);
          case 29:
          case "end":
            return _context2.stop();
        }
      }, _callee2, null, [[10, 16]]);
    }));
    return _startFetchRequest.apply(this, arguments);
  }
  function request(req) {
    var options_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var options = _objectSpread2(_objectSpread2({}, defaults$1), options_);
    var _ref = (0, request_helper_1.createHttpRequestHandlerStreams)(req, options),
      input = _ref.input,
      output = _ref.output,
      stream = _ref.stream;
    startFetchRequest(req, options, input, output, stream);
    return stream;
  }
  request$1["default"] = request;
  var sleep = function sleep(ms) {
    return new Promise(function (r) {
      return setTimeout(r, ms);
    });
  };

  var promise$1 = {};

  Object.defineProperty(promise$1, "__esModule", {
    value: true
  });
  promise$1.StreamPromise = void 0;
  /**
   *
   */
  var stream_1$6 = require$$0$3;
  /**
   *
   */
  var StreamPromise = /*#__PURE__*/function (_Promise) {
    function StreamPromise() {
      _classCallCheck(this, StreamPromise);
      return _callSuper(this, StreamPromise, arguments);
    }
    _inherits(StreamPromise, _Promise);
    return _createClass(StreamPromise, [{
      key: "stream",
      value: function stream() {
        // dummy
        return new stream_1$6.Duplex();
      }
    }], [{
      key: "create",
      value: function create(builder) {
        var _builder = builder(),
          stream = _builder.stream,
          promise = _builder.promise;
        var streamPromise = new StreamPromise(function (resolve, reject) {
          promise.then(resolve, reject);
        });
        streamPromise.stream = function () {
          return stream;
        };
        return streamPromise;
      }
    }]);
  }(/*#__PURE__*/_wrapNativeSuper(Promise));
  promise$1.StreamPromise = StreamPromise;

  var jsonp = {};

  Object.defineProperty(jsonp, "__esModule", {
    value: true
  });
  /**
   *
   */
  var stream_1$5 = require$$0$3;
  var _index = 0;
  function processJsonpRequest(_x, _x2, _x3) {
    return _processJsonpRequest.apply(this, arguments);
  }
  function _processJsonpRequest() {
    _processJsonpRequest = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(params, jsonpParam, timeout) {
      var cbFuncName, callbacks, url, script, pid, res;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            if (!(params.method.toUpperCase() !== 'GET')) {
              _context2.next = 2;
              break;
            }
            throw new Error('JSONP only supports GET request.');
          case 2:
            _index += 1;
            cbFuncName = "_jsforce_jsonpCallback_".concat(_index);
            callbacks = window;
            url = params.url;
            url += url.indexOf('?') > 0 ? '&' : '?';
            url += "".concat(jsonpParam, "=").concat(cbFuncName);
            script = document.createElement('script');
            script.type = 'text/javascript';
            script.src = url;
            if (document.documentElement) {
              document.documentElement.appendChild(script);
            }
            _context2.prev = 12;
            _context2.next = 15;
            return new Promise(function (resolve, reject) {
              pid = setTimeout(function () {
                reject(new Error('JSONP call time out.'));
              }, timeout);
              callbacks[cbFuncName] = resolve;
            });
          case 15:
            res = _context2.sent;
            return _context2.abrupt("return", {
              statusCode: 200,
              headers: {
                'content-type': 'application/json'
              },
              body: JSON.stringify(res)
            });
          case 17:
            _context2.prev = 17;
            clearTimeout(pid);
            if (document.documentElement) {
              document.documentElement.removeChild(script);
            }
            delete callbacks[cbFuncName];
            return _context2.finish(17);
          case 22:
          case "end":
            return _context2.stop();
        }
      }, _callee2, null, [[12,, 17, 22]]);
    }));
    return _processJsonpRequest.apply(this, arguments);
  }
  function createRequest$1() {
    var jsonpParam = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'callback';
    var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10000;
    return function (params) {
      var stream = new stream_1$5.Transform({
        transform: function transform(chunk, encoding, callback) {
          callback();
        },
        flush: function flush() {
          _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var response;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return processJsonpRequest(params, jsonpParam, timeout);
                case 2:
                  response = _context.sent;
                  stream.emit('response', response);
                  stream.emit('complete', response);
                  stream.push(response.body);
                  stream.push(null);
                case 7:
                case "end":
                  return _context.stop();
              }
            }, _callee);
          }))();
        }
      });
      stream.end();
      return stream;
    };
  }
  jsonp["default"] = {
    supported: typeof window !== 'undefined' && typeof document !== 'undefined',
    createRequest: createRequest$1
  };

  var canvas = {};

  Object.defineProperty(canvas, "__esModule", {
    value: true
  });
  /**
   *
   */
  var stream_1$4 = require$$0$3;
  function parseHeaders(hs) {
    var headers = {};
    var _iterator = _createForOfIteratorHelper(hs.split(/\n/)),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var line = _step.value;
        var _line$split = line.split(/\s*:\s*/),
          _line$split2 = _slicedToArray(_line$split, 2),
          name = _line$split2[0],
          value = _line$split2[1];
        headers[name.toLowerCase()] = value;
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    return headers;
  }
  function processCanvasRequest(_x, _x2, _x3) {
    return _processCanvasRequest.apply(this, arguments);
  }
  function _processCanvasRequest() {
    _processCanvasRequest = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(params, signedRequest, requestBody) {
      var settings, paramHeaders, _i, _Object$keys, name, data, headers, responseBody;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            settings = {
              client: signedRequest.client,
              method: params.method,
              data: requestBody
            };
            paramHeaders = params.headers;
            if (paramHeaders) {
              settings.headers = {};
              for (_i = 0, _Object$keys = Object.keys(paramHeaders); _i < _Object$keys.length; _i++) {
                name = _Object$keys[_i];
                if (name.toLowerCase() === 'content-type') {
                  settings.contentType = paramHeaders[name];
                } else {
                  settings.headers[name] = paramHeaders[name];
                }
              }
            }
            _context2.next = 5;
            return new Promise(function (resolve, reject) {
              settings.success = resolve;
              settings.failure = reject;
              Sfdc.canvas.client.ajax(params.url, settings);
            });
          case 5:
            data = _context2.sent;
            headers = parseHeaders(data.responseHeaders);
            responseBody = data.payload;
            if (typeof responseBody !== 'string') {
              responseBody = JSON.stringify(responseBody);
            }
            return _context2.abrupt("return", {
              statusCode: data.status,
              headers: headers,
              body: responseBody
            });
          case 10:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    }));
    return _processCanvasRequest.apply(this, arguments);
  }
  function createRequest(signedRequest) {
    return function (params) {
      var buf = [];
      var stream = new stream_1$4.Transform({
        transform: function transform(chunk, encoding, callback) {
          buf.push(typeof chunk === 'string' ? chunk : chunk.toString('utf8'));
          callback();
        },
        flush: function flush() {
          _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var body, response;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  body = buf.join('');
                  _context.next = 3;
                  return processCanvasRequest(params, signedRequest, body);
                case 3:
                  response = _context.sent;
                  stream.emit('response', response);
                  stream.emit('complete', response);
                  stream.push(response.body);
                  stream.push(null);
                case 8:
                case "end":
                  return _context.stop();
              }
            }, _callee);
          }))();
        }
      });
      if (params.body) {
        stream.end(params.body);
      }
      return stream;
    };
  }
  canvas["default"] = {
    supported: (typeof Sfdc === "undefined" ? "undefined" : _typeof(Sfdc)) === 'object' && typeof Sfdc.canvas !== 'undefined',
    createRequest: createRequest
  };

  var _excluded$9 = ["url", "body"];
  var _ref, _ref2, _ref3, _process$env$https_pr;
  var __createBinding$2 = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = {
        enumerable: true,
        get: function get() {
          return m[k];
        }
      };
    }
    Object.defineProperty(o, k2, desc);
  } : function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault$2 = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function (o, v) {
    Object.defineProperty(o, "default", {
      enumerable: true,
      value: v
    });
  } : function (o, v) {
    o["default"] = v;
  });
  var __importStar$2 = commonjsGlobal && commonjsGlobal.__importStar || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$2(result, mod, k);
    __setModuleDefault$2(result, mod);
    return result;
  };
  var __importDefault$a = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };
  Object.defineProperty(transport$1, "__esModule", {
    value: true
  });
  transport$1.HttpProxyTransport = transport$1.XdProxyTransport = transport$1.CanvasTransport = transport$1.JsonpTransport = transport$1.Transport = void 0;
  var request_1 = __importStar$2(request$1);
  var promise_1$1 = promise$1;
  var jsonp_1 = __importDefault$a(jsonp);
  var canvas_1 = __importDefault$a(canvas);
  /**
   * Normarize Salesforce API host name
   * @private
   */
  function normalizeApiHost(apiHost) {
    var m = /(\w+)\.(visual\.force|salesforce)\.com$/.exec(apiHost);
    if (m) {
      return "".concat(m[1], ".salesforce.com");
    }
    return apiHost;
  }
  (0, request_1.setDefaults)({
    httpProxy: (_ref = (_ref2 = (_ref3 = (_process$env$https_pr = process.env.https_proxy) !== null && _process$env$https_pr !== void 0 ? _process$env$https_pr : process.env.http_proxy) !== null && _ref3 !== void 0 ? _ref3 : process.env.HTTPS_PROXY) !== null && _ref2 !== void 0 ? _ref2 : process.env.HTTP_PROXY) !== null && _ref !== void 0 ? _ref : undefined,
    timeout: process.env.HTTP_TIMEOUT ? parseInt(process.env.HTTP_TIMEOUT, 10) : undefined,
    followRedirect: true
  });
  var baseUrl = typeof window !== 'undefined' && window.location && window.location.host ? "https://".concat(normalizeApiHost(window.location.host)) : process.env.LOCATION_BASE_URL || '';
  /**
   * Class for HTTP request transport
   *
   * @class
   * @protected
   */
  var Transport$3 = /*#__PURE__*/function () {
    function Transport() {
      _classCallCheck(this, Transport);
    }
    return _createClass(Transport, [{
      key: "httpRequest",
      value:
      /**
       */
      function httpRequest(req) {
        var _this = this;
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return promise_1$1.StreamPromise.create(function () {
          var createStream = _this.getRequestStreamCreator();
          var stream = createStream(req, options);
          var promise = new Promise(function (resolve, reject) {
            stream.on('complete', function (res) {
              return resolve(res);
            }).on('error', reject);
          });
          return {
            stream: stream,
            promise: promise
          };
        });
      }
      /**
       * @protected
       */
    }, {
      key: "getRequestStreamCreator",
      value: function getRequestStreamCreator() {
        return request_1["default"];
      }
    }]);
  }();
  transport$1.Transport = Transport$3;
  /**
   * Class for JSONP request transport
   */
  var JsonpTransport = /*#__PURE__*/function (_Transport) {
    function JsonpTransport(jsonpParam) {
      var _this2;
      _classCallCheck(this, JsonpTransport);
      _this2 = _callSuper(this, JsonpTransport);
      _defineProperty(_this2, "_jsonpParam", void 0);
      _this2._jsonpParam = jsonpParam;
      return _this2;
    }
    _inherits(JsonpTransport, _Transport);
    return _createClass(JsonpTransport, [{
      key: "getRequestStreamCreator",
      value: function getRequestStreamCreator() {
        var jsonpRequest = jsonp_1["default"].createRequest(this._jsonpParam);
        return function (params) {
          return jsonpRequest(params);
        };
      }
    }]);
  }(Transport$3);
  _defineProperty(JsonpTransport, "supprted", jsonp_1["default"].supported);
  transport$1.JsonpTransport = JsonpTransport;
  /**
   * Class for Sfdc Canvas request transport
   */
  var CanvasTransport = /*#__PURE__*/function (_Transport2) {
    function CanvasTransport(signedRequest) {
      var _this3;
      _classCallCheck(this, CanvasTransport);
      _this3 = _callSuper(this, CanvasTransport);
      _defineProperty(_this3, "_signedRequest", void 0);
      _this3._signedRequest = signedRequest;
      return _this3;
    }
    _inherits(CanvasTransport, _Transport2);
    return _createClass(CanvasTransport, [{
      key: "getRequestStreamCreator",
      value: function getRequestStreamCreator() {
        var canvasRequest = canvas_1["default"].createRequest(this._signedRequest);
        return function (params) {
          return canvasRequest(params);
        };
      }
    }]);
  }(Transport$3);
  _defineProperty(CanvasTransport, "supported", canvas_1["default"].supported);
  transport$1.CanvasTransport = CanvasTransport;
  /* @private */
  function createXdProxyRequest(req, proxyUrl) {
    var headers = {
      'salesforceproxy-endpoint': req.url
    };
    if (req.headers) {
      for (var _i = 0, _Object$keys = Object.keys(req.headers); _i < _Object$keys.length; _i++) {
        var name = _Object$keys[_i];
        headers[name] = req.headers[name];
      }
    }
    var nocache = "".concat(Date.now(), ".").concat(String(Math.random()).substring(2));
    return _objectSpread2({
      method: req.method,
      url: "".concat(proxyUrl, "?").concat(nocache),
      headers: headers
    }, req.body != null ? {
      body: req.body
    } : {});
  }
  /**
   * Class for HTTP request transport using cross-domain AJAX proxy service
   */
  var XdProxyTransport = /*#__PURE__*/function (_Transport3) {
    function XdProxyTransport(xdProxyUrl) {
      var _this4;
      _classCallCheck(this, XdProxyTransport);
      _this4 = _callSuper(this, XdProxyTransport);
      _defineProperty(_this4, "_xdProxyUrl", void 0);
      _this4._xdProxyUrl = xdProxyUrl;
      return _this4;
    }
    /**
     * Make HTTP request via AJAX proxy
     */
    _inherits(XdProxyTransport, _Transport3);
    return _createClass(XdProxyTransport, [{
      key: "httpRequest",
      value: function httpRequest(req) {
        var xdProxyUrl = this._xdProxyUrl;
        var url = req.url,
          body = req.body,
          rreq = _objectWithoutProperties(req, _excluded$9);
        var canonicalUrl = url.startsWith('/') ? baseUrl + url : url;
        var xdProxyReq = createXdProxyRequest(_objectSpread2(_objectSpread2({}, rreq), {}, {
          url: canonicalUrl,
          body: body
        }), xdProxyUrl);
        return _get(_getPrototypeOf(XdProxyTransport.prototype), "httpRequest", this).call(this, xdProxyReq, {
          followRedirect: function followRedirect(redirectUrl) {
            return createXdProxyRequest(_objectSpread2(_objectSpread2({}, rreq), {}, {
              method: 'GET',
              url: redirectUrl
            }), xdProxyUrl);
          }
        });
      }
    }]);
  }(Transport$3);
  transport$1.XdProxyTransport = XdProxyTransport;
  /**
   * Class for HTTP request transport using a proxy server
   */
  var HttpProxyTransport = /*#__PURE__*/function (_Transport4) {
    function HttpProxyTransport(httpProxy) {
      var _this5;
      _classCallCheck(this, HttpProxyTransport);
      _this5 = _callSuper(this, HttpProxyTransport);
      _defineProperty(_this5, "_httpProxy", void 0);
      _this5._httpProxy = httpProxy;
      return _this5;
    }
    /**
     * Make HTTP request via proxy server
     */
    _inherits(HttpProxyTransport, _Transport4);
    return _createClass(HttpProxyTransport, [{
      key: "httpRequest",
      value: function httpRequest(req) {
        var options_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var options = _objectSpread2(_objectSpread2({}, options_), {}, {
          httpProxy: this._httpProxy
        });
        return _get(_getPrototypeOf(HttpProxyTransport.prototype), "httpRequest", this).call(this, req, options);
      }
    }]);
  }(Transport$3);
  transport$1.HttpProxyTransport = HttpProxyTransport;
  transport$1["default"] = Transport$3;

  var oauth2 = {};

  var __createBinding$1 = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = {
        enumerable: true,
        get: function get() {
          return m[k];
        }
      };
    }
    Object.defineProperty(o, k2, desc);
  } : function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault$1 = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function (o, v) {
    Object.defineProperty(o, "default", {
      enumerable: true,
      value: v
    });
  } : function (o, v) {
    o["default"] = v;
  });
  var __importStar$1 = commonjsGlobal && commonjsGlobal.__importStar || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$1(result, mod, k);
    __setModuleDefault$1(result, mod);
    return result;
  };
  var __importDefault$9 = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };
  Object.defineProperty(oauth2, "__esModule", {
    value: true
  });
  oauth2.OAuth2 = void 0;
  /**
   *
   */
  var crypto_1 = require$$0$8;
  var querystring_1 = __importDefault$9(require$$1$6);
  var transport_1 = __importStar$1(transport$1);
  var defaultOAuth2Config = {
    loginUrl: 'https://login.salesforce.com'
  };
  // Makes a nodejs base64 encoded string compatible with rfc4648 alternative encoding for urls.
  // @param base64Encoded a nodejs base64 encoded string
  function base64UrlEscape(base64Encoded) {
    // builtin node js base 64 encoding is not 64 url compatible.
    // See https://toolsn.ietf.org/html/rfc4648#section-5
    return base64Encoded.replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '');
  }
  /**
   * OAuth2 class
   */
  var OAuth2 = /*#__PURE__*/function () {
    /**
     *
     */
    function OAuth2(config) {
      _classCallCheck(this, OAuth2);
      _defineProperty(this, "loginUrl", void 0);
      _defineProperty(this, "authzServiceUrl", void 0);
      _defineProperty(this, "tokenServiceUrl", void 0);
      _defineProperty(this, "revokeServiceUrl", void 0);
      _defineProperty(this, "clientId", void 0);
      _defineProperty(this, "clientSecret", void 0);
      _defineProperty(this, "redirectUri", void 0);
      _defineProperty(this, "codeVerifier", void 0);
      _defineProperty(this, "_transport", void 0);
      var loginUrl = config.loginUrl,
        authzServiceUrl = config.authzServiceUrl,
        tokenServiceUrl = config.tokenServiceUrl,
        revokeServiceUrl = config.revokeServiceUrl,
        clientId = config.clientId,
        clientSecret = config.clientSecret,
        redirectUri = config.redirectUri,
        proxyUrl = config.proxyUrl,
        httpProxy = config.httpProxy,
        useVerifier = config.useVerifier;
      if (authzServiceUrl && tokenServiceUrl) {
        this.loginUrl = authzServiceUrl.split('/').slice(0, 3).join('/');
        this.authzServiceUrl = authzServiceUrl;
        this.tokenServiceUrl = tokenServiceUrl;
        this.revokeServiceUrl = revokeServiceUrl || "".concat(this.loginUrl, "/services/oauth2/revoke");
      } else {
        var loginUrlObject = new URL(loginUrl || defaultOAuth2Config.loginUrl);
        this.loginUrl = loginUrlObject.href;
        this.authzServiceUrl = "".concat(loginUrlObject.origin, "/services/oauth2/authorize");
        this.tokenServiceUrl = "".concat(loginUrlObject.origin, "/services/oauth2/token");
        this.revokeServiceUrl = "".concat(loginUrlObject.origin, "/services/oauth2/revoke");
      }
      this.clientId = clientId;
      this.clientSecret = clientSecret;
      this.redirectUri = redirectUri;
      if (proxyUrl) {
        this._transport = new transport_1.XdProxyTransport(proxyUrl);
      } else if (httpProxy) {
        this._transport = new transport_1.HttpProxyTransport(httpProxy);
      } else {
        this._transport = new transport_1["default"]();
      }
      if (useVerifier) {
        // Set a code verifier string for OAuth authorization
        this.codeVerifier = base64UrlEscape((0, crypto_1.randomBytes)(Math.ceil(128)).toString('base64'));
      }
    }
    /**
     * Get Salesforce OAuth2 authorization page URL to redirect user agent.
     */
    return _createClass(OAuth2, [{
      key: "getAuthorizationUrl",
      value: function getAuthorizationUrl() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        if (this.codeVerifier) {
          // code verifier must be a base 64 url encoded hash of 128 bytes of random data. Our random data is also
          // base 64 url encoded. See Connection.create();
          params.code_challenge = base64UrlEscape((0, crypto_1.createHash)('sha256').update(this.codeVerifier).digest('base64'));
        }
        var _params = _objectSpread2(_objectSpread2({}, params), {}, {
          response_type: 'code',
          client_id: this.clientId,
          redirect_uri: this.redirectUri
        });
        return this.authzServiceUrl + (this.authzServiceUrl.includes('?') ? '&' : '?') + querystring_1["default"].stringify(_params);
      }
      /**
       * OAuth2 Refresh Token Flow
       */
    }, {
      key: "refreshToken",
      value: (function () {
        var _refreshToken2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(_refreshToken) {
          var params, ret;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                if (this.clientId) {
                  _context.next = 2;
                  break;
                }
                throw new Error('No OAuth2 client id information is specified');
              case 2:
                params = {
                  grant_type: 'refresh_token',
                  refresh_token: _refreshToken,
                  client_id: this.clientId
                };
                if (this.clientSecret) {
                  params.client_secret = this.clientSecret;
                }
                _context.next = 6;
                return this._postParams(params);
              case 6:
                ret = _context.sent;
                return _context.abrupt("return", ret);
              case 8:
              case "end":
                return _context.stop();
            }
          }, _callee, this);
        }));
        function refreshToken(_x) {
          return _refreshToken2.apply(this, arguments);
        }
        return refreshToken;
      }()
      /**
       * Send access token request to the token endpoint.
       * When a code (string) is passed in first argument, it will use Web Server Authentication Flow (Authorization Code Grant).
       * Otherwise, it will use the specified `grant_type` and pass parameters to the endpoint.
       */
      )
    }, {
      key: "requestToken",
      value: (function () {
        var _requestToken = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(codeOrParams) {
          var params,
            _params,
            ret,
            _args2 = arguments;
          return _regeneratorRuntime().wrap(function _callee2$(_context2) {
            while (1) switch (_context2.prev = _context2.next) {
              case 0:
                params = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};
                if (!(typeof codeOrParams === 'string' && (!this.clientId || !this.redirectUri))) {
                  _context2.next = 3;
                  break;
                }
                throw new Error('No OAuth2 client id or redirect uri configuration is specified');
              case 3:
                _params = _objectSpread2(_objectSpread2({}, params), typeof codeOrParams === 'string' ? {
                  grant_type: 'authorization_code',
                  code: codeOrParams
                } : codeOrParams);
                if (this.clientId) {
                  _params.client_id = this.clientId;
                }
                if (this.clientSecret) {
                  _params.client_secret = this.clientSecret;
                }
                if (this.redirectUri) {
                  _params.redirect_uri = this.redirectUri;
                }
                _context2.next = 9;
                return this._postParams(_params);
              case 9:
                ret = _context2.sent;
                return _context2.abrupt("return", ret);
              case 11:
              case "end":
                return _context2.stop();
            }
          }, _callee2, this);
        }));
        function requestToken(_x2) {
          return _requestToken.apply(this, arguments);
        }
        return requestToken;
      }()
      /**
       * OAuth2 Username-Password Flow (Resource Owner Password Credentials)
       */
      )
    }, {
      key: "authenticate",
      value: (function () {
        var _authenticate = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(username, password) {
          var ret;
          return _regeneratorRuntime().wrap(function _callee3$(_context3) {
            while (1) switch (_context3.prev = _context3.next) {
              case 0:
                if (!(!this.clientId || !this.clientSecret)) {
                  _context3.next = 2;
                  break;
                }
                throw new Error('No valid OAuth2 client configuration set');
              case 2:
                _context3.next = 4;
                return this._postParams({
                  grant_type: 'password',
                  username: username,
                  password: password,
                  client_id: this.clientId,
                  client_secret: this.clientSecret
                });
              case 4:
                ret = _context3.sent;
                return _context3.abrupt("return", ret);
              case 6:
              case "end":
                return _context3.stop();
            }
          }, _callee3, this);
        }));
        function authenticate(_x3, _x4) {
          return _authenticate.apply(this, arguments);
        }
        return authenticate;
      }()
      /**
       * OAuth2 Revoke Session Token
       */
      )
    }, {
      key: "revokeToken",
      value: (function () {
        var _revokeToken = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(token) {
          var response, res;
          return _regeneratorRuntime().wrap(function _callee4$(_context4) {
            while (1) switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this._transport.httpRequest({
                  method: 'POST',
                  url: this.revokeServiceUrl,
                  body: querystring_1["default"].stringify({
                    token: token
                  }),
                  headers: {
                    'content-type': 'application/x-www-form-urlencoded'
                  }
                });
              case 2:
                response = _context4.sent;
                if (!(response.statusCode >= 400)) {
                  _context4.next = 7;
                  break;
                }
                res = querystring_1["default"].parse(response.body);
                if (!res || !res.error) {
                  res = {
                    error: "ERROR_HTTP_".concat(response.statusCode),
                    error_description: response.body
                  };
                }
                throw new (/*#__PURE__*/function (_Error) {
                  function _class(_ref) {
                    var _this;
                    var error = _ref.error,
                      error_description = _ref.error_description;
                    _classCallCheck(this, _class);
                    _this = _callSuper(this, _class, [error_description]);
                    _this.name = error;
                    return _this;
                  }
                  _inherits(_class, _Error);
                  return _createClass(_class);
                }(/*#__PURE__*/_wrapNativeSuper(Error)))(res);
              case 7:
              case "end":
                return _context4.stop();
            }
          }, _callee4, this);
        }));
        function revokeToken(_x5) {
          return _revokeToken.apply(this, arguments);
        }
        return revokeToken;
      }()
      /**
       * @private
       */
      )
    }, {
      key: "_postParams",
      value: (function () {
        var _postParams2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(params) {
          var response, res;
          return _regeneratorRuntime().wrap(function _callee5$(_context5) {
            while (1) switch (_context5.prev = _context5.next) {
              case 0:
                if (this.codeVerifier) params.code_verifier = this.codeVerifier;
                _context5.next = 3;
                return this._transport.httpRequest({
                  method: 'POST',
                  url: this.tokenServiceUrl,
                  body: querystring_1["default"].stringify(params),
                  headers: {
                    'content-type': 'application/x-www-form-urlencoded'
                  }
                });
              case 3:
                response = _context5.sent;
                try {
                  res = JSON.parse(response.body);
                } catch (e) {
                  /* eslint-disable no-empty */
                }
                if (!(response.statusCode >= 400)) {
                  _context5.next = 8;
                  break;
                }
                res = res || {
                  error: "ERROR_HTTP_".concat(response.statusCode),
                  error_description: response.body
                };
                throw new (/*#__PURE__*/function (_Error2) {
                  function _class2(_ref2) {
                    var _this2;
                    var error = _ref2.error,
                      error_description = _ref2.error_description;
                    _classCallCheck(this, _class2);
                    _this2 = _callSuper(this, _class2, [error_description]);
                    _this2.name = error;
                    return _this2;
                  }
                  _inherits(_class2, _Error2);
                  return _createClass(_class2);
                }(/*#__PURE__*/_wrapNativeSuper(Error)))(res);
              case 8:
                return _context5.abrupt("return", res);
              case 9:
              case "end":
                return _context5.stop();
            }
          }, _callee5, this);
        }));
        function _postParams(_x6) {
          return _postParams2.apply(this, arguments);
        }
        return _postParams;
      }())
    }]);
  }();
  oauth2.OAuth2 = OAuth2;
  oauth2["default"] = OAuth2;

  var cache$1 = {};

  Object.defineProperty(cache$1, "__esModule", {
    value: true
  });
  cache$1.Cache = void 0;
  /**
   * @file Manages asynchronous method response cache
   * @author Shinichi Tomita <shinichi.tomita@gmail.com>
   */
  var events_1$3 = require$$0$6;
  /**
   * Class for managing cache entry
   *
   * @private
   * @class
   * @constructor
   * @template T
   */
  var CacheEntry = /*#__PURE__*/function (_events_1$EventEmitte) {
    function CacheEntry() {
      var _this;
      _classCallCheck(this, CacheEntry);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, CacheEntry, [].concat(args));
      _defineProperty(_this, "_fetching", false);
      _defineProperty(_this, "_value", undefined);
      return _this;
    }
    _inherits(CacheEntry, _events_1$EventEmitte);
    return _createClass(CacheEntry, [{
      key: "get",
      value:
      /**
       * Get value in the cache entry
       *
       * @param {() => Promise<T>} [callback] - Callback function callbacked the cache entry updated
       * @returns {T|undefined}
       */
      function get(callback) {
        if (callback) {
          var cb = callback;
          this.once('value', function (v) {
            return cb(v);
          });
          if (typeof this._value !== 'undefined') {
            this.emit('value', this._value);
          }
        }
        return this._value;
      }
      /**
       * Set value in the cache entry
       */
    }, {
      key: "set",
      value: function set(value) {
        this._value = value;
        this.emit('value', this._value);
      }
      /**
       * Clear cached value
       */
    }, {
      key: "clear",
      value: function clear() {
        this._fetching = false;
        this._value = undefined;
      }
    }]);
  }(events_1$3.EventEmitter);
  /**
   * create and return cache key from namespace and serialized arguments.
   * @private
   */
  function createCacheKey(namespace, args) {
    return "".concat(namespace || '', "(").concat(_toConsumableArray(args).map(function (a) {
      return JSON.stringify(a);
    }).join(','), ")");
  }
  function generateKeyString(options, scope, args) {
    return typeof options.key === 'string' ? options.key : typeof options.key === 'function' ? options.key.apply(scope, args) : createCacheKey(options.namespace, args);
  }
  /**
   * Caching manager for async methods
   *
   * @class
   * @constructor
   */
  var Cache = /*#__PURE__*/function () {
    function Cache() {
      _classCallCheck(this, Cache);
      _defineProperty(this, "_entries", {});
    }
    return _createClass(Cache, [{
      key: "get",
      value:
      /**
       * retrive cache entry, or create if not exists.
       *
       * @param {String} [key] - Key of cache entry
       * @returns {CacheEntry}
       */
      function get(key) {
        if (this._entries[key]) {
          return this._entries[key];
        }
        var entry = new CacheEntry();
        this._entries[key] = entry;
        return entry;
      }
      /**
       * clear cache entries prefix matching given key
       */
    }, {
      key: "clear",
      value: function clear(key) {
        for (var _i = 0, _Object$keys = Object.keys(this._entries); _i < _Object$keys.length; _i++) {
          var k = _Object$keys[_i];
          if (!key || k.startsWith(key)) {
            this._entries[k].clear();
          }
        }
      }
      /**
       * Enable caching for async call fn to lookup the response cache first,
       * then invoke original if no cached value.
       */
    }, {
      key: "createCachedFunction",
      value: function createCachedFunction(fn, scope) {
        var _this2 = this;
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
          strategy: 'NOCACHE'
        };
        var strategy = options.strategy;
        var $fn = function $fn() {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          var key = generateKeyString(options, scope, args);
          var entry = _this2.get(key);
          var executeFetch = /*#__PURE__*/function () {
            var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
              var result;
              return _regeneratorRuntime().wrap(function _callee$(_context) {
                while (1) switch (_context.prev = _context.next) {
                  case 0:
                    entry._fetching = true;
                    _context.prev = 1;
                    _context.next = 4;
                    return fn.apply(scope || _this2, args);
                  case 4:
                    result = _context.sent;
                    entry.set({
                      error: undefined,
                      result: result
                    });
                    return _context.abrupt("return", result);
                  case 9:
                    _context.prev = 9;
                    _context.t0 = _context["catch"](1);
                    entry.set({
                      error: _context.t0,
                      result: undefined
                    });
                    throw _context.t0;
                  case 13:
                  case "end":
                    return _context.stop();
                }
              }, _callee, null, [[1, 9]]);
            }));
            return function executeFetch() {
              return _ref.apply(this, arguments);
            };
          }();
          var value;
          switch (strategy) {
            case 'IMMEDIATE':
              value = entry.get();
              if (!value) {
                throw new Error('Function call result is not cached yet.');
              }
              if (value.error) {
                throw value.error;
              }
              return value.result;
            case 'HIT':
              return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
                return _regeneratorRuntime().wrap(function _callee2$(_context2) {
                  while (1) switch (_context2.prev = _context2.next) {
                    case 0:
                      if (entry._fetching) {
                        _context2.next = 3;
                        break;
                      }
                      _context2.next = 3;
                      return executeFetch();
                    case 3:
                      return _context2.abrupt("return", new Promise(function (resolve, reject) {
                        entry.get(function (_ref3) {
                          var error = _ref3.error,
                            result = _ref3.result;
                          if (error) reject(error);else resolve(result);
                        });
                      }));
                    case 4:
                    case "end":
                      return _context2.stop();
                  }
                }, _callee2);
              }))();
            case 'NOCACHE':
            default:
              return executeFetch();
          }
        };
        $fn.clear = function () {
          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
          }
          var key = generateKeyString(options, scope, args);
          _this2.clear(key);
        };
        return $fn;
      }
    }]);
  }();
  cache$1.Cache = Cache;
  cache$1["default"] = Cache;

  var httpApi = {};

  var xml2js = {};

  var defaults = {};

  var hasRequiredDefaults;
  function requireDefaults() {
    if (hasRequiredDefaults) return defaults;
    hasRequiredDefaults = 1;
    // Generated by CoffeeScript 1.12.7
    (function () {
      defaults.defaults = {
        "0.1": {
          explicitCharkey: false,
          trim: true,
          normalize: true,
          normalizeTags: false,
          attrkey: "@",
          charkey: "#",
          explicitArray: false,
          ignoreAttrs: false,
          mergeAttrs: false,
          explicitRoot: false,
          validator: null,
          xmlns: false,
          explicitChildren: false,
          childkey: '@@',
          charsAsChildren: false,
          includeWhiteChars: false,
          async: false,
          strict: true,
          attrNameProcessors: null,
          attrValueProcessors: null,
          tagNameProcessors: null,
          valueProcessors: null,
          emptyTag: ''
        },
        "0.2": {
          explicitCharkey: false,
          trim: false,
          normalize: false,
          normalizeTags: false,
          attrkey: "$",
          charkey: "_",
          explicitArray: true,
          ignoreAttrs: false,
          mergeAttrs: false,
          explicitRoot: true,
          validator: null,
          xmlns: false,
          explicitChildren: false,
          preserveChildrenOrder: false,
          childkey: '$$',
          charsAsChildren: false,
          includeWhiteChars: false,
          async: false,
          strict: true,
          attrNameProcessors: null,
          attrValueProcessors: null,
          tagNameProcessors: null,
          valueProcessors: null,
          rootName: 'root',
          xmldec: {
            'version': '1.0',
            'encoding': 'UTF-8',
            'standalone': true
          },
          doctype: null,
          renderOpts: {
            'pretty': true,
            'indent': '  ',
            'newline': '\n'
          },
          headless: false,
          chunkSize: 10000,
          emptyTag: '',
          cdata: false
        }
      };
    }).call(commonjsGlobal);
    return defaults;
  }

  var builder = {};

  var lib = {};

  var Utility = {};

  var hasRequiredUtility;
  function requireUtility() {
    if (hasRequiredUtility) return Utility;
    hasRequiredUtility = 1;
    // Generated by CoffeeScript 1.12.7
    (function () {
      var assign,
        getValue,
        isArray,
        isEmpty,
        isFunction,
        isObject,
        isPlainObject,
        slice = [].slice,
        hasProp = {}.hasOwnProperty;
      assign = function assign() {
        var i, key, len, source, sources, target;
        target = arguments[0], sources = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        if (isFunction(Object.assign)) {
          Object.assign.apply(null, arguments);
        } else {
          for (i = 0, len = sources.length; i < len; i++) {
            source = sources[i];
            if (source != null) {
              for (key in source) {
                if (!hasProp.call(source, key)) continue;
                target[key] = source[key];
              }
            }
          }
        }
        return target;
      };
      isFunction = function isFunction(val) {
        return !!val && Object.prototype.toString.call(val) === '[object Function]';
      };
      isObject = function isObject(val) {
        var ref;
        return !!val && ((ref = _typeof(val)) === 'function' || ref === 'object');
      };
      isArray = function isArray(val) {
        if (isFunction(Array.isArray)) {
          return Array.isArray(val);
        } else {
          return Object.prototype.toString.call(val) === '[object Array]';
        }
      };
      isEmpty = function isEmpty(val) {
        var key;
        if (isArray(val)) {
          return !val.length;
        } else {
          for (key in val) {
            if (!hasProp.call(val, key)) continue;
            return false;
          }
          return true;
        }
      };
      isPlainObject = function isPlainObject(val) {
        var ctor, proto;
        return isObject(val) && (proto = Object.getPrototypeOf(val)) && (ctor = proto.constructor) && typeof ctor === 'function' && ctor instanceof ctor && Function.prototype.toString.call(ctor) === Function.prototype.toString.call(Object);
      };
      getValue = function getValue(obj) {
        if (isFunction(obj.valueOf)) {
          return obj.valueOf();
        } else {
          return obj;
        }
      };
      Utility.assign = assign;
      Utility.isFunction = isFunction;
      Utility.isObject = isObject;
      Utility.isArray = isArray;
      Utility.isEmpty = isEmpty;
      Utility.isPlainObject = isPlainObject;
      Utility.getValue = getValue;
    }).call(commonjsGlobal);
    return Utility;
  }

  var XMLDOMImplementation = {exports: {}};

  var hasRequiredXMLDOMImplementation;
  function requireXMLDOMImplementation() {
    if (hasRequiredXMLDOMImplementation) return XMLDOMImplementation.exports;
    hasRequiredXMLDOMImplementation = 1;
    // Generated by CoffeeScript 1.12.7
    (function () {
      XMLDOMImplementation.exports = function () {
        function XMLDOMImplementation() {}
        XMLDOMImplementation.prototype.hasFeature = function (feature, version) {
          return true;
        };
        XMLDOMImplementation.prototype.createDocumentType = function (qualifiedName, publicId, systemId) {
          throw new Error("This DOM method is not implemented.");
        };
        XMLDOMImplementation.prototype.createDocument = function (namespaceURI, qualifiedName, doctype) {
          throw new Error("This DOM method is not implemented.");
        };
        XMLDOMImplementation.prototype.createHTMLDocument = function (title) {
          throw new Error("This DOM method is not implemented.");
        };
        XMLDOMImplementation.prototype.getFeature = function (feature, version) {
          throw new Error("This DOM method is not implemented.");
        };
        return XMLDOMImplementation;
      }();
    }).call(commonjsGlobal);
    return XMLDOMImplementation.exports;
  }

  var XMLDocument = {exports: {}};

  var XMLDOMConfiguration = {exports: {}};

  var XMLDOMErrorHandler = {exports: {}};

  var hasRequiredXMLDOMErrorHandler;
  function requireXMLDOMErrorHandler() {
    if (hasRequiredXMLDOMErrorHandler) return XMLDOMErrorHandler.exports;
    hasRequiredXMLDOMErrorHandler = 1;
    // Generated by CoffeeScript 1.12.7
    (function () {
      XMLDOMErrorHandler.exports = function () {
        function XMLDOMErrorHandler() {}
        XMLDOMErrorHandler.prototype.handleError = function (error) {
          throw new Error(error);
        };
        return XMLDOMErrorHandler;
      }();
    }).call(commonjsGlobal);
    return XMLDOMErrorHandler.exports;
  }

  var XMLDOMStringList = {exports: {}};

  var hasRequiredXMLDOMStringList;
  function requireXMLDOMStringList() {
    if (hasRequiredXMLDOMStringList) return XMLDOMStringList.exports;
    hasRequiredXMLDOMStringList = 1;
    // Generated by CoffeeScript 1.12.7
    (function () {
      XMLDOMStringList.exports = function () {
        function XMLDOMStringList(arr) {
          this.arr = arr || [];
        }
        Object.defineProperty(XMLDOMStringList.prototype, 'length', {
          get: function get() {
            return this.arr.length;
          }
        });
        XMLDOMStringList.prototype.item = function (index) {
          return this.arr[index] || null;
        };
        XMLDOMStringList.prototype.contains = function (str) {
          return this.arr.indexOf(str) !== -1;
        };
        return XMLDOMStringList;
      }();
    }).call(commonjsGlobal);
    return XMLDOMStringList.exports;
  }

  var hasRequiredXMLDOMConfiguration;
  function requireXMLDOMConfiguration() {
    if (hasRequiredXMLDOMConfiguration) return XMLDOMConfiguration.exports;
    hasRequiredXMLDOMConfiguration = 1;
    // Generated by CoffeeScript 1.12.7
    (function () {
      var XMLDOMErrorHandler, XMLDOMStringList;
      XMLDOMErrorHandler = requireXMLDOMErrorHandler();
      XMLDOMStringList = requireXMLDOMStringList();
      XMLDOMConfiguration.exports = function () {
        function XMLDOMConfiguration() {
          this.defaultParams = {
            "canonical-form": false,
            "cdata-sections": false,
            "comments": false,
            "datatype-normalization": false,
            "element-content-whitespace": true,
            "entities": true,
            "error-handler": new XMLDOMErrorHandler(),
            "infoset": true,
            "validate-if-schema": false,
            "namespaces": true,
            "namespace-declarations": true,
            "normalize-characters": false,
            "schema-location": '',
            "schema-type": '',
            "split-cdata-sections": true,
            "validate": false,
            "well-formed": true
          };
          this.params = Object.create(this.defaultParams);
        }
        Object.defineProperty(XMLDOMConfiguration.prototype, 'parameterNames', {
          get: function get() {
            return new XMLDOMStringList(Object.keys(this.defaultParams));
          }
        });
        XMLDOMConfiguration.prototype.getParameter = function (name) {
          if (this.params.hasOwnProperty(name)) {
            return this.params[name];
          } else {
            return null;
          }
        };
        XMLDOMConfiguration.prototype.canSetParameter = function (name, value) {
          return true;
        };
        XMLDOMConfiguration.prototype.setParameter = function (name, value) {
          if (value != null) {
            return this.params[name] = value;
          } else {
            return delete this.params[name];
          }
        };
        return XMLDOMConfiguration;
      }();
    }).call(commonjsGlobal);
    return XMLDOMConfiguration.exports;
  }

  var XMLNode = {exports: {}};

  var XMLElement = {exports: {}};

  var NodeType = {exports: {}};

  var hasRequiredNodeType;
  function requireNodeType() {
    if (hasRequiredNodeType) return NodeType.exports;
    hasRequiredNodeType = 1;
    // Generated by CoffeeScript 1.12.7
    (function () {
      NodeType.exports = {
        Element: 1,
        Attribute: 2,
        Text: 3,
        CData: 4,
        EntityReference: 5,
        EntityDeclaration: 6,
        ProcessingInstruction: 7,
        Comment: 8,
        Document: 9,
        DocType: 10,
        DocumentFragment: 11,
        NotationDeclaration: 12,
        Declaration: 201,
        Raw: 202,
        AttributeDeclaration: 203,
        ElementDeclaration: 204,
        Dummy: 205
      };
    }).call(commonjsGlobal);
    return NodeType.exports;
  }

  var XMLAttribute = {exports: {}};

  var hasRequiredXMLAttribute;
  function requireXMLAttribute() {
    if (hasRequiredXMLAttribute) return XMLAttribute.exports;
    hasRequiredXMLAttribute = 1;
    // Generated by CoffeeScript 1.12.7
    (function () {
      var NodeType;
      NodeType = requireNodeType();
      requireXMLNode();
      XMLAttribute.exports = function () {
        function XMLAttribute(parent, name, value) {
          this.parent = parent;
          if (this.parent) {
            this.options = this.parent.options;
            this.stringify = this.parent.stringify;
          }
          if (name == null) {
            throw new Error("Missing attribute name. " + this.debugInfo(name));
          }
          this.name = this.stringify.name(name);
          this.value = this.stringify.attValue(value);
          this.type = NodeType.Attribute;
          this.isId = false;
          this.schemaTypeInfo = null;
        }
        Object.defineProperty(XMLAttribute.prototype, 'nodeType', {
          get: function get() {
            return this.type;
          }
        });
        Object.defineProperty(XMLAttribute.prototype, 'ownerElement', {
          get: function get() {
            return this.parent;
          }
        });
        Object.defineProperty(XMLAttribute.prototype, 'textContent', {
          get: function get() {
            return this.value;
          },
          set: function set(value) {
            return this.value = value || '';
          }
        });
        Object.defineProperty(XMLAttribute.prototype, 'namespaceURI', {
          get: function get() {
            return '';
          }
        });
        Object.defineProperty(XMLAttribute.prototype, 'prefix', {
          get: function get() {
            return '';
          }
        });
        Object.defineProperty(XMLAttribute.prototype, 'localName', {
          get: function get() {
            return this.name;
          }
        });
        Object.defineProperty(XMLAttribute.prototype, 'specified', {
          get: function get() {
            return true;
          }
        });
        XMLAttribute.prototype.clone = function () {
          return Object.create(this);
        };
        XMLAttribute.prototype.toString = function (options) {
          return this.options.writer.attribute(this, this.options.writer.filterOptions(options));
        };
        XMLAttribute.prototype.debugInfo = function (name) {
          name = name || this.name;
          if (name == null) {
            return "parent: <" + this.parent.name + ">";
          } else {
            return "attribute: {" + name + "}, parent: <" + this.parent.name + ">";
          }
        };
        XMLAttribute.prototype.isEqualNode = function (node) {
          if (node.namespaceURI !== this.namespaceURI) {
            return false;
          }
          if (node.prefix !== this.prefix) {
            return false;
          }
          if (node.localName !== this.localName) {
            return false;
          }
          if (node.value !== this.value) {
            return false;
          }
          return true;
        };
        return XMLAttribute;
      }();
    }).call(commonjsGlobal);
    return XMLAttribute.exports;
  }

  var XMLNamedNodeMap = {exports: {}};

  var hasRequiredXMLNamedNodeMap;
  function requireXMLNamedNodeMap() {
    if (hasRequiredXMLNamedNodeMap) return XMLNamedNodeMap.exports;
    hasRequiredXMLNamedNodeMap = 1;
    // Generated by CoffeeScript 1.12.7
    (function () {
      XMLNamedNodeMap.exports = function () {
        function XMLNamedNodeMap(nodes) {
          this.nodes = nodes;
        }
        Object.defineProperty(XMLNamedNodeMap.prototype, 'length', {
          get: function get() {
            return Object.keys(this.nodes).length || 0;
          }
        });
        XMLNamedNodeMap.prototype.clone = function () {
          return this.nodes = null;
        };
        XMLNamedNodeMap.prototype.getNamedItem = function (name) {
          return this.nodes[name];
        };
        XMLNamedNodeMap.prototype.setNamedItem = function (node) {
          var oldNode;
          oldNode = this.nodes[node.nodeName];
          this.nodes[node.nodeName] = node;
          return oldNode || null;
        };
        XMLNamedNodeMap.prototype.removeNamedItem = function (name) {
          var oldNode;
          oldNode = this.nodes[name];
          delete this.nodes[name];
          return oldNode || null;
        };
        XMLNamedNodeMap.prototype.item = function (index) {
          return this.nodes[Object.keys(this.nodes)[index]] || null;
        };
        XMLNamedNodeMap.prototype.getNamedItemNS = function (namespaceURI, localName) {
          throw new Error("This DOM method is not implemented.");
        };
        XMLNamedNodeMap.prototype.setNamedItemNS = function (node) {
          throw new Error("This DOM method is not implemented.");
        };
        XMLNamedNodeMap.prototype.removeNamedItemNS = function (namespaceURI, localName) {
          throw new Error("This DOM method is not implemented.");
        };
        return XMLNamedNodeMap;
      }();
    }).call(commonjsGlobal);
    return XMLNamedNodeMap.exports;
  }

  var hasRequiredXMLElement;
  function requireXMLElement() {
    if (hasRequiredXMLElement) return XMLElement.exports;
    hasRequiredXMLElement = 1;
    // Generated by CoffeeScript 1.12.7
    (function () {
      var NodeType,
        XMLAttribute,
        XMLNamedNodeMap,
        XMLNode,
        getValue,
        isFunction,
        isObject,
        ref,
        extend = function extend(child, parent) {
          for (var key in parent) {
            if (hasProp.call(parent, key)) child[key] = parent[key];
          }
          function ctor() {
            this.constructor = child;
          }
          ctor.prototype = parent.prototype;
          child.prototype = new ctor();
          child.__super__ = parent.prototype;
          return child;
        },
        hasProp = {}.hasOwnProperty;
      ref = requireUtility(), isObject = ref.isObject, isFunction = ref.isFunction, getValue = ref.getValue;
      XMLNode = requireXMLNode();
      NodeType = requireNodeType();
      XMLAttribute = requireXMLAttribute();
      XMLNamedNodeMap = requireXMLNamedNodeMap();
      XMLElement.exports = function (superClass) {
        extend(XMLElement, superClass);
        function XMLElement(parent, name, attributes) {
          var child, j, len, ref1;
          XMLElement.__super__.constructor.call(this, parent);
          if (name == null) {
            throw new Error("Missing element name. " + this.debugInfo());
          }
          this.name = this.stringify.name(name);
          this.type = NodeType.Element;
          this.attribs = {};
          this.schemaTypeInfo = null;
          if (attributes != null) {
            this.attribute(attributes);
          }
          if (parent.type === NodeType.Document) {
            this.isRoot = true;
            this.documentObject = parent;
            parent.rootObject = this;
            if (parent.children) {
              ref1 = parent.children;
              for (j = 0, len = ref1.length; j < len; j++) {
                child = ref1[j];
                if (child.type === NodeType.DocType) {
                  child.name = this.name;
                  break;
                }
              }
            }
          }
        }
        Object.defineProperty(XMLElement.prototype, 'tagName', {
          get: function get() {
            return this.name;
          }
        });
        Object.defineProperty(XMLElement.prototype, 'namespaceURI', {
          get: function get() {
            return '';
          }
        });
        Object.defineProperty(XMLElement.prototype, 'prefix', {
          get: function get() {
            return '';
          }
        });
        Object.defineProperty(XMLElement.prototype, 'localName', {
          get: function get() {
            return this.name;
          }
        });
        Object.defineProperty(XMLElement.prototype, 'id', {
          get: function get() {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
          }
        });
        Object.defineProperty(XMLElement.prototype, 'className', {
          get: function get() {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
          }
        });
        Object.defineProperty(XMLElement.prototype, 'classList', {
          get: function get() {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
          }
        });
        Object.defineProperty(XMLElement.prototype, 'attributes', {
          get: function get() {
            if (!this.attributeMap || !this.attributeMap.nodes) {
              this.attributeMap = new XMLNamedNodeMap(this.attribs);
            }
            return this.attributeMap;
          }
        });
        XMLElement.prototype.clone = function () {
          var att, attName, clonedSelf, ref1;
          clonedSelf = Object.create(this);
          if (clonedSelf.isRoot) {
            clonedSelf.documentObject = null;
          }
          clonedSelf.attribs = {};
          ref1 = this.attribs;
          for (attName in ref1) {
            if (!hasProp.call(ref1, attName)) continue;
            att = ref1[attName];
            clonedSelf.attribs[attName] = att.clone();
          }
          clonedSelf.children = [];
          this.children.forEach(function (child) {
            var clonedChild;
            clonedChild = child.clone();
            clonedChild.parent = clonedSelf;
            return clonedSelf.children.push(clonedChild);
          });
          return clonedSelf;
        };
        XMLElement.prototype.attribute = function (name, value) {
          var attName, attValue;
          if (name != null) {
            name = getValue(name);
          }
          if (isObject(name)) {
            for (attName in name) {
              if (!hasProp.call(name, attName)) continue;
              attValue = name[attName];
              this.attribute(attName, attValue);
            }
          } else {
            if (isFunction(value)) {
              value = value.apply();
            }
            if (this.options.keepNullAttributes && value == null) {
              this.attribs[name] = new XMLAttribute(this, name, "");
            } else if (value != null) {
              this.attribs[name] = new XMLAttribute(this, name, value);
            }
          }
          return this;
        };
        XMLElement.prototype.removeAttribute = function (name) {
          var attName, j, len;
          if (name == null) {
            throw new Error("Missing attribute name. " + this.debugInfo());
          }
          name = getValue(name);
          if (Array.isArray(name)) {
            for (j = 0, len = name.length; j < len; j++) {
              attName = name[j];
              delete this.attribs[attName];
            }
          } else {
            delete this.attribs[name];
          }
          return this;
        };
        XMLElement.prototype.toString = function (options) {
          return this.options.writer.element(this, this.options.writer.filterOptions(options));
        };
        XMLElement.prototype.att = function (name, value) {
          return this.attribute(name, value);
        };
        XMLElement.prototype.a = function (name, value) {
          return this.attribute(name, value);
        };
        XMLElement.prototype.getAttribute = function (name) {
          if (this.attribs.hasOwnProperty(name)) {
            return this.attribs[name].value;
          } else {
            return null;
          }
        };
        XMLElement.prototype.setAttribute = function (name, value) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement.prototype.getAttributeNode = function (name) {
          if (this.attribs.hasOwnProperty(name)) {
            return this.attribs[name];
          } else {
            return null;
          }
        };
        XMLElement.prototype.setAttributeNode = function (newAttr) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement.prototype.removeAttributeNode = function (oldAttr) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement.prototype.getElementsByTagName = function (name) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement.prototype.getAttributeNS = function (namespaceURI, localName) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement.prototype.setAttributeNS = function (namespaceURI, qualifiedName, value) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement.prototype.removeAttributeNS = function (namespaceURI, localName) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement.prototype.getAttributeNodeNS = function (namespaceURI, localName) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement.prototype.setAttributeNodeNS = function (newAttr) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement.prototype.getElementsByTagNameNS = function (namespaceURI, localName) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement.prototype.hasAttribute = function (name) {
          return this.attribs.hasOwnProperty(name);
        };
        XMLElement.prototype.hasAttributeNS = function (namespaceURI, localName) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement.prototype.setIdAttribute = function (name, isId) {
          if (this.attribs.hasOwnProperty(name)) {
            return this.attribs[name].isId;
          } else {
            return isId;
          }
        };
        XMLElement.prototype.setIdAttributeNS = function (namespaceURI, localName, isId) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement.prototype.setIdAttributeNode = function (idAttr, isId) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement.prototype.getElementsByTagName = function (tagname) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement.prototype.getElementsByTagNameNS = function (namespaceURI, localName) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement.prototype.getElementsByClassName = function (classNames) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement.prototype.isEqualNode = function (node) {
          var i, j, ref1;
          if (!XMLElement.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {
            return false;
          }
          if (node.namespaceURI !== this.namespaceURI) {
            return false;
          }
          if (node.prefix !== this.prefix) {
            return false;
          }
          if (node.localName !== this.localName) {
            return false;
          }
          if (node.attribs.length !== this.attribs.length) {
            return false;
          }
          for (i = j = 0, ref1 = this.attribs.length - 1; 0 <= ref1 ? j <= ref1 : j >= ref1; i = 0 <= ref1 ? ++j : --j) {
            if (!this.attribs[i].isEqualNode(node.attribs[i])) {
              return false;
            }
          }
          return true;
        };
        return XMLElement;
      }(XMLNode);
    }).call(commonjsGlobal);
    return XMLElement.exports;
  }

  var XMLCData = {exports: {}};

  var XMLCharacterData = {exports: {}};

  var hasRequiredXMLCharacterData;
  function requireXMLCharacterData() {
    if (hasRequiredXMLCharacterData) return XMLCharacterData.exports;
    hasRequiredXMLCharacterData = 1;
    // Generated by CoffeeScript 1.12.7
    (function () {
      var XMLNode,
        extend = function extend(child, parent) {
          for (var key in parent) {
            if (hasProp.call(parent, key)) child[key] = parent[key];
          }
          function ctor() {
            this.constructor = child;
          }
          ctor.prototype = parent.prototype;
          child.prototype = new ctor();
          child.__super__ = parent.prototype;
          return child;
        },
        hasProp = {}.hasOwnProperty;
      XMLNode = requireXMLNode();
      XMLCharacterData.exports = function (superClass) {
        extend(XMLCharacterData, superClass);
        function XMLCharacterData(parent) {
          XMLCharacterData.__super__.constructor.call(this, parent);
          this.value = '';
        }
        Object.defineProperty(XMLCharacterData.prototype, 'data', {
          get: function get() {
            return this.value;
          },
          set: function set(value) {
            return this.value = value || '';
          }
        });
        Object.defineProperty(XMLCharacterData.prototype, 'length', {
          get: function get() {
            return this.value.length;
          }
        });
        Object.defineProperty(XMLCharacterData.prototype, 'textContent', {
          get: function get() {
            return this.value;
          },
          set: function set(value) {
            return this.value = value || '';
          }
        });
        XMLCharacterData.prototype.clone = function () {
          return Object.create(this);
        };
        XMLCharacterData.prototype.substringData = function (offset, count) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLCharacterData.prototype.appendData = function (arg) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLCharacterData.prototype.insertData = function (offset, arg) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLCharacterData.prototype.deleteData = function (offset, count) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLCharacterData.prototype.replaceData = function (offset, count, arg) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLCharacterData.prototype.isEqualNode = function (node) {
          if (!XMLCharacterData.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {
            return false;
          }
          if (node.data !== this.data) {
            return false;
          }
          return true;
        };
        return XMLCharacterData;
      }(XMLNode);
    }).call(commonjsGlobal);
    return XMLCharacterData.exports;
  }

  var hasRequiredXMLCData;
  function requireXMLCData() {
    if (hasRequiredXMLCData) return XMLCData.exports;
    hasRequiredXMLCData = 1;
    // Generated by CoffeeScript 1.12.7
    (function () {
      var NodeType,
        XMLCharacterData,
        extend = function extend(child, parent) {
          for (var key in parent) {
            if (hasProp.call(parent, key)) child[key] = parent[key];
          }
          function ctor() {
            this.constructor = child;
          }
          ctor.prototype = parent.prototype;
          child.prototype = new ctor();
          child.__super__ = parent.prototype;
          return child;
        },
        hasProp = {}.hasOwnProperty;
      NodeType = requireNodeType();
      XMLCharacterData = requireXMLCharacterData();
      XMLCData.exports = function (superClass) {
        extend(XMLCData, superClass);
        function XMLCData(parent, text) {
          XMLCData.__super__.constructor.call(this, parent);
          if (text == null) {
            throw new Error("Missing CDATA text. " + this.debugInfo());
          }
          this.name = "#cdata-section";
          this.type = NodeType.CData;
          this.value = this.stringify.cdata(text);
        }
        XMLCData.prototype.clone = function () {
          return Object.create(this);
        };
        XMLCData.prototype.toString = function (options) {
          return this.options.writer.cdata(this, this.options.writer.filterOptions(options));
        };
        return XMLCData;
      }(XMLCharacterData);
    }).call(commonjsGlobal);
    return XMLCData.exports;
  }

  var XMLComment = {exports: {}};

  var hasRequiredXMLComment;
  function requireXMLComment() {
    if (hasRequiredXMLComment) return XMLComment.exports;
    hasRequiredXMLComment = 1;
    // Generated by CoffeeScript 1.12.7
    (function () {
      var NodeType,
        XMLCharacterData,
        extend = function extend(child, parent) {
          for (var key in parent) {
            if (hasProp.call(parent, key)) child[key] = parent[key];
          }
          function ctor() {
            this.constructor = child;
          }
          ctor.prototype = parent.prototype;
          child.prototype = new ctor();
          child.__super__ = parent.prototype;
          return child;
        },
        hasProp = {}.hasOwnProperty;
      NodeType = requireNodeType();
      XMLCharacterData = requireXMLCharacterData();
      XMLComment.exports = function (superClass) {
        extend(XMLComment, superClass);
        function XMLComment(parent, text) {
          XMLComment.__super__.constructor.call(this, parent);
          if (text == null) {
            throw new Error("Missing comment text. " + this.debugInfo());
          }
          this.name = "#comment";
          this.type = NodeType.Comment;
          this.value = this.stringify.comment(text);
        }
        XMLComment.prototype.clone = function () {
          return Object.create(this);
        };
        XMLComment.prototype.toString = function (options) {
          return this.options.writer.comment(this, this.options.writer.filterOptions(options));
        };
        return XMLComment;
      }(XMLCharacterData);
    }).call(commonjsGlobal);
    return XMLComment.exports;
  }

  var XMLDeclaration = {exports: {}};

  var hasRequiredXMLDeclaration;
  function requireXMLDeclaration() {
    if (hasRequiredXMLDeclaration) return XMLDeclaration.exports;
    hasRequiredXMLDeclaration = 1;
    // Generated by CoffeeScript 1.12.7
    (function () {
      var NodeType,
        XMLNode,
        isObject,
        extend = function extend(child, parent) {
          for (var key in parent) {
            if (hasProp.call(parent, key)) child[key] = parent[key];
          }
          function ctor() {
            this.constructor = child;
          }
          ctor.prototype = parent.prototype;
          child.prototype = new ctor();
          child.__super__ = parent.prototype;
          return child;
        },
        hasProp = {}.hasOwnProperty;
      isObject = requireUtility().isObject;
      XMLNode = requireXMLNode();
      NodeType = requireNodeType();
      XMLDeclaration.exports = function (superClass) {
        extend(XMLDeclaration, superClass);
        function XMLDeclaration(parent, version, encoding, standalone) {
          var ref;
          XMLDeclaration.__super__.constructor.call(this, parent);
          if (isObject(version)) {
            ref = version, version = ref.version, encoding = ref.encoding, standalone = ref.standalone;
          }
          if (!version) {
            version = '1.0';
          }
          this.type = NodeType.Declaration;
          this.version = this.stringify.xmlVersion(version);
          if (encoding != null) {
            this.encoding = this.stringify.xmlEncoding(encoding);
          }
          if (standalone != null) {
            this.standalone = this.stringify.xmlStandalone(standalone);
          }
        }
        XMLDeclaration.prototype.toString = function (options) {
          return this.options.writer.declaration(this, this.options.writer.filterOptions(options));
        };
        return XMLDeclaration;
      }(XMLNode);
    }).call(commonjsGlobal);
    return XMLDeclaration.exports;
  }

  var XMLDocType = {exports: {}};

  var XMLDTDAttList = {exports: {}};

  var hasRequiredXMLDTDAttList;
  function requireXMLDTDAttList() {
    if (hasRequiredXMLDTDAttList) return XMLDTDAttList.exports;
    hasRequiredXMLDTDAttList = 1;
    // Generated by CoffeeScript 1.12.7
    (function () {
      var NodeType,
        XMLNode,
        extend = function extend(child, parent) {
          for (var key in parent) {
            if (hasProp.call(parent, key)) child[key] = parent[key];
          }
          function ctor() {
            this.constructor = child;
          }
          ctor.prototype = parent.prototype;
          child.prototype = new ctor();
          child.__super__ = parent.prototype;
          return child;
        },
        hasProp = {}.hasOwnProperty;
      XMLNode = requireXMLNode();
      NodeType = requireNodeType();
      XMLDTDAttList.exports = function (superClass) {
        extend(XMLDTDAttList, superClass);
        function XMLDTDAttList(parent, elementName, attributeName, attributeType, defaultValueType, defaultValue) {
          XMLDTDAttList.__super__.constructor.call(this, parent);
          if (elementName == null) {
            throw new Error("Missing DTD element name. " + this.debugInfo());
          }
          if (attributeName == null) {
            throw new Error("Missing DTD attribute name. " + this.debugInfo(elementName));
          }
          if (!attributeType) {
            throw new Error("Missing DTD attribute type. " + this.debugInfo(elementName));
          }
          if (!defaultValueType) {
            throw new Error("Missing DTD attribute default. " + this.debugInfo(elementName));
          }
          if (defaultValueType.indexOf('#') !== 0) {
            defaultValueType = '#' + defaultValueType;
          }
          if (!defaultValueType.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/)) {
            throw new Error("Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT. " + this.debugInfo(elementName));
          }
          if (defaultValue && !defaultValueType.match(/^(#FIXED|#DEFAULT)$/)) {
            throw new Error("Default value only applies to #FIXED or #DEFAULT. " + this.debugInfo(elementName));
          }
          this.elementName = this.stringify.name(elementName);
          this.type = NodeType.AttributeDeclaration;
          this.attributeName = this.stringify.name(attributeName);
          this.attributeType = this.stringify.dtdAttType(attributeType);
          if (defaultValue) {
            this.defaultValue = this.stringify.dtdAttDefault(defaultValue);
          }
          this.defaultValueType = defaultValueType;
        }
        XMLDTDAttList.prototype.toString = function (options) {
          return this.options.writer.dtdAttList(this, this.options.writer.filterOptions(options));
        };
        return XMLDTDAttList;
      }(XMLNode);
    }).call(commonjsGlobal);
    return XMLDTDAttList.exports;
  }

  var XMLDTDEntity = {exports: {}};

  var hasRequiredXMLDTDEntity;
  function requireXMLDTDEntity() {
    if (hasRequiredXMLDTDEntity) return XMLDTDEntity.exports;
    hasRequiredXMLDTDEntity = 1;
    // Generated by CoffeeScript 1.12.7
    (function () {
      var NodeType,
        XMLNode,
        isObject,
        extend = function extend(child, parent) {
          for (var key in parent) {
            if (hasProp.call(parent, key)) child[key] = parent[key];
          }
          function ctor() {
            this.constructor = child;
          }
          ctor.prototype = parent.prototype;
          child.prototype = new ctor();
          child.__super__ = parent.prototype;
          return child;
        },
        hasProp = {}.hasOwnProperty;
      isObject = requireUtility().isObject;
      XMLNode = requireXMLNode();
      NodeType = requireNodeType();
      XMLDTDEntity.exports = function (superClass) {
        extend(XMLDTDEntity, superClass);
        function XMLDTDEntity(parent, pe, name, value) {
          XMLDTDEntity.__super__.constructor.call(this, parent);
          if (name == null) {
            throw new Error("Missing DTD entity name. " + this.debugInfo(name));
          }
          if (value == null) {
            throw new Error("Missing DTD entity value. " + this.debugInfo(name));
          }
          this.pe = !!pe;
          this.name = this.stringify.name(name);
          this.type = NodeType.EntityDeclaration;
          if (!isObject(value)) {
            this.value = this.stringify.dtdEntityValue(value);
            this.internal = true;
          } else {
            if (!value.pubID && !value.sysID) {
              throw new Error("Public and/or system identifiers are required for an external entity. " + this.debugInfo(name));
            }
            if (value.pubID && !value.sysID) {
              throw new Error("System identifier is required for a public external entity. " + this.debugInfo(name));
            }
            this.internal = false;
            if (value.pubID != null) {
              this.pubID = this.stringify.dtdPubID(value.pubID);
            }
            if (value.sysID != null) {
              this.sysID = this.stringify.dtdSysID(value.sysID);
            }
            if (value.nData != null) {
              this.nData = this.stringify.dtdNData(value.nData);
            }
            if (this.pe && this.nData) {
              throw new Error("Notation declaration is not allowed in a parameter entity. " + this.debugInfo(name));
            }
          }
        }
        Object.defineProperty(XMLDTDEntity.prototype, 'publicId', {
          get: function get() {
            return this.pubID;
          }
        });
        Object.defineProperty(XMLDTDEntity.prototype, 'systemId', {
          get: function get() {
            return this.sysID;
          }
        });
        Object.defineProperty(XMLDTDEntity.prototype, 'notationName', {
          get: function get() {
            return this.nData || null;
          }
        });
        Object.defineProperty(XMLDTDEntity.prototype, 'inputEncoding', {
          get: function get() {
            return null;
          }
        });
        Object.defineProperty(XMLDTDEntity.prototype, 'xmlEncoding', {
          get: function get() {
            return null;
          }
        });
        Object.defineProperty(XMLDTDEntity.prototype, 'xmlVersion', {
          get: function get() {
            return null;
          }
        });
        XMLDTDEntity.prototype.toString = function (options) {
          return this.options.writer.dtdEntity(this, this.options.writer.filterOptions(options));
        };
        return XMLDTDEntity;
      }(XMLNode);
    }).call(commonjsGlobal);
    return XMLDTDEntity.exports;
  }

  var XMLDTDElement = {exports: {}};

  var hasRequiredXMLDTDElement;
  function requireXMLDTDElement() {
    if (hasRequiredXMLDTDElement) return XMLDTDElement.exports;
    hasRequiredXMLDTDElement = 1;
    // Generated by CoffeeScript 1.12.7
    (function () {
      var NodeType,
        XMLNode,
        extend = function extend(child, parent) {
          for (var key in parent) {
            if (hasProp.call(parent, key)) child[key] = parent[key];
          }
          function ctor() {
            this.constructor = child;
          }
          ctor.prototype = parent.prototype;
          child.prototype = new ctor();
          child.__super__ = parent.prototype;
          return child;
        },
        hasProp = {}.hasOwnProperty;
      XMLNode = requireXMLNode();
      NodeType = requireNodeType();
      XMLDTDElement.exports = function (superClass) {
        extend(XMLDTDElement, superClass);
        function XMLDTDElement(parent, name, value) {
          XMLDTDElement.__super__.constructor.call(this, parent);
          if (name == null) {
            throw new Error("Missing DTD element name. " + this.debugInfo());
          }
          if (!value) {
            value = '(#PCDATA)';
          }
          if (Array.isArray(value)) {
            value = '(' + value.join(',') + ')';
          }
          this.name = this.stringify.name(name);
          this.type = NodeType.ElementDeclaration;
          this.value = this.stringify.dtdElementValue(value);
        }
        XMLDTDElement.prototype.toString = function (options) {
          return this.options.writer.dtdElement(this, this.options.writer.filterOptions(options));
        };
        return XMLDTDElement;
      }(XMLNode);
    }).call(commonjsGlobal);
    return XMLDTDElement.exports;
  }

  var XMLDTDNotation = {exports: {}};

  var hasRequiredXMLDTDNotation;
  function requireXMLDTDNotation() {
    if (hasRequiredXMLDTDNotation) return XMLDTDNotation.exports;
    hasRequiredXMLDTDNotation = 1;
    // Generated by CoffeeScript 1.12.7
    (function () {
      var NodeType,
        XMLNode,
        extend = function extend(child, parent) {
          for (var key in parent) {
            if (hasProp.call(parent, key)) child[key] = parent[key];
          }
          function ctor() {
            this.constructor = child;
          }
          ctor.prototype = parent.prototype;
          child.prototype = new ctor();
          child.__super__ = parent.prototype;
          return child;
        },
        hasProp = {}.hasOwnProperty;
      XMLNode = requireXMLNode();
      NodeType = requireNodeType();
      XMLDTDNotation.exports = function (superClass) {
        extend(XMLDTDNotation, superClass);
        function XMLDTDNotation(parent, name, value) {
          XMLDTDNotation.__super__.constructor.call(this, parent);
          if (name == null) {
            throw new Error("Missing DTD notation name. " + this.debugInfo(name));
          }
          if (!value.pubID && !value.sysID) {
            throw new Error("Public or system identifiers are required for an external entity. " + this.debugInfo(name));
          }
          this.name = this.stringify.name(name);
          this.type = NodeType.NotationDeclaration;
          if (value.pubID != null) {
            this.pubID = this.stringify.dtdPubID(value.pubID);
          }
          if (value.sysID != null) {
            this.sysID = this.stringify.dtdSysID(value.sysID);
          }
        }
        Object.defineProperty(XMLDTDNotation.prototype, 'publicId', {
          get: function get() {
            return this.pubID;
          }
        });
        Object.defineProperty(XMLDTDNotation.prototype, 'systemId', {
          get: function get() {
            return this.sysID;
          }
        });
        XMLDTDNotation.prototype.toString = function (options) {
          return this.options.writer.dtdNotation(this, this.options.writer.filterOptions(options));
        };
        return XMLDTDNotation;
      }(XMLNode);
    }).call(commonjsGlobal);
    return XMLDTDNotation.exports;
  }

  var hasRequiredXMLDocType;
  function requireXMLDocType() {
    if (hasRequiredXMLDocType) return XMLDocType.exports;
    hasRequiredXMLDocType = 1;
    // Generated by CoffeeScript 1.12.7
    (function () {
      var NodeType,
        XMLDTDAttList,
        XMLDTDElement,
        XMLDTDEntity,
        XMLDTDNotation,
        XMLNamedNodeMap,
        XMLNode,
        isObject,
        extend = function extend(child, parent) {
          for (var key in parent) {
            if (hasProp.call(parent, key)) child[key] = parent[key];
          }
          function ctor() {
            this.constructor = child;
          }
          ctor.prototype = parent.prototype;
          child.prototype = new ctor();
          child.__super__ = parent.prototype;
          return child;
        },
        hasProp = {}.hasOwnProperty;
      isObject = requireUtility().isObject;
      XMLNode = requireXMLNode();
      NodeType = requireNodeType();
      XMLDTDAttList = requireXMLDTDAttList();
      XMLDTDEntity = requireXMLDTDEntity();
      XMLDTDElement = requireXMLDTDElement();
      XMLDTDNotation = requireXMLDTDNotation();
      XMLNamedNodeMap = requireXMLNamedNodeMap();
      XMLDocType.exports = function (superClass) {
        extend(XMLDocType, superClass);
        function XMLDocType(parent, pubID, sysID) {
          var child, i, len, ref, ref1, ref2;
          XMLDocType.__super__.constructor.call(this, parent);
          this.type = NodeType.DocType;
          if (parent.children) {
            ref = parent.children;
            for (i = 0, len = ref.length; i < len; i++) {
              child = ref[i];
              if (child.type === NodeType.Element) {
                this.name = child.name;
                break;
              }
            }
          }
          this.documentObject = parent;
          if (isObject(pubID)) {
            ref1 = pubID, pubID = ref1.pubID, sysID = ref1.sysID;
          }
          if (sysID == null) {
            ref2 = [pubID, sysID], sysID = ref2[0], pubID = ref2[1];
          }
          if (pubID != null) {
            this.pubID = this.stringify.dtdPubID(pubID);
          }
          if (sysID != null) {
            this.sysID = this.stringify.dtdSysID(sysID);
          }
        }
        Object.defineProperty(XMLDocType.prototype, 'entities', {
          get: function get() {
            var child, i, len, nodes, ref;
            nodes = {};
            ref = this.children;
            for (i = 0, len = ref.length; i < len; i++) {
              child = ref[i];
              if (child.type === NodeType.EntityDeclaration && !child.pe) {
                nodes[child.name] = child;
              }
            }
            return new XMLNamedNodeMap(nodes);
          }
        });
        Object.defineProperty(XMLDocType.prototype, 'notations', {
          get: function get() {
            var child, i, len, nodes, ref;
            nodes = {};
            ref = this.children;
            for (i = 0, len = ref.length; i < len; i++) {
              child = ref[i];
              if (child.type === NodeType.NotationDeclaration) {
                nodes[child.name] = child;
              }
            }
            return new XMLNamedNodeMap(nodes);
          }
        });
        Object.defineProperty(XMLDocType.prototype, 'publicId', {
          get: function get() {
            return this.pubID;
          }
        });
        Object.defineProperty(XMLDocType.prototype, 'systemId', {
          get: function get() {
            return this.sysID;
          }
        });
        Object.defineProperty(XMLDocType.prototype, 'internalSubset', {
          get: function get() {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
          }
        });
        XMLDocType.prototype.element = function (name, value) {
          var child;
          child = new XMLDTDElement(this, name, value);
          this.children.push(child);
          return this;
        };
        XMLDocType.prototype.attList = function (elementName, attributeName, attributeType, defaultValueType, defaultValue) {
          var child;
          child = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);
          this.children.push(child);
          return this;
        };
        XMLDocType.prototype.entity = function (name, value) {
          var child;
          child = new XMLDTDEntity(this, false, name, value);
          this.children.push(child);
          return this;
        };
        XMLDocType.prototype.pEntity = function (name, value) {
          var child;
          child = new XMLDTDEntity(this, true, name, value);
          this.children.push(child);
          return this;
        };
        XMLDocType.prototype.notation = function (name, value) {
          var child;
          child = new XMLDTDNotation(this, name, value);
          this.children.push(child);
          return this;
        };
        XMLDocType.prototype.toString = function (options) {
          return this.options.writer.docType(this, this.options.writer.filterOptions(options));
        };
        XMLDocType.prototype.ele = function (name, value) {
          return this.element(name, value);
        };
        XMLDocType.prototype.att = function (elementName, attributeName, attributeType, defaultValueType, defaultValue) {
          return this.attList(elementName, attributeName, attributeType, defaultValueType, defaultValue);
        };
        XMLDocType.prototype.ent = function (name, value) {
          return this.entity(name, value);
        };
        XMLDocType.prototype.pent = function (name, value) {
          return this.pEntity(name, value);
        };
        XMLDocType.prototype.not = function (name, value) {
          return this.notation(name, value);
        };
        XMLDocType.prototype.up = function () {
          return this.root() || this.documentObject;
        };
        XMLDocType.prototype.isEqualNode = function (node) {
          if (!XMLDocType.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {
            return false;
          }
          if (node.name !== this.name) {
            return false;
          }
          if (node.publicId !== this.publicId) {
            return false;
          }
          if (node.systemId !== this.systemId) {
            return false;
          }
          return true;
        };
        return XMLDocType;
      }(XMLNode);
    }).call(commonjsGlobal);
    return XMLDocType.exports;
  }

  var XMLRaw = {exports: {}};

  var hasRequiredXMLRaw;
  function requireXMLRaw() {
    if (hasRequiredXMLRaw) return XMLRaw.exports;
    hasRequiredXMLRaw = 1;
    // Generated by CoffeeScript 1.12.7
    (function () {
      var NodeType,
        XMLNode,
        extend = function extend(child, parent) {
          for (var key in parent) {
            if (hasProp.call(parent, key)) child[key] = parent[key];
          }
          function ctor() {
            this.constructor = child;
          }
          ctor.prototype = parent.prototype;
          child.prototype = new ctor();
          child.__super__ = parent.prototype;
          return child;
        },
        hasProp = {}.hasOwnProperty;
      NodeType = requireNodeType();
      XMLNode = requireXMLNode();
      XMLRaw.exports = function (superClass) {
        extend(XMLRaw, superClass);
        function XMLRaw(parent, text) {
          XMLRaw.__super__.constructor.call(this, parent);
          if (text == null) {
            throw new Error("Missing raw text. " + this.debugInfo());
          }
          this.type = NodeType.Raw;
          this.value = this.stringify.raw(text);
        }
        XMLRaw.prototype.clone = function () {
          return Object.create(this);
        };
        XMLRaw.prototype.toString = function (options) {
          return this.options.writer.raw(this, this.options.writer.filterOptions(options));
        };
        return XMLRaw;
      }(XMLNode);
    }).call(commonjsGlobal);
    return XMLRaw.exports;
  }

  var XMLText = {exports: {}};

  var hasRequiredXMLText;
  function requireXMLText() {
    if (hasRequiredXMLText) return XMLText.exports;
    hasRequiredXMLText = 1;
    // Generated by CoffeeScript 1.12.7
    (function () {
      var NodeType,
        XMLCharacterData,
        extend = function extend(child, parent) {
          for (var key in parent) {
            if (hasProp.call(parent, key)) child[key] = parent[key];
          }
          function ctor() {
            this.constructor = child;
          }
          ctor.prototype = parent.prototype;
          child.prototype = new ctor();
          child.__super__ = parent.prototype;
          return child;
        },
        hasProp = {}.hasOwnProperty;
      NodeType = requireNodeType();
      XMLCharacterData = requireXMLCharacterData();
      XMLText.exports = function (superClass) {
        extend(XMLText, superClass);
        function XMLText(parent, text) {
          XMLText.__super__.constructor.call(this, parent);
          if (text == null) {
            throw new Error("Missing element text. " + this.debugInfo());
          }
          this.name = "#text";
          this.type = NodeType.Text;
          this.value = this.stringify.text(text);
        }
        Object.defineProperty(XMLText.prototype, 'isElementContentWhitespace', {
          get: function get() {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
          }
        });
        Object.defineProperty(XMLText.prototype, 'wholeText', {
          get: function get() {
            var next, prev, str;
            str = '';
            prev = this.previousSibling;
            while (prev) {
              str = prev.data + str;
              prev = prev.previousSibling;
            }
            str += this.data;
            next = this.nextSibling;
            while (next) {
              str = str + next.data;
              next = next.nextSibling;
            }
            return str;
          }
        });
        XMLText.prototype.clone = function () {
          return Object.create(this);
        };
        XMLText.prototype.toString = function (options) {
          return this.options.writer.text(this, this.options.writer.filterOptions(options));
        };
        XMLText.prototype.splitText = function (offset) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLText.prototype.replaceWholeText = function (content) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        return XMLText;
      }(XMLCharacterData);
    }).call(commonjsGlobal);
    return XMLText.exports;
  }

  var XMLProcessingInstruction = {exports: {}};

  var hasRequiredXMLProcessingInstruction;
  function requireXMLProcessingInstruction() {
    if (hasRequiredXMLProcessingInstruction) return XMLProcessingInstruction.exports;
    hasRequiredXMLProcessingInstruction = 1;
    // Generated by CoffeeScript 1.12.7
    (function () {
      var NodeType,
        XMLCharacterData,
        extend = function extend(child, parent) {
          for (var key in parent) {
            if (hasProp.call(parent, key)) child[key] = parent[key];
          }
          function ctor() {
            this.constructor = child;
          }
          ctor.prototype = parent.prototype;
          child.prototype = new ctor();
          child.__super__ = parent.prototype;
          return child;
        },
        hasProp = {}.hasOwnProperty;
      NodeType = requireNodeType();
      XMLCharacterData = requireXMLCharacterData();
      XMLProcessingInstruction.exports = function (superClass) {
        extend(XMLProcessingInstruction, superClass);
        function XMLProcessingInstruction(parent, target, value) {
          XMLProcessingInstruction.__super__.constructor.call(this, parent);
          if (target == null) {
            throw new Error("Missing instruction target. " + this.debugInfo());
          }
          this.type = NodeType.ProcessingInstruction;
          this.target = this.stringify.insTarget(target);
          this.name = this.target;
          if (value) {
            this.value = this.stringify.insValue(value);
          }
        }
        XMLProcessingInstruction.prototype.clone = function () {
          return Object.create(this);
        };
        XMLProcessingInstruction.prototype.toString = function (options) {
          return this.options.writer.processingInstruction(this, this.options.writer.filterOptions(options));
        };
        XMLProcessingInstruction.prototype.isEqualNode = function (node) {
          if (!XMLProcessingInstruction.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {
            return false;
          }
          if (node.target !== this.target) {
            return false;
          }
          return true;
        };
        return XMLProcessingInstruction;
      }(XMLCharacterData);
    }).call(commonjsGlobal);
    return XMLProcessingInstruction.exports;
  }

  var XMLDummy = {exports: {}};

  var hasRequiredXMLDummy;
  function requireXMLDummy() {
    if (hasRequiredXMLDummy) return XMLDummy.exports;
    hasRequiredXMLDummy = 1;
    // Generated by CoffeeScript 1.12.7
    (function () {
      var NodeType,
        XMLNode,
        extend = function extend(child, parent) {
          for (var key in parent) {
            if (hasProp.call(parent, key)) child[key] = parent[key];
          }
          function ctor() {
            this.constructor = child;
          }
          ctor.prototype = parent.prototype;
          child.prototype = new ctor();
          child.__super__ = parent.prototype;
          return child;
        },
        hasProp = {}.hasOwnProperty;
      XMLNode = requireXMLNode();
      NodeType = requireNodeType();
      XMLDummy.exports = function (superClass) {
        extend(XMLDummy, superClass);
        function XMLDummy(parent) {
          XMLDummy.__super__.constructor.call(this, parent);
          this.type = NodeType.Dummy;
        }
        XMLDummy.prototype.clone = function () {
          return Object.create(this);
        };
        XMLDummy.prototype.toString = function (options) {
          return '';
        };
        return XMLDummy;
      }(XMLNode);
    }).call(commonjsGlobal);
    return XMLDummy.exports;
  }

  var XMLNodeList = {exports: {}};

  var hasRequiredXMLNodeList;
  function requireXMLNodeList() {
    if (hasRequiredXMLNodeList) return XMLNodeList.exports;
    hasRequiredXMLNodeList = 1;
    // Generated by CoffeeScript 1.12.7
    (function () {
      XMLNodeList.exports = function () {
        function XMLNodeList(nodes) {
          this.nodes = nodes;
        }
        Object.defineProperty(XMLNodeList.prototype, 'length', {
          get: function get() {
            return this.nodes.length || 0;
          }
        });
        XMLNodeList.prototype.clone = function () {
          return this.nodes = null;
        };
        XMLNodeList.prototype.item = function (index) {
          return this.nodes[index] || null;
        };
        return XMLNodeList;
      }();
    }).call(commonjsGlobal);
    return XMLNodeList.exports;
  }

  var DocumentPosition = {exports: {}};

  var hasRequiredDocumentPosition;
  function requireDocumentPosition() {
    if (hasRequiredDocumentPosition) return DocumentPosition.exports;
    hasRequiredDocumentPosition = 1;
    // Generated by CoffeeScript 1.12.7
    (function () {
      DocumentPosition.exports = {
        Disconnected: 1,
        Preceding: 2,
        Following: 4,
        Contains: 8,
        ContainedBy: 16,
        ImplementationSpecific: 32
      };
    }).call(commonjsGlobal);
    return DocumentPosition.exports;
  }

  var hasRequiredXMLNode;
  function requireXMLNode() {
    if (hasRequiredXMLNode) return XMLNode.exports;
    hasRequiredXMLNode = 1;
    // Generated by CoffeeScript 1.12.7
    (function () {
      var DocumentPosition,
        NodeType,
        XMLCData,
        XMLComment,
        XMLDeclaration,
        XMLDocType,
        XMLDummy,
        XMLElement,
        XMLNodeList,
        XMLProcessingInstruction,
        XMLRaw,
        XMLText,
        getValue,
        isEmpty,
        isFunction,
        isObject,
        ref1,
        hasProp = {}.hasOwnProperty;
      ref1 = requireUtility(), isObject = ref1.isObject, isFunction = ref1.isFunction, isEmpty = ref1.isEmpty, getValue = ref1.getValue;
      XMLElement = null;
      XMLCData = null;
      XMLComment = null;
      XMLDeclaration = null;
      XMLDocType = null;
      XMLRaw = null;
      XMLText = null;
      XMLProcessingInstruction = null;
      XMLDummy = null;
      NodeType = null;
      XMLNodeList = null;
      DocumentPosition = null;
      XMLNode.exports = function () {
        function XMLNode(parent1) {
          this.parent = parent1;
          if (this.parent) {
            this.options = this.parent.options;
            this.stringify = this.parent.stringify;
          }
          this.value = null;
          this.children = [];
          this.baseURI = null;
          if (!XMLElement) {
            XMLElement = requireXMLElement();
            XMLCData = requireXMLCData();
            XMLComment = requireXMLComment();
            XMLDeclaration = requireXMLDeclaration();
            XMLDocType = requireXMLDocType();
            XMLRaw = requireXMLRaw();
            XMLText = requireXMLText();
            XMLProcessingInstruction = requireXMLProcessingInstruction();
            XMLDummy = requireXMLDummy();
            NodeType = requireNodeType();
            XMLNodeList = requireXMLNodeList();
            requireXMLNamedNodeMap();
            DocumentPosition = requireDocumentPosition();
          }
        }
        Object.defineProperty(XMLNode.prototype, 'nodeName', {
          get: function get() {
            return this.name;
          }
        });
        Object.defineProperty(XMLNode.prototype, 'nodeType', {
          get: function get() {
            return this.type;
          }
        });
        Object.defineProperty(XMLNode.prototype, 'nodeValue', {
          get: function get() {
            return this.value;
          }
        });
        Object.defineProperty(XMLNode.prototype, 'parentNode', {
          get: function get() {
            return this.parent;
          }
        });
        Object.defineProperty(XMLNode.prototype, 'childNodes', {
          get: function get() {
            if (!this.childNodeList || !this.childNodeList.nodes) {
              this.childNodeList = new XMLNodeList(this.children);
            }
            return this.childNodeList;
          }
        });
        Object.defineProperty(XMLNode.prototype, 'firstChild', {
          get: function get() {
            return this.children[0] || null;
          }
        });
        Object.defineProperty(XMLNode.prototype, 'lastChild', {
          get: function get() {
            return this.children[this.children.length - 1] || null;
          }
        });
        Object.defineProperty(XMLNode.prototype, 'previousSibling', {
          get: function get() {
            var i;
            i = this.parent.children.indexOf(this);
            return this.parent.children[i - 1] || null;
          }
        });
        Object.defineProperty(XMLNode.prototype, 'nextSibling', {
          get: function get() {
            var i;
            i = this.parent.children.indexOf(this);
            return this.parent.children[i + 1] || null;
          }
        });
        Object.defineProperty(XMLNode.prototype, 'ownerDocument', {
          get: function get() {
            return this.document() || null;
          }
        });
        Object.defineProperty(XMLNode.prototype, 'textContent', {
          get: function get() {
            var child, j, len, ref2, str;
            if (this.nodeType === NodeType.Element || this.nodeType === NodeType.DocumentFragment) {
              str = '';
              ref2 = this.children;
              for (j = 0, len = ref2.length; j < len; j++) {
                child = ref2[j];
                if (child.textContent) {
                  str += child.textContent;
                }
              }
              return str;
            } else {
              return null;
            }
          },
          set: function set(value) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
          }
        });
        XMLNode.prototype.setParent = function (parent) {
          var child, j, len, ref2, results;
          this.parent = parent;
          if (parent) {
            this.options = parent.options;
            this.stringify = parent.stringify;
          }
          ref2 = this.children;
          results = [];
          for (j = 0, len = ref2.length; j < len; j++) {
            child = ref2[j];
            results.push(child.setParent(this));
          }
          return results;
        };
        XMLNode.prototype.element = function (name, attributes, text) {
          var childNode, item, j, k, key, lastChild, len, len1, ref2, ref3, val;
          lastChild = null;
          if (attributes === null && text == null) {
            ref2 = [{}, null], attributes = ref2[0], text = ref2[1];
          }
          if (attributes == null) {
            attributes = {};
          }
          attributes = getValue(attributes);
          if (!isObject(attributes)) {
            ref3 = [attributes, text], text = ref3[0], attributes = ref3[1];
          }
          if (name != null) {
            name = getValue(name);
          }
          if (Array.isArray(name)) {
            for (j = 0, len = name.length; j < len; j++) {
              item = name[j];
              lastChild = this.element(item);
            }
          } else if (isFunction(name)) {
            lastChild = this.element(name.apply());
          } else if (isObject(name)) {
            for (key in name) {
              if (!hasProp.call(name, key)) continue;
              val = name[key];
              if (isFunction(val)) {
                val = val.apply();
              }
              if (!this.options.ignoreDecorators && this.stringify.convertAttKey && key.indexOf(this.stringify.convertAttKey) === 0) {
                lastChild = this.attribute(key.substr(this.stringify.convertAttKey.length), val);
              } else if (!this.options.separateArrayItems && Array.isArray(val) && isEmpty(val)) {
                lastChild = this.dummy();
              } else if (isObject(val) && isEmpty(val)) {
                lastChild = this.element(key);
              } else if (!this.options.keepNullNodes && val == null) {
                lastChild = this.dummy();
              } else if (!this.options.separateArrayItems && Array.isArray(val)) {
                for (k = 0, len1 = val.length; k < len1; k++) {
                  item = val[k];
                  childNode = {};
                  childNode[key] = item;
                  lastChild = this.element(childNode);
                }
              } else if (isObject(val)) {
                if (!this.options.ignoreDecorators && this.stringify.convertTextKey && key.indexOf(this.stringify.convertTextKey) === 0) {
                  lastChild = this.element(val);
                } else {
                  lastChild = this.element(key);
                  lastChild.element(val);
                }
              } else {
                lastChild = this.element(key, val);
              }
            }
          } else if (!this.options.keepNullNodes && text === null) {
            lastChild = this.dummy();
          } else {
            if (!this.options.ignoreDecorators && this.stringify.convertTextKey && name.indexOf(this.stringify.convertTextKey) === 0) {
              lastChild = this.text(text);
            } else if (!this.options.ignoreDecorators && this.stringify.convertCDataKey && name.indexOf(this.stringify.convertCDataKey) === 0) {
              lastChild = this.cdata(text);
            } else if (!this.options.ignoreDecorators && this.stringify.convertCommentKey && name.indexOf(this.stringify.convertCommentKey) === 0) {
              lastChild = this.comment(text);
            } else if (!this.options.ignoreDecorators && this.stringify.convertRawKey && name.indexOf(this.stringify.convertRawKey) === 0) {
              lastChild = this.raw(text);
            } else if (!this.options.ignoreDecorators && this.stringify.convertPIKey && name.indexOf(this.stringify.convertPIKey) === 0) {
              lastChild = this.instruction(name.substr(this.stringify.convertPIKey.length), text);
            } else {
              lastChild = this.node(name, attributes, text);
            }
          }
          if (lastChild == null) {
            throw new Error("Could not create any elements with: " + name + ". " + this.debugInfo());
          }
          return lastChild;
        };
        XMLNode.prototype.insertBefore = function (name, attributes, text) {
          var child, i, newChild, refChild, removed;
          if (name != null ? name.type : void 0) {
            newChild = name;
            refChild = attributes;
            newChild.setParent(this);
            if (refChild) {
              i = children.indexOf(refChild);
              removed = children.splice(i);
              children.push(newChild);
              Array.prototype.push.apply(children, removed);
            } else {
              children.push(newChild);
            }
            return newChild;
          } else {
            if (this.isRoot) {
              throw new Error("Cannot insert elements at root level. " + this.debugInfo(name));
            }
            i = this.parent.children.indexOf(this);
            removed = this.parent.children.splice(i);
            child = this.parent.element(name, attributes, text);
            Array.prototype.push.apply(this.parent.children, removed);
            return child;
          }
        };
        XMLNode.prototype.insertAfter = function (name, attributes, text) {
          var child, i, removed;
          if (this.isRoot) {
            throw new Error("Cannot insert elements at root level. " + this.debugInfo(name));
          }
          i = this.parent.children.indexOf(this);
          removed = this.parent.children.splice(i + 1);
          child = this.parent.element(name, attributes, text);
          Array.prototype.push.apply(this.parent.children, removed);
          return child;
        };
        XMLNode.prototype.remove = function () {
          var i;
          if (this.isRoot) {
            throw new Error("Cannot remove the root element. " + this.debugInfo());
          }
          i = this.parent.children.indexOf(this);
          [].splice.apply(this.parent.children, [i, i - i + 1].concat([]));
          return this.parent;
        };
        XMLNode.prototype.node = function (name, attributes, text) {
          var child, ref2;
          if (name != null) {
            name = getValue(name);
          }
          attributes || (attributes = {});
          attributes = getValue(attributes);
          if (!isObject(attributes)) {
            ref2 = [attributes, text], text = ref2[0], attributes = ref2[1];
          }
          child = new XMLElement(this, name, attributes);
          if (text != null) {
            child.text(text);
          }
          this.children.push(child);
          return child;
        };
        XMLNode.prototype.text = function (value) {
          var child;
          if (isObject(value)) {
            this.element(value);
          }
          child = new XMLText(this, value);
          this.children.push(child);
          return this;
        };
        XMLNode.prototype.cdata = function (value) {
          var child;
          child = new XMLCData(this, value);
          this.children.push(child);
          return this;
        };
        XMLNode.prototype.comment = function (value) {
          var child;
          child = new XMLComment(this, value);
          this.children.push(child);
          return this;
        };
        XMLNode.prototype.commentBefore = function (value) {
          var i, removed;
          i = this.parent.children.indexOf(this);
          removed = this.parent.children.splice(i);
          this.parent.comment(value);
          Array.prototype.push.apply(this.parent.children, removed);
          return this;
        };
        XMLNode.prototype.commentAfter = function (value) {
          var i, removed;
          i = this.parent.children.indexOf(this);
          removed = this.parent.children.splice(i + 1);
          this.parent.comment(value);
          Array.prototype.push.apply(this.parent.children, removed);
          return this;
        };
        XMLNode.prototype.raw = function (value) {
          var child;
          child = new XMLRaw(this, value);
          this.children.push(child);
          return this;
        };
        XMLNode.prototype.dummy = function () {
          var child;
          child = new XMLDummy(this);
          return child;
        };
        XMLNode.prototype.instruction = function (target, value) {
          var insTarget, insValue, instruction, j, len;
          if (target != null) {
            target = getValue(target);
          }
          if (value != null) {
            value = getValue(value);
          }
          if (Array.isArray(target)) {
            for (j = 0, len = target.length; j < len; j++) {
              insTarget = target[j];
              this.instruction(insTarget);
            }
          } else if (isObject(target)) {
            for (insTarget in target) {
              if (!hasProp.call(target, insTarget)) continue;
              insValue = target[insTarget];
              this.instruction(insTarget, insValue);
            }
          } else {
            if (isFunction(value)) {
              value = value.apply();
            }
            instruction = new XMLProcessingInstruction(this, target, value);
            this.children.push(instruction);
          }
          return this;
        };
        XMLNode.prototype.instructionBefore = function (target, value) {
          var i, removed;
          i = this.parent.children.indexOf(this);
          removed = this.parent.children.splice(i);
          this.parent.instruction(target, value);
          Array.prototype.push.apply(this.parent.children, removed);
          return this;
        };
        XMLNode.prototype.instructionAfter = function (target, value) {
          var i, removed;
          i = this.parent.children.indexOf(this);
          removed = this.parent.children.splice(i + 1);
          this.parent.instruction(target, value);
          Array.prototype.push.apply(this.parent.children, removed);
          return this;
        };
        XMLNode.prototype.declaration = function (version, encoding, standalone) {
          var doc, xmldec;
          doc = this.document();
          xmldec = new XMLDeclaration(doc, version, encoding, standalone);
          if (doc.children.length === 0) {
            doc.children.unshift(xmldec);
          } else if (doc.children[0].type === NodeType.Declaration) {
            doc.children[0] = xmldec;
          } else {
            doc.children.unshift(xmldec);
          }
          return doc.root() || doc;
        };
        XMLNode.prototype.dtd = function (pubID, sysID) {
          var child, doc, doctype, i, j, k, len, len1, ref2, ref3;
          doc = this.document();
          doctype = new XMLDocType(doc, pubID, sysID);
          ref2 = doc.children;
          for (i = j = 0, len = ref2.length; j < len; i = ++j) {
            child = ref2[i];
            if (child.type === NodeType.DocType) {
              doc.children[i] = doctype;
              return doctype;
            }
          }
          ref3 = doc.children;
          for (i = k = 0, len1 = ref3.length; k < len1; i = ++k) {
            child = ref3[i];
            if (child.isRoot) {
              doc.children.splice(i, 0, doctype);
              return doctype;
            }
          }
          doc.children.push(doctype);
          return doctype;
        };
        XMLNode.prototype.up = function () {
          if (this.isRoot) {
            throw new Error("The root node has no parent. Use doc() if you need to get the document object.");
          }
          return this.parent;
        };
        XMLNode.prototype.root = function () {
          var node;
          node = this;
          while (node) {
            if (node.type === NodeType.Document) {
              return node.rootObject;
            } else if (node.isRoot) {
              return node;
            } else {
              node = node.parent;
            }
          }
        };
        XMLNode.prototype.document = function () {
          var node;
          node = this;
          while (node) {
            if (node.type === NodeType.Document) {
              return node;
            } else {
              node = node.parent;
            }
          }
        };
        XMLNode.prototype.end = function (options) {
          return this.document().end(options);
        };
        XMLNode.prototype.prev = function () {
          var i;
          i = this.parent.children.indexOf(this);
          if (i < 1) {
            throw new Error("Already at the first node. " + this.debugInfo());
          }
          return this.parent.children[i - 1];
        };
        XMLNode.prototype.next = function () {
          var i;
          i = this.parent.children.indexOf(this);
          if (i === -1 || i === this.parent.children.length - 1) {
            throw new Error("Already at the last node. " + this.debugInfo());
          }
          return this.parent.children[i + 1];
        };
        XMLNode.prototype.importDocument = function (doc) {
          var clonedRoot;
          clonedRoot = doc.root().clone();
          clonedRoot.parent = this;
          clonedRoot.isRoot = false;
          this.children.push(clonedRoot);
          return this;
        };
        XMLNode.prototype.debugInfo = function (name) {
          var ref2, ref3;
          name = name || this.name;
          if (name == null && !((ref2 = this.parent) != null ? ref2.name : void 0)) {
            return "";
          } else if (name == null) {
            return "parent: <" + this.parent.name + ">";
          } else if (!((ref3 = this.parent) != null ? ref3.name : void 0)) {
            return "node: <" + name + ">";
          } else {
            return "node: <" + name + ">, parent: <" + this.parent.name + ">";
          }
        };
        XMLNode.prototype.ele = function (name, attributes, text) {
          return this.element(name, attributes, text);
        };
        XMLNode.prototype.nod = function (name, attributes, text) {
          return this.node(name, attributes, text);
        };
        XMLNode.prototype.txt = function (value) {
          return this.text(value);
        };
        XMLNode.prototype.dat = function (value) {
          return this.cdata(value);
        };
        XMLNode.prototype.com = function (value) {
          return this.comment(value);
        };
        XMLNode.prototype.ins = function (target, value) {
          return this.instruction(target, value);
        };
        XMLNode.prototype.doc = function () {
          return this.document();
        };
        XMLNode.prototype.dec = function (version, encoding, standalone) {
          return this.declaration(version, encoding, standalone);
        };
        XMLNode.prototype.e = function (name, attributes, text) {
          return this.element(name, attributes, text);
        };
        XMLNode.prototype.n = function (name, attributes, text) {
          return this.node(name, attributes, text);
        };
        XMLNode.prototype.t = function (value) {
          return this.text(value);
        };
        XMLNode.prototype.d = function (value) {
          return this.cdata(value);
        };
        XMLNode.prototype.c = function (value) {
          return this.comment(value);
        };
        XMLNode.prototype.r = function (value) {
          return this.raw(value);
        };
        XMLNode.prototype.i = function (target, value) {
          return this.instruction(target, value);
        };
        XMLNode.prototype.u = function () {
          return this.up();
        };
        XMLNode.prototype.importXMLBuilder = function (doc) {
          return this.importDocument(doc);
        };
        XMLNode.prototype.replaceChild = function (newChild, oldChild) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode.prototype.removeChild = function (oldChild) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode.prototype.appendChild = function (newChild) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode.prototype.hasChildNodes = function () {
          return this.children.length !== 0;
        };
        XMLNode.prototype.cloneNode = function (deep) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode.prototype.normalize = function () {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode.prototype.isSupported = function (feature, version) {
          return true;
        };
        XMLNode.prototype.hasAttributes = function () {
          return this.attribs.length !== 0;
        };
        XMLNode.prototype.compareDocumentPosition = function (other) {
          var ref, res;
          ref = this;
          if (ref === other) {
            return 0;
          } else if (this.document() !== other.document()) {
            res = DocumentPosition.Disconnected | DocumentPosition.ImplementationSpecific;
            if (Math.random() < 0.5) {
              res |= DocumentPosition.Preceding;
            } else {
              res |= DocumentPosition.Following;
            }
            return res;
          } else if (ref.isAncestor(other)) {
            return DocumentPosition.Contains | DocumentPosition.Preceding;
          } else if (ref.isDescendant(other)) {
            return DocumentPosition.Contains | DocumentPosition.Following;
          } else if (ref.isPreceding(other)) {
            return DocumentPosition.Preceding;
          } else {
            return DocumentPosition.Following;
          }
        };
        XMLNode.prototype.isSameNode = function (other) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode.prototype.lookupPrefix = function (namespaceURI) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode.prototype.isDefaultNamespace = function (namespaceURI) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode.prototype.lookupNamespaceURI = function (prefix) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode.prototype.isEqualNode = function (node) {
          var i, j, ref2;
          if (node.nodeType !== this.nodeType) {
            return false;
          }
          if (node.children.length !== this.children.length) {
            return false;
          }
          for (i = j = 0, ref2 = this.children.length - 1; 0 <= ref2 ? j <= ref2 : j >= ref2; i = 0 <= ref2 ? ++j : --j) {
            if (!this.children[i].isEqualNode(node.children[i])) {
              return false;
            }
          }
          return true;
        };
        XMLNode.prototype.getFeature = function (feature, version) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode.prototype.setUserData = function (key, data, handler) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode.prototype.getUserData = function (key) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode.prototype.contains = function (other) {
          if (!other) {
            return false;
          }
          return other === this || this.isDescendant(other);
        };
        XMLNode.prototype.isDescendant = function (node) {
          var child, isDescendantChild, j, len, ref2;
          ref2 = this.children;
          for (j = 0, len = ref2.length; j < len; j++) {
            child = ref2[j];
            if (node === child) {
              return true;
            }
            isDescendantChild = child.isDescendant(node);
            if (isDescendantChild) {
              return true;
            }
          }
          return false;
        };
        XMLNode.prototype.isAncestor = function (node) {
          return node.isDescendant(this);
        };
        XMLNode.prototype.isPreceding = function (node) {
          var nodePos, thisPos;
          nodePos = this.treePosition(node);
          thisPos = this.treePosition(this);
          if (nodePos === -1 || thisPos === -1) {
            return false;
          } else {
            return nodePos < thisPos;
          }
        };
        XMLNode.prototype.isFollowing = function (node) {
          var nodePos, thisPos;
          nodePos = this.treePosition(node);
          thisPos = this.treePosition(this);
          if (nodePos === -1 || thisPos === -1) {
            return false;
          } else {
            return nodePos > thisPos;
          }
        };
        XMLNode.prototype.treePosition = function (node) {
          var found, pos;
          pos = 0;
          found = false;
          this.foreachTreeNode(this.document(), function (childNode) {
            pos++;
            if (!found && childNode === node) {
              return found = true;
            }
          });
          if (found) {
            return pos;
          } else {
            return -1;
          }
        };
        XMLNode.prototype.foreachTreeNode = function (node, func) {
          var child, j, len, ref2, res;
          node || (node = this.document());
          ref2 = node.children;
          for (j = 0, len = ref2.length; j < len; j++) {
            child = ref2[j];
            if (res = func(child)) {
              return res;
            } else {
              res = this.foreachTreeNode(child, func);
              if (res) {
                return res;
              }
            }
          }
        };
        return XMLNode;
      }();
    }).call(commonjsGlobal);
    return XMLNode.exports;
  }

  var XMLStringifier = {exports: {}};

  var hasRequiredXMLStringifier;
  function requireXMLStringifier() {
    if (hasRequiredXMLStringifier) return XMLStringifier.exports;
    hasRequiredXMLStringifier = 1;
    // Generated by CoffeeScript 1.12.7
    (function () {
      var bind = function bind(fn, me) {
          return function () {
            return fn.apply(me, arguments);
          };
        },
        hasProp = {}.hasOwnProperty;
      XMLStringifier.exports = function () {
        function XMLStringifier(options) {
          this.assertLegalName = bind(this.assertLegalName, this);
          this.assertLegalChar = bind(this.assertLegalChar, this);
          var key, ref, value;
          options || (options = {});
          this.options = options;
          if (!this.options.version) {
            this.options.version = '1.0';
          }
          ref = options.stringify || {};
          for (key in ref) {
            if (!hasProp.call(ref, key)) continue;
            value = ref[key];
            this[key] = value;
          }
        }
        XMLStringifier.prototype.name = function (val) {
          if (this.options.noValidation) {
            return val;
          }
          return this.assertLegalName('' + val || '');
        };
        XMLStringifier.prototype.text = function (val) {
          if (this.options.noValidation) {
            return val;
          }
          return this.assertLegalChar(this.textEscape('' + val || ''));
        };
        XMLStringifier.prototype.cdata = function (val) {
          if (this.options.noValidation) {
            return val;
          }
          val = '' + val || '';
          val = val.replace(']]>', ']]]]><![CDATA[>');
          return this.assertLegalChar(val);
        };
        XMLStringifier.prototype.comment = function (val) {
          if (this.options.noValidation) {
            return val;
          }
          val = '' + val || '';
          if (val.match(/--/)) {
            throw new Error("Comment text cannot contain double-hypen: " + val);
          }
          return this.assertLegalChar(val);
        };
        XMLStringifier.prototype.raw = function (val) {
          if (this.options.noValidation) {
            return val;
          }
          return '' + val || '';
        };
        XMLStringifier.prototype.attValue = function (val) {
          if (this.options.noValidation) {
            return val;
          }
          return this.assertLegalChar(this.attEscape(val = '' + val || ''));
        };
        XMLStringifier.prototype.insTarget = function (val) {
          if (this.options.noValidation) {
            return val;
          }
          return this.assertLegalChar('' + val || '');
        };
        XMLStringifier.prototype.insValue = function (val) {
          if (this.options.noValidation) {
            return val;
          }
          val = '' + val || '';
          if (val.match(/\?>/)) {
            throw new Error("Invalid processing instruction value: " + val);
          }
          return this.assertLegalChar(val);
        };
        XMLStringifier.prototype.xmlVersion = function (val) {
          if (this.options.noValidation) {
            return val;
          }
          val = '' + val || '';
          if (!val.match(/1\.[0-9]+/)) {
            throw new Error("Invalid version number: " + val);
          }
          return val;
        };
        XMLStringifier.prototype.xmlEncoding = function (val) {
          if (this.options.noValidation) {
            return val;
          }
          val = '' + val || '';
          if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-])*$/)) {
            throw new Error("Invalid encoding: " + val);
          }
          return this.assertLegalChar(val);
        };
        XMLStringifier.prototype.xmlStandalone = function (val) {
          if (this.options.noValidation) {
            return val;
          }
          if (val) {
            return "yes";
          } else {
            return "no";
          }
        };
        XMLStringifier.prototype.dtdPubID = function (val) {
          if (this.options.noValidation) {
            return val;
          }
          return this.assertLegalChar('' + val || '');
        };
        XMLStringifier.prototype.dtdSysID = function (val) {
          if (this.options.noValidation) {
            return val;
          }
          return this.assertLegalChar('' + val || '');
        };
        XMLStringifier.prototype.dtdElementValue = function (val) {
          if (this.options.noValidation) {
            return val;
          }
          return this.assertLegalChar('' + val || '');
        };
        XMLStringifier.prototype.dtdAttType = function (val) {
          if (this.options.noValidation) {
            return val;
          }
          return this.assertLegalChar('' + val || '');
        };
        XMLStringifier.prototype.dtdAttDefault = function (val) {
          if (this.options.noValidation) {
            return val;
          }
          return this.assertLegalChar('' + val || '');
        };
        XMLStringifier.prototype.dtdEntityValue = function (val) {
          if (this.options.noValidation) {
            return val;
          }
          return this.assertLegalChar('' + val || '');
        };
        XMLStringifier.prototype.dtdNData = function (val) {
          if (this.options.noValidation) {
            return val;
          }
          return this.assertLegalChar('' + val || '');
        };
        XMLStringifier.prototype.convertAttKey = '@';
        XMLStringifier.prototype.convertPIKey = '?';
        XMLStringifier.prototype.convertTextKey = '#text';
        XMLStringifier.prototype.convertCDataKey = '#cdata';
        XMLStringifier.prototype.convertCommentKey = '#comment';
        XMLStringifier.prototype.convertRawKey = '#raw';
        XMLStringifier.prototype.assertLegalChar = function (str) {
          var regex, res;
          if (this.options.noValidation) {
            return str;
          }
          regex = '';
          if (this.options.version === '1.0') {
            regex = /[\0-\x08\x0B\f\x0E-\x1F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
            if (res = str.match(regex)) {
              throw new Error("Invalid character in string: " + str + " at index " + res.index);
            }
          } else if (this.options.version === '1.1') {
            regex = /[\0\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
            if (res = str.match(regex)) {
              throw new Error("Invalid character in string: " + str + " at index " + res.index);
            }
          }
          return str;
        };
        XMLStringifier.prototype.assertLegalName = function (str) {
          var regex;
          if (this.options.noValidation) {
            return str;
          }
          this.assertLegalChar(str);
          regex = /^([:A-Z_a-z\xC0-\xD6\xD8-\xF6\xF8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])([\x2D\.0-:A-Z_a-z\xB7\xC0-\xD6\xD8-\xF6\xF8-\u037D\u037F-\u1FFF\u200C\u200D\u203F\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])*$/;
          if (!str.match(regex)) {
            throw new Error("Invalid character in name");
          }
          return str;
        };
        XMLStringifier.prototype.textEscape = function (str) {
          var ampregex;
          if (this.options.noValidation) {
            return str;
          }
          ampregex = this.options.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g;
          return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\r/g, '&#xD;');
        };
        XMLStringifier.prototype.attEscape = function (str) {
          var ampregex;
          if (this.options.noValidation) {
            return str;
          }
          ampregex = this.options.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g;
          return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/"/g, '&quot;').replace(/\t/g, '&#x9;').replace(/\n/g, '&#xA;').replace(/\r/g, '&#xD;');
        };
        return XMLStringifier;
      }();
    }).call(commonjsGlobal);
    return XMLStringifier.exports;
  }

  var XMLStringWriter = {exports: {}};

  var XMLWriterBase = {exports: {}};

  var WriterState = {exports: {}};

  var hasRequiredWriterState;
  function requireWriterState() {
    if (hasRequiredWriterState) return WriterState.exports;
    hasRequiredWriterState = 1;
    // Generated by CoffeeScript 1.12.7
    (function () {
      WriterState.exports = {
        None: 0,
        OpenTag: 1,
        InsideTag: 2,
        CloseTag: 3
      };
    }).call(commonjsGlobal);
    return WriterState.exports;
  }

  var hasRequiredXMLWriterBase;
  function requireXMLWriterBase() {
    if (hasRequiredXMLWriterBase) return XMLWriterBase.exports;
    hasRequiredXMLWriterBase = 1;
    // Generated by CoffeeScript 1.12.7
    (function () {
      var NodeType,
        WriterState,
        assign,
        hasProp = {}.hasOwnProperty;
      assign = requireUtility().assign;
      NodeType = requireNodeType();
      requireXMLDeclaration();
      requireXMLDocType();
      requireXMLCData();
      requireXMLComment();
      requireXMLElement();
      requireXMLRaw();
      requireXMLText();
      requireXMLProcessingInstruction();
      requireXMLDummy();
      requireXMLDTDAttList();
      requireXMLDTDElement();
      requireXMLDTDEntity();
      requireXMLDTDNotation();
      WriterState = requireWriterState();
      XMLWriterBase.exports = function () {
        function XMLWriterBase(options) {
          var key, ref, value;
          options || (options = {});
          this.options = options;
          ref = options.writer || {};
          for (key in ref) {
            if (!hasProp.call(ref, key)) continue;
            value = ref[key];
            this["_" + key] = this[key];
            this[key] = value;
          }
        }
        XMLWriterBase.prototype.filterOptions = function (options) {
          var filteredOptions, ref, ref1, ref2, ref3, ref4, ref5, ref6;
          options || (options = {});
          options = assign({}, this.options, options);
          filteredOptions = {
            writer: this
          };
          filteredOptions.pretty = options.pretty || false;
          filteredOptions.allowEmpty = options.allowEmpty || false;
          filteredOptions.indent = (ref = options.indent) != null ? ref : '  ';
          filteredOptions.newline = (ref1 = options.newline) != null ? ref1 : '\n';
          filteredOptions.offset = (ref2 = options.offset) != null ? ref2 : 0;
          filteredOptions.dontPrettyTextNodes = (ref3 = (ref4 = options.dontPrettyTextNodes) != null ? ref4 : options.dontprettytextnodes) != null ? ref3 : 0;
          filteredOptions.spaceBeforeSlash = (ref5 = (ref6 = options.spaceBeforeSlash) != null ? ref6 : options.spacebeforeslash) != null ? ref5 : '';
          if (filteredOptions.spaceBeforeSlash === true) {
            filteredOptions.spaceBeforeSlash = ' ';
          }
          filteredOptions.suppressPrettyCount = 0;
          filteredOptions.user = {};
          filteredOptions.state = WriterState.None;
          return filteredOptions;
        };
        XMLWriterBase.prototype.indent = function (node, options, level) {
          var indentLevel;
          if (!options.pretty || options.suppressPrettyCount) {
            return '';
          } else if (options.pretty) {
            indentLevel = (level || 0) + options.offset + 1;
            if (indentLevel > 0) {
              return new Array(indentLevel).join(options.indent);
            }
          }
          return '';
        };
        XMLWriterBase.prototype.endline = function (node, options, level) {
          if (!options.pretty || options.suppressPrettyCount) {
            return '';
          } else {
            return options.newline;
          }
        };
        XMLWriterBase.prototype.attribute = function (att, options, level) {
          var r;
          this.openAttribute(att, options, level);
          r = ' ' + att.name + '="' + att.value + '"';
          this.closeAttribute(att, options, level);
          return r;
        };
        XMLWriterBase.prototype.cdata = function (node, options, level) {
          var r;
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r = this.indent(node, options, level) + '<![CDATA[';
          options.state = WriterState.InsideTag;
          r += node.value;
          options.state = WriterState.CloseTag;
          r += ']]>' + this.endline(node, options, level);
          options.state = WriterState.None;
          this.closeNode(node, options, level);
          return r;
        };
        XMLWriterBase.prototype.comment = function (node, options, level) {
          var r;
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r = this.indent(node, options, level) + '<!-- ';
          options.state = WriterState.InsideTag;
          r += node.value;
          options.state = WriterState.CloseTag;
          r += ' -->' + this.endline(node, options, level);
          options.state = WriterState.None;
          this.closeNode(node, options, level);
          return r;
        };
        XMLWriterBase.prototype.declaration = function (node, options, level) {
          var r;
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r = this.indent(node, options, level) + '<?xml';
          options.state = WriterState.InsideTag;
          r += ' version="' + node.version + '"';
          if (node.encoding != null) {
            r += ' encoding="' + node.encoding + '"';
          }
          if (node.standalone != null) {
            r += ' standalone="' + node.standalone + '"';
          }
          options.state = WriterState.CloseTag;
          r += options.spaceBeforeSlash + '?>';
          r += this.endline(node, options, level);
          options.state = WriterState.None;
          this.closeNode(node, options, level);
          return r;
        };
        XMLWriterBase.prototype.docType = function (node, options, level) {
          var child, i, len, r, ref;
          level || (level = 0);
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r = this.indent(node, options, level);
          r += '<!DOCTYPE ' + node.root().name;
          if (node.pubID && node.sysID) {
            r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
          } else if (node.sysID) {
            r += ' SYSTEM "' + node.sysID + '"';
          }
          if (node.children.length > 0) {
            r += ' [';
            r += this.endline(node, options, level);
            options.state = WriterState.InsideTag;
            ref = node.children;
            for (i = 0, len = ref.length; i < len; i++) {
              child = ref[i];
              r += this.writeChildNode(child, options, level + 1);
            }
            options.state = WriterState.CloseTag;
            r += ']';
          }
          options.state = WriterState.CloseTag;
          r += options.spaceBeforeSlash + '>';
          r += this.endline(node, options, level);
          options.state = WriterState.None;
          this.closeNode(node, options, level);
          return r;
        };
        XMLWriterBase.prototype.element = function (node, options, level) {
          var att, child, childNodeCount, firstChildNode, i, j, len, len1, name, prettySuppressed, r, ref, ref1, ref2;
          level || (level = 0);
          prettySuppressed = false;
          r = '';
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r += this.indent(node, options, level) + '<' + node.name;
          ref = node.attribs;
          for (name in ref) {
            if (!hasProp.call(ref, name)) continue;
            att = ref[name];
            r += this.attribute(att, options, level);
          }
          childNodeCount = node.children.length;
          firstChildNode = childNodeCount === 0 ? null : node.children[0];
          if (childNodeCount === 0 || node.children.every(function (e) {
            return (e.type === NodeType.Text || e.type === NodeType.Raw) && e.value === '';
          })) {
            if (options.allowEmpty) {
              r += '>';
              options.state = WriterState.CloseTag;
              r += '</' + node.name + '>' + this.endline(node, options, level);
            } else {
              options.state = WriterState.CloseTag;
              r += options.spaceBeforeSlash + '/>' + this.endline(node, options, level);
            }
          } else if (options.pretty && childNodeCount === 1 && (firstChildNode.type === NodeType.Text || firstChildNode.type === NodeType.Raw) && firstChildNode.value != null) {
            r += '>';
            options.state = WriterState.InsideTag;
            options.suppressPrettyCount++;
            prettySuppressed = true;
            r += this.writeChildNode(firstChildNode, options, level + 1);
            options.suppressPrettyCount--;
            prettySuppressed = false;
            options.state = WriterState.CloseTag;
            r += '</' + node.name + '>' + this.endline(node, options, level);
          } else {
            if (options.dontPrettyTextNodes) {
              ref1 = node.children;
              for (i = 0, len = ref1.length; i < len; i++) {
                child = ref1[i];
                if ((child.type === NodeType.Text || child.type === NodeType.Raw) && child.value != null) {
                  options.suppressPrettyCount++;
                  prettySuppressed = true;
                  break;
                }
              }
            }
            r += '>' + this.endline(node, options, level);
            options.state = WriterState.InsideTag;
            ref2 = node.children;
            for (j = 0, len1 = ref2.length; j < len1; j++) {
              child = ref2[j];
              r += this.writeChildNode(child, options, level + 1);
            }
            options.state = WriterState.CloseTag;
            r += this.indent(node, options, level) + '</' + node.name + '>';
            if (prettySuppressed) {
              options.suppressPrettyCount--;
            }
            r += this.endline(node, options, level);
            options.state = WriterState.None;
          }
          this.closeNode(node, options, level);
          return r;
        };
        XMLWriterBase.prototype.writeChildNode = function (node, options, level) {
          switch (node.type) {
            case NodeType.CData:
              return this.cdata(node, options, level);
            case NodeType.Comment:
              return this.comment(node, options, level);
            case NodeType.Element:
              return this.element(node, options, level);
            case NodeType.Raw:
              return this.raw(node, options, level);
            case NodeType.Text:
              return this.text(node, options, level);
            case NodeType.ProcessingInstruction:
              return this.processingInstruction(node, options, level);
            case NodeType.Dummy:
              return '';
            case NodeType.Declaration:
              return this.declaration(node, options, level);
            case NodeType.DocType:
              return this.docType(node, options, level);
            case NodeType.AttributeDeclaration:
              return this.dtdAttList(node, options, level);
            case NodeType.ElementDeclaration:
              return this.dtdElement(node, options, level);
            case NodeType.EntityDeclaration:
              return this.dtdEntity(node, options, level);
            case NodeType.NotationDeclaration:
              return this.dtdNotation(node, options, level);
            default:
              throw new Error("Unknown XML node type: " + node.constructor.name);
          }
        };
        XMLWriterBase.prototype.processingInstruction = function (node, options, level) {
          var r;
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r = this.indent(node, options, level) + '<?';
          options.state = WriterState.InsideTag;
          r += node.target;
          if (node.value) {
            r += ' ' + node.value;
          }
          options.state = WriterState.CloseTag;
          r += options.spaceBeforeSlash + '?>';
          r += this.endline(node, options, level);
          options.state = WriterState.None;
          this.closeNode(node, options, level);
          return r;
        };
        XMLWriterBase.prototype.raw = function (node, options, level) {
          var r;
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r = this.indent(node, options, level);
          options.state = WriterState.InsideTag;
          r += node.value;
          options.state = WriterState.CloseTag;
          r += this.endline(node, options, level);
          options.state = WriterState.None;
          this.closeNode(node, options, level);
          return r;
        };
        XMLWriterBase.prototype.text = function (node, options, level) {
          var r;
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r = this.indent(node, options, level);
          options.state = WriterState.InsideTag;
          r += node.value;
          options.state = WriterState.CloseTag;
          r += this.endline(node, options, level);
          options.state = WriterState.None;
          this.closeNode(node, options, level);
          return r;
        };
        XMLWriterBase.prototype.dtdAttList = function (node, options, level) {
          var r;
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r = this.indent(node, options, level) + '<!ATTLIST';
          options.state = WriterState.InsideTag;
          r += ' ' + node.elementName + ' ' + node.attributeName + ' ' + node.attributeType;
          if (node.defaultValueType !== '#DEFAULT') {
            r += ' ' + node.defaultValueType;
          }
          if (node.defaultValue) {
            r += ' "' + node.defaultValue + '"';
          }
          options.state = WriterState.CloseTag;
          r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);
          options.state = WriterState.None;
          this.closeNode(node, options, level);
          return r;
        };
        XMLWriterBase.prototype.dtdElement = function (node, options, level) {
          var r;
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r = this.indent(node, options, level) + '<!ELEMENT';
          options.state = WriterState.InsideTag;
          r += ' ' + node.name + ' ' + node.value;
          options.state = WriterState.CloseTag;
          r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);
          options.state = WriterState.None;
          this.closeNode(node, options, level);
          return r;
        };
        XMLWriterBase.prototype.dtdEntity = function (node, options, level) {
          var r;
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r = this.indent(node, options, level) + '<!ENTITY';
          options.state = WriterState.InsideTag;
          if (node.pe) {
            r += ' %';
          }
          r += ' ' + node.name;
          if (node.value) {
            r += ' "' + node.value + '"';
          } else {
            if (node.pubID && node.sysID) {
              r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
            } else if (node.sysID) {
              r += ' SYSTEM "' + node.sysID + '"';
            }
            if (node.nData) {
              r += ' NDATA ' + node.nData;
            }
          }
          options.state = WriterState.CloseTag;
          r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);
          options.state = WriterState.None;
          this.closeNode(node, options, level);
          return r;
        };
        XMLWriterBase.prototype.dtdNotation = function (node, options, level) {
          var r;
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r = this.indent(node, options, level) + '<!NOTATION';
          options.state = WriterState.InsideTag;
          r += ' ' + node.name;
          if (node.pubID && node.sysID) {
            r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
          } else if (node.pubID) {
            r += ' PUBLIC "' + node.pubID + '"';
          } else if (node.sysID) {
            r += ' SYSTEM "' + node.sysID + '"';
          }
          options.state = WriterState.CloseTag;
          r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);
          options.state = WriterState.None;
          this.closeNode(node, options, level);
          return r;
        };
        XMLWriterBase.prototype.openNode = function (node, options, level) {};
        XMLWriterBase.prototype.closeNode = function (node, options, level) {};
        XMLWriterBase.prototype.openAttribute = function (att, options, level) {};
        XMLWriterBase.prototype.closeAttribute = function (att, options, level) {};
        return XMLWriterBase;
      }();
    }).call(commonjsGlobal);
    return XMLWriterBase.exports;
  }

  var hasRequiredXMLStringWriter;
  function requireXMLStringWriter() {
    if (hasRequiredXMLStringWriter) return XMLStringWriter.exports;
    hasRequiredXMLStringWriter = 1;
    // Generated by CoffeeScript 1.12.7
    (function () {
      var XMLWriterBase,
        extend = function extend(child, parent) {
          for (var key in parent) {
            if (hasProp.call(parent, key)) child[key] = parent[key];
          }
          function ctor() {
            this.constructor = child;
          }
          ctor.prototype = parent.prototype;
          child.prototype = new ctor();
          child.__super__ = parent.prototype;
          return child;
        },
        hasProp = {}.hasOwnProperty;
      XMLWriterBase = requireXMLWriterBase();
      XMLStringWriter.exports = function (superClass) {
        extend(XMLStringWriter, superClass);
        function XMLStringWriter(options) {
          XMLStringWriter.__super__.constructor.call(this, options);
        }
        XMLStringWriter.prototype.document = function (doc, options) {
          var child, i, len, r, ref;
          options = this.filterOptions(options);
          r = '';
          ref = doc.children;
          for (i = 0, len = ref.length; i < len; i++) {
            child = ref[i];
            r += this.writeChildNode(child, options, 0);
          }
          if (options.pretty && r.slice(-options.newline.length) === options.newline) {
            r = r.slice(0, -options.newline.length);
          }
          return r;
        };
        return XMLStringWriter;
      }(XMLWriterBase);
    }).call(commonjsGlobal);
    return XMLStringWriter.exports;
  }

  var hasRequiredXMLDocument;
  function requireXMLDocument() {
    if (hasRequiredXMLDocument) return XMLDocument.exports;
    hasRequiredXMLDocument = 1;
    // Generated by CoffeeScript 1.12.7
    (function () {
      var NodeType,
        XMLDOMConfiguration,
        XMLDOMImplementation,
        XMLNode,
        XMLStringWriter,
        XMLStringifier,
        isPlainObject,
        extend = function extend(child, parent) {
          for (var key in parent) {
            if (hasProp.call(parent, key)) child[key] = parent[key];
          }
          function ctor() {
            this.constructor = child;
          }
          ctor.prototype = parent.prototype;
          child.prototype = new ctor();
          child.__super__ = parent.prototype;
          return child;
        },
        hasProp = {}.hasOwnProperty;
      isPlainObject = requireUtility().isPlainObject;
      XMLDOMImplementation = requireXMLDOMImplementation();
      XMLDOMConfiguration = requireXMLDOMConfiguration();
      XMLNode = requireXMLNode();
      NodeType = requireNodeType();
      XMLStringifier = requireXMLStringifier();
      XMLStringWriter = requireXMLStringWriter();
      XMLDocument.exports = function (superClass) {
        extend(XMLDocument, superClass);
        function XMLDocument(options) {
          XMLDocument.__super__.constructor.call(this, null);
          this.name = "#document";
          this.type = NodeType.Document;
          this.documentURI = null;
          this.domConfig = new XMLDOMConfiguration();
          options || (options = {});
          if (!options.writer) {
            options.writer = new XMLStringWriter();
          }
          this.options = options;
          this.stringify = new XMLStringifier(options);
        }
        Object.defineProperty(XMLDocument.prototype, 'implementation', {
          value: new XMLDOMImplementation()
        });
        Object.defineProperty(XMLDocument.prototype, 'doctype', {
          get: function get() {
            var child, i, len, ref;
            ref = this.children;
            for (i = 0, len = ref.length; i < len; i++) {
              child = ref[i];
              if (child.type === NodeType.DocType) {
                return child;
              }
            }
            return null;
          }
        });
        Object.defineProperty(XMLDocument.prototype, 'documentElement', {
          get: function get() {
            return this.rootObject || null;
          }
        });
        Object.defineProperty(XMLDocument.prototype, 'inputEncoding', {
          get: function get() {
            return null;
          }
        });
        Object.defineProperty(XMLDocument.prototype, 'strictErrorChecking', {
          get: function get() {
            return false;
          }
        });
        Object.defineProperty(XMLDocument.prototype, 'xmlEncoding', {
          get: function get() {
            if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {
              return this.children[0].encoding;
            } else {
              return null;
            }
          }
        });
        Object.defineProperty(XMLDocument.prototype, 'xmlStandalone', {
          get: function get() {
            if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {
              return this.children[0].standalone === 'yes';
            } else {
              return false;
            }
          }
        });
        Object.defineProperty(XMLDocument.prototype, 'xmlVersion', {
          get: function get() {
            if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {
              return this.children[0].version;
            } else {
              return "1.0";
            }
          }
        });
        Object.defineProperty(XMLDocument.prototype, 'URL', {
          get: function get() {
            return this.documentURI;
          }
        });
        Object.defineProperty(XMLDocument.prototype, 'origin', {
          get: function get() {
            return null;
          }
        });
        Object.defineProperty(XMLDocument.prototype, 'compatMode', {
          get: function get() {
            return null;
          }
        });
        Object.defineProperty(XMLDocument.prototype, 'characterSet', {
          get: function get() {
            return null;
          }
        });
        Object.defineProperty(XMLDocument.prototype, 'contentType', {
          get: function get() {
            return null;
          }
        });
        XMLDocument.prototype.end = function (writer) {
          var writerOptions;
          writerOptions = {};
          if (!writer) {
            writer = this.options.writer;
          } else if (isPlainObject(writer)) {
            writerOptions = writer;
            writer = this.options.writer;
          }
          return writer.document(this, writer.filterOptions(writerOptions));
        };
        XMLDocument.prototype.toString = function (options) {
          return this.options.writer.document(this, this.options.writer.filterOptions(options));
        };
        XMLDocument.prototype.createElement = function (tagName) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument.prototype.createDocumentFragment = function () {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument.prototype.createTextNode = function (data) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument.prototype.createComment = function (data) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument.prototype.createCDATASection = function (data) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument.prototype.createProcessingInstruction = function (target, data) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument.prototype.createAttribute = function (name) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument.prototype.createEntityReference = function (name) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument.prototype.getElementsByTagName = function (tagname) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument.prototype.importNode = function (importedNode, deep) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument.prototype.createElementNS = function (namespaceURI, qualifiedName) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument.prototype.createAttributeNS = function (namespaceURI, qualifiedName) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument.prototype.getElementsByTagNameNS = function (namespaceURI, localName) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument.prototype.getElementById = function (elementId) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument.prototype.adoptNode = function (source) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument.prototype.normalizeDocument = function () {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument.prototype.renameNode = function (node, namespaceURI, qualifiedName) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument.prototype.getElementsByClassName = function (classNames) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument.prototype.createEvent = function (eventInterface) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument.prototype.createRange = function () {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument.prototype.createNodeIterator = function (root, whatToShow, filter) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument.prototype.createTreeWalker = function (root, whatToShow, filter) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        return XMLDocument;
      }(XMLNode);
    }).call(commonjsGlobal);
    return XMLDocument.exports;
  }

  var XMLDocumentCB = {exports: {}};

  var hasRequiredXMLDocumentCB;
  function requireXMLDocumentCB() {
    if (hasRequiredXMLDocumentCB) return XMLDocumentCB.exports;
    hasRequiredXMLDocumentCB = 1;
    // Generated by CoffeeScript 1.12.7
    (function () {
      var NodeType,
        WriterState,
        XMLAttribute,
        XMLCData,
        XMLComment,
        XMLDTDAttList,
        XMLDTDElement,
        XMLDTDEntity,
        XMLDTDNotation,
        XMLDeclaration,
        XMLDocType,
        XMLDocument,
        XMLElement,
        XMLProcessingInstruction,
        XMLRaw,
        XMLStringWriter,
        XMLStringifier,
        XMLText,
        getValue,
        isFunction,
        isObject,
        isPlainObject,
        ref,
        hasProp = {}.hasOwnProperty;
      ref = requireUtility(), isObject = ref.isObject, isFunction = ref.isFunction, isPlainObject = ref.isPlainObject, getValue = ref.getValue;
      NodeType = requireNodeType();
      XMLDocument = requireXMLDocument();
      XMLElement = requireXMLElement();
      XMLCData = requireXMLCData();
      XMLComment = requireXMLComment();
      XMLRaw = requireXMLRaw();
      XMLText = requireXMLText();
      XMLProcessingInstruction = requireXMLProcessingInstruction();
      XMLDeclaration = requireXMLDeclaration();
      XMLDocType = requireXMLDocType();
      XMLDTDAttList = requireXMLDTDAttList();
      XMLDTDEntity = requireXMLDTDEntity();
      XMLDTDElement = requireXMLDTDElement();
      XMLDTDNotation = requireXMLDTDNotation();
      XMLAttribute = requireXMLAttribute();
      XMLStringifier = requireXMLStringifier();
      XMLStringWriter = requireXMLStringWriter();
      WriterState = requireWriterState();
      XMLDocumentCB.exports = function () {
        function XMLDocumentCB(options, onData, onEnd) {
          var writerOptions;
          this.name = "?xml";
          this.type = NodeType.Document;
          options || (options = {});
          writerOptions = {};
          if (!options.writer) {
            options.writer = new XMLStringWriter();
          } else if (isPlainObject(options.writer)) {
            writerOptions = options.writer;
            options.writer = new XMLStringWriter();
          }
          this.options = options;
          this.writer = options.writer;
          this.writerOptions = this.writer.filterOptions(writerOptions);
          this.stringify = new XMLStringifier(options);
          this.onDataCallback = onData || function () {};
          this.onEndCallback = onEnd || function () {};
          this.currentNode = null;
          this.currentLevel = -1;
          this.openTags = {};
          this.documentStarted = false;
          this.documentCompleted = false;
          this.root = null;
        }
        XMLDocumentCB.prototype.createChildNode = function (node) {
          var att, attName, attributes, child, i, len, ref1, ref2;
          switch (node.type) {
            case NodeType.CData:
              this.cdata(node.value);
              break;
            case NodeType.Comment:
              this.comment(node.value);
              break;
            case NodeType.Element:
              attributes = {};
              ref1 = node.attribs;
              for (attName in ref1) {
                if (!hasProp.call(ref1, attName)) continue;
                att = ref1[attName];
                attributes[attName] = att.value;
              }
              this.node(node.name, attributes);
              break;
            case NodeType.Dummy:
              this.dummy();
              break;
            case NodeType.Raw:
              this.raw(node.value);
              break;
            case NodeType.Text:
              this.text(node.value);
              break;
            case NodeType.ProcessingInstruction:
              this.instruction(node.target, node.value);
              break;
            default:
              throw new Error("This XML node type is not supported in a JS object: " + node.constructor.name);
          }
          ref2 = node.children;
          for (i = 0, len = ref2.length; i < len; i++) {
            child = ref2[i];
            this.createChildNode(child);
            if (child.type === NodeType.Element) {
              this.up();
            }
          }
          return this;
        };
        XMLDocumentCB.prototype.dummy = function () {
          return this;
        };
        XMLDocumentCB.prototype.node = function (name, attributes, text) {
          var ref1;
          if (name == null) {
            throw new Error("Missing node name.");
          }
          if (this.root && this.currentLevel === -1) {
            throw new Error("Document can only have one root node. " + this.debugInfo(name));
          }
          this.openCurrent();
          name = getValue(name);
          if (attributes == null) {
            attributes = {};
          }
          attributes = getValue(attributes);
          if (!isObject(attributes)) {
            ref1 = [attributes, text], text = ref1[0], attributes = ref1[1];
          }
          this.currentNode = new XMLElement(this, name, attributes);
          this.currentNode.children = false;
          this.currentLevel++;
          this.openTags[this.currentLevel] = this.currentNode;
          if (text != null) {
            this.text(text);
          }
          return this;
        };
        XMLDocumentCB.prototype.element = function (name, attributes, text) {
          var child, i, len, oldValidationFlag, ref1, root;
          if (this.currentNode && this.currentNode.type === NodeType.DocType) {
            this.dtdElement.apply(this, arguments);
          } else {
            if (Array.isArray(name) || isObject(name) || isFunction(name)) {
              oldValidationFlag = this.options.noValidation;
              this.options.noValidation = true;
              root = new XMLDocument(this.options).element('TEMP_ROOT');
              root.element(name);
              this.options.noValidation = oldValidationFlag;
              ref1 = root.children;
              for (i = 0, len = ref1.length; i < len; i++) {
                child = ref1[i];
                this.createChildNode(child);
                if (child.type === NodeType.Element) {
                  this.up();
                }
              }
            } else {
              this.node(name, attributes, text);
            }
          }
          return this;
        };
        XMLDocumentCB.prototype.attribute = function (name, value) {
          var attName, attValue;
          if (!this.currentNode || this.currentNode.children) {
            throw new Error("att() can only be used immediately after an ele() call in callback mode. " + this.debugInfo(name));
          }
          if (name != null) {
            name = getValue(name);
          }
          if (isObject(name)) {
            for (attName in name) {
              if (!hasProp.call(name, attName)) continue;
              attValue = name[attName];
              this.attribute(attName, attValue);
            }
          } else {
            if (isFunction(value)) {
              value = value.apply();
            }
            if (this.options.keepNullAttributes && value == null) {
              this.currentNode.attribs[name] = new XMLAttribute(this, name, "");
            } else if (value != null) {
              this.currentNode.attribs[name] = new XMLAttribute(this, name, value);
            }
          }
          return this;
        };
        XMLDocumentCB.prototype.text = function (value) {
          var node;
          this.openCurrent();
          node = new XMLText(this, value);
          this.onData(this.writer.text(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
          return this;
        };
        XMLDocumentCB.prototype.cdata = function (value) {
          var node;
          this.openCurrent();
          node = new XMLCData(this, value);
          this.onData(this.writer.cdata(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
          return this;
        };
        XMLDocumentCB.prototype.comment = function (value) {
          var node;
          this.openCurrent();
          node = new XMLComment(this, value);
          this.onData(this.writer.comment(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
          return this;
        };
        XMLDocumentCB.prototype.raw = function (value) {
          var node;
          this.openCurrent();
          node = new XMLRaw(this, value);
          this.onData(this.writer.raw(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
          return this;
        };
        XMLDocumentCB.prototype.instruction = function (target, value) {
          var i, insTarget, insValue, len, node;
          this.openCurrent();
          if (target != null) {
            target = getValue(target);
          }
          if (value != null) {
            value = getValue(value);
          }
          if (Array.isArray(target)) {
            for (i = 0, len = target.length; i < len; i++) {
              insTarget = target[i];
              this.instruction(insTarget);
            }
          } else if (isObject(target)) {
            for (insTarget in target) {
              if (!hasProp.call(target, insTarget)) continue;
              insValue = target[insTarget];
              this.instruction(insTarget, insValue);
            }
          } else {
            if (isFunction(value)) {
              value = value.apply();
            }
            node = new XMLProcessingInstruction(this, target, value);
            this.onData(this.writer.processingInstruction(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
          }
          return this;
        };
        XMLDocumentCB.prototype.declaration = function (version, encoding, standalone) {
          var node;
          this.openCurrent();
          if (this.documentStarted) {
            throw new Error("declaration() must be the first node.");
          }
          node = new XMLDeclaration(this, version, encoding, standalone);
          this.onData(this.writer.declaration(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
          return this;
        };
        XMLDocumentCB.prototype.doctype = function (root, pubID, sysID) {
          this.openCurrent();
          if (root == null) {
            throw new Error("Missing root node name.");
          }
          if (this.root) {
            throw new Error("dtd() must come before the root node.");
          }
          this.currentNode = new XMLDocType(this, pubID, sysID);
          this.currentNode.rootNodeName = root;
          this.currentNode.children = false;
          this.currentLevel++;
          this.openTags[this.currentLevel] = this.currentNode;
          return this;
        };
        XMLDocumentCB.prototype.dtdElement = function (name, value) {
          var node;
          this.openCurrent();
          node = new XMLDTDElement(this, name, value);
          this.onData(this.writer.dtdElement(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
          return this;
        };
        XMLDocumentCB.prototype.attList = function (elementName, attributeName, attributeType, defaultValueType, defaultValue) {
          var node;
          this.openCurrent();
          node = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);
          this.onData(this.writer.dtdAttList(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
          return this;
        };
        XMLDocumentCB.prototype.entity = function (name, value) {
          var node;
          this.openCurrent();
          node = new XMLDTDEntity(this, false, name, value);
          this.onData(this.writer.dtdEntity(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
          return this;
        };
        XMLDocumentCB.prototype.pEntity = function (name, value) {
          var node;
          this.openCurrent();
          node = new XMLDTDEntity(this, true, name, value);
          this.onData(this.writer.dtdEntity(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
          return this;
        };
        XMLDocumentCB.prototype.notation = function (name, value) {
          var node;
          this.openCurrent();
          node = new XMLDTDNotation(this, name, value);
          this.onData(this.writer.dtdNotation(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
          return this;
        };
        XMLDocumentCB.prototype.up = function () {
          if (this.currentLevel < 0) {
            throw new Error("The document node has no parent.");
          }
          if (this.currentNode) {
            if (this.currentNode.children) {
              this.closeNode(this.currentNode);
            } else {
              this.openNode(this.currentNode);
            }
            this.currentNode = null;
          } else {
            this.closeNode(this.openTags[this.currentLevel]);
          }
          delete this.openTags[this.currentLevel];
          this.currentLevel--;
          return this;
        };
        XMLDocumentCB.prototype.end = function () {
          while (this.currentLevel >= 0) {
            this.up();
          }
          return this.onEnd();
        };
        XMLDocumentCB.prototype.openCurrent = function () {
          if (this.currentNode) {
            this.currentNode.children = true;
            return this.openNode(this.currentNode);
          }
        };
        XMLDocumentCB.prototype.openNode = function (node) {
          var att, chunk, name, ref1;
          if (!node.isOpen) {
            if (!this.root && this.currentLevel === 0 && node.type === NodeType.Element) {
              this.root = node;
            }
            chunk = '';
            if (node.type === NodeType.Element) {
              this.writerOptions.state = WriterState.OpenTag;
              chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + '<' + node.name;
              ref1 = node.attribs;
              for (name in ref1) {
                if (!hasProp.call(ref1, name)) continue;
                att = ref1[name];
                chunk += this.writer.attribute(att, this.writerOptions, this.currentLevel);
              }
              chunk += (node.children ? '>' : '/>') + this.writer.endline(node, this.writerOptions, this.currentLevel);
              this.writerOptions.state = WriterState.InsideTag;
            } else {
              this.writerOptions.state = WriterState.OpenTag;
              chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + '<!DOCTYPE ' + node.rootNodeName;
              if (node.pubID && node.sysID) {
                chunk += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
              } else if (node.sysID) {
                chunk += ' SYSTEM "' + node.sysID + '"';
              }
              if (node.children) {
                chunk += ' [';
                this.writerOptions.state = WriterState.InsideTag;
              } else {
                this.writerOptions.state = WriterState.CloseTag;
                chunk += '>';
              }
              chunk += this.writer.endline(node, this.writerOptions, this.currentLevel);
            }
            this.onData(chunk, this.currentLevel);
            return node.isOpen = true;
          }
        };
        XMLDocumentCB.prototype.closeNode = function (node) {
          var chunk;
          if (!node.isClosed) {
            chunk = '';
            this.writerOptions.state = WriterState.CloseTag;
            if (node.type === NodeType.Element) {
              chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + '</' + node.name + '>' + this.writer.endline(node, this.writerOptions, this.currentLevel);
            } else {
              chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + ']>' + this.writer.endline(node, this.writerOptions, this.currentLevel);
            }
            this.writerOptions.state = WriterState.None;
            this.onData(chunk, this.currentLevel);
            return node.isClosed = true;
          }
        };
        XMLDocumentCB.prototype.onData = function (chunk, level) {
          this.documentStarted = true;
          return this.onDataCallback(chunk, level + 1);
        };
        XMLDocumentCB.prototype.onEnd = function () {
          this.documentCompleted = true;
          return this.onEndCallback();
        };
        XMLDocumentCB.prototype.debugInfo = function (name) {
          if (name == null) {
            return "";
          } else {
            return "node: <" + name + ">";
          }
        };
        XMLDocumentCB.prototype.ele = function () {
          return this.element.apply(this, arguments);
        };
        XMLDocumentCB.prototype.nod = function (name, attributes, text) {
          return this.node(name, attributes, text);
        };
        XMLDocumentCB.prototype.txt = function (value) {
          return this.text(value);
        };
        XMLDocumentCB.prototype.dat = function (value) {
          return this.cdata(value);
        };
        XMLDocumentCB.prototype.com = function (value) {
          return this.comment(value);
        };
        XMLDocumentCB.prototype.ins = function (target, value) {
          return this.instruction(target, value);
        };
        XMLDocumentCB.prototype.dec = function (version, encoding, standalone) {
          return this.declaration(version, encoding, standalone);
        };
        XMLDocumentCB.prototype.dtd = function (root, pubID, sysID) {
          return this.doctype(root, pubID, sysID);
        };
        XMLDocumentCB.prototype.e = function (name, attributes, text) {
          return this.element(name, attributes, text);
        };
        XMLDocumentCB.prototype.n = function (name, attributes, text) {
          return this.node(name, attributes, text);
        };
        XMLDocumentCB.prototype.t = function (value) {
          return this.text(value);
        };
        XMLDocumentCB.prototype.d = function (value) {
          return this.cdata(value);
        };
        XMLDocumentCB.prototype.c = function (value) {
          return this.comment(value);
        };
        XMLDocumentCB.prototype.r = function (value) {
          return this.raw(value);
        };
        XMLDocumentCB.prototype.i = function (target, value) {
          return this.instruction(target, value);
        };
        XMLDocumentCB.prototype.att = function () {
          if (this.currentNode && this.currentNode.type === NodeType.DocType) {
            return this.attList.apply(this, arguments);
          } else {
            return this.attribute.apply(this, arguments);
          }
        };
        XMLDocumentCB.prototype.a = function () {
          if (this.currentNode && this.currentNode.type === NodeType.DocType) {
            return this.attList.apply(this, arguments);
          } else {
            return this.attribute.apply(this, arguments);
          }
        };
        XMLDocumentCB.prototype.ent = function (name, value) {
          return this.entity(name, value);
        };
        XMLDocumentCB.prototype.pent = function (name, value) {
          return this.pEntity(name, value);
        };
        XMLDocumentCB.prototype.not = function (name, value) {
          return this.notation(name, value);
        };
        return XMLDocumentCB;
      }();
    }).call(commonjsGlobal);
    return XMLDocumentCB.exports;
  }

  var XMLStreamWriter = {exports: {}};

  var hasRequiredXMLStreamWriter;
  function requireXMLStreamWriter() {
    if (hasRequiredXMLStreamWriter) return XMLStreamWriter.exports;
    hasRequiredXMLStreamWriter = 1;
    // Generated by CoffeeScript 1.12.7
    (function () {
      var NodeType,
        WriterState,
        XMLWriterBase,
        extend = function extend(child, parent) {
          for (var key in parent) {
            if (hasProp.call(parent, key)) child[key] = parent[key];
          }
          function ctor() {
            this.constructor = child;
          }
          ctor.prototype = parent.prototype;
          child.prototype = new ctor();
          child.__super__ = parent.prototype;
          return child;
        },
        hasProp = {}.hasOwnProperty;
      NodeType = requireNodeType();
      XMLWriterBase = requireXMLWriterBase();
      WriterState = requireWriterState();
      XMLStreamWriter.exports = function (superClass) {
        extend(XMLStreamWriter, superClass);
        function XMLStreamWriter(stream, options) {
          this.stream = stream;
          XMLStreamWriter.__super__.constructor.call(this, options);
        }
        XMLStreamWriter.prototype.endline = function (node, options, level) {
          if (node.isLastRootNode && options.state === WriterState.CloseTag) {
            return '';
          } else {
            return XMLStreamWriter.__super__.endline.call(this, node, options, level);
          }
        };
        XMLStreamWriter.prototype.document = function (doc, options) {
          var child, i, j, k, len, len1, ref, ref1, results;
          ref = doc.children;
          for (i = j = 0, len = ref.length; j < len; i = ++j) {
            child = ref[i];
            child.isLastRootNode = i === doc.children.length - 1;
          }
          options = this.filterOptions(options);
          ref1 = doc.children;
          results = [];
          for (k = 0, len1 = ref1.length; k < len1; k++) {
            child = ref1[k];
            results.push(this.writeChildNode(child, options, 0));
          }
          return results;
        };
        XMLStreamWriter.prototype.attribute = function (att, options, level) {
          return this.stream.write(XMLStreamWriter.__super__.attribute.call(this, att, options, level));
        };
        XMLStreamWriter.prototype.cdata = function (node, options, level) {
          return this.stream.write(XMLStreamWriter.__super__.cdata.call(this, node, options, level));
        };
        XMLStreamWriter.prototype.comment = function (node, options, level) {
          return this.stream.write(XMLStreamWriter.__super__.comment.call(this, node, options, level));
        };
        XMLStreamWriter.prototype.declaration = function (node, options, level) {
          return this.stream.write(XMLStreamWriter.__super__.declaration.call(this, node, options, level));
        };
        XMLStreamWriter.prototype.docType = function (node, options, level) {
          var child, j, len, ref;
          level || (level = 0);
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          this.stream.write(this.indent(node, options, level));
          this.stream.write('<!DOCTYPE ' + node.root().name);
          if (node.pubID && node.sysID) {
            this.stream.write(' PUBLIC "' + node.pubID + '" "' + node.sysID + '"');
          } else if (node.sysID) {
            this.stream.write(' SYSTEM "' + node.sysID + '"');
          }
          if (node.children.length > 0) {
            this.stream.write(' [');
            this.stream.write(this.endline(node, options, level));
            options.state = WriterState.InsideTag;
            ref = node.children;
            for (j = 0, len = ref.length; j < len; j++) {
              child = ref[j];
              this.writeChildNode(child, options, level + 1);
            }
            options.state = WriterState.CloseTag;
            this.stream.write(']');
          }
          options.state = WriterState.CloseTag;
          this.stream.write(options.spaceBeforeSlash + '>');
          this.stream.write(this.endline(node, options, level));
          options.state = WriterState.None;
          return this.closeNode(node, options, level);
        };
        XMLStreamWriter.prototype.element = function (node, options, level) {
          var att, child, childNodeCount, firstChildNode, j, len, name, ref, ref1;
          level || (level = 0);
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          this.stream.write(this.indent(node, options, level) + '<' + node.name);
          ref = node.attribs;
          for (name in ref) {
            if (!hasProp.call(ref, name)) continue;
            att = ref[name];
            this.attribute(att, options, level);
          }
          childNodeCount = node.children.length;
          firstChildNode = childNodeCount === 0 ? null : node.children[0];
          if (childNodeCount === 0 || node.children.every(function (e) {
            return (e.type === NodeType.Text || e.type === NodeType.Raw) && e.value === '';
          })) {
            if (options.allowEmpty) {
              this.stream.write('>');
              options.state = WriterState.CloseTag;
              this.stream.write('</' + node.name + '>');
            } else {
              options.state = WriterState.CloseTag;
              this.stream.write(options.spaceBeforeSlash + '/>');
            }
          } else if (options.pretty && childNodeCount === 1 && (firstChildNode.type === NodeType.Text || firstChildNode.type === NodeType.Raw) && firstChildNode.value != null) {
            this.stream.write('>');
            options.state = WriterState.InsideTag;
            options.suppressPrettyCount++;
            this.writeChildNode(firstChildNode, options, level + 1);
            options.suppressPrettyCount--;
            options.state = WriterState.CloseTag;
            this.stream.write('</' + node.name + '>');
          } else {
            this.stream.write('>' + this.endline(node, options, level));
            options.state = WriterState.InsideTag;
            ref1 = node.children;
            for (j = 0, len = ref1.length; j < len; j++) {
              child = ref1[j];
              this.writeChildNode(child, options, level + 1);
            }
            options.state = WriterState.CloseTag;
            this.stream.write(this.indent(node, options, level) + '</' + node.name + '>');
          }
          this.stream.write(this.endline(node, options, level));
          options.state = WriterState.None;
          return this.closeNode(node, options, level);
        };
        XMLStreamWriter.prototype.processingInstruction = function (node, options, level) {
          return this.stream.write(XMLStreamWriter.__super__.processingInstruction.call(this, node, options, level));
        };
        XMLStreamWriter.prototype.raw = function (node, options, level) {
          return this.stream.write(XMLStreamWriter.__super__.raw.call(this, node, options, level));
        };
        XMLStreamWriter.prototype.text = function (node, options, level) {
          return this.stream.write(XMLStreamWriter.__super__.text.call(this, node, options, level));
        };
        XMLStreamWriter.prototype.dtdAttList = function (node, options, level) {
          return this.stream.write(XMLStreamWriter.__super__.dtdAttList.call(this, node, options, level));
        };
        XMLStreamWriter.prototype.dtdElement = function (node, options, level) {
          return this.stream.write(XMLStreamWriter.__super__.dtdElement.call(this, node, options, level));
        };
        XMLStreamWriter.prototype.dtdEntity = function (node, options, level) {
          return this.stream.write(XMLStreamWriter.__super__.dtdEntity.call(this, node, options, level));
        };
        XMLStreamWriter.prototype.dtdNotation = function (node, options, level) {
          return this.stream.write(XMLStreamWriter.__super__.dtdNotation.call(this, node, options, level));
        };
        return XMLStreamWriter;
      }(XMLWriterBase);
    }).call(commonjsGlobal);
    return XMLStreamWriter.exports;
  }

  var hasRequiredLib;
  function requireLib() {
    if (hasRequiredLib) return lib;
    hasRequiredLib = 1;
    // Generated by CoffeeScript 1.12.7
    (function () {
      var NodeType, WriterState, XMLDOMImplementation, XMLDocument, XMLDocumentCB, XMLStreamWriter, XMLStringWriter, assign, isFunction, ref;
      ref = requireUtility(), assign = ref.assign, isFunction = ref.isFunction;
      XMLDOMImplementation = requireXMLDOMImplementation();
      XMLDocument = requireXMLDocument();
      XMLDocumentCB = requireXMLDocumentCB();
      XMLStringWriter = requireXMLStringWriter();
      XMLStreamWriter = requireXMLStreamWriter();
      NodeType = requireNodeType();
      WriterState = requireWriterState();
      lib.create = function (name, xmldec, doctype, options) {
        var doc, root;
        if (name == null) {
          throw new Error("Root element needs a name.");
        }
        options = assign({}, xmldec, doctype, options);
        doc = new XMLDocument(options);
        root = doc.element(name);
        if (!options.headless) {
          doc.declaration(options);
          if (options.pubID != null || options.sysID != null) {
            doc.dtd(options);
          }
        }
        return root;
      };
      lib.begin = function (options, onData, onEnd) {
        var ref1;
        if (isFunction(options)) {
          ref1 = [options, onData], onData = ref1[0], onEnd = ref1[1];
          options = {};
        }
        if (onData) {
          return new XMLDocumentCB(options, onData, onEnd);
        } else {
          return new XMLDocument(options);
        }
      };
      lib.stringWriter = function (options) {
        return new XMLStringWriter(options);
      };
      lib.streamWriter = function (stream, options) {
        return new XMLStreamWriter(stream, options);
      };
      lib.implementation = new XMLDOMImplementation();
      lib.nodeType = NodeType;
      lib.writerState = WriterState;
    }).call(commonjsGlobal);
    return lib;
  }

  var hasRequiredBuilder;
  function requireBuilder() {
    if (hasRequiredBuilder) return builder;
    hasRequiredBuilder = 1;
    // Generated by CoffeeScript 1.12.7
    (function () {

      var builder$1,
        defaults,
        escapeCDATA,
        requiresCDATA,
        wrapCDATA,
        hasProp = {}.hasOwnProperty;
      builder$1 = requireLib();
      defaults = requireDefaults().defaults;
      requiresCDATA = function requiresCDATA(entry) {
        return typeof entry === "string" && (entry.indexOf('&') >= 0 || entry.indexOf('>') >= 0 || entry.indexOf('<') >= 0);
      };
      wrapCDATA = function wrapCDATA(entry) {
        return "<![CDATA[" + escapeCDATA(entry) + "]]>";
      };
      escapeCDATA = function escapeCDATA(entry) {
        return entry.replace(']]>', ']]]]><![CDATA[>');
      };
      builder.Builder = function () {
        function Builder(opts) {
          var key, ref, value;
          this.options = {};
          ref = defaults["0.2"];
          for (key in ref) {
            if (!hasProp.call(ref, key)) continue;
            value = ref[key];
            this.options[key] = value;
          }
          for (key in opts) {
            if (!hasProp.call(opts, key)) continue;
            value = opts[key];
            this.options[key] = value;
          }
        }
        Builder.prototype.buildObject = function (rootObj) {
          var attrkey, charkey, render, rootElement, rootName;
          attrkey = this.options.attrkey;
          charkey = this.options.charkey;
          if (Object.keys(rootObj).length === 1 && this.options.rootName === defaults['0.2'].rootName) {
            rootName = Object.keys(rootObj)[0];
            rootObj = rootObj[rootName];
          } else {
            rootName = this.options.rootName;
          }
          render = function (_this) {
            return function (element, obj) {
              var attr, child, entry, index, key, value;
              if (_typeof(obj) !== 'object') {
                if (_this.options.cdata && requiresCDATA(obj)) {
                  element.raw(wrapCDATA(obj));
                } else {
                  element.txt(obj);
                }
              } else if (Array.isArray(obj)) {
                for (index in obj) {
                  if (!hasProp.call(obj, index)) continue;
                  child = obj[index];
                  for (key in child) {
                    entry = child[key];
                    element = render(element.ele(key), entry).up();
                  }
                }
              } else {
                for (key in obj) {
                  if (!hasProp.call(obj, key)) continue;
                  child = obj[key];
                  if (key === attrkey) {
                    if (_typeof(child) === "object") {
                      for (attr in child) {
                        value = child[attr];
                        element = element.att(attr, value);
                      }
                    }
                  } else if (key === charkey) {
                    if (_this.options.cdata && requiresCDATA(child)) {
                      element = element.raw(wrapCDATA(child));
                    } else {
                      element = element.txt(child);
                    }
                  } else if (Array.isArray(child)) {
                    for (index in child) {
                      if (!hasProp.call(child, index)) continue;
                      entry = child[index];
                      if (typeof entry === 'string') {
                        if (_this.options.cdata && requiresCDATA(entry)) {
                          element = element.ele(key).raw(wrapCDATA(entry)).up();
                        } else {
                          element = element.ele(key, entry).up();
                        }
                      } else {
                        element = render(element.ele(key), entry).up();
                      }
                    }
                  } else if (_typeof(child) === "object") {
                    element = render(element.ele(key), child).up();
                  } else {
                    if (typeof child === 'string' && _this.options.cdata && requiresCDATA(child)) {
                      element = element.ele(key).raw(wrapCDATA(child)).up();
                    } else {
                      if (child == null) {
                        child = '';
                      }
                      element = element.ele(key, child.toString()).up();
                    }
                  }
                }
              }
              return element;
            };
          }(this);
          rootElement = builder$1.create(rootName, this.options.xmldec, this.options.doctype, {
            headless: this.options.headless,
            allowSurrogateChars: this.options.allowSurrogateChars
          });
          return render(rootElement, rootObj).end(this.options.renderOpts);
        };
        return Builder;
      }();
    }).call(commonjsGlobal);
    return builder;
  }

  var parser$1 = {};

  var sax = {};

  var hasRequiredSax;
  function requireSax() {
    if (hasRequiredSax) return sax;
    hasRequiredSax = 1;
    (function (exports) {
      (function (sax) {
        // wrapper for non-node envs
        sax.parser = function (strict, opt) {
          return new SAXParser(strict, opt);
        };
        sax.SAXParser = SAXParser;
        sax.SAXStream = SAXStream;
        sax.createStream = createStream;

        // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.
        // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),
        // since that's the earliest that a buffer overrun could occur.  This way, checks are
        // as rare as required, but as often as necessary to ensure never crossing this bound.
        // Furthermore, buffers are only tested at most once per write(), so passing a very
        // large string into write() might have undesirable effects, but this is manageable by
        // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme
        // edge case, result in creating at most one complete copy of the string passed in.
        // Set to Infinity to have unlimited buffers.
        sax.MAX_BUFFER_LENGTH = 64 * 1024;
        var buffers = ['comment', 'sgmlDecl', 'textNode', 'tagName', 'doctype', 'procInstName', 'procInstBody', 'entity', 'attribName', 'attribValue', 'cdata', 'script'];
        sax.EVENTS = ['text', 'processinginstruction', 'sgmldeclaration', 'doctype', 'comment', 'opentagstart', 'attribute', 'opentag', 'closetag', 'opencdata', 'cdata', 'closecdata', 'error', 'end', 'ready', 'script', 'opennamespace', 'closenamespace'];
        function SAXParser(strict, opt) {
          if (!(this instanceof SAXParser)) {
            return new SAXParser(strict, opt);
          }
          var parser = this;
          clearBuffers(parser);
          parser.q = parser.c = '';
          parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH;
          parser.opt = opt || {};
          parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags;
          parser.looseCase = parser.opt.lowercase ? 'toLowerCase' : 'toUpperCase';
          parser.tags = [];
          parser.closed = parser.closedRoot = parser.sawRoot = false;
          parser.tag = parser.error = null;
          parser.strict = !!strict;
          parser.noscript = !!(strict || parser.opt.noscript);
          parser.state = S.BEGIN;
          parser.strictEntities = parser.opt.strictEntities;
          parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES);
          parser.attribList = [];

          // namespaces form a prototype chain.
          // it always points at the current tag,
          // which protos to its parent tag.
          if (parser.opt.xmlns) {
            parser.ns = Object.create(rootNS);
          }

          // disallow unquoted attribute values if not otherwise configured
          // and strict mode is true
          if (parser.opt.unquotedAttributeValues === undefined) {
            parser.opt.unquotedAttributeValues = !strict;
          }

          // mostly just for error reporting
          parser.trackPosition = parser.opt.position !== false;
          if (parser.trackPosition) {
            parser.position = parser.line = parser.column = 0;
          }
          emit(parser, 'onready');
        }
        if (!Object.create) {
          Object.create = function (o) {
            function F() {}
            F.prototype = o;
            var newf = new F();
            return newf;
          };
        }
        if (!Object.keys) {
          Object.keys = function (o) {
            var a = [];
            for (var i in o) if (o.hasOwnProperty(i)) a.push(i);
            return a;
          };
        }
        function checkBufferLength(parser) {
          var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10);
          var maxActual = 0;
          for (var i = 0, l = buffers.length; i < l; i++) {
            var len = parser[buffers[i]].length;
            if (len > maxAllowed) {
              // Text/cdata nodes can get big, and since they're buffered,
              // we can get here under normal conditions.
              // Avoid issues by emitting the text node now,
              // so at least it won't get any bigger.
              switch (buffers[i]) {
                case 'textNode':
                  closeText(parser);
                  break;
                case 'cdata':
                  emitNode(parser, 'oncdata', parser.cdata);
                  parser.cdata = '';
                  break;
                case 'script':
                  emitNode(parser, 'onscript', parser.script);
                  parser.script = '';
                  break;
                default:
                  error(parser, 'Max buffer length exceeded: ' + buffers[i]);
              }
            }
            maxActual = Math.max(maxActual, len);
          }
          // schedule the next check for the earliest possible buffer overrun.
          var m = sax.MAX_BUFFER_LENGTH - maxActual;
          parser.bufferCheckPosition = m + parser.position;
        }
        function clearBuffers(parser) {
          for (var i = 0, l = buffers.length; i < l; i++) {
            parser[buffers[i]] = '';
          }
        }
        function flushBuffers(parser) {
          closeText(parser);
          if (parser.cdata !== '') {
            emitNode(parser, 'oncdata', parser.cdata);
            parser.cdata = '';
          }
          if (parser.script !== '') {
            emitNode(parser, 'onscript', parser.script);
            parser.script = '';
          }
        }
        SAXParser.prototype = {
          end: function end() {
            _end(this);
          },
          write: write,
          resume: function resume() {
            this.error = null;
            return this;
          },
          close: function close() {
            return this.write(null);
          },
          flush: function flush() {
            flushBuffers(this);
          }
        };
        var Stream;
        try {
          Stream = require('stream').Stream;
        } catch (ex) {
          Stream = function Stream() {};
        }
        if (!Stream) Stream = function Stream() {};
        var streamWraps = sax.EVENTS.filter(function (ev) {
          return ev !== 'error' && ev !== 'end';
        });
        function createStream(strict, opt) {
          return new SAXStream(strict, opt);
        }
        function SAXStream(strict, opt) {
          if (!(this instanceof SAXStream)) {
            return new SAXStream(strict, opt);
          }
          Stream.apply(this);
          this._parser = new SAXParser(strict, opt);
          this.writable = true;
          this.readable = true;
          var me = this;
          this._parser.onend = function () {
            me.emit('end');
          };
          this._parser.onerror = function (er) {
            me.emit('error', er);

            // if didn't throw, then means error was handled.
            // go ahead and clear error, so we can write again.
            me._parser.error = null;
          };
          this._decoder = null;
          streamWraps.forEach(function (ev) {
            Object.defineProperty(me, 'on' + ev, {
              get: function get() {
                return me._parser['on' + ev];
              },
              set: function set(h) {
                if (!h) {
                  me.removeAllListeners(ev);
                  me._parser['on' + ev] = h;
                  return h;
                }
                me.on(ev, h);
              },
              enumerable: true,
              configurable: false
            });
          });
        }
        SAXStream.prototype = Object.create(Stream.prototype, {
          constructor: {
            value: SAXStream
          }
        });
        SAXStream.prototype.write = function (data) {
          if (typeof Buffer === 'function' && typeof Buffer.isBuffer === 'function' && Buffer.isBuffer(data)) {
            if (!this._decoder) {
              var SD = require$$1$7.StringDecoder;
              this._decoder = new SD('utf8');
            }
            data = this._decoder.write(data);
          }
          this._parser.write(data.toString());
          this.emit('data', data);
          return true;
        };
        SAXStream.prototype.end = function (chunk) {
          if (chunk && chunk.length) {
            this.write(chunk);
          }
          this._parser.end();
          return true;
        };
        SAXStream.prototype.on = function (ev, handler) {
          var me = this;
          if (!me._parser['on' + ev] && streamWraps.indexOf(ev) !== -1) {
            me._parser['on' + ev] = function () {
              var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments);
              args.splice(0, 0, ev);
              me.emit.apply(me, args);
            };
          }
          return Stream.prototype.on.call(me, ev, handler);
        };

        // this really needs to be replaced with character classes.
        // XML allows all manner of ridiculous numbers and digits.
        var CDATA = '[CDATA[';
        var DOCTYPE = 'DOCTYPE';
        var XML_NAMESPACE = 'http://www.w3.org/XML/1998/namespace';
        var XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/';
        var rootNS = {
          xml: XML_NAMESPACE,
          xmlns: XMLNS_NAMESPACE
        };

        // http://www.w3.org/TR/REC-xml/#NT-NameStartChar
        // This implementation works on strings, a single character at a time
        // as such, it cannot ever support astral-plane characters (10000-EFFFF)
        // without a significant breaking change to either this  parser, or the
        // JavaScript language.  Implementation of an emoji-capable xml parser
        // is left as an exercise for the reader.
        var nameStart = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
        var nameBody = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;
        var entityStart = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
        var entityBody = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;
        function isWhitespace(c) {
          return c === ' ' || c === '\n' || c === '\r' || c === '\t';
        }
        function isQuote(c) {
          return c === '"' || c === '\'';
        }
        function isAttribEnd(c) {
          return c === '>' || isWhitespace(c);
        }
        function isMatch(regex, c) {
          return regex.test(c);
        }
        function notMatch(regex, c) {
          return !isMatch(regex, c);
        }
        var S = 0;
        sax.STATE = {
          BEGIN: S++,
          // leading byte order mark or whitespace
          BEGIN_WHITESPACE: S++,
          // leading whitespace
          TEXT: S++,
          // general stuff
          TEXT_ENTITY: S++,
          // &amp and such.
          OPEN_WAKA: S++,
          // <
          SGML_DECL: S++,
          // <!BLARG
          SGML_DECL_QUOTED: S++,
          // <!BLARG foo "bar
          DOCTYPE: S++,
          // <!DOCTYPE
          DOCTYPE_QUOTED: S++,
          // <!DOCTYPE "//blah
          DOCTYPE_DTD: S++,
          // <!DOCTYPE "//blah" [ ...
          DOCTYPE_DTD_QUOTED: S++,
          // <!DOCTYPE "//blah" [ "foo
          COMMENT_STARTING: S++,
          // <!-
          COMMENT: S++,
          // <!--
          COMMENT_ENDING: S++,
          // <!-- blah -
          COMMENT_ENDED: S++,
          // <!-- blah --
          CDATA: S++,
          // <![CDATA[ something
          CDATA_ENDING: S++,
          // ]
          CDATA_ENDING_2: S++,
          // ]]
          PROC_INST: S++,
          // <?hi
          PROC_INST_BODY: S++,
          // <?hi there
          PROC_INST_ENDING: S++,
          // <?hi "there" ?
          OPEN_TAG: S++,
          // <strong
          OPEN_TAG_SLASH: S++,
          // <strong /
          ATTRIB: S++,
          // <a
          ATTRIB_NAME: S++,
          // <a foo
          ATTRIB_NAME_SAW_WHITE: S++,
          // <a foo _
          ATTRIB_VALUE: S++,
          // <a foo=
          ATTRIB_VALUE_QUOTED: S++,
          // <a foo="bar
          ATTRIB_VALUE_CLOSED: S++,
          // <a foo="bar"
          ATTRIB_VALUE_UNQUOTED: S++,
          // <a foo=bar
          ATTRIB_VALUE_ENTITY_Q: S++,
          // <foo bar="&quot;"
          ATTRIB_VALUE_ENTITY_U: S++,
          // <foo bar=&quot
          CLOSE_TAG: S++,
          // </a
          CLOSE_TAG_SAW_WHITE: S++,
          // </a   >
          SCRIPT: S++,
          // <script> ...
          SCRIPT_ENDING: S++ // <script> ... <
        };
        sax.XML_ENTITIES = {
          'amp': '&',
          'gt': '>',
          'lt': '<',
          'quot': '"',
          'apos': "'"
        };
        sax.ENTITIES = {
          'amp': '&',
          'gt': '>',
          'lt': '<',
          'quot': '"',
          'apos': "'",
          'AElig': 198,
          'Aacute': 193,
          'Acirc': 194,
          'Agrave': 192,
          'Aring': 197,
          'Atilde': 195,
          'Auml': 196,
          'Ccedil': 199,
          'ETH': 208,
          'Eacute': 201,
          'Ecirc': 202,
          'Egrave': 200,
          'Euml': 203,
          'Iacute': 205,
          'Icirc': 206,
          'Igrave': 204,
          'Iuml': 207,
          'Ntilde': 209,
          'Oacute': 211,
          'Ocirc': 212,
          'Ograve': 210,
          'Oslash': 216,
          'Otilde': 213,
          'Ouml': 214,
          'THORN': 222,
          'Uacute': 218,
          'Ucirc': 219,
          'Ugrave': 217,
          'Uuml': 220,
          'Yacute': 221,
          'aacute': 225,
          'acirc': 226,
          'aelig': 230,
          'agrave': 224,
          'aring': 229,
          'atilde': 227,
          'auml': 228,
          'ccedil': 231,
          'eacute': 233,
          'ecirc': 234,
          'egrave': 232,
          'eth': 240,
          'euml': 235,
          'iacute': 237,
          'icirc': 238,
          'igrave': 236,
          'iuml': 239,
          'ntilde': 241,
          'oacute': 243,
          'ocirc': 244,
          'ograve': 242,
          'oslash': 248,
          'otilde': 245,
          'ouml': 246,
          'szlig': 223,
          'thorn': 254,
          'uacute': 250,
          'ucirc': 251,
          'ugrave': 249,
          'uuml': 252,
          'yacute': 253,
          'yuml': 255,
          'copy': 169,
          'reg': 174,
          'nbsp': 160,
          'iexcl': 161,
          'cent': 162,
          'pound': 163,
          'curren': 164,
          'yen': 165,
          'brvbar': 166,
          'sect': 167,
          'uml': 168,
          'ordf': 170,
          'laquo': 171,
          'not': 172,
          'shy': 173,
          'macr': 175,
          'deg': 176,
          'plusmn': 177,
          'sup1': 185,
          'sup2': 178,
          'sup3': 179,
          'acute': 180,
          'micro': 181,
          'para': 182,
          'middot': 183,
          'cedil': 184,
          'ordm': 186,
          'raquo': 187,
          'frac14': 188,
          'frac12': 189,
          'frac34': 190,
          'iquest': 191,
          'times': 215,
          'divide': 247,
          'OElig': 338,
          'oelig': 339,
          'Scaron': 352,
          'scaron': 353,
          'Yuml': 376,
          'fnof': 402,
          'circ': 710,
          'tilde': 732,
          'Alpha': 913,
          'Beta': 914,
          'Gamma': 915,
          'Delta': 916,
          'Epsilon': 917,
          'Zeta': 918,
          'Eta': 919,
          'Theta': 920,
          'Iota': 921,
          'Kappa': 922,
          'Lambda': 923,
          'Mu': 924,
          'Nu': 925,
          'Xi': 926,
          'Omicron': 927,
          'Pi': 928,
          'Rho': 929,
          'Sigma': 931,
          'Tau': 932,
          'Upsilon': 933,
          'Phi': 934,
          'Chi': 935,
          'Psi': 936,
          'Omega': 937,
          'alpha': 945,
          'beta': 946,
          'gamma': 947,
          'delta': 948,
          'epsilon': 949,
          'zeta': 950,
          'eta': 951,
          'theta': 952,
          'iota': 953,
          'kappa': 954,
          'lambda': 955,
          'mu': 956,
          'nu': 957,
          'xi': 958,
          'omicron': 959,
          'pi': 960,
          'rho': 961,
          'sigmaf': 962,
          'sigma': 963,
          'tau': 964,
          'upsilon': 965,
          'phi': 966,
          'chi': 967,
          'psi': 968,
          'omega': 969,
          'thetasym': 977,
          'upsih': 978,
          'piv': 982,
          'ensp': 8194,
          'emsp': 8195,
          'thinsp': 8201,
          'zwnj': 8204,
          'zwj': 8205,
          'lrm': 8206,
          'rlm': 8207,
          'ndash': 8211,
          'mdash': 8212,
          'lsquo': 8216,
          'rsquo': 8217,
          'sbquo': 8218,
          'ldquo': 8220,
          'rdquo': 8221,
          'bdquo': 8222,
          'dagger': 8224,
          'Dagger': 8225,
          'bull': 8226,
          'hellip': 8230,
          'permil': 8240,
          'prime': 8242,
          'Prime': 8243,
          'lsaquo': 8249,
          'rsaquo': 8250,
          'oline': 8254,
          'frasl': 8260,
          'euro': 8364,
          'image': 8465,
          'weierp': 8472,
          'real': 8476,
          'trade': 8482,
          'alefsym': 8501,
          'larr': 8592,
          'uarr': 8593,
          'rarr': 8594,
          'darr': 8595,
          'harr': 8596,
          'crarr': 8629,
          'lArr': 8656,
          'uArr': 8657,
          'rArr': 8658,
          'dArr': 8659,
          'hArr': 8660,
          'forall': 8704,
          'part': 8706,
          'exist': 8707,
          'empty': 8709,
          'nabla': 8711,
          'isin': 8712,
          'notin': 8713,
          'ni': 8715,
          'prod': 8719,
          'sum': 8721,
          'minus': 8722,
          'lowast': 8727,
          'radic': 8730,
          'prop': 8733,
          'infin': 8734,
          'ang': 8736,
          'and': 8743,
          'or': 8744,
          'cap': 8745,
          'cup': 8746,
          'int': 8747,
          'there4': 8756,
          'sim': 8764,
          'cong': 8773,
          'asymp': 8776,
          'ne': 8800,
          'equiv': 8801,
          'le': 8804,
          'ge': 8805,
          'sub': 8834,
          'sup': 8835,
          'nsub': 8836,
          'sube': 8838,
          'supe': 8839,
          'oplus': 8853,
          'otimes': 8855,
          'perp': 8869,
          'sdot': 8901,
          'lceil': 8968,
          'rceil': 8969,
          'lfloor': 8970,
          'rfloor': 8971,
          'lang': 9001,
          'rang': 9002,
          'loz': 9674,
          'spades': 9824,
          'clubs': 9827,
          'hearts': 9829,
          'diams': 9830
        };
        Object.keys(sax.ENTITIES).forEach(function (key) {
          var e = sax.ENTITIES[key];
          var s = typeof e === 'number' ? String.fromCharCode(e) : e;
          sax.ENTITIES[key] = s;
        });
        for (var s in sax.STATE) {
          sax.STATE[sax.STATE[s]] = s;
        }

        // shorthand
        S = sax.STATE;
        function emit(parser, event, data) {
          parser[event] && parser[event](data);
        }
        function emitNode(parser, nodeType, data) {
          if (parser.textNode) closeText(parser);
          emit(parser, nodeType, data);
        }
        function closeText(parser) {
          parser.textNode = textopts(parser.opt, parser.textNode);
          if (parser.textNode) emit(parser, 'ontext', parser.textNode);
          parser.textNode = '';
        }
        function textopts(opt, text) {
          if (opt.trim) text = text.trim();
          if (opt.normalize) text = text.replace(/\s+/g, ' ');
          return text;
        }
        function error(parser, er) {
          closeText(parser);
          if (parser.trackPosition) {
            er += '\nLine: ' + parser.line + '\nColumn: ' + parser.column + '\nChar: ' + parser.c;
          }
          er = new Error(er);
          parser.error = er;
          emit(parser, 'onerror', er);
          return parser;
        }
        function _end(parser) {
          if (parser.sawRoot && !parser.closedRoot) strictFail(parser, 'Unclosed root tag');
          if (parser.state !== S.BEGIN && parser.state !== S.BEGIN_WHITESPACE && parser.state !== S.TEXT) {
            error(parser, 'Unexpected end');
          }
          closeText(parser);
          parser.c = '';
          parser.closed = true;
          emit(parser, 'onend');
          SAXParser.call(parser, parser.strict, parser.opt);
          return parser;
        }
        function strictFail(parser, message) {
          if (_typeof(parser) !== 'object' || !(parser instanceof SAXParser)) {
            throw new Error('bad call to strictFail');
          }
          if (parser.strict) {
            error(parser, message);
          }
        }
        function newTag(parser) {
          if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]();
          var parent = parser.tags[parser.tags.length - 1] || parser;
          var tag = parser.tag = {
            name: parser.tagName,
            attributes: {}
          };

          // will be overridden if tag contails an xmlns="foo" or xmlns:foo="bar"
          if (parser.opt.xmlns) {
            tag.ns = parent.ns;
          }
          parser.attribList.length = 0;
          emitNode(parser, 'onopentagstart', tag);
        }
        function qname(name, attribute) {
          var i = name.indexOf(':');
          var qualName = i < 0 ? ['', name] : name.split(':');
          var prefix = qualName[0];
          var local = qualName[1];

          // <x "xmlns"="http://foo">
          if (attribute && name === 'xmlns') {
            prefix = 'xmlns';
            local = '';
          }
          return {
            prefix: prefix,
            local: local
          };
        }
        function attrib(parser) {
          if (!parser.strict) {
            parser.attribName = parser.attribName[parser.looseCase]();
          }
          if (parser.attribList.indexOf(parser.attribName) !== -1 || parser.tag.attributes.hasOwnProperty(parser.attribName)) {
            parser.attribName = parser.attribValue = '';
            return;
          }
          if (parser.opt.xmlns) {
            var qn = qname(parser.attribName, true);
            var prefix = qn.prefix;
            var local = qn.local;
            if (prefix === 'xmlns') {
              // namespace binding attribute. push the binding into scope
              if (local === 'xml' && parser.attribValue !== XML_NAMESPACE) {
                strictFail(parser, 'xml: prefix must be bound to ' + XML_NAMESPACE + '\n' + 'Actual: ' + parser.attribValue);
              } else if (local === 'xmlns' && parser.attribValue !== XMLNS_NAMESPACE) {
                strictFail(parser, 'xmlns: prefix must be bound to ' + XMLNS_NAMESPACE + '\n' + 'Actual: ' + parser.attribValue);
              } else {
                var tag = parser.tag;
                var parent = parser.tags[parser.tags.length - 1] || parser;
                if (tag.ns === parent.ns) {
                  tag.ns = Object.create(parent.ns);
                }
                tag.ns[local] = parser.attribValue;
              }
            }

            // defer onattribute events until all attributes have been seen
            // so any new bindings can take effect. preserve attribute order
            // so deferred events can be emitted in document order
            parser.attribList.push([parser.attribName, parser.attribValue]);
          } else {
            // in non-xmlns mode, we can emit the event right away
            parser.tag.attributes[parser.attribName] = parser.attribValue;
            emitNode(parser, 'onattribute', {
              name: parser.attribName,
              value: parser.attribValue
            });
          }
          parser.attribName = parser.attribValue = '';
        }
        function openTag(parser, selfClosing) {
          if (parser.opt.xmlns) {
            // emit namespace binding events
            var tag = parser.tag;

            // add namespace info to tag
            var qn = qname(parser.tagName);
            tag.prefix = qn.prefix;
            tag.local = qn.local;
            tag.uri = tag.ns[qn.prefix] || '';
            if (tag.prefix && !tag.uri) {
              strictFail(parser, 'Unbound namespace prefix: ' + JSON.stringify(parser.tagName));
              tag.uri = qn.prefix;
            }
            var parent = parser.tags[parser.tags.length - 1] || parser;
            if (tag.ns && parent.ns !== tag.ns) {
              Object.keys(tag.ns).forEach(function (p) {
                emitNode(parser, 'onopennamespace', {
                  prefix: p,
                  uri: tag.ns[p]
                });
              });
            }

            // handle deferred onattribute events
            // Note: do not apply default ns to attributes:
            //   http://www.w3.org/TR/REC-xml-names/#defaulting
            for (var i = 0, l = parser.attribList.length; i < l; i++) {
              var nv = parser.attribList[i];
              var name = nv[0];
              var value = nv[1];
              var qualName = qname(name, true);
              var prefix = qualName.prefix;
              var local = qualName.local;
              var uri = prefix === '' ? '' : tag.ns[prefix] || '';
              var a = {
                name: name,
                value: value,
                prefix: prefix,
                local: local,
                uri: uri
              };

              // if there's any attributes with an undefined namespace,
              // then fail on them now.
              if (prefix && prefix !== 'xmlns' && !uri) {
                strictFail(parser, 'Unbound namespace prefix: ' + JSON.stringify(prefix));
                a.uri = prefix;
              }
              parser.tag.attributes[name] = a;
              emitNode(parser, 'onattribute', a);
            }
            parser.attribList.length = 0;
          }
          parser.tag.isSelfClosing = !!selfClosing;

          // process the tag
          parser.sawRoot = true;
          parser.tags.push(parser.tag);
          emitNode(parser, 'onopentag', parser.tag);
          if (!selfClosing) {
            // special case for <script> in non-strict mode.
            if (!parser.noscript && parser.tagName.toLowerCase() === 'script') {
              parser.state = S.SCRIPT;
            } else {
              parser.state = S.TEXT;
            }
            parser.tag = null;
            parser.tagName = '';
          }
          parser.attribName = parser.attribValue = '';
          parser.attribList.length = 0;
        }
        function closeTag(parser) {
          if (!parser.tagName) {
            strictFail(parser, 'Weird empty close tag.');
            parser.textNode += '</>';
            parser.state = S.TEXT;
            return;
          }
          if (parser.script) {
            if (parser.tagName !== 'script') {
              parser.script += '</' + parser.tagName + '>';
              parser.tagName = '';
              parser.state = S.SCRIPT;
              return;
            }
            emitNode(parser, 'onscript', parser.script);
            parser.script = '';
          }

          // first make sure that the closing tag actually exists.
          // <a><b></c></b></a> will close everything, otherwise.
          var t = parser.tags.length;
          var tagName = parser.tagName;
          if (!parser.strict) {
            tagName = tagName[parser.looseCase]();
          }
          var closeTo = tagName;
          while (t--) {
            var close = parser.tags[t];
            if (close.name !== closeTo) {
              // fail the first time in strict mode
              strictFail(parser, 'Unexpected close tag');
            } else {
              break;
            }
          }

          // didn't find it.  we already failed for strict, so just abort.
          if (t < 0) {
            strictFail(parser, 'Unmatched closing tag: ' + parser.tagName);
            parser.textNode += '</' + parser.tagName + '>';
            parser.state = S.TEXT;
            return;
          }
          parser.tagName = tagName;
          var s = parser.tags.length;
          while (s-- > t) {
            var tag = parser.tag = parser.tags.pop();
            parser.tagName = parser.tag.name;
            emitNode(parser, 'onclosetag', parser.tagName);
            var x = {};
            for (var i in tag.ns) {
              x[i] = tag.ns[i];
            }
            var parent = parser.tags[parser.tags.length - 1] || parser;
            if (parser.opt.xmlns && tag.ns !== parent.ns) {
              // remove namespace bindings introduced by tag
              Object.keys(tag.ns).forEach(function (p) {
                var n = tag.ns[p];
                emitNode(parser, 'onclosenamespace', {
                  prefix: p,
                  uri: n
                });
              });
            }
          }
          if (t === 0) parser.closedRoot = true;
          parser.tagName = parser.attribValue = parser.attribName = '';
          parser.attribList.length = 0;
          parser.state = S.TEXT;
        }
        function parseEntity(parser) {
          var entity = parser.entity;
          var entityLC = entity.toLowerCase();
          var num;
          var numStr = '';
          if (parser.ENTITIES[entity]) {
            return parser.ENTITIES[entity];
          }
          if (parser.ENTITIES[entityLC]) {
            return parser.ENTITIES[entityLC];
          }
          entity = entityLC;
          if (entity.charAt(0) === '#') {
            if (entity.charAt(1) === 'x') {
              entity = entity.slice(2);
              num = parseInt(entity, 16);
              numStr = num.toString(16);
            } else {
              entity = entity.slice(1);
              num = parseInt(entity, 10);
              numStr = num.toString(10);
            }
          }
          entity = entity.replace(/^0+/, '');
          if (isNaN(num) || numStr.toLowerCase() !== entity) {
            strictFail(parser, 'Invalid character entity');
            return '&' + parser.entity + ';';
          }
          return String.fromCodePoint(num);
        }
        function beginWhiteSpace(parser, c) {
          if (c === '<') {
            parser.state = S.OPEN_WAKA;
            parser.startTagPosition = parser.position;
          } else if (!isWhitespace(c)) {
            // have to process this as a text node.
            // weird, but happens.
            strictFail(parser, 'Non-whitespace before first tag.');
            parser.textNode = c;
            parser.state = S.TEXT;
          }
        }
        function charAt(chunk, i) {
          var result = '';
          if (i < chunk.length) {
            result = chunk.charAt(i);
          }
          return result;
        }
        function write(chunk) {
          var parser = this;
          if (this.error) {
            throw this.error;
          }
          if (parser.closed) {
            return error(parser, 'Cannot write after close. Assign an onready handler.');
          }
          if (chunk === null) {
            return _end(parser);
          }
          if (_typeof(chunk) === 'object') {
            chunk = chunk.toString();
          }
          var i = 0;
          var c = '';
          while (true) {
            c = charAt(chunk, i++);
            parser.c = c;
            if (!c) {
              break;
            }
            if (parser.trackPosition) {
              parser.position++;
              if (c === '\n') {
                parser.line++;
                parser.column = 0;
              } else {
                parser.column++;
              }
            }
            switch (parser.state) {
              case S.BEGIN:
                parser.state = S.BEGIN_WHITESPACE;
                if (c === "\uFEFF") {
                  continue;
                }
                beginWhiteSpace(parser, c);
                continue;
              case S.BEGIN_WHITESPACE:
                beginWhiteSpace(parser, c);
                continue;
              case S.TEXT:
                if (parser.sawRoot && !parser.closedRoot) {
                  var starti = i - 1;
                  while (c && c !== '<' && c !== '&') {
                    c = charAt(chunk, i++);
                    if (c && parser.trackPosition) {
                      parser.position++;
                      if (c === '\n') {
                        parser.line++;
                        parser.column = 0;
                      } else {
                        parser.column++;
                      }
                    }
                  }
                  parser.textNode += chunk.substring(starti, i - 1);
                }
                if (c === '<' && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {
                  parser.state = S.OPEN_WAKA;
                  parser.startTagPosition = parser.position;
                } else {
                  if (!isWhitespace(c) && (!parser.sawRoot || parser.closedRoot)) {
                    strictFail(parser, 'Text data outside of root node.');
                  }
                  if (c === '&') {
                    parser.state = S.TEXT_ENTITY;
                  } else {
                    parser.textNode += c;
                  }
                }
                continue;
              case S.SCRIPT:
                // only non-strict
                if (c === '<') {
                  parser.state = S.SCRIPT_ENDING;
                } else {
                  parser.script += c;
                }
                continue;
              case S.SCRIPT_ENDING:
                if (c === '/') {
                  parser.state = S.CLOSE_TAG;
                } else {
                  parser.script += '<' + c;
                  parser.state = S.SCRIPT;
                }
                continue;
              case S.OPEN_WAKA:
                // either a /, ?, !, or text is coming next.
                if (c === '!') {
                  parser.state = S.SGML_DECL;
                  parser.sgmlDecl = '';
                } else if (isWhitespace(c)) ; else if (isMatch(nameStart, c)) {
                  parser.state = S.OPEN_TAG;
                  parser.tagName = c;
                } else if (c === '/') {
                  parser.state = S.CLOSE_TAG;
                  parser.tagName = '';
                } else if (c === '?') {
                  parser.state = S.PROC_INST;
                  parser.procInstName = parser.procInstBody = '';
                } else {
                  strictFail(parser, 'Unencoded <');
                  // if there was some whitespace, then add that in.
                  if (parser.startTagPosition + 1 < parser.position) {
                    var pad = parser.position - parser.startTagPosition;
                    c = new Array(pad).join(' ') + c;
                  }
                  parser.textNode += '<' + c;
                  parser.state = S.TEXT;
                }
                continue;
              case S.SGML_DECL:
                if (parser.sgmlDecl + c === '--') {
                  parser.state = S.COMMENT;
                  parser.comment = '';
                  parser.sgmlDecl = '';
                  continue;
                }
                if (parser.doctype && parser.doctype !== true && parser.sgmlDecl) {
                  parser.state = S.DOCTYPE_DTD;
                  parser.doctype += '<!' + parser.sgmlDecl + c;
                  parser.sgmlDecl = '';
                } else if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {
                  emitNode(parser, 'onopencdata');
                  parser.state = S.CDATA;
                  parser.sgmlDecl = '';
                  parser.cdata = '';
                } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {
                  parser.state = S.DOCTYPE;
                  if (parser.doctype || parser.sawRoot) {
                    strictFail(parser, 'Inappropriately located doctype declaration');
                  }
                  parser.doctype = '';
                  parser.sgmlDecl = '';
                } else if (c === '>') {
                  emitNode(parser, 'onsgmldeclaration', parser.sgmlDecl);
                  parser.sgmlDecl = '';
                  parser.state = S.TEXT;
                } else if (isQuote(c)) {
                  parser.state = S.SGML_DECL_QUOTED;
                  parser.sgmlDecl += c;
                } else {
                  parser.sgmlDecl += c;
                }
                continue;
              case S.SGML_DECL_QUOTED:
                if (c === parser.q) {
                  parser.state = S.SGML_DECL;
                  parser.q = '';
                }
                parser.sgmlDecl += c;
                continue;
              case S.DOCTYPE:
                if (c === '>') {
                  parser.state = S.TEXT;
                  emitNode(parser, 'ondoctype', parser.doctype);
                  parser.doctype = true; // just remember that we saw it.
                } else {
                  parser.doctype += c;
                  if (c === '[') {
                    parser.state = S.DOCTYPE_DTD;
                  } else if (isQuote(c)) {
                    parser.state = S.DOCTYPE_QUOTED;
                    parser.q = c;
                  }
                }
                continue;
              case S.DOCTYPE_QUOTED:
                parser.doctype += c;
                if (c === parser.q) {
                  parser.q = '';
                  parser.state = S.DOCTYPE;
                }
                continue;
              case S.DOCTYPE_DTD:
                if (c === ']') {
                  parser.doctype += c;
                  parser.state = S.DOCTYPE;
                } else if (c === '<') {
                  parser.state = S.OPEN_WAKA;
                  parser.startTagPosition = parser.position;
                } else if (isQuote(c)) {
                  parser.doctype += c;
                  parser.state = S.DOCTYPE_DTD_QUOTED;
                  parser.q = c;
                } else {
                  parser.doctype += c;
                }
                continue;
              case S.DOCTYPE_DTD_QUOTED:
                parser.doctype += c;
                if (c === parser.q) {
                  parser.state = S.DOCTYPE_DTD;
                  parser.q = '';
                }
                continue;
              case S.COMMENT:
                if (c === '-') {
                  parser.state = S.COMMENT_ENDING;
                } else {
                  parser.comment += c;
                }
                continue;
              case S.COMMENT_ENDING:
                if (c === '-') {
                  parser.state = S.COMMENT_ENDED;
                  parser.comment = textopts(parser.opt, parser.comment);
                  if (parser.comment) {
                    emitNode(parser, 'oncomment', parser.comment);
                  }
                  parser.comment = '';
                } else {
                  parser.comment += '-' + c;
                  parser.state = S.COMMENT;
                }
                continue;
              case S.COMMENT_ENDED:
                if (c !== '>') {
                  strictFail(parser, 'Malformed comment');
                  // allow <!-- blah -- bloo --> in non-strict mode,
                  // which is a comment of " blah -- bloo "
                  parser.comment += '--' + c;
                  parser.state = S.COMMENT;
                } else if (parser.doctype && parser.doctype !== true) {
                  parser.state = S.DOCTYPE_DTD;
                } else {
                  parser.state = S.TEXT;
                }
                continue;
              case S.CDATA:
                if (c === ']') {
                  parser.state = S.CDATA_ENDING;
                } else {
                  parser.cdata += c;
                }
                continue;
              case S.CDATA_ENDING:
                if (c === ']') {
                  parser.state = S.CDATA_ENDING_2;
                } else {
                  parser.cdata += ']' + c;
                  parser.state = S.CDATA;
                }
                continue;
              case S.CDATA_ENDING_2:
                if (c === '>') {
                  if (parser.cdata) {
                    emitNode(parser, 'oncdata', parser.cdata);
                  }
                  emitNode(parser, 'onclosecdata');
                  parser.cdata = '';
                  parser.state = S.TEXT;
                } else if (c === ']') {
                  parser.cdata += ']';
                } else {
                  parser.cdata += ']]' + c;
                  parser.state = S.CDATA;
                }
                continue;
              case S.PROC_INST:
                if (c === '?') {
                  parser.state = S.PROC_INST_ENDING;
                } else if (isWhitespace(c)) {
                  parser.state = S.PROC_INST_BODY;
                } else {
                  parser.procInstName += c;
                }
                continue;
              case S.PROC_INST_BODY:
                if (!parser.procInstBody && isWhitespace(c)) {
                  continue;
                } else if (c === '?') {
                  parser.state = S.PROC_INST_ENDING;
                } else {
                  parser.procInstBody += c;
                }
                continue;
              case S.PROC_INST_ENDING:
                if (c === '>') {
                  emitNode(parser, 'onprocessinginstruction', {
                    name: parser.procInstName,
                    body: parser.procInstBody
                  });
                  parser.procInstName = parser.procInstBody = '';
                  parser.state = S.TEXT;
                } else {
                  parser.procInstBody += '?' + c;
                  parser.state = S.PROC_INST_BODY;
                }
                continue;
              case S.OPEN_TAG:
                if (isMatch(nameBody, c)) {
                  parser.tagName += c;
                } else {
                  newTag(parser);
                  if (c === '>') {
                    openTag(parser);
                  } else if (c === '/') {
                    parser.state = S.OPEN_TAG_SLASH;
                  } else {
                    if (!isWhitespace(c)) {
                      strictFail(parser, 'Invalid character in tag name');
                    }
                    parser.state = S.ATTRIB;
                  }
                }
                continue;
              case S.OPEN_TAG_SLASH:
                if (c === '>') {
                  openTag(parser, true);
                  closeTag(parser);
                } else {
                  strictFail(parser, 'Forward-slash in opening tag not followed by >');
                  parser.state = S.ATTRIB;
                }
                continue;
              case S.ATTRIB:
                // haven't read the attribute name yet.
                if (isWhitespace(c)) {
                  continue;
                } else if (c === '>') {
                  openTag(parser);
                } else if (c === '/') {
                  parser.state = S.OPEN_TAG_SLASH;
                } else if (isMatch(nameStart, c)) {
                  parser.attribName = c;
                  parser.attribValue = '';
                  parser.state = S.ATTRIB_NAME;
                } else {
                  strictFail(parser, 'Invalid attribute name');
                }
                continue;
              case S.ATTRIB_NAME:
                if (c === '=') {
                  parser.state = S.ATTRIB_VALUE;
                } else if (c === '>') {
                  strictFail(parser, 'Attribute without value');
                  parser.attribValue = parser.attribName;
                  attrib(parser);
                  openTag(parser);
                } else if (isWhitespace(c)) {
                  parser.state = S.ATTRIB_NAME_SAW_WHITE;
                } else if (isMatch(nameBody, c)) {
                  parser.attribName += c;
                } else {
                  strictFail(parser, 'Invalid attribute name');
                }
                continue;
              case S.ATTRIB_NAME_SAW_WHITE:
                if (c === '=') {
                  parser.state = S.ATTRIB_VALUE;
                } else if (isWhitespace(c)) {
                  continue;
                } else {
                  strictFail(parser, 'Attribute without value');
                  parser.tag.attributes[parser.attribName] = '';
                  parser.attribValue = '';
                  emitNode(parser, 'onattribute', {
                    name: parser.attribName,
                    value: ''
                  });
                  parser.attribName = '';
                  if (c === '>') {
                    openTag(parser);
                  } else if (isMatch(nameStart, c)) {
                    parser.attribName = c;
                    parser.state = S.ATTRIB_NAME;
                  } else {
                    strictFail(parser, 'Invalid attribute name');
                    parser.state = S.ATTRIB;
                  }
                }
                continue;
              case S.ATTRIB_VALUE:
                if (isWhitespace(c)) {
                  continue;
                } else if (isQuote(c)) {
                  parser.q = c;
                  parser.state = S.ATTRIB_VALUE_QUOTED;
                } else {
                  if (!parser.opt.unquotedAttributeValues) {
                    error(parser, 'Unquoted attribute value');
                  }
                  parser.state = S.ATTRIB_VALUE_UNQUOTED;
                  parser.attribValue = c;
                }
                continue;
              case S.ATTRIB_VALUE_QUOTED:
                if (c !== parser.q) {
                  if (c === '&') {
                    parser.state = S.ATTRIB_VALUE_ENTITY_Q;
                  } else {
                    parser.attribValue += c;
                  }
                  continue;
                }
                attrib(parser);
                parser.q = '';
                parser.state = S.ATTRIB_VALUE_CLOSED;
                continue;
              case S.ATTRIB_VALUE_CLOSED:
                if (isWhitespace(c)) {
                  parser.state = S.ATTRIB;
                } else if (c === '>') {
                  openTag(parser);
                } else if (c === '/') {
                  parser.state = S.OPEN_TAG_SLASH;
                } else if (isMatch(nameStart, c)) {
                  strictFail(parser, 'No whitespace between attributes');
                  parser.attribName = c;
                  parser.attribValue = '';
                  parser.state = S.ATTRIB_NAME;
                } else {
                  strictFail(parser, 'Invalid attribute name');
                }
                continue;
              case S.ATTRIB_VALUE_UNQUOTED:
                if (!isAttribEnd(c)) {
                  if (c === '&') {
                    parser.state = S.ATTRIB_VALUE_ENTITY_U;
                  } else {
                    parser.attribValue += c;
                  }
                  continue;
                }
                attrib(parser);
                if (c === '>') {
                  openTag(parser);
                } else {
                  parser.state = S.ATTRIB;
                }
                continue;
              case S.CLOSE_TAG:
                if (!parser.tagName) {
                  if (isWhitespace(c)) {
                    continue;
                  } else if (notMatch(nameStart, c)) {
                    if (parser.script) {
                      parser.script += '</' + c;
                      parser.state = S.SCRIPT;
                    } else {
                      strictFail(parser, 'Invalid tagname in closing tag.');
                    }
                  } else {
                    parser.tagName = c;
                  }
                } else if (c === '>') {
                  closeTag(parser);
                } else if (isMatch(nameBody, c)) {
                  parser.tagName += c;
                } else if (parser.script) {
                  parser.script += '</' + parser.tagName;
                  parser.tagName = '';
                  parser.state = S.SCRIPT;
                } else {
                  if (!isWhitespace(c)) {
                    strictFail(parser, 'Invalid tagname in closing tag');
                  }
                  parser.state = S.CLOSE_TAG_SAW_WHITE;
                }
                continue;
              case S.CLOSE_TAG_SAW_WHITE:
                if (isWhitespace(c)) {
                  continue;
                }
                if (c === '>') {
                  closeTag(parser);
                } else {
                  strictFail(parser, 'Invalid characters in closing tag');
                }
                continue;
              case S.TEXT_ENTITY:
              case S.ATTRIB_VALUE_ENTITY_Q:
              case S.ATTRIB_VALUE_ENTITY_U:
                var returnState;
                var buffer;
                switch (parser.state) {
                  case S.TEXT_ENTITY:
                    returnState = S.TEXT;
                    buffer = 'textNode';
                    break;
                  case S.ATTRIB_VALUE_ENTITY_Q:
                    returnState = S.ATTRIB_VALUE_QUOTED;
                    buffer = 'attribValue';
                    break;
                  case S.ATTRIB_VALUE_ENTITY_U:
                    returnState = S.ATTRIB_VALUE_UNQUOTED;
                    buffer = 'attribValue';
                    break;
                }
                if (c === ';') {
                  var parsedEntity = parseEntity(parser);
                  if (parser.opt.unparsedEntities && !Object.values(sax.XML_ENTITIES).includes(parsedEntity)) {
                    parser.entity = '';
                    parser.state = returnState;
                    parser.write(parsedEntity);
                  } else {
                    parser[buffer] += parsedEntity;
                    parser.entity = '';
                    parser.state = returnState;
                  }
                } else if (isMatch(parser.entity.length ? entityBody : entityStart, c)) {
                  parser.entity += c;
                } else {
                  strictFail(parser, 'Invalid character in entity name');
                  parser[buffer] += '&' + parser.entity + c;
                  parser.entity = '';
                  parser.state = returnState;
                }
                continue;
              default:
                /* istanbul ignore next */{
                  throw new Error(parser, 'Unknown state: ' + parser.state);
                }
            }
          } // while

          if (parser.position >= parser.bufferCheckPosition) {
            checkBufferLength(parser);
          }
          return parser;
        }

        /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */
        /* istanbul ignore next */
        if (!String.fromCodePoint) {
          (function () {
            var stringFromCharCode = String.fromCharCode;
            var floor = Math.floor;
            var fromCodePoint = function fromCodePoint() {
              var MAX_SIZE = 0x4000;
              var codeUnits = [];
              var highSurrogate;
              var lowSurrogate;
              var index = -1;
              var length = arguments.length;
              if (!length) {
                return '';
              }
              var result = '';
              while (++index < length) {
                var codePoint = Number(arguments[index]);
                if (!isFinite(codePoint) ||
                // `NaN`, `+Infinity`, or `-Infinity`
                codePoint < 0 ||
                // not a valid Unicode code point
                codePoint > 0x10FFFF ||
                // not a valid Unicode code point
                floor(codePoint) !== codePoint // not an integer
                ) {
                  throw RangeError('Invalid code point: ' + codePoint);
                }
                if (codePoint <= 0xFFFF) {
                  // BMP code point
                  codeUnits.push(codePoint);
                } else {
                  // Astral code point; split in surrogate halves
                  // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
                  codePoint -= 0x10000;
                  highSurrogate = (codePoint >> 10) + 0xD800;
                  lowSurrogate = codePoint % 0x400 + 0xDC00;
                  codeUnits.push(highSurrogate, lowSurrogate);
                }
                if (index + 1 === length || codeUnits.length > MAX_SIZE) {
                  result += stringFromCharCode.apply(null, codeUnits);
                  codeUnits.length = 0;
                }
              }
              return result;
            };
            /* istanbul ignore next */
            if (Object.defineProperty) {
              Object.defineProperty(String, 'fromCodePoint', {
                value: fromCodePoint,
                configurable: true,
                writable: true
              });
            } else {
              String.fromCodePoint = fromCodePoint;
            }
          })();
        }
      })(exports);
    })(sax);
    return sax;
  }

  var bom = {};

  var hasRequiredBom;
  function requireBom() {
    if (hasRequiredBom) return bom;
    hasRequiredBom = 1;
    // Generated by CoffeeScript 1.12.7
    (function () {

      bom.stripBOM = function (str) {
        if (str[0] === "\uFEFF") {
          return str.substring(1);
        } else {
          return str;
        }
      };
    }).call(commonjsGlobal);
    return bom;
  }

  var processors = {};

  var hasRequiredProcessors;
  function requireProcessors() {
    if (hasRequiredProcessors) return processors;
    hasRequiredProcessors = 1;
    // Generated by CoffeeScript 1.12.7
    (function () {

      var prefixMatch;
      prefixMatch = new RegExp(/(?!xmlns)^.*:/);
      processors.normalize = function (str) {
        return str.toLowerCase();
      };
      processors.firstCharLowerCase = function (str) {
        return str.charAt(0).toLowerCase() + str.slice(1);
      };
      processors.stripPrefix = function (str) {
        return str.replace(prefixMatch, '');
      };
      processors.parseNumbers = function (str) {
        if (!isNaN(str)) {
          str = str % 1 === 0 ? parseInt(str, 10) : parseFloat(str);
        }
        return str;
      };
      processors.parseBooleans = function (str) {
        if (/^(?:true|false)$/i.test(str)) {
          str = str.toLowerCase() === 'true';
        }
        return str;
      };
    }).call(commonjsGlobal);
    return processors;
  }

  var hasRequiredParser;
  function requireParser() {
    if (hasRequiredParser) return parser$1;
    hasRequiredParser = 1;
    (function (exports) {
      // Generated by CoffeeScript 1.12.7
      (function () {

        var bom,
          defaults,
          defineProperty,
          events,
          isEmpty,
          processItem,
          processors,
          sax,
          setImmediate,
          bind = function bind(fn, me) {
            return function () {
              return fn.apply(me, arguments);
            };
          },
          extend = function extend(child, parent) {
            for (var key in parent) {
              if (hasProp.call(parent, key)) child[key] = parent[key];
            }
            function ctor() {
              this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
          },
          hasProp = {}.hasOwnProperty;
        sax = requireSax();
        events = require$$0$6;
        bom = requireBom();
        processors = requireProcessors();
        setImmediate = require$$4.setImmediate;
        defaults = requireDefaults().defaults;
        isEmpty = function isEmpty(thing) {
          return _typeof(thing) === "object" && thing != null && Object.keys(thing).length === 0;
        };
        processItem = function processItem(processors, item, key) {
          var i, len, process;
          for (i = 0, len = processors.length; i < len; i++) {
            process = processors[i];
            item = process(item, key);
          }
          return item;
        };
        defineProperty = function defineProperty(obj, key, value) {
          var descriptor;
          descriptor = Object.create(null);
          descriptor.value = value;
          descriptor.writable = true;
          descriptor.enumerable = true;
          descriptor.configurable = true;
          return Object.defineProperty(obj, key, descriptor);
        };
        exports.Parser = function (superClass) {
          extend(Parser, superClass);
          function Parser(opts) {
            this.parseStringPromise = bind(this.parseStringPromise, this);
            this.parseString = bind(this.parseString, this);
            this.reset = bind(this.reset, this);
            this.assignOrPush = bind(this.assignOrPush, this);
            this.processAsync = bind(this.processAsync, this);
            var key, ref, value;
            if (!(this instanceof exports.Parser)) {
              return new exports.Parser(opts);
            }
            this.options = {};
            ref = defaults["0.2"];
            for (key in ref) {
              if (!hasProp.call(ref, key)) continue;
              value = ref[key];
              this.options[key] = value;
            }
            for (key in opts) {
              if (!hasProp.call(opts, key)) continue;
              value = opts[key];
              this.options[key] = value;
            }
            if (this.options.xmlns) {
              this.options.xmlnskey = this.options.attrkey + "ns";
            }
            if (this.options.normalizeTags) {
              if (!this.options.tagNameProcessors) {
                this.options.tagNameProcessors = [];
              }
              this.options.tagNameProcessors.unshift(processors.normalize);
            }
            this.reset();
          }
          Parser.prototype.processAsync = function () {
            var chunk, err;
            try {
              if (this.remaining.length <= this.options.chunkSize) {
                chunk = this.remaining;
                this.remaining = '';
                this.saxParser = this.saxParser.write(chunk);
                return this.saxParser.close();
              } else {
                chunk = this.remaining.substr(0, this.options.chunkSize);
                this.remaining = this.remaining.substr(this.options.chunkSize, this.remaining.length);
                this.saxParser = this.saxParser.write(chunk);
                return setImmediate(this.processAsync);
              }
            } catch (error1) {
              err = error1;
              if (!this.saxParser.errThrown) {
                this.saxParser.errThrown = true;
                return this.emit(err);
              }
            }
          };
          Parser.prototype.assignOrPush = function (obj, key, newValue) {
            if (!(key in obj)) {
              if (!this.options.explicitArray) {
                return defineProperty(obj, key, newValue);
              } else {
                return defineProperty(obj, key, [newValue]);
              }
            } else {
              if (!(obj[key] instanceof Array)) {
                defineProperty(obj, key, [obj[key]]);
              }
              return obj[key].push(newValue);
            }
          };
          Parser.prototype.reset = function () {
            var attrkey, charkey, ontext, stack;
            this.removeAllListeners();
            this.saxParser = sax.parser(this.options.strict, {
              trim: false,
              normalize: false,
              xmlns: this.options.xmlns
            });
            this.saxParser.errThrown = false;
            this.saxParser.onerror = function (_this) {
              return function (error) {
                _this.saxParser.resume();
                if (!_this.saxParser.errThrown) {
                  _this.saxParser.errThrown = true;
                  return _this.emit("error", error);
                }
              };
            }(this);
            this.saxParser.onend = function (_this) {
              return function () {
                if (!_this.saxParser.ended) {
                  _this.saxParser.ended = true;
                  return _this.emit("end", _this.resultObject);
                }
              };
            }(this);
            this.saxParser.ended = false;
            this.EXPLICIT_CHARKEY = this.options.explicitCharkey;
            this.resultObject = null;
            stack = [];
            attrkey = this.options.attrkey;
            charkey = this.options.charkey;
            this.saxParser.onopentag = function (_this) {
              return function (node) {
                var key, newValue, obj, processedKey, ref;
                obj = {};
                obj[charkey] = "";
                if (!_this.options.ignoreAttrs) {
                  ref = node.attributes;
                  for (key in ref) {
                    if (!hasProp.call(ref, key)) continue;
                    if (!(attrkey in obj) && !_this.options.mergeAttrs) {
                      obj[attrkey] = {};
                    }
                    newValue = _this.options.attrValueProcessors ? processItem(_this.options.attrValueProcessors, node.attributes[key], key) : node.attributes[key];
                    processedKey = _this.options.attrNameProcessors ? processItem(_this.options.attrNameProcessors, key) : key;
                    if (_this.options.mergeAttrs) {
                      _this.assignOrPush(obj, processedKey, newValue);
                    } else {
                      defineProperty(obj[attrkey], processedKey, newValue);
                    }
                  }
                }
                obj["#name"] = _this.options.tagNameProcessors ? processItem(_this.options.tagNameProcessors, node.name) : node.name;
                if (_this.options.xmlns) {
                  obj[_this.options.xmlnskey] = {
                    uri: node.uri,
                    local: node.local
                  };
                }
                return stack.push(obj);
              };
            }(this);
            this.saxParser.onclosetag = function (_this) {
              return function () {
                var cdata, emptyStr, key, node, nodeName, obj, objClone, old, s, xpath;
                obj = stack.pop();
                nodeName = obj["#name"];
                if (!_this.options.explicitChildren || !_this.options.preserveChildrenOrder) {
                  delete obj["#name"];
                }
                if (obj.cdata === true) {
                  cdata = obj.cdata;
                  delete obj.cdata;
                }
                s = stack[stack.length - 1];
                if (obj[charkey].match(/^\s*$/) && !cdata) {
                  emptyStr = obj[charkey];
                  delete obj[charkey];
                } else {
                  if (_this.options.trim) {
                    obj[charkey] = obj[charkey].trim();
                  }
                  if (_this.options.normalize) {
                    obj[charkey] = obj[charkey].replace(/\s{2,}/g, " ").trim();
                  }
                  obj[charkey] = _this.options.valueProcessors ? processItem(_this.options.valueProcessors, obj[charkey], nodeName) : obj[charkey];
                  if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {
                    obj = obj[charkey];
                  }
                }
                if (isEmpty(obj)) {
                  if (typeof _this.options.emptyTag === 'function') {
                    obj = _this.options.emptyTag();
                  } else {
                    obj = _this.options.emptyTag !== '' ? _this.options.emptyTag : emptyStr;
                  }
                }
                if (_this.options.validator != null) {
                  xpath = "/" + function () {
                    var i, len, results;
                    results = [];
                    for (i = 0, len = stack.length; i < len; i++) {
                      node = stack[i];
                      results.push(node["#name"]);
                    }
                    return results;
                  }().concat(nodeName).join("/");
                  (function () {
                    var err;
                    try {
                      return obj = _this.options.validator(xpath, s && s[nodeName], obj);
                    } catch (error1) {
                      err = error1;
                      return _this.emit("error", err);
                    }
                  })();
                }
                if (_this.options.explicitChildren && !_this.options.mergeAttrs && _typeof(obj) === 'object') {
                  if (!_this.options.preserveChildrenOrder) {
                    node = {};
                    if (_this.options.attrkey in obj) {
                      node[_this.options.attrkey] = obj[_this.options.attrkey];
                      delete obj[_this.options.attrkey];
                    }
                    if (!_this.options.charsAsChildren && _this.options.charkey in obj) {
                      node[_this.options.charkey] = obj[_this.options.charkey];
                      delete obj[_this.options.charkey];
                    }
                    if (Object.getOwnPropertyNames(obj).length > 0) {
                      node[_this.options.childkey] = obj;
                    }
                    obj = node;
                  } else if (s) {
                    s[_this.options.childkey] = s[_this.options.childkey] || [];
                    objClone = {};
                    for (key in obj) {
                      if (!hasProp.call(obj, key)) continue;
                      defineProperty(objClone, key, obj[key]);
                    }
                    s[_this.options.childkey].push(objClone);
                    delete obj["#name"];
                    if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {
                      obj = obj[charkey];
                    }
                  }
                }
                if (stack.length > 0) {
                  return _this.assignOrPush(s, nodeName, obj);
                } else {
                  if (_this.options.explicitRoot) {
                    old = obj;
                    obj = {};
                    defineProperty(obj, nodeName, old);
                  }
                  _this.resultObject = obj;
                  _this.saxParser.ended = true;
                  return _this.emit("end", _this.resultObject);
                }
              };
            }(this);
            ontext = function (_this) {
              return function (text) {
                var charChild, s;
                s = stack[stack.length - 1];
                if (s) {
                  s[charkey] += text;
                  if (_this.options.explicitChildren && _this.options.preserveChildrenOrder && _this.options.charsAsChildren && (_this.options.includeWhiteChars || text.replace(/\\n/g, '').trim() !== '')) {
                    s[_this.options.childkey] = s[_this.options.childkey] || [];
                    charChild = {
                      '#name': '__text__'
                    };
                    charChild[charkey] = text;
                    if (_this.options.normalize) {
                      charChild[charkey] = charChild[charkey].replace(/\s{2,}/g, " ").trim();
                    }
                    s[_this.options.childkey].push(charChild);
                  }
                  return s;
                }
              };
            }(this);
            this.saxParser.ontext = ontext;
            return this.saxParser.oncdata = function (_this) {
              return function (text) {
                var s;
                s = ontext(text);
                if (s) {
                  return s.cdata = true;
                }
              };
            }();
          };
          Parser.prototype.parseString = function (str, cb) {
            var err;
            if (cb != null && typeof cb === "function") {
              this.on("end", function (result) {
                this.reset();
                return cb(null, result);
              });
              this.on("error", function (err) {
                this.reset();
                return cb(err);
              });
            }
            try {
              str = str.toString();
              if (str.trim() === '') {
                this.emit("end", null);
                return true;
              }
              str = bom.stripBOM(str);
              if (this.options.async) {
                this.remaining = str;
                setImmediate(this.processAsync);
                return this.saxParser;
              }
              return this.saxParser.write(str).close();
            } catch (error1) {
              err = error1;
              if (!(this.saxParser.errThrown || this.saxParser.ended)) {
                this.emit('error', err);
                return this.saxParser.errThrown = true;
              } else if (this.saxParser.ended) {
                throw err;
              }
            }
          };
          Parser.prototype.parseStringPromise = function (str) {
            return new Promise(function (_this) {
              return function (resolve, reject) {
                return _this.parseString(str, function (err, value) {
                  if (err) {
                    return reject(err);
                  } else {
                    return resolve(value);
                  }
                });
              };
            }(this));
          };
          return Parser;
        }(events);
        exports.parseString = function (str, a, b) {
          var cb, options, parser;
          if (b != null) {
            if (typeof b === 'function') {
              cb = b;
            }
            if (_typeof(a) === 'object') {
              options = a;
            }
          } else {
            if (typeof a === 'function') {
              cb = a;
            }
            options = {};
          }
          parser = new exports.Parser(options);
          return parser.parseString(str, cb);
        };
        exports.parseStringPromise = function (str, a) {
          var options, parser;
          if (_typeof(a) === 'object') {
            options = a;
          }
          parser = new exports.Parser(options);
          return parser.parseStringPromise(str);
        };
      }).call(commonjsGlobal);
    })(parser$1);
    return parser$1;
  }

  // Generated by CoffeeScript 1.12.7
  (function () {

    var builder,
      defaults,
      parser,
      processors,
      extend = function extend(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      },
      hasProp = {}.hasOwnProperty;
    defaults = requireDefaults();
    builder = requireBuilder();
    parser = requireParser();
    processors = requireProcessors();
    xml2js.defaults = defaults.defaults;
    xml2js.processors = processors;
    xml2js.ValidationError = function (superClass) {
      extend(ValidationError, superClass);
      function ValidationError(message) {
        this.message = message;
      }
      return ValidationError;
    }(Error);
    xml2js.Builder = builder.Builder;
    xml2js.Parser = parser.Parser;
    xml2js.parseString = parser.parseString;
    xml2js.parseStringPromise = parser.parseStringPromise;
  }).call(commonjsGlobal);

  var csv = {};

  var cjs$1 = {};

  var stream$3 = require$$0$3;
  var is_object$3 = function is_object(obj) {
    return _typeof(obj) === 'object' && obj !== null && !Array.isArray(obj);
  };
  var CsvError$3 = /*#__PURE__*/function (_Error) {
    function CsvError(code, message, options) {
      var _this;
      _classCallCheck(this, CsvError);
      if (Array.isArray(message)) message = message.join(' ').trim();
      _this = _callSuper(this, CsvError, [message]);
      if (Error.captureStackTrace !== undefined) {
        Error.captureStackTrace(_this, CsvError);
      }
      _this.code = code;
      for (var _len = arguments.length, contexts = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
        contexts[_key - 3] = arguments[_key];
      }
      for (var _i = 0, _contexts = contexts; _i < _contexts.length; _i++) {
        var context = _contexts[_i];
        for (var key in context) {
          var value = context[key];
          _this[key] = Buffer.isBuffer(value) ? value.toString(options.encoding) : value == null ? value : JSON.parse(JSON.stringify(value));
        }
      }
      return _this;
    }
    _inherits(CsvError, _Error);
    return _createClass(CsvError);
  }(/*#__PURE__*/_wrapNativeSuper(Error));
  var normalize_columns_array$1 = function normalize_columns_array(columns) {
    var normalizedColumns = [];
    for (var i = 0, l = columns.length; i < l; i++) {
      var column = columns[i];
      if (column === undefined || column === null || column === false) {
        normalizedColumns[i] = {
          disabled: true
        };
      } else if (typeof column === 'string') {
        normalizedColumns[i] = {
          name: column
        };
      } else if (is_object$3(column)) {
        if (typeof column.name !== 'string') {
          throw new CsvError$3('CSV_OPTION_COLUMNS_MISSING_NAME', ['Option columns missing name:', "property \"name\" is required at position ".concat(i), 'when column is an object literal']);
        }
        normalizedColumns[i] = column;
      } else {
        throw new CsvError$3('CSV_INVALID_COLUMN_DEFINITION', ['Invalid column definition:', 'expect a string or a literal object,', "got ".concat(JSON.stringify(column), " at position ").concat(i)]);
      }
    }
    return normalizedColumns;
  };
  var ResizeableBuffer$1 = /*#__PURE__*/function () {
    function ResizeableBuffer() {
      var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;
      _classCallCheck(this, ResizeableBuffer);
      this.size = size;
      this.length = 0;
      this.buf = Buffer.allocUnsafe(size);
    }
    return _createClass(ResizeableBuffer, [{
      key: "prepend",
      value: function prepend(val) {
        if (Buffer.isBuffer(val)) {
          var length = this.length + val.length;
          if (length >= this.size) {
            this.resize();
            if (length >= this.size) {
              throw Error('INVALID_BUFFER_STATE');
            }
          }
          var buf = this.buf;
          this.buf = Buffer.allocUnsafe(this.size);
          val.copy(this.buf, 0);
          buf.copy(this.buf, val.length);
          this.length += val.length;
        } else {
          var _length = this.length++;
          if (_length === this.size) {
            this.resize();
          }
          var _buf = this.clone();
          this.buf[0] = val;
          _buf.copy(this.buf, 1, 0, _length);
        }
      }
    }, {
      key: "append",
      value: function append(val) {
        var length = this.length++;
        if (length === this.size) {
          this.resize();
        }
        this.buf[length] = val;
      }
    }, {
      key: "clone",
      value: function clone() {
        return Buffer.from(this.buf.slice(0, this.length));
      }
    }, {
      key: "resize",
      value: function resize() {
        var length = this.length;
        this.size = this.size * 2;
        var buf = Buffer.allocUnsafe(this.size);
        this.buf.copy(buf, 0, 0, length);
        this.buf = buf;
      }
    }, {
      key: "toString",
      value: function toString(encoding) {
        if (encoding) {
          return this.buf.slice(0, this.length).toString(encoding);
        } else {
          return Uint8Array.prototype.slice.call(this.buf.slice(0, this.length));
        }
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return this.toString('utf8');
      }
    }, {
      key: "reset",
      value: function reset() {
        this.length = 0;
      }
    }]);
  }(); // white space characters
  // https://en.wikipedia.org/wiki/Whitespace_character
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Character_Classes#Types
  // \f\n\r\t\v\u00a0\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff
  var np$1 = 12;
  var cr$1$1 = 13; // `\r`, carriage return, 0x0D in hexadécimal, 13 in decimal
  var nl$1$1 = 10; // `\n`, newline, 0x0A in hexadecimal, 10 in decimal
  var space$1 = 32;
  var tab$1 = 9;
  var init_state$1 = function init_state(options) {
    return {
      bomSkipped: false,
      bufBytesStart: 0,
      castField: options.cast_function,
      commenting: false,
      // Current error encountered by a record
      error: undefined,
      enabled: options.from_line === 1,
      escaping: false,
      escapeIsQuote: Buffer.isBuffer(options.escape) && Buffer.isBuffer(options.quote) && Buffer.compare(options.escape, options.quote) === 0,
      // columns can be `false`, `true`, `Array`
      expectedRecordLength: Array.isArray(options.columns) ? options.columns.length : undefined,
      field: new ResizeableBuffer$1(20),
      firstLineToHeaders: options.cast_first_line_to_header,
      needMoreDataSize: Math.max.apply(Math, [
      // Skip if the remaining buffer smaller than comment
      options.comment !== null ? options.comment.length : 0].concat(_toConsumableArray(options.delimiter.map(function (delimiter) {
        return delimiter.length;
      })), [
      // Skip if the remaining buffer can be escape sequence
      options.quote !== null ? options.quote.length : 0])),
      previousBuf: undefined,
      quoting: false,
      stop: false,
      rawBuffer: new ResizeableBuffer$1(100),
      record: [],
      recordHasError: false,
      record_length: 0,
      recordDelimiterMaxLength: options.record_delimiter.length === 0 ? 0 : Math.max.apply(Math, _toConsumableArray(options.record_delimiter.map(function (v) {
        return v.length;
      }))),
      trimChars: [Buffer.from(' ', options.encoding)[0], Buffer.from('\t', options.encoding)[0]],
      wasQuoting: false,
      wasRowDelimiter: false,
      timchars: [Buffer.from(Buffer.from([cr$1$1], 'utf8').toString(), options.encoding), Buffer.from(Buffer.from([nl$1$1], 'utf8').toString(), options.encoding), Buffer.from(Buffer.from([np$1], 'utf8').toString(), options.encoding), Buffer.from(Buffer.from([space$1], 'utf8').toString(), options.encoding), Buffer.from(Buffer.from([tab$1], 'utf8').toString(), options.encoding)]
    };
  };
  var underscore$3 = function underscore(str) {
    return str.replace(/([A-Z])/g, function (_, match) {
      return '_' + match.toLowerCase();
    });
  };
  var normalize_options$3 = function normalize_options(opts) {
    var options = {};
    // Merge with user options
    for (var opt in opts) {
      options[underscore$3(opt)] = opts[opt];
    }
    // Normalize option `encoding`
    // Note: defined first because other options depends on it
    // to convert chars/strings into buffers.
    if (options.encoding === undefined || options.encoding === true) {
      options.encoding = 'utf8';
    } else if (options.encoding === null || options.encoding === false) {
      options.encoding = null;
    } else if (typeof options.encoding !== 'string' && options.encoding !== null) {
      throw new CsvError$3('CSV_INVALID_OPTION_ENCODING', ['Invalid option encoding:', 'encoding must be a string or null to return a buffer,', "got ".concat(JSON.stringify(options.encoding))], options);
    }
    // Normalize option `bom`
    if (options.bom === undefined || options.bom === null || options.bom === false) {
      options.bom = false;
    } else if (options.bom !== true) {
      throw new CsvError$3('CSV_INVALID_OPTION_BOM', ['Invalid option bom:', 'bom must be true,', "got ".concat(JSON.stringify(options.bom))], options);
    }
    // Normalize option `cast`
    options.cast_function = null;
    if (options.cast === undefined || options.cast === null || options.cast === false || options.cast === '') {
      options.cast = undefined;
    } else if (typeof options.cast === 'function') {
      options.cast_function = options.cast;
      options.cast = true;
    } else if (options.cast !== true) {
      throw new CsvError$3('CSV_INVALID_OPTION_CAST', ['Invalid option cast:', 'cast must be true or a function,', "got ".concat(JSON.stringify(options.cast))], options);
    }
    // Normalize option `cast_date`
    if (options.cast_date === undefined || options.cast_date === null || options.cast_date === false || options.cast_date === '') {
      options.cast_date = false;
    } else if (options.cast_date === true) {
      options.cast_date = function (value) {
        var date = Date.parse(value);
        return !isNaN(date) ? new Date(date) : value;
      };
    } else if (typeof options.cast_date !== 'function') {
      throw new CsvError$3('CSV_INVALID_OPTION_CAST_DATE', ['Invalid option cast_date:', 'cast_date must be true or a function,', "got ".concat(JSON.stringify(options.cast_date))], options);
    }
    // Normalize option `columns`
    options.cast_first_line_to_header = null;
    if (options.columns === true) {
      // Fields in the first line are converted as-is to columns
      options.cast_first_line_to_header = undefined;
    } else if (typeof options.columns === 'function') {
      options.cast_first_line_to_header = options.columns;
      options.columns = true;
    } else if (Array.isArray(options.columns)) {
      options.columns = normalize_columns_array$1(options.columns);
    } else if (options.columns === undefined || options.columns === null || options.columns === false) {
      options.columns = false;
    } else {
      throw new CsvError$3('CSV_INVALID_OPTION_COLUMNS', ['Invalid option columns:', 'expect an array, a function or true,', "got ".concat(JSON.stringify(options.columns))], options);
    }
    // Normalize option `group_columns_by_name`
    if (options.group_columns_by_name === undefined || options.group_columns_by_name === null || options.group_columns_by_name === false) {
      options.group_columns_by_name = false;
    } else if (options.group_columns_by_name !== true) {
      throw new CsvError$3('CSV_INVALID_OPTION_GROUP_COLUMNS_BY_NAME', ['Invalid option group_columns_by_name:', 'expect an boolean,', "got ".concat(JSON.stringify(options.group_columns_by_name))], options);
    } else if (options.columns === false) {
      throw new CsvError$3('CSV_INVALID_OPTION_GROUP_COLUMNS_BY_NAME', ['Invalid option group_columns_by_name:', 'the `columns` mode must be activated.'], options);
    }
    // Normalize option `comment`
    if (options.comment === undefined || options.comment === null || options.comment === false || options.comment === '') {
      options.comment = null;
    } else {
      if (typeof options.comment === 'string') {
        options.comment = Buffer.from(options.comment, options.encoding);
      }
      if (!Buffer.isBuffer(options.comment)) {
        throw new CsvError$3('CSV_INVALID_OPTION_COMMENT', ['Invalid option comment:', 'comment must be a buffer or a string,', "got ".concat(JSON.stringify(options.comment))], options);
      }
    }
    // Normalize option `comment_no_infix`
    if (options.comment_no_infix === undefined || options.comment_no_infix === null || options.comment_no_infix === false) {
      options.comment_no_infix = false;
    } else if (options.comment_no_infix !== true) {
      throw new CsvError$3('CSV_INVALID_OPTION_COMMENT', ['Invalid option comment_no_infix:', 'value must be a boolean,', "got ".concat(JSON.stringify(options.comment_no_infix))], options);
    }
    // Normalize option `delimiter`
    var delimiter_json = JSON.stringify(options.delimiter);
    if (!Array.isArray(options.delimiter)) options.delimiter = [options.delimiter];
    if (options.delimiter.length === 0) {
      throw new CsvError$3('CSV_INVALID_OPTION_DELIMITER', ['Invalid option delimiter:', 'delimiter must be a non empty string or buffer or array of string|buffer,', "got ".concat(delimiter_json)], options);
    }
    options.delimiter = options.delimiter.map(function (delimiter) {
      if (delimiter === undefined || delimiter === null || delimiter === false) {
        return Buffer.from(',', options.encoding);
      }
      if (typeof delimiter === 'string') {
        delimiter = Buffer.from(delimiter, options.encoding);
      }
      if (!Buffer.isBuffer(delimiter) || delimiter.length === 0) {
        throw new CsvError$3('CSV_INVALID_OPTION_DELIMITER', ['Invalid option delimiter:', 'delimiter must be a non empty string or buffer or array of string|buffer,', "got ".concat(delimiter_json)], options);
      }
      return delimiter;
    });
    // Normalize option `escape`
    if (options.escape === undefined || options.escape === true) {
      options.escape = Buffer.from('"', options.encoding);
    } else if (typeof options.escape === 'string') {
      options.escape = Buffer.from(options.escape, options.encoding);
    } else if (options.escape === null || options.escape === false) {
      options.escape = null;
    }
    if (options.escape !== null) {
      if (!Buffer.isBuffer(options.escape)) {
        throw new Error("Invalid Option: escape must be a buffer, a string or a boolean, got ".concat(JSON.stringify(options.escape)));
      }
    }
    // Normalize option `from`
    if (options.from === undefined || options.from === null) {
      options.from = 1;
    } else {
      if (typeof options.from === 'string' && /\d+/.test(options.from)) {
        options.from = parseInt(options.from);
      }
      if (Number.isInteger(options.from)) {
        if (options.from < 0) {
          throw new Error("Invalid Option: from must be a positive integer, got ".concat(JSON.stringify(opts.from)));
        }
      } else {
        throw new Error("Invalid Option: from must be an integer, got ".concat(JSON.stringify(options.from)));
      }
    }
    // Normalize option `from_line`
    if (options.from_line === undefined || options.from_line === null) {
      options.from_line = 1;
    } else {
      if (typeof options.from_line === 'string' && /\d+/.test(options.from_line)) {
        options.from_line = parseInt(options.from_line);
      }
      if (Number.isInteger(options.from_line)) {
        if (options.from_line <= 0) {
          throw new Error("Invalid Option: from_line must be a positive integer greater than 0, got ".concat(JSON.stringify(opts.from_line)));
        }
      } else {
        throw new Error("Invalid Option: from_line must be an integer, got ".concat(JSON.stringify(opts.from_line)));
      }
    }
    // Normalize options `ignore_last_delimiters`
    if (options.ignore_last_delimiters === undefined || options.ignore_last_delimiters === null) {
      options.ignore_last_delimiters = false;
    } else if (typeof options.ignore_last_delimiters === 'number') {
      options.ignore_last_delimiters = Math.floor(options.ignore_last_delimiters);
      if (options.ignore_last_delimiters === 0) {
        options.ignore_last_delimiters = false;
      }
    } else if (typeof options.ignore_last_delimiters !== 'boolean') {
      throw new CsvError$3('CSV_INVALID_OPTION_IGNORE_LAST_DELIMITERS', ['Invalid option `ignore_last_delimiters`:', 'the value must be a boolean value or an integer,', "got ".concat(JSON.stringify(options.ignore_last_delimiters))], options);
    }
    if (options.ignore_last_delimiters === true && options.columns === false) {
      throw new CsvError$3('CSV_IGNORE_LAST_DELIMITERS_REQUIRES_COLUMNS', ['The option `ignore_last_delimiters`', 'requires the activation of the `columns` option'], options);
    }
    // Normalize option `info`
    if (options.info === undefined || options.info === null || options.info === false) {
      options.info = false;
    } else if (options.info !== true) {
      throw new Error("Invalid Option: info must be true, got ".concat(JSON.stringify(options.info)));
    }
    // Normalize option `max_record_size`
    if (options.max_record_size === undefined || options.max_record_size === null || options.max_record_size === false) {
      options.max_record_size = 0;
    } else if (Number.isInteger(options.max_record_size) && options.max_record_size >= 0) ;else if (typeof options.max_record_size === 'string' && /\d+/.test(options.max_record_size)) {
      options.max_record_size = parseInt(options.max_record_size);
    } else {
      throw new Error("Invalid Option: max_record_size must be a positive integer, got ".concat(JSON.stringify(options.max_record_size)));
    }
    // Normalize option `objname`
    if (options.objname === undefined || options.objname === null || options.objname === false) {
      options.objname = undefined;
    } else if (Buffer.isBuffer(options.objname)) {
      if (options.objname.length === 0) {
        throw new Error("Invalid Option: objname must be a non empty buffer");
      }
      if (options.encoding === null) ;else {
        options.objname = options.objname.toString(options.encoding);
      }
    } else if (typeof options.objname === 'string') {
      if (options.objname.length === 0) {
        throw new Error("Invalid Option: objname must be a non empty string");
      }
      // Great, nothing to do
    } else if (typeof options.objname === 'number') ;else {
      throw new Error("Invalid Option: objname must be a string or a buffer, got ".concat(options.objname));
    }
    if (options.objname !== undefined) {
      if (typeof options.objname === 'number') {
        if (options.columns !== false) {
          throw Error('Invalid Option: objname index cannot be combined with columns or be defined as a field');
        }
      } else {
        // A string or a buffer
        if (options.columns === false) {
          throw Error('Invalid Option: objname field must be combined with columns or be defined as an index');
        }
      }
    }
    // Normalize option `on_record`
    if (options.on_record === undefined || options.on_record === null) {
      options.on_record = undefined;
    } else if (typeof options.on_record !== 'function') {
      throw new CsvError$3('CSV_INVALID_OPTION_ON_RECORD', ['Invalid option `on_record`:', 'expect a function,', "got ".concat(JSON.stringify(options.on_record))], options);
    }
    // Normalize option `on_skip`
    // options.on_skip ??= (err, chunk) => {
    //   this.emit('skip', err, chunk);
    // };
    if (options.on_skip !== undefined && options.on_skip !== null && typeof options.on_skip !== 'function') {
      throw new Error("Invalid Option: on_skip must be a function, got ".concat(JSON.stringify(options.on_skip)));
    }
    // Normalize option `quote`
    if (options.quote === null || options.quote === false || options.quote === '') {
      options.quote = null;
    } else {
      if (options.quote === undefined || options.quote === true) {
        options.quote = Buffer.from('"', options.encoding);
      } else if (typeof options.quote === 'string') {
        options.quote = Buffer.from(options.quote, options.encoding);
      }
      if (!Buffer.isBuffer(options.quote)) {
        throw new Error("Invalid Option: quote must be a buffer or a string, got ".concat(JSON.stringify(options.quote)));
      }
    }
    // Normalize option `raw`
    if (options.raw === undefined || options.raw === null || options.raw === false) {
      options.raw = false;
    } else if (options.raw !== true) {
      throw new Error("Invalid Option: raw must be true, got ".concat(JSON.stringify(options.raw)));
    }
    // Normalize option `record_delimiter`
    if (options.record_delimiter === undefined) {
      options.record_delimiter = [];
    } else if (typeof options.record_delimiter === 'string' || Buffer.isBuffer(options.record_delimiter)) {
      if (options.record_delimiter.length === 0) {
        throw new CsvError$3('CSV_INVALID_OPTION_RECORD_DELIMITER', ['Invalid option `record_delimiter`:', 'value must be a non empty string or buffer,', "got ".concat(JSON.stringify(options.record_delimiter))], options);
      }
      options.record_delimiter = [options.record_delimiter];
    } else if (!Array.isArray(options.record_delimiter)) {
      throw new CsvError$3('CSV_INVALID_OPTION_RECORD_DELIMITER', ['Invalid option `record_delimiter`:', 'value must be a string, a buffer or array of string|buffer,', "got ".concat(JSON.stringify(options.record_delimiter))], options);
    }
    options.record_delimiter = options.record_delimiter.map(function (rd, i) {
      if (typeof rd !== 'string' && !Buffer.isBuffer(rd)) {
        throw new CsvError$3('CSV_INVALID_OPTION_RECORD_DELIMITER', ['Invalid option `record_delimiter`:', 'value must be a string, a buffer or array of string|buffer', "at index ".concat(i, ","), "got ".concat(JSON.stringify(rd))], options);
      } else if (rd.length === 0) {
        throw new CsvError$3('CSV_INVALID_OPTION_RECORD_DELIMITER', ['Invalid option `record_delimiter`:', 'value must be a non empty string or buffer', "at index ".concat(i, ","), "got ".concat(JSON.stringify(rd))], options);
      }
      if (typeof rd === 'string') {
        rd = Buffer.from(rd, options.encoding);
      }
      return rd;
    });
    // Normalize option `relax_column_count`
    if (typeof options.relax_column_count === 'boolean') ;else if (options.relax_column_count === undefined || options.relax_column_count === null) {
      options.relax_column_count = false;
    } else {
      throw new Error("Invalid Option: relax_column_count must be a boolean, got ".concat(JSON.stringify(options.relax_column_count)));
    }
    if (typeof options.relax_column_count_less === 'boolean') ;else if (options.relax_column_count_less === undefined || options.relax_column_count_less === null) {
      options.relax_column_count_less = false;
    } else {
      throw new Error("Invalid Option: relax_column_count_less must be a boolean, got ".concat(JSON.stringify(options.relax_column_count_less)));
    }
    if (typeof options.relax_column_count_more === 'boolean') ;else if (options.relax_column_count_more === undefined || options.relax_column_count_more === null) {
      options.relax_column_count_more = false;
    } else {
      throw new Error("Invalid Option: relax_column_count_more must be a boolean, got ".concat(JSON.stringify(options.relax_column_count_more)));
    }
    // Normalize option `relax_quotes`
    if (typeof options.relax_quotes === 'boolean') ;else if (options.relax_quotes === undefined || options.relax_quotes === null) {
      options.relax_quotes = false;
    } else {
      throw new Error("Invalid Option: relax_quotes must be a boolean, got ".concat(JSON.stringify(options.relax_quotes)));
    }
    // Normalize option `skip_empty_lines`
    if (typeof options.skip_empty_lines === 'boolean') ;else if (options.skip_empty_lines === undefined || options.skip_empty_lines === null) {
      options.skip_empty_lines = false;
    } else {
      throw new Error("Invalid Option: skip_empty_lines must be a boolean, got ".concat(JSON.stringify(options.skip_empty_lines)));
    }
    // Normalize option `skip_records_with_empty_values`
    if (typeof options.skip_records_with_empty_values === 'boolean') ;else if (options.skip_records_with_empty_values === undefined || options.skip_records_with_empty_values === null) {
      options.skip_records_with_empty_values = false;
    } else {
      throw new Error("Invalid Option: skip_records_with_empty_values must be a boolean, got ".concat(JSON.stringify(options.skip_records_with_empty_values)));
    }
    // Normalize option `skip_records_with_error`
    if (typeof options.skip_records_with_error === 'boolean') ;else if (options.skip_records_with_error === undefined || options.skip_records_with_error === null) {
      options.skip_records_with_error = false;
    } else {
      throw new Error("Invalid Option: skip_records_with_error must be a boolean, got ".concat(JSON.stringify(options.skip_records_with_error)));
    }
    // Normalize option `rtrim`
    if (options.rtrim === undefined || options.rtrim === null || options.rtrim === false) {
      options.rtrim = false;
    } else if (options.rtrim !== true) {
      throw new Error("Invalid Option: rtrim must be a boolean, got ".concat(JSON.stringify(options.rtrim)));
    }
    // Normalize option `ltrim`
    if (options.ltrim === undefined || options.ltrim === null || options.ltrim === false) {
      options.ltrim = false;
    } else if (options.ltrim !== true) {
      throw new Error("Invalid Option: ltrim must be a boolean, got ".concat(JSON.stringify(options.ltrim)));
    }
    // Normalize option `trim`
    if (options.trim === undefined || options.trim === null || options.trim === false) {
      options.trim = false;
    } else if (options.trim !== true) {
      throw new Error("Invalid Option: trim must be a boolean, got ".concat(JSON.stringify(options.trim)));
    }
    // Normalize options `trim`, `ltrim` and `rtrim`
    if (options.trim === true && opts.ltrim !== false) {
      options.ltrim = true;
    } else if (options.ltrim !== true) {
      options.ltrim = false;
    }
    if (options.trim === true && opts.rtrim !== false) {
      options.rtrim = true;
    } else if (options.rtrim !== true) {
      options.rtrim = false;
    }
    // Normalize option `to`
    if (options.to === undefined || options.to === null) {
      options.to = -1;
    } else {
      if (typeof options.to === 'string' && /\d+/.test(options.to)) {
        options.to = parseInt(options.to);
      }
      if (Number.isInteger(options.to)) {
        if (options.to <= 0) {
          throw new Error("Invalid Option: to must be a positive integer greater than 0, got ".concat(JSON.stringify(opts.to)));
        }
      } else {
        throw new Error("Invalid Option: to must be an integer, got ".concat(JSON.stringify(opts.to)));
      }
    }
    // Normalize option `to_line`
    if (options.to_line === undefined || options.to_line === null) {
      options.to_line = -1;
    } else {
      if (typeof options.to_line === 'string' && /\d+/.test(options.to_line)) {
        options.to_line = parseInt(options.to_line);
      }
      if (Number.isInteger(options.to_line)) {
        if (options.to_line <= 0) {
          throw new Error("Invalid Option: to_line must be a positive integer greater than 0, got ".concat(JSON.stringify(opts.to_line)));
        }
      } else {
        throw new Error("Invalid Option: to_line must be an integer, got ".concat(JSON.stringify(opts.to_line)));
      }
    }
    return options;
  };
  var isRecordEmpty$1 = function isRecordEmpty(record) {
    return record.every(function (field) {
      return field == null || field.toString && field.toString().trim() === '';
    });
  };
  var cr$2 = 13; // `\r`, carriage return, 0x0D in hexadécimal, 13 in decimal
  var nl$2 = 10; // `\n`, newline, 0x0A in hexadecimal, 10 in decimal

  var boms$1 = {
    // Note, the following are equals:
    // Buffer.from("\ufeff")
    // Buffer.from([239, 187, 191])
    // Buffer.from('EFBBBF', 'hex')
    'utf8': Buffer.from([239, 187, 191]),
    // Note, the following are equals:
    // Buffer.from "\ufeff", 'utf16le
    // Buffer.from([255, 254])
    'utf16le': Buffer.from([255, 254])
  };
  var transform$1 = function transform() {
    var original_options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var info = {
      bytes: 0,
      comment_lines: 0,
      empty_lines: 0,
      invalid_field_length: 0,
      lines: 1,
      records: 0
    };
    var options = normalize_options$3(original_options);
    return {
      info: info,
      original_options: original_options,
      options: options,
      state: init_state$1(options),
      __needMoreData: function __needMoreData(i, bufLen, end) {
        if (end) return false;
        var _this$options = this.options,
          encoding = _this$options.encoding,
          escape = _this$options.escape,
          quote = _this$options.quote;
        var _this$state = this.state,
          quoting = _this$state.quoting,
          needMoreDataSize = _this$state.needMoreDataSize,
          recordDelimiterMaxLength = _this$state.recordDelimiterMaxLength;
        var numOfCharLeft = bufLen - i - 1;
        var requiredLength = Math.max(needMoreDataSize,
        // Skip if the remaining buffer smaller than record delimiter
        // If "record_delimiter" is yet to be discovered:
        // 1. It is equals to `[]` and "recordDelimiterMaxLength" equals `0`
        // 2. We set the length to windows line ending in the current encoding
        // Note, that encoding is known from user or bom discovery at that point
        // recordDelimiterMaxLength,
        recordDelimiterMaxLength === 0 ? Buffer.from('\r\n', encoding).length : recordDelimiterMaxLength,
        // Skip if remaining buffer can be an escaped quote
        quoting ? (escape === null ? 0 : escape.length) + quote.length : 0,
        // Skip if remaining buffer can be record delimiter following the closing quote
        quoting ? quote.length + recordDelimiterMaxLength : 0);
        return numOfCharLeft < requiredLength;
      },
      // Central parser implementation
      parse: function parse(nextBuf, end, push, close) {
        var _this2 = this;
        var _this$options2 = this.options,
          bom = _this$options2.bom,
          comment_no_infix = _this$options2.comment_no_infix,
          encoding = _this$options2.encoding,
          from_line = _this$options2.from_line,
          ltrim = _this$options2.ltrim,
          max_record_size = _this$options2.max_record_size,
          raw = _this$options2.raw,
          relax_quotes = _this$options2.relax_quotes,
          rtrim = _this$options2.rtrim,
          skip_empty_lines = _this$options2.skip_empty_lines,
          to = _this$options2.to,
          to_line = _this$options2.to_line;
        var _this$options3 = this.options,
          comment = _this$options3.comment,
          escape = _this$options3.escape,
          quote = _this$options3.quote,
          record_delimiter = _this$options3.record_delimiter;
        var _this$state2 = this.state,
          bomSkipped = _this$state2.bomSkipped,
          previousBuf = _this$state2.previousBuf,
          rawBuffer = _this$state2.rawBuffer,
          escapeIsQuote = _this$state2.escapeIsQuote;
        var buf;
        if (previousBuf === undefined) {
          if (nextBuf === undefined) {
            // Handle empty string
            close();
            return;
          } else {
            buf = nextBuf;
          }
        } else if (previousBuf !== undefined && nextBuf === undefined) {
          buf = previousBuf;
        } else {
          buf = Buffer.concat([previousBuf, nextBuf]);
        }
        // Handle UTF BOM
        if (bomSkipped === false) {
          if (bom === false) {
            this.state.bomSkipped = true;
          } else if (buf.length < 3) {
            // No enough data
            if (end === false) {
              // Wait for more data
              this.state.previousBuf = buf;
              return;
            }
          } else {
            for (var _encoding in boms$1) {
              if (boms$1[_encoding].compare(buf, 0, boms$1[_encoding].length) === 0) {
                // Skip BOM
                var bomLength = boms$1[_encoding].length;
                this.state.bufBytesStart += bomLength;
                buf = buf.slice(bomLength);
                // Renormalize original options with the new encoding
                this.options = normalize_options$3(_objectSpread2(_objectSpread2({}, this.original_options), {}, {
                  encoding: _encoding
                }));
                // Options will re-evaluate the Buffer with the new encoding
                var _this$options4 = this.options;
                comment = _this$options4.comment;
                escape = _this$options4.escape;
                quote = _this$options4.quote;
                break;
              }
            }
            this.state.bomSkipped = true;
          }
        }
        var bufLen = buf.length;
        var pos;
        for (pos = 0; pos < bufLen; pos++) {
          // Ensure we get enough space to look ahead
          // There should be a way to move this out of the loop
          if (this.__needMoreData(pos, bufLen, end)) {
            break;
          }
          if (this.state.wasRowDelimiter === true) {
            this.info.lines++;
            this.state.wasRowDelimiter = false;
          }
          if (to_line !== -1 && this.info.lines > to_line) {
            this.state.stop = true;
            close();
            return;
          }
          // Auto discovery of record_delimiter, unix, mac and windows supported
          if (this.state.quoting === false && record_delimiter.length === 0) {
            var record_delimiterCount = this.__autoDiscoverRecordDelimiter(buf, pos);
            if (record_delimiterCount) {
              record_delimiter = this.options.record_delimiter;
            }
          }
          var chr = buf[pos];
          if (raw === true) {
            rawBuffer.append(chr);
          }
          if ((chr === cr$2 || chr === nl$2) && this.state.wasRowDelimiter === false) {
            this.state.wasRowDelimiter = true;
          }
          // Previous char was a valid escape char
          // treat the current char as a regular char
          if (this.state.escaping === true) {
            this.state.escaping = false;
          } else {
            // Escape is only active inside quoted fields
            // We are quoting, the char is an escape chr and there is a chr to escape
            // if(escape !== null && this.state.quoting === true && chr === escape && pos + 1 < bufLen){
            if (escape !== null && this.state.quoting === true && this.__isEscape(buf, pos, chr) && pos + escape.length < bufLen) {
              if (escapeIsQuote) {
                if (this.__isQuote(buf, pos + escape.length)) {
                  this.state.escaping = true;
                  pos += escape.length - 1;
                  continue;
                }
              } else {
                this.state.escaping = true;
                pos += escape.length - 1;
                continue;
              }
            }
            // Not currently escaping and chr is a quote
            // TODO: need to compare bytes instead of single char
            if (this.state.commenting === false && this.__isQuote(buf, pos)) {
              if (this.state.quoting === true) {
                var nextChr = buf[pos + quote.length];
                var isNextChrTrimable = rtrim && this.__isCharTrimable(buf, pos + quote.length);
                var isNextChrComment = comment !== null && this.__compareBytes(comment, buf, pos + quote.length, nextChr);
                var isNextChrDelimiter = this.__isDelimiter(buf, pos + quote.length, nextChr);
                var isNextChrRecordDelimiter = record_delimiter.length === 0 ? this.__autoDiscoverRecordDelimiter(buf, pos + quote.length) : this.__isRecordDelimiter(nextChr, buf, pos + quote.length);
                // Escape a quote
                // Treat next char as a regular character
                if (escape !== null && this.__isEscape(buf, pos, chr) && this.__isQuote(buf, pos + escape.length)) {
                  pos += escape.length - 1;
                } else if (!nextChr || isNextChrDelimiter || isNextChrRecordDelimiter || isNextChrComment || isNextChrTrimable) {
                  this.state.quoting = false;
                  this.state.wasQuoting = true;
                  pos += quote.length - 1;
                  continue;
                } else if (relax_quotes === false) {
                  var err = this.__error(new CsvError$3('CSV_INVALID_CLOSING_QUOTE', ['Invalid Closing Quote:', "got \"".concat(String.fromCharCode(nextChr), "\""), "at line ".concat(this.info.lines), 'instead of delimiter, record delimiter, trimable character', '(if activated) or comment'], this.options, this.__infoField()));
                  if (err !== undefined) return err;
                } else {
                  this.state.quoting = false;
                  this.state.wasQuoting = true;
                  this.state.field.prepend(quote);
                  pos += quote.length - 1;
                }
              } else {
                if (this.state.field.length !== 0) {
                  // In relax_quotes mode, treat opening quote preceded by chrs as regular
                  if (relax_quotes === false) {
                    var _info = this.__infoField();
                    var _bom = Object.keys(boms$1).map(function (b) {
                      return boms$1[b].equals(_this2.state.field.toString()) ? b : false;
                    }).filter(Boolean)[0];
                    var _err = this.__error(new CsvError$3('INVALID_OPENING_QUOTE', ['Invalid Opening Quote:', "a quote is found on field ".concat(JSON.stringify(_info.column), " at line ").concat(_info.lines, ", value is ").concat(JSON.stringify(this.state.field.toString(encoding))), _bom ? "(".concat(_bom, " bom)") : undefined], this.options, _info, {
                      field: this.state.field
                    }));
                    if (_err !== undefined) return _err;
                  }
                } else {
                  this.state.quoting = true;
                  pos += quote.length - 1;
                  continue;
                }
              }
            }
            if (this.state.quoting === false) {
              var recordDelimiterLength = this.__isRecordDelimiter(chr, buf, pos);
              if (recordDelimiterLength !== 0) {
                // Do not emit comments which take a full line
                var skipCommentLine = this.state.commenting && this.state.wasQuoting === false && this.state.record.length === 0 && this.state.field.length === 0;
                if (skipCommentLine) {
                  this.info.comment_lines++;
                  // Skip full comment line
                } else {
                  // Activate records emition if above from_line
                  if (this.state.enabled === false && this.info.lines + (this.state.wasRowDelimiter === true ? 1 : 0) >= from_line) {
                    this.state.enabled = true;
                    this.__resetField();
                    this.__resetRecord();
                    pos += recordDelimiterLength - 1;
                    continue;
                  }
                  // Skip if line is empty and skip_empty_lines activated
                  if (skip_empty_lines === true && this.state.wasQuoting === false && this.state.record.length === 0 && this.state.field.length === 0) {
                    this.info.empty_lines++;
                    pos += recordDelimiterLength - 1;
                    continue;
                  }
                  this.info.bytes = this.state.bufBytesStart + pos;
                  var errField = this.__onField();
                  if (errField !== undefined) return errField;
                  this.info.bytes = this.state.bufBytesStart + pos + recordDelimiterLength;
                  var errRecord = this.__onRecord(push);
                  if (errRecord !== undefined) return errRecord;
                  if (to !== -1 && this.info.records >= to) {
                    this.state.stop = true;
                    close();
                    return;
                  }
                }
                this.state.commenting = false;
                pos += recordDelimiterLength - 1;
                continue;
              }
              if (this.state.commenting) {
                continue;
              }
              if (comment !== null && (comment_no_infix === false || this.state.record.length === 0 && this.state.field.length === 0)) {
                var commentCount = this.__compareBytes(comment, buf, pos, chr);
                if (commentCount !== 0) {
                  this.state.commenting = true;
                  continue;
                }
              }
              var delimiterLength = this.__isDelimiter(buf, pos, chr);
              if (delimiterLength !== 0) {
                this.info.bytes = this.state.bufBytesStart + pos;
                var _errField = this.__onField();
                if (_errField !== undefined) return _errField;
                pos += delimiterLength - 1;
                continue;
              }
            }
          }
          if (this.state.commenting === false) {
            if (max_record_size !== 0 && this.state.record_length + this.state.field.length > max_record_size) {
              return this.__error(new CsvError$3('CSV_MAX_RECORD_SIZE', ['Max Record Size:', 'record exceed the maximum number of tolerated bytes', "of ".concat(max_record_size), "at line ".concat(this.info.lines)], this.options, this.__infoField()));
            }
          }
          var lappend = ltrim === false || this.state.quoting === true || this.state.field.length !== 0 || !this.__isCharTrimable(buf, pos);
          // rtrim in non quoting is handle in __onField
          var rappend = rtrim === false || this.state.wasQuoting === false;
          if (lappend === true && rappend === true) {
            this.state.field.append(chr);
          } else if (rtrim === true && !this.__isCharTrimable(buf, pos)) {
            return this.__error(new CsvError$3('CSV_NON_TRIMABLE_CHAR_AFTER_CLOSING_QUOTE', ['Invalid Closing Quote:', 'found non trimable byte after quote', "at line ".concat(this.info.lines)], this.options, this.__infoField()));
          } else {
            if (lappend === false) {
              pos += this.__isCharTrimable(buf, pos) - 1;
            }
            continue;
          }
        }
        if (end === true) {
          // Ensure we are not ending in a quoting state
          if (this.state.quoting === true) {
            var _err2 = this.__error(new CsvError$3('CSV_QUOTE_NOT_CLOSED', ['Quote Not Closed:', "the parsing is finished with an opening quote at line ".concat(this.info.lines)], this.options, this.__infoField()));
            if (_err2 !== undefined) return _err2;
          } else {
            // Skip last line if it has no characters
            if (this.state.wasQuoting === true || this.state.record.length !== 0 || this.state.field.length !== 0) {
              this.info.bytes = this.state.bufBytesStart + pos;
              var _errField2 = this.__onField();
              if (_errField2 !== undefined) return _errField2;
              var _errRecord = this.__onRecord(push);
              if (_errRecord !== undefined) return _errRecord;
            } else if (this.state.wasRowDelimiter === true) {
              this.info.empty_lines++;
            } else if (this.state.commenting === true) {
              this.info.comment_lines++;
            }
          }
        } else {
          this.state.bufBytesStart += pos;
          this.state.previousBuf = buf.slice(pos);
        }
        if (this.state.wasRowDelimiter === true) {
          this.info.lines++;
          this.state.wasRowDelimiter = false;
        }
      },
      __onRecord: function __onRecord(push) {
        var _this$options5 = this.options,
          columns = _this$options5.columns,
          group_columns_by_name = _this$options5.group_columns_by_name,
          encoding = _this$options5.encoding,
          info = _this$options5.info,
          from = _this$options5.from,
          relax_column_count = _this$options5.relax_column_count,
          relax_column_count_less = _this$options5.relax_column_count_less,
          relax_column_count_more = _this$options5.relax_column_count_more,
          raw = _this$options5.raw,
          skip_records_with_empty_values = _this$options5.skip_records_with_empty_values;
        var _this$state3 = this.state,
          enabled = _this$state3.enabled,
          record = _this$state3.record;
        if (enabled === false) {
          return this.__resetRecord();
        }
        // Convert the first line into column names
        var recordLength = record.length;
        if (columns === true) {
          if (skip_records_with_empty_values === true && isRecordEmpty$1(record)) {
            this.__resetRecord();
            return;
          }
          return this.__firstLineToColumns(record);
        }
        if (columns === false && this.info.records === 0) {
          this.state.expectedRecordLength = recordLength;
        }
        if (recordLength !== this.state.expectedRecordLength) {
          var err = columns === false ? new CsvError$3('CSV_RECORD_INCONSISTENT_FIELDS_LENGTH', ['Invalid Record Length:', "expect ".concat(this.state.expectedRecordLength, ","), "got ".concat(recordLength, " on line ").concat(this.info.lines)], this.options, this.__infoField(), {
            record: record
          }) : new CsvError$3('CSV_RECORD_INCONSISTENT_COLUMNS', ['Invalid Record Length:', "columns length is ".concat(columns.length, ","), // rename columns
          "got ".concat(recordLength, " on line ").concat(this.info.lines)], this.options, this.__infoField(), {
            record: record
          });
          if (relax_column_count === true || relax_column_count_less === true && recordLength < this.state.expectedRecordLength || relax_column_count_more === true && recordLength > this.state.expectedRecordLength) {
            this.info.invalid_field_length++;
            this.state.error = err;
            // Error is undefined with skip_records_with_error
          } else {
            var finalErr = this.__error(err);
            if (finalErr) return finalErr;
          }
        }
        if (skip_records_with_empty_values === true && isRecordEmpty$1(record)) {
          this.__resetRecord();
          return;
        }
        if (this.state.recordHasError === true) {
          this.__resetRecord();
          this.state.recordHasError = false;
          return;
        }
        this.info.records++;
        if (from === 1 || this.info.records >= from) {
          var objname = this.options.objname;
          // With columns, records are object
          if (columns !== false) {
            var obj = {};
            // Transform record array to an object
            for (var i = 0, l = record.length; i < l; i++) {
              if (columns[i] === undefined || columns[i].disabled) continue;
              // Turn duplicate columns into an array
              if (group_columns_by_name === true && obj[columns[i].name] !== undefined) {
                if (Array.isArray(obj[columns[i].name])) {
                  obj[columns[i].name] = obj[columns[i].name].concat(record[i]);
                } else {
                  obj[columns[i].name] = [obj[columns[i].name], record[i]];
                }
              } else {
                obj[columns[i].name] = record[i];
              }
            }
            // Without objname (default)
            if (raw === true || info === true) {
              var extRecord = Object.assign({
                record: obj
              }, raw === true ? {
                raw: this.state.rawBuffer.toString(encoding)
              } : {}, info === true ? {
                info: this.__infoRecord()
              } : {});
              var _err3 = this.__push(objname === undefined ? extRecord : [obj[objname], extRecord], push);
              if (_err3) {
                return _err3;
              }
            } else {
              var _err4 = this.__push(objname === undefined ? obj : [obj[objname], obj], push);
              if (_err4) {
                return _err4;
              }
            }
            // Without columns, records are array
          } else {
            if (raw === true || info === true) {
              var _extRecord = Object.assign({
                record: record
              }, raw === true ? {
                raw: this.state.rawBuffer.toString(encoding)
              } : {}, info === true ? {
                info: this.__infoRecord()
              } : {});
              var _err5 = this.__push(objname === undefined ? _extRecord : [record[objname], _extRecord], push);
              if (_err5) {
                return _err5;
              }
            } else {
              var _err6 = this.__push(objname === undefined ? record : [record[objname], record], push);
              if (_err6) {
                return _err6;
              }
            }
          }
        }
        this.__resetRecord();
      },
      __firstLineToColumns: function __firstLineToColumns(record) {
        var firstLineToHeaders = this.state.firstLineToHeaders;
        try {
          var headers = firstLineToHeaders === undefined ? record : firstLineToHeaders.call(null, record);
          if (!Array.isArray(headers)) {
            return this.__error(new CsvError$3('CSV_INVALID_COLUMN_MAPPING', ['Invalid Column Mapping:', 'expect an array from column function,', "got ".concat(JSON.stringify(headers))], this.options, this.__infoField(), {
              headers: headers
            }));
          }
          var normalizedHeaders = normalize_columns_array$1(headers);
          this.state.expectedRecordLength = normalizedHeaders.length;
          this.options.columns = normalizedHeaders;
          this.__resetRecord();
          return;
        } catch (err) {
          return err;
        }
      },
      __resetRecord: function __resetRecord() {
        if (this.options.raw === true) {
          this.state.rawBuffer.reset();
        }
        this.state.error = undefined;
        this.state.record = [];
        this.state.record_length = 0;
      },
      __onField: function __onField() {
        var _this$options6 = this.options,
          cast = _this$options6.cast,
          encoding = _this$options6.encoding,
          rtrim = _this$options6.rtrim,
          max_record_size = _this$options6.max_record_size;
        var _this$state4 = this.state,
          enabled = _this$state4.enabled,
          wasQuoting = _this$state4.wasQuoting;
        // Short circuit for the from_line options
        if (enabled === false) {
          return this.__resetField();
        }
        var field = this.state.field.toString(encoding);
        if (rtrim === true && wasQuoting === false) {
          field = field.trimRight();
        }
        if (cast === true) {
          var _this$__cast = this.__cast(field),
            _this$__cast2 = _slicedToArray(_this$__cast, 2),
            err = _this$__cast2[0],
            f = _this$__cast2[1];
          if (err !== undefined) return err;
          field = f;
        }
        this.state.record.push(field);
        // Increment record length if record size must not exceed a limit
        if (max_record_size !== 0 && typeof field === 'string') {
          this.state.record_length += field.length;
        }
        this.__resetField();
      },
      __resetField: function __resetField() {
        this.state.field.reset();
        this.state.wasQuoting = false;
      },
      __push: function __push(record, push) {
        var on_record = this.options.on_record;
        if (on_record !== undefined) {
          var _info2 = this.__infoRecord();
          try {
            record = on_record.call(null, record, _info2);
          } catch (err) {
            return err;
          }
          if (record === undefined || record === null) {
            return;
          }
        }
        push(record);
      },
      // Return a tuple with the error and the casted value
      __cast: function __cast(field) {
        var _this$options7 = this.options,
          columns = _this$options7.columns,
          relax_column_count = _this$options7.relax_column_count;
        var isColumns = Array.isArray(columns);
        // Dont loose time calling cast
        // because the final record is an object
        // and this field can't be associated to a key present in columns
        if (isColumns === true && relax_column_count && this.options.columns.length <= this.state.record.length) {
          return [undefined, undefined];
        }
        if (this.state.castField !== null) {
          try {
            var _info3 = this.__infoField();
            return [undefined, this.state.castField.call(null, field, _info3)];
          } catch (err) {
            return [err];
          }
        }
        if (this.__isFloat(field)) {
          return [undefined, parseFloat(field)];
        } else if (this.options.cast_date !== false) {
          var _info4 = this.__infoField();
          return [undefined, this.options.cast_date.call(null, field, _info4)];
        }
        return [undefined, field];
      },
      // Helper to test if a character is a space or a line delimiter
      __isCharTrimable: function __isCharTrimable(buf, pos) {
        var _this3 = this;
        var isTrim = function isTrim(buf, pos) {
          var timchars = _this3.state.timchars;
          loop1: for (var i = 0; i < timchars.length; i++) {
            var timchar = timchars[i];
            for (var j = 0; j < timchar.length; j++) {
              if (timchar[j] !== buf[pos + j]) continue loop1;
            }
            return timchar.length;
          }
          return 0;
        };
        return isTrim(buf, pos);
      },
      // Keep it in case we implement the `cast_int` option
      // __isInt(value){
      //   // return Number.isInteger(parseInt(value))
      //   // return !isNaN( parseInt( obj ) );
      //   return /^(\-|\+)?[1-9][0-9]*$/.test(value)
      // }
      __isFloat: function __isFloat(value) {
        return value - parseFloat(value) + 1 >= 0; // Borrowed from jquery
      },
      __compareBytes: function __compareBytes(sourceBuf, targetBuf, targetPos, firstByte) {
        if (sourceBuf[0] !== firstByte) return 0;
        var sourceLength = sourceBuf.length;
        for (var i = 1; i < sourceLength; i++) {
          if (sourceBuf[i] !== targetBuf[targetPos + i]) return 0;
        }
        return sourceLength;
      },
      __isDelimiter: function __isDelimiter(buf, pos, chr) {
        var _this$options8 = this.options,
          delimiter = _this$options8.delimiter,
          ignore_last_delimiters = _this$options8.ignore_last_delimiters;
        if (ignore_last_delimiters === true && this.state.record.length === this.options.columns.length - 1) {
          return 0;
        } else if (ignore_last_delimiters !== false && typeof ignore_last_delimiters === 'number' && this.state.record.length === ignore_last_delimiters - 1) {
          return 0;
        }
        loop1: for (var i = 0; i < delimiter.length; i++) {
          var del = delimiter[i];
          if (del[0] === chr) {
            for (var j = 1; j < del.length; j++) {
              if (del[j] !== buf[pos + j]) continue loop1;
            }
            return del.length;
          }
        }
        return 0;
      },
      __isRecordDelimiter: function __isRecordDelimiter(chr, buf, pos) {
        var record_delimiter = this.options.record_delimiter;
        var recordDelimiterLength = record_delimiter.length;
        loop1: for (var i = 0; i < recordDelimiterLength; i++) {
          var rd = record_delimiter[i];
          var rdLength = rd.length;
          if (rd[0] !== chr) {
            continue;
          }
          for (var j = 1; j < rdLength; j++) {
            if (rd[j] !== buf[pos + j]) {
              continue loop1;
            }
          }
          return rd.length;
        }
        return 0;
      },
      __isEscape: function __isEscape(buf, pos, chr) {
        var escape = this.options.escape;
        if (escape === null) return false;
        var l = escape.length;
        if (escape[0] === chr) {
          for (var i = 0; i < l; i++) {
            if (escape[i] !== buf[pos + i]) {
              return false;
            }
          }
          return true;
        }
        return false;
      },
      __isQuote: function __isQuote(buf, pos) {
        var quote = this.options.quote;
        if (quote === null) return false;
        var l = quote.length;
        for (var i = 0; i < l; i++) {
          if (quote[i] !== buf[pos + i]) {
            return false;
          }
        }
        return true;
      },
      __autoDiscoverRecordDelimiter: function __autoDiscoverRecordDelimiter(buf, pos) {
        var encoding = this.options.encoding;
        // Note, we don't need to cache this information in state,
        // It is only called on the first line until we find out a suitable
        // record delimiter.
        var rds = [
        // Important, the windows line ending must be before mac os 9
        Buffer.from('\r\n', encoding), Buffer.from('\n', encoding), Buffer.from('\r', encoding)];
        loop: for (var i = 0; i < rds.length; i++) {
          var l = rds[i].length;
          for (var j = 0; j < l; j++) {
            if (rds[i][j] !== buf[pos + j]) {
              continue loop;
            }
          }
          this.options.record_delimiter.push(rds[i]);
          this.state.recordDelimiterMaxLength = rds[i].length;
          return rds[i].length;
        }
        return 0;
      },
      __error: function __error(msg) {
        var _this$options9 = this.options,
          encoding = _this$options9.encoding,
          raw = _this$options9.raw,
          skip_records_with_error = _this$options9.skip_records_with_error;
        var err = typeof msg === 'string' ? new Error(msg) : msg;
        if (skip_records_with_error) {
          this.state.recordHasError = true;
          if (this.options.on_skip !== undefined) {
            this.options.on_skip(err, raw ? this.state.rawBuffer.toString(encoding) : undefined);
          }
          // this.emit('skip', err, raw ? this.state.rawBuffer.toString(encoding) : undefined);
          return undefined;
        } else {
          return err;
        }
      },
      __infoDataSet: function __infoDataSet() {
        return _objectSpread2(_objectSpread2({}, this.info), {}, {
          columns: this.options.columns
        });
      },
      __infoRecord: function __infoRecord() {
        var _this$options10 = this.options,
          columns = _this$options10.columns,
          raw = _this$options10.raw,
          encoding = _this$options10.encoding;
        return _objectSpread2(_objectSpread2({}, this.__infoDataSet()), {}, {
          error: this.state.error,
          header: columns === true,
          index: this.state.record.length,
          raw: raw ? this.state.rawBuffer.toString(encoding) : undefined
        });
      },
      __infoField: function __infoField() {
        var columns = this.options.columns;
        var isColumns = Array.isArray(columns);
        return _objectSpread2(_objectSpread2({}, this.__infoRecord()), {}, {
          column: isColumns === true ? columns.length > this.state.record.length ? columns[this.state.record.length].name : null : this.state.record.length,
          quoting: this.state.wasQuoting
        });
      }
    };
  };
  var Parser$2 = /*#__PURE__*/function (_stream$Transform) {
    function Parser() {
      var _this4;
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      _classCallCheck(this, Parser);
      _this4 = _callSuper(this, Parser, [_objectSpread2(_objectSpread2(_objectSpread2({}, {
        readableObjectMode: true
      }), opts), {}, {
        encoding: null
      })]);
      _this4.api = transform$1(_objectSpread2({
        on_skip: function on_skip(err, chunk) {
          _this4.emit('skip', err, chunk);
        }
      }, opts));
      // Backward compatibility
      _this4.state = _this4.api.state;
      _this4.options = _this4.api.options;
      _this4.info = _this4.api.info;
      return _this4;
    }
    // Implementation of `Transform._transform`
    _inherits(Parser, _stream$Transform);
    return _createClass(Parser, [{
      key: "_transform",
      value: function _transform(buf, _, callback) {
        var _this5 = this;
        if (this.state.stop === true) {
          return;
        }
        var err = this.api.parse(buf, false, function (record) {
          _this5.push(record);
        }, function () {
          _this5.push(null);
          _this5.end();
          // Fix #333 and break #410
          //   ko: api.stream.iterator.coffee
          //   ko with v21.4.0, ok with node v20.5.1: api.stream.finished # aborted (with generate())
          //   ko: api.stream.finished # aborted (with Readable)
          // this.destroy()
          // Fix #410 and partially break #333
          //   ok: api.stream.iterator.coffee
          //   ok: api.stream.finished # aborted (with generate())
          //   broken: api.stream.finished # aborted (with Readable)
          _this5.on('end', _this5.destroy);
        });
        if (err !== undefined) {
          this.state.stop = true;
        }
        callback(err);
      }
      // Implementation of `Transform._flush`
    }, {
      key: "_flush",
      value: function _flush(callback) {
        var _this6 = this;
        if (this.state.stop === true) {
          return;
        }
        var err = this.api.parse(undefined, true, function (record) {
          _this6.push(record);
        }, function () {
          _this6.push(null);
          _this6.on('end', _this6.destroy);
        });
        callback(err);
      }
    }]);
  }(stream$3.Transform);
  var parse$2 = function parse() {
    var data, options, callback;
    for (var i in arguments) {
      var argument = arguments[i];
      var type = _typeof(argument);
      if (data === undefined && (typeof argument === 'string' || Buffer.isBuffer(argument))) {
        data = argument;
      } else if (options === undefined && is_object$3(argument)) {
        options = argument;
      } else if (callback === undefined && type === 'function') {
        callback = argument;
      } else {
        throw new CsvError$3('CSV_INVALID_ARGUMENT', ['Invalid argument:', "got ".concat(JSON.stringify(argument), " at index ").concat(i)], options || {});
      }
    }
    var parser = new Parser$2(options);
    if (callback) {
      var records = options === undefined || options.objname === undefined ? [] : {};
      parser.on('readable', function () {
        var record;
        while ((record = this.read()) !== null) {
          if (options === undefined || options.objname === undefined) {
            records.push(record);
          } else {
            records[record[0]] = record[1];
          }
        }
      });
      parser.on('error', function (err) {
        callback(err, undefined, parser.api.__infoDataSet());
      });
      parser.on('end', function () {
        callback(undefined, records, parser.api.__infoDataSet());
      });
    }
    if (data !== undefined) {
      var writer = function writer() {
        parser.write(data);
        parser.end();
      };
      // Support Deno, Rollup doesnt provide a shim for setImmediate
      if (typeof setImmediate === 'function') {
        setImmediate(writer);
      } else {
        setTimeout(writer, 0);
      }
    }
    return parser;
  };
  cjs$1.CsvError = CsvError$3;
  cjs$1.Parser = Parser$2;
  cjs$1.parse = parse$2;

  var sync$1 = {};

  var CsvError$2 = /*#__PURE__*/function (_Error) {
    function CsvError(code, message, options) {
      var _this;
      _classCallCheck(this, CsvError);
      if (Array.isArray(message)) message = message.join(' ').trim();
      _this = _callSuper(this, CsvError, [message]);
      if (Error.captureStackTrace !== undefined) {
        Error.captureStackTrace(_this, CsvError);
      }
      _this.code = code;
      for (var _len = arguments.length, contexts = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
        contexts[_key - 3] = arguments[_key];
      }
      for (var _i = 0, _contexts = contexts; _i < _contexts.length; _i++) {
        var context = _contexts[_i];
        for (var key in context) {
          var value = context[key];
          _this[key] = Buffer.isBuffer(value) ? value.toString(options.encoding) : value == null ? value : JSON.parse(JSON.stringify(value));
        }
      }
      return _this;
    }
    _inherits(CsvError, _Error);
    return _createClass(CsvError);
  }(/*#__PURE__*/_wrapNativeSuper(Error));
  var is_object$2 = function is_object(obj) {
    return _typeof(obj) === 'object' && obj !== null && !Array.isArray(obj);
  };
  var normalize_columns_array = function normalize_columns_array(columns) {
    var normalizedColumns = [];
    for (var i = 0, l = columns.length; i < l; i++) {
      var column = columns[i];
      if (column === undefined || column === null || column === false) {
        normalizedColumns[i] = {
          disabled: true
        };
      } else if (typeof column === 'string') {
        normalizedColumns[i] = {
          name: column
        };
      } else if (is_object$2(column)) {
        if (typeof column.name !== 'string') {
          throw new CsvError$2('CSV_OPTION_COLUMNS_MISSING_NAME', ['Option columns missing name:', "property \"name\" is required at position ".concat(i), 'when column is an object literal']);
        }
        normalizedColumns[i] = column;
      } else {
        throw new CsvError$2('CSV_INVALID_COLUMN_DEFINITION', ['Invalid column definition:', 'expect a string or a literal object,', "got ".concat(JSON.stringify(column), " at position ").concat(i)]);
      }
    }
    return normalizedColumns;
  };
  var ResizeableBuffer = /*#__PURE__*/function () {
    function ResizeableBuffer() {
      var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;
      _classCallCheck(this, ResizeableBuffer);
      this.size = size;
      this.length = 0;
      this.buf = Buffer.allocUnsafe(size);
    }
    return _createClass(ResizeableBuffer, [{
      key: "prepend",
      value: function prepend(val) {
        if (Buffer.isBuffer(val)) {
          var length = this.length + val.length;
          if (length >= this.size) {
            this.resize();
            if (length >= this.size) {
              throw Error('INVALID_BUFFER_STATE');
            }
          }
          var buf = this.buf;
          this.buf = Buffer.allocUnsafe(this.size);
          val.copy(this.buf, 0);
          buf.copy(this.buf, val.length);
          this.length += val.length;
        } else {
          var _length = this.length++;
          if (_length === this.size) {
            this.resize();
          }
          var _buf = this.clone();
          this.buf[0] = val;
          _buf.copy(this.buf, 1, 0, _length);
        }
      }
    }, {
      key: "append",
      value: function append(val) {
        var length = this.length++;
        if (length === this.size) {
          this.resize();
        }
        this.buf[length] = val;
      }
    }, {
      key: "clone",
      value: function clone() {
        return Buffer.from(this.buf.slice(0, this.length));
      }
    }, {
      key: "resize",
      value: function resize() {
        var length = this.length;
        this.size = this.size * 2;
        var buf = Buffer.allocUnsafe(this.size);
        this.buf.copy(buf, 0, 0, length);
        this.buf = buf;
      }
    }, {
      key: "toString",
      value: function toString(encoding) {
        if (encoding) {
          return this.buf.slice(0, this.length).toString(encoding);
        } else {
          return Uint8Array.prototype.slice.call(this.buf.slice(0, this.length));
        }
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return this.toString('utf8');
      }
    }, {
      key: "reset",
      value: function reset() {
        this.length = 0;
      }
    }]);
  }(); // white space characters
  // https://en.wikipedia.org/wiki/Whitespace_character
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Character_Classes#Types
  // \f\n\r\t\v\u00a0\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff
  var np = 12;
  var cr$1 = 13; // `\r`, carriage return, 0x0D in hexadécimal, 13 in decimal
  var nl$1 = 10; // `\n`, newline, 0x0A in hexadecimal, 10 in decimal
  var space = 32;
  var tab = 9;
  var init_state = function init_state(options) {
    return {
      bomSkipped: false,
      bufBytesStart: 0,
      castField: options.cast_function,
      commenting: false,
      // Current error encountered by a record
      error: undefined,
      enabled: options.from_line === 1,
      escaping: false,
      escapeIsQuote: Buffer.isBuffer(options.escape) && Buffer.isBuffer(options.quote) && Buffer.compare(options.escape, options.quote) === 0,
      // columns can be `false`, `true`, `Array`
      expectedRecordLength: Array.isArray(options.columns) ? options.columns.length : undefined,
      field: new ResizeableBuffer(20),
      firstLineToHeaders: options.cast_first_line_to_header,
      needMoreDataSize: Math.max.apply(Math, [
      // Skip if the remaining buffer smaller than comment
      options.comment !== null ? options.comment.length : 0].concat(_toConsumableArray(options.delimiter.map(function (delimiter) {
        return delimiter.length;
      })), [
      // Skip if the remaining buffer can be escape sequence
      options.quote !== null ? options.quote.length : 0])),
      previousBuf: undefined,
      quoting: false,
      stop: false,
      rawBuffer: new ResizeableBuffer(100),
      record: [],
      recordHasError: false,
      record_length: 0,
      recordDelimiterMaxLength: options.record_delimiter.length === 0 ? 0 : Math.max.apply(Math, _toConsumableArray(options.record_delimiter.map(function (v) {
        return v.length;
      }))),
      trimChars: [Buffer.from(' ', options.encoding)[0], Buffer.from('\t', options.encoding)[0]],
      wasQuoting: false,
      wasRowDelimiter: false,
      timchars: [Buffer.from(Buffer.from([cr$1], 'utf8').toString(), options.encoding), Buffer.from(Buffer.from([nl$1], 'utf8').toString(), options.encoding), Buffer.from(Buffer.from([np], 'utf8').toString(), options.encoding), Buffer.from(Buffer.from([space], 'utf8').toString(), options.encoding), Buffer.from(Buffer.from([tab], 'utf8').toString(), options.encoding)]
    };
  };
  var underscore$2 = function underscore(str) {
    return str.replace(/([A-Z])/g, function (_, match) {
      return '_' + match.toLowerCase();
    });
  };
  var normalize_options$2 = function normalize_options(opts) {
    var options = {};
    // Merge with user options
    for (var opt in opts) {
      options[underscore$2(opt)] = opts[opt];
    }
    // Normalize option `encoding`
    // Note: defined first because other options depends on it
    // to convert chars/strings into buffers.
    if (options.encoding === undefined || options.encoding === true) {
      options.encoding = 'utf8';
    } else if (options.encoding === null || options.encoding === false) {
      options.encoding = null;
    } else if (typeof options.encoding !== 'string' && options.encoding !== null) {
      throw new CsvError$2('CSV_INVALID_OPTION_ENCODING', ['Invalid option encoding:', 'encoding must be a string or null to return a buffer,', "got ".concat(JSON.stringify(options.encoding))], options);
    }
    // Normalize option `bom`
    if (options.bom === undefined || options.bom === null || options.bom === false) {
      options.bom = false;
    } else if (options.bom !== true) {
      throw new CsvError$2('CSV_INVALID_OPTION_BOM', ['Invalid option bom:', 'bom must be true,', "got ".concat(JSON.stringify(options.bom))], options);
    }
    // Normalize option `cast`
    options.cast_function = null;
    if (options.cast === undefined || options.cast === null || options.cast === false || options.cast === '') {
      options.cast = undefined;
    } else if (typeof options.cast === 'function') {
      options.cast_function = options.cast;
      options.cast = true;
    } else if (options.cast !== true) {
      throw new CsvError$2('CSV_INVALID_OPTION_CAST', ['Invalid option cast:', 'cast must be true or a function,', "got ".concat(JSON.stringify(options.cast))], options);
    }
    // Normalize option `cast_date`
    if (options.cast_date === undefined || options.cast_date === null || options.cast_date === false || options.cast_date === '') {
      options.cast_date = false;
    } else if (options.cast_date === true) {
      options.cast_date = function (value) {
        var date = Date.parse(value);
        return !isNaN(date) ? new Date(date) : value;
      };
    } else if (typeof options.cast_date !== 'function') {
      throw new CsvError$2('CSV_INVALID_OPTION_CAST_DATE', ['Invalid option cast_date:', 'cast_date must be true or a function,', "got ".concat(JSON.stringify(options.cast_date))], options);
    }
    // Normalize option `columns`
    options.cast_first_line_to_header = null;
    if (options.columns === true) {
      // Fields in the first line are converted as-is to columns
      options.cast_first_line_to_header = undefined;
    } else if (typeof options.columns === 'function') {
      options.cast_first_line_to_header = options.columns;
      options.columns = true;
    } else if (Array.isArray(options.columns)) {
      options.columns = normalize_columns_array(options.columns);
    } else if (options.columns === undefined || options.columns === null || options.columns === false) {
      options.columns = false;
    } else {
      throw new CsvError$2('CSV_INVALID_OPTION_COLUMNS', ['Invalid option columns:', 'expect an array, a function or true,', "got ".concat(JSON.stringify(options.columns))], options);
    }
    // Normalize option `group_columns_by_name`
    if (options.group_columns_by_name === undefined || options.group_columns_by_name === null || options.group_columns_by_name === false) {
      options.group_columns_by_name = false;
    } else if (options.group_columns_by_name !== true) {
      throw new CsvError$2('CSV_INVALID_OPTION_GROUP_COLUMNS_BY_NAME', ['Invalid option group_columns_by_name:', 'expect an boolean,', "got ".concat(JSON.stringify(options.group_columns_by_name))], options);
    } else if (options.columns === false) {
      throw new CsvError$2('CSV_INVALID_OPTION_GROUP_COLUMNS_BY_NAME', ['Invalid option group_columns_by_name:', 'the `columns` mode must be activated.'], options);
    }
    // Normalize option `comment`
    if (options.comment === undefined || options.comment === null || options.comment === false || options.comment === '') {
      options.comment = null;
    } else {
      if (typeof options.comment === 'string') {
        options.comment = Buffer.from(options.comment, options.encoding);
      }
      if (!Buffer.isBuffer(options.comment)) {
        throw new CsvError$2('CSV_INVALID_OPTION_COMMENT', ['Invalid option comment:', 'comment must be a buffer or a string,', "got ".concat(JSON.stringify(options.comment))], options);
      }
    }
    // Normalize option `comment_no_infix`
    if (options.comment_no_infix === undefined || options.comment_no_infix === null || options.comment_no_infix === false) {
      options.comment_no_infix = false;
    } else if (options.comment_no_infix !== true) {
      throw new CsvError$2('CSV_INVALID_OPTION_COMMENT', ['Invalid option comment_no_infix:', 'value must be a boolean,', "got ".concat(JSON.stringify(options.comment_no_infix))], options);
    }
    // Normalize option `delimiter`
    var delimiter_json = JSON.stringify(options.delimiter);
    if (!Array.isArray(options.delimiter)) options.delimiter = [options.delimiter];
    if (options.delimiter.length === 0) {
      throw new CsvError$2('CSV_INVALID_OPTION_DELIMITER', ['Invalid option delimiter:', 'delimiter must be a non empty string or buffer or array of string|buffer,', "got ".concat(delimiter_json)], options);
    }
    options.delimiter = options.delimiter.map(function (delimiter) {
      if (delimiter === undefined || delimiter === null || delimiter === false) {
        return Buffer.from(',', options.encoding);
      }
      if (typeof delimiter === 'string') {
        delimiter = Buffer.from(delimiter, options.encoding);
      }
      if (!Buffer.isBuffer(delimiter) || delimiter.length === 0) {
        throw new CsvError$2('CSV_INVALID_OPTION_DELIMITER', ['Invalid option delimiter:', 'delimiter must be a non empty string or buffer or array of string|buffer,', "got ".concat(delimiter_json)], options);
      }
      return delimiter;
    });
    // Normalize option `escape`
    if (options.escape === undefined || options.escape === true) {
      options.escape = Buffer.from('"', options.encoding);
    } else if (typeof options.escape === 'string') {
      options.escape = Buffer.from(options.escape, options.encoding);
    } else if (options.escape === null || options.escape === false) {
      options.escape = null;
    }
    if (options.escape !== null) {
      if (!Buffer.isBuffer(options.escape)) {
        throw new Error("Invalid Option: escape must be a buffer, a string or a boolean, got ".concat(JSON.stringify(options.escape)));
      }
    }
    // Normalize option `from`
    if (options.from === undefined || options.from === null) {
      options.from = 1;
    } else {
      if (typeof options.from === 'string' && /\d+/.test(options.from)) {
        options.from = parseInt(options.from);
      }
      if (Number.isInteger(options.from)) {
        if (options.from < 0) {
          throw new Error("Invalid Option: from must be a positive integer, got ".concat(JSON.stringify(opts.from)));
        }
      } else {
        throw new Error("Invalid Option: from must be an integer, got ".concat(JSON.stringify(options.from)));
      }
    }
    // Normalize option `from_line`
    if (options.from_line === undefined || options.from_line === null) {
      options.from_line = 1;
    } else {
      if (typeof options.from_line === 'string' && /\d+/.test(options.from_line)) {
        options.from_line = parseInt(options.from_line);
      }
      if (Number.isInteger(options.from_line)) {
        if (options.from_line <= 0) {
          throw new Error("Invalid Option: from_line must be a positive integer greater than 0, got ".concat(JSON.stringify(opts.from_line)));
        }
      } else {
        throw new Error("Invalid Option: from_line must be an integer, got ".concat(JSON.stringify(opts.from_line)));
      }
    }
    // Normalize options `ignore_last_delimiters`
    if (options.ignore_last_delimiters === undefined || options.ignore_last_delimiters === null) {
      options.ignore_last_delimiters = false;
    } else if (typeof options.ignore_last_delimiters === 'number') {
      options.ignore_last_delimiters = Math.floor(options.ignore_last_delimiters);
      if (options.ignore_last_delimiters === 0) {
        options.ignore_last_delimiters = false;
      }
    } else if (typeof options.ignore_last_delimiters !== 'boolean') {
      throw new CsvError$2('CSV_INVALID_OPTION_IGNORE_LAST_DELIMITERS', ['Invalid option `ignore_last_delimiters`:', 'the value must be a boolean value or an integer,', "got ".concat(JSON.stringify(options.ignore_last_delimiters))], options);
    }
    if (options.ignore_last_delimiters === true && options.columns === false) {
      throw new CsvError$2('CSV_IGNORE_LAST_DELIMITERS_REQUIRES_COLUMNS', ['The option `ignore_last_delimiters`', 'requires the activation of the `columns` option'], options);
    }
    // Normalize option `info`
    if (options.info === undefined || options.info === null || options.info === false) {
      options.info = false;
    } else if (options.info !== true) {
      throw new Error("Invalid Option: info must be true, got ".concat(JSON.stringify(options.info)));
    }
    // Normalize option `max_record_size`
    if (options.max_record_size === undefined || options.max_record_size === null || options.max_record_size === false) {
      options.max_record_size = 0;
    } else if (Number.isInteger(options.max_record_size) && options.max_record_size >= 0) ;else if (typeof options.max_record_size === 'string' && /\d+/.test(options.max_record_size)) {
      options.max_record_size = parseInt(options.max_record_size);
    } else {
      throw new Error("Invalid Option: max_record_size must be a positive integer, got ".concat(JSON.stringify(options.max_record_size)));
    }
    // Normalize option `objname`
    if (options.objname === undefined || options.objname === null || options.objname === false) {
      options.objname = undefined;
    } else if (Buffer.isBuffer(options.objname)) {
      if (options.objname.length === 0) {
        throw new Error("Invalid Option: objname must be a non empty buffer");
      }
      if (options.encoding === null) ;else {
        options.objname = options.objname.toString(options.encoding);
      }
    } else if (typeof options.objname === 'string') {
      if (options.objname.length === 0) {
        throw new Error("Invalid Option: objname must be a non empty string");
      }
      // Great, nothing to do
    } else if (typeof options.objname === 'number') ;else {
      throw new Error("Invalid Option: objname must be a string or a buffer, got ".concat(options.objname));
    }
    if (options.objname !== undefined) {
      if (typeof options.objname === 'number') {
        if (options.columns !== false) {
          throw Error('Invalid Option: objname index cannot be combined with columns or be defined as a field');
        }
      } else {
        // A string or a buffer
        if (options.columns === false) {
          throw Error('Invalid Option: objname field must be combined with columns or be defined as an index');
        }
      }
    }
    // Normalize option `on_record`
    if (options.on_record === undefined || options.on_record === null) {
      options.on_record = undefined;
    } else if (typeof options.on_record !== 'function') {
      throw new CsvError$2('CSV_INVALID_OPTION_ON_RECORD', ['Invalid option `on_record`:', 'expect a function,', "got ".concat(JSON.stringify(options.on_record))], options);
    }
    // Normalize option `on_skip`
    // options.on_skip ??= (err, chunk) => {
    //   this.emit('skip', err, chunk);
    // };
    if (options.on_skip !== undefined && options.on_skip !== null && typeof options.on_skip !== 'function') {
      throw new Error("Invalid Option: on_skip must be a function, got ".concat(JSON.stringify(options.on_skip)));
    }
    // Normalize option `quote`
    if (options.quote === null || options.quote === false || options.quote === '') {
      options.quote = null;
    } else {
      if (options.quote === undefined || options.quote === true) {
        options.quote = Buffer.from('"', options.encoding);
      } else if (typeof options.quote === 'string') {
        options.quote = Buffer.from(options.quote, options.encoding);
      }
      if (!Buffer.isBuffer(options.quote)) {
        throw new Error("Invalid Option: quote must be a buffer or a string, got ".concat(JSON.stringify(options.quote)));
      }
    }
    // Normalize option `raw`
    if (options.raw === undefined || options.raw === null || options.raw === false) {
      options.raw = false;
    } else if (options.raw !== true) {
      throw new Error("Invalid Option: raw must be true, got ".concat(JSON.stringify(options.raw)));
    }
    // Normalize option `record_delimiter`
    if (options.record_delimiter === undefined) {
      options.record_delimiter = [];
    } else if (typeof options.record_delimiter === 'string' || Buffer.isBuffer(options.record_delimiter)) {
      if (options.record_delimiter.length === 0) {
        throw new CsvError$2('CSV_INVALID_OPTION_RECORD_DELIMITER', ['Invalid option `record_delimiter`:', 'value must be a non empty string or buffer,', "got ".concat(JSON.stringify(options.record_delimiter))], options);
      }
      options.record_delimiter = [options.record_delimiter];
    } else if (!Array.isArray(options.record_delimiter)) {
      throw new CsvError$2('CSV_INVALID_OPTION_RECORD_DELIMITER', ['Invalid option `record_delimiter`:', 'value must be a string, a buffer or array of string|buffer,', "got ".concat(JSON.stringify(options.record_delimiter))], options);
    }
    options.record_delimiter = options.record_delimiter.map(function (rd, i) {
      if (typeof rd !== 'string' && !Buffer.isBuffer(rd)) {
        throw new CsvError$2('CSV_INVALID_OPTION_RECORD_DELIMITER', ['Invalid option `record_delimiter`:', 'value must be a string, a buffer or array of string|buffer', "at index ".concat(i, ","), "got ".concat(JSON.stringify(rd))], options);
      } else if (rd.length === 0) {
        throw new CsvError$2('CSV_INVALID_OPTION_RECORD_DELIMITER', ['Invalid option `record_delimiter`:', 'value must be a non empty string or buffer', "at index ".concat(i, ","), "got ".concat(JSON.stringify(rd))], options);
      }
      if (typeof rd === 'string') {
        rd = Buffer.from(rd, options.encoding);
      }
      return rd;
    });
    // Normalize option `relax_column_count`
    if (typeof options.relax_column_count === 'boolean') ;else if (options.relax_column_count === undefined || options.relax_column_count === null) {
      options.relax_column_count = false;
    } else {
      throw new Error("Invalid Option: relax_column_count must be a boolean, got ".concat(JSON.stringify(options.relax_column_count)));
    }
    if (typeof options.relax_column_count_less === 'boolean') ;else if (options.relax_column_count_less === undefined || options.relax_column_count_less === null) {
      options.relax_column_count_less = false;
    } else {
      throw new Error("Invalid Option: relax_column_count_less must be a boolean, got ".concat(JSON.stringify(options.relax_column_count_less)));
    }
    if (typeof options.relax_column_count_more === 'boolean') ;else if (options.relax_column_count_more === undefined || options.relax_column_count_more === null) {
      options.relax_column_count_more = false;
    } else {
      throw new Error("Invalid Option: relax_column_count_more must be a boolean, got ".concat(JSON.stringify(options.relax_column_count_more)));
    }
    // Normalize option `relax_quotes`
    if (typeof options.relax_quotes === 'boolean') ;else if (options.relax_quotes === undefined || options.relax_quotes === null) {
      options.relax_quotes = false;
    } else {
      throw new Error("Invalid Option: relax_quotes must be a boolean, got ".concat(JSON.stringify(options.relax_quotes)));
    }
    // Normalize option `skip_empty_lines`
    if (typeof options.skip_empty_lines === 'boolean') ;else if (options.skip_empty_lines === undefined || options.skip_empty_lines === null) {
      options.skip_empty_lines = false;
    } else {
      throw new Error("Invalid Option: skip_empty_lines must be a boolean, got ".concat(JSON.stringify(options.skip_empty_lines)));
    }
    // Normalize option `skip_records_with_empty_values`
    if (typeof options.skip_records_with_empty_values === 'boolean') ;else if (options.skip_records_with_empty_values === undefined || options.skip_records_with_empty_values === null) {
      options.skip_records_with_empty_values = false;
    } else {
      throw new Error("Invalid Option: skip_records_with_empty_values must be a boolean, got ".concat(JSON.stringify(options.skip_records_with_empty_values)));
    }
    // Normalize option `skip_records_with_error`
    if (typeof options.skip_records_with_error === 'boolean') ;else if (options.skip_records_with_error === undefined || options.skip_records_with_error === null) {
      options.skip_records_with_error = false;
    } else {
      throw new Error("Invalid Option: skip_records_with_error must be a boolean, got ".concat(JSON.stringify(options.skip_records_with_error)));
    }
    // Normalize option `rtrim`
    if (options.rtrim === undefined || options.rtrim === null || options.rtrim === false) {
      options.rtrim = false;
    } else if (options.rtrim !== true) {
      throw new Error("Invalid Option: rtrim must be a boolean, got ".concat(JSON.stringify(options.rtrim)));
    }
    // Normalize option `ltrim`
    if (options.ltrim === undefined || options.ltrim === null || options.ltrim === false) {
      options.ltrim = false;
    } else if (options.ltrim !== true) {
      throw new Error("Invalid Option: ltrim must be a boolean, got ".concat(JSON.stringify(options.ltrim)));
    }
    // Normalize option `trim`
    if (options.trim === undefined || options.trim === null || options.trim === false) {
      options.trim = false;
    } else if (options.trim !== true) {
      throw new Error("Invalid Option: trim must be a boolean, got ".concat(JSON.stringify(options.trim)));
    }
    // Normalize options `trim`, `ltrim` and `rtrim`
    if (options.trim === true && opts.ltrim !== false) {
      options.ltrim = true;
    } else if (options.ltrim !== true) {
      options.ltrim = false;
    }
    if (options.trim === true && opts.rtrim !== false) {
      options.rtrim = true;
    } else if (options.rtrim !== true) {
      options.rtrim = false;
    }
    // Normalize option `to`
    if (options.to === undefined || options.to === null) {
      options.to = -1;
    } else {
      if (typeof options.to === 'string' && /\d+/.test(options.to)) {
        options.to = parseInt(options.to);
      }
      if (Number.isInteger(options.to)) {
        if (options.to <= 0) {
          throw new Error("Invalid Option: to must be a positive integer greater than 0, got ".concat(JSON.stringify(opts.to)));
        }
      } else {
        throw new Error("Invalid Option: to must be an integer, got ".concat(JSON.stringify(opts.to)));
      }
    }
    // Normalize option `to_line`
    if (options.to_line === undefined || options.to_line === null) {
      options.to_line = -1;
    } else {
      if (typeof options.to_line === 'string' && /\d+/.test(options.to_line)) {
        options.to_line = parseInt(options.to_line);
      }
      if (Number.isInteger(options.to_line)) {
        if (options.to_line <= 0) {
          throw new Error("Invalid Option: to_line must be a positive integer greater than 0, got ".concat(JSON.stringify(opts.to_line)));
        }
      } else {
        throw new Error("Invalid Option: to_line must be an integer, got ".concat(JSON.stringify(opts.to_line)));
      }
    }
    return options;
  };
  var isRecordEmpty = function isRecordEmpty(record) {
    return record.every(function (field) {
      return field == null || field.toString && field.toString().trim() === '';
    });
  };
  var cr = 13; // `\r`, carriage return, 0x0D in hexadécimal, 13 in decimal
  var nl = 10; // `\n`, newline, 0x0A in hexadecimal, 10 in decimal

  var boms = {
    // Note, the following are equals:
    // Buffer.from("\ufeff")
    // Buffer.from([239, 187, 191])
    // Buffer.from('EFBBBF', 'hex')
    'utf8': Buffer.from([239, 187, 191]),
    // Note, the following are equals:
    // Buffer.from "\ufeff", 'utf16le
    // Buffer.from([255, 254])
    'utf16le': Buffer.from([255, 254])
  };
  var transform = function transform() {
    var original_options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var info = {
      bytes: 0,
      comment_lines: 0,
      empty_lines: 0,
      invalid_field_length: 0,
      lines: 1,
      records: 0
    };
    var options = normalize_options$2(original_options);
    return {
      info: info,
      original_options: original_options,
      options: options,
      state: init_state(options),
      __needMoreData: function __needMoreData(i, bufLen, end) {
        if (end) return false;
        var _this$options = this.options,
          encoding = _this$options.encoding,
          escape = _this$options.escape,
          quote = _this$options.quote;
        var _this$state = this.state,
          quoting = _this$state.quoting,
          needMoreDataSize = _this$state.needMoreDataSize,
          recordDelimiterMaxLength = _this$state.recordDelimiterMaxLength;
        var numOfCharLeft = bufLen - i - 1;
        var requiredLength = Math.max(needMoreDataSize,
        // Skip if the remaining buffer smaller than record delimiter
        // If "record_delimiter" is yet to be discovered:
        // 1. It is equals to `[]` and "recordDelimiterMaxLength" equals `0`
        // 2. We set the length to windows line ending in the current encoding
        // Note, that encoding is known from user or bom discovery at that point
        // recordDelimiterMaxLength,
        recordDelimiterMaxLength === 0 ? Buffer.from('\r\n', encoding).length : recordDelimiterMaxLength,
        // Skip if remaining buffer can be an escaped quote
        quoting ? (escape === null ? 0 : escape.length) + quote.length : 0,
        // Skip if remaining buffer can be record delimiter following the closing quote
        quoting ? quote.length + recordDelimiterMaxLength : 0);
        return numOfCharLeft < requiredLength;
      },
      // Central parser implementation
      parse: function parse(nextBuf, end, push, close) {
        var _this2 = this;
        var _this$options2 = this.options,
          bom = _this$options2.bom,
          comment_no_infix = _this$options2.comment_no_infix,
          encoding = _this$options2.encoding,
          from_line = _this$options2.from_line,
          ltrim = _this$options2.ltrim,
          max_record_size = _this$options2.max_record_size,
          raw = _this$options2.raw,
          relax_quotes = _this$options2.relax_quotes,
          rtrim = _this$options2.rtrim,
          skip_empty_lines = _this$options2.skip_empty_lines,
          to = _this$options2.to,
          to_line = _this$options2.to_line;
        var _this$options3 = this.options,
          comment = _this$options3.comment,
          escape = _this$options3.escape,
          quote = _this$options3.quote,
          record_delimiter = _this$options3.record_delimiter;
        var _this$state2 = this.state,
          bomSkipped = _this$state2.bomSkipped,
          previousBuf = _this$state2.previousBuf,
          rawBuffer = _this$state2.rawBuffer,
          escapeIsQuote = _this$state2.escapeIsQuote;
        var buf;
        if (previousBuf === undefined) {
          if (nextBuf === undefined) {
            // Handle empty string
            close();
            return;
          } else {
            buf = nextBuf;
          }
        } else if (previousBuf !== undefined && nextBuf === undefined) {
          buf = previousBuf;
        } else {
          buf = Buffer.concat([previousBuf, nextBuf]);
        }
        // Handle UTF BOM
        if (bomSkipped === false) {
          if (bom === false) {
            this.state.bomSkipped = true;
          } else if (buf.length < 3) {
            // No enough data
            if (end === false) {
              // Wait for more data
              this.state.previousBuf = buf;
              return;
            }
          } else {
            for (var _encoding in boms) {
              if (boms[_encoding].compare(buf, 0, boms[_encoding].length) === 0) {
                // Skip BOM
                var bomLength = boms[_encoding].length;
                this.state.bufBytesStart += bomLength;
                buf = buf.slice(bomLength);
                // Renormalize original options with the new encoding
                this.options = normalize_options$2(_objectSpread2(_objectSpread2({}, this.original_options), {}, {
                  encoding: _encoding
                }));
                // Options will re-evaluate the Buffer with the new encoding
                var _this$options4 = this.options;
                comment = _this$options4.comment;
                escape = _this$options4.escape;
                quote = _this$options4.quote;
                break;
              }
            }
            this.state.bomSkipped = true;
          }
        }
        var bufLen = buf.length;
        var pos;
        for (pos = 0; pos < bufLen; pos++) {
          // Ensure we get enough space to look ahead
          // There should be a way to move this out of the loop
          if (this.__needMoreData(pos, bufLen, end)) {
            break;
          }
          if (this.state.wasRowDelimiter === true) {
            this.info.lines++;
            this.state.wasRowDelimiter = false;
          }
          if (to_line !== -1 && this.info.lines > to_line) {
            this.state.stop = true;
            close();
            return;
          }
          // Auto discovery of record_delimiter, unix, mac and windows supported
          if (this.state.quoting === false && record_delimiter.length === 0) {
            var record_delimiterCount = this.__autoDiscoverRecordDelimiter(buf, pos);
            if (record_delimiterCount) {
              record_delimiter = this.options.record_delimiter;
            }
          }
          var chr = buf[pos];
          if (raw === true) {
            rawBuffer.append(chr);
          }
          if ((chr === cr || chr === nl) && this.state.wasRowDelimiter === false) {
            this.state.wasRowDelimiter = true;
          }
          // Previous char was a valid escape char
          // treat the current char as a regular char
          if (this.state.escaping === true) {
            this.state.escaping = false;
          } else {
            // Escape is only active inside quoted fields
            // We are quoting, the char is an escape chr and there is a chr to escape
            // if(escape !== null && this.state.quoting === true && chr === escape && pos + 1 < bufLen){
            if (escape !== null && this.state.quoting === true && this.__isEscape(buf, pos, chr) && pos + escape.length < bufLen) {
              if (escapeIsQuote) {
                if (this.__isQuote(buf, pos + escape.length)) {
                  this.state.escaping = true;
                  pos += escape.length - 1;
                  continue;
                }
              } else {
                this.state.escaping = true;
                pos += escape.length - 1;
                continue;
              }
            }
            // Not currently escaping and chr is a quote
            // TODO: need to compare bytes instead of single char
            if (this.state.commenting === false && this.__isQuote(buf, pos)) {
              if (this.state.quoting === true) {
                var nextChr = buf[pos + quote.length];
                var isNextChrTrimable = rtrim && this.__isCharTrimable(buf, pos + quote.length);
                var isNextChrComment = comment !== null && this.__compareBytes(comment, buf, pos + quote.length, nextChr);
                var isNextChrDelimiter = this.__isDelimiter(buf, pos + quote.length, nextChr);
                var isNextChrRecordDelimiter = record_delimiter.length === 0 ? this.__autoDiscoverRecordDelimiter(buf, pos + quote.length) : this.__isRecordDelimiter(nextChr, buf, pos + quote.length);
                // Escape a quote
                // Treat next char as a regular character
                if (escape !== null && this.__isEscape(buf, pos, chr) && this.__isQuote(buf, pos + escape.length)) {
                  pos += escape.length - 1;
                } else if (!nextChr || isNextChrDelimiter || isNextChrRecordDelimiter || isNextChrComment || isNextChrTrimable) {
                  this.state.quoting = false;
                  this.state.wasQuoting = true;
                  pos += quote.length - 1;
                  continue;
                } else if (relax_quotes === false) {
                  var err = this.__error(new CsvError$2('CSV_INVALID_CLOSING_QUOTE', ['Invalid Closing Quote:', "got \"".concat(String.fromCharCode(nextChr), "\""), "at line ".concat(this.info.lines), 'instead of delimiter, record delimiter, trimable character', '(if activated) or comment'], this.options, this.__infoField()));
                  if (err !== undefined) return err;
                } else {
                  this.state.quoting = false;
                  this.state.wasQuoting = true;
                  this.state.field.prepend(quote);
                  pos += quote.length - 1;
                }
              } else {
                if (this.state.field.length !== 0) {
                  // In relax_quotes mode, treat opening quote preceded by chrs as regular
                  if (relax_quotes === false) {
                    var _info = this.__infoField();
                    var _bom = Object.keys(boms).map(function (b) {
                      return boms[b].equals(_this2.state.field.toString()) ? b : false;
                    }).filter(Boolean)[0];
                    var _err = this.__error(new CsvError$2('INVALID_OPENING_QUOTE', ['Invalid Opening Quote:', "a quote is found on field ".concat(JSON.stringify(_info.column), " at line ").concat(_info.lines, ", value is ").concat(JSON.stringify(this.state.field.toString(encoding))), _bom ? "(".concat(_bom, " bom)") : undefined], this.options, _info, {
                      field: this.state.field
                    }));
                    if (_err !== undefined) return _err;
                  }
                } else {
                  this.state.quoting = true;
                  pos += quote.length - 1;
                  continue;
                }
              }
            }
            if (this.state.quoting === false) {
              var recordDelimiterLength = this.__isRecordDelimiter(chr, buf, pos);
              if (recordDelimiterLength !== 0) {
                // Do not emit comments which take a full line
                var skipCommentLine = this.state.commenting && this.state.wasQuoting === false && this.state.record.length === 0 && this.state.field.length === 0;
                if (skipCommentLine) {
                  this.info.comment_lines++;
                  // Skip full comment line
                } else {
                  // Activate records emition if above from_line
                  if (this.state.enabled === false && this.info.lines + (this.state.wasRowDelimiter === true ? 1 : 0) >= from_line) {
                    this.state.enabled = true;
                    this.__resetField();
                    this.__resetRecord();
                    pos += recordDelimiterLength - 1;
                    continue;
                  }
                  // Skip if line is empty and skip_empty_lines activated
                  if (skip_empty_lines === true && this.state.wasQuoting === false && this.state.record.length === 0 && this.state.field.length === 0) {
                    this.info.empty_lines++;
                    pos += recordDelimiterLength - 1;
                    continue;
                  }
                  this.info.bytes = this.state.bufBytesStart + pos;
                  var errField = this.__onField();
                  if (errField !== undefined) return errField;
                  this.info.bytes = this.state.bufBytesStart + pos + recordDelimiterLength;
                  var errRecord = this.__onRecord(push);
                  if (errRecord !== undefined) return errRecord;
                  if (to !== -1 && this.info.records >= to) {
                    this.state.stop = true;
                    close();
                    return;
                  }
                }
                this.state.commenting = false;
                pos += recordDelimiterLength - 1;
                continue;
              }
              if (this.state.commenting) {
                continue;
              }
              if (comment !== null && (comment_no_infix === false || this.state.record.length === 0 && this.state.field.length === 0)) {
                var commentCount = this.__compareBytes(comment, buf, pos, chr);
                if (commentCount !== 0) {
                  this.state.commenting = true;
                  continue;
                }
              }
              var delimiterLength = this.__isDelimiter(buf, pos, chr);
              if (delimiterLength !== 0) {
                this.info.bytes = this.state.bufBytesStart + pos;
                var _errField = this.__onField();
                if (_errField !== undefined) return _errField;
                pos += delimiterLength - 1;
                continue;
              }
            }
          }
          if (this.state.commenting === false) {
            if (max_record_size !== 0 && this.state.record_length + this.state.field.length > max_record_size) {
              return this.__error(new CsvError$2('CSV_MAX_RECORD_SIZE', ['Max Record Size:', 'record exceed the maximum number of tolerated bytes', "of ".concat(max_record_size), "at line ".concat(this.info.lines)], this.options, this.__infoField()));
            }
          }
          var lappend = ltrim === false || this.state.quoting === true || this.state.field.length !== 0 || !this.__isCharTrimable(buf, pos);
          // rtrim in non quoting is handle in __onField
          var rappend = rtrim === false || this.state.wasQuoting === false;
          if (lappend === true && rappend === true) {
            this.state.field.append(chr);
          } else if (rtrim === true && !this.__isCharTrimable(buf, pos)) {
            return this.__error(new CsvError$2('CSV_NON_TRIMABLE_CHAR_AFTER_CLOSING_QUOTE', ['Invalid Closing Quote:', 'found non trimable byte after quote', "at line ".concat(this.info.lines)], this.options, this.__infoField()));
          } else {
            if (lappend === false) {
              pos += this.__isCharTrimable(buf, pos) - 1;
            }
            continue;
          }
        }
        if (end === true) {
          // Ensure we are not ending in a quoting state
          if (this.state.quoting === true) {
            var _err2 = this.__error(new CsvError$2('CSV_QUOTE_NOT_CLOSED', ['Quote Not Closed:', "the parsing is finished with an opening quote at line ".concat(this.info.lines)], this.options, this.__infoField()));
            if (_err2 !== undefined) return _err2;
          } else {
            // Skip last line if it has no characters
            if (this.state.wasQuoting === true || this.state.record.length !== 0 || this.state.field.length !== 0) {
              this.info.bytes = this.state.bufBytesStart + pos;
              var _errField2 = this.__onField();
              if (_errField2 !== undefined) return _errField2;
              var _errRecord = this.__onRecord(push);
              if (_errRecord !== undefined) return _errRecord;
            } else if (this.state.wasRowDelimiter === true) {
              this.info.empty_lines++;
            } else if (this.state.commenting === true) {
              this.info.comment_lines++;
            }
          }
        } else {
          this.state.bufBytesStart += pos;
          this.state.previousBuf = buf.slice(pos);
        }
        if (this.state.wasRowDelimiter === true) {
          this.info.lines++;
          this.state.wasRowDelimiter = false;
        }
      },
      __onRecord: function __onRecord(push) {
        var _this$options5 = this.options,
          columns = _this$options5.columns,
          group_columns_by_name = _this$options5.group_columns_by_name,
          encoding = _this$options5.encoding,
          info = _this$options5.info,
          from = _this$options5.from,
          relax_column_count = _this$options5.relax_column_count,
          relax_column_count_less = _this$options5.relax_column_count_less,
          relax_column_count_more = _this$options5.relax_column_count_more,
          raw = _this$options5.raw,
          skip_records_with_empty_values = _this$options5.skip_records_with_empty_values;
        var _this$state3 = this.state,
          enabled = _this$state3.enabled,
          record = _this$state3.record;
        if (enabled === false) {
          return this.__resetRecord();
        }
        // Convert the first line into column names
        var recordLength = record.length;
        if (columns === true) {
          if (skip_records_with_empty_values === true && isRecordEmpty(record)) {
            this.__resetRecord();
            return;
          }
          return this.__firstLineToColumns(record);
        }
        if (columns === false && this.info.records === 0) {
          this.state.expectedRecordLength = recordLength;
        }
        if (recordLength !== this.state.expectedRecordLength) {
          var err = columns === false ? new CsvError$2('CSV_RECORD_INCONSISTENT_FIELDS_LENGTH', ['Invalid Record Length:', "expect ".concat(this.state.expectedRecordLength, ","), "got ".concat(recordLength, " on line ").concat(this.info.lines)], this.options, this.__infoField(), {
            record: record
          }) : new CsvError$2('CSV_RECORD_INCONSISTENT_COLUMNS', ['Invalid Record Length:', "columns length is ".concat(columns.length, ","), // rename columns
          "got ".concat(recordLength, " on line ").concat(this.info.lines)], this.options, this.__infoField(), {
            record: record
          });
          if (relax_column_count === true || relax_column_count_less === true && recordLength < this.state.expectedRecordLength || relax_column_count_more === true && recordLength > this.state.expectedRecordLength) {
            this.info.invalid_field_length++;
            this.state.error = err;
            // Error is undefined with skip_records_with_error
          } else {
            var finalErr = this.__error(err);
            if (finalErr) return finalErr;
          }
        }
        if (skip_records_with_empty_values === true && isRecordEmpty(record)) {
          this.__resetRecord();
          return;
        }
        if (this.state.recordHasError === true) {
          this.__resetRecord();
          this.state.recordHasError = false;
          return;
        }
        this.info.records++;
        if (from === 1 || this.info.records >= from) {
          var objname = this.options.objname;
          // With columns, records are object
          if (columns !== false) {
            var obj = {};
            // Transform record array to an object
            for (var i = 0, l = record.length; i < l; i++) {
              if (columns[i] === undefined || columns[i].disabled) continue;
              // Turn duplicate columns into an array
              if (group_columns_by_name === true && obj[columns[i].name] !== undefined) {
                if (Array.isArray(obj[columns[i].name])) {
                  obj[columns[i].name] = obj[columns[i].name].concat(record[i]);
                } else {
                  obj[columns[i].name] = [obj[columns[i].name], record[i]];
                }
              } else {
                obj[columns[i].name] = record[i];
              }
            }
            // Without objname (default)
            if (raw === true || info === true) {
              var extRecord = Object.assign({
                record: obj
              }, raw === true ? {
                raw: this.state.rawBuffer.toString(encoding)
              } : {}, info === true ? {
                info: this.__infoRecord()
              } : {});
              var _err3 = this.__push(objname === undefined ? extRecord : [obj[objname], extRecord], push);
              if (_err3) {
                return _err3;
              }
            } else {
              var _err4 = this.__push(objname === undefined ? obj : [obj[objname], obj], push);
              if (_err4) {
                return _err4;
              }
            }
            // Without columns, records are array
          } else {
            if (raw === true || info === true) {
              var _extRecord = Object.assign({
                record: record
              }, raw === true ? {
                raw: this.state.rawBuffer.toString(encoding)
              } : {}, info === true ? {
                info: this.__infoRecord()
              } : {});
              var _err5 = this.__push(objname === undefined ? _extRecord : [record[objname], _extRecord], push);
              if (_err5) {
                return _err5;
              }
            } else {
              var _err6 = this.__push(objname === undefined ? record : [record[objname], record], push);
              if (_err6) {
                return _err6;
              }
            }
          }
        }
        this.__resetRecord();
      },
      __firstLineToColumns: function __firstLineToColumns(record) {
        var firstLineToHeaders = this.state.firstLineToHeaders;
        try {
          var headers = firstLineToHeaders === undefined ? record : firstLineToHeaders.call(null, record);
          if (!Array.isArray(headers)) {
            return this.__error(new CsvError$2('CSV_INVALID_COLUMN_MAPPING', ['Invalid Column Mapping:', 'expect an array from column function,', "got ".concat(JSON.stringify(headers))], this.options, this.__infoField(), {
              headers: headers
            }));
          }
          var normalizedHeaders = normalize_columns_array(headers);
          this.state.expectedRecordLength = normalizedHeaders.length;
          this.options.columns = normalizedHeaders;
          this.__resetRecord();
          return;
        } catch (err) {
          return err;
        }
      },
      __resetRecord: function __resetRecord() {
        if (this.options.raw === true) {
          this.state.rawBuffer.reset();
        }
        this.state.error = undefined;
        this.state.record = [];
        this.state.record_length = 0;
      },
      __onField: function __onField() {
        var _this$options6 = this.options,
          cast = _this$options6.cast,
          encoding = _this$options6.encoding,
          rtrim = _this$options6.rtrim,
          max_record_size = _this$options6.max_record_size;
        var _this$state4 = this.state,
          enabled = _this$state4.enabled,
          wasQuoting = _this$state4.wasQuoting;
        // Short circuit for the from_line options
        if (enabled === false) {
          return this.__resetField();
        }
        var field = this.state.field.toString(encoding);
        if (rtrim === true && wasQuoting === false) {
          field = field.trimRight();
        }
        if (cast === true) {
          var _this$__cast = this.__cast(field),
            _this$__cast2 = _slicedToArray(_this$__cast, 2),
            err = _this$__cast2[0],
            f = _this$__cast2[1];
          if (err !== undefined) return err;
          field = f;
        }
        this.state.record.push(field);
        // Increment record length if record size must not exceed a limit
        if (max_record_size !== 0 && typeof field === 'string') {
          this.state.record_length += field.length;
        }
        this.__resetField();
      },
      __resetField: function __resetField() {
        this.state.field.reset();
        this.state.wasQuoting = false;
      },
      __push: function __push(record, push) {
        var on_record = this.options.on_record;
        if (on_record !== undefined) {
          var _info2 = this.__infoRecord();
          try {
            record = on_record.call(null, record, _info2);
          } catch (err) {
            return err;
          }
          if (record === undefined || record === null) {
            return;
          }
        }
        push(record);
      },
      // Return a tuple with the error and the casted value
      __cast: function __cast(field) {
        var _this$options7 = this.options,
          columns = _this$options7.columns,
          relax_column_count = _this$options7.relax_column_count;
        var isColumns = Array.isArray(columns);
        // Dont loose time calling cast
        // because the final record is an object
        // and this field can't be associated to a key present in columns
        if (isColumns === true && relax_column_count && this.options.columns.length <= this.state.record.length) {
          return [undefined, undefined];
        }
        if (this.state.castField !== null) {
          try {
            var _info3 = this.__infoField();
            return [undefined, this.state.castField.call(null, field, _info3)];
          } catch (err) {
            return [err];
          }
        }
        if (this.__isFloat(field)) {
          return [undefined, parseFloat(field)];
        } else if (this.options.cast_date !== false) {
          var _info4 = this.__infoField();
          return [undefined, this.options.cast_date.call(null, field, _info4)];
        }
        return [undefined, field];
      },
      // Helper to test if a character is a space or a line delimiter
      __isCharTrimable: function __isCharTrimable(buf, pos) {
        var _this3 = this;
        var isTrim = function isTrim(buf, pos) {
          var timchars = _this3.state.timchars;
          loop1: for (var i = 0; i < timchars.length; i++) {
            var timchar = timchars[i];
            for (var j = 0; j < timchar.length; j++) {
              if (timchar[j] !== buf[pos + j]) continue loop1;
            }
            return timchar.length;
          }
          return 0;
        };
        return isTrim(buf, pos);
      },
      // Keep it in case we implement the `cast_int` option
      // __isInt(value){
      //   // return Number.isInteger(parseInt(value))
      //   // return !isNaN( parseInt( obj ) );
      //   return /^(\-|\+)?[1-9][0-9]*$/.test(value)
      // }
      __isFloat: function __isFloat(value) {
        return value - parseFloat(value) + 1 >= 0; // Borrowed from jquery
      },
      __compareBytes: function __compareBytes(sourceBuf, targetBuf, targetPos, firstByte) {
        if (sourceBuf[0] !== firstByte) return 0;
        var sourceLength = sourceBuf.length;
        for (var i = 1; i < sourceLength; i++) {
          if (sourceBuf[i] !== targetBuf[targetPos + i]) return 0;
        }
        return sourceLength;
      },
      __isDelimiter: function __isDelimiter(buf, pos, chr) {
        var _this$options8 = this.options,
          delimiter = _this$options8.delimiter,
          ignore_last_delimiters = _this$options8.ignore_last_delimiters;
        if (ignore_last_delimiters === true && this.state.record.length === this.options.columns.length - 1) {
          return 0;
        } else if (ignore_last_delimiters !== false && typeof ignore_last_delimiters === 'number' && this.state.record.length === ignore_last_delimiters - 1) {
          return 0;
        }
        loop1: for (var i = 0; i < delimiter.length; i++) {
          var del = delimiter[i];
          if (del[0] === chr) {
            for (var j = 1; j < del.length; j++) {
              if (del[j] !== buf[pos + j]) continue loop1;
            }
            return del.length;
          }
        }
        return 0;
      },
      __isRecordDelimiter: function __isRecordDelimiter(chr, buf, pos) {
        var record_delimiter = this.options.record_delimiter;
        var recordDelimiterLength = record_delimiter.length;
        loop1: for (var i = 0; i < recordDelimiterLength; i++) {
          var rd = record_delimiter[i];
          var rdLength = rd.length;
          if (rd[0] !== chr) {
            continue;
          }
          for (var j = 1; j < rdLength; j++) {
            if (rd[j] !== buf[pos + j]) {
              continue loop1;
            }
          }
          return rd.length;
        }
        return 0;
      },
      __isEscape: function __isEscape(buf, pos, chr) {
        var escape = this.options.escape;
        if (escape === null) return false;
        var l = escape.length;
        if (escape[0] === chr) {
          for (var i = 0; i < l; i++) {
            if (escape[i] !== buf[pos + i]) {
              return false;
            }
          }
          return true;
        }
        return false;
      },
      __isQuote: function __isQuote(buf, pos) {
        var quote = this.options.quote;
        if (quote === null) return false;
        var l = quote.length;
        for (var i = 0; i < l; i++) {
          if (quote[i] !== buf[pos + i]) {
            return false;
          }
        }
        return true;
      },
      __autoDiscoverRecordDelimiter: function __autoDiscoverRecordDelimiter(buf, pos) {
        var encoding = this.options.encoding;
        // Note, we don't need to cache this information in state,
        // It is only called on the first line until we find out a suitable
        // record delimiter.
        var rds = [
        // Important, the windows line ending must be before mac os 9
        Buffer.from('\r\n', encoding), Buffer.from('\n', encoding), Buffer.from('\r', encoding)];
        loop: for (var i = 0; i < rds.length; i++) {
          var l = rds[i].length;
          for (var j = 0; j < l; j++) {
            if (rds[i][j] !== buf[pos + j]) {
              continue loop;
            }
          }
          this.options.record_delimiter.push(rds[i]);
          this.state.recordDelimiterMaxLength = rds[i].length;
          return rds[i].length;
        }
        return 0;
      },
      __error: function __error(msg) {
        var _this$options9 = this.options,
          encoding = _this$options9.encoding,
          raw = _this$options9.raw,
          skip_records_with_error = _this$options9.skip_records_with_error;
        var err = typeof msg === 'string' ? new Error(msg) : msg;
        if (skip_records_with_error) {
          this.state.recordHasError = true;
          if (this.options.on_skip !== undefined) {
            this.options.on_skip(err, raw ? this.state.rawBuffer.toString(encoding) : undefined);
          }
          // this.emit('skip', err, raw ? this.state.rawBuffer.toString(encoding) : undefined);
          return undefined;
        } else {
          return err;
        }
      },
      __infoDataSet: function __infoDataSet() {
        return _objectSpread2(_objectSpread2({}, this.info), {}, {
          columns: this.options.columns
        });
      },
      __infoRecord: function __infoRecord() {
        var _this$options10 = this.options,
          columns = _this$options10.columns,
          raw = _this$options10.raw,
          encoding = _this$options10.encoding;
        return _objectSpread2(_objectSpread2({}, this.__infoDataSet()), {}, {
          error: this.state.error,
          header: columns === true,
          index: this.state.record.length,
          raw: raw ? this.state.rawBuffer.toString(encoding) : undefined
        });
      },
      __infoField: function __infoField() {
        var columns = this.options.columns;
        var isColumns = Array.isArray(columns);
        return _objectSpread2(_objectSpread2({}, this.__infoRecord()), {}, {
          column: isColumns === true ? columns.length > this.state.record.length ? columns[this.state.record.length].name : null : this.state.record.length,
          quoting: this.state.wasQuoting
        });
      }
    };
  };
  var parse$1 = function parse(data) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    if (typeof data === 'string') {
      data = Buffer.from(data);
    }
    var records = opts && opts.objname ? {} : [];
    var parser = transform(opts);
    var push = function push(record) {
      if (parser.options.objname === undefined) records.push(record);else {
        records[record[0]] = record[1];
      }
    };
    var close = function close() {};
    var err1 = parser.parse(data, false, push, close);
    if (err1 !== undefined) throw err1;
    var err2 = parser.parse(undefined, true, push, close);
    if (err2 !== undefined) throw err2;
    return records;
  };
  sync$1.CsvError = CsvError$2;
  sync$1.parse = parse$1;

  var cjs = {};

  var stream$2 = require$$0$3;
  var CsvError$1 = /*#__PURE__*/function (_Error) {
    function CsvError(code, message) {
      var _this;
      _classCallCheck(this, CsvError);
      if (Array.isArray(message)) message = message.join(' ');
      _this = _callSuper(this, CsvError, [message]);
      if (Error.captureStackTrace !== undefined) {
        Error.captureStackTrace(_this, CsvError);
      }
      _this.code = code;
      for (var _len = arguments.length, contexts = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        contexts[_key - 2] = arguments[_key];
      }
      for (var _i = 0, _contexts = contexts; _i < _contexts.length; _i++) {
        var context = _contexts[_i];
        for (var key in context) {
          var value = context[key];
          _this[key] = Buffer.isBuffer(value) ? value.toString() : value == null ? value : JSON.parse(JSON.stringify(value));
        }
      }
      return _this;
    }
    _inherits(CsvError, _Error);
    return _createClass(CsvError);
  }(/*#__PURE__*/_wrapNativeSuper(Error));
  var is_object$1 = function is_object(obj) {
    return _typeof(obj) === 'object' && obj !== null && !Array.isArray(obj);
  };

  // Lodash implementation of `get`

  var charCodeOfDot$1 = '.'.charCodeAt(0);
  var reEscapeChar$1 = /\\(\\)?/g;
  var rePropName$1 = RegExp(
  // Match anything that isn't a dot or bracket.
  '[^.[\\]]+' + '|' +
  // Or match property names within brackets.
  '\\[(?:' +
  // Match a non-string expression.
  '([^"\'][^[]*)' + '|' +
  // Or match strings (supports escaping characters).
  '(["\'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2' + ')\\]' + '|' +
  // Or match "" as the space between consecutive dots or empty brackets.
  '(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))', 'g');
  var reIsDeepProp$1 = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
  var reIsPlainProp$1 = /^\w*$/;
  var getTag$1 = function getTag(value) {
    return Object.prototype.toString.call(value);
  };
  var isSymbol$1 = function isSymbol(value) {
    var type = _typeof(value);
    return type === 'symbol' || type === 'object' && value && getTag$1(value) === '[object Symbol]';
  };
  var isKey$1 = function isKey(value, object) {
    if (Array.isArray(value)) {
      return false;
    }
    var type = _typeof(value);
    if (type === 'number' || type === 'symbol' || type === 'boolean' || !value || isSymbol$1(value)) {
      return true;
    }
    return reIsPlainProp$1.test(value) || !reIsDeepProp$1.test(value) || object != null && value in Object(object);
  };
  var stringToPath$1 = function stringToPath(string) {
    var result = [];
    if (string.charCodeAt(0) === charCodeOfDot$1) {
      result.push('');
    }
    string.replace(rePropName$1, function (match, expression, quote, subString) {
      var key = match;
      if (quote) {
        key = subString.replace(reEscapeChar$1, '$1');
      } else if (expression) {
        key = expression.trim();
      }
      result.push(key);
    });
    return result;
  };
  var castPath$1 = function castPath(value, object) {
    if (Array.isArray(value)) {
      return value;
    } else {
      return isKey$1(value, object) ? [value] : stringToPath$1(value);
    }
  };
  var toKey$1 = function toKey(value) {
    if (typeof value === 'string' || isSymbol$1(value)) return value;
    var result = "".concat(value);
    // eslint-disable-next-line
    return result == '0' && 1 / value == -INFINITY ? '-0' : result;
  };
  var get$1 = function get(object, path) {
    path = castPath$1(path, object);
    var index = 0;
    var length = path.length;
    while (object != null && index < length) {
      object = object[toKey$1(path[index++])];
    }
    return index && index === length ? object : undefined;
  };
  var normalize_columns$1 = function normalize_columns(columns) {
    if (columns === undefined || columns === null) {
      return [undefined, undefined];
    }
    if (_typeof(columns) !== 'object') {
      return [Error('Invalid option "columns": expect an array or an object')];
    }
    if (!Array.isArray(columns)) {
      var newcolumns = [];
      for (var k in columns) {
        newcolumns.push({
          key: k,
          header: columns[k]
        });
      }
      columns = newcolumns;
    } else {
      var _newcolumns = [];
      var _iterator = _createForOfIteratorHelper(columns),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var column = _step.value;
          if (typeof column === 'string') {
            _newcolumns.push({
              key: column,
              header: column
            });
          } else if (_typeof(column) === 'object' && column !== null && !Array.isArray(column)) {
            if (!column.key) {
              return [Error('Invalid column definition: property "key" is required')];
            }
            if (column.header === undefined) {
              column.header = column.key;
            }
            _newcolumns.push(column);
          } else {
            return [Error('Invalid column definition: expect a string or an object')];
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      columns = _newcolumns;
    }
    return [undefined, columns];
  };
  var underscore$1 = function underscore(str) {
    return str.replace(/([A-Z])/g, function (_, match) {
      return '_' + match.toLowerCase();
    });
  };
  var normalize_options$1 = function normalize_options(opts) {
    var options = {};
    // Merge with user options
    for (var opt in opts) {
      options[underscore$1(opt)] = opts[opt];
    }
    // Normalize option `bom`
    if (options.bom === undefined || options.bom === null || options.bom === false) {
      options.bom = false;
    } else if (options.bom !== true) {
      return [new CsvError$1('CSV_OPTION_BOOLEAN_INVALID_TYPE', ['option `bom` is optional and must be a boolean value,', "got ".concat(JSON.stringify(options.bom))])];
    }
    // Normalize option `delimiter`
    if (options.delimiter === undefined || options.delimiter === null) {
      options.delimiter = ',';
    } else if (Buffer.isBuffer(options.delimiter)) {
      options.delimiter = options.delimiter.toString();
    } else if (typeof options.delimiter !== 'string') {
      return [new CsvError$1('CSV_OPTION_DELIMITER_INVALID_TYPE', ['option `delimiter` must be a buffer or a string,', "got ".concat(JSON.stringify(options.delimiter))])];
    }
    // Normalize option `quote`
    if (options.quote === undefined || options.quote === null) {
      options.quote = '"';
    } else if (options.quote === true) {
      options.quote = '"';
    } else if (options.quote === false) {
      options.quote = '';
    } else if (Buffer.isBuffer(options.quote)) {
      options.quote = options.quote.toString();
    } else if (typeof options.quote !== 'string') {
      return [new CsvError$1('CSV_OPTION_QUOTE_INVALID_TYPE', ['option `quote` must be a boolean, a buffer or a string,', "got ".concat(JSON.stringify(options.quote))])];
    }
    // Normalize option `quoted`
    if (options.quoted === undefined || options.quoted === null) {
      options.quoted = false;
    }
    // Normalize option `escape_formulas`
    if (options.escape_formulas === undefined || options.escape_formulas === null) {
      options.escape_formulas = false;
    } else if (typeof options.escape_formulas !== 'boolean') {
      return [new CsvError$1('CSV_OPTION_ESCAPE_FORMULAS_INVALID_TYPE', ['option `escape_formulas` must be a boolean,', "got ".concat(JSON.stringify(options.escape_formulas))])];
    }
    // Normalize option `quoted_empty`
    if (options.quoted_empty === undefined || options.quoted_empty === null) {
      options.quoted_empty = undefined;
    }
    // Normalize option `quoted_match`
    if (options.quoted_match === undefined || options.quoted_match === null || options.quoted_match === false) {
      options.quoted_match = null;
    } else if (!Array.isArray(options.quoted_match)) {
      options.quoted_match = [options.quoted_match];
    }
    if (options.quoted_match) {
      var _iterator2 = _createForOfIteratorHelper(options.quoted_match),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var quoted_match = _step2.value;
          var isString = typeof quoted_match === 'string';
          var isRegExp = quoted_match instanceof RegExp;
          if (!isString && !isRegExp) {
            return [Error("Invalid Option: quoted_match must be a string or a regex, got ".concat(JSON.stringify(quoted_match)))];
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
    // Normalize option `quoted_string`
    if (options.quoted_string === undefined || options.quoted_string === null) {
      options.quoted_string = false;
    }
    // Normalize option `eof`
    if (options.eof === undefined || options.eof === null) {
      options.eof = true;
    }
    // Normalize option `escape`
    if (options.escape === undefined || options.escape === null) {
      options.escape = '"';
    } else if (Buffer.isBuffer(options.escape)) {
      options.escape = options.escape.toString();
    } else if (typeof options.escape !== 'string') {
      return [Error("Invalid Option: escape must be a buffer or a string, got ".concat(JSON.stringify(options.escape)))];
    }
    if (options.escape.length > 1) {
      return [Error("Invalid Option: escape must be one character, got ".concat(options.escape.length, " characters"))];
    }
    // Normalize option `header`
    if (options.header === undefined || options.header === null) {
      options.header = false;
    }
    // Normalize option `columns`
    var _normalize_columns = normalize_columns$1(options.columns),
      _normalize_columns2 = _slicedToArray(_normalize_columns, 2),
      errColumns = _normalize_columns2[0],
      columns = _normalize_columns2[1];
    if (errColumns !== undefined) return [errColumns];
    options.columns = columns;
    // Normalize option `quoted`
    if (options.quoted === undefined || options.quoted === null) {
      options.quoted = false;
    }
    // Normalize option `cast`
    if (options.cast === undefined || options.cast === null) {
      options.cast = {};
    }
    // Normalize option cast.bigint
    if (options.cast.bigint === undefined || options.cast.bigint === null) {
      // Cast boolean to string by default
      options.cast.bigint = function (value) {
        return '' + value;
      };
    }
    // Normalize option cast.boolean
    if (options.cast["boolean"] === undefined || options.cast["boolean"] === null) {
      // Cast boolean to string by default
      options.cast["boolean"] = function (value) {
        return value ? '1' : '';
      };
    }
    // Normalize option cast.date
    if (options.cast.date === undefined || options.cast.date === null) {
      // Cast date to timestamp string by default
      options.cast.date = function (value) {
        return '' + value.getTime();
      };
    }
    // Normalize option cast.number
    if (options.cast.number === undefined || options.cast.number === null) {
      // Cast number to string using native casting by default
      options.cast.number = function (value) {
        return '' + value;
      };
    }
    // Normalize option cast.object
    if (options.cast.object === undefined || options.cast.object === null) {
      // Stringify object as JSON by default
      options.cast.object = function (value) {
        return JSON.stringify(value);
      };
    }
    // Normalize option cast.string
    if (options.cast.string === undefined || options.cast.string === null) {
      // Leave string untouched
      options.cast.string = function (value) {
        return value;
      };
    }
    // Normalize option `on_record`
    if (options.on_record !== undefined && typeof options.on_record !== 'function') {
      return [Error("Invalid Option: \"on_record\" must be a function.")];
    }
    // Normalize option `record_delimiter`
    if (options.record_delimiter === undefined || options.record_delimiter === null) {
      options.record_delimiter = '\n';
    } else if (Buffer.isBuffer(options.record_delimiter)) {
      options.record_delimiter = options.record_delimiter.toString();
    } else if (typeof options.record_delimiter !== 'string') {
      return [Error("Invalid Option: record_delimiter must be a buffer or a string, got ".concat(JSON.stringify(options.record_delimiter)))];
    }
    switch (options.record_delimiter) {
      case 'unix':
        options.record_delimiter = "\n";
        break;
      case 'mac':
        options.record_delimiter = "\r";
        break;
      case 'windows':
        options.record_delimiter = "\r\n";
        break;
      case 'ascii':
        options.record_delimiter = "\x1E";
        break;
      case 'unicode':
        options.record_delimiter = "\u2028";
        break;
    }
    return [undefined, options];
  };
  var bom_utf8$1 = Buffer.from([239, 187, 191]);
  var stringifier$1 = function stringifier(options, state, info) {
    return {
      options: options,
      state: state,
      info: info,
      __transform: function __transform(chunk, push) {
        // Chunk validation
        if (!Array.isArray(chunk) && _typeof(chunk) !== 'object') {
          return Error("Invalid Record: expect an array or an object, got ".concat(JSON.stringify(chunk)));
        }
        // Detect columns from the first record
        if (this.info.records === 0) {
          if (Array.isArray(chunk)) {
            if (this.options.header === true && this.options.columns === undefined) {
              return Error('Undiscoverable Columns: header option requires column option or object records');
            }
          } else if (this.options.columns === undefined) {
            var _normalize_columns3 = normalize_columns$1(Object.keys(chunk)),
              _normalize_columns4 = _slicedToArray(_normalize_columns3, 2),
              _err = _normalize_columns4[0],
              columns = _normalize_columns4[1];
            if (_err) return;
            this.options.columns = columns;
          }
        }
        // Emit the header
        if (this.info.records === 0) {
          this.bom(push);
          var _err2 = this.headers(push);
          if (_err2) return _err2;
        }
        // Emit and stringify the record if an object or an array
        try {
          // this.emit('record', chunk, this.info.records);
          if (this.options.on_record) {
            this.options.on_record(chunk, this.info.records);
          }
        } catch (err) {
          return err;
        }
        // Convert the record into a string
        var err, chunk_string;
        if (this.options.eof) {
          var _this$stringify = this.stringify(chunk);
          var _this$stringify2 = _slicedToArray(_this$stringify, 2);
          err = _this$stringify2[0];
          chunk_string = _this$stringify2[1];
          if (err) return err;
          if (chunk_string === undefined) {
            return;
          } else {
            chunk_string = chunk_string + this.options.record_delimiter;
          }
        } else {
          var _this$stringify3 = this.stringify(chunk);
          var _this$stringify4 = _slicedToArray(_this$stringify3, 2);
          err = _this$stringify4[0];
          chunk_string = _this$stringify4[1];
          if (err) return err;
          if (chunk_string === undefined) {
            return;
          } else {
            if (this.options.header || this.info.records) {
              chunk_string = this.options.record_delimiter + chunk_string;
            }
          }
        }
        // Emit the csv
        this.info.records++;
        push(chunk_string);
      },
      stringify: function stringify(chunk) {
        var _this2 = this;
        var chunkIsHeader = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        if (_typeof(chunk) !== 'object') {
          return [undefined, chunk];
        }
        var columns = this.options.columns;
        var record = [];
        // Record is an array
        if (Array.isArray(chunk)) {
          // We are getting an array but the user has specified output columns. In
          // this case, we respect the columns indexes
          if (columns) {
            chunk.splice(columns.length);
          }
          // Cast record elements
          for (var i = 0; i < chunk.length; i++) {
            var field = chunk[i];
            var _this$__cast = this.__cast(field, {
                index: i,
                column: i,
                records: this.info.records,
                header: chunkIsHeader
              }),
              _this$__cast2 = _slicedToArray(_this$__cast, 2),
              err = _this$__cast2[0],
              value = _this$__cast2[1];
            if (err) return [err];
            record[i] = [value, field];
          }
          // Record is a literal object
          // `columns` is always defined: it is either provided or discovered.
        } else {
          for (var _i2 = 0; _i2 < columns.length; _i2++) {
            var _field = get$1(chunk, columns[_i2].key);
            var _this$__cast3 = this.__cast(_field, {
                index: _i2,
                column: columns[_i2].key,
                records: this.info.records,
                header: chunkIsHeader
              }),
              _this$__cast4 = _slicedToArray(_this$__cast3, 2),
              _err3 = _this$__cast4[0],
              _value = _this$__cast4[1];
            if (_err3) return [_err3];
            record[_i2] = [_value, _field];
          }
        }
        var csvrecord = '';
        var _loop = function _loop() {
            var options, err;
            // eslint-disable-next-line
            var _record$_i = _slicedToArray(record[_i3], 2),
              value = _record$_i[0],
              field = _record$_i[1];
            if (typeof value === "string") {
              options = _this2.options;
            } else if (is_object$1(value)) {
              options = value;
              value = options.value;
              delete options.value;
              if (typeof value !== "string" && value !== undefined && value !== null) {
                if (err) return {
                  v: [Error("Invalid Casting Value: returned value must return a string, null or undefined, got ".concat(JSON.stringify(value)))]
                };
              }
              options = _objectSpread2(_objectSpread2({}, _this2.options), options);
              var _normalize_options = normalize_options$1(options);
              var _normalize_options2 = _slicedToArray(_normalize_options, 2);
              err = _normalize_options2[0];
              options = _normalize_options2[1];
              if (err !== undefined) {
                return {
                  v: [err]
                };
              }
            } else if (value === undefined || value === null) {
              options = _this2.options;
            } else {
              return {
                v: [Error("Invalid Casting Value: returned value must return a string, an object, null or undefined, got ".concat(JSON.stringify(value)))]
              };
            }
            var _options = options,
              delimiter = _options.delimiter,
              escape = _options.escape,
              quote = _options.quote,
              quoted = _options.quoted,
              quoted_empty = _options.quoted_empty,
              quoted_string = _options.quoted_string,
              quoted_match = _options.quoted_match,
              record_delimiter = _options.record_delimiter,
              escape_formulas = _options.escape_formulas;
            if ('' === value && '' === field) {
              var quotedMatch = quoted_match && quoted_match.filter(function (quoted_match) {
                if (typeof quoted_match === 'string') {
                  return value.indexOf(quoted_match) !== -1;
                } else {
                  return quoted_match.test(value);
                }
              });
              quotedMatch = quotedMatch && quotedMatch.length > 0;
              var shouldQuote = quotedMatch || true === quoted_empty || true === quoted_string && false !== quoted_empty;
              if (shouldQuote === true) {
                value = quote + value + quote;
              }
              csvrecord += value;
            } else if (value) {
              if (typeof value !== 'string') {
                return {
                  v: [Error("Formatter must return a string, null or undefined, got ".concat(JSON.stringify(value)))]
                };
              }
              var containsdelimiter = delimiter.length && value.indexOf(delimiter) >= 0;
              var containsQuote = quote !== '' && value.indexOf(quote) >= 0;
              var containsEscape = value.indexOf(escape) >= 0 && escape !== quote;
              var containsRecordDelimiter = value.indexOf(record_delimiter) >= 0;
              var quotedString = quoted_string && typeof field === 'string';
              var _quotedMatch = quoted_match && quoted_match.filter(function (quoted_match) {
                if (typeof quoted_match === 'string') {
                  return value.indexOf(quoted_match) !== -1;
                } else {
                  return quoted_match.test(value);
                }
              });
              _quotedMatch = _quotedMatch && _quotedMatch.length > 0;
              // See https://github.com/adaltas/node-csv/pull/387
              // More about CSV injection or formula injection, when websites embed
              // untrusted input inside CSV files:
              // https://owasp.org/www-community/attacks/CSV_Injection
              // http://georgemauer.net/2017/10/07/csv-injection.html
              // Apple Numbers unicode normalization is empirical from testing
              if (escape_formulas) {
                switch (value[0]) {
                  case '=':
                  case '+':
                  case '-':
                  case '@':
                  case '\t':
                  case '\r':
                  case "\uFF1D": // Unicode '='
                  case "\uFF0B": // Unicode '+'
                  case "\uFF0D": // Unicode '-'
                  case "\uFF20":
                    // Unicode '@'
                    value = "'".concat(value);
                    break;
                }
              }
              var _shouldQuote = containsQuote === true || containsdelimiter || containsRecordDelimiter || quoted || quotedString || _quotedMatch;
              if (_shouldQuote === true && containsEscape === true) {
                var regexp = escape === '\\' ? new RegExp(escape + escape, 'g') : new RegExp(escape, 'g');
                value = value.replace(regexp, escape + escape);
              }
              if (containsQuote === true) {
                var _regexp = new RegExp(quote, 'g');
                value = value.replace(_regexp, escape + quote);
              }
              if (_shouldQuote === true) {
                value = quote + value + quote;
              }
              csvrecord += value;
            } else if (quoted_empty === true || field === '' && quoted_string === true && quoted_empty !== false) {
              csvrecord += quote + quote;
            }
            if (_i3 !== record.length - 1) {
              csvrecord += delimiter;
            }
          },
          _ret;
        for (var _i3 = 0; _i3 < record.length; _i3++) {
          _ret = _loop();
          if (_ret) return _ret.v;
        }
        return [undefined, csvrecord];
      },
      bom: function bom(push) {
        if (this.options.bom !== true) {
          return;
        }
        push(bom_utf8$1);
      },
      headers: function headers(push) {
        if (this.options.header === false) {
          return;
        }
        if (this.options.columns === undefined) {
          return;
        }
        var err;
        var headers = this.options.columns.map(function (column) {
          return column.header;
        });
        if (this.options.eof) {
          var _this$stringify5 = this.stringify(headers, true);
          var _this$stringify6 = _slicedToArray(_this$stringify5, 2);
          err = _this$stringify6[0];
          headers = _this$stringify6[1];
          headers += this.options.record_delimiter;
        } else {
          var _this$stringify7 = this.stringify(headers);
          var _this$stringify8 = _slicedToArray(_this$stringify7, 2);
          err = _this$stringify8[0];
          headers = _this$stringify8[1];
        }
        if (err) return err;
        push(headers);
      },
      __cast: function __cast(value, context) {
        var type = _typeof(value);
        try {
          if (type === 'string') {
            // Fine for 99% of the cases
            return [undefined, this.options.cast.string(value, context)];
          } else if (type === 'bigint') {
            return [undefined, this.options.cast.bigint(value, context)];
          } else if (type === 'number') {
            return [undefined, this.options.cast.number(value, context)];
          } else if (type === 'boolean') {
            return [undefined, this.options.cast["boolean"](value, context)];
          } else if (value instanceof Date) {
            return [undefined, this.options.cast.date(value, context)];
          } else if (type === 'object' && value !== null) {
            return [undefined, this.options.cast.object(value, context)];
          } else {
            return [undefined, value, value];
          }
        } catch (err) {
          return [err];
        }
      }
    };
  };
  var Stringifier = /*#__PURE__*/function (_stream$Transform) {
    function Stringifier() {
      var _this3;
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      _classCallCheck(this, Stringifier);
      _this3 = _callSuper(this, Stringifier, [_objectSpread2(_objectSpread2({}, {
        writableObjectMode: true
      }), opts)]);
      var _normalize_options3 = normalize_options$1(opts),
        _normalize_options4 = _slicedToArray(_normalize_options3, 2),
        err = _normalize_options4[0],
        options = _normalize_options4[1];
      if (err !== undefined) throw err;
      // Expose options
      _this3.options = options;
      // Internal state
      _this3.state = {
        stop: false
      };
      // Information
      _this3.info = {
        records: 0
      };
      _this3.api = stringifier$1(_this3.options, _this3.state, _this3.info);
      _this3.api.options.on_record = function () {
        var _this4;
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        (_this4 = _this3).emit.apply(_this4, ['record'].concat(args));
      };
      return _this3;
    }
    _inherits(Stringifier, _stream$Transform);
    return _createClass(Stringifier, [{
      key: "_transform",
      value: function _transform(chunk, encoding, callback) {
        if (this.state.stop === true) {
          return;
        }
        var err = this.api.__transform(chunk, this.push.bind(this));
        if (err !== undefined) {
          this.state.stop = true;
        }
        callback(err);
      }
    }, {
      key: "_flush",
      value: function _flush(callback) {
        if (this.state.stop === true) {
          // Note, Node.js 12 call flush even after an error, we must prevent
          // `callback` from being called in flush without any error.
          return;
        }
        if (this.info.records === 0) {
          this.api.bom(this.push.bind(this));
          var err = this.api.headers(this.push.bind(this));
          if (err) callback(err);
        }
        callback();
      }
    }]);
  }(stream$2.Transform);
  var stringify$1 = function stringify() {
    var data, options, callback;
    for (var i in arguments) {
      var argument = arguments[i];
      var type = _typeof(argument);
      if (data === undefined && Array.isArray(argument)) {
        data = argument;
      } else if (options === undefined && is_object$1(argument)) {
        options = argument;
      } else if (callback === undefined && type === 'function') {
        callback = argument;
      } else {
        throw new CsvError$1('CSV_INVALID_ARGUMENT', ['Invalid argument:', "got ".concat(JSON.stringify(argument), " at index ").concat(i)]);
      }
    }
    var stringifier = new Stringifier(options);
    if (callback) {
      var chunks = [];
      stringifier.on('readable', function () {
        var chunk;
        while ((chunk = this.read()) !== null) {
          chunks.push(chunk);
        }
      });
      stringifier.on('error', function (err) {
        callback(err);
      });
      stringifier.on('end', function () {
        try {
          callback(undefined, chunks.join(''));
        } catch (err) {
          // This can happen if the `chunks` is extremely long; it may throw
          // "Cannot create a string longer than 0x1fffffe8 characters"
          // See [#386](https://github.com/adaltas/node-csv/pull/386)
          callback(err);
          return;
        }
      });
    }
    if (data !== undefined) {
      var writer = function writer() {
        var _iterator3 = _createForOfIteratorHelper(data),
          _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var record = _step3.value;
            stringifier.write(record);
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
        stringifier.end();
      };
      // Support Deno, Rollup doesnt provide a shim for setImmediate
      if (typeof setImmediate === 'function') {
        setImmediate(writer);
      } else {
        setTimeout(writer, 0);
      }
    }
    return stringifier;
  };
  cjs.CsvError = CsvError$1;
  cjs.Stringifier = Stringifier;
  cjs.stringify = stringify$1;

  var sync = {};

  // Lodash implementation of `get`

  var charCodeOfDot = '.'.charCodeAt(0);
  var reEscapeChar = /\\(\\)?/g;
  var rePropName = RegExp(
  // Match anything that isn't a dot or bracket.
  '[^.[\\]]+' + '|' +
  // Or match property names within brackets.
  '\\[(?:' +
  // Match a non-string expression.
  '([^"\'][^[]*)' + '|' +
  // Or match strings (supports escaping characters).
  '(["\'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2' + ')\\]' + '|' +
  // Or match "" as the space between consecutive dots or empty brackets.
  '(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))', 'g');
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
  var reIsPlainProp = /^\w*$/;
  var getTag = function getTag(value) {
    return Object.prototype.toString.call(value);
  };
  var isSymbol = function isSymbol(value) {
    var type = _typeof(value);
    return type === 'symbol' || type === 'object' && value && getTag(value) === '[object Symbol]';
  };
  var isKey = function isKey(value, object) {
    if (Array.isArray(value)) {
      return false;
    }
    var type = _typeof(value);
    if (type === 'number' || type === 'symbol' || type === 'boolean' || !value || isSymbol(value)) {
      return true;
    }
    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
  };
  var stringToPath = function stringToPath(string) {
    var result = [];
    if (string.charCodeAt(0) === charCodeOfDot) {
      result.push('');
    }
    string.replace(rePropName, function (match, expression, quote, subString) {
      var key = match;
      if (quote) {
        key = subString.replace(reEscapeChar, '$1');
      } else if (expression) {
        key = expression.trim();
      }
      result.push(key);
    });
    return result;
  };
  var castPath = function castPath(value, object) {
    if (Array.isArray(value)) {
      return value;
    } else {
      return isKey(value, object) ? [value] : stringToPath(value);
    }
  };
  var toKey = function toKey(value) {
    if (typeof value === 'string' || isSymbol(value)) return value;
    var result = "".concat(value);
    // eslint-disable-next-line
    return result == '0' && 1 / value == -INFINITY ? '-0' : result;
  };
  var get = function get(object, path) {
    path = castPath(path, object);
    var index = 0;
    var length = path.length;
    while (object != null && index < length) {
      object = object[toKey(path[index++])];
    }
    return index && index === length ? object : undefined;
  };
  var is_object = function is_object(obj) {
    return _typeof(obj) === 'object' && obj !== null && !Array.isArray(obj);
  };
  var normalize_columns = function normalize_columns(columns) {
    if (columns === undefined || columns === null) {
      return [undefined, undefined];
    }
    if (_typeof(columns) !== 'object') {
      return [Error('Invalid option "columns": expect an array or an object')];
    }
    if (!Array.isArray(columns)) {
      var newcolumns = [];
      for (var k in columns) {
        newcolumns.push({
          key: k,
          header: columns[k]
        });
      }
      columns = newcolumns;
    } else {
      var _newcolumns = [];
      var _iterator = _createForOfIteratorHelper(columns),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var column = _step.value;
          if (typeof column === 'string') {
            _newcolumns.push({
              key: column,
              header: column
            });
          } else if (_typeof(column) === 'object' && column !== null && !Array.isArray(column)) {
            if (!column.key) {
              return [Error('Invalid column definition: property "key" is required')];
            }
            if (column.header === undefined) {
              column.header = column.key;
            }
            _newcolumns.push(column);
          } else {
            return [Error('Invalid column definition: expect a string or an object')];
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      columns = _newcolumns;
    }
    return [undefined, columns];
  };
  var CsvError = /*#__PURE__*/function (_Error) {
    function CsvError(code, message) {
      var _this;
      _classCallCheck(this, CsvError);
      if (Array.isArray(message)) message = message.join(' ');
      _this = _callSuper(this, CsvError, [message]);
      if (Error.captureStackTrace !== undefined) {
        Error.captureStackTrace(_this, CsvError);
      }
      _this.code = code;
      for (var _len = arguments.length, contexts = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        contexts[_key - 2] = arguments[_key];
      }
      for (var _i = 0, _contexts = contexts; _i < _contexts.length; _i++) {
        var context = _contexts[_i];
        for (var key in context) {
          var value = context[key];
          _this[key] = Buffer.isBuffer(value) ? value.toString() : value == null ? value : JSON.parse(JSON.stringify(value));
        }
      }
      return _this;
    }
    _inherits(CsvError, _Error);
    return _createClass(CsvError);
  }(/*#__PURE__*/_wrapNativeSuper(Error));
  var underscore = function underscore(str) {
    return str.replace(/([A-Z])/g, function (_, match) {
      return '_' + match.toLowerCase();
    });
  };
  var normalize_options = function normalize_options(opts) {
    var options = {};
    // Merge with user options
    for (var opt in opts) {
      options[underscore(opt)] = opts[opt];
    }
    // Normalize option `bom`
    if (options.bom === undefined || options.bom === null || options.bom === false) {
      options.bom = false;
    } else if (options.bom !== true) {
      return [new CsvError('CSV_OPTION_BOOLEAN_INVALID_TYPE', ['option `bom` is optional and must be a boolean value,', "got ".concat(JSON.stringify(options.bom))])];
    }
    // Normalize option `delimiter`
    if (options.delimiter === undefined || options.delimiter === null) {
      options.delimiter = ',';
    } else if (Buffer.isBuffer(options.delimiter)) {
      options.delimiter = options.delimiter.toString();
    } else if (typeof options.delimiter !== 'string') {
      return [new CsvError('CSV_OPTION_DELIMITER_INVALID_TYPE', ['option `delimiter` must be a buffer or a string,', "got ".concat(JSON.stringify(options.delimiter))])];
    }
    // Normalize option `quote`
    if (options.quote === undefined || options.quote === null) {
      options.quote = '"';
    } else if (options.quote === true) {
      options.quote = '"';
    } else if (options.quote === false) {
      options.quote = '';
    } else if (Buffer.isBuffer(options.quote)) {
      options.quote = options.quote.toString();
    } else if (typeof options.quote !== 'string') {
      return [new CsvError('CSV_OPTION_QUOTE_INVALID_TYPE', ['option `quote` must be a boolean, a buffer or a string,', "got ".concat(JSON.stringify(options.quote))])];
    }
    // Normalize option `quoted`
    if (options.quoted === undefined || options.quoted === null) {
      options.quoted = false;
    }
    // Normalize option `escape_formulas`
    if (options.escape_formulas === undefined || options.escape_formulas === null) {
      options.escape_formulas = false;
    } else if (typeof options.escape_formulas !== 'boolean') {
      return [new CsvError('CSV_OPTION_ESCAPE_FORMULAS_INVALID_TYPE', ['option `escape_formulas` must be a boolean,', "got ".concat(JSON.stringify(options.escape_formulas))])];
    }
    // Normalize option `quoted_empty`
    if (options.quoted_empty === undefined || options.quoted_empty === null) {
      options.quoted_empty = undefined;
    }
    // Normalize option `quoted_match`
    if (options.quoted_match === undefined || options.quoted_match === null || options.quoted_match === false) {
      options.quoted_match = null;
    } else if (!Array.isArray(options.quoted_match)) {
      options.quoted_match = [options.quoted_match];
    }
    if (options.quoted_match) {
      var _iterator2 = _createForOfIteratorHelper(options.quoted_match),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var quoted_match = _step2.value;
          var isString = typeof quoted_match === 'string';
          var isRegExp = quoted_match instanceof RegExp;
          if (!isString && !isRegExp) {
            return [Error("Invalid Option: quoted_match must be a string or a regex, got ".concat(JSON.stringify(quoted_match)))];
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
    // Normalize option `quoted_string`
    if (options.quoted_string === undefined || options.quoted_string === null) {
      options.quoted_string = false;
    }
    // Normalize option `eof`
    if (options.eof === undefined || options.eof === null) {
      options.eof = true;
    }
    // Normalize option `escape`
    if (options.escape === undefined || options.escape === null) {
      options.escape = '"';
    } else if (Buffer.isBuffer(options.escape)) {
      options.escape = options.escape.toString();
    } else if (typeof options.escape !== 'string') {
      return [Error("Invalid Option: escape must be a buffer or a string, got ".concat(JSON.stringify(options.escape)))];
    }
    if (options.escape.length > 1) {
      return [Error("Invalid Option: escape must be one character, got ".concat(options.escape.length, " characters"))];
    }
    // Normalize option `header`
    if (options.header === undefined || options.header === null) {
      options.header = false;
    }
    // Normalize option `columns`
    var _normalize_columns = normalize_columns(options.columns),
      _normalize_columns2 = _slicedToArray(_normalize_columns, 2),
      errColumns = _normalize_columns2[0],
      columns = _normalize_columns2[1];
    if (errColumns !== undefined) return [errColumns];
    options.columns = columns;
    // Normalize option `quoted`
    if (options.quoted === undefined || options.quoted === null) {
      options.quoted = false;
    }
    // Normalize option `cast`
    if (options.cast === undefined || options.cast === null) {
      options.cast = {};
    }
    // Normalize option cast.bigint
    if (options.cast.bigint === undefined || options.cast.bigint === null) {
      // Cast boolean to string by default
      options.cast.bigint = function (value) {
        return '' + value;
      };
    }
    // Normalize option cast.boolean
    if (options.cast["boolean"] === undefined || options.cast["boolean"] === null) {
      // Cast boolean to string by default
      options.cast["boolean"] = function (value) {
        return value ? '1' : '';
      };
    }
    // Normalize option cast.date
    if (options.cast.date === undefined || options.cast.date === null) {
      // Cast date to timestamp string by default
      options.cast.date = function (value) {
        return '' + value.getTime();
      };
    }
    // Normalize option cast.number
    if (options.cast.number === undefined || options.cast.number === null) {
      // Cast number to string using native casting by default
      options.cast.number = function (value) {
        return '' + value;
      };
    }
    // Normalize option cast.object
    if (options.cast.object === undefined || options.cast.object === null) {
      // Stringify object as JSON by default
      options.cast.object = function (value) {
        return JSON.stringify(value);
      };
    }
    // Normalize option cast.string
    if (options.cast.string === undefined || options.cast.string === null) {
      // Leave string untouched
      options.cast.string = function (value) {
        return value;
      };
    }
    // Normalize option `on_record`
    if (options.on_record !== undefined && typeof options.on_record !== 'function') {
      return [Error("Invalid Option: \"on_record\" must be a function.")];
    }
    // Normalize option `record_delimiter`
    if (options.record_delimiter === undefined || options.record_delimiter === null) {
      options.record_delimiter = '\n';
    } else if (Buffer.isBuffer(options.record_delimiter)) {
      options.record_delimiter = options.record_delimiter.toString();
    } else if (typeof options.record_delimiter !== 'string') {
      return [Error("Invalid Option: record_delimiter must be a buffer or a string, got ".concat(JSON.stringify(options.record_delimiter)))];
    }
    switch (options.record_delimiter) {
      case 'unix':
        options.record_delimiter = "\n";
        break;
      case 'mac':
        options.record_delimiter = "\r";
        break;
      case 'windows':
        options.record_delimiter = "\r\n";
        break;
      case 'ascii':
        options.record_delimiter = "\x1E";
        break;
      case 'unicode':
        options.record_delimiter = "\u2028";
        break;
    }
    return [undefined, options];
  };
  var bom_utf8 = Buffer.from([239, 187, 191]);
  var stringifier = function stringifier(options, state, info) {
    return {
      options: options,
      state: state,
      info: info,
      __transform: function __transform(chunk, push) {
        // Chunk validation
        if (!Array.isArray(chunk) && _typeof(chunk) !== 'object') {
          return Error("Invalid Record: expect an array or an object, got ".concat(JSON.stringify(chunk)));
        }
        // Detect columns from the first record
        if (this.info.records === 0) {
          if (Array.isArray(chunk)) {
            if (this.options.header === true && this.options.columns === undefined) {
              return Error('Undiscoverable Columns: header option requires column option or object records');
            }
          } else if (this.options.columns === undefined) {
            var _normalize_columns3 = normalize_columns(Object.keys(chunk)),
              _normalize_columns4 = _slicedToArray(_normalize_columns3, 2),
              _err = _normalize_columns4[0],
              columns = _normalize_columns4[1];
            if (_err) return;
            this.options.columns = columns;
          }
        }
        // Emit the header
        if (this.info.records === 0) {
          this.bom(push);
          var _err2 = this.headers(push);
          if (_err2) return _err2;
        }
        // Emit and stringify the record if an object or an array
        try {
          // this.emit('record', chunk, this.info.records);
          if (this.options.on_record) {
            this.options.on_record(chunk, this.info.records);
          }
        } catch (err) {
          return err;
        }
        // Convert the record into a string
        var err, chunk_string;
        if (this.options.eof) {
          var _this$stringify = this.stringify(chunk);
          var _this$stringify2 = _slicedToArray(_this$stringify, 2);
          err = _this$stringify2[0];
          chunk_string = _this$stringify2[1];
          if (err) return err;
          if (chunk_string === undefined) {
            return;
          } else {
            chunk_string = chunk_string + this.options.record_delimiter;
          }
        } else {
          var _this$stringify3 = this.stringify(chunk);
          var _this$stringify4 = _slicedToArray(_this$stringify3, 2);
          err = _this$stringify4[0];
          chunk_string = _this$stringify4[1];
          if (err) return err;
          if (chunk_string === undefined) {
            return;
          } else {
            if (this.options.header || this.info.records) {
              chunk_string = this.options.record_delimiter + chunk_string;
            }
          }
        }
        // Emit the csv
        this.info.records++;
        push(chunk_string);
      },
      stringify: function stringify(chunk) {
        var _this2 = this;
        var chunkIsHeader = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        if (_typeof(chunk) !== 'object') {
          return [undefined, chunk];
        }
        var columns = this.options.columns;
        var record = [];
        // Record is an array
        if (Array.isArray(chunk)) {
          // We are getting an array but the user has specified output columns. In
          // this case, we respect the columns indexes
          if (columns) {
            chunk.splice(columns.length);
          }
          // Cast record elements
          for (var i = 0; i < chunk.length; i++) {
            var field = chunk[i];
            var _this$__cast = this.__cast(field, {
                index: i,
                column: i,
                records: this.info.records,
                header: chunkIsHeader
              }),
              _this$__cast2 = _slicedToArray(_this$__cast, 2),
              err = _this$__cast2[0],
              value = _this$__cast2[1];
            if (err) return [err];
            record[i] = [value, field];
          }
          // Record is a literal object
          // `columns` is always defined: it is either provided or discovered.
        } else {
          for (var _i2 = 0; _i2 < columns.length; _i2++) {
            var _field = get(chunk, columns[_i2].key);
            var _this$__cast3 = this.__cast(_field, {
                index: _i2,
                column: columns[_i2].key,
                records: this.info.records,
                header: chunkIsHeader
              }),
              _this$__cast4 = _slicedToArray(_this$__cast3, 2),
              _err3 = _this$__cast4[0],
              _value = _this$__cast4[1];
            if (_err3) return [_err3];
            record[_i2] = [_value, _field];
          }
        }
        var csvrecord = '';
        var _loop = function _loop() {
            var options, err;
            // eslint-disable-next-line
            var _record$_i = _slicedToArray(record[_i3], 2),
              value = _record$_i[0],
              field = _record$_i[1];
            if (typeof value === "string") {
              options = _this2.options;
            } else if (is_object(value)) {
              options = value;
              value = options.value;
              delete options.value;
              if (typeof value !== "string" && value !== undefined && value !== null) {
                if (err) return {
                  v: [Error("Invalid Casting Value: returned value must return a string, null or undefined, got ".concat(JSON.stringify(value)))]
                };
              }
              options = _objectSpread2(_objectSpread2({}, _this2.options), options);
              var _normalize_options = normalize_options(options);
              var _normalize_options2 = _slicedToArray(_normalize_options, 2);
              err = _normalize_options2[0];
              options = _normalize_options2[1];
              if (err !== undefined) {
                return {
                  v: [err]
                };
              }
            } else if (value === undefined || value === null) {
              options = _this2.options;
            } else {
              return {
                v: [Error("Invalid Casting Value: returned value must return a string, an object, null or undefined, got ".concat(JSON.stringify(value)))]
              };
            }
            var _options = options,
              delimiter = _options.delimiter,
              escape = _options.escape,
              quote = _options.quote,
              quoted = _options.quoted,
              quoted_empty = _options.quoted_empty,
              quoted_string = _options.quoted_string,
              quoted_match = _options.quoted_match,
              record_delimiter = _options.record_delimiter,
              escape_formulas = _options.escape_formulas;
            if ('' === value && '' === field) {
              var quotedMatch = quoted_match && quoted_match.filter(function (quoted_match) {
                if (typeof quoted_match === 'string') {
                  return value.indexOf(quoted_match) !== -1;
                } else {
                  return quoted_match.test(value);
                }
              });
              quotedMatch = quotedMatch && quotedMatch.length > 0;
              var shouldQuote = quotedMatch || true === quoted_empty || true === quoted_string && false !== quoted_empty;
              if (shouldQuote === true) {
                value = quote + value + quote;
              }
              csvrecord += value;
            } else if (value) {
              if (typeof value !== 'string') {
                return {
                  v: [Error("Formatter must return a string, null or undefined, got ".concat(JSON.stringify(value)))]
                };
              }
              var containsdelimiter = delimiter.length && value.indexOf(delimiter) >= 0;
              var containsQuote = quote !== '' && value.indexOf(quote) >= 0;
              var containsEscape = value.indexOf(escape) >= 0 && escape !== quote;
              var containsRecordDelimiter = value.indexOf(record_delimiter) >= 0;
              var quotedString = quoted_string && typeof field === 'string';
              var _quotedMatch = quoted_match && quoted_match.filter(function (quoted_match) {
                if (typeof quoted_match === 'string') {
                  return value.indexOf(quoted_match) !== -1;
                } else {
                  return quoted_match.test(value);
                }
              });
              _quotedMatch = _quotedMatch && _quotedMatch.length > 0;
              // See https://github.com/adaltas/node-csv/pull/387
              // More about CSV injection or formula injection, when websites embed
              // untrusted input inside CSV files:
              // https://owasp.org/www-community/attacks/CSV_Injection
              // http://georgemauer.net/2017/10/07/csv-injection.html
              // Apple Numbers unicode normalization is empirical from testing
              if (escape_formulas) {
                switch (value[0]) {
                  case '=':
                  case '+':
                  case '-':
                  case '@':
                  case '\t':
                  case '\r':
                  case "\uFF1D": // Unicode '='
                  case "\uFF0B": // Unicode '+'
                  case "\uFF0D": // Unicode '-'
                  case "\uFF20":
                    // Unicode '@'
                    value = "'".concat(value);
                    break;
                }
              }
              var _shouldQuote = containsQuote === true || containsdelimiter || containsRecordDelimiter || quoted || quotedString || _quotedMatch;
              if (_shouldQuote === true && containsEscape === true) {
                var regexp = escape === '\\' ? new RegExp(escape + escape, 'g') : new RegExp(escape, 'g');
                value = value.replace(regexp, escape + escape);
              }
              if (containsQuote === true) {
                var _regexp = new RegExp(quote, 'g');
                value = value.replace(_regexp, escape + quote);
              }
              if (_shouldQuote === true) {
                value = quote + value + quote;
              }
              csvrecord += value;
            } else if (quoted_empty === true || field === '' && quoted_string === true && quoted_empty !== false) {
              csvrecord += quote + quote;
            }
            if (_i3 !== record.length - 1) {
              csvrecord += delimiter;
            }
          },
          _ret;
        for (var _i3 = 0; _i3 < record.length; _i3++) {
          _ret = _loop();
          if (_ret) return _ret.v;
        }
        return [undefined, csvrecord];
      },
      bom: function bom(push) {
        if (this.options.bom !== true) {
          return;
        }
        push(bom_utf8);
      },
      headers: function headers(push) {
        if (this.options.header === false) {
          return;
        }
        if (this.options.columns === undefined) {
          return;
        }
        var err;
        var headers = this.options.columns.map(function (column) {
          return column.header;
        });
        if (this.options.eof) {
          var _this$stringify5 = this.stringify(headers, true);
          var _this$stringify6 = _slicedToArray(_this$stringify5, 2);
          err = _this$stringify6[0];
          headers = _this$stringify6[1];
          headers += this.options.record_delimiter;
        } else {
          var _this$stringify7 = this.stringify(headers);
          var _this$stringify8 = _slicedToArray(_this$stringify7, 2);
          err = _this$stringify8[0];
          headers = _this$stringify8[1];
        }
        if (err) return err;
        push(headers);
      },
      __cast: function __cast(value, context) {
        var type = _typeof(value);
        try {
          if (type === 'string') {
            // Fine for 99% of the cases
            return [undefined, this.options.cast.string(value, context)];
          } else if (type === 'bigint') {
            return [undefined, this.options.cast.bigint(value, context)];
          } else if (type === 'number') {
            return [undefined, this.options.cast.number(value, context)];
          } else if (type === 'boolean') {
            return [undefined, this.options.cast["boolean"](value, context)];
          } else if (value instanceof Date) {
            return [undefined, this.options.cast.date(value, context)];
          } else if (type === 'object' && value !== null) {
            return [undefined, this.options.cast.object(value, context)];
          } else {
            return [undefined, value, value];
          }
        } catch (err) {
          return [err];
        }
      }
    };
  };
  var stringify = function stringify(records) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var data = [];
    var _normalize_options3 = normalize_options(opts),
      _normalize_options4 = _slicedToArray(_normalize_options3, 2),
      err = _normalize_options4[0],
      options = _normalize_options4[1];
    if (err !== undefined) throw err;
    var state = {
      stop: false
    };
    // Information
    var info = {
      records: 0
    };
    var api = stringifier(options, state, info);
    var _iterator3 = _createForOfIteratorHelper(records),
      _step3;
    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var record = _step3.value;
        var _err5 = api.__transform(record, function (record) {
          data.push(record);
        });
        if (_err5 !== undefined) throw _err5;
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
    if (data.length === 0) {
      api.bom(function (d) {
        data.push(d);
      });
      var _err4 = api.headers(function (headers) {
        data.push(headers);
      });
      if (_err4 !== undefined) throw _err4;
    }
    return data.join('');
  };
  sync.stringify = stringify;

  Object.defineProperty(csv, "__esModule", {
    value: true
  });
  csv.serializeCSVStream = csv.parseCSVStream = csv.toCSV = csv.parseCSV = void 0;
  var csv_parse_1 = cjs$1;
  var sync_1 = sync$1;
  var csv_stringify_1 = cjs;
  var sync_2 = sync;
  /**
   * @private
   */
  function parseCSV(str, options) {
    return (0, sync_1.parse)(str, _objectSpread2(_objectSpread2({}, options), {}, {
      columns: true
    }));
  }
  csv.parseCSV = parseCSV;
  /**
   * @private
   */
  function toCSV(records, options) {
    return (0, sync_2.stringify)(records, _objectSpread2(_objectSpread2({}, options), {}, {
      header: true
    }));
  }
  csv.toCSV = toCSV;
  /**
   * @private
   */
  function parseCSVStream(options) {
    return new csv_parse_1.Parser(_objectSpread2(_objectSpread2({}, options), {}, {
      columns: true
    }));
  }
  csv.parseCSVStream = parseCSVStream;
  /**
   * @private
   */
  function serializeCSVStream(options) {
    return (0, csv_stringify_1.stringify)(_objectSpread2(_objectSpread2({}, options), {}, {
      header: true
    }));
  }
  csv.serializeCSVStream = serializeCSVStream;

  var getBodySize$1 = {};

  var __importDefault$8 = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };
  Object.defineProperty(getBodySize$1, "__esModule", {
    value: true
  });
  getBodySize$1.getBodySize = void 0;
  var is_1$2 = __importDefault$8(distExports);
  function getBodySize(body) {
    var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    function isFormData(body) {
      return is_1$2["default"].nodeStream(body) && is_1$2["default"].function_(body.getBoundary);
    }
    if (headers && 'content-length' in headers) {
      return Number(headers['content-length']);
    }
    if (!body) {
      return 0;
    }
    if (is_1$2["default"].string(body)) {
      return Buffer.byteLength(body);
    }
    if (is_1$2["default"].urlSearchParams(body)) {
      return Buffer.byteLength(body.toString());
    }
    if (is_1$2["default"].buffer(body)) {
      return body.length;
    }
    try {
      // `getLengthSync` will throw if body has a stream:
      // https://github.com/form-data/form-data#integer-getlengthsync
      if (isFormData(body)) {
        return body.getLengthSync();
      }
    } catch (_unused) {
      return undefined;
    }
    return undefined;
  }
  getBodySize$1.getBodySize = getBodySize;

  var __importDefault$7 = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };
  Object.defineProperty(httpApi, "__esModule", {
    value: true
  });
  httpApi.HttpApi = void 0;
  /**
   *
   */
  var events_1$2 = require$$0$6;
  var xml2js_1 = __importDefault$7(xml2js);
  var logger_1$3 = logger;
  var promise_1 = promise$1;
  var csv_1$1 = csv;
  var stream_1$3 = stream$4;
  var get_body_size_1$1 = getBodySize$1;
  /** @private */
  function parseJSON(str) {
    return JSON.parse(str);
  }
  /** @private */
  function parseXML(_x) {
    return _parseXML.apply(this, arguments);
  }
  /** @private */
  function _parseXML() {
    _parseXML = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(str) {
      return _regeneratorRuntime().wrap(function _callee5$(_context5) {
        while (1) switch (_context5.prev = _context5.next) {
          case 0:
            return _context5.abrupt("return", xml2js_1["default"].parseStringPromise(str, {
              explicitArray: false
            }));
          case 1:
          case "end":
            return _context5.stop();
        }
      }, _callee5);
    }));
    return _parseXML.apply(this, arguments);
  }
  function parseText(str) {
    return str;
  }
  /**
   * HTTP based API class with authorization hook
   */
  var HttpApi = /*#__PURE__*/function (_events_1$EventEmitte) {
    function HttpApi(conn, options) {
      var _this;
      _classCallCheck(this, HttpApi);
      _this = _callSuper(this, HttpApi);
      _defineProperty(_this, "_conn", void 0);
      _defineProperty(_this, "_logger", void 0);
      _defineProperty(_this, "_transport", void 0);
      _defineProperty(_this, "_responseType", void 0);
      _defineProperty(_this, "_noContentResponse", void 0);
      _defineProperty(_this, "_options", void 0);
      _this._conn = conn;
      _this._logger = conn._logLevel ? HttpApi._logger.createInstance(conn._logLevel) : HttpApi._logger;
      _this._responseType = options.responseType;
      _this._transport = options.transport || conn._transport;
      _this._noContentResponse = options.noContentResponse;
      _this._options = options;
      return _this;
    }
    /**
     * Callout to API endpoint using http
     */
    _inherits(HttpApi, _events_1$EventEmitte);
    return _createClass(HttpApi, [{
      key: "request",
      value: function request(_request) {
        var _this2 = this;
        return promise_1.StreamPromise.create(function () {
          var _ref = (0, stream_1$3.createLazyStream)(),
            stream = _ref.stream,
            setStream = _ref.setStream;
          var promise = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var refreshDelegate, bodyPromise, _body2, requestTime, requestPromise, response, responseTime, err, body;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  refreshDelegate = _this2.getRefreshDelegate();
                  /* TODO decide remove or not this section */
                  /*
                  // remember previous instance url in case it changes after a refresh
                  const lastInstanceUrl = conn.instanceUrl;
                           // check to see if the token refresh has changed the instance url
                  if(lastInstanceUrl !== conn.instanceUrl){
                    // if the instance url has changed
                    // then replace the current request urls instance url fragment
                    // with the updated instance url
                    request.url = request.url.replace(lastInstanceUrl,conn.instanceUrl);
                  }
                  */
                  if (!(refreshDelegate && refreshDelegate.isRefreshing())) {
                    _context.next = 10;
                    break;
                  }
                  _context.next = 4;
                  return refreshDelegate.waitRefresh();
                case 4:
                  bodyPromise = _this2.request(_request);
                  setStream(bodyPromise.stream());
                  _context.next = 8;
                  return bodyPromise;
                case 8:
                  _body2 = _context.sent;
                  return _context.abrupt("return", _body2);
                case 10:
                  // hook before sending
                  _this2.beforeSend(_request);
                  _this2.emit('request', _request);
                  _this2._logger.debug("<request> method=".concat(_request.method, ", url=").concat(_request.url));
                  requestTime = Date.now();
                  requestPromise = _this2._transport.httpRequest(_request, _this2._options);
                  setStream(requestPromise.stream());
                  _context.prev = 16;
                  _context.next = 19;
                  return requestPromise;
                case 19:
                  response = _context.sent;
                  _context.next = 26;
                  break;
                case 22:
                  _context.prev = 22;
                  _context.t0 = _context["catch"](16);
                  _this2._logger.error(_context.t0);
                  throw _context.t0;
                case 26:
                  _context.prev = 26;
                  responseTime = Date.now();
                  _this2._logger.debug("elapsed time: ".concat(responseTime - requestTime, " msec"));
                  return _context.finish(26);
                case 30:
                  if (response) {
                    _context.next = 32;
                    break;
                  }
                  return _context.abrupt("return");
                case 32:
                  _this2._logger.debug("<response> status=".concat(String(response.statusCode), ", url=").concat(_request.url));
                  _this2.emit('response', response);
                  // Refresh token if session has been expired and requires authentication
                  // when session refresh delegate is available
                  if (!(_this2.isSessionExpired(response) && refreshDelegate)) {
                    _context.next = 39;
                    break;
                  }
                  _context.next = 37;
                  return refreshDelegate.refresh(requestTime);
                case 37:
                  /* remove the `content-length` header after token refresh
                   *
                   * SOAP requests include the access token their the body,
                   * if the first req had an invalid token and jsforce successfully
                   * refreshed it we need to remove the `content-length` header
                   * so that it get's re-calculated again with the new body.
                   *
                   * REST request aren't affected by this because the access token
                   * is sent via HTTP headers
                   *
                   * `_message` is only present in SOAP requests
                   */
                  if ('_message' in _request && _request.headers && 'content-length' in _request.headers) {
                    delete _request.headers['content-length'];
                  }
                  return _context.abrupt("return", _this2.request(_request));
                case 39:
                  if (!_this2.isErrorResponse(response)) {
                    _context.next = 44;
                    break;
                  }
                  _context.next = 42;
                  return _this2.getError(response);
                case 42:
                  err = _context.sent;
                  throw err;
                case 44:
                  _context.next = 46;
                  return _this2.getResponseBody(response);
                case 46:
                  body = _context.sent;
                  return _context.abrupt("return", body);
                case 48:
                case "end":
                  return _context.stop();
              }
            }, _callee, null, [[16, 22, 26, 30]]);
          }))();
          return {
            stream: stream,
            promise: promise
          };
        });
      }
      /**
       * @protected
       */
    }, {
      key: "getRefreshDelegate",
      value: function getRefreshDelegate() {
        return this._conn._refreshDelegate;
      }
      /**
       * @protected
       */
    }, {
      key: "beforeSend",
      value: function beforeSend(request) {
        /* eslint-disable no-param-reassign */
        var headers = request.headers || {};
        if (this._conn.accessToken) {
          headers.Authorization = "Bearer ".concat(this._conn.accessToken);
        }
        if (this._conn._callOptions) {
          var callOptions = [];
          for (var _i = 0, _Object$keys = Object.keys(this._conn._callOptions); _i < _Object$keys.length; _i++) {
            var name = _Object$keys[_i];
            callOptions.push("".concat(name, "=").concat(this._conn._callOptions[name]));
          }
          headers['Sforce-Call-Options'] = callOptions.join(', ');
        }
        var bodySize = (0, get_body_size_1$1.getBodySize)(request.body, headers);
        var cannotHaveBody = ['GET', 'HEAD', 'OPTIONS'].includes(request.method);
        if (!cannotHaveBody && !!request.body && !('transfer-encoding' in headers) && !('content-length' in headers) && !!bodySize) {
          this._logger.debug("missing 'content-length' header, setting it to: ".concat(bodySize));
          headers['content-length'] = String(bodySize);
        }
        request.headers = headers;
      }
      /**
       * Detect response content mime-type
       * @protected
       */
    }, {
      key: "getResponseContentType",
      value: function getResponseContentType(response) {
        return this._responseType || response.headers && response.headers['content-type'];
      }
      /**
       * @private
       */
      // eslint-disable-next-line @typescript-eslint/require-await
    }, {
      key: "parseResponseBody",
      value: (function () {
        var _parseResponseBody = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(response) {
          var contentType, parseBody;
          return _regeneratorRuntime().wrap(function _callee2$(_context2) {
            while (1) switch (_context2.prev = _context2.next) {
              case 0:
                contentType = this.getResponseContentType(response) || '';
                parseBody = /^(text|application)\/xml(;|$)/.test(contentType) ? parseXML : /^application\/json(;|$)/.test(contentType) ? parseJSON : /^text\/csv(;|$)/.test(contentType) ? csv_1$1.parseCSV : parseText;
                _context2.prev = 2;
                return _context2.abrupt("return", parseBody(response.body));
              case 6:
                _context2.prev = 6;
                _context2.t0 = _context2["catch"](2);
                // TODO(next major): we could throw a new "invalid response body" error instead.
                this._logger.debug("Failed to parse body of content-type: ".concat(contentType, ". Error: ").concat(_context2.t0.message));
                return _context2.abrupt("return", response.body);
              case 10:
              case "end":
                return _context2.stop();
            }
          }, _callee2, this, [[2, 6]]);
        }));
        function parseResponseBody(_x2) {
          return _parseResponseBody.apply(this, arguments);
        }
        return parseResponseBody;
      }()
      /**
       * Get response body
       * @protected
       */
      )
    }, {
      key: "getResponseBody",
      value: (function () {
        var _getResponseBody = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(response) {
          var body, err;
          return _regeneratorRuntime().wrap(function _callee3$(_context3) {
            while (1) switch (_context3.prev = _context3.next) {
              case 0:
                if (!(response.statusCode === 204)) {
                  _context3.next = 2;
                  break;
                }
                return _context3.abrupt("return", this._noContentResponse);
              case 2:
                _context3.next = 4;
                return this.parseResponseBody(response);
              case 4:
                body = _context3.sent;
                if (!this.hasErrorInResponseBody(body)) {
                  _context3.next = 10;
                  break;
                }
                _context3.next = 8;
                return this.getError(response, body);
              case 8:
                err = _context3.sent;
                throw err;
              case 10:
                if (!(response.statusCode === 300)) {
                  _context3.next = 12;
                  break;
                }
                throw new HttpApiError('Multiple records found', 'MULTIPLE_CHOICES', body);
              case 12:
                return _context3.abrupt("return", body);
              case 13:
              case "end":
                return _context3.stop();
            }
          }, _callee3, this);
        }));
        function getResponseBody(_x3) {
          return _getResponseBody.apply(this, arguments);
        }
        return getResponseBody;
      }()
      /**
       * Detect session expiry
       * @protected
       */
      )
    }, {
      key: "isSessionExpired",
      value: function isSessionExpired(response) {
        return response.statusCode === 401;
      }
      /**
       * Detect error response
       * @protected
       */
    }, {
      key: "isErrorResponse",
      value: function isErrorResponse(response) {
        return response.statusCode >= 400;
      }
      /**
       * Detect error in response body
       * @protected
       */
    }, {
      key: "hasErrorInResponseBody",
      value: function hasErrorInResponseBody(_body) {
        return false;
      }
      /**
       * Parsing error message in response
       * @protected
       */
    }, {
      key: "parseError",
      value: function parseError(body) {
        var errors = body;
        // XML response
        if (errors.Errors) {
          return errors.Errors.Error;
        }
        return errors;
      }
      /**
       * Get error message in response
       * @protected
       */
    }, {
      key: "getError",
      value: (function () {
        var _getError = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(response, body) {
          var error;
          return _regeneratorRuntime().wrap(function _callee4$(_context4) {
            while (1) switch (_context4.prev = _context4.next) {
              case 0:
                _context4.prev = 0;
                _context4.t0 = this;
                _context4.t1 = body;
                if (_context4.t1) {
                  _context4.next = 7;
                  break;
                }
                _context4.next = 6;
                return this.parseResponseBody(response);
              case 6:
                _context4.t1 = _context4.sent;
              case 7:
                _context4.t2 = _context4.t1;
                error = _context4.t0.parseError.call(_context4.t0, _context4.t2);
                _context4.next = 13;
                break;
              case 11:
                _context4.prev = 11;
                _context4.t3 = _context4["catch"](0);
              case 13:
                if (!Array.isArray(error)) {
                  _context4.next = 19;
                  break;
                }
                if (!(error.length === 1)) {
                  _context4.next = 18;
                  break;
                }
                error = error[0];
                _context4.next = 19;
                break;
              case 18:
                return _context4.abrupt("return", new HttpApiError("Multiple errors returned.\n  Check `error.data` for the error details", 'MULTIPLE_API_ERRORS', error));
              case 19:
                error = _typeof(error) === 'object' && error !== null && typeof error.message === 'string' ? error : {
                  errorCode: "ERROR_HTTP_".concat(response.statusCode),
                  message: response.body
                };
                if (!(response.headers['content-type'] === 'text/html')) {
                  _context4.next = 23;
                  break;
                }
                this._logger.debug("html response.body: ".concat(response.body));
                return _context4.abrupt("return", new HttpApiError("HTTP response contains html content.\nCheck that the org exists and can be reached.\nSee `error.data` for the full html response.", error.errorCode, error.message));
              case 23:
                return _context4.abrupt("return", error instanceof HttpApiError ? error : new HttpApiError(error.message, error.errorCode, error));
              case 24:
              case "end":
                return _context4.stop();
            }
          }, _callee4, this, [[0, 11]]);
        }));
        function getError(_x4, _x5) {
          return _getError.apply(this, arguments);
        }
        return getError;
      }())
    }]);
  }(events_1$2.EventEmitter);
  _defineProperty(HttpApi, "_logger", (0, logger_1$3.getLogger)('http-api'));
  httpApi.HttpApi = HttpApi;
  /**
   *
   */
  var HttpApiError = /*#__PURE__*/function (_Error) {
    function HttpApiError(message, errorCode, data) {
      var _this3;
      _classCallCheck(this, HttpApiError);
      _this3 = _callSuper(this, HttpApiError, [message]);
      /**
       * This contains error-specific details, usually returned from the API.
       */
      _defineProperty(_this3, "data", void 0);
      _defineProperty(_this3, "errorCode", void 0);
      _this3.name = errorCode || _this3.name;
      _this3.errorCode = _this3.name;
      _this3.data = data;
      return _this3;
    }
    /**
     * This will be removed in the next major (v4)
     *
     * @deprecated use `error.data` instead
     */
    _inherits(HttpApiError, _Error);
    return _createClass(HttpApiError, [{
      key: "content",
      get: function get() {
        return this.data;
      }
    }]);
  }(/*#__PURE__*/_wrapNativeSuper(Error));
  httpApi["default"] = HttpApi;

  var sessionRefreshDelegate = {};

  Object.defineProperty(sessionRefreshDelegate, "__esModule", {
    value: true
  });
  sessionRefreshDelegate.SessionRefreshDelegate = void 0;
  /**
   *
   */
  var logger_1$2 = logger;
  /**
   *
   */
  var SessionRefreshDelegate = /*#__PURE__*/function () {
    function SessionRefreshDelegate(conn, refreshFn) {
      _classCallCheck(this, SessionRefreshDelegate);
      _defineProperty(this, "_refreshFn", void 0);
      _defineProperty(this, "_conn", void 0);
      _defineProperty(this, "_logger", void 0);
      _defineProperty(this, "_lastRefreshedAt", undefined);
      _defineProperty(this, "_refreshPromise", undefined);
      this._conn = conn;
      this._logger = conn._logLevel ? SessionRefreshDelegate._logger.createInstance(conn._logLevel) : SessionRefreshDelegate._logger;
      this._refreshFn = refreshFn;
    }
    /**
     * Refresh access token
     * @private
     */
    return _createClass(SessionRefreshDelegate, [{
      key: "refresh",
      value: (function () {
        var _refresh = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(since) {
          var _this = this;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                if (!(this._lastRefreshedAt && this._lastRefreshedAt > since)) {
                  _context.next = 2;
                  break;
                }
                return _context.abrupt("return");
              case 2:
                if (!this._refreshPromise) {
                  _context.next = 6;
                  break;
                }
                _context.next = 5;
                return this._refreshPromise;
              case 5:
                return _context.abrupt("return");
              case 6:
                _context.prev = 6;
                this._logger.info('<refresh token>');
                this._refreshPromise = new Promise(function (resolve, reject) {
                  _this._refreshFn(_this._conn, function (err, accessToken, res) {
                    if (!err) {
                      _this._logger.debug('Connection refresh completed.');
                      _this._conn.accessToken = accessToken;
                      _this._conn.emit('refresh', accessToken, res);
                      resolve();
                    } else {
                      reject(err);
                    }
                  });
                });
                _context.next = 11;
                return this._refreshPromise;
              case 11:
                this._logger.info('<refresh complete>');
                _context.next = 17;
                break;
              case 14:
                _context.prev = 14;
                _context.t0 = _context["catch"](6);
                throw new Error("Unable to refresh session due to: ".concat(_context.t0.message));
              case 17:
                _context.prev = 17;
                this._refreshPromise = undefined;
                this._lastRefreshedAt = Date.now();
                return _context.finish(17);
              case 21:
              case "end":
                return _context.stop();
            }
          }, _callee, this, [[6, 14, 17, 21]]);
        }));
        function refresh(_x) {
          return _refresh.apply(this, arguments);
        }
        return refresh;
      }())
    }, {
      key: "isRefreshing",
      value: function isRefreshing() {
        return !!this._refreshPromise;
      }
    }, {
      key: "waitRefresh",
      value: function () {
        var _waitRefresh = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
          return _regeneratorRuntime().wrap(function _callee2$(_context2) {
            while (1) switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt("return", this._refreshPromise);
              case 1:
              case "end":
                return _context2.stop();
            }
          }, _callee2, this);
        }));
        function waitRefresh() {
          return _waitRefresh.apply(this, arguments);
        }
        return waitRefresh;
      }()
    }]);
  }();
  _defineProperty(SessionRefreshDelegate, "_logger", (0, logger_1$2.getLogger)('session-refresh-delegate'));
  sessionRefreshDelegate.SessionRefreshDelegate = SessionRefreshDelegate;
  sessionRefreshDelegate["default"] = SessionRefreshDelegate;

  var query$1 = {};

  var recordStream = {};

  var _excluded$8 = ["nullValue"];
  Object.defineProperty(recordStream, "__esModule", {
    value: true
  });
  recordStream.Parsable = recordStream.Serializable = recordStream.RecordStream = void 0;
  /**
   * @file Represents stream that handles Salesforce record as stream data
   * @author Shinichi Tomita <shinichi.tomita@gmail.com>
   */
  var stream_1$2 = require$$0$3;
  var csv_1 = csv;
  var stream_2$2 = stream$4;
  /**
   * @private
   */
  function evalMapping(value, mapping) {
    if (typeof value === 'string') {
      var m = /^\$\{(\w+)\}$/.exec(value);
      if (m) {
        return mapping[m[1]];
      }
      return value.replace(/\$\{(\w+)\}/g, function ($0, prop) {
        var v = mapping[prop];
        return typeof v === 'undefined' || v === null ? '' : String(v);
      });
    }
    return value;
  }
  /**
   * @private
   */
  function convertRecordForSerialization(record) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return Object.keys(record).reduce(function (rec, key) {
      var value = rec[key];
      var urec;
      if (key === 'attributes') {
        // 'attributes' prop will be ignored
        urec = _objectSpread2({}, rec);
        delete urec[key];
        return urec;
      } else if (options.nullValue && value === null) {
        return _objectSpread2(_objectSpread2({}, rec), {}, _defineProperty({}, key, options.nullValue));
      } else if (value !== null && _typeof(value) === 'object') {
        var precord = convertRecordForSerialization(value, options);
        return Object.keys(precord).reduce(function (prec, pkey) {
          prec["".concat(key, ".").concat(pkey)] = precord[pkey]; // eslint-disable-line no-param-reassign
          return prec;
        }, _objectSpread2({}, rec));
      }
      return rec;
    }, record);
  }
  /**
   * @private
   */
  function createPipelineStream(s1, s2) {
    s1.pipe(s2);
    return (0, stream_2$2.concatStreamsAsDuplex)(s1, s2, {
      writableObjectMode: true
    });
  }
  /**
   * @private
   */
  var CSVStreamConverter = {
    serialize: function serialize() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      options.nullValue;
        var csvOpts = _objectWithoutProperties(options, _excluded$8);
      return createPipelineStream(
      // eslint-disable-next-line no-use-before-define
      RecordStream.map(function (record) {
        return convertRecordForSerialization(record, options);
      }), (0, csv_1.serializeCSVStream)(csvOpts));
    },
    parse: function parse() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return (0, csv_1.parseCSVStream)(options);
    }
  };
  /**
   * @private
   */
  var DataStreamConverters = {
    csv: CSVStreamConverter
  };
  /**
   * Class for Record Stream
   *
   * @class
   * @constructor
   * @extends stream.Transform
   */
  var RecordStream = /*#__PURE__*/function (_stream_1$PassThrough) {
    /**
     *
     */
    function RecordStream() {
      var _this;
      _classCallCheck(this, RecordStream);
      _this = _callSuper(this, RecordStream, [{
        objectMode: true
      }]);
      /* @override */
      _defineProperty(_this, "addListener", _this.on);
      return _this;
    }
    /**
     * Get record stream of queried records applying the given mapping function
     */
    _inherits(RecordStream, _stream_1$PassThrough);
    return _createClass(RecordStream, [{
      key: "map",
      value: function map(fn) {
        return this.pipe(RecordStream.map(fn));
      }
      /**
       * Get record stream of queried records, applying the given filter function
       */
    }, {
      key: "filter",
      value: function filter(fn) {
        return this.pipe(RecordStream.filter(fn));
      }
      /* @override */
    }, {
      key: "on",
      value: function on(ev, fn) {
        return _get(_getPrototypeOf(RecordStream.prototype), "on", this).call(this, ev === 'record' ? 'data' : ev, fn);
      }
    }], [{
      key: "map",
      value: /* --------------------------------------------------- */
      /**
       * Create a record stream which maps records and pass them to downstream
       */
      function map(fn) {
        var mapStream = new stream_1$2.Transform({
          objectMode: true,
          transform: function transform(record, enc, callback) {
            var rec = fn(record) || record; // if not returned record, use same record
            mapStream.push(rec);
            callback();
          }
        });
        return mapStream;
      }
      /**
       * Create mapping stream using given record template
       */
    }, {
      key: "recordMapStream",
      value: function recordMapStream(record, noeval) {
        return RecordStream.map(function (rec) {
          var mapped = {
            Id: rec.Id
          };
          for (var _i = 0, _Object$keys = Object.keys(record); _i < _Object$keys.length; _i++) {
            var prop = _Object$keys[_i];
            mapped[prop] = noeval ? record[prop] : evalMapping(record[prop], rec);
          }
          return mapped;
        });
      }
      /**
       * Create a record stream which filters records and pass them to downstream
       *
       * @param {RecordFilterFunction} fn - Record filtering function
       * @returns {RecordStream.Serializable}
       */
    }, {
      key: "filter",
      value: function filter(fn) {
        var filterStream = new stream_1$2.Transform({
          objectMode: true,
          transform: function transform(record, enc, callback) {
            if (fn(record)) {
              filterStream.push(record);
            }
            callback();
          }
        });
        return filterStream;
      }
    }]);
  }(stream_1$2.PassThrough);
  recordStream.RecordStream = RecordStream;
  /**
   * @class RecordStream.Serializable
   * @extends {RecordStream}
   */
  var Serializable = /*#__PURE__*/function (_RecordStream2) {
    function Serializable() {
      var _this2;
      _classCallCheck(this, Serializable);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this2 = _callSuper(this, Serializable, [].concat(args));
      _defineProperty(_this2, "_dataStreams", {});
      return _this2;
    }
    _inherits(Serializable, _RecordStream2);
    return _createClass(Serializable, [{
      key: "stream",
      value:
      /**
       * Get readable data stream which emits serialized record data
       */
      function stream() {
        var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'csv';
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        if (this._dataStreams[type]) {
          return this._dataStreams[type];
        }
        var converter = DataStreamConverters[type];
        if (!converter) {
          throw new Error("Converting [".concat(type, "] data stream is not supported."));
        }
        var dataStream = new stream_1$2.PassThrough();
        this.pipe(converter.serialize(options)).pipe(dataStream);
        this._dataStreams[type] = dataStream;
        return dataStream;
      }
    }]);
  }(RecordStream);
  recordStream.Serializable = Serializable;
  /**
   * @class RecordStream.Parsable
   * @extends {RecordStream}
   */
  var Parsable = /*#__PURE__*/function (_RecordStream3) {
    function Parsable() {
      var _this3;
      _classCallCheck(this, Parsable);
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      _this3 = _callSuper(this, Parsable, [].concat(args));
      _defineProperty(_this3, "_dataStreams", {});
      _defineProperty(_this3, "_execParse", false);
      _defineProperty(_this3, "_incomings", []);
      /* @override */
      _defineProperty(_this3, "addListener", _this3.on);
      return _this3;
    }
    _inherits(Parsable, _RecordStream3);
    return _createClass(Parsable, [{
      key: "stream",
      value:
      /**
       * Get writable data stream which accepts serialized record data
       */
      function stream() {
        var _this4 = this;
        var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'csv';
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        if (this._dataStreams[type]) {
          return this._dataStreams[type];
        }
        var converter = DataStreamConverters[type];
        if (!converter) {
          throw new Error("Converting [".concat(type, "] data stream is not supported."));
        }
        var dataStream = new stream_1$2.PassThrough();
        var parserStream = converter.parse(options);
        parserStream.on('error', function (err) {
          return _this4.emit('error', err);
        });
        parserStream.pipe(this).pipe(new stream_1$2.PassThrough({
          objectMode: true,
          highWaterMark: 500 * 1000
        }));
        if (this._execParse) {
          dataStream.pipe(parserStream);
        } else {
          this._incomings.push([dataStream, parserStream]);
        }
        this._dataStreams[type] = dataStream;
        return dataStream;
      }
      /* @override */
    }, {
      key: "on",
      value: function on(ev, fn) {
        if (ev === 'readable' || ev === 'record') {
          if (!this._execParse) {
            this._execParse = true;
            var _iterator = _createForOfIteratorHelper(this._incomings),
              _step;
            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var _step$value = _slicedToArray(_step.value, 2),
                  dataStream = _step$value[0],
                  parserStream = _step$value[1];
                dataStream.pipe(parserStream);
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
          }
        }
        return _get(_getPrototypeOf(Parsable.prototype), "on", this).call(this, ev, fn);
      }
    }]);
  }(RecordStream);
  recordStream.Parsable = Parsable;
  recordStream["default"] = RecordStream;

  var soqlBuilder = {};

  var date = {};

  var formatter = {};

  Object.defineProperty(formatter, "__esModule", {
    value: true
  });
  formatter.formatDate = formatter.zeroPad = void 0;
  /**
   *
   */
  function zeroPad(num) {
    var digits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
    var nstr = '';
    for (var d = digits - 1; d > 0; d--) {
      if (num >= Math.pow(10, d)) {
        break;
      }
      nstr += '0';
    }
    return nstr + String(num);
  }
  formatter.zeroPad = zeroPad;
  /**
   *
   */
  function formatDate$1(date) {
    return "".concat(date.getUTCFullYear(), "-").concat(zeroPad(date.getUTCMonth() + 1), "-").concat(zeroPad(date.getUTCDate()), "T").concat(zeroPad(date.getUTCHours()), ":").concat(zeroPad(date.getUTCMinutes()), ":").concat(zeroPad(date.getUTCSeconds()), "+00:00");
  }
  formatter.formatDate = formatDate$1;

  var _SfDate;
  Object.defineProperty(date, "__esModule", {
    value: true
  });
  date.SfDate = void 0;
  /**
   *
   */
  var formatter_1 = formatter;
  /** @private **/
  function createLiteralBuilder(literal) {
    return function (num) {
      return new SfDate("".concat(literal, ":").concat(String(num)));
    }; // eslint-disable-line no-use-before-define
  }
  /**
   * A date object to keep Salesforce date literal
   *
   * @class
   * @constructor
   * @see http://www.salesforce.com/us/developer/docs/soql_sosl/Content/sforce_api_calls_soql_select_dateformats.htm
   */
  var SfDate = /*#__PURE__*/function () {
    /**
     *
     */
    function SfDate(literal) {
      _classCallCheck(this, SfDate);
      _defineProperty(this, "_literal", void 0);
      _defineProperty(this, "toString", this.toJSON);
      this._literal = literal;
    }
    /**
     * Returns literal when converted to string
     */
    return _createClass(SfDate, [{
      key: "toJSON",
      value: function toJSON() {
        return this._literal;
      }
    }], [{
      key: "toDateLiteral",
      value:
      /**
       * Convert JavaScript date object to ISO8601 Date format (e.g. 2012-10-31)
       *
       * @param {String|Number|Date} date - Input date
       * @returns {SfDate} - Salesforce date literal with ISO8601 date format
       */
      function toDateLiteral(date) {
        var _date;
        if (typeof date === 'number') {
          _date = new Date(date);
        } else if (typeof date === 'string') {
          _date = SfDate.parseDate(date);
        } else {
          _date = date;
        }
        var yy = _date.getFullYear();
        var mm = _date.getMonth() + 1;
        var dd = _date.getDate();
        var dstr = [yy, (0, formatter_1.zeroPad)(mm), (0, formatter_1.zeroPad)(dd)].join('-');
        return new SfDate(dstr);
      }
      /**
       * Convert JavaScript date object to ISO8601 DateTime format
       * (e.g. 2012-10-31T12:34:56Z)
       */
    }, {
      key: "toDateTimeLiteral",
      value: function toDateTimeLiteral(date) {
        var _date;
        if (typeof date === 'number') {
          _date = new Date(date);
        } else if (typeof date === 'string') {
          _date = SfDate.parseDate(date);
        } else {
          _date = date;
        }
        var yy = _date.getUTCFullYear();
        var mm = _date.getUTCMonth() + 1;
        var dd = _date.getUTCDate();
        var hh = _date.getUTCHours();
        var mi = _date.getUTCMinutes();
        var ss = _date.getUTCSeconds();
        var dtstr = "".concat([yy, (0, formatter_1.zeroPad)(mm), (0, formatter_1.zeroPad)(dd)].join('-'), "T").concat([(0, formatter_1.zeroPad)(hh), (0, formatter_1.zeroPad)(mi), (0, formatter_1.zeroPad)(ss)].join(':'), "Z");
        return new SfDate(dtstr);
      }
      /**
       * Convert JavaScript date object to ISO8601 time format
       * (e.g. 12:34:56.789Z)
       */
    }, {
      key: "toTimeLiteral",
      value: function toTimeLiteral(time) {
        var _date = new Date(0);
        if (typeof time === 'string') {
          _date = SfDate.parseTime(time);
        } else if (typeof time === 'number') {
          _date = new Date(time);
        } else {
          _date = time;
        }
        var hh = _date.getUTCHours();
        var mi = _date.getUTCMinutes();
        var ss = _date.getUTCSeconds();
        var sss = _date.getUTCMilliseconds();
        var tstr = "".concat((0, formatter_1.zeroPad)(hh), ":").concat((0, formatter_1.zeroPad)(mi), ":").concat((0, formatter_1.zeroPad)(ss), ".").concat((0, formatter_1.zeroPad)(sss, 3), "Z");
        return new SfDate(tstr);
      }
      /**
       * Parse IS08601 date(time) formatted string and return date instance
       */
    }, {
      key: "parseDate",
      value: function parseDate(str) {
        var d = new Date();
        var regexp = /^([\d]{4})-?([\d]{2})-?([\d]{2})(T([\d]{2}):?([\d]{2}):?([\d]{2})(.([\d]{3}))?(Z|([+-])([\d]{2}):?([\d]{2})))?$/;
        var m = str.match(regexp);
        if (m) {
          d = new Date(0);
          if (!m[4]) {
            d.setFullYear(parseInt(m[1], 10));
            d.setDate(parseInt(m[3], 10));
            d.setMonth(parseInt(m[2], 10) - 1);
            d.setHours(0);
            d.setMinutes(0);
            d.setSeconds(0);
            d.setMilliseconds(0);
          } else {
            d.setUTCFullYear(parseInt(m[1], 10));
            d.setUTCDate(parseInt(m[3], 10));
            d.setUTCMonth(parseInt(m[2], 10) - 1);
            d.setUTCHours(parseInt(m[5], 10));
            d.setUTCMinutes(parseInt(m[6], 10));
            d.setUTCSeconds(parseInt(m[7], 10));
            d.setUTCMilliseconds(parseInt(m[9] || '0', 10));
            if (m[10] && m[10] !== 'Z') {
              var offset = parseInt(m[12], 10) * 60 + parseInt(m[13], 10);
              d.setTime((m[11] === '+' ? -1 : 1) * offset * 60 * 1000 + d.getTime());
            }
          }
          return d;
        }
        throw new Error("Invalid date format is specified : ".concat(str));
      }
      /**
       * Parse IS08601 time formatted string and convert to parse string
       */
    }, {
      key: "parseTime",
      value: function parseTime(str) {
        var regexp = /^([\d]{2}):?([\d]{2}):?([\d]{2})(.([\d]{3}))?Z?$/;
        var m = str.match(regexp);
        if (m) {
          var d = new Date(0);
          var hh = parseInt(m[1], 10);
          var mi = parseInt(m[2], 10);
          var ss = parseInt(m[3], 10);
          var sss = parseInt(m[5] || '0', 10);
          d.setUTCHours(hh);
          d.setUTCMinutes(mi);
          d.setUTCSeconds(ss);
          d.setUTCMilliseconds(sss);
          return d;
        }
        throw new Error("Invalid time format is specified : ".concat(str));
      }
    }]);
  }();
  _SfDate = SfDate;
  _defineProperty(SfDate, "YESTERDAY", new _SfDate('YESTERDAY'));
  _defineProperty(SfDate, "TODAY", new _SfDate('TODAY'));
  _defineProperty(SfDate, "TOMORROW", new _SfDate('TOMORROW'));
  _defineProperty(SfDate, "LAST_WEEK", new _SfDate('LAST_WEEK'));
  _defineProperty(SfDate, "THIS_WEEK", new _SfDate('THIS_WEEK'));
  _defineProperty(SfDate, "NEXT_WEEK", new _SfDate('NEXT_WEEK'));
  _defineProperty(SfDate, "LAST_MONTH", new _SfDate('LAST_MONTH'));
  _defineProperty(SfDate, "THIS_MONTH", new _SfDate('THIS_MONTH'));
  _defineProperty(SfDate, "NEXT_MONTH", new _SfDate('NEXT_MONTH'));
  _defineProperty(SfDate, "LAST_90_DAYS", new _SfDate('LAST_90_DAYS'));
  _defineProperty(SfDate, "NEXT_90_DAYS", new _SfDate('NEXT_90_DAYS'));
  _defineProperty(SfDate, "LAST_N_DAYS", createLiteralBuilder('LAST_N_DAYS'));
  _defineProperty(SfDate, "NEXT_N_DAYS", createLiteralBuilder('NEXT_N_DAYS'));
  _defineProperty(SfDate, "NEXT_N_WEEKS", createLiteralBuilder('NEXT_N_WEEKS'));
  _defineProperty(SfDate, "LAST_N_WEEKS", createLiteralBuilder('LAST_N_WEEKS'));
  _defineProperty(SfDate, "NEXT_N_MONTHS", createLiteralBuilder('NEXT_N_MONTHS'));
  _defineProperty(SfDate, "LAST_N_MONTHS", createLiteralBuilder('LAST_N_MONTHS'));
  _defineProperty(SfDate, "THIS_QUARTER", new _SfDate('THIS_QUARTER'));
  _defineProperty(SfDate, "LAST_QUARTER", new _SfDate('LAST_QUARTER'));
  _defineProperty(SfDate, "NEXT_QUARTER", new _SfDate('NEXT_QUARTER'));
  _defineProperty(SfDate, "NEXT_N_QUARTERS", createLiteralBuilder('NEXT_N_QUARTERS'));
  _defineProperty(SfDate, "LAST_N_QUARTERS", createLiteralBuilder('LAST_N_QUARTERS'));
  _defineProperty(SfDate, "THIS_YEAR", new _SfDate('THIS_YEAR'));
  _defineProperty(SfDate, "LAST_YEAR", new _SfDate('LAST_YEAR'));
  _defineProperty(SfDate, "NEXT_YEAR", new _SfDate('NEXT_YEAR'));
  _defineProperty(SfDate, "NEXT_N_YEARS", createLiteralBuilder('NEXT_N_YEARS'));
  _defineProperty(SfDate, "LAST_N_YEARS", createLiteralBuilder('LAST_N_YEARS'));
  _defineProperty(SfDate, "THIS_FISCAL_QUARTER", new _SfDate('THIS_FISCAL_QUARTER'));
  _defineProperty(SfDate, "LAST_FISCAL_QUARTER", new _SfDate('LAST_FISCAL_QUARTER'));
  _defineProperty(SfDate, "NEXT_FISCAL_QUARTER", new _SfDate('NEXT_FISCAL_QUARTER'));
  _defineProperty(SfDate, "THIS_FISCAL_YEAR", new _SfDate('THIS_FISCAL_YEAR'));
  _defineProperty(SfDate, "NEXT_N_FISCAL_QUARTERS", createLiteralBuilder('NEXT_N_FISCAL_QUARTERS'));
  _defineProperty(SfDate, "LAST_N_FISCAL_QUARTERS", createLiteralBuilder('LAST_N_FISCAL_QUARTERS'));
  _defineProperty(SfDate, "LAST_FISCAL_YEAR", new _SfDate('LAST_FISCAL_YEAR'));
  _defineProperty(SfDate, "NEXT_FISCAL_YEAR", new _SfDate('NEXT_FISCAL_YEAR'));
  _defineProperty(SfDate, "NEXT_N_FISCAL_YEARS", createLiteralBuilder('NEXT_N_FISCAL_YEARS'));
  _defineProperty(SfDate, "LAST_N_FISCAL_YEARS", createLiteralBuilder('LAST_N_FISCAL_YEARS'));
  date.SfDate = SfDate;
  date["default"] = SfDate;

  var __importDefault$6 = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };
  Object.defineProperty(soqlBuilder, "__esModule", {
    value: true
  });
  soqlBuilder.createSOQL = void 0;
  /**
   * @file Create and build SOQL string from configuration
   * @author Shinichi Tomita <shinichi.tomita@gmail.com>
   */
  var date_1 = __importDefault$6(date);
  /** @private **/
  function escapeSOQLString(str) {
    return String(str || '').replace(/'/g, "\\'");
  }
  /** @private **/
  function createFieldsClause(fields) {
    var childQueries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var cqueries = Object.values(childQueries);
    // eslint-disable-next-line no-use-before-define
    return [].concat(_toConsumableArray(fields || ['Id']), _toConsumableArray(cqueries.map(function (cquery) {
      return "(".concat(createSOQL(cquery), ")");
    }))).join(', ');
  }
  /** @private **/
  function createValueExpression(value) {
    if (Array.isArray(value)) {
      return value.length > 0 ? "(".concat(value.map(createValueExpression).join(', '), ")") : undefined;
    }
    if (value instanceof date_1["default"]) {
      return value.toString();
    }
    if (typeof value === 'string') {
      return "'".concat(escapeSOQLString(value), "'");
    }
    if (typeof value === 'number') {
      return value.toString();
    }
    if (value === null) {
      return 'null';
    }
    return value;
  }
  var opMap = {
    '=': '=',
    $eq: '=',
    '!=': '!=',
    $ne: '!=',
    '>': '>',
    $gt: '>',
    '<': '<',
    $lt: '<',
    '>=': '>=',
    $gte: '>=',
    '<=': '<=',
    $lte: '<=',
    $like: 'LIKE',
    $nlike: 'NOT LIKE',
    $in: 'IN',
    $nin: 'NOT IN',
    $includes: 'INCLUDES',
    $excludes: 'EXCLUDES',
    $exists: 'EXISTS'
  };
  /** @private **/
  function createFieldExpression(field, value) {
    var op = '$eq';
    var _value = value;
    // Assume the `$in` operator if value is an array and none was supplied.
    if (Array.isArray(value)) {
      op = '$in';
    } else if (_typeof(value) === 'object' && value !== null) {
      // Otherwise, if an object was passed then process the supplied ops.
      for (var _i = 0, _Object$keys = Object.keys(value); _i < _Object$keys.length; _i++) {
        var k = _Object$keys[_i];
        if (k.startsWith('$')) {
          op = k;
          _value = value[k];
          break;
        }
      }
    }
    var sfop = opMap[op];
    if (!sfop || typeof _value === 'undefined') {
      return null;
    }
    var valueExpr = createValueExpression(_value);
    if (typeof valueExpr === 'undefined') {
      return null;
    }
    switch (sfop) {
      case 'NOT LIKE':
        return "(".concat(['NOT', field, 'LIKE', valueExpr].join(' '), ")");
      case 'EXISTS':
        return [field, _value ? '!=' : '=', 'null'].join(' ');
      default:
        return [field, sfop, valueExpr].join(' ');
    }
  }
  /** @private **/
  function createOrderByClause() {
    var sort = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var _sort = [];
    if (typeof sort === 'string') {
      if (/,|\s+(asc|desc)\s*$/.test(sort)) {
        // must be specified in pure "order by" clause. Return raw config.
        return sort;
      }
      // sort order in mongoose-style expression.
      // e.g. "FieldA -FieldB" => "ORDER BY FieldA ASC, FieldB DESC"
      _sort = sort.split(/\s+/).map(function (field) {
        var dir = 'ASC'; // ascending
        var flag = field[0];
        if (flag === '-') {
          dir = 'DESC';
          field = field.substring(1); // eslint-disable-line no-param-reassign
        } else if (flag === '+') {
          field = field.substring(1); // eslint-disable-line no-param-reassign
        }
        return [field, dir];
      });
    } else if (Array.isArray(sort)) {
      _sort = sort;
    } else {
      _sort = Object.entries(sort).map(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
          field = _ref2[0],
          dir = _ref2[1];
        return [field, dir];
      });
    }
    return _sort.map(function (_ref3) {
      var _ref4 = _slicedToArray(_ref3, 2),
        field = _ref4[0],
        dir = _ref4[1];
      /* eslint-disable no-param-reassign */
      switch (String(dir)) {
        case 'DESC':
        case 'desc':
        case 'descending':
        case '-':
        case '-1':
          dir = 'DESC';
          break;
        default:
          dir = 'ASC';
      }
      return "".concat(field, " ").concat(dir);
    }).join(', ');
  }
  /** @private **/
  function createConditionClause() {
    var conditions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var operator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'AND';
    var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    if (typeof conditions === 'string') {
      return conditions;
    }
    var conditionList = [];
    if (!Array.isArray(conditions)) {
      // if passed in hash object
      var conditionsMap = conditions;
      conditionList = Object.keys(conditionsMap).map(function (key) {
        return {
          key: key,
          value: conditionsMap[key]
        };
      });
    } else {
      conditionList = conditions.map(function (cond) {
        var conds = Object.keys(cond).map(function (key) {
          return {
            key: key,
            value: cond[key]
          };
        });
        return conds.length > 1 ? {
          key: '$and',
          value: conds.map(function (c) {
            return _defineProperty({}, c.key, c.value);
          })
        } : conds[0];
      });
    }
    var conditionClauses = conditionList.map(function (cond) {
      var d = depth + 1;
      var op;
      switch (cond.key) {
        case '$or':
        case '$and':
        case '$not':
          if (operator !== 'NOT' && conditionList.length === 1) {
            d = depth; // not change tree depth
          }
          op = cond.key === '$or' ? 'OR' : cond.key === '$and' ? 'AND' : 'NOT';
          return createConditionClause(cond.value, op, d);
        default:
          return createFieldExpression(cond.key, cond.value);
      }
    }).filter(function (expr) {
      return expr;
    });
    var hasParen;
    if (operator === 'NOT') {
      hasParen = depth > 0;
      return "".concat(hasParen ? '(' : '', "NOT ").concat(conditionClauses[0]).concat(hasParen ? ')' : '');
    }
    hasParen = depth > 0 && conditionClauses.length > 1;
    return (hasParen ? '(' : '') + conditionClauses.join(" ".concat(operator, " ")) + (hasParen ? ')' : '');
  }
  /**
   * Create SOQL
   * @private
   */
  function createSOQL(query) {
    var soql = ['SELECT ', createFieldsClause(query.fields, query.includes), ' FROM ', query.table].join('');
    var cond = createConditionClause(query.conditions);
    if (cond) {
      soql += " WHERE ".concat(cond);
    }
    var orderby = createOrderByClause(query.sort);
    if (orderby) {
      soql += " ORDER BY ".concat(orderby);
    }
    if (query.limit) {
      soql += " LIMIT ".concat(query.limit);
    }
    if (query.offset) {
      soql += " OFFSET ".concat(query.offset);
    }
    return soql;
  }
  soqlBuilder.createSOQL = createSOQL;

  var _excluded$7 = ["fields", "includes", "sort"],
    _excluded2$4 = ["conditions", "fields"];
  (function (exports) {

    var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
          enumerable: true,
          get: function get() {
            return m[k];
          }
        };
      }
      Object.defineProperty(o, k2, desc);
    } : function (o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function (o, v) {
      Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
      });
    } : function (o, v) {
      o["default"] = v;
    });
    var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function (mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.SubQuery = exports.Query = exports.ResponseTargets = void 0;
    /**
     * @file Manages query for records in Salesforce
     * @author Shinichi Tomita <shinichi.tomita@gmail.com>
     */
    var events_1 = require$$0$6;
    var logger_1 = logger;
    var record_stream_1 = __importStar(recordStream);
    var soql_builder_1 = soqlBuilder;
    var ResponseTargetValues = ['QueryResult', 'Records', 'SingleRecord', 'Count'];
    exports.ResponseTargets = ResponseTargetValues.reduce(function (values, target) {
      return _objectSpread2(_objectSpread2({}, values), {}, _defineProperty({}, target, target));
    }, {});
    /**
     *
     */
    var DEFAULT_BULK_THRESHOLD = 200;
    var DEFAULT_BULK_API_VERSION = 1;
    /**
     * Query
     */
    var Query = /*#__PURE__*/function (_events_1$EventEmitte) {
      /**
       *
       */
      function Query(conn, config, options) {
        var _this;
        _classCallCheck(this, Query);
        _this = _callSuper(this, Query);
        _defineProperty(_this, "_conn", void 0);
        _defineProperty(_this, "_logger", void 0);
        _defineProperty(_this, "_soql", void 0);
        _defineProperty(_this, "_locator", void 0);
        _defineProperty(_this, "_config", {});
        _defineProperty(_this, "_children", []);
        _defineProperty(_this, "_options", void 0);
        _defineProperty(_this, "_executed", false);
        _defineProperty(_this, "_finished", false);
        _defineProperty(_this, "_chaining", false);
        _defineProperty(_this, "_promise", void 0);
        _defineProperty(_this, "_stream", void 0);
        _defineProperty(_this, "totalSize", 0);
        _defineProperty(_this, "totalFetched", 0);
        _defineProperty(_this, "records", []);
        /**
         * Synonym of Query#skip()
         */
        _defineProperty(_this, "offset", _this.skip);
        /**
         * Synonym of Query#sort()
         */
        _defineProperty(_this, "orderby", _this.sort);
        /**
         * Synonym of Query#execute()
         */
        _defineProperty(_this, "exec", _this.execute);
        /**
         * Synonym of Query#execute()
         */
        _defineProperty(_this, "run", _this.execute);
        /**
         * Synonym of Query#destroy()
         */
        _defineProperty(_this, "delete", _this.destroy);
        /**
         * Synonym of Query#destroy()
         */
        _defineProperty(_this, "del", _this.destroy);
        _this._conn = conn;
        _this._logger = conn._logLevel ? Query._logger.createInstance(conn._logLevel) : Query._logger;
        if (typeof config === 'string') {
          _this._soql = config;
          _this._logger.debug("config is soql: ".concat(config));
        } else if (typeof config.locator === 'string') {
          var locator = config.locator;
          _this._logger.debug("config is locator: ".concat(locator));
          _this._locator = locator.includes('/') ? _this.urlToLocator(locator) : locator;
        } else {
          _this._logger.debug("config is QueryConfig: ".concat(JSON.stringify(config)));
          var fields = config.fields,
            includes = config.includes,
            sort = config.sort,
            _config = _objectWithoutProperties(config, _excluded$7);
          _this._config = _config;
          _this.select(fields);
          if (includes) {
            _this.includeChildren(includes);
          }
          if (sort) {
            _this.sort(sort);
          }
        }
        _this._options = _objectSpread2({
          headers: {},
          maxFetch: 10000,
          autoFetch: false,
          scanAll: false,
          responseTarget: 'QueryResult'
        }, options || {});
        // promise instance
        _this._promise = new Promise(function (resolve, reject) {
          _this.on('response', resolve);
          _this.on('error', reject);
        });
        _this._stream = new record_stream_1.Serializable();
        _this.on('record', function (record) {
          return _this._stream.push(record);
        });
        _this.on('end', function () {
          return _this._stream.push(null);
        });
        _this.on('error', function (err) {
          try {
            _this._stream.emit('error', err);
          } catch (e) {
            // eslint-disable-line no-empty
          }
        });
        return _this;
      }
      /**
       * Select fields to include in the returning result
       */
      _inherits(Query, _events_1$EventEmitte);
      return _createClass(Query, [{
        key: "select",
        value: function select() {
          var fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '*';
          if (this._soql) {
            throw Error('Cannot set select fields for the query which has already built SOQL.');
          }
          function toFieldArray(fields) {
            return typeof fields === 'string' ? fields.split(/\s*,\s*/) : Array.isArray(fields) ? fields.map(toFieldArray).reduce(function (fs, f) {
              return [].concat(_toConsumableArray(fs), _toConsumableArray(f));
            }, []) : Object.entries(fields).map(function (_ref) {
              var _ref2 = _slicedToArray(_ref, 2),
                f = _ref2[0],
                v = _ref2[1];
              if (typeof v === 'number' || typeof v === 'boolean') {
                return v ? [f] : [];
              } else {
                return toFieldArray(v).map(function (p) {
                  return "".concat(f, ".").concat(p);
                });
              }
            }).reduce(function (fs, f) {
              return [].concat(_toConsumableArray(fs), _toConsumableArray(f));
            }, []);
          }
          if (fields) {
            this._config.fields = toFieldArray(fields);
          }
          // force convert query record type without changing instance;
          return this;
        }
        /**
         * Set query conditions to filter the result records
         */
      }, {
        key: "where",
        value: function where(conditions) {
          if (this._soql) {
            throw Error('Cannot set where conditions for the query which has already built SOQL.');
          }
          this._config.conditions = conditions;
          return this;
        }
        /**
         * Limit the returning result
         */
      }, {
        key: "limit",
        value: function limit(_limit) {
          if (this._soql) {
            throw Error('Cannot set limit for the query which has already built SOQL.');
          }
          this._config.limit = _limit;
          return this;
        }
        /**
         * Skip records
         */
      }, {
        key: "skip",
        value: function skip(offset) {
          if (this._soql) {
            throw Error('Cannot set skip/offset for the query which has already built SOQL.');
          }
          this._config.offset = offset;
          return this;
        }
      }, {
        key: "sort",
        value: function sort(_sort, dir) {
          if (this._soql) {
            throw Error('Cannot set sort for the query which has already built SOQL.');
          }
          if (typeof _sort === 'string' && typeof dir !== 'undefined') {
            this._config.sort = [[_sort, dir]];
          } else {
            this._config.sort = _sort;
          }
          return this;
        }
      }, {
        key: "include",
        value: function include(childRelName, conditions, fields) {
          var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
          if (this._soql) {
            throw Error('Cannot include child relationship into the query which has already built SOQL.');
          }
          var childConfig = {
            fields: fields === null ? undefined : fields,
            table: childRelName,
            conditions: conditions === null ? undefined : conditions,
            limit: options.limit,
            offset: options.offset,
            sort: options.sort
          };
          // eslint-disable-next-line no-use-before-define
          var childQuery = new SubQuery(this._conn, childRelName, childConfig, this);
          this._children.push(childQuery);
          return childQuery;
        }
        /**
         * Include child relationship queries, but not moving down to the children context
         */
      }, {
        key: "includeChildren",
        value: function includeChildren(includes) {
          if (this._soql) {
            throw Error('Cannot include child relationship into the query which has already built SOQL.');
          }
          for (var _i = 0, _Object$keys = Object.keys(includes); _i < _Object$keys.length; _i++) {
            var crname = _Object$keys[_i];
            var _includes$crname = includes[crname],
              conditions = _includes$crname.conditions,
              fields = _includes$crname.fields,
              options = _objectWithoutProperties(_includes$crname, _excluded2$4);
            this.include(crname, conditions, fields, options);
          }
          return this;
        }
        /**
         * Setting maxFetch query option
         */
      }, {
        key: "maxFetch",
        value: function maxFetch(_maxFetch) {
          this._options.maxFetch = _maxFetch;
          return this;
        }
        /**
         * Switching auto fetch mode
         */
      }, {
        key: "autoFetch",
        value: function autoFetch(_autoFetch) {
          this._options.autoFetch = _autoFetch;
          return this;
        }
        /**
         * Set flag to scan all records including deleted and archived.
         */
      }, {
        key: "scanAll",
        value: function scanAll(_scanAll) {
          this._options.scanAll = _scanAll;
          return this;
        }
        /**
         *
         */
      }, {
        key: "setResponseTarget",
        value: function setResponseTarget(responseTarget) {
          if (responseTarget in exports.ResponseTargets) {
            this._options.responseTarget = responseTarget;
          }
          // force change query response target without changing instance
          return this;
        }
        /**
         * Execute query and fetch records from server.
         */
      }, {
        key: "execute",
        value: function execute() {
          var _this2 = this;
          var options_ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          if (this._executed) {
            throw new Error('re-executing already executed query');
          }
          if (this._finished) {
            throw new Error('executing already closed query');
          }
          var options = {
            headers: options_.headers || this._options.headers,
            responseTarget: options_.responseTarget || this._options.responseTarget,
            autoFetch: options_.autoFetch || this._options.autoFetch,
            maxFetch: options_.maxFetch || this._options.maxFetch,
            scanAll: options_.scanAll || this._options.scanAll
          };
          // collect fetched records in array
          // only when response target is Records and
          // either callback or chaining promises are available to this query.
          this.once('fetch', function () {
            if (options.responseTarget === exports.ResponseTargets.Records && _this2._chaining) {
              _this2._logger.debug('--- collecting all fetched records ---');
              var records = [];
              var onRecord = function onRecord(record) {
                return records.push(record);
              };
              _this2.on('record', onRecord);
              _this2.once('end', function () {
                _this2.removeListener('record', onRecord);
                _this2.emit('response', records, _this2);
              });
            }
          });
          // flag to prevent re-execution
          this._executed = true;
          _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  // start actual query
                  _this2._logger.debug('>>> Query start >>>');
                  _context.prev = 1;
                  _context.next = 4;
                  return _this2._execute(options);
                case 4:
                  _this2._logger.debug('*** Query finished ***');
                  _context.next = 11;
                  break;
                case 7:
                  _context.prev = 7;
                  _context.t0 = _context["catch"](1);
                  _this2._logger.debug('--- Query error ---', _context.t0);
                  _this2.emit('error', _context.t0);
                case 11:
                case "end":
                  return _context.stop();
              }
            }, _callee, null, [[1, 7]]);
          }))();
          // return Query instance for chaining
          return this;
        }
      }, {
        key: "locatorToUrl",
        value: function locatorToUrl() {
          return this._locator ? [this._conn._baseUrl(), '/query/', this._locator].join('') : '';
        }
      }, {
        key: "urlToLocator",
        value: function urlToLocator(url) {
          return url.split('/').pop();
        }
      }, {
        key: "constructResponse",
        value: function constructResponse(rawDone, responseTarget) {
          var _this$records$, _this$records;
          switch (responseTarget) {
            case 'Count':
              return this.totalSize;
            case 'SingleRecord':
              return (_this$records$ = (_this$records = this.records) === null || _this$records === void 0 ? void 0 : _this$records[0]) !== null && _this$records$ !== void 0 ? _this$records$ : null;
            case 'Records':
              return this.records;
            // QueryResult is default response target
            default:
              return _objectSpread2(_objectSpread2({}, {
                records: this.records,
                totalSize: this.totalSize,
                done: rawDone !== null && rawDone !== void 0 ? rawDone : true // when no records, done is omitted
              }), this._locator ? {
                nextRecordsUrl: this.locatorToUrl()
              } : {});
          }
        }
        /**
         * @private
         */
      }, {
        key: "_execute",
        value: (function () {
          var _execute2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(options) {
            var _this$records2, _data$records$length, _data$records;
            var headers, responseTarget, autoFetch, maxFetch, scanAll, url, soql, data, numRecords, totalFetched, i, record, response;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  headers = options.headers, responseTarget = options.responseTarget, autoFetch = options.autoFetch, maxFetch = options.maxFetch, scanAll = options.scanAll;
                  this._logger.debug('execute with options', options);
                  if (!this._locator) {
                    _context2.next = 6;
                    break;
                  }
                  url = this.locatorToUrl();
                  _context2.next = 11;
                  break;
                case 6:
                  _context2.next = 8;
                  return this.toSOQL();
                case 8:
                  soql = _context2.sent;
                  this._logger.debug("SOQL = ".concat(soql));
                  url = [this._conn._baseUrl(), '/', scanAll ? 'queryAll' : 'query', '?q=', encodeURIComponent(soql)].join('');
                case 11:
                  _context2.next = 13;
                  return this._conn.request({
                    method: 'GET',
                    url: url,
                    headers: headers
                  });
                case 13:
                  data = _context2.sent;
                  this.emit('fetch');
                  this.totalSize = data.totalSize;
                  this.records = (_this$records2 = this.records) === null || _this$records2 === void 0 ? void 0 : _this$records2.concat(maxFetch - this.records.length > data.records.length ? data.records : data.records.slice(0, maxFetch - this.records.length));
                  this._locator = data.nextRecordsUrl ? this.urlToLocator(data.nextRecordsUrl) : undefined;
                  this._finished = this._finished || data.done || !autoFetch || this.records.length === maxFetch ||
                  // this is what the response looks like when there are no results
                  data.records.length === 0 && data.done === undefined;
                  // streaming record instances
                  numRecords = (_data$records$length = (_data$records = data.records) === null || _data$records === void 0 ? void 0 : _data$records.length) !== null && _data$records$length !== void 0 ? _data$records$length : 0;
                  totalFetched = this.totalFetched;
                  i = 0;
                case 22:
                  if (!(i < numRecords)) {
                    _context2.next = 32;
                    break;
                  }
                  if (!(totalFetched >= maxFetch)) {
                    _context2.next = 26;
                    break;
                  }
                  this._finished = true;
                  return _context2.abrupt("break", 32);
                case 26:
                  record = data.records[i];
                  this.emit('record', record, totalFetched, this);
                  totalFetched += 1;
                case 29:
                  i++;
                  _context2.next = 22;
                  break;
                case 32:
                  this.totalFetched = totalFetched;
                  if (!this._finished) {
                    _context2.next = 40;
                    break;
                  }
                  response = this.constructResponse(data.done, responseTarget); // only fire response event when it should be notified per fetch
                  if (responseTarget !== exports.ResponseTargets.Records) {
                    this.emit('response', response, this);
                  }
                  this.emit('end');
                  return _context2.abrupt("return", response);
                case 40:
                  return _context2.abrupt("return", this._execute(options));
                case 41:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, this);
          }));
          function _execute(_x) {
            return _execute2.apply(this, arguments);
          }
          return _execute;
        }())
      }, {
        key: "stream",
        value: function stream() {
          var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'csv';
          if (!this._finished && !this._executed) {
            this.execute({
              autoFetch: true
            });
          }
          return type === 'record' ? this._stream : this._stream.stream(type);
        }
        /**
         * Pipe the queried records to another stream
         * This is for backward compatibility; Query is not a record stream instance anymore in 2.0.
         * If you want a record stream instance, use `Query#stream('record')`.
         */
      }, {
        key: "pipe",
        value: function pipe(stream) {
          return this.stream('record').pipe(stream);
        }
        /**
         * @protected
         */
      }, {
        key: "_expandFields",
        value: (function () {
          var _expandFields2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(sobject_) {
            var _this$_config, _this$_config$fields, fields, _this$_config$table, table, sobject, _yield$Promise$all, _yield$Promise$all2, efields;
            return _regeneratorRuntime().wrap(function _callee4$(_context4) {
              while (1) switch (_context4.prev = _context4.next) {
                case 0:
                  if (!this._soql) {
                    _context4.next = 2;
                    break;
                  }
                  throw new Error('Cannot expand fields for the query which has already built SOQL.');
                case 2:
                  _this$_config = this._config, _this$_config$fields = _this$_config.fields, fields = _this$_config$fields === void 0 ? [] : _this$_config$fields, _this$_config$table = _this$_config.table, table = _this$_config$table === void 0 ? '' : _this$_config$table;
                  sobject = sobject_ || table;
                  this._logger.debug("_expandFields: sobject = ".concat(sobject, ", fields = ").concat(fields.join(', ')));
                  _context4.next = 7;
                  return Promise.all([this._expandAsteriskFields(sobject, fields)].concat(_toConsumableArray(this._children.map(/*#__PURE__*/function () {
                    var _ref4 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(childQuery) {
                      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
                        while (1) switch (_context3.prev = _context3.next) {
                          case 0:
                            _context3.next = 2;
                            return childQuery._expandFields();
                          case 2:
                            return _context3.abrupt("return", []);
                          case 3:
                          case "end":
                            return _context3.stop();
                        }
                      }, _callee3);
                    }));
                    return function (_x3) {
                      return _ref4.apply(this, arguments);
                    };
                  }()))));
                case 7:
                  _yield$Promise$all = _context4.sent;
                  _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 1);
                  efields = _yield$Promise$all2[0];
                  this._config.fields = efields;
                  this._config.includes = this._children.map(function (cquery) {
                    var cconfig = cquery._query._config;
                    return [cconfig.table, cconfig];
                  }).reduce(function (includes, _ref5) {
                    var _ref6 = _slicedToArray(_ref5, 2),
                      ctable = _ref6[0],
                      cconfig = _ref6[1];
                    return _objectSpread2(_objectSpread2({}, includes), {}, _defineProperty({}, ctable, cconfig));
                  }, {});
                case 12:
                case "end":
                  return _context4.stop();
              }
            }, _callee4, this);
          }));
          function _expandFields(_x2) {
            return _expandFields2.apply(this, arguments);
          }
          return _expandFields;
        }()
        /**
         *
         */
        )
      }, {
        key: "_findRelationObject",
        value: (function () {
          var _findRelationObject2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(relName) {
            var table, sobject, upperRname, _iterator, _step, cr;
            return _regeneratorRuntime().wrap(function _callee5$(_context5) {
              while (1) switch (_context5.prev = _context5.next) {
                case 0:
                  table = this._config.table;
                  if (table) {
                    _context5.next = 3;
                    break;
                  }
                  throw new Error('No table information provided in the query');
                case 3:
                  this._logger.debug("finding table for relation \"".concat(relName, "\" in \"").concat(table, "\"..."));
                  _context5.next = 6;
                  return this._conn.describe$(table);
                case 6:
                  sobject = _context5.sent;
                  upperRname = relName.toUpperCase();
                  _iterator = _createForOfIteratorHelper(sobject.childRelationships);
                  _context5.prev = 9;
                  _iterator.s();
                case 11:
                  if ((_step = _iterator.n()).done) {
                    _context5.next = 17;
                    break;
                  }
                  cr = _step.value;
                  if (!((cr.relationshipName || '').toUpperCase() === upperRname && cr.childSObject)) {
                    _context5.next = 15;
                    break;
                  }
                  return _context5.abrupt("return", cr.childSObject);
                case 15:
                  _context5.next = 11;
                  break;
                case 17:
                  _context5.next = 22;
                  break;
                case 19:
                  _context5.prev = 19;
                  _context5.t0 = _context5["catch"](9);
                  _iterator.e(_context5.t0);
                case 22:
                  _context5.prev = 22;
                  _iterator.f();
                  return _context5.finish(22);
                case 25:
                  throw new Error("No child relationship found: ".concat(relName));
                case 26:
                case "end":
                  return _context5.stop();
              }
            }, _callee5, this, [[9, 19, 22, 25]]);
          }));
          function _findRelationObject(_x4) {
            return _findRelationObject2.apply(this, arguments);
          }
          return _findRelationObject;
        }()
        /**
         *
         */
        )
      }, {
        key: "_expandAsteriskFields",
        value: (function () {
          var _expandAsteriskFields2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7(sobject, fields) {
            var _this3 = this;
            var expandedFields;
            return _regeneratorRuntime().wrap(function _callee7$(_context7) {
              while (1) switch (_context7.prev = _context7.next) {
                case 0:
                  _context7.next = 2;
                  return Promise.all(fields.map(/*#__PURE__*/function () {
                    var _ref7 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6(field) {
                      return _regeneratorRuntime().wrap(function _callee6$(_context6) {
                        while (1) switch (_context6.prev = _context6.next) {
                          case 0:
                            return _context6.abrupt("return", _this3._expandAsteriskField(sobject, field));
                          case 1:
                          case "end":
                            return _context6.stop();
                        }
                      }, _callee6);
                    }));
                    return function (_x7) {
                      return _ref7.apply(this, arguments);
                    };
                  }()));
                case 2:
                  expandedFields = _context7.sent;
                  return _context7.abrupt("return", expandedFields.reduce(function (eflds, flds) {
                    return [].concat(_toConsumableArray(eflds), _toConsumableArray(flds));
                  }, []));
                case 4:
                case "end":
                  return _context7.stop();
              }
            }, _callee7);
          }));
          function _expandAsteriskFields(_x5, _x6) {
            return _expandAsteriskFields2.apply(this, arguments);
          }
          return _expandAsteriskFields;
        }()
        /**
         *
         */
        )
      }, {
        key: "_expandAsteriskField",
        value: (function () {
          var _expandAsteriskField2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee8(sobject, field) {
            var fpath, so, rname, _iterator2, _step2, f, rfield, referenceTo, rtable, fpaths;
            return _regeneratorRuntime().wrap(function _callee8$(_context8) {
              while (1) switch (_context8.prev = _context8.next) {
                case 0:
                  this._logger.debug("expanding field \"".concat(field, "\" in \"").concat(sobject, "\"..."));
                  fpath = field.split('.');
                  if (!(fpath[fpath.length - 1] === '*')) {
                    _context8.next = 34;
                    break;
                  }
                  _context8.next = 5;
                  return this._conn.describe$(sobject);
                case 5:
                  so = _context8.sent;
                  this._logger.debug("table ".concat(sobject, " has been described"));
                  if (!(fpath.length > 1)) {
                    _context8.next = 33;
                    break;
                  }
                  rname = fpath.shift();
                  _iterator2 = _createForOfIteratorHelper(so.fields);
                  _context8.prev = 10;
                  _iterator2.s();
                case 12:
                  if ((_step2 = _iterator2.n()).done) {
                    _context8.next = 24;
                    break;
                  }
                  f = _step2.value;
                  if (!(f.relationshipName && rname && f.relationshipName.toUpperCase() === rname.toUpperCase())) {
                    _context8.next = 22;
                    break;
                  }
                  rfield = f;
                  referenceTo = rfield.referenceTo || [];
                  rtable = referenceTo.length === 1 ? referenceTo[0] : 'Name';
                  _context8.next = 20;
                  return this._expandAsteriskField(rtable, fpath.join('.'));
                case 20:
                  fpaths = _context8.sent;
                  return _context8.abrupt("return", fpaths.map(function (fp) {
                    return "".concat(rname, ".").concat(fp);
                  }));
                case 22:
                  _context8.next = 12;
                  break;
                case 24:
                  _context8.next = 29;
                  break;
                case 26:
                  _context8.prev = 26;
                  _context8.t0 = _context8["catch"](10);
                  _iterator2.e(_context8.t0);
                case 29:
                  _context8.prev = 29;
                  _iterator2.f();
                  return _context8.finish(29);
                case 32:
                  return _context8.abrupt("return", []);
                case 33:
                  return _context8.abrupt("return", so.fields.map(function (f) {
                    return f.name;
                  }));
                case 34:
                  return _context8.abrupt("return", [field]);
                case 35:
                case "end":
                  return _context8.stop();
              }
            }, _callee8, this, [[10, 26, 29, 32]]);
          }));
          function _expandAsteriskField(_x8, _x9) {
            return _expandAsteriskField2.apply(this, arguments);
          }
          return _expandAsteriskField;
        }()
        /**
         * Explain plan for executing query
         */
        )
      }, {
        key: "explain",
        value: (function () {
          var _explain = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {
            var soql, url;
            return _regeneratorRuntime().wrap(function _callee9$(_context9) {
              while (1) switch (_context9.prev = _context9.next) {
                case 0:
                  _context9.next = 2;
                  return this.toSOQL();
                case 2:
                  soql = _context9.sent;
                  this._logger.debug("SOQL = ".concat(soql));
                  url = "/query/?explain=".concat(encodeURIComponent(soql));
                  return _context9.abrupt("return", this._conn.request(url));
                case 6:
                case "end":
                  return _context9.stop();
              }
            }, _callee9, this);
          }));
          function explain() {
            return _explain.apply(this, arguments);
          }
          return explain;
        }()
        /**
         * Return SOQL expression for the query
         */
        )
      }, {
        key: "toSOQL",
        value: (function () {
          var _toSOQL = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {
            return _regeneratorRuntime().wrap(function _callee10$(_context10) {
              while (1) switch (_context10.prev = _context10.next) {
                case 0:
                  if (!this._soql) {
                    _context10.next = 2;
                    break;
                  }
                  return _context10.abrupt("return", this._soql);
                case 2:
                  _context10.next = 4;
                  return this._expandFields();
                case 4:
                  return _context10.abrupt("return", (0, soql_builder_1.createSOQL)(this._config));
                case 5:
                case "end":
                  return _context10.stop();
              }
            }, _callee10, this);
          }));
          function toSOQL() {
            return _toSOQL.apply(this, arguments);
          }
          return toSOQL;
        }()
        /**
         * Promise/A+ interface
         * http://promises-aplus.github.io/promises-spec/
         *
         * Delegate to deferred promise, return promise instance for query result
         */
        )
      }, {
        key: "then",
        value: function then(onResolve, onReject) {
          this._chaining = true;
          if (!this._finished && !this._executed) {
            this.execute();
          }
          if (!this._promise) {
            throw new Error('invalid state: promise is not set after query execution');
          }
          return this._promise.then(onResolve, onReject);
        }
      }, {
        key: "catch",
        value: function _catch(onReject) {
          return this.then(null, onReject);
        }
      }, {
        key: "promise",
        value: function promise() {
          // TODO(cristian): verify this is correct
          return Promise.resolve(this);
        }
      }, {
        key: "destroy",
        value: function destroy(type, options) {
          var _options$bulkApiVersi,
            _this4 = this;
          if (_typeof(type) === 'object' && type !== null) {
            options = type;
            type = undefined;
          }
          options = options || {};
          var type_ = type || this._config.table;
          if (!type_) {
            throw new Error('SOQL based query needs SObject type information to bulk delete.');
          }
          // Set the threshold number to pass to bulk API
          var thresholdNum = options.allowBulk === false ? -1 : typeof options.bulkThreshold === 'number' ? options.bulkThreshold :
          // determine threshold if the connection version supports SObject collection API or not
          this._conn._ensureVersion(42) ? DEFAULT_BULK_THRESHOLD : this._conn._maxRequest / 2;
          var bulkApiVersion = (_options$bulkApiVersi = options.bulkApiVersion) !== null && _options$bulkApiVersi !== void 0 ? _options$bulkApiVersi : DEFAULT_BULK_API_VERSION;
          return new Promise(function (resolve, reject) {
            var createBatch = function createBatch() {
              return _this4._conn.sobject(type_).deleteBulk().on('response', resolve).on('error', reject);
            };
            var records = [];
            var batch = null;
            var handleRecord = function handleRecord(rec) {
              if (!rec.Id) {
                var err = new Error('Queried record does not include Salesforce record ID.');
                _this4.emit('error', err);
                return;
              }
              var record = {
                Id: rec.Id
              };
              if (batch) {
                batch.write(record);
              } else {
                records.push(record);
                if (thresholdNum >= 0 && records.length > thresholdNum && bulkApiVersion === 1) {
                  // Use bulk delete instead of SObject REST API
                  batch = createBatch();
                  for (var _i2 = 0, _records = records; _i2 < _records.length; _i2++) {
                    var _record = _records[_i2];
                    batch.write(_record);
                  }
                  records = [];
                }
              }
            };
            var handleEnd = function handleEnd() {
              if (batch) {
                batch.end();
              } else {
                var ids = records.map(function (record) {
                  return record.Id;
                });
                if (records.length > thresholdNum && bulkApiVersion === 2) {
                  _this4._conn.bulk2.loadAndWaitForResults({
                    object: type_,
                    operation: 'delete',
                    input: records
                  }).then(function (allResults) {
                    return resolve(_this4.mapBulkV2ResultsToSaveResults(allResults));
                  }, reject);
                } else {
                  _this4._conn.sobject(type_).destroy(ids, {
                    allowRecursive: true
                  }).then(resolve, reject);
                }
              }
            };
            _this4.stream('record').on('data', handleRecord).on('end', handleEnd).on('error', reject);
          });
        }
      }, {
        key: "update",
        value: function update(mapping, type, options) {
          var _options$bulkApiVersi2,
            _this5 = this;
          if (_typeof(type) === 'object' && type !== null) {
            options = type;
            type = undefined;
          }
          options = options || {};
          var type_ = type || this._config && this._config.table;
          if (!type_) {
            throw new Error('SOQL based query needs SObject type information to bulk update.');
          }
          var updateStream = typeof mapping === 'function' ? record_stream_1["default"].map(mapping) : record_stream_1["default"].recordMapStream(mapping);
          // Set the threshold number to pass to bulk API
          var thresholdNum = options.allowBulk === false ? -1 : typeof options.bulkThreshold === 'number' ? options.bulkThreshold :
          // determine threshold if the connection version supports SObject collection API or not
          this._conn._ensureVersion(42) ? DEFAULT_BULK_THRESHOLD : this._conn._maxRequest / 2;
          var bulkApiVersion = (_options$bulkApiVersi2 = options.bulkApiVersion) !== null && _options$bulkApiVersi2 !== void 0 ? _options$bulkApiVersi2 : DEFAULT_BULK_API_VERSION;
          return new Promise(function (resolve, reject) {
            var createBatch = function createBatch() {
              return _this5._conn.sobject(type_).updateBulk().on('response', resolve).on('error', reject);
            };
            var records = [];
            var batch = null;
            var handleRecord = function handleRecord(record) {
              if (batch) {
                batch.write(record);
              } else {
                records.push(record);
              }
              if (thresholdNum >= 0 && records.length > thresholdNum && bulkApiVersion === 1) {
                // Use bulk update instead of SObject REST API
                batch = createBatch();
                for (var _i3 = 0, _records2 = records; _i3 < _records2.length; _i3++) {
                  var _record2 = _records2[_i3];
                  batch.write(_record2);
                }
                records = [];
              }
            };
            var handleEnd = function handleEnd() {
              if (batch) {
                batch.end();
              } else {
                if (records.length > thresholdNum && bulkApiVersion === 2) {
                  _this5._conn.bulk2.loadAndWaitForResults({
                    object: type_,
                    operation: 'update',
                    input: records
                  }).then(function (allResults) {
                    return resolve(_this5.mapBulkV2ResultsToSaveResults(allResults));
                  }, reject);
                } else {
                  _this5._conn.sobject(type_).update(records, {
                    allowRecursive: true
                  }).then(resolve, reject);
                }
              }
            };
            _this5.stream('record').on('error', reject).pipe(updateStream).on('data', handleRecord).on('end', handleEnd).on('error', reject);
          });
        }
      }, {
        key: "mapBulkV2ResultsToSaveResults",
        value: function mapBulkV2ResultsToSaveResults(bulkJobAllResults) {
          var successSaveResults = bulkJobAllResults.successfulResults.map(function (r) {
            var saveResult = {
              id: r.sf__Id,
              success: true,
              errors: []
            };
            return saveResult;
          });
          var failedSaveResults = bulkJobAllResults.failedResults.map(function (r) {
            var saveResult = {
              success: false,
              errors: [{
                errorCode: r.sf__Error,
                message: r.sf__Error
              }]
            };
            return saveResult;
          });
          return [].concat(_toConsumableArray(successSaveResults), _toConsumableArray(failedSaveResults));
        }
      }]);
    }(events_1.EventEmitter);
    _defineProperty(Query, "_logger", (0, logger_1.getLogger)('query'));
    exports.Query = Query;
    /*--------------------------------------------*/
    /**
     * SubQuery object for representing child relationship query
     */
    var SubQuery = /*#__PURE__*/function () {
      /**
       *
       */
      function SubQuery(conn, relName, config, parent) {
        _classCallCheck(this, SubQuery);
        _defineProperty(this, "_relName", void 0);
        _defineProperty(this, "_query", void 0);
        _defineProperty(this, "_parent", void 0);
        /**
         * Synonym of SubQuery#skip()
         */
        _defineProperty(this, "offset", this.skip);
        /**
         * Synonym of SubQuery#sort()
         */
        _defineProperty(this, "orderby", this.sort);
        this._relName = relName;
        this._query = new Query(conn, config);
        this._parent = parent;
      }
      /**
       *
       */
      return _createClass(SubQuery, [{
        key: "select",
        value: function select(fields) {
          // force convert query record type without changing instance
          this._query = this._query.select(fields);
          return this;
        }
        /**
         *
         */
      }, {
        key: "where",
        value: function where(conditions) {
          this._query = this._query.where(conditions);
          return this;
        }
        /**
         * Limit the returning result
         */
      }, {
        key: "limit",
        value: function limit(_limit2) {
          this._query = this._query.limit(_limit2);
          return this;
        }
        /**
         * Skip records
         */
      }, {
        key: "skip",
        value: function skip(offset) {
          this._query = this._query.skip(offset);
          return this;
        }
      }, {
        key: "sort",
        value: function sort(_sort2, dir) {
          this._query = this._query.sort(_sort2, dir);
          return this;
        }
      }, {
        key: "_expandFields",
        value: (
        /**
         *
         */
        function () {
          var _expandFields3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {
            var sobject;
            return _regeneratorRuntime().wrap(function _callee11$(_context11) {
              while (1) switch (_context11.prev = _context11.next) {
                case 0:
                  _context11.next = 2;
                  return this._parent._findRelationObject(this._relName);
                case 2:
                  sobject = _context11.sent;
                  return _context11.abrupt("return", this._query._expandFields(sobject));
                case 4:
                case "end":
                  return _context11.stop();
              }
            }, _callee11, this);
          }));
          function _expandFields() {
            return _expandFields3.apply(this, arguments);
          }
          return _expandFields;
        }()
        /**
         * Back the context to parent query object
         */
        )
      }, {
        key: "end",
        value: function end() {
          return this._parent;
        }
      }]);
    }();
    exports.SubQuery = SubQuery;
    exports["default"] = Query;
  })(query$1);

  var sobject$1 = {};

  var recordReference = {};

  Object.defineProperty(recordReference, "__esModule", {
    value: true
  });
  recordReference.RecordReference = void 0;
  /**
   * Remote reference to record information
   */
  var RecordReference = /*#__PURE__*/function () {
    /**
     *
     */
    function RecordReference(conn, type, id) {
      _classCallCheck(this, RecordReference);
      _defineProperty(this, "type", void 0);
      _defineProperty(this, "id", void 0);
      _defineProperty(this, "_conn", void 0);
      /**
       * Synonym of Record#destroy()
       */
      _defineProperty(this, "delete", this.destroy);
      /**
       * Synonym of Record#destroy()
       */
      _defineProperty(this, "del", this.destroy);
      this._conn = conn;
      this.type = type;
      this.id = id;
    }
    /**
     * Retrieve record field information
     */
    return _createClass(RecordReference, [{
      key: "retrieve",
      value: (function () {
        var _retrieve = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(options) {
          var rec;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this._conn.retrieve(this.type, this.id, options);
              case 2:
                rec = _context.sent;
                return _context.abrupt("return", rec);
              case 4:
              case "end":
                return _context.stop();
            }
          }, _callee, this);
        }));
        function retrieve(_x) {
          return _retrieve.apply(this, arguments);
        }
        return retrieve;
      }()
      /**
       * Update record field information
       */
      )
    }, {
      key: "update",
      value: (function () {
        var _update = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(record, options) {
          var record_;
          return _regeneratorRuntime().wrap(function _callee2$(_context2) {
            while (1) switch (_context2.prev = _context2.next) {
              case 0:
                record_ = _objectSpread2(_objectSpread2({}, record), {}, {
                  Id: this.id
                });
                return _context2.abrupt("return", this._conn.update(this.type, record_, options));
              case 2:
              case "end":
                return _context2.stop();
            }
          }, _callee2, this);
        }));
        function update(_x2, _x3) {
          return _update.apply(this, arguments);
        }
        return update;
      }()
      /**
       * Delete record field
       */
      )
    }, {
      key: "destroy",
      value: function destroy(options) {
        return this._conn.destroy(this.type, this.id, options);
      }
    }, {
      key: "blob",
      value:
      /**
       * Get blob field as stream
       *
       * @param {String} fieldName - Blob field name
       * @returns {stream.Stream}
       */
      function blob(fieldName) {
        var url = [this._conn._baseUrl(), 'sobjects', this.type, this.id, fieldName].join('/');
        return this._conn.request(url).stream();
      }
    }]);
  }();
  recordReference.RecordReference = RecordReference;
  recordReference["default"] = RecordReference;

  var quickAction = {};

  Object.defineProperty(quickAction, "__esModule", {
    value: true
  });
  quickAction.QuickAction = void 0;
  /**
   * A class for quick action
   */
  var QuickAction = /*#__PURE__*/function () {
    /**
     *
     */
    function QuickAction(conn, path) {
      _classCallCheck(this, QuickAction);
      _defineProperty(this, "_conn", void 0);
      _defineProperty(this, "_path", void 0);
      this._conn = conn;
      this._path = path;
    }
    /**
     * Describe the action's information (including layout, etc.)
     */
    return _createClass(QuickAction, [{
      key: "describe",
      value: (function () {
        var _describe = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
          var url, body;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                url = "".concat(this._path, "/describe");
                _context.next = 3;
                return this._conn.request(url);
              case 3:
                body = _context.sent;
                return _context.abrupt("return", body);
              case 5:
              case "end":
                return _context.stop();
            }
          }, _callee, this);
        }));
        function describe() {
          return _describe.apply(this, arguments);
        }
        return describe;
      }()
      /**
       * Retrieve default field values in the action (for given record, if specified)
       */
      )
    }, {
      key: "defaultValues",
      value: (function () {
        var _defaultValues = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(contextId) {
          var url, body;
          return _regeneratorRuntime().wrap(function _callee2$(_context2) {
            while (1) switch (_context2.prev = _context2.next) {
              case 0:
                url = "".concat(this._path, "/defaultValues");
                if (contextId) {
                  url += "/".concat(contextId);
                }
                _context2.next = 4;
                return this._conn.request(url);
              case 4:
                body = _context2.sent;
                return _context2.abrupt("return", body);
              case 6:
              case "end":
                return _context2.stop();
            }
          }, _callee2, this);
        }));
        function defaultValues(_x) {
          return _defaultValues.apply(this, arguments);
        }
        return defaultValues;
      }()
      /**
       * Execute the action for given context Id and record information
       */
      )
    }, {
      key: "execute",
      value: (function () {
        var _execute = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(contextId, record) {
          var requestBody, resBody;
          return _regeneratorRuntime().wrap(function _callee3$(_context3) {
            while (1) switch (_context3.prev = _context3.next) {
              case 0:
                requestBody = {
                  contextId: contextId,
                  record: record
                };
                _context3.next = 3;
                return this._conn.requestPost(this._path, requestBody);
              case 3:
                resBody = _context3.sent;
                return _context3.abrupt("return", resBody);
              case 5:
              case "end":
                return _context3.stop();
            }
          }, _callee3, this);
        }));
        function execute(_x2, _x3) {
          return _execute.apply(this, arguments);
        }
        return execute;
      }())
    }]);
  }();
  quickAction.QuickAction = QuickAction;
  quickAction["default"] = QuickAction;

  var _excluded$6 = ["sort", "limit", "offset"];
  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = {
        enumerable: true,
        get: function get() {
          return m[k];
        }
      };
    }
    Object.defineProperty(o, k2, desc);
  } : function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function (o, v) {
    Object.defineProperty(o, "default", {
      enumerable: true,
      value: v
    });
  } : function (o, v) {
    o["default"] = v;
  });
  var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
  };
  var __importDefault$5 = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };
  Object.defineProperty(sobject$1, "__esModule", {
    value: true
  });
  sobject$1.SObject = void 0;
  /**
   *
   */
  var logger_1$1 = logger;
  var record_reference_1 = __importDefault$5(recordReference);
  var query_1 = __importStar(query$1);
  var quick_action_1 = __importDefault$5(quickAction);
  /**
   * A class for organizing all SObject access
   */
  var SObject = /*#__PURE__*/function () {
    /**
     *
     */
    function SObject(conn, type) {
      var _this = this;
      _classCallCheck(this, SObject);
      _defineProperty(this, "type", void 0);
      _defineProperty(this, "_conn", void 0);
      _defineProperty(this, "_logger", void 0);
      // layouts: (ln?: string) => Promise<DescribeLayoutResult>;
      _defineProperty(this, "layouts$", void 0);
      _defineProperty(this, "layouts$$", void 0);
      // compactLayouts: () => Promise<DescribeCompactLayoutsResult>;
      _defineProperty(this, "compactLayouts$", void 0);
      _defineProperty(this, "compactLayouts$$", void 0);
      // approvalLayouts: () => Promise<DescribeApprovalLayoutsResult>;
      _defineProperty(this, "approvalLayouts$", void 0);
      _defineProperty(this, "approvalLayouts$$", void 0);
      /**
       * Synonym of SObject#create()
       */
      _defineProperty(this, "insert", this.create);
      /**
       * Synonym of SObject#destroy()
       */
      _defineProperty(this, "delete", this.destroy);
      /**
       * Synonym of SObject#destroy()
       */
      _defineProperty(this, "del", this.destroy);
      /**
       * Synonym of SObject#createBulk()
       */
      _defineProperty(this, "insertBulk", this.createBulk);
      /**
       * Synonym of SObject#destroyBulk()
       */
      _defineProperty(this, "deleteBulk", this.destroyBulk);
      /**
       * Synonym of SObject#destroyHardBulk()
       */
      _defineProperty(this, "deleteHardBulk", this.destroyHardBulk);
      this.type = type;
      this._conn = conn;
      this._logger = conn._logLevel ? SObject._logger.createInstance(conn._logLevel) : SObject._logger;
      var cache = this._conn.cache;
      var layoutCacheKey = function layoutCacheKey(layoutName) {
        return layoutName ? "layouts.namedLayouts.".concat(layoutName) : "layouts.".concat(_this.type);
      };
      var layouts = SObject.prototype.layouts;
      this.layouts = cache.createCachedFunction(layouts, this, {
        key: layoutCacheKey,
        strategy: 'NOCACHE'
      });
      this.layouts$ = cache.createCachedFunction(layouts, this, {
        key: layoutCacheKey,
        strategy: 'HIT'
      });
      this.layouts$$ = cache.createCachedFunction(layouts, this, {
        key: layoutCacheKey,
        strategy: 'IMMEDIATE'
      });
      var compactLayoutCacheKey = "compactLayouts.".concat(this.type);
      var compactLayouts = SObject.prototype.compactLayouts;
      this.compactLayouts = cache.createCachedFunction(compactLayouts, this, {
        key: compactLayoutCacheKey,
        strategy: 'NOCACHE'
      });
      this.compactLayouts$ = cache.createCachedFunction(compactLayouts, this, {
        key: compactLayoutCacheKey,
        strategy: 'HIT'
      });
      this.compactLayouts$$ = cache.createCachedFunction(compactLayouts, this, {
        key: compactLayoutCacheKey,
        strategy: 'IMMEDIATE'
      });
      var approvalLayoutCacheKey = "approvalLayouts.".concat(this.type);
      var approvalLayouts = SObject.prototype.approvalLayouts;
      this.approvalLayouts = cache.createCachedFunction(approvalLayouts, this, {
        key: approvalLayoutCacheKey,
        strategy: 'NOCACHE'
      });
      this.approvalLayouts$ = cache.createCachedFunction(approvalLayouts, this, {
        key: approvalLayoutCacheKey,
        strategy: 'HIT'
      });
      this.approvalLayouts$$ = cache.createCachedFunction(approvalLayouts, this, {
        key: approvalLayoutCacheKey,
        strategy: 'IMMEDIATE'
      });
    }
    return _createClass(SObject, [{
      key: "create",
      value: function create(records, options) {
        return this._conn.create(this.type, records, options);
      }
    }, {
      key: "retrieve",
      value: function retrieve(ids, options) {
        return this._conn.retrieve(this.type, ids, options);
      }
    }, {
      key: "update",
      value: function update(records, options) {
        return this._conn.update(this.type, records, options);
      }
    }, {
      key: "upsert",
      value: function upsert(records, extIdField, options) {
        return this._conn.upsert(this.type, records, extIdField, options);
      }
    }, {
      key: "destroy",
      value: function destroy(ids, options) {
        return this._conn.destroy(this.type, ids, options);
      }
    }, {
      key: "bulkload",
      value:
      /**
       * Call Bulk#load() to execute bulkload, returning batch object
       */
      function bulkload(operation, optionsOrInput, input) {
        return this._conn.bulk.load(this.type, operation, optionsOrInput, input);
      }
      /**
       * Bulkly insert input data using bulk API
       */
    }, {
      key: "createBulk",
      value: function createBulk(input) {
        return this.bulkload('insert', input);
      }
    }, {
      key: "updateBulk",
      value:
      /**
       * Bulkly update records by input data using bulk API
       */
      function updateBulk(input) {
        return this.bulkload('update', input);
      }
      /**
       * Bulkly upsert records by input data using bulk API
       */
    }, {
      key: "upsertBulk",
      value: function upsertBulk(input, extIdField) {
        return this.bulkload('upsert', {
          extIdField: extIdField
        }, input);
      }
      /**
       * Bulkly delete records specified by input data using bulk API
       */
    }, {
      key: "destroyBulk",
      value: function destroyBulk(input) {
        return this.bulkload('delete', input);
      }
    }, {
      key: "destroyHardBulk",
      value:
      /**
       * Bulkly hard delete records specified in input data using bulk API
       */
      function destroyHardBulk(input) {
        return this.bulkload('hardDelete', input);
      }
    }, {
      key: "describe",
      value:
      /**
       * Describe SObject metadata
       */
      function describe() {
        return this._conn.describe(this.type);
      }
      /**
       *
       */
    }, {
      key: "describe$",
      value: function describe$() {
        return this._conn.describe$(this.type);
      }
      /**
       *
       */
    }, {
      key: "describe$$",
      value: function describe$$() {
        return this._conn.describe$$(this.type);
      }
      /**
       * Get record representation instance by given id
       */
    }, {
      key: "record",
      value: function record(id) {
        return new record_reference_1["default"](this._conn, this.type, id);
      }
      /**
       * Retrieve recently accessed records
       */
    }, {
      key: "recent",
      value: function recent() {
        return this._conn.recent(this.type);
      }
      /**
       * Retrieve the updated records
       */
    }, {
      key: "updated",
      value: function updated(start, end) {
        return this._conn.updated(this.type, start, end);
      }
      /**
       * Retrieve the deleted records
       */
    }, {
      key: "deleted",
      value: function deleted(start, end) {
        return this._conn.deleted(this.type, start, end);
      }
      /**
       * Describe layout information for SObject
       */
    }, {
      key: "layouts",
      value: (function () {
        var _layouts = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(layoutName) {
          var url, body;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                url = "/sobjects/".concat(this.type, "/describe/").concat(layoutName ? "namedLayouts/".concat(layoutName) : 'layouts');
                _context.next = 3;
                return this._conn.request(url);
              case 3:
                body = _context.sent;
                return _context.abrupt("return", body);
              case 5:
              case "end":
                return _context.stop();
            }
          }, _callee, this);
        }));
        function layouts(_x) {
          return _layouts.apply(this, arguments);
        }
        return layouts;
      }()
      /**
       * @typedef {Object} CompactLayoutInfo
       * @prop {Array.<Object>} compactLayouts - Array of compact layouts
       * @prop {String} defaultCompactLayoutId - ID of default compact layout
       * @prop {Array.<Object>} recordTypeCompactLayoutMappings - Array of record type mappings
       */
      /**
       * Describe compact layout information defined for SObject
       *
       * @param {Callback.<CompactLayoutInfo>} [callback] - Callback function
       * @returns {Promise.<CompactLayoutInfo>}
       */
      )
    }, {
      key: "compactLayouts",
      value: (function () {
        var _compactLayouts = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
          var url, body;
          return _regeneratorRuntime().wrap(function _callee2$(_context2) {
            while (1) switch (_context2.prev = _context2.next) {
              case 0:
                url = "/sobjects/".concat(this.type, "/describe/compactLayouts");
                _context2.next = 3;
                return this._conn.request(url);
              case 3:
                body = _context2.sent;
                return _context2.abrupt("return", body);
              case 5:
              case "end":
                return _context2.stop();
            }
          }, _callee2, this);
        }));
        function compactLayouts() {
          return _compactLayouts.apply(this, arguments);
        }
        return compactLayouts;
      }()
      /**
       * Describe compact layout information defined for SObject
       *
       * @param {Callback.<ApprovalLayoutInfo>} [callback] - Callback function
       * @returns {Promise.<ApprovalLayoutInfo>}
       */
      )
    }, {
      key: "approvalLayouts",
      value: (function () {
        var _approvalLayouts = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
          var url, body;
          return _regeneratorRuntime().wrap(function _callee3$(_context3) {
            while (1) switch (_context3.prev = _context3.next) {
              case 0:
                url = "/sobjects/".concat(this.type, "/describe/approvalLayouts");
                _context3.next = 3;
                return this._conn.request(url);
              case 3:
                body = _context3.sent;
                return _context3.abrupt("return", body);
              case 5:
              case "end":
                return _context3.stop();
            }
          }, _callee3, this);
        }));
        function approvalLayouts() {
          return _approvalLayouts.apply(this, arguments);
        }
        return approvalLayouts;
      }())
    }, {
      key: "find",
      value: function find(conditions, fields) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var sort = options.sort,
          limit = options.limit,
          offset = options.offset,
          qoptions = _objectWithoutProperties(options, _excluded$6);
        var config = {
          fields: fields == null ? undefined : fields,
          includes: options.includes,
          table: this.type,
          conditions: conditions == null ? undefined : conditions,
          sort: sort,
          limit: limit,
          offset: offset
        };
        var query = new query_1["default"](this._conn, config, qoptions);
        return query.setResponseTarget(query_1.ResponseTargets.Records);
      }
    }, {
      key: "findOne",
      value: function findOne(conditions, fields) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var query = this.find(conditions, fields, _objectSpread2(_objectSpread2({}, options), {}, {
          limit: 1
        }));
        return query.setResponseTarget(query_1.ResponseTargets.SingleRecord);
      }
      /**
       * Find and fetch records only by specifying fields to fetch.
       */
    }, {
      key: "select",
      value: function select(fields) {
        return this.find(null, fields);
      }
      /**
       * Count num of records which matches given conditions
       */
    }, {
      key: "count",
      value: function count(conditions) {
        var query = this.find(conditions, 'count()');
        return query.setResponseTarget(query_1.ResponseTargets.Count);
      }
      /**
       * Returns the list of list views for the SObject
       *
       * @param {Callback.<ListViewsInfo>} [callback] - Callback function
       * @returns {Promise.<ListViewsInfo>}
       */
    }, {
      key: "listviews",
      value: function listviews() {
        var url = "".concat(this._conn._baseUrl(), "/sobjects/").concat(this.type, "/listviews");
        return this._conn.request(url);
      }
      /**
       * Returns the list view info in specifed view id
       *
       * @param {String} id - List view ID
       * @returns {ListView}
       */
    }, {
      key: "listview",
      value: function listview(id) {
        return new ListView(this._conn, this.type, id); // eslint-disable-line no-use-before-define
      }
      /**
       * Returns all registered quick actions for the SObject
       *
       * @param {Callback.<Array.<QuickAction~QuickActionInfo>>} [callback] - Callback function
       * @returns {Promise.<Array.<QuickAction~QuickActionInfo>>}
       */
    }, {
      key: "quickActions",
      value: function quickActions() {
        return this._conn.request("/sobjects/".concat(this.type, "/quickActions"));
      }
      /**
       * Get reference for specified quick aciton in the SObject
       *
       * @param {String} actionName - Name of the quick action
       * @returns {QuickAction}
       */
    }, {
      key: "quickAction",
      value: function quickAction(actionName) {
        return new quick_action_1["default"](this._conn, "/sobjects/".concat(this.type, "/quickActions/").concat(actionName));
      }
    }]);
  }();
  _defineProperty(SObject, "_logger", (0, logger_1$1.getLogger)('sobject'));
  sobject$1.SObject = SObject;
  /**
   * A class for organizing list view information
   *
   * @protected
   * @class ListView
   * @param {Connection} conn - Connection instance
   * @param {SObject} type - SObject type
   * @param {String} id - List view ID
   */
  var ListView = /*#__PURE__*/function () {
    /**
     *
     */
    function ListView(conn, type, id) {
      _classCallCheck(this, ListView);
      _defineProperty(this, "_conn", void 0);
      _defineProperty(this, "type", void 0);
      _defineProperty(this, "id", void 0);
      this._conn = conn;
      this.type = type;
      this.id = id;
    }
    /**
     * Executes query for the list view and returns the resulting data and presentation information.
     */
    return _createClass(ListView, [{
      key: "results",
      value: function results() {
        var url = "".concat(this._conn._baseUrl(), "/sobjects/").concat(this.type, "/listviews/").concat(this.id, "/results");
        return this._conn.request(url);
      }
      /**
       * Returns detailed information about a list view
       */
    }, {
      key: "describe",
      value: function describe() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var url = "".concat(this._conn._baseUrl(), "/sobjects/").concat(this.type, "/listviews/").concat(this.id, "/describe");
        return this._conn.request({
          method: 'GET',
          url: url,
          headers: options.headers
        });
      }
      /**
       * Explain plan for executing list view
       */
    }, {
      key: "explain",
      value: function explain() {
        var url = "/query/?explain=".concat(this.id);
        return this._conn.request(url);
      }
    }]);
  }();
  sobject$1["default"] = SObject;

  var process$1 = {};

  Object.defineProperty(process$1, "__esModule", {
    value: true
  });
  process$1.Process = process$1.ApprovalProcess = process$1.ProcessRule = void 0;
  /**
   * A class which manages process (workflow) rules
   */
  var ProcessRule = /*#__PURE__*/function () {
    /**
     *
     */
    function ProcessRule(conn) {
      _classCallCheck(this, ProcessRule);
      _defineProperty(this, "_conn", void 0);
      this._conn = conn;
    }
    /**
     * Get all process rule definitions registered to sobjects
     */
    return _createClass(ProcessRule, [{
      key: "list",
      value: (function () {
        var _list = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
          var res;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this._conn.request('/process/rules');
              case 2:
                res = _context.sent;
                return _context.abrupt("return", res.rules);
              case 4:
              case "end":
                return _context.stop();
            }
          }, _callee, this);
        }));
        function list() {
          return _list.apply(this, arguments);
        }
        return list;
      }()
      /**
       * Trigger process rule for given entities
       */
      )
    }, {
      key: "trigger",
      value: function trigger(contextIds) {
        var contextIds_ = Array.isArray(contextIds) ? contextIds : [contextIds];
        // https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_process_rules_trigger.htm
        return this._conn.request({
          method: 'POST',
          url: '/process/rules/',
          body: JSON.stringify({
            contextIds: contextIds_
          }),
          headers: {
            'content-type': 'application/json'
          }
        });
      }
    }]);
  }();
  process$1.ProcessRule = ProcessRule;
  /**
   * A class which manages approval processes
   */
  var ApprovalProcess = /*#__PURE__*/function () {
    /**
     *
     */
    function ApprovalProcess(conn) {
      _classCallCheck(this, ApprovalProcess);
      _defineProperty(this, "_conn", void 0);
      this._conn = conn;
    }
    /**
     * Get all approval process definitions registered to sobjects
     */
    return _createClass(ApprovalProcess, [{
      key: "list",
      value: (function () {
        var _list2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
          var res;
          return _regeneratorRuntime().wrap(function _callee2$(_context2) {
            while (1) switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this._conn.request('/process/approvals');
              case 2:
                res = _context2.sent;
                return _context2.abrupt("return", res.approvals);
              case 4:
              case "end":
                return _context2.stop();
            }
          }, _callee2, this);
        }));
        function list() {
          return _list2.apply(this, arguments);
        }
        return list;
      }()
      /**
       * Send bulk requests for approval process
       */
      )
    }, {
      key: "request",
      value: function request(requests) {
        var requests_ = requests.map(function (req) {
          return '_request' in req ? req._request : req;
        });
        return this._conn.request({
          method: 'POST',
          url: '/process/approvals',
          headers: {
            'content-type': 'application/json'
          },
          body: JSON.stringify({
            requests: requests_
          })
        });
      }
      /**
       * Create approval process request
       *
       * @private
       */
    }, {
      key: "_createRequest",
      value: function _createRequest(actionType, contextId, comments) {
        var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
        return new ApprovalProcessRequest(this, _objectSpread2({
          actionType: actionType,
          contextId: contextId,
          comments: comments
        }, options));
      }
      /**
       * Submit approval request for an item
       */
    }, {
      key: "submit",
      value: function submit(contextId, comments, options) {
        return this._createRequest('Submit', contextId, comments, options);
      }
      /**
       * Approve approval request for an item
       */
    }, {
      key: "approve",
      value: function approve(workitemId, comments) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        return this._createRequest('Approve', workitemId, comments, options);
      }
      /**
       * Reject approval request for an item
       */
    }, {
      key: "reject",
      value: function reject(workitemId, comments) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        return this._createRequest('Reject', workitemId, comments, options);
      }
    }]);
  }();
  process$1.ApprovalProcess = ApprovalProcess;
  /**
   * A class representing approval process request
   */
  var ApprovalProcessRequest = /*#__PURE__*/function () {
    function ApprovalProcessRequest(process, request) {
      _classCallCheck(this, ApprovalProcessRequest);
      _defineProperty(this, "_process", void 0);
      _defineProperty(this, "_request", void 0);
      _defineProperty(this, "_promise", void 0);
      this._process = process;
      this._request = request;
    }
    /**
     * Promise/A+ interface
     * http://promises-aplus.github.io/promises-spec/
     */
    return _createClass(ApprovalProcessRequest, [{
      key: "then",
      value: function then(onResolve, onReject) {
        if (!this._promise) {
          this._promise = this._process.request([this]).then(function (rets) {
            return rets[0];
          });
        }
        this._promise.then(onResolve, onReject);
      }
    }]);
  }();
  /**
   * A class which manages process rules and approval processes
   */
  var Process = /*#__PURE__*/_createClass(
  /**
   *
   */
  function Process(conn) {
    _classCallCheck(this, Process);
    _defineProperty(this, "rule", void 0);
    _defineProperty(this, "approval", void 0);
    this.rule = new ProcessRule(conn);
    this.approval = new ApprovalProcess(conn);
  });
  process$1.Process = Process;
  process$1["default"] = Process;

  var _excluded$5 = ["Id", "type", "attributes"],
    _excluded2$3 = ["Id", "type", "attributes"],
    _excluded3 = ["Id", "type", "attributes"],
    _excluded4 = ["Id", "type", "attributes"];
  var hasRequiredConnection;
  function requireConnection() {
    if (hasRequiredConnection) return connection$1;
    hasRequiredConnection = 1;
    var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
          enumerable: true,
          get: function get() {
            return m[k];
          }
        };
      }
      Object.defineProperty(o, k2, desc);
    } : function (o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function (o, v) {
      Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
      });
    } : function (o, v) {
      o["default"] = v;
    });
    var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function (mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
      return mod && mod.__esModule ? mod : {
        "default": mod
      };
    };
    Object.defineProperty(connection$1, "__esModule", {
      value: true
    });
    connection$1.Connection = void 0;
    /**
     *
     */
    var events_1 = require$$0$6;
    var jsforce_1 = __importDefault(requireJsforce());
    var transport_1 = __importStar(transport$1);
    var logger_1 = logger;
    var oauth2_1 = __importDefault(oauth2);
    var cache_1 = __importDefault(cache$1);
    var http_api_1 = __importDefault(httpApi);
    var session_refresh_delegate_1 = __importDefault(sessionRefreshDelegate);
    var query_1 = __importDefault(query$1);
    var sobject_1 = __importDefault(sobject$1);
    var quick_action_1 = __importDefault(quickAction);
    var process_1 = __importDefault(process$1);
    var formatter_1 = formatter;
    var form_data_1 = __importDefault(form_data);
    /**
     *
     */
    var defaultConnectionConfig = {
      loginUrl: 'https://login.salesforce.com',
      instanceUrl: '',
      version: '50.0',
      logLevel: 'NONE',
      maxRequest: 10
    };
    /**
     *
     */
    function esc(str) {
      return String(str || '').replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
    }
    /**
     *
     */
    function parseSignedRequest(sr) {
      if (typeof sr === 'string') {
        if (sr.startsWith('{')) {
          // might be JSON
          return JSON.parse(sr);
        } // might be original base64-encoded signed request
        var msg = sr.split('.').pop(); // retrieve latter part
        if (!msg) {
          throw new Error('Invalid signed request');
        }
        var json = Buffer.from(msg, 'base64').toString('utf-8');
        return JSON.parse(json);
      }
      return sr;
    }
    /** @private **/
    function parseIdUrl(url) {
      var _url$split$slice = url.split('/').slice(-2),
        _url$split$slice2 = _slicedToArray(_url$split$slice, 2),
        organizationId = _url$split$slice2[0],
        id = _url$split$slice2[1];
      return {
        id: id,
        organizationId: organizationId,
        url: url
      };
    }
    /**
     * Session Refresh delegate function for OAuth2 authz code flow
     * @private
     */
    function oauthRefreshFn(_x, _x2) {
      return _oauthRefreshFn.apply(this, arguments);
    }
    /**
     * Session Refresh delegate function for username/password login
     * @private
     */
    function _oauthRefreshFn() {
      _oauthRefreshFn = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee35(conn, callback) {
        var res, userInfo;
        return _regeneratorRuntime().wrap(function _callee35$(_context35) {
          while (1) switch (_context35.prev = _context35.next) {
            case 0:
              _context35.prev = 0;
              if (conn.refreshToken) {
                _context35.next = 3;
                break;
              }
              throw new Error('No refresh token found in the connection');
            case 3:
              _context35.next = 5;
              return conn.oauth2.refreshToken(conn.refreshToken);
            case 5:
              res = _context35.sent;
              userInfo = parseIdUrl(res.id);
              conn._establish({
                instanceUrl: res.instance_url,
                accessToken: res.access_token,
                userInfo: userInfo
              });
              callback(undefined, res.access_token, res);
              _context35.next = 18;
              break;
            case 11:
              _context35.prev = 11;
              _context35.t0 = _context35["catch"](0);
              if (!(_context35.t0 instanceof Error)) {
                _context35.next = 17;
                break;
              }
              callback(_context35.t0);
              _context35.next = 18;
              break;
            case 17:
              throw _context35.t0;
            case 18:
            case "end":
              return _context35.stop();
          }
        }, _callee35, null, [[0, 11]]);
      }));
      return _oauthRefreshFn.apply(this, arguments);
    }
    function createUsernamePasswordRefreshFn(username, password) {
      return /*#__PURE__*/function () {
        var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(conn, callback) {
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return conn.login(username, password);
              case 3:
                if (conn.accessToken) {
                  _context.next = 5;
                  break;
                }
                throw new Error('Access token not found after login');
              case 5:
                callback(null, conn.accessToken);
                _context.next = 15;
                break;
              case 8:
                _context.prev = 8;
                _context.t0 = _context["catch"](0);
                if (!(_context.t0 instanceof Error)) {
                  _context.next = 14;
                  break;
                }
                callback(_context.t0);
                _context.next = 15;
                break;
              case 14:
                throw _context.t0;
              case 15:
              case "end":
                return _context.stop();
            }
          }, _callee, null, [[0, 8]]);
        }));
        return function (_x3, _x4) {
          return _ref.apply(this, arguments);
        };
      }();
    }
    /**
     * @private
     */
    function toSaveResult(err) {
      return {
        success: false,
        errors: [err]
      };
    }
    /**
     *
     */
    function raiseNoModuleError(name) {
      throw new Error("API module '".concat(name, "' is not loaded, load 'jsforce/api/").concat(name, "' explicitly"));
    }
    /*
     * Constant of maximum records num in DML operation (update/delete)
     */
    var MAX_DML_COUNT = 200;
    /**
     *
     */
    var Connection = /*#__PURE__*/function (_events_1$EventEmitte) {
      /**
       *
       */
      function Connection() {
        var _this;
        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        _classCallCheck(this, Connection);
        _this = _callSuper(this, Connection);
        _defineProperty(_this, "version", void 0);
        _defineProperty(_this, "loginUrl", void 0);
        _defineProperty(_this, "instanceUrl", void 0);
        _defineProperty(_this, "accessToken", void 0);
        _defineProperty(_this, "refreshToken", void 0);
        _defineProperty(_this, "userInfo", void 0);
        _defineProperty(_this, "limitInfo", {});
        _defineProperty(_this, "oauth2", void 0);
        _defineProperty(_this, "sobjects", {});
        _defineProperty(_this, "cache", void 0);
        _defineProperty(_this, "_callOptions", void 0);
        _defineProperty(_this, "_maxRequest", void 0);
        _defineProperty(_this, "_logger", void 0);
        _defineProperty(_this, "_logLevel", void 0);
        _defineProperty(_this, "_transport", void 0);
        _defineProperty(_this, "_sessionType", void 0);
        _defineProperty(_this, "_refreshDelegate", void 0);
        // describe: (name: string) => Promise<DescribeSObjectResult>;
        _defineProperty(_this, "describe$", void 0);
        _defineProperty(_this, "describe$$", void 0);
        _defineProperty(_this, "describeSObject", void 0);
        _defineProperty(_this, "describeSObject$", void 0);
        _defineProperty(_this, "describeSObject$$", void 0);
        // describeGlobal: () => Promise<DescribeGlobalResult>;
        _defineProperty(_this, "describeGlobal$", void 0);
        _defineProperty(_this, "describeGlobal$$", void 0);
        /**
         * Synonym of Connection#create()
         */
        _defineProperty(_this, "insert", _this.create);
        /**
         * Synonym of Connection#destroy()
         */
        _defineProperty(_this, "delete", _this.destroy);
        /**
         * Synonym of Connection#destroy()
         */
        _defineProperty(_this, "del", _this.destroy);
        /**
         * Module which manages process rules and approval processes
         */
        _defineProperty(_this, "process", new process_1["default"](_this));
        var loginUrl = config.loginUrl,
          instanceUrl = config.instanceUrl,
          version = config.version,
          oauth2 = config.oauth2,
          maxRequest = config.maxRequest,
          logLevel = config.logLevel,
          proxyUrl = config.proxyUrl,
          httpProxy = config.httpProxy;
        _this.loginUrl = loginUrl || defaultConnectionConfig.loginUrl;
        _this.instanceUrl = instanceUrl || defaultConnectionConfig.instanceUrl;
        if (_this.isLightningInstance()) {
          throw new Error('lightning URLs are not valid as instance URLs');
        }
        _this.version = version || defaultConnectionConfig.version;
        _this.oauth2 = oauth2 instanceof oauth2_1["default"] ? oauth2 : new oauth2_1["default"](_objectSpread2({
          loginUrl: _this.loginUrl,
          proxyUrl: proxyUrl,
          httpProxy: httpProxy
        }, oauth2));
        var refreshFn = config.refreshFn;
        if (!refreshFn && _this.oauth2.clientId) {
          refreshFn = oauthRefreshFn;
        }
        if (refreshFn) {
          _this._refreshDelegate = new session_refresh_delegate_1["default"](_this, refreshFn);
        }
        _this._maxRequest = maxRequest || defaultConnectionConfig.maxRequest;
        _this._logger = logLevel ? Connection._logger.createInstance(logLevel) : Connection._logger;
        _this._logLevel = logLevel;
        _this._transport = proxyUrl ? new transport_1.XdProxyTransport(proxyUrl) : httpProxy ? new transport_1.HttpProxyTransport(httpProxy) : new transport_1["default"]();
        _this._callOptions = config.callOptions;
        _this.cache = new cache_1["default"]();
        var describeCacheKey = function describeCacheKey(type) {
          return type ? "describe.".concat(type) : 'describe';
        };
        var describe = Connection.prototype.describe;
        _this.describe = _this.cache.createCachedFunction(describe, _this, {
          key: describeCacheKey,
          strategy: 'NOCACHE'
        });
        _this.describe$ = _this.cache.createCachedFunction(describe, _this, {
          key: describeCacheKey,
          strategy: 'HIT'
        });
        _this.describe$$ = _this.cache.createCachedFunction(describe, _this, {
          key: describeCacheKey,
          strategy: 'IMMEDIATE'
        });
        _this.describeSObject = _this.describe;
        _this.describeSObject$ = _this.describe$;
        _this.describeSObject$$ = _this.describe$$;
        var describeGlobal = Connection.prototype.describeGlobal;
        _this.describeGlobal = _this.cache.createCachedFunction(describeGlobal, _this, {
          key: 'describeGlobal',
          strategy: 'NOCACHE'
        });
        _this.describeGlobal$ = _this.cache.createCachedFunction(describeGlobal, _this, {
          key: 'describeGlobal',
          strategy: 'HIT'
        });
        _this.describeGlobal$$ = _this.cache.createCachedFunction(describeGlobal, _this, {
          key: 'describeGlobal',
          strategy: 'IMMEDIATE'
        });
        var accessToken = config.accessToken,
          refreshToken = config.refreshToken,
          sessionId = config.sessionId,
          serverUrl = config.serverUrl,
          signedRequest = config.signedRequest;
        _this._establish({
          accessToken: accessToken,
          refreshToken: refreshToken,
          instanceUrl: instanceUrl,
          sessionId: sessionId,
          serverUrl: serverUrl,
          signedRequest: signedRequest
        });
        jsforce_1["default"].emit('connection:new', _this);
        return _this;
      }
      /* @private */
      _inherits(Connection, _events_1$EventEmitte);
      return _createClass(Connection, [{
        key: "analytics",
        get:
        // API libs are not instantiated here so that core module to remain without dependencies to them
        // It is responsible for developers to import api libs explicitly if they are using 'jsforce/core' instead of 'jsforce'.
        function get() {
          return raiseNoModuleError('analytics');
        }
      }, {
        key: "apex",
        get: function get() {
          return raiseNoModuleError('apex');
        }
      }, {
        key: "bulk",
        get: function get() {
          return raiseNoModuleError('bulk');
        }
      }, {
        key: "bulk2",
        get: function get() {
          return raiseNoModuleError('bulk2');
        }
      }, {
        key: "chatter",
        get: function get() {
          return raiseNoModuleError('chatter');
        }
      }, {
        key: "metadata",
        get: function get() {
          return raiseNoModuleError('metadata');
        }
      }, {
        key: "soap",
        get: function get() {
          return raiseNoModuleError('soap');
        }
      }, {
        key: "streaming",
        get: function get() {
          return raiseNoModuleError('streaming');
        }
      }, {
        key: "tooling",
        get: function get() {
          return raiseNoModuleError('tooling');
        }
      }, {
        key: "_establish",
        value: function _establish(options) {
          var accessToken = options.accessToken,
            refreshToken = options.refreshToken,
            instanceUrl = options.instanceUrl,
            sessionId = options.sessionId,
            serverUrl = options.serverUrl,
            signedRequest = options.signedRequest,
            userInfo = options.userInfo;
          this.instanceUrl = serverUrl ? serverUrl.split('/').slice(0, 3).join('/') : instanceUrl || this.instanceUrl;
          this.accessToken = sessionId || accessToken || this.accessToken;
          this.refreshToken = refreshToken || this.refreshToken;
          if (this.refreshToken && !this._refreshDelegate) {
            throw new Error('Refresh token is specified without oauth2 client information or refresh function');
          }
          var signedRequestObject = signedRequest && parseSignedRequest(signedRequest);
          if (signedRequestObject) {
            this.accessToken = signedRequestObject.client.oauthToken;
            if (transport_1.CanvasTransport.supported) {
              this._transport = new transport_1.CanvasTransport(signedRequestObject);
            }
          }
          this.userInfo = userInfo || this.userInfo;
          this._sessionType = sessionId ? 'soap' : 'oauth2';
          this._resetInstance();
        }
        /* @priveate */
      }, {
        key: "_clearSession",
        value: function _clearSession() {
          this.accessToken = null;
          this.refreshToken = null;
          this.instanceUrl = defaultConnectionConfig.instanceUrl;
          this.userInfo = null;
          this._sessionType = null;
        }
        /* @priveate */
      }, {
        key: "_resetInstance",
        value: function _resetInstance() {
          var _this2 = this;
          this.limitInfo = {};
          this.sobjects = {};
          // TODO impl cache
          this.cache.clear();
          this.cache.get('describeGlobal').removeAllListeners('value');
          this.cache.get('describeGlobal').on('value', function (_ref2) {
            var result = _ref2.result;
            if (result) {
              var _iterator = _createForOfIteratorHelper(result.sobjects),
                _step;
              try {
                for (_iterator.s(); !(_step = _iterator.n()).done;) {
                  var so = _step.value;
                  _this2.sobject(so.name);
                }
              } catch (err) {
                _iterator.e(err);
              } finally {
                _iterator.f();
              }
            }
          });
          /*
          if (this.tooling) {
            this.tooling._resetInstance();
          }
          */
        }
        /**
         * Authorize the connection using OAuth2 flow.
         * Typically, just pass the code returned from authorization server in the first argument to complete authorization.
         * If you want to authorize with grant types other than `authorization_code`, you can also pass params object with the grant type.
         *
         * @returns {Promise<UserInfo>} An object that contains the user ID, org ID and identity URL.
         *
         */
      }, {
        key: "authorize",
        value: (function () {
          var _authorize = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(codeOrParams) {
            var params,
              res,
              userInfo,
              _args2 = arguments;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  params = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};
                  _context2.next = 3;
                  return this.oauth2.requestToken(codeOrParams, params);
                case 3:
                  res = _context2.sent;
                  userInfo = parseIdUrl(res.id);
                  this._establish({
                    instanceUrl: res.instance_url,
                    accessToken: res.access_token,
                    refreshToken: res.refresh_token,
                    userInfo: userInfo
                  });
                  this._logger.debug("<login> completed. user id = ".concat(userInfo.id, ", org id = ").concat(userInfo.organizationId));
                  return _context2.abrupt("return", userInfo);
                case 8:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, this);
          }));
          function authorize(_x5) {
            return _authorize.apply(this, arguments);
          }
          return authorize;
        }()
        /**
         *
         */
        )
      }, {
        key: "login",
        value: (function () {
          var _login = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(username, password) {
            var _this$oauth;
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  this._refreshDelegate = new session_refresh_delegate_1["default"](this, createUsernamePasswordRefreshFn(username, password));
                  if (!((_this$oauth = this.oauth2) !== null && _this$oauth !== void 0 && _this$oauth.clientId && this.oauth2.clientSecret)) {
                    _context3.next = 3;
                    break;
                  }
                  return _context3.abrupt("return", this.loginByOAuth2(username, password));
                case 3:
                  return _context3.abrupt("return", this.loginBySoap(username, password));
                case 4:
                case "end":
                  return _context3.stop();
              }
            }, _callee3, this);
          }));
          function login(_x6, _x7) {
            return _login.apply(this, arguments);
          }
          return login;
        }()
        /**
         * Login by OAuth2 username & password flow
         */
        )
      }, {
        key: "loginByOAuth2",
        value: (function () {
          var _loginByOAuth = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(username, password) {
            var res, userInfo;
            return _regeneratorRuntime().wrap(function _callee4$(_context4) {
              while (1) switch (_context4.prev = _context4.next) {
                case 0:
                  _context4.next = 2;
                  return this.oauth2.authenticate(username, password);
                case 2:
                  res = _context4.sent;
                  userInfo = parseIdUrl(res.id);
                  this._establish({
                    instanceUrl: res.instance_url,
                    accessToken: res.access_token,
                    userInfo: userInfo
                  });
                  this._logger.info("<login> completed. user id = ".concat(userInfo.id, ", org id = ").concat(userInfo.organizationId));
                  return _context4.abrupt("return", userInfo);
                case 7:
                case "end":
                  return _context4.stop();
              }
            }, _callee4, this);
          }));
          function loginByOAuth2(_x8, _x9) {
            return _loginByOAuth.apply(this, arguments);
          }
          return loginByOAuth2;
        }()
        /**
         *
         */
        )
      }, {
        key: "loginBySoap",
        value: (function () {
          var _loginBySoap = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(username, password) {
            var body, soapLoginEndpoint, response, m, faultstring, serverUrl, sessionId, userId, organizationId, idUrl, userInfo;
            return _regeneratorRuntime().wrap(function _callee5$(_context5) {
              while (1) switch (_context5.prev = _context5.next) {
                case 0:
                  if (!(!username || !password)) {
                    _context5.next = 2;
                    break;
                  }
                  return _context5.abrupt("return", Promise.reject(new Error('no username password given')));
                case 2:
                  body = ['<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">', '<se:Header/>', '<se:Body>', '<login xmlns="urn:partner.soap.sforce.com">', "<username>".concat(esc(username), "</username>"), "<password>".concat(esc(password), "</password>"), '</login>', '</se:Body>', '</se:Envelope>'].join('');
                  soapLoginEndpoint = [this.loginUrl, 'services/Soap/u', this.version].join('/');
                  _context5.next = 6;
                  return this._transport.httpRequest({
                    method: 'POST',
                    url: soapLoginEndpoint,
                    body: body,
                    headers: {
                      'Content-Type': 'text/xml',
                      SOAPAction: '""'
                    }
                  });
                case 6:
                  response = _context5.sent;
                  if (!(response.statusCode >= 400)) {
                    _context5.next = 11;
                    break;
                  }
                  m = response.body.match(/<faultstring>([^<]+)<\/faultstring>/);
                  faultstring = m && m[1];
                  throw new Error(faultstring || response.body);
                case 11:
                  if (!response.body.match(/<passwordExpired>true<\/passwordExpired>/g)) {
                    _context5.next = 13;
                    break;
                  }
                  throw new Error('Unable to login because the used password has expired.');
                case 13:
                  this._logger.debug("SOAP response = ".concat(response.body));
                  m = response.body.match(/<serverUrl>([^<]+)<\/serverUrl>/);
                  serverUrl = m && m[1];
                  m = response.body.match(/<sessionId>([^<]+)<\/sessionId>/);
                  sessionId = m && m[1];
                  m = response.body.match(/<userId>([^<]+)<\/userId>/);
                  userId = m && m[1];
                  m = response.body.match(/<organizationId>([^<]+)<\/organizationId>/);
                  organizationId = m && m[1];
                  if (!(!serverUrl || !sessionId || !userId || !organizationId)) {
                    _context5.next = 24;
                    break;
                  }
                  throw new Error('could not extract session information from login response');
                case 24:
                  idUrl = [this.loginUrl, 'id', organizationId, userId].join('/');
                  userInfo = {
                    id: userId,
                    organizationId: organizationId,
                    url: idUrl
                  };
                  this._establish({
                    serverUrl: serverUrl.split('/').slice(0, 3).join('/'),
                    sessionId: sessionId,
                    userInfo: userInfo
                  });
                  this._logger.info("<login> completed. user id = ".concat(userId, ", org id = ").concat(organizationId));
                  return _context5.abrupt("return", userInfo);
                case 29:
                case "end":
                  return _context5.stop();
              }
            }, _callee5, this);
          }));
          function loginBySoap(_x10, _x11) {
            return _loginBySoap.apply(this, arguments);
          }
          return loginBySoap;
        }()
        /**
         * Logout the current session
         */
        )
      }, {
        key: "logout",
        value: (function () {
          var _logout = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6(revoke) {
            return _regeneratorRuntime().wrap(function _callee6$(_context6) {
              while (1) switch (_context6.prev = _context6.next) {
                case 0:
                  this._refreshDelegate = undefined;
                  if (!(this._sessionType === 'oauth2')) {
                    _context6.next = 3;
                    break;
                  }
                  return _context6.abrupt("return", this.logoutByOAuth2(revoke));
                case 3:
                  return _context6.abrupt("return", this.logoutBySoap(revoke));
                case 4:
                case "end":
                  return _context6.stop();
              }
            }, _callee6, this);
          }));
          function logout(_x12) {
            return _logout.apply(this, arguments);
          }
          return logout;
        }()
        /**
         * Logout the current session by revoking access token via OAuth2 session revoke
         */
        )
      }, {
        key: "logoutByOAuth2",
        value: (function () {
          var _logoutByOAuth = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7(revoke) {
            var token;
            return _regeneratorRuntime().wrap(function _callee7$(_context7) {
              while (1) switch (_context7.prev = _context7.next) {
                case 0:
                  token = revoke ? this.refreshToken : this.accessToken;
                  if (!token) {
                    _context7.next = 4;
                    break;
                  }
                  _context7.next = 4;
                  return this.oauth2.revokeToken(token);
                case 4:
                  // Destroy the session bound to this connection
                  this._clearSession();
                  this._resetInstance();
                case 6:
                case "end":
                  return _context7.stop();
              }
            }, _callee7, this);
          }));
          function logoutByOAuth2(_x13) {
            return _logoutByOAuth.apply(this, arguments);
          }
          return logoutByOAuth2;
        }()
        /**
         * Logout the session by using SOAP web service API
         */
        )
      }, {
        key: "logoutBySoap",
        value: (function () {
          var _logoutBySoap = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee8(revoke) {
            var body, response, m, faultstring;
            return _regeneratorRuntime().wrap(function _callee8$(_context8) {
              while (1) switch (_context8.prev = _context8.next) {
                case 0:
                  body = ['<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">', '<se:Header>', '<SessionHeader xmlns="urn:partner.soap.sforce.com">', "<sessionId>".concat(esc(revoke ? this.refreshToken : this.accessToken), "</sessionId>"), '</SessionHeader>', '</se:Header>', '<se:Body>', '<logout xmlns="urn:partner.soap.sforce.com"/>', '</se:Body>', '</se:Envelope>'].join('');
                  _context8.next = 3;
                  return this._transport.httpRequest({
                    method: 'POST',
                    url: [this.instanceUrl, 'services/Soap/u', this.version].join('/'),
                    body: body,
                    headers: {
                      'Content-Type': 'text/xml',
                      SOAPAction: '""'
                    }
                  });
                case 3:
                  response = _context8.sent;
                  this._logger.debug("SOAP statusCode = ".concat(response.statusCode, ", response = ").concat(response.body));
                  if (!(response.statusCode >= 400)) {
                    _context8.next = 9;
                    break;
                  }
                  m = response.body.match(/<faultstring>([^<]+)<\/faultstring>/);
                  faultstring = m && m[1];
                  throw new Error(faultstring || response.body);
                case 9:
                  // Destroy the session bound to this connection
                  this._clearSession();
                  this._resetInstance();
                case 11:
                case "end":
                  return _context8.stop();
              }
            }, _callee8, this);
          }));
          function logoutBySoap(_x14) {
            return _logoutBySoap.apply(this, arguments);
          }
          return logoutBySoap;
        }()
        /**
         * Send REST API request with given HTTP request info, with connected session information.
         *
         * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')
         * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')
         * , or relative path from version root ('/sobjects/Account/describe').
         */
        )
      }, {
        key: "request",
        value: function request(_request) {
          var _this3 = this;
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          // if request is simple string, regard it as url in GET method
          var request_ = typeof _request === 'string' ? {
            method: 'GET',
            url: _request
          } : _request;
          // if url is given in relative path, prepend base url or instance url before.
          request_ = _objectSpread2(_objectSpread2({}, request_), {}, {
            url: this._normalizeUrl(request_.url)
          });
          var httpApi = new http_api_1["default"](this, options);
          // log api usage and its quota
          httpApi.on('response', function (response) {
            if (response.headers && response.headers['sforce-limit-info']) {
              var apiUsage = response.headers['sforce-limit-info'].match(/api-usage=(\d+)\/(\d+)/);
              if (apiUsage) {
                _this3.limitInfo = {
                  apiUsage: {
                    used: parseInt(apiUsage[1], 10),
                    limit: parseInt(apiUsage[2], 10)
                  }
                };
              }
            }
          });
          return httpApi.request(request_);
        }
        /**
         * Send HTTP GET request
         *
         * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')
         * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')
         * , or relative path from version root ('/sobjects/Account/describe').
         */
      }, {
        key: "requestGet",
        value: function requestGet(url, options) {
          var request = {
            method: 'GET',
            url: url
          };
          return this.request(request, options);
        }
        /**
         * Send HTTP POST request with JSON body, with connected session information
         *
         * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')
         * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')
         * , or relative path from version root ('/sobjects/Account/describe').
         */
      }, {
        key: "requestPost",
        value: function requestPost(url, body, options) {
          var request = {
            method: 'POST',
            url: url,
            body: JSON.stringify(body),
            headers: {
              'content-type': 'application/json'
            }
          };
          return this.request(request, options);
        }
        /**
         * Send HTTP PUT request with JSON body, with connected session information
         *
         * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')
         * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')
         * , or relative path from version root ('/sobjects/Account/describe').
         */
      }, {
        key: "requestPut",
        value: function requestPut(url, body, options) {
          var request = {
            method: 'PUT',
            url: url,
            body: JSON.stringify(body),
            headers: {
              'content-type': 'application/json'
            }
          };
          return this.request(request, options);
        }
        /**
         * Send HTTP PATCH request with JSON body
         *
         * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')
         * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')
         * , or relative path from version root ('/sobjects/Account/describe').
         */
      }, {
        key: "requestPatch",
        value: function requestPatch(url, body, options) {
          var request = {
            method: 'PATCH',
            url: url,
            body: JSON.stringify(body),
            headers: {
              'content-type': 'application/json'
            }
          };
          return this.request(request, options);
        }
        /**
         * Send HTTP DELETE request
         *
         * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')
         * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')
         * , or relative path from version root ('/sobjects/Account/describe').
         */
      }, {
        key: "requestDelete",
        value: function requestDelete(url, options) {
          var request = {
            method: 'DELETE',
            url: url
          };
          return this.request(request, options);
        }
        /** @private **/
      }, {
        key: "_baseUrl",
        value: function _baseUrl() {
          return [this.instanceUrl, 'services/data', "v".concat(this.version)].join('/');
        }
        /**
         * Convert path to absolute url
         * @private
         */
      }, {
        key: "_normalizeUrl",
        value: function _normalizeUrl(url) {
          if (url.startsWith('/')) {
            if (url.startsWith(this.instanceUrl + '/services/')) {
              return url;
            }
            if (url.startsWith('/services/')) {
              return this.instanceUrl + url;
            }
            return this._baseUrl() + url;
          }
          return url;
        }
        /**
         *
         */
      }, {
        key: "query",
        value: function query(soql, options) {
          return new query_1["default"](this, soql, options);
        }
        /**
         * Execute search by SOSL
         *
         * @param {String} sosl - SOSL string
         * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function
         * @returns {Promise.<Array.<RecordResult>>}
         */
      }, {
        key: "search",
        value: function search(sosl) {
          var url = this._baseUrl() + '/search?q=' + encodeURIComponent(sosl);
          return this.request(url);
        }
        /**
         *
         */
      }, {
        key: "queryMore",
        value: function queryMore(locator, options) {
          return new query_1["default"](this, {
            locator: locator
          }, options);
        }
        /* */
      }, {
        key: "_ensureVersion",
        value: function _ensureVersion(majorVersion) {
          var versions = this.version.split('.');
          return parseInt(versions[0], 10) >= majorVersion;
        }
        /* */
      }, {
        key: "_supports",
        value: function _supports(feature) {
          switch (feature) {
            case 'sobject-collection':
              // sobject collection is available only in API ver 42.0+
              return this._ensureVersion(42);
            default:
              return false;
          }
        }
      }, {
        key: "retrieve",
        value: function () {
          var _retrieve = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee9(type, ids) {
            var options,
              _args9 = arguments;
            return _regeneratorRuntime().wrap(function _callee9$(_context9) {
              while (1) switch (_context9.prev = _context9.next) {
                case 0:
                  options = _args9.length > 2 && _args9[2] !== undefined ? _args9[2] : {};
                  return _context9.abrupt("return", Array.isArray(ids) ?
                  // check the version whether SObject collection API is supported (42.0)
                  this._ensureVersion(42) ? this._retrieveMany(type, ids, options) : this._retrieveParallel(type, ids, options) : this._retrieveSingle(type, ids, options));
                case 2:
                case "end":
                  return _context9.stop();
              }
            }, _callee9, this);
          }));
          function retrieve(_x15, _x16) {
            return _retrieve.apply(this, arguments);
          }
          return retrieve;
        }() /** @private */
      }, {
        key: "_retrieveSingle",
        value: (function () {
          var _retrieveSingle2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee10(type, id, options) {
            var url, fields, headers;
            return _regeneratorRuntime().wrap(function _callee10$(_context10) {
              while (1) switch (_context10.prev = _context10.next) {
                case 0:
                  if (id) {
                    _context10.next = 2;
                    break;
                  }
                  throw new Error('Invalid record ID. Specify valid record ID value');
                case 2:
                  url = [this._baseUrl(), 'sobjects', type, id].join('/');
                  fields = options.fields, headers = options.headers;
                  if (fields) {
                    url += "?fields=".concat(fields.join(','));
                  }
                  return _context10.abrupt("return", this.request({
                    method: 'GET',
                    url: url,
                    headers: headers
                  }));
                case 6:
                case "end":
                  return _context10.stop();
              }
            }, _callee10, this);
          }));
          function _retrieveSingle(_x17, _x18, _x19) {
            return _retrieveSingle2.apply(this, arguments);
          }
          return _retrieveSingle;
        }() /** @private */)
      }, {
        key: "_retrieveParallel",
        value: (function () {
          var _retrieveParallel2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee11(type, ids, options) {
            var _this4 = this;
            return _regeneratorRuntime().wrap(function _callee11$(_context11) {
              while (1) switch (_context11.prev = _context11.next) {
                case 0:
                  if (!(ids.length > this._maxRequest)) {
                    _context11.next = 2;
                    break;
                  }
                  throw new Error('Exceeded max limit of concurrent call');
                case 2:
                  return _context11.abrupt("return", Promise.all(ids.map(function (id) {
                    return _this4._retrieveSingle(type, id, options)["catch"](function (err) {
                      if (options.allOrNone || err.errorCode !== 'NOT_FOUND') {
                        throw err;
                      }
                      return null;
                    });
                  })));
                case 3:
                case "end":
                  return _context11.stop();
              }
            }, _callee11, this);
          }));
          function _retrieveParallel(_x20, _x21, _x22) {
            return _retrieveParallel2.apply(this, arguments);
          }
          return _retrieveParallel;
        }() /** @private */)
      }, {
        key: "_retrieveMany",
        value: (function () {
          var _retrieveMany2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee12(type, ids, options) {
            var url, fields;
            return _regeneratorRuntime().wrap(function _callee12$(_context12) {
              while (1) switch (_context12.prev = _context12.next) {
                case 0:
                  if (!(ids.length === 0)) {
                    _context12.next = 2;
                    break;
                  }
                  return _context12.abrupt("return", []);
                case 2:
                  url = [this._baseUrl(), 'composite', 'sobjects', type].join('/');
                  _context12.t0 = options.fields;
                  if (_context12.t0) {
                    _context12.next = 8;
                    break;
                  }
                  _context12.next = 7;
                  return this.describe$(type);
                case 7:
                  _context12.t0 = _context12.sent.fields.map(function (field) {
                    return field.name;
                  });
                case 8:
                  fields = _context12.t0;
                  return _context12.abrupt("return", this.request({
                    method: 'POST',
                    url: url,
                    body: JSON.stringify({
                      ids: ids,
                      fields: fields
                    }),
                    headers: _objectSpread2(_objectSpread2({}, options.headers || {}), {}, {
                      'content-type': 'application/json'
                    })
                  }));
                case 10:
                case "end":
                  return _context12.stop();
              }
            }, _callee12, this);
          }));
          function _retrieveMany(_x23, _x24, _x25) {
            return _retrieveMany2.apply(this, arguments);
          }
          return _retrieveMany;
        }()
        /**
         * @param type
         * @param records
         * @param options
         */
        )
      }, {
        key: "create",
        value: (function () {
          var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee13(type, records) {
            var options,
              ret,
              _args13 = arguments;
            return _regeneratorRuntime().wrap(function _callee13$(_context13) {
              while (1) switch (_context13.prev = _context13.next) {
                case 0:
                  options = _args13.length > 2 && _args13[2] !== undefined ? _args13[2] : {};
                  if (!Array.isArray(records)) {
                    _context13.next = 14;
                    break;
                  }
                  if (!this._ensureVersion(42)) {
                    _context13.next = 8;
                    break;
                  }
                  _context13.next = 5;
                  return this._createMany(type, records, options);
                case 5:
                  _context13.t1 = _context13.sent;
                  _context13.next = 11;
                  break;
                case 8:
                  _context13.next = 10;
                  return this._createParallel(type, records, options);
                case 10:
                  _context13.t1 = _context13.sent;
                case 11:
                  _context13.t0 = _context13.t1;
                  _context13.next = 17;
                  break;
                case 14:
                  _context13.next = 16;
                  return this._createSingle(type, records, options);
                case 16:
                  _context13.t0 = _context13.sent;
                case 17:
                  ret = _context13.t0;
                  return _context13.abrupt("return", ret);
                case 19:
                case "end":
                  return _context13.stop();
              }
            }, _callee13, this);
          }));
          function create(_x26, _x27) {
            return _create.apply(this, arguments);
          }
          return create;
        }() /** @private */)
      }, {
        key: "_createSingle",
        value: (function () {
          var _createSingle2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee14(type, record, options) {
            var rtype, attributes, rec, sobjectType, url, contentType, body, form;
            return _regeneratorRuntime().wrap(function _callee14$(_context14) {
              while (1) switch (_context14.prev = _context14.next) {
                case 0:
                  record.Id, rtype = record.type, attributes = record.attributes, rec = _objectWithoutProperties(record, _excluded$5);
                  sobjectType = type || (attributes === null || attributes === void 0 ? void 0 : attributes.type) || rtype;
                  if (sobjectType) {
                    _context14.next = 4;
                    break;
                  }
                  throw new Error('No SObject Type defined in record');
                case 4:
                  url = [this._baseUrl(), 'sobjects', sobjectType].join('/');
                  if (options !== null && options !== void 0 && options.multipartFileFields) {
                    // Send the record as a multipart/form-data request. Useful for fields containing large binary blobs.
                    form = new form_data_1["default"](); // Extract the fields requested to be sent separately from the JSON
                    Object.entries(options.multipartFileFields).forEach(function (_ref3) {
                      var _ref4 = _slicedToArray(_ref3, 2),
                        fieldName = _ref4[0],
                        fileDetails = _ref4[1];
                      form.append(fieldName, Buffer.from(rec[fieldName], 'base64'), fileDetails);
                      delete rec[fieldName];
                    });
                    // Serialize the remaining fields as JSON
                    form.append(type, JSON.stringify(rec), {
                      contentType: 'application/json'
                    });
                    contentType = form.getHeaders()['content-type']; // This is necessary to ensure the 'boundary' is present
                    body = form;
                  } else {
                    // Default behavior: send the request as JSON
                    contentType = 'application/json';
                    body = JSON.stringify(rec);
                  }
                  return _context14.abrupt("return", this.request({
                    method: 'POST',
                    url: url,
                    body: body,
                    headers: _objectSpread2(_objectSpread2({}, options.headers || {}), {}, {
                      'content-type': contentType
                    })
                  }));
                case 7:
                case "end":
                  return _context14.stop();
              }
            }, _callee14, this);
          }));
          function _createSingle(_x28, _x29, _x30) {
            return _createSingle2.apply(this, arguments);
          }
          return _createSingle;
        }() /** @private */)
      }, {
        key: "_createParallel",
        value: (function () {
          var _createParallel2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee15(type, records, options) {
            var _this5 = this;
            return _regeneratorRuntime().wrap(function _callee15$(_context15) {
              while (1) switch (_context15.prev = _context15.next) {
                case 0:
                  if (!(records.length > this._maxRequest)) {
                    _context15.next = 2;
                    break;
                  }
                  throw new Error('Exceeded max limit of concurrent call');
                case 2:
                  return _context15.abrupt("return", Promise.all(records.map(function (record) {
                    return _this5._createSingle(type, record, options)["catch"](function (err) {
                      // be aware that allOrNone in parallel mode will not revert the other successful requests
                      // it only raises error when met at least one failed request.
                      if (options.allOrNone || !err.errorCode) {
                        throw err;
                      }
                      return toSaveResult(err);
                    });
                  })));
                case 3:
                case "end":
                  return _context15.stop();
              }
            }, _callee15, this);
          }));
          function _createParallel(_x31, _x32, _x33) {
            return _createParallel2.apply(this, arguments);
          }
          return _createParallel;
        }() /** @private */)
      }, {
        key: "_createMany",
        value: (function () {
          var _createMany2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee16(type, records, options) {
            var _records, url;
            return _regeneratorRuntime().wrap(function _callee16$(_context16) {
              while (1) switch (_context16.prev = _context16.next) {
                case 0:
                  if (!(records.length === 0)) {
                    _context16.next = 2;
                    break;
                  }
                  return _context16.abrupt("return", Promise.resolve([]));
                case 2:
                  if (!(records.length > MAX_DML_COUNT && options.allowRecursive)) {
                    _context16.next = 15;
                    break;
                  }
                  _context16.t0 = [];
                  _context16.t1 = _toConsumableArray;
                  _context16.next = 7;
                  return this._createMany(type, records.slice(0, MAX_DML_COUNT), options);
                case 7:
                  _context16.t2 = _context16.sent;
                  _context16.t3 = (0, _context16.t1)(_context16.t2);
                  _context16.t4 = _toConsumableArray;
                  _context16.next = 12;
                  return this._createMany(type, records.slice(MAX_DML_COUNT), options);
                case 12:
                  _context16.t5 = _context16.sent;
                  _context16.t6 = (0, _context16.t4)(_context16.t5);
                  return _context16.abrupt("return", _context16.t0.concat.call(_context16.t0, _context16.t3, _context16.t6));
                case 15:
                  _records = records.map(function (record) {
                    record.Id;
                      var rtype = record.type,
                      attributes = record.attributes,
                      rec = _objectWithoutProperties(record, _excluded2$3);
                    var sobjectType = type || (attributes === null || attributes === void 0 ? void 0 : attributes.type) || rtype;
                    if (!sobjectType) {
                      throw new Error('No SObject Type defined in record');
                    }
                    return _objectSpread2({
                      attributes: {
                        type: sobjectType
                      }
                    }, rec);
                  });
                  url = [this._baseUrl(), 'composite', 'sobjects'].join('/');
                  return _context16.abrupt("return", this.request({
                    method: 'POST',
                    url: url,
                    body: JSON.stringify({
                      allOrNone: options.allOrNone || false,
                      records: _records
                    }),
                    headers: _objectSpread2(_objectSpread2({}, options.headers || {}), {}, {
                      'content-type': 'application/json'
                    })
                  }));
                case 18:
                case "end":
                  return _context16.stop();
              }
            }, _callee16, this);
          }));
          function _createMany(_x34, _x35, _x36) {
            return _createMany2.apply(this, arguments);
          }
          return _createMany;
        }())
      }, {
        key: "update",
        value:
        /**
         * @param type
         * @param records
         * @param options
         */
        function update(type, records) {
          var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
          return Array.isArray(records) ?
          // check the version whether SObject collection API is supported (42.0)
          this._ensureVersion(42) ? this._updateMany(type, records, options) : this._updateParallel(type, records, options) : this._updateSingle(type, records, options);
        }
        /** @private */
      }, {
        key: "_updateSingle",
        value: (function () {
          var _updateSingle2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee17(type, record, options) {
            var id, rtype, attributes, rec, sobjectType, url;
            return _regeneratorRuntime().wrap(function _callee17$(_context17) {
              while (1) switch (_context17.prev = _context17.next) {
                case 0:
                  id = record.Id, rtype = record.type, attributes = record.attributes, rec = _objectWithoutProperties(record, _excluded3);
                  if (id) {
                    _context17.next = 3;
                    break;
                  }
                  throw new Error('Record id is not found in record.');
                case 3:
                  sobjectType = type || (attributes === null || attributes === void 0 ? void 0 : attributes.type) || rtype;
                  if (sobjectType) {
                    _context17.next = 6;
                    break;
                  }
                  throw new Error('No SObject Type defined in record');
                case 6:
                  url = [this._baseUrl(), 'sobjects', sobjectType, id].join('/');
                  return _context17.abrupt("return", this.request({
                    method: 'PATCH',
                    url: url,
                    body: JSON.stringify(rec),
                    headers: _objectSpread2(_objectSpread2({}, options.headers || {}), {}, {
                      'content-type': 'application/json'
                    })
                  }, {
                    noContentResponse: {
                      id: id,
                      success: true,
                      errors: []
                    }
                  }));
                case 8:
                case "end":
                  return _context17.stop();
              }
            }, _callee17, this);
          }));
          function _updateSingle(_x37, _x38, _x39) {
            return _updateSingle2.apply(this, arguments);
          }
          return _updateSingle;
        }() /** @private */)
      }, {
        key: "_updateParallel",
        value: (function () {
          var _updateParallel2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee18(type, records, options) {
            var _this6 = this;
            return _regeneratorRuntime().wrap(function _callee18$(_context18) {
              while (1) switch (_context18.prev = _context18.next) {
                case 0:
                  if (!(records.length > this._maxRequest)) {
                    _context18.next = 2;
                    break;
                  }
                  throw new Error('Exceeded max limit of concurrent call');
                case 2:
                  return _context18.abrupt("return", Promise.all(records.map(function (record) {
                    return _this6._updateSingle(type, record, options)["catch"](function (err) {
                      // be aware that allOrNone in parallel mode will not revert the other successful requests
                      // it only raises error when met at least one failed request.
                      if (options.allOrNone || !err.errorCode) {
                        throw err;
                      }
                      return toSaveResult(err);
                    });
                  })));
                case 3:
                case "end":
                  return _context18.stop();
              }
            }, _callee18, this);
          }));
          function _updateParallel(_x40, _x41, _x42) {
            return _updateParallel2.apply(this, arguments);
          }
          return _updateParallel;
        }() /** @private */)
      }, {
        key: "_updateMany",
        value: (function () {
          var _updateMany2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee19(type, records, options) {
            var _records, url;
            return _regeneratorRuntime().wrap(function _callee19$(_context19) {
              while (1) switch (_context19.prev = _context19.next) {
                case 0:
                  if (!(records.length === 0)) {
                    _context19.next = 2;
                    break;
                  }
                  return _context19.abrupt("return", []);
                case 2:
                  if (!(records.length > MAX_DML_COUNT && options.allowRecursive)) {
                    _context19.next = 15;
                    break;
                  }
                  _context19.t0 = [];
                  _context19.t1 = _toConsumableArray;
                  _context19.next = 7;
                  return this._updateMany(type, records.slice(0, MAX_DML_COUNT), options);
                case 7:
                  _context19.t2 = _context19.sent;
                  _context19.t3 = (0, _context19.t1)(_context19.t2);
                  _context19.t4 = _toConsumableArray;
                  _context19.next = 12;
                  return this._updateMany(type, records.slice(MAX_DML_COUNT), options);
                case 12:
                  _context19.t5 = _context19.sent;
                  _context19.t6 = (0, _context19.t4)(_context19.t5);
                  return _context19.abrupt("return", _context19.t0.concat.call(_context19.t0, _context19.t3, _context19.t6));
                case 15:
                  _records = records.map(function (record) {
                    var id = record.Id,
                      rtype = record.type,
                      attributes = record.attributes,
                      rec = _objectWithoutProperties(record, _excluded4);
                    if (!id) {
                      throw new Error('Record id is not found in record.');
                    }
                    var sobjectType = type || (attributes === null || attributes === void 0 ? void 0 : attributes.type) || rtype;
                    if (!sobjectType) {
                      throw new Error('No SObject Type defined in record');
                    }
                    return _objectSpread2({
                      id: id,
                      attributes: {
                        type: sobjectType
                      }
                    }, rec);
                  });
                  url = [this._baseUrl(), 'composite', 'sobjects'].join('/');
                  return _context19.abrupt("return", this.request({
                    method: 'PATCH',
                    url: url,
                    body: JSON.stringify({
                      allOrNone: options.allOrNone || false,
                      records: _records
                    }),
                    headers: _objectSpread2(_objectSpread2({}, options.headers || {}), {}, {
                      'content-type': 'application/json'
                    })
                  }));
                case 18:
                case "end":
                  return _context19.stop();
              }
            }, _callee19, this);
          }));
          function _updateMany(_x43, _x44, _x45) {
            return _updateMany2.apply(this, arguments);
          }
          return _updateMany;
        }()
        /**
         *
         * @param type
         * @param records
         * @param extIdField
         * @param options
         */
        )
      }, {
        key: "upsert",
        value: (function () {
          var _upsert = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee20(type, records, extIdField) {
            var _this7 = this;
            var options,
              isArray,
              _records,
              results,
              _args20 = arguments;
            return _regeneratorRuntime().wrap(function _callee20$(_context20) {
              while (1) switch (_context20.prev = _context20.next) {
                case 0:
                  options = _args20.length > 3 && _args20[3] !== undefined ? _args20[3] : {};
                  isArray = Array.isArray(records);
                  _records = Array.isArray(records) ? records : [records];
                  if (!(_records.length > this._maxRequest)) {
                    _context20.next = 5;
                    break;
                  }
                  throw new Error('Exceeded max limit of concurrent call');
                case 5:
                  _context20.next = 7;
                  return Promise.all(_records.map(function (record) {
                    var extId = record[extIdField];
                      record.type;
                      record.attributes;
                      var rec = _objectWithoutProperties(record, [extIdField, "type", "attributes"].map(_toPropertyKey));
                    var url = [_this7._baseUrl(), 'sobjects', type, extIdField, extId].join('/');
                    return _this7.request({
                      method: 'PATCH',
                      url: url,
                      body: JSON.stringify(rec),
                      headers: _objectSpread2(_objectSpread2({}, options.headers || {}), {}, {
                        'content-type': 'application/json'
                      })
                    }, {
                      noContentResponse: {
                        success: true,
                        errors: []
                      }
                    })["catch"](function (err) {
                      // Be aware that `allOrNone` option in upsert method
                      // will not revert the other successful requests.
                      // It only raises error when met at least one failed request.
                      if (!isArray || options.allOrNone || !err.errorCode) {
                        throw err;
                      }
                      return toSaveResult(err);
                    });
                  }));
                case 7:
                  results = _context20.sent;
                  return _context20.abrupt("return", isArray ? results : results[0]);
                case 9:
                case "end":
                  return _context20.stop();
              }
            }, _callee20, this);
          }));
          function upsert(_x46, _x47, _x48) {
            return _upsert.apply(this, arguments);
          }
          return upsert;
        }()
        /**
         * @param type
         * @param ids
         * @param options
         */
        )
      }, {
        key: "destroy",
        value: (function () {
          var _destroy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee21(type, ids) {
            var options,
              _args21 = arguments;
            return _regeneratorRuntime().wrap(function _callee21$(_context21) {
              while (1) switch (_context21.prev = _context21.next) {
                case 0:
                  options = _args21.length > 2 && _args21[2] !== undefined ? _args21[2] : {};
                  return _context21.abrupt("return", Array.isArray(ids) ?
                  // check the version whether SObject collection API is supported (42.0)
                  this._ensureVersion(42) ? this._destroyMany(type, ids, options) : this._destroyParallel(type, ids, options) : this._destroySingle(type, ids, options));
                case 2:
                case "end":
                  return _context21.stop();
              }
            }, _callee21, this);
          }));
          function destroy(_x49, _x50) {
            return _destroy.apply(this, arguments);
          }
          return destroy;
        }() /** @private */)
      }, {
        key: "_destroySingle",
        value: (function () {
          var _destroySingle2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee22(type, id, options) {
            var url;
            return _regeneratorRuntime().wrap(function _callee22$(_context22) {
              while (1) switch (_context22.prev = _context22.next) {
                case 0:
                  url = [this._baseUrl(), 'sobjects', type, id].join('/');
                  return _context22.abrupt("return", this.request({
                    method: 'DELETE',
                    url: url,
                    headers: options.headers || {}
                  }, {
                    noContentResponse: {
                      id: id,
                      success: true,
                      errors: []
                    }
                  }));
                case 2:
                case "end":
                  return _context22.stop();
              }
            }, _callee22, this);
          }));
          function _destroySingle(_x51, _x52, _x53) {
            return _destroySingle2.apply(this, arguments);
          }
          return _destroySingle;
        }() /** @private */)
      }, {
        key: "_destroyParallel",
        value: (function () {
          var _destroyParallel2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee23(type, ids, options) {
            var _this8 = this;
            return _regeneratorRuntime().wrap(function _callee23$(_context23) {
              while (1) switch (_context23.prev = _context23.next) {
                case 0:
                  if (!(ids.length > this._maxRequest)) {
                    _context23.next = 2;
                    break;
                  }
                  throw new Error('Exceeded max limit of concurrent call');
                case 2:
                  return _context23.abrupt("return", Promise.all(ids.map(function (id) {
                    return _this8._destroySingle(type, id, options)["catch"](function (err) {
                      // Be aware that `allOrNone` option in parallel mode
                      // will not revert the other successful requests.
                      // It only raises error when met at least one failed request.
                      if (options.allOrNone || !err.errorCode) {
                        throw err;
                      }
                      return toSaveResult(err);
                    });
                  })));
                case 3:
                case "end":
                  return _context23.stop();
              }
            }, _callee23, this);
          }));
          function _destroyParallel(_x54, _x55, _x56) {
            return _destroyParallel2.apply(this, arguments);
          }
          return _destroyParallel;
        }() /** @private */)
      }, {
        key: "_destroyMany",
        value: (function () {
          var _destroyMany2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee24(type, ids, options) {
            var url;
            return _regeneratorRuntime().wrap(function _callee24$(_context24) {
              while (1) switch (_context24.prev = _context24.next) {
                case 0:
                  if (!(ids.length === 0)) {
                    _context24.next = 2;
                    break;
                  }
                  return _context24.abrupt("return", []);
                case 2:
                  if (!(ids.length > MAX_DML_COUNT && options.allowRecursive)) {
                    _context24.next = 15;
                    break;
                  }
                  _context24.t0 = [];
                  _context24.t1 = _toConsumableArray;
                  _context24.next = 7;
                  return this._destroyMany(type, ids.slice(0, MAX_DML_COUNT), options);
                case 7:
                  _context24.t2 = _context24.sent;
                  _context24.t3 = (0, _context24.t1)(_context24.t2);
                  _context24.t4 = _toConsumableArray;
                  _context24.next = 12;
                  return this._destroyMany(type, ids.slice(MAX_DML_COUNT), options);
                case 12:
                  _context24.t5 = _context24.sent;
                  _context24.t6 = (0, _context24.t4)(_context24.t5);
                  return _context24.abrupt("return", _context24.t0.concat.call(_context24.t0, _context24.t3, _context24.t6));
                case 15:
                  url = [this._baseUrl(), 'composite', 'sobjects?ids='].join('/') + ids.join(',');
                  if (options.allOrNone) {
                    url += '&allOrNone=true';
                  }
                  return _context24.abrupt("return", this.request({
                    method: 'DELETE',
                    url: url,
                    headers: options.headers || {}
                  }));
                case 18:
                case "end":
                  return _context24.stop();
              }
            }, _callee24, this);
          }));
          function _destroyMany(_x57, _x58, _x59) {
            return _destroyMany2.apply(this, arguments);
          }
          return _destroyMany;
        }())
      }, {
        key: "describe",
        value: (
        /**
         * Describe SObject metadata
         */
        function () {
          var _describe = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee25(type) {
            var url, body;
            return _regeneratorRuntime().wrap(function _callee25$(_context25) {
              while (1) switch (_context25.prev = _context25.next) {
                case 0:
                  url = [this._baseUrl(), 'sobjects', type, 'describe'].join('/');
                  _context25.next = 3;
                  return this.request(url);
                case 3:
                  body = _context25.sent;
                  return _context25.abrupt("return", body);
                case 5:
                case "end":
                  return _context25.stop();
              }
            }, _callee25, this);
          }));
          function describe(_x60) {
            return _describe.apply(this, arguments);
          }
          return describe;
        }()
        /**
         * Describe global SObjects
         */
        )
      }, {
        key: "describeGlobal",
        value: (function () {
          var _describeGlobal = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee26() {
            var url, body;
            return _regeneratorRuntime().wrap(function _callee26$(_context26) {
              while (1) switch (_context26.prev = _context26.next) {
                case 0:
                  url = "".concat(this._baseUrl(), "/sobjects");
                  _context26.next = 3;
                  return this.request(url);
                case 3:
                  body = _context26.sent;
                  return _context26.abrupt("return", body);
                case 5:
                case "end":
                  return _context26.stop();
              }
            }, _callee26, this);
          }));
          function describeGlobal() {
            return _describeGlobal.apply(this, arguments);
          }
          return describeGlobal;
        }())
      }, {
        key: "sobject",
        value: function sobject(type) {
          var so = this.sobjects[type] || new sobject_1["default"](this, type);
          this.sobjects[type] = so;
          return so;
        }
        /**
         * Get identity information of current user
         */
      }, {
        key: "identity",
        value: (function () {
          var _identity = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee27() {
            var _this$userInfo;
            var options,
              url,
              _res,
              res,
              _args27 = arguments;
            return _regeneratorRuntime().wrap(function _callee27$(_context27) {
              while (1) switch (_context27.prev = _context27.next) {
                case 0:
                  options = _args27.length > 0 && _args27[0] !== undefined ? _args27[0] : {};
                  url = (_this$userInfo = this.userInfo) === null || _this$userInfo === void 0 ? void 0 : _this$userInfo.url;
                  if (url) {
                    _context27.next = 7;
                    break;
                  }
                  _context27.next = 5;
                  return this.request({
                    method: 'GET',
                    url: this._baseUrl(),
                    headers: options.headers
                  });
                case 5:
                  _res = _context27.sent;
                  url = _res.identity;
                case 7:
                  url += '?format=json';
                  if (this.accessToken) {
                    url += "&oauth_token=".concat(encodeURIComponent(this.accessToken));
                  }
                  _context27.next = 11;
                  return this.request({
                    method: 'GET',
                    url: url
                  });
                case 11:
                  res = _context27.sent;
                  this.userInfo = {
                    id: res.user_id,
                    organizationId: res.organization_id,
                    url: res.id
                  };
                  return _context27.abrupt("return", res);
                case 14:
                case "end":
                  return _context27.stop();
              }
            }, _callee27, this);
          }));
          function identity() {
            return _identity.apply(this, arguments);
          }
          return identity;
        }()
        /**
         * List recently viewed records
         */
        )
      }, {
        key: "recent",
        value: (function () {
          var _recent = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee28(type, limit) {
            var url, _yield$this$request, recentItems;
            return _regeneratorRuntime().wrap(function _callee28$(_context28) {
              while (1) switch (_context28.prev = _context28.next) {
                case 0:
                  /* eslint-disable no-param-reassign */
                  if (typeof type === 'number') {
                    limit = type;
                    type = undefined;
                  }
                  if (!type) {
                    _context28.next = 8;
                    break;
                  }
                  url = [this._baseUrl(), 'sobjects', type].join('/');
                  _context28.next = 5;
                  return this.request(url);
                case 5:
                  _yield$this$request = _context28.sent;
                  recentItems = _yield$this$request.recentItems;
                  return _context28.abrupt("return", limit ? recentItems.slice(0, limit) : recentItems);
                case 8:
                  url = "".concat(this._baseUrl(), "/recent");
                  if (limit) {
                    url += "?limit=".concat(limit);
                  }
                  return _context28.abrupt("return", this.request(url));
                case 11:
                case "end":
                  return _context28.stop();
              }
            }, _callee28, this);
          }));
          function recent(_x61, _x62) {
            return _recent.apply(this, arguments);
          }
          return recent;
        }()
        /**
         * Retrieve updated records
         */
        )
      }, {
        key: "updated",
        value: (function () {
          var _updated = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee29(type, start, end) {
            var url, body;
            return _regeneratorRuntime().wrap(function _callee29$(_context29) {
              while (1) switch (_context29.prev = _context29.next) {
                case 0:
                  /* eslint-disable no-param-reassign */
                  url = [this._baseUrl(), 'sobjects', type, 'updated'].join('/');
                  if (typeof start === 'string') {
                    start = new Date(start);
                  }
                  start = (0, formatter_1.formatDate)(start);
                  url += "?start=".concat(encodeURIComponent(start));
                  if (typeof end === 'string') {
                    end = new Date(end);
                  }
                  end = (0, formatter_1.formatDate)(end);
                  url += "&end=".concat(encodeURIComponent(end));
                  _context29.next = 9;
                  return this.request(url);
                case 9:
                  body = _context29.sent;
                  return _context29.abrupt("return", body);
                case 11:
                case "end":
                  return _context29.stop();
              }
            }, _callee29, this);
          }));
          function updated(_x63, _x64, _x65) {
            return _updated.apply(this, arguments);
          }
          return updated;
        }()
        /**
         * Retrieve deleted records
         */
        )
      }, {
        key: "deleted",
        value: (function () {
          var _deleted = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee30(type, start, end) {
            var url, body;
            return _regeneratorRuntime().wrap(function _callee30$(_context30) {
              while (1) switch (_context30.prev = _context30.next) {
                case 0:
                  /* eslint-disable no-param-reassign */
                  url = [this._baseUrl(), 'sobjects', type, 'deleted'].join('/');
                  if (typeof start === 'string') {
                    start = new Date(start);
                  }
                  start = (0, formatter_1.formatDate)(start);
                  url += "?start=".concat(encodeURIComponent(start));
                  if (typeof end === 'string') {
                    end = new Date(end);
                  }
                  end = (0, formatter_1.formatDate)(end);
                  url += "&end=".concat(encodeURIComponent(end));
                  _context30.next = 9;
                  return this.request(url);
                case 9:
                  body = _context30.sent;
                  return _context30.abrupt("return", body);
                case 11:
                case "end":
                  return _context30.stop();
              }
            }, _callee30, this);
          }));
          function deleted(_x66, _x67, _x68) {
            return _deleted.apply(this, arguments);
          }
          return deleted;
        }()
        /**
         * Returns a list of all tabs
         */
        )
      }, {
        key: "tabs",
        value: (function () {
          var _tabs = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee31() {
            var url, body;
            return _regeneratorRuntime().wrap(function _callee31$(_context31) {
              while (1) switch (_context31.prev = _context31.next) {
                case 0:
                  url = [this._baseUrl(), 'tabs'].join('/');
                  _context31.next = 3;
                  return this.request(url);
                case 3:
                  body = _context31.sent;
                  return _context31.abrupt("return", body);
                case 5:
                case "end":
                  return _context31.stop();
              }
            }, _callee31, this);
          }));
          function tabs() {
            return _tabs.apply(this, arguments);
          }
          return tabs;
        }()
        /**
         * Returns current system limit in the organization
         */
        )
      }, {
        key: "limits",
        value: (function () {
          var _limits = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee32() {
            var url, body;
            return _regeneratorRuntime().wrap(function _callee32$(_context32) {
              while (1) switch (_context32.prev = _context32.next) {
                case 0:
                  url = [this._baseUrl(), 'limits'].join('/');
                  _context32.next = 3;
                  return this.request(url);
                case 3:
                  body = _context32.sent;
                  return _context32.abrupt("return", body);
                case 5:
                case "end":
                  return _context32.stop();
              }
            }, _callee32, this);
          }));
          function limits() {
            return _limits.apply(this, arguments);
          }
          return limits;
        }()
        /**
         * Returns a theme info
         */
        )
      }, {
        key: "theme",
        value: (function () {
          var _theme = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee33() {
            var url, body;
            return _regeneratorRuntime().wrap(function _callee33$(_context33) {
              while (1) switch (_context33.prev = _context33.next) {
                case 0:
                  url = [this._baseUrl(), 'theme'].join('/');
                  _context33.next = 3;
                  return this.request(url);
                case 3:
                  body = _context33.sent;
                  return _context33.abrupt("return", body);
                case 5:
                case "end":
                  return _context33.stop();
              }
            }, _callee33, this);
          }));
          function theme() {
            return _theme.apply(this, arguments);
          }
          return theme;
        }()
        /**
         * Returns all registered global quick actions
         */
        )
      }, {
        key: "quickActions",
        value: (function () {
          var _quickActions = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee34() {
            var body;
            return _regeneratorRuntime().wrap(function _callee34$(_context34) {
              while (1) switch (_context34.prev = _context34.next) {
                case 0:
                  _context34.next = 2;
                  return this.request('/quickActions');
                case 2:
                  body = _context34.sent;
                  return _context34.abrupt("return", body);
                case 4:
                case "end":
                  return _context34.stop();
              }
            }, _callee34, this);
          }));
          function quickActions() {
            return _quickActions.apply(this, arguments);
          }
          return quickActions;
        }()
        /**
         * Get reference for specified global quick action
         */
        )
      }, {
        key: "quickAction",
        value: function quickAction(actionName) {
          return new quick_action_1["default"](this, "/quickActions/".concat(actionName));
        }
      }, {
        key: "isLightningInstance",
        value: function isLightningInstance() {
          return this.instanceUrl.includes('.lightning.force.com') || this.instanceUrl.includes('.lightning.crmforce.mil') || this.instanceUrl.includes('.lightning.sfcrmapps.cn');
        }
      }]);
    }(events_1.EventEmitter);
    _defineProperty(Connection, "_logger", (0, logger_1.getLogger)('connection'));
    connection$1.Connection = Connection;
    connection$1["default"] = Connection;
    return connection$1;
  }

  var registry = {};

  var file = {};

  var base$2 = {};

  var _excluded$4 = ["client"],
    _excluded2$2 = ["oauth2"];
  var hasRequiredBase;
  function requireBase() {
    if (hasRequiredBase) return base$2;
    hasRequiredBase = 1;
    var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
      return mod && mod.__esModule ? mod : {
        "default": mod
      };
    };
    Object.defineProperty(base$2, "__esModule", {
      value: true
    });
    base$2.BaseRegistry = void 0;
    var connection_1 = __importDefault(requireConnection());
    /**
     *
     */
    var BaseRegistry = /*#__PURE__*/function () {
      function BaseRegistry() {
        _classCallCheck(this, BaseRegistry);
        _defineProperty(this, "_registryConfig", {});
      }
      return _createClass(BaseRegistry, [{
        key: "_saveConfig",
        value: function _saveConfig() {
          throw new Error('_saveConfig must be implemented in subclass');
        }
      }, {
        key: "_getClients",
        value: function _getClients() {
          return this._registryConfig.clients || (this._registryConfig.clients = {});
        }
      }, {
        key: "_getConnections",
        value: function _getConnections() {
          return this._registryConfig.connections || (this._registryConfig.connections = {});
        }
        // eslint-disable-next-line @typescript-eslint/require-await
      }, {
        key: "getConnectionNames",
        value: function () {
          var _getConnectionNames = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  return _context.abrupt("return", Object.keys(this._getConnections()));
                case 1:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function getConnectionNames() {
            return _getConnectionNames.apply(this, arguments);
          }
          return getConnectionNames;
        }()
      }, {
        key: "getConnection",
        value: function () {
          var _getConnection = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(name) {
            var config;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return this.getConnectionConfig(name);
                case 2:
                  config = _context2.sent;
                  return _context2.abrupt("return", config ? new connection_1["default"](config) : null);
                case 4:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, this);
          }));
          function getConnection(_x) {
            return _getConnection.apply(this, arguments);
          }
          return getConnection;
        }()
      }, {
        key: "getConnectionConfig",
        value: function () {
          var _getConnectionConfig = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(name) {
            var connections, connConfig, client, connConfig_;
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  if (!name) {
                    name = this._registryConfig['default'];
                  }
                  connections = this._getConnections();
                  connConfig = name ? connections[name] : undefined;
                  if (connConfig) {
                    _context3.next = 5;
                    break;
                  }
                  return _context3.abrupt("return", null);
                case 5:
                  client = connConfig.client, connConfig_ = _objectWithoutProperties(connConfig, _excluded$4);
                  if (!client) {
                    _context3.next = 18;
                    break;
                  }
                  _context3.t0 = _objectSpread2;
                  _context3.t1 = _objectSpread2({}, connConfig_);
                  _context3.t2 = {};
                  _context3.t3 = _objectSpread2;
                  _context3.t4 = {};
                  _context3.next = 14;
                  return this.getClientConfig(client);
                case 14:
                  _context3.t5 = _context3.sent;
                  _context3.t6 = (0, _context3.t3)(_context3.t4, _context3.t5);
                  _context3.t7 = {
                    oauth2: _context3.t6
                  };
                  return _context3.abrupt("return", (0, _context3.t0)(_context3.t1, _context3.t2, _context3.t7));
                case 18:
                  return _context3.abrupt("return", connConfig_);
                case 19:
                case "end":
                  return _context3.stop();
              }
            }, _callee3, this);
          }));
          function getConnectionConfig(_x2) {
            return _getConnectionConfig.apply(this, arguments);
          }
          return getConnectionConfig;
        }() // eslint-disable-next-line @typescript-eslint/require-await
      }, {
        key: "saveConnectionConfig",
        value: function () {
          var _saveConnectionConfig = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(name, connConfig) {
            var connections, oauth2, connConfig_, persistConnConfig, clientName;
            return _regeneratorRuntime().wrap(function _callee4$(_context4) {
              while (1) switch (_context4.prev = _context4.next) {
                case 0:
                  connections = this._getConnections();
                  oauth2 = connConfig.oauth2, connConfig_ = _objectWithoutProperties(connConfig, _excluded2$2);
                  persistConnConfig = connConfig_;
                  if (oauth2) {
                    clientName = this._findClientName(oauth2);
                    if (clientName) {
                      persistConnConfig = _objectSpread2(_objectSpread2({}, persistConnConfig), {}, {
                        client: clientName
                      });
                    }
                    delete connConfig.oauth2;
                  }
                  connections[name] = persistConnConfig;
                  this._saveConfig();
                case 6:
                case "end":
                  return _context4.stop();
              }
            }, _callee4, this);
          }));
          function saveConnectionConfig(_x3, _x4) {
            return _saveConnectionConfig.apply(this, arguments);
          }
          return saveConnectionConfig;
        }()
      }, {
        key: "_findClientName",
        value: function _findClientName(_ref) {
          var clientId = _ref.clientId,
            loginUrl = _ref.loginUrl;
          var clients = this._getClients();
          for (var _i = 0, _Object$keys = Object.keys(clients); _i < _Object$keys.length; _i++) {
            var name = _Object$keys[_i];
            var client = clients[name];
            if (client.clientId === clientId && (client.loginUrl || 'https://login.salesforce.com') === loginUrl) {
              return name;
            }
          }
          return null;
        }
        // eslint-disable-next-line @typescript-eslint/require-await
      }, {
        key: "setDefaultConnection",
        value: function () {
          var _setDefaultConnection = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(name) {
            return _regeneratorRuntime().wrap(function _callee5$(_context5) {
              while (1) switch (_context5.prev = _context5.next) {
                case 0:
                  this._registryConfig['default'] = name;
                  this._saveConfig();
                case 2:
                case "end":
                  return _context5.stop();
              }
            }, _callee5, this);
          }));
          function setDefaultConnection(_x5) {
            return _setDefaultConnection.apply(this, arguments);
          }
          return setDefaultConnection;
        }() // eslint-disable-next-line @typescript-eslint/require-await
      }, {
        key: "removeConnectionConfig",
        value: function () {
          var _removeConnectionConfig = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6(name) {
            var connections;
            return _regeneratorRuntime().wrap(function _callee6$(_context6) {
              while (1) switch (_context6.prev = _context6.next) {
                case 0:
                  connections = this._getConnections();
                  delete connections[name];
                  this._saveConfig();
                case 3:
                case "end":
                  return _context6.stop();
              }
            }, _callee6, this);
          }));
          function removeConnectionConfig(_x6) {
            return _removeConnectionConfig.apply(this, arguments);
          }
          return removeConnectionConfig;
        }() // eslint-disable-next-line @typescript-eslint/require-await
      }, {
        key: "getClientConfig",
        value: function () {
          var _getClientConfig = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7(name) {
            var clients, clientConfig;
            return _regeneratorRuntime().wrap(function _callee7$(_context7) {
              while (1) switch (_context7.prev = _context7.next) {
                case 0:
                  clients = this._getClients();
                  clientConfig = clients[name];
                  return _context7.abrupt("return", clientConfig && _objectSpread2({}, clientConfig));
                case 3:
                case "end":
                  return _context7.stop();
              }
            }, _callee7, this);
          }));
          function getClientConfig(_x7) {
            return _getClientConfig.apply(this, arguments);
          }
          return getClientConfig;
        }() // eslint-disable-next-line @typescript-eslint/require-await
      }, {
        key: "getClientNames",
        value: function () {
          var _getClientNames = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
            return _regeneratorRuntime().wrap(function _callee8$(_context8) {
              while (1) switch (_context8.prev = _context8.next) {
                case 0:
                  return _context8.abrupt("return", Object.keys(this._getClients()));
                case 1:
                case "end":
                  return _context8.stop();
              }
            }, _callee8, this);
          }));
          function getClientNames() {
            return _getClientNames.apply(this, arguments);
          }
          return getClientNames;
        }() // eslint-disable-next-line @typescript-eslint/require-await
      }, {
        key: "registerClientConfig",
        value: function () {
          var _registerClientConfig = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee9(name, clientConfig) {
            var clients;
            return _regeneratorRuntime().wrap(function _callee9$(_context9) {
              while (1) switch (_context9.prev = _context9.next) {
                case 0:
                  clients = this._getClients();
                  clients[name] = clientConfig;
                  this._saveConfig();
                case 3:
                case "end":
                  return _context9.stop();
              }
            }, _callee9, this);
          }));
          function registerClientConfig(_x8, _x9) {
            return _registerClientConfig.apply(this, arguments);
          }
          return registerClientConfig;
        }()
      }]);
    }();
    base$2.BaseRegistry = BaseRegistry;
    return base$2;
  }

  var hasRequiredFile;
  function requireFile() {
    if (hasRequiredFile) return file;
    hasRequiredFile = 1;
    var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
      return mod && mod.__esModule ? mod : {
        "default": mod
      };
    };
    Object.defineProperty(file, "__esModule", {
      value: true
    });
    file.FileRegistry = void 0;
    var fs_1 = __importDefault(require$$6);
    var path_1 = __importDefault(require$$1$5);
    var base_1 = requireBase();
    /**
     *
     */
    function getDefaultConfigFilePath() {
      var homeDir = process.env[process.platform === 'win32' ? 'USERPROFILE' : 'HOME'];
      if (!homeDir) {
        throw new Error('cannot find user home directory to store configuration files');
      }
      return path_1["default"].join(homeDir, '.jsforce', 'config.json');
    }
    /**
     *
     */
    var FileRegistry = /*#__PURE__*/function (_base_1$BaseRegistry) {
      function FileRegistry(_ref) {
        var _this;
        var configFilePath = _ref.configFilePath;
        _classCallCheck(this, FileRegistry);
        _this = _callSuper(this, FileRegistry);
        _defineProperty(_this, "_configFilePath", void 0);
        _this._configFilePath = configFilePath || getDefaultConfigFilePath();
        try {
          var data = fs_1["default"].readFileSync(_this._configFilePath, 'utf-8');
          _this._registryConfig = JSON.parse(data);
        } catch (e) {
          //
        }
        return _this;
      }
      _inherits(FileRegistry, _base_1$BaseRegistry);
      return _createClass(FileRegistry, [{
        key: "_saveConfig",
        value: function _saveConfig() {
          var data = JSON.stringify(this._registryConfig, null, 4);
          try {
            fs_1["default"].writeFileSync(this._configFilePath, data);
            fs_1["default"].chmodSync(this._configFilePath, '600');
          } catch (e) {
            var configDir = path_1["default"].dirname(this._configFilePath);
            fs_1["default"].mkdirSync(configDir);
            fs_1["default"].chmodSync(configDir, '700');
            fs_1["default"].writeFileSync(this._configFilePath, data);
            fs_1["default"].chmodSync(this._configFilePath, '600');
          }
        }
      }]);
    }(base_1.BaseRegistry);
    file.FileRegistry = FileRegistry;
    return file;
  }

  var sfdx = {};

  var ansiRegex$1 = function ansiRegex() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$onlyFirst = _ref.onlyFirst,
      onlyFirst = _ref$onlyFirst === void 0 ? false : _ref$onlyFirst;
    var pattern = ["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)", '(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))'].join('|');
    return new RegExp(pattern, onlyFirst ? undefined : 'g');
  };

  var ansiRegex = ansiRegex$1;
  var stripAnsi = function stripAnsi(string) {
    return typeof string === 'string' ? string.replace(ansiRegex(), '') : string;
  };

  var hasRequiredSfdx;
  function requireSfdx() {
    if (hasRequiredSfdx) return sfdx;
    hasRequiredSfdx = 1;
    var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
      return mod && mod.__esModule ? mod : {
        "default": mod
      };
    };
    Object.defineProperty(sfdx, "__esModule", {
      value: true
    });
    sfdx.SfdxRegistry = void 0;
    var child_process_1 = require$$0$9;
    var strip_ansi_1 = __importDefault(stripAnsi);
    var connection_1 = __importDefault(requireConnection());
    function isNotNullOrUndefined(v) {
      return v != null;
    }
    /**
     *
     */
    var SfdxRegistry = /*#__PURE__*/function () {
      function SfdxRegistry(_ref) {
        var cliPath = _ref.cliPath;
        _classCallCheck(this, SfdxRegistry);
        _defineProperty(this, "_cliPath", void 0);
        _defineProperty(this, "_orgList", void 0);
        _defineProperty(this, "_orgInfoMap", {});
        _defineProperty(this, "_defaultOrgInfo", void 0);
        this._cliPath = cliPath;
      }
      return _createClass(SfdxRegistry, [{
        key: "_createCommand",
        value: function _createCommand(command) {
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
          return "".concat(this._cliPath ? this._cliPath + '/' : '', "sfdx ").concat(command, " ").concat(Object.keys(options).map(function (option) {
            return "".concat(option.length > 1 ? '--' : '-').concat(option).concat(options[option] != null ? ' ' + options[option] : '');
          }).join(' '), " --json ").concat(args.join(' '));
        }
      }, {
        key: "_execCommand",
        value: function () {
          var _execCommand2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(command) {
            var options,
              args,
              cmd,
              buf,
              body,
              ret,
              err,
              _args = arguments;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
                  args = _args.length > 2 && _args[2] !== undefined ? _args[2] : [];
                  cmd = this._createCommand(command, options, args);
                  _context.next = 5;
                  return new Promise(function (resolve, reject) {
                    (0, child_process_1.exec)(cmd, function (err, ret) {
                      if (err && !ret) {
                        reject(err);
                      } else {
                        resolve(ret);
                      }
                    });
                  });
                case 5:
                  buf = _context.sent;
                  body = (0, strip_ansi_1["default"])(buf.toString());
                  _context.prev = 7;
                  ret = JSON.parse(body);
                  _context.next = 14;
                  break;
                case 11:
                  _context.prev = 11;
                  _context.t0 = _context["catch"](7);
                  throw new Error("Unexpectedd output from Sfdx cli: ".concat(body));
                case 14:
                  if (!(ret.status === 0 && ret.result)) {
                    _context.next = 18;
                    break;
                  }
                  return _context.abrupt("return", ret.result);
                case 18:
                  err = new Error(ret.message);
                  err.name = ret.name;
                  throw err;
                case 21:
                case "end":
                  return _context.stop();
              }
            }, _callee, this, [[7, 11]]);
          }));
          function _execCommand(_x) {
            return _execCommand2.apply(this, arguments);
          }
          return _execCommand;
        }()
      }, {
        key: "_getOrgList",
        value: function () {
          var _getOrgList2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  if (!this._orgList) {
                    this._orgList = this._execCommand('force:org:list');
                  }
                  return _context2.abrupt("return", this._orgList);
                case 2:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, this);
          }));
          function _getOrgList() {
            return _getOrgList2.apply(this, arguments);
          }
          return _getOrgList;
        }()
      }, {
        key: "getConnectionNames",
        value: function () {
          var _getConnectionNames = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
            var _yield$this$_getOrgLi, nonScratchOrgs, scratchOrgs;
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  _context3.next = 2;
                  return this._getOrgList();
                case 2:
                  _yield$this$_getOrgLi = _context3.sent;
                  nonScratchOrgs = _yield$this$_getOrgLi.nonScratchOrgs;
                  scratchOrgs = _yield$this$_getOrgLi.scratchOrgs;
                  return _context3.abrupt("return", [].concat(_toConsumableArray(nonScratchOrgs.map(function (o) {
                    return o.alias;
                  }).filter(isNotNullOrUndefined)), _toConsumableArray(scratchOrgs.map(function (o) {
                    return o.alias;
                  }).filter(isNotNullOrUndefined)), _toConsumableArray(nonScratchOrgs.map(function (o) {
                    return o.username;
                  })), _toConsumableArray(scratchOrgs.map(function (o) {
                    return o.username;
                  }))));
                case 6:
                case "end":
                  return _context3.stop();
              }
            }, _callee3, this);
          }));
          function getConnectionNames() {
            return _getConnectionNames.apply(this, arguments);
          }
          return getConnectionNames;
        }()
      }, {
        key: "getConnection",
        value: function () {
          var _getConnection = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(name) {
            var config;
            return _regeneratorRuntime().wrap(function _callee4$(_context4) {
              while (1) switch (_context4.prev = _context4.next) {
                case 0:
                  _context4.next = 2;
                  return this.getConnectionConfig(name);
                case 2:
                  config = _context4.sent;
                  return _context4.abrupt("return", config ? new connection_1["default"](config) : null);
                case 4:
                case "end":
                  return _context4.stop();
              }
            }, _callee4, this);
          }));
          function getConnection(_x2) {
            return _getConnection.apply(this, arguments);
          }
          return getConnection;
        }()
      }, {
        key: "_getOrgInfo",
        value: function () {
          var _getOrgInfo2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(username) {
            var options, pOrgInfo, orgInfo;
            return _regeneratorRuntime().wrap(function _callee5$(_context5) {
              while (1) switch (_context5.prev = _context5.next) {
                case 0:
                  options = username ? {
                    u: username
                  } : {};
                  if (!username || !this._orgInfoMap[username]) {
                    pOrgInfo = this._execCommand('force:org:display', options);
                    this._memoOrgInfo(pOrgInfo, username);
                  }
                  orgInfo = username ? this._orgInfoMap[username] : this._defaultOrgInfo;
                  if (orgInfo) {
                    _context5.next = 5;
                    break;
                  }
                  throw new Error('no orginfo found');
                case 5:
                  return _context5.abrupt("return", orgInfo);
                case 6:
                case "end":
                  return _context5.stop();
              }
            }, _callee5, this);
          }));
          function _getOrgInfo(_x3) {
            return _getOrgInfo2.apply(this, arguments);
          }
          return _getOrgInfo;
        }()
      }, {
        key: "_memoOrgInfo",
        value: function _memoOrgInfo(pOrgInfo, username) {
          var _this = this;
          var pOrgInfo_ = pOrgInfo.then(function (orgInfo) {
            _this._orgInfoMap[orgInfo.username] = pOrgInfo_;
            if (orgInfo.alias) {
              _this._orgInfoMap[orgInfo.alias] = pOrgInfo_;
            }
            return orgInfo;
          });
          if (username) {
            this._orgInfoMap[username] = pOrgInfo_;
          } else {
            this._defaultOrgInfo = pOrgInfo_;
          }
        }
      }, {
        key: "getConnectionConfig",
        value: function () {
          var _getConnectionConfig = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6(name) {
            var orgInfo, accessToken, instanceUrl, loginUrl;
            return _regeneratorRuntime().wrap(function _callee6$(_context6) {
              while (1) switch (_context6.prev = _context6.next) {
                case 0:
                  _context6.next = 2;
                  return this._getOrgInfo(name);
                case 2:
                  orgInfo = _context6.sent;
                  if (orgInfo) {
                    _context6.next = 5;
                    break;
                  }
                  return _context6.abrupt("return", null);
                case 5:
                  accessToken = orgInfo.accessToken, instanceUrl = orgInfo.instanceUrl, loginUrl = orgInfo.loginUrl;
                  return _context6.abrupt("return", {
                    accessToken: accessToken,
                    instanceUrl: instanceUrl,
                    loginUrl: loginUrl
                  });
                case 7:
                case "end":
                  return _context6.stop();
              }
            }, _callee6, this);
          }));
          function getConnectionConfig(_x4) {
            return _getConnectionConfig.apply(this, arguments);
          }
          return getConnectionConfig;
        }()
      }, {
        key: "saveConnectionConfig",
        value: function () {
          var _saveConnectionConfig = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7(_name, _connConfig) {
            return _regeneratorRuntime().wrap(function _callee7$(_context7) {
              while (1) switch (_context7.prev = _context7.next) {
                case 0:
                case "end":
                  return _context7.stop();
              }
            }, _callee7);
          }));
          function saveConnectionConfig(_x5, _x6) {
            return _saveConnectionConfig.apply(this, arguments);
          }
          return saveConnectionConfig;
        }()
      }, {
        key: "setDefaultConnection",
        value: function () {
          var _setDefaultConnection = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee8(_name) {
            return _regeneratorRuntime().wrap(function _callee8$(_context8) {
              while (1) switch (_context8.prev = _context8.next) {
                case 0:
                case "end":
                  return _context8.stop();
              }
            }, _callee8);
          }));
          function setDefaultConnection(_x7) {
            return _setDefaultConnection.apply(this, arguments);
          }
          return setDefaultConnection;
        }()
      }, {
        key: "removeConnectionConfig",
        value: function () {
          var _removeConnectionConfig = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee9(name) {
            return _regeneratorRuntime().wrap(function _callee9$(_context9) {
              while (1) switch (_context9.prev = _context9.next) {
                case 0:
                  _context9.next = 2;
                  return this._execCommand('force:org:delete', {
                    u: name
                  });
                case 2:
                case "end":
                  return _context9.stop();
              }
            }, _callee9, this);
          }));
          function removeConnectionConfig(_x8) {
            return _removeConnectionConfig.apply(this, arguments);
          }
          return removeConnectionConfig;
        }() // eslint-disable-next-line @typescript-eslint/require-await
      }, {
        key: "getClientConfig",
        value: function () {
          var _getClientConfig = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee10(_name) {
            return _regeneratorRuntime().wrap(function _callee10$(_context10) {
              while (1) switch (_context10.prev = _context10.next) {
                case 0:
                  return _context10.abrupt("return", null);
                case 1:
                case "end":
                  return _context10.stop();
              }
            }, _callee10);
          }));
          function getClientConfig(_x9) {
            return _getClientConfig.apply(this, arguments);
          }
          return getClientConfig;
        }() // eslint-disable-next-line @typescript-eslint/require-await
      }, {
        key: "getClientNames",
        value: function () {
          var _getClientNames = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {
            return _regeneratorRuntime().wrap(function _callee11$(_context11) {
              while (1) switch (_context11.prev = _context11.next) {
                case 0:
                  return _context11.abrupt("return", []);
                case 1:
                case "end":
                  return _context11.stop();
              }
            }, _callee11);
          }));
          function getClientNames() {
            return _getClientNames.apply(this, arguments);
          }
          return getClientNames;
        }()
      }, {
        key: "registerClientConfig",
        value: function () {
          var _registerClientConfig = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee12(_name, _clientConfig) {
            return _regeneratorRuntime().wrap(function _callee12$(_context12) {
              while (1) switch (_context12.prev = _context12.next) {
                case 0:
                case "end":
                  return _context12.stop();
              }
            }, _callee12);
          }));
          function registerClientConfig(_x10, _x11) {
            return _registerClientConfig.apply(this, arguments);
          }
          return registerClientConfig;
        }()
      }]);
    }();
    sfdx.SfdxRegistry = SfdxRegistry;
    return sfdx;
  }

  var empty = {};

  var hasRequiredEmpty;
  function requireEmpty() {
    if (hasRequiredEmpty) return empty;
    hasRequiredEmpty = 1;
    Object.defineProperty(empty, "__esModule", {
      value: true
    });
    empty.EmptyRegistry = void 0;
    var base_1 = requireBase();
    /**
     *
     */
    var EmptyRegistry = /*#__PURE__*/function (_base_1$BaseRegistry) {
      function EmptyRegistry() {
        _classCallCheck(this, EmptyRegistry);
        return _callSuper(this, EmptyRegistry, arguments);
      }
      _inherits(EmptyRegistry, _base_1$BaseRegistry);
      return _createClass(EmptyRegistry, [{
        key: "_saveConfig",
        value: function _saveConfig() {
          // ignore all call requests
        }
      }]);
    }(base_1.BaseRegistry);
    empty.EmptyRegistry = EmptyRegistry;
    return empty;
  }

  var hasRequiredRegistry;
  function requireRegistry() {
    if (hasRequiredRegistry) return registry;
    hasRequiredRegistry = 1;
    (function (exports) {

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.EmptyRegistry = exports.SfdxRegistry = exports.FileRegistry = void 0;
      var file_1 = requireFile();
      Object.defineProperty(exports, "FileRegistry", {
        enumerable: true,
        get: function get() {
          return file_1.FileRegistry;
        }
      });
      var sfdx_1 = requireSfdx();
      Object.defineProperty(exports, "SfdxRegistry", {
        enumerable: true,
        get: function get() {
          return sfdx_1.SfdxRegistry;
        }
      });
      var empty_1 = requireEmpty();
      Object.defineProperty(exports, "EmptyRegistry", {
        enumerable: true,
        get: function get() {
          return empty_1.EmptyRegistry;
        }
      });
      var logger_1 = logger;
      var registry;
      try {
        registry = process.env.JSFORCE_CONNECTION_REGISTRY === 'sfdx' ? new sfdx_1.SfdxRegistry({}) : new file_1.FileRegistry({});
      } catch (e) {
        (0, logger_1.getLogger)('registry').error(e);
        registry = new empty_1.EmptyRegistry();
      }
      exports["default"] = registry;
    })(registry);
    return registry;
  }

  var client$3 = {};

  var hasRequiredClient$1;
  function requireClient$1() {
    if (hasRequiredClient$1) return client$3;
    hasRequiredClient$1 = 1;
    var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
      return mod && mod.__esModule ? mod : {
        "default": mod
      };
    };
    Object.defineProperty(client$3, "__esModule", {
      value: true
    });
    client$3.BrowserClient = void 0;
    /**
     * @file Browser client connection management class
     * @author Shinichi Tomita <shinichi.tomita@gmail.com>
     */
    var events_1 = require$$0$6;
    var connection_1 = __importDefault(requireConnection());
    var oauth2_1 = __importDefault(oauth2);
    /**
     * @private
     */
    function popupWin(url, w, h) {
      var left = screen.width / 2 - w / 2;
      var top = screen.height / 2 - h / 2;
      return window.open(url, undefined, "location=yes,toolbar=no,status=no,menubar=no,width=".concat(w, ",height=").concat(h, ",top=").concat(top, ",left=").concat(left));
    }
    /**
     * @private
     */
    function handleCallbackResponse() {
      var res = checkCallbackResponse();
      var state = localStorage.getItem('jsforce_state');
      if (res && state && res.body.get('state') === state) {
        localStorage.removeItem('jsforce_state');
        var _state$split = state.split('.'),
          _state$split2 = _slicedToArray(_state$split, 2),
          prefix = _state$split2[0],
          promptType = _state$split2[1];
        var cli = new BrowserClient(prefix);
        if (res.success) {
          cli._storeTokens(Object.fromEntries(res.body));
          location.hash = '';
        } else {
          cli._storeError(res.body);
        }
        if (promptType === 'popup') {
          window.close();
        }
        return true;
      }
    }
    /**
     * @private
     */
    function checkCallbackResponse() {
      var params;
      if (window.location.hash) {
        params = new URLSearchParams(window.location.hash.substring(1));
        if (params.get('access_token')) {
          return {
            success: true,
            body: params
          };
        }
      } else if (window.location.search) {
        params = new URLSearchParams(window.location.search.substring(1));
        if (params.get('error')) {
          return {
            success: false,
            body: params
          };
        }
      }
    }
    /**
     *
     */
    var DEFAULT_POPUP_WIN_WIDTH = 912;
    var DEFAULT_POPUP_WIN_HEIGHT = 513;
    /** @private **/
    var clientIdx = 0;
    /**
     *
     */
    var BrowserClient = /*#__PURE__*/function (_events_1$EventEmitte) {
      /**
       *
       */
      function BrowserClient(prefix) {
        var _this;
        _classCallCheck(this, BrowserClient);
        _this = _callSuper(this, BrowserClient);
        _defineProperty(_this, "_prefix", void 0);
        _defineProperty(_this, "_config", void 0);
        _defineProperty(_this, "_connection", void 0);
        _this._prefix = prefix || 'jsforce' + clientIdx++;
        return _this;
      }
      _inherits(BrowserClient, _events_1$EventEmitte);
      return _createClass(BrowserClient, [{
        key: "connection",
        get: function get() {
          if (!this._connection) {
            this._connection = new connection_1["default"](this._config);
          }
          return this._connection;
        }
        /**
         *
         */
      }, {
        key: "init",
        value: function init(config) {
          var _this2 = this;
          if (handleCallbackResponse()) {
            return;
          }
          this._config = config;
          var tokens = this._getTokens();
          if (tokens) {
            this.connection._establish(tokens);
            setTimeout(function () {
              _this2.emit('connect', _this2.connection);
            }, 10);
          }
        }
        /**
         *
         */
      }, {
        key: "login",
        value: function login() {
          var _this$_config,
            _size$width,
            _size$height,
            _this3 = this;
          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          var scope = options.scope,
            size = options.size;
          var oauth2 = new oauth2_1["default"]((_this$_config = this._config) !== null && _this$_config !== void 0 ? _this$_config : {});
          var rand = Math.random().toString(36).substring(2);
          var state = [this._prefix, 'popup', rand].join('.');
          localStorage.setItem('jsforce_state', state);
          var authzUrl = oauth2.getAuthorizationUrl(_objectSpread2({
            response_type: 'token',
            state: state
          }, scope ? {
            scope: scope
          } : {}));
          var pw = popupWin(authzUrl, (_size$width = size === null || size === void 0 ? void 0 : size.width) !== null && _size$width !== void 0 ? _size$width : DEFAULT_POPUP_WIN_WIDTH, (_size$height = size === null || size === void 0 ? void 0 : size.height) !== null && _size$height !== void 0 ? _size$height : DEFAULT_POPUP_WIN_HEIGHT);
          return new Promise(function (resolve, reject) {
            if (!pw) {
              var _state = [_this3._prefix, 'redirect', rand].join('.');
              localStorage.setItem('jsforce_state', _state);
              var _authzUrl = oauth2.getAuthorizationUrl(_objectSpread2({
                response_type: 'token',
                state: _state
              }, scope ? {
                scope: scope
              } : {}));
              location.href = _authzUrl;
              return;
            }
            _this3._removeTokens();
            var pid = setInterval(function () {
              try {
                if (!pw || pw.closed) {
                  clearInterval(pid);
                  var tokens = _this3._getTokens();
                  if (tokens) {
                    _this3.connection._establish(tokens);
                    _this3.emit('connect', _this3.connection);
                    resolve({
                      status: 'connect'
                    });
                  } else {
                    var err = _this3._getError();
                    if (err) {
                      reject(new Error(err.error + ': ' + err.error_description));
                    } else {
                      resolve({
                        status: 'cancel'
                      });
                    }
                  }
                }
              } catch (e) {
                //
              }
            }, 1000);
          });
        }
        /**
         *
         */
      }, {
        key: "isLoggedIn",
        value: function isLoggedIn() {
          return !!this.connection.accessToken;
        }
        /**
         *
         */
      }, {
        key: "logout",
        value: function logout() {
          this.connection.logout();
          this._removeTokens();
          this.emit('disconnect');
        }
        /**
         * @private
         */
      }, {
        key: "_getTokens",
        value: function _getTokens() {
          var regexp = new RegExp('(^|;\\s*)' + this._prefix + '_loggedin=true(;|$)');
          if (document.cookie.match(regexp)) {
            var issuedAt = Number(localStorage.getItem(this._prefix + '_issued_at'));
            // 2 hours
            if (Date.now() < issuedAt + 2 * 60 * 60 * 1000) {
              var userInfo;
              var idUrl = localStorage.getItem(this._prefix + '_id');
              if (idUrl) {
                var _idUrl$split$reverse = idUrl.split('/').reverse(),
                  _idUrl$split$reverse2 = _slicedToArray(_idUrl$split$reverse, 2),
                  id = _idUrl$split$reverse2[0],
                  organizationId = _idUrl$split$reverse2[1];
                userInfo = {
                  id: id,
                  organizationId: organizationId,
                  url: idUrl
                };
              }
              return {
                accessToken: localStorage.getItem(this._prefix + '_access_token'),
                instanceUrl: localStorage.getItem(this._prefix + '_instance_url'),
                userInfo: userInfo
              };
            }
          }
          return null;
        }
        /**
         * @private
         */
      }, {
        key: "_storeTokens",
        value: function _storeTokens(params) {
          localStorage.setItem(this._prefix + '_access_token', params.access_token);
          localStorage.setItem(this._prefix + '_instance_url', params.instance_url);
          localStorage.setItem(this._prefix + '_issued_at', params.issued_at);
          localStorage.setItem(this._prefix + '_id', params.id);
          document.cookie = this._prefix + '_loggedin=true;';
        }
        /**
         * @private
         */
      }, {
        key: "_removeTokens",
        value: function _removeTokens() {
          localStorage.removeItem(this._prefix + '_access_token');
          localStorage.removeItem(this._prefix + '_instance_url');
          localStorage.removeItem(this._prefix + '_issued_at');
          localStorage.removeItem(this._prefix + '_id');
          document.cookie = this._prefix + '_loggedin=';
        }
        /**
         * @private
         */
      }, {
        key: "_getError",
        value: function _getError() {
          try {
            var _localStorage$getItem;
            var err = JSON.parse((_localStorage$getItem = localStorage.getItem(this._prefix + '_error')) !== null && _localStorage$getItem !== void 0 ? _localStorage$getItem : '');
            localStorage.removeItem(this._prefix + '_error');
            return err;
          } catch (e) {
            //
          }
        }
        /**
         * @private
         */
      }, {
        key: "_storeError",
        value: function _storeError(err) {
          localStorage.setItem(this._prefix + '_error', JSON.stringify(err));
        }
      }]);
    }(events_1.EventEmitter);
    client$3.BrowserClient = BrowserClient;
    /**
     *
     */
    var client = new BrowserClient();
    client$3["default"] = client;
    return client$3;
  }

  var hasRequiredJsforce;
  function requireJsforce() {
    if (hasRequiredJsforce) return jsforce$2;
    hasRequiredJsforce = 1;
    var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
          enumerable: true,
          get: function get() {
            return m[k];
          }
        };
      }
      Object.defineProperty(o, k2, desc);
    } : function (o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function (o, v) {
      Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
      });
    } : function (o, v) {
      o["default"] = v;
    });
    var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function (mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
      return mod && mod.__esModule ? mod : {
        "default": mod
      };
    };
    Object.defineProperty(jsforce$2, "__esModule", {
      value: true
    });
    jsforce$2.registerModule = void 0;
    var events_1 = require$$0$6;
    var VERSION_1 = __importDefault(VERSION$2);
    var connection_1 = __importDefault(requireConnection());
    var oauth2_1 = __importDefault(oauth2);
    var date_1 = __importDefault(date);
    var registry_1 = __importDefault(requireRegistry());
    var client_1 = __importStar(requireClient$1());
    /**
     *
     */
    var JSforce = /*#__PURE__*/function (_events_1$EventEmitte) {
      function JSforce() {
        var _this;
        _classCallCheck(this, JSforce);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _callSuper(this, JSforce, [].concat(args));
        _defineProperty(_this, "VERSION", VERSION_1["default"]);
        _defineProperty(_this, "Connection", connection_1["default"]);
        _defineProperty(_this, "OAuth2", oauth2_1["default"]);
        _defineProperty(_this, "SfDate", date_1["default"]);
        _defineProperty(_this, "Date", date_1["default"]);
        _defineProperty(_this, "BrowserClient", client_1.BrowserClient);
        _defineProperty(_this, "registry", registry_1["default"]);
        _defineProperty(_this, "browser", client_1["default"]);
        return _this;
      }
      _inherits(JSforce, _events_1$EventEmitte);
      return _createClass(JSforce);
    }(events_1.EventEmitter);
    function registerModule(name, factory) {
      jsforce.on('connection:new', function (conn) {
        var obj = undefined;
        Object.defineProperty(conn, name, {
          get: function get() {
            var _obj;
            obj = (_obj = obj) !== null && _obj !== void 0 ? _obj : factory(conn);
            return obj;
          },
          enumerable: true,
          configurable: true
        });
      });
    }
    jsforce$2.registerModule = registerModule;
    var jsforce = new JSforce();
    jsforce$2["default"] = jsforce;
    return jsforce$2;
  }

  var analytics = {};

  Object.defineProperty(analytics, "__esModule", {
    value: true
  });
  analytics.Analytics = analytics.Dashboard = analytics.Report = analytics.ReportInstance = void 0;
  /**
   * @file Manages Salesforce Analytics API
   * @author Shinichi Tomita <shinichi.tomita@gmail.com>
   */
  var jsforce_1$6 = requireJsforce();
  /*----------------------------------------------------------------------------------*/
  /**
   * Report object class in Analytics API
   */
  var ReportInstance = /*#__PURE__*/function () {
    /**
     *
     */
    function ReportInstance(report, id) {
      _classCallCheck(this, ReportInstance);
      _defineProperty(this, "_report", void 0);
      _defineProperty(this, "_conn", void 0);
      _defineProperty(this, "id", void 0);
      this._report = report;
      this._conn = report._conn;
      this.id = id;
    }
    /**
     * Retrieve report result asynchronously executed
     */
    return _createClass(ReportInstance, [{
      key: "retrieve",
      value: function retrieve() {
        var url = [this._conn._baseUrl(), 'analytics', 'reports', this._report.id, 'instances', this.id].join('/');
        return this._conn.request(url);
      }
    }]);
  }();
  analytics.ReportInstance = ReportInstance;
  /*----------------------------------------------------------------------------------*/
  /**
   * Report object class in Analytics API
   */
  var Report = /*#__PURE__*/function () {
    /**
     *
     */
    function Report(conn, id) {
      _classCallCheck(this, Report);
      _defineProperty(this, "_conn", void 0);
      _defineProperty(this, "id", void 0);
      /**
       * Synonym of Analytics~Report#destroy()
       */
      _defineProperty(this, "delete", this.destroy);
      /**
       * Synonym of Analytics~Report#destroy()
       */
      _defineProperty(this, "del", this.destroy);
      /**
       * Synonym of Analytics~Report#execute()
       */
      _defineProperty(this, "run", this.execute);
      /**
       * Synonym of Analytics~Report#execute()
       */
      _defineProperty(this, "exec", this.execute);
      this._conn = conn;
      this.id = id;
    }
    /**
     * Describe report metadata
     */
    return _createClass(Report, [{
      key: "describe",
      value: function describe() {
        var url = [this._conn._baseUrl(), 'analytics', 'reports', this.id, 'describe'].join('/');
        return this._conn.request(url);
      }
      /**
       * Destroy a report
       */
    }, {
      key: "destroy",
      value: function destroy() {
        var url = [this._conn._baseUrl(), 'analytics', 'reports', this.id].join('/');
        return this._conn.request({
          method: 'DELETE',
          url: url
        });
      }
    }, {
      key: "clone",
      value:
      /**
       * Clones a given report
       */
      function clone(name) {
        var url = [this._conn._baseUrl(), 'analytics', 'reports'].join('/') + '?cloneId=' + this.id;
        var config = {
          reportMetadata: {
            name: name
          }
        };
        return this._conn.request({
          method: 'POST',
          url: url,
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(config)
        });
      }
      /**
       * Explain plan for executing report
       */
    }, {
      key: "explain",
      value: function explain() {
        var url = '/query/?explain=' + this.id;
        return this._conn.request(url);
      }
      /**
       * Run report synchronously
       */
    }, {
      key: "execute",
      value: function execute() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var url = [this._conn._baseUrl(), 'analytics', 'reports', this.id].join('/') + '?includeDetails=' + (options.details ? 'true' : 'false');
        return this._conn.request(_objectSpread2({
          url: url
        }, options.metadata ? {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(options.metadata)
        } : {
          method: 'GET'
        }));
      }
    }, {
      key: "executeAsync",
      value:
      /**
       * Run report asynchronously
       */
      function executeAsync() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var url = [this._conn._baseUrl(), 'analytics', 'reports', this.id, 'instances'].join('/') + (options.details ? '?includeDetails=true' : '');
        return this._conn.request(_objectSpread2({
          method: 'POST',
          url: url
        }, options.metadata ? {
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(options.metadata)
        } : {
          body: ''
        }));
      }
      /**
       * Get report instance for specified instance ID
       */
    }, {
      key: "instance",
      value: function instance(id) {
        return new ReportInstance(this, id);
      }
      /**
       * List report instances which had been executed asynchronously
       */
    }, {
      key: "instances",
      value: function instances() {
        var url = [this._conn._baseUrl(), 'analytics', 'reports', this.id, 'instances'].join('/');
        return this._conn.request(url);
      }
    }]);
  }();
  analytics.Report = Report;
  /*----------------------------------------------------------------------------------*/
  /**
   * Dashboard object class in the Analytics API
   */
  var Dashboard = /*#__PURE__*/function () {
    /**
     *
     */
    function Dashboard(conn, id) {
      _classCallCheck(this, Dashboard);
      _defineProperty(this, "_conn", void 0);
      _defineProperty(this, "id", void 0);
      /**
       * Synonym of Analytics~Dashboard#destroy()
       */
      _defineProperty(this, "delete", this.destroy);
      /**
       * Synonym of Analytics~Dashboard#destroy()
       */
      _defineProperty(this, "del", this.destroy);
      this._conn = conn;
      this.id = id;
    }
    /**
     * Describe dashboard metadata
     *
     * @method Analytics~Dashboard#describe
     * @param {Callback.<Analytics-DashboardMetadata>} [callback] - Callback function
     * @returns {Promise.<Analytics-DashboardMetadata>}
     */
    return _createClass(Dashboard, [{
      key: "describe",
      value: function describe() {
        var url = [this._conn._baseUrl(), 'analytics', 'dashboards', this.id, 'describe'].join('/');
        return this._conn.request(url);
      }
      /**
       * Get details about dashboard components
       */
    }, {
      key: "components",
      value: function components(componentIds) {
        var url = [this._conn._baseUrl(), 'analytics', 'dashboards', this.id].join('/');
        var config = {
          componentIds: Array.isArray(componentIds) ? componentIds : typeof componentIds === 'string' ? [componentIds] : undefined
        };
        return this._conn.request({
          method: 'POST',
          url: url,
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(config)
        });
      }
      /**
       * Get dashboard status
       */
    }, {
      key: "status",
      value: function status() {
        var url = [this._conn._baseUrl(), 'analytics', 'dashboards', this.id, 'status'].join('/');
        return this._conn.request(url);
      }
      /**
       * Refresh a dashboard
       */
    }, {
      key: "refresh",
      value: function refresh() {
        var url = [this._conn._baseUrl(), 'analytics', 'dashboards', this.id].join('/');
        return this._conn.request({
          method: 'PUT',
          url: url,
          body: ''
        });
      }
      /**
       * Clone a dashboard
       */
    }, {
      key: "clone",
      value: function clone(config, folderId) {
        var url = [this._conn._baseUrl(), 'analytics', 'dashboards'].join('/') + '?cloneId=' + this.id;
        if (typeof config === 'string') {
          config = {
            name: config,
            folderId: folderId
          };
        }
        return this._conn.request({
          method: 'POST',
          url: url,
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(config)
        });
      }
      /**
       * Destroy a dashboard
       */
    }, {
      key: "destroy",
      value: function destroy() {
        var url = [this._conn._baseUrl(), 'analytics', 'dashboards', this.id].join('/');
        return this._conn.request({
          method: 'DELETE',
          url: url
        });
      }
    }]);
  }();
  analytics.Dashboard = Dashboard;
  /*----------------------------------------------------------------------------------*/
  /**
   * API class for Analytics API
   */
  var Analytics = /*#__PURE__*/function () {
    /**
     *
     */
    function Analytics(conn) {
      _classCallCheck(this, Analytics);
      _defineProperty(this, "_conn", void 0);
      this._conn = conn;
    }
    /**
     * Get report object of Analytics API
     */
    return _createClass(Analytics, [{
      key: "report",
      value: function report(id) {
        return new Report(this._conn, id);
      }
      /**
       * Get recent report list
       */
    }, {
      key: "reports",
      value: function reports() {
        var url = [this._conn._baseUrl(), 'analytics', 'reports'].join('/');
        return this._conn.request(url);
      }
      /**
       * Get dashboard object of Analytics API
       */
    }, {
      key: "dashboard",
      value: function dashboard(id) {
        return new Dashboard(this._conn, id);
      }
      /**
       * Get recent dashboard list
       */
    }, {
      key: "dashboards",
      value: function dashboards() {
        var url = [this._conn._baseUrl(), 'analytics', 'dashboards'].join('/');
        return this._conn.request(url);
      }
    }]);
  }();
  analytics.Analytics = Analytics;
  /*--------------------------------------------*/
  /*
   * Register hook in connection instantiation for dynamically adding this API module features
   */
  (0, jsforce_1$6.registerModule)('analytics', function (conn) {
    return new Analytics(conn);
  });
  analytics["default"] = Analytics;

  var apex = {};

  Object.defineProperty(apex, "__esModule", {
    value: true
  });
  apex.Apex = void 0;
  /**
   * @file Manages Salesforce Apex REST endpoint calls
   * @author Shinichi Tomita <shinichi.tomita@gmail.com>
   */
  var jsforce_1$5 = requireJsforce();
  /**
   * API class for Apex REST endpoint call
   */
  var Apex = /*#__PURE__*/function () {
    /**
     *
     */
    function Apex(conn) {
      _classCallCheck(this, Apex);
      _defineProperty(this, "_conn", void 0);
      /**
       * Synonym of Apex#delete()
       */
      _defineProperty(this, "del", this["delete"]);
      this._conn = conn;
    }
    /* @private */
    return _createClass(Apex, [{
      key: "_baseUrl",
      value: function _baseUrl() {
        return "".concat(this._conn.instanceUrl, "/services/apexrest");
      }
      /**
       * @private
       */
    }, {
      key: "_createRequestParams",
      value: function _createRequestParams(method, path, body) {
        var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
        var headers = _typeof(options.headers) === 'object' ? options.headers : {};
        if (!/^(GET|DELETE)$/i.test(method)) {
          headers['content-type'] = 'application/json';
        }
        var params = {
          method: method,
          url: this._baseUrl() + path,
          headers: headers
        };
        if (body) {
          params.body = JSON.stringify(body);
        }
        return params;
      }
      /**
       * Call Apex REST service in GET request
       */
    }, {
      key: "get",
      value: function get(path, options) {
        return this._conn.request(this._createRequestParams('GET', path, undefined, options));
      }
      /**
       * Call Apex REST service in POST request
       */
    }, {
      key: "post",
      value: function post(path, body, options) {
        var params = this._createRequestParams('POST', path, body, options);
        return this._conn.request(params);
      }
      /**
       * Call Apex REST service in PUT request
       */
    }, {
      key: "put",
      value: function put(path, body, options) {
        var params = this._createRequestParams('PUT', path, body, options);
        return this._conn.request(params);
      }
      /**
       * Call Apex REST service in PATCH request
       */
    }, {
      key: "patch",
      value: function patch(path, body, options) {
        var params = this._createRequestParams('PATCH', path, body, options);
        return this._conn.request(params);
      }
      /**
       * Call Apex REST service in DELETE request
       */
    }, {
      key: "delete",
      value: function _delete(path, options) {
        return this._conn.request(this._createRequestParams('DELETE', path, undefined, options));
      }
    }]);
  }();
  apex.Apex = Apex;
  /*--------------------------------------------*/
  /*
   * Register hook in connection instantiation for dynamically adding this API module features
   */
  (0, jsforce_1$5.registerModule)('apex', function (conn) {
    return new Apex(conn);
  });
  apex["default"] = Apex;

  var bulk = {};

  var inherits$1 = {exports: {}};

  var inherits_browser = {exports: {}};

  var hasRequiredInherits_browser;
  function requireInherits_browser() {
    if (hasRequiredInherits_browser) return inherits_browser.exports;
    hasRequiredInherits_browser = 1;
    if (typeof Object.create === 'function') {
      // implementation from standard node.js 'util' module
      inherits_browser.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      // old school shim for old browsers
      inherits_browser.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function TempCtor() {};
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
    return inherits_browser.exports;
  }

  try {
    var util$b = require('util');
    /* istanbul ignore next */
    if (typeof util$b.inherits !== 'function') throw '';
    inherits$1.exports = util$b.inherits;
  } catch (e) {
    /* istanbul ignore next */
    inherits$1.exports = requireInherits_browser();
  }
  var inheritsExports = inherits$1.exports;

  var readable = {exports: {}};

  var stream$1;
  var hasRequiredStream;
  function requireStream() {
    if (hasRequiredStream) return stream$1;
    hasRequiredStream = 1;
    stream$1 = require$$0$3;
    return stream$1;
  }

  var buffer_list;
  var hasRequiredBuffer_list;
  function requireBuffer_list() {
    if (hasRequiredBuffer_list) return buffer_list;
    hasRequiredBuffer_list = 1;
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      key = _toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null) return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var _require = require$$0$a,
      Buffer = _require.Buffer;
    var _require2 = require$$1$3,
      inspect = _require2.inspect;
    var custom = inspect && inspect.custom || 'inspect';
    function copyBuffer(src, target, offset) {
      Buffer.prototype.copy.call(src, target, offset);
    }
    buffer_list = /*#__PURE__*/function () {
      function BufferList() {
        _classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
      }
      _createClass(BufferList, [{
        key: "push",
        value: function push(v) {
          var entry = {
            data: v,
            next: null
          };
          if (this.length > 0) this.tail.next = entry;else this.head = entry;
          this.tail = entry;
          ++this.length;
        }
      }, {
        key: "unshift",
        value: function unshift(v) {
          var entry = {
            data: v,
            next: this.head
          };
          if (this.length === 0) this.tail = entry;
          this.head = entry;
          ++this.length;
        }
      }, {
        key: "shift",
        value: function shift() {
          if (this.length === 0) return;
          var ret = this.head.data;
          if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
          --this.length;
          return ret;
        }
      }, {
        key: "clear",
        value: function clear() {
          this.head = this.tail = null;
          this.length = 0;
        }
      }, {
        key: "join",
        value: function join(s) {
          if (this.length === 0) return '';
          var p = this.head;
          var ret = '' + p.data;
          while (p = p.next) ret += s + p.data;
          return ret;
        }
      }, {
        key: "concat",
        value: function concat(n) {
          if (this.length === 0) return Buffer.alloc(0);
          var ret = Buffer.allocUnsafe(n >>> 0);
          var p = this.head;
          var i = 0;
          while (p) {
            copyBuffer(p.data, ret, i);
            i += p.data.length;
            p = p.next;
          }
          return ret;
        }

        // Consumes a specified amount of bytes or characters from the buffered data.
      }, {
        key: "consume",
        value: function consume(n, hasStrings) {
          var ret;
          if (n < this.head.data.length) {
            // `slice` is the same for buffers and strings.
            ret = this.head.data.slice(0, n);
            this.head.data = this.head.data.slice(n);
          } else if (n === this.head.data.length) {
            // First chunk is a perfect match.
            ret = this.shift();
          } else {
            // Result spans more than one buffer.
            ret = hasStrings ? this._getString(n) : this._getBuffer(n);
          }
          return ret;
        }
      }, {
        key: "first",
        value: function first() {
          return this.head.data;
        }

        // Consumes a specified amount of characters from the buffered data.
      }, {
        key: "_getString",
        value: function _getString(n) {
          var p = this.head;
          var c = 1;
          var ret = p.data;
          n -= ret.length;
          while (p = p.next) {
            var str = p.data;
            var nb = n > str.length ? str.length : n;
            if (nb === str.length) ret += str;else ret += str.slice(0, n);
            n -= nb;
            if (n === 0) {
              if (nb === str.length) {
                ++c;
                if (p.next) this.head = p.next;else this.head = this.tail = null;
              } else {
                this.head = p;
                p.data = str.slice(nb);
              }
              break;
            }
            ++c;
          }
          this.length -= c;
          return ret;
        }

        // Consumes a specified amount of bytes from the buffered data.
      }, {
        key: "_getBuffer",
        value: function _getBuffer(n) {
          var ret = Buffer.allocUnsafe(n);
          var p = this.head;
          var c = 1;
          p.data.copy(ret);
          n -= p.data.length;
          while (p = p.next) {
            var buf = p.data;
            var nb = n > buf.length ? buf.length : n;
            buf.copy(ret, ret.length - n, 0, nb);
            n -= nb;
            if (n === 0) {
              if (nb === buf.length) {
                ++c;
                if (p.next) this.head = p.next;else this.head = this.tail = null;
              } else {
                this.head = p;
                p.data = buf.slice(nb);
              }
              break;
            }
            ++c;
          }
          this.length -= c;
          return ret;
        }

        // Make sure the linked list only shows the minimal necessary information.
      }, {
        key: custom,
        value: function value(_, options) {
          return inspect(this, _objectSpread(_objectSpread({}, options), {}, {
            // Only inspect one level.
            depth: 0,
            // It should not recurse.
            customInspect: false
          }));
        }
      }]);
      return BufferList;
    }();
    return buffer_list;
  }

  var destroy_1;
  var hasRequiredDestroy;
  function requireDestroy() {
    if (hasRequiredDestroy) return destroy_1;
    hasRequiredDestroy = 1;

    // undocumented cb() API, needed for core, not for public API
    function destroy(err, cb) {
      var _this = this;
      var readableDestroyed = this._readableState && this._readableState.destroyed;
      var writableDestroyed = this._writableState && this._writableState.destroyed;
      if (readableDestroyed || writableDestroyed) {
        if (cb) {
          cb(err);
        } else if (err) {
          if (!this._writableState) {
            process.nextTick(emitErrorNT, this, err);
          } else if (!this._writableState.errorEmitted) {
            this._writableState.errorEmitted = true;
            process.nextTick(emitErrorNT, this, err);
          }
        }
        return this;
      }

      // we set destroyed to true before firing error callbacks in order
      // to make it re-entrance safe in case destroy() is called within callbacks

      if (this._readableState) {
        this._readableState.destroyed = true;
      }

      // if this is a duplex stream mark the writable part as destroyed as well
      if (this._writableState) {
        this._writableState.destroyed = true;
      }
      this._destroy(err || null, function (err) {
        if (!cb && err) {
          if (!_this._writableState) {
            process.nextTick(emitErrorAndCloseNT, _this, err);
          } else if (!_this._writableState.errorEmitted) {
            _this._writableState.errorEmitted = true;
            process.nextTick(emitErrorAndCloseNT, _this, err);
          } else {
            process.nextTick(emitCloseNT, _this);
          }
        } else if (cb) {
          process.nextTick(emitCloseNT, _this);
          cb(err);
        } else {
          process.nextTick(emitCloseNT, _this);
        }
      });
      return this;
    }
    function emitErrorAndCloseNT(self, err) {
      emitErrorNT(self, err);
      emitCloseNT(self);
    }
    function emitCloseNT(self) {
      if (self._writableState && !self._writableState.emitClose) return;
      if (self._readableState && !self._readableState.emitClose) return;
      self.emit('close');
    }
    function undestroy() {
      if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
      }
      if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
      }
    }
    function emitErrorNT(self, err) {
      self.emit('error', err);
    }
    function errorOrDestroy(stream, err) {
      // We have tests that rely on errors being emitted
      // in the same tick, so changing this is semver major.
      // For now when you opt-in to autoDestroy we allow
      // the error to be emitted nextTick. In a future
      // semver major update we should change the default to this.

      var rState = stream._readableState;
      var wState = stream._writableState;
      if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
    }
    destroy_1 = {
      destroy: destroy,
      undestroy: undestroy,
      errorOrDestroy: errorOrDestroy
    };
    return destroy_1;
  }

  var errors$2 = {};

  var hasRequiredErrors;
  function requireErrors() {
    if (hasRequiredErrors) return errors$2;
    hasRequiredErrors = 1;
    var codes = {};
    function createErrorType(code, message, Base) {
      if (!Base) {
        Base = Error;
      }
      function getMessage(arg1, arg2, arg3) {
        if (typeof message === 'string') {
          return message;
        } else {
          return message(arg1, arg2, arg3);
        }
      }
      var NodeError = /*#__PURE__*/function (_Base) {
        function NodeError(arg1, arg2, arg3) {
          _classCallCheck(this, NodeError);
          return _callSuper(this, NodeError, [getMessage(arg1, arg2, arg3)]);
        }
        _inherits(NodeError, _Base);
        return _createClass(NodeError);
      }(Base);
      NodeError.prototype.name = Base.name;
      NodeError.prototype.code = code;
      codes[code] = NodeError;
    }

    // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
    function oneOf(expected, thing) {
      if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function (i) {
          return String(i);
        });
        if (len > 2) {
          return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
        } else if (len === 2) {
          return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        } else {
          return "of ".concat(thing, " ").concat(expected[0]);
        }
      } else {
        return "of ".concat(thing, " ").concat(String(expected));
      }
    }

    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
    function startsWith(str, search, pos) {
      return str.substr(0 , search.length) === search;
    }

    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
    function endsWith(str, search, this_len) {
      if (this_len === undefined || this_len > str.length) {
        this_len = str.length;
      }
      return str.substring(this_len - search.length, this_len) === search;
    }

    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
    function includes(str, search, start) {
      if (typeof start !== 'number') {
        start = 0;
      }
      if (start + search.length > str.length) {
        return false;
      } else {
        return str.indexOf(search, start) !== -1;
      }
    }
    createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
      return 'The value "' + value + '" is invalid for option "' + name + '"';
    }, TypeError);
    createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
      // determiner: 'must be' or 'must not be'
      var determiner;
      if (typeof expected === 'string' && startsWith(expected, 'not ')) {
        determiner = 'must not be';
        expected = expected.replace(/^not /, '');
      } else {
        determiner = 'must be';
      }
      var msg;
      if (endsWith(name, ' argument')) {
        // For cases like 'first argument'
        msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
      } else {
        var type = includes(name, '.') ? 'property' : 'argument';
        msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
      }
      msg += ". Received type ".concat(_typeof(actual));
      return msg;
    }, TypeError);
    createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
    createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
      return 'The ' + name + ' method is not implemented';
    });
    createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
    createErrorType('ERR_STREAM_DESTROYED', function (name) {
      return 'Cannot call ' + name + ' after a stream was destroyed';
    });
    createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
    createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
    createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
    createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
    createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
      return 'Unknown encoding: ' + arg;
    }, TypeError);
    createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
    errors$2.codes = codes;
    return errors$2;
  }

  var state;
  var hasRequiredState;
  function requireState() {
    if (hasRequiredState) return state;
    hasRequiredState = 1;
    var ERR_INVALID_OPT_VALUE = requireErrors().codes.ERR_INVALID_OPT_VALUE;
    function highWaterMarkFrom(options, isDuplex, duplexKey) {
      return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
    }
    function getHighWaterMark(state, options, duplexKey, isDuplex) {
      var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
      if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
          var name = isDuplex ? duplexKey : 'highWaterMark';
          throw new ERR_INVALID_OPT_VALUE(name, hwm);
        }
        return Math.floor(hwm);
      }

      // Default value
      return state.objectMode ? 16 : 16 * 1024;
    }
    state = {
      getHighWaterMark: getHighWaterMark
    };
    return state;
  }

  var node;
  var hasRequiredNode;
  function requireNode() {
    if (hasRequiredNode) return node;
    hasRequiredNode = 1;
    /**
     * For Node.js, simply re-export the core `util.deprecate` function.
     */

    node = require$$1$3.deprecate;
    return node;
  }

  var _stream_writable;
  var hasRequired_stream_writable;
  function require_stream_writable() {
    if (hasRequired_stream_writable) return _stream_writable;
    hasRequired_stream_writable = 1;
    _stream_writable = Writable;

    // It seems a linked list but it is not
    // there will be only 2 of these for each stream
    function CorkedRequest(state) {
      var _this = this;
      this.next = null;
      this.entry = null;
      this.finish = function () {
        onCorkedFinish(_this, state);
      };
    }
    /* </replacement> */

    /*<replacement>*/
    var Duplex;
    /*</replacement>*/

    Writable.WritableState = WritableState;

    /*<replacement>*/
    var internalUtil = {
      deprecate: requireNode()
    };
    /*</replacement>*/

    /*<replacement>*/
    var Stream = requireStream();
    /*</replacement>*/

    var Buffer = require$$0$a.Buffer;
    var OurUint8Array = (typeof commonjsGlobal !== 'undefined' ? commonjsGlobal : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};
    function _uint8ArrayToBuffer(chunk) {
      return Buffer.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    var destroyImpl = requireDestroy();
    var _require = requireState(),
      getHighWaterMark = _require.getHighWaterMark;
    var _require$codes = requireErrors().codes,
      ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
      ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
      ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
      ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
      ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
      ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
      ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
      ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
    var errorOrDestroy = destroyImpl.errorOrDestroy;
    inheritsExports(Writable, Stream);
    function nop() {}
    function WritableState(options, stream, isDuplex) {
      Duplex = Duplex || require_stream_duplex();
      options = options || {};

      // Duplex streams are both readable and writable, but share
      // the same options object.
      // However, some cases require setting options to different
      // values for the readable and the writable sides of the duplex stream,
      // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
      if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;

      // object stream flag to indicate whether or not this stream
      // contains buffers or objects.
      this.objectMode = !!options.objectMode;
      if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

      // the point at which write() starts returning false
      // Note: 0 is a valid value, means that we always return false if
      // the entire buffer is not flushed immediately on write()
      this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex);

      // if _final has been called
      this.finalCalled = false;

      // drain event flag.
      this.needDrain = false;
      // at the start of calling end()
      this.ending = false;
      // when end() has been called, and returned
      this.ended = false;
      // when 'finish' is emitted
      this.finished = false;

      // has it been destroyed
      this.destroyed = false;

      // should we decode strings into buffers before passing to _write?
      // this is here so that some node-core streams can optimize string
      // handling at a lower level.
      var noDecode = options.decodeStrings === false;
      this.decodeStrings = !noDecode;

      // Crypto is kind of old and crusty.  Historically, its default string
      // encoding is 'binary' so we have to make this configurable.
      // Everything else in the universe uses 'utf8', though.
      this.defaultEncoding = options.defaultEncoding || 'utf8';

      // not an actual buffer we keep track of, but a measurement
      // of how much we're waiting to get pushed to some underlying
      // socket or file.
      this.length = 0;

      // a flag to see when we're in the middle of a write.
      this.writing = false;

      // when true all writes will be buffered until .uncork() call
      this.corked = 0;

      // a flag to be able to tell if the onwrite cb is called immediately,
      // or on a later tick.  We set this to true at first, because any
      // actions that shouldn't happen until "later" should generally also
      // not happen before the first write call.
      this.sync = true;

      // a flag to know if we're processing previously buffered items, which
      // may call the _write() callback in the same tick, so that we don't
      // end up in an overlapped onwrite situation.
      this.bufferProcessing = false;

      // the callback that's passed to _write(chunk,cb)
      this.onwrite = function (er) {
        onwrite(stream, er);
      };

      // the callback that the user supplies to write(chunk,encoding,cb)
      this.writecb = null;

      // the amount that is being written when _write is called.
      this.writelen = 0;
      this.bufferedRequest = null;
      this.lastBufferedRequest = null;

      // number of pending user-supplied write callbacks
      // this must be 0 before 'finish' can be emitted
      this.pendingcb = 0;

      // emit prefinish if the only thing we're waiting for is _write cbs
      // This is relevant for synchronous Transform streams
      this.prefinished = false;

      // True if the error was already emitted and should not be thrown again
      this.errorEmitted = false;

      // Should close be emitted on destroy. Defaults to true.
      this.emitClose = options.emitClose !== false;

      // Should .destroy() be called after 'finish' (and potentially 'end')
      this.autoDestroy = !!options.autoDestroy;

      // count buffered requests
      this.bufferedRequestCount = 0;

      // allocate the first CorkedRequest, there is always
      // one allocated and free to use, and we maintain at most two
      this.corkedRequestsFree = new CorkedRequest(this);
    }
    WritableState.prototype.getBuffer = function getBuffer() {
      var current = this.bufferedRequest;
      var out = [];
      while (current) {
        out.push(current);
        current = current.next;
      }
      return out;
    };
    (function () {
      try {
        Object.defineProperty(WritableState.prototype, 'buffer', {
          get: internalUtil.deprecate(function writableStateBufferGetter() {
            return this.getBuffer();
          }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
        });
      } catch (_) {}
    })();

    // Test _writableState for inheritance to account for Duplex streams,
    // whose prototype chain only points to Readable.
    var realHasInstance;
    if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
      realHasInstance = Function.prototype[Symbol.hasInstance];
      Object.defineProperty(Writable, Symbol.hasInstance, {
        value: function value(object) {
          if (realHasInstance.call(this, object)) return true;
          if (this !== Writable) return false;
          return object && object._writableState instanceof WritableState;
        }
      });
    } else {
      realHasInstance = function realHasInstance(object) {
        return object instanceof this;
      };
    }
    function Writable(options) {
      Duplex = Duplex || require_stream_duplex();

      // Writable ctor is applied to Duplexes, too.
      // `realHasInstance` is necessary because using plain `instanceof`
      // would return false, as no `_writableState` property is attached.

      // Trying to use the custom `instanceof` for Writable here will also break the
      // Node.js LazyTransform implementation, which has a non-trivial getter for
      // `_writableState` that would lead to infinite recursion.

      // Checking for a Stream.Duplex instance is faster here instead of inside
      // the WritableState constructor, at least with V8 6.5
      var isDuplex = this instanceof Duplex;
      if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
      this._writableState = new WritableState(options, this, isDuplex);

      // legacy.
      this.writable = true;
      if (options) {
        if (typeof options.write === 'function') this._write = options.write;
        if (typeof options.writev === 'function') this._writev = options.writev;
        if (typeof options.destroy === 'function') this._destroy = options.destroy;
        if (typeof options["final"] === 'function') this._final = options["final"];
      }
      Stream.call(this);
    }

    // Otherwise people can pipe Writable streams, which is just wrong.
    Writable.prototype.pipe = function () {
      errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
    };
    function writeAfterEnd(stream, cb) {
      var er = new ERR_STREAM_WRITE_AFTER_END();
      // TODO: defer error events consistently everywhere, not just the cb
      errorOrDestroy(stream, er);
      process.nextTick(cb, er);
    }

    // Checks that a user-supplied chunk is valid, especially for the particular
    // mode the stream is in. Currently this means that `null` is never accepted
    // and undefined/non-string values are only allowed in object mode.
    function validChunk(stream, state, chunk, cb) {
      var er;
      if (chunk === null) {
        er = new ERR_STREAM_NULL_VALUES();
      } else if (typeof chunk !== 'string' && !state.objectMode) {
        er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
      }
      if (er) {
        errorOrDestroy(stream, er);
        process.nextTick(cb, er);
        return false;
      }
      return true;
    }
    Writable.prototype.write = function (chunk, encoding, cb) {
      var state = this._writableState;
      var ret = false;
      var isBuf = !state.objectMode && _isUint8Array(chunk);
      if (isBuf && !Buffer.isBuffer(chunk)) {
        chunk = _uint8ArrayToBuffer(chunk);
      }
      if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
      }
      if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
      if (typeof cb !== 'function') cb = nop;
      if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
      }
      return ret;
    };
    Writable.prototype.cork = function () {
      this._writableState.corked++;
    };
    Writable.prototype.uncork = function () {
      var state = this._writableState;
      if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
      }
    };
    Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
      // node::ParseEncoding() requires lower case.
      if (typeof encoding === 'string') encoding = encoding.toLowerCase();
      if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
      this._writableState.defaultEncoding = encoding;
      return this;
    };
    Object.defineProperty(Writable.prototype, 'writableBuffer', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState && this._writableState.getBuffer();
      }
    });
    function decodeChunk(state, chunk, encoding) {
      if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
        chunk = Buffer.from(chunk, encoding);
      }
      return chunk;
    }
    Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.highWaterMark;
      }
    });

    // if we're already writing something, then just put this
    // in the queue, and wait our turn.  Otherwise, call _write
    // If we return false, then we need a drain event, so set that flag.
    function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
      if (!isBuf) {
        var newChunk = decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
          isBuf = true;
          encoding = 'buffer';
          chunk = newChunk;
        }
      }
      var len = state.objectMode ? 1 : chunk.length;
      state.length += len;
      var ret = state.length < state.highWaterMark;
      // we must ensure that previous needDrain will not be reset to false.
      if (!ret) state.needDrain = true;
      if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
          chunk: chunk,
          encoding: encoding,
          isBuf: isBuf,
          callback: cb,
          next: null
        };
        if (last) {
          last.next = state.lastBufferedRequest;
        } else {
          state.bufferedRequest = state.lastBufferedRequest;
        }
        state.bufferedRequestCount += 1;
      } else {
        doWrite(stream, state, false, len, chunk, encoding, cb);
      }
      return ret;
    }
    function doWrite(stream, state, writev, len, chunk, encoding, cb) {
      state.writelen = len;
      state.writecb = cb;
      state.writing = true;
      state.sync = true;
      if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
      state.sync = false;
    }
    function onwriteError(stream, state, sync, er, cb) {
      --state.pendingcb;
      if (sync) {
        // defer the callback if we are being called synchronously
        // to avoid piling up things on the stack
        process.nextTick(cb, er);
        // this can emit finish, and it will always happen
        // after error
        process.nextTick(finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
      } else {
        // the caller expect this to happen before if
        // it is async
        cb(er);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
        // this can emit finish, but finish must
        // always follow error
        finishMaybe(stream, state);
      }
    }
    function onwriteStateUpdate(state) {
      state.writing = false;
      state.writecb = null;
      state.length -= state.writelen;
      state.writelen = 0;
    }
    function onwrite(stream, er) {
      var state = stream._writableState;
      var sync = state.sync;
      var cb = state.writecb;
      if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
      onwriteStateUpdate(state);
      if (er) onwriteError(stream, state, sync, er, cb);else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
          clearBuffer(stream, state);
        }
        if (sync) {
          process.nextTick(afterWrite, stream, state, finished, cb);
        } else {
          afterWrite(stream, state, finished, cb);
        }
      }
    }
    function afterWrite(stream, state, finished, cb) {
      if (!finished) onwriteDrain(stream, state);
      state.pendingcb--;
      cb();
      finishMaybe(stream, state);
    }

    // Must force callback to be called on nextTick, so that we don't
    // emit 'drain' before the write() consumer gets the 'false' return
    // value, and has a chance to attach a 'drain' listener.
    function onwriteDrain(stream, state) {
      if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit('drain');
      }
    }

    // if there's something in the buffer waiting, then process it
    function clearBuffer(stream, state) {
      state.bufferProcessing = true;
      var entry = state.bufferedRequest;
      if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while (entry) {
          buffer[count] = entry;
          if (!entry.isBuf) allBuffers = false;
          entry = entry.next;
          count += 1;
        }
        buffer.allBuffers = allBuffers;
        doWrite(stream, state, true, state.length, buffer, '', holder.finish);

        // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
          state.corkedRequestsFree = holder.next;
          holder.next = null;
        } else {
          state.corkedRequestsFree = new CorkedRequest(state);
        }
        state.bufferedRequestCount = 0;
      } else {
        // Slow case, write chunks one-by-one
        while (entry) {
          var chunk = entry.chunk;
          var encoding = entry.encoding;
          var cb = entry.callback;
          var len = state.objectMode ? 1 : chunk.length;
          doWrite(stream, state, false, len, chunk, encoding, cb);
          entry = entry.next;
          state.bufferedRequestCount--;
          // if we didn't call the onwrite immediately, then
          // it means that we need to wait until it does.
          // also, that means that the chunk and cb are currently
          // being processed, so move the buffer counter past them.
          if (state.writing) {
            break;
          }
        }
        if (entry === null) state.lastBufferedRequest = null;
      }
      state.bufferedRequest = entry;
      state.bufferProcessing = false;
    }
    Writable.prototype._write = function (chunk, encoding, cb) {
      cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
    };
    Writable.prototype._writev = null;
    Writable.prototype.end = function (chunk, encoding, cb) {
      var state = this._writableState;
      if (typeof chunk === 'function') {
        cb = chunk;
        chunk = null;
        encoding = null;
      } else if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
      }
      if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

      // .end() fully uncorks
      if (state.corked) {
        state.corked = 1;
        this.uncork();
      }

      // ignore unnecessary end() calls.
      if (!state.ending) endWritable(this, state, cb);
      return this;
    };
    Object.defineProperty(Writable.prototype, 'writableLength', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.length;
      }
    });
    function needFinish(state) {
      return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
    }
    function callFinal(stream, state) {
      stream._final(function (err) {
        state.pendingcb--;
        if (err) {
          errorOrDestroy(stream, err);
        }
        state.prefinished = true;
        stream.emit('prefinish');
        finishMaybe(stream, state);
      });
    }
    function prefinish(stream, state) {
      if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === 'function' && !state.destroyed) {
          state.pendingcb++;
          state.finalCalled = true;
          process.nextTick(callFinal, stream, state);
        } else {
          state.prefinished = true;
          stream.emit('prefinish');
        }
      }
    }
    function finishMaybe(stream, state) {
      var need = needFinish(state);
      if (need) {
        prefinish(stream, state);
        if (state.pendingcb === 0) {
          state.finished = true;
          stream.emit('finish');
          if (state.autoDestroy) {
            // In case of duplex streams we need a way to detect
            // if the readable side is ready for autoDestroy as well
            var rState = stream._readableState;
            if (!rState || rState.autoDestroy && rState.endEmitted) {
              stream.destroy();
            }
          }
        }
      }
      return need;
    }
    function endWritable(stream, state, cb) {
      state.ending = true;
      finishMaybe(stream, state);
      if (cb) {
        if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
      }
      state.ended = true;
      stream.writable = false;
    }
    function onCorkedFinish(corkReq, state, err) {
      var entry = corkReq.entry;
      corkReq.entry = null;
      while (entry) {
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
      }

      // reuse the free corkReq.
      state.corkedRequestsFree.next = corkReq;
    }
    Object.defineProperty(Writable.prototype, 'destroyed', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        if (this._writableState === undefined) {
          return false;
        }
        return this._writableState.destroyed;
      },
      set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._writableState) {
          return;
        }

        // backward compatibility, the user is explicitly
        // managing destroyed
        this._writableState.destroyed = value;
      }
    });
    Writable.prototype.destroy = destroyImpl.destroy;
    Writable.prototype._undestroy = destroyImpl.undestroy;
    Writable.prototype._destroy = function (err, cb) {
      cb(err);
    };
    return _stream_writable;
  }

  var _stream_duplex;
  var hasRequired_stream_duplex;
  function require_stream_duplex() {
    if (hasRequired_stream_duplex) return _stream_duplex;
    hasRequired_stream_duplex = 1;

    /*<replacement>*/
    var objectKeys = Object.keys || function (obj) {
      var keys = [];
      for (var key in obj) keys.push(key);
      return keys;
    };
    /*</replacement>*/

    _stream_duplex = Duplex;
    var Readable = require_stream_readable();
    var Writable = require_stream_writable();
    inheritsExports(Duplex, Readable);
    {
      // Allow the keys array to be GC'ed.
      var keys = objectKeys(Writable.prototype);
      for (var v = 0; v < keys.length; v++) {
        var method = keys[v];
        if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
      }
    }
    function Duplex(options) {
      if (!(this instanceof Duplex)) return new Duplex(options);
      Readable.call(this, options);
      Writable.call(this, options);
      this.allowHalfOpen = true;
      if (options) {
        if (options.readable === false) this.readable = false;
        if (options.writable === false) this.writable = false;
        if (options.allowHalfOpen === false) {
          this.allowHalfOpen = false;
          this.once('end', onend);
        }
      }
    }
    Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.highWaterMark;
      }
    });
    Object.defineProperty(Duplex.prototype, 'writableBuffer', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState && this._writableState.getBuffer();
      }
    });
    Object.defineProperty(Duplex.prototype, 'writableLength', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.length;
      }
    });

    // the no-half-open enforcer
    function onend() {
      // If the writable side ended, then we're ok.
      if (this._writableState.ended) return;

      // no more data can be written.
      // But allow more writes to happen in this tick.
      process.nextTick(onEndNT, this);
    }
    function onEndNT(self) {
      self.end();
    }
    Object.defineProperty(Duplex.prototype, 'destroyed', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        if (this._readableState === undefined || this._writableState === undefined) {
          return false;
        }
        return this._readableState.destroyed && this._writableState.destroyed;
      },
      set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (this._readableState === undefined || this._writableState === undefined) {
          return;
        }

        // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
      }
    });
    return _stream_duplex;
  }

  var string_decoder = {};

  var safeBuffer$1 = {exports: {}};

  /* eslint-disable node/no-deprecated-api */
  var hasRequiredSafeBuffer;
  function requireSafeBuffer() {
    if (hasRequiredSafeBuffer) return safeBuffer$1.exports;
    hasRequiredSafeBuffer = 1;
    (function (module, exports) {
      var buffer = require$$0$a;
      var Buffer = buffer.Buffer;

      // alternative to using Object.keys for old browsers
      function copyProps(src, dst) {
        for (var key in src) {
          dst[key] = src[key];
        }
      }
      if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
        module.exports = buffer;
      } else {
        // Copy properties from require('buffer')
        copyProps(buffer, exports);
        exports.Buffer = SafeBuffer;
      }
      function SafeBuffer(arg, encodingOrOffset, length) {
        return Buffer(arg, encodingOrOffset, length);
      }

      // Copy static methods from Buffer
      copyProps(Buffer, SafeBuffer);
      SafeBuffer.from = function (arg, encodingOrOffset, length) {
        if (typeof arg === 'number') {
          throw new TypeError('Argument must not be a number');
        }
        return Buffer(arg, encodingOrOffset, length);
      };
      SafeBuffer.alloc = function (size, fill, encoding) {
        if (typeof size !== 'number') {
          throw new TypeError('Argument must be a number');
        }
        var buf = Buffer(size);
        if (fill !== undefined) {
          if (typeof encoding === 'string') {
            buf.fill(fill, encoding);
          } else {
            buf.fill(fill);
          }
        } else {
          buf.fill(0);
        }
        return buf;
      };
      SafeBuffer.allocUnsafe = function (size) {
        if (typeof size !== 'number') {
          throw new TypeError('Argument must be a number');
        }
        return Buffer(size);
      };
      SafeBuffer.allocUnsafeSlow = function (size) {
        if (typeof size !== 'number') {
          throw new TypeError('Argument must be a number');
        }
        return buffer.SlowBuffer(size);
      };
    })(safeBuffer$1, safeBuffer$1.exports);
    return safeBuffer$1.exports;
  }

  var hasRequiredString_decoder;
  function requireString_decoder() {
    if (hasRequiredString_decoder) return string_decoder;
    hasRequiredString_decoder = 1;

    /*<replacement>*/

    var Buffer = requireSafeBuffer().Buffer;
    /*</replacement>*/

    var isEncoding = Buffer.isEncoding || function (encoding) {
      encoding = '' + encoding;
      switch (encoding && encoding.toLowerCase()) {
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
        case 'raw':
          return true;
        default:
          return false;
      }
    };
    function _normalizeEncoding(enc) {
      if (!enc) return 'utf8';
      var retried;
      while (true) {
        switch (enc) {
          case 'utf8':
          case 'utf-8':
            return 'utf8';
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return 'utf16le';
          case 'latin1':
          case 'binary':
            return 'latin1';
          case 'base64':
          case 'ascii':
          case 'hex':
            return enc;
          default:
            if (retried) return; // undefined
            enc = ('' + enc).toLowerCase();
            retried = true;
        }
      }
    }

    // Do not cache `Buffer.isEncoding` when checking encoding names as some
    // modules monkey-patch it to support additional encodings
    function normalizeEncoding(enc) {
      var nenc = _normalizeEncoding(enc);
      if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
      return nenc || enc;
    }

    // StringDecoder provides an interface for efficiently splitting a series of
    // buffers into a series of JS strings without breaking apart multi-byte
    // characters.
    string_decoder.StringDecoder = StringDecoder;
    function StringDecoder(encoding) {
      this.encoding = normalizeEncoding(encoding);
      var nb;
      switch (this.encoding) {
        case 'utf16le':
          this.text = utf16Text;
          this.end = utf16End;
          nb = 4;
          break;
        case 'utf8':
          this.fillLast = utf8FillLast;
          nb = 4;
          break;
        case 'base64':
          this.text = base64Text;
          this.end = base64End;
          nb = 3;
          break;
        default:
          this.write = simpleWrite;
          this.end = simpleEnd;
          return;
      }
      this.lastNeed = 0;
      this.lastTotal = 0;
      this.lastChar = Buffer.allocUnsafe(nb);
    }
    StringDecoder.prototype.write = function (buf) {
      if (buf.length === 0) return '';
      var r;
      var i;
      if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === undefined) return '';
        i = this.lastNeed;
        this.lastNeed = 0;
      } else {
        i = 0;
      }
      if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
      return r || '';
    };
    StringDecoder.prototype.end = utf8End;

    // Returns only complete characters in a Buffer
    StringDecoder.prototype.text = utf8Text;

    // Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
    StringDecoder.prototype.fillLast = function (buf) {
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
      this.lastNeed -= buf.length;
    };

    // Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
    // continuation byte. If an invalid byte is detected, -2 is returned.
    function utf8CheckByte(_byte) {
      if (_byte <= 0x7F) return 0;else if (_byte >> 5 === 0x06) return 2;else if (_byte >> 4 === 0x0E) return 3;else if (_byte >> 3 === 0x1E) return 4;
      return _byte >> 6 === 0x02 ? -1 : -2;
    }

    // Checks at most 3 bytes at the end of a Buffer in order to detect an
    // incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
    // needed to complete the UTF-8 character (if applicable) are returned.
    function utf8CheckIncomplete(self, buf, i) {
      var j = buf.length - 1;
      if (j < i) return 0;
      var nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 1;
        return nb;
      }
      if (--j < i || nb === -2) return 0;
      nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 2;
        return nb;
      }
      if (--j < i || nb === -2) return 0;
      nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) {
          if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
        }
        return nb;
      }
      return 0;
    }

    // Validates as many continuation bytes for a multi-byte UTF-8 character as
    // needed or are available. If we see a non-continuation byte where we expect
    // one, we "replace" the validated continuation bytes we've seen so far with
    // a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
    // behavior. The continuation byte check is included three times in the case
    // where all of the continuation bytes for a character exist in the same buffer.
    // It is also done this way as a slight performance increase instead of using a
    // loop.
    function utf8CheckExtraBytes(self, buf, p) {
      if ((buf[0] & 0xC0) !== 0x80) {
        self.lastNeed = 0;
        return "\uFFFD";
      }
      if (self.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 0xC0) !== 0x80) {
          self.lastNeed = 1;
          return "\uFFFD";
        }
        if (self.lastNeed > 2 && buf.length > 2) {
          if ((buf[2] & 0xC0) !== 0x80) {
            self.lastNeed = 2;
            return "\uFFFD";
          }
        }
      }
    }

    // Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
    function utf8FillLast(buf) {
      var p = this.lastTotal - this.lastNeed;
      var r = utf8CheckExtraBytes(this, buf);
      if (r !== undefined) return r;
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, p, 0, buf.length);
      this.lastNeed -= buf.length;
    }

    // Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
    // partial character, the character's bytes are buffered until the required
    // number of bytes are available.
    function utf8Text(buf, i) {
      var total = utf8CheckIncomplete(this, buf, i);
      if (!this.lastNeed) return buf.toString('utf8', i);
      this.lastTotal = total;
      var end = buf.length - (total - this.lastNeed);
      buf.copy(this.lastChar, 0, end);
      return buf.toString('utf8', i, end);
    }

    // For UTF-8, a replacement character is added when ending on a partial
    // character.
    function utf8End(buf) {
      var r = buf && buf.length ? this.write(buf) : '';
      if (this.lastNeed) return r + "\uFFFD";
      return r;
    }

    // UTF-16LE typically needs two bytes per character, but even if we have an even
    // number of bytes available, we need to check if we end on a leading/high
    // surrogate. In that case, we need to wait for the next two bytes in order to
    // decode the last character properly.
    function utf16Text(buf, i) {
      if ((buf.length - i) % 2 === 0) {
        var r = buf.toString('utf16le', i);
        if (r) {
          var c = r.charCodeAt(r.length - 1);
          if (c >= 0xD800 && c <= 0xDBFF) {
            this.lastNeed = 2;
            this.lastTotal = 4;
            this.lastChar[0] = buf[buf.length - 2];
            this.lastChar[1] = buf[buf.length - 1];
            return r.slice(0, -1);
          }
        }
        return r;
      }
      this.lastNeed = 1;
      this.lastTotal = 2;
      this.lastChar[0] = buf[buf.length - 1];
      return buf.toString('utf16le', i, buf.length - 1);
    }

    // For UTF-16LE we do not explicitly append special replacement characters if we
    // end on a partial character, we simply let v8 handle that.
    function utf16End(buf) {
      var r = buf && buf.length ? this.write(buf) : '';
      if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString('utf16le', 0, end);
      }
      return r;
    }
    function base64Text(buf, i) {
      var n = (buf.length - i) % 3;
      if (n === 0) return buf.toString('base64', i);
      this.lastNeed = 3 - n;
      this.lastTotal = 3;
      if (n === 1) {
        this.lastChar[0] = buf[buf.length - 1];
      } else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
      }
      return buf.toString('base64', i, buf.length - n);
    }
    function base64End(buf) {
      var r = buf && buf.length ? this.write(buf) : '';
      if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
      return r;
    }

    // Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
    function simpleWrite(buf) {
      return buf.toString(this.encoding);
    }
    function simpleEnd(buf) {
      return buf && buf.length ? this.write(buf) : '';
    }
    return string_decoder;
  }

  var endOfStream;
  var hasRequiredEndOfStream;
  function requireEndOfStream() {
    if (hasRequiredEndOfStream) return endOfStream;
    hasRequiredEndOfStream = 1;
    var ERR_STREAM_PREMATURE_CLOSE = requireErrors().codes.ERR_STREAM_PREMATURE_CLOSE;
    function once(callback) {
      var called = false;
      return function () {
        if (called) return;
        called = true;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        callback.apply(this, args);
      };
    }
    function noop() {}
    function isRequest(stream) {
      return stream.setHeader && typeof stream.abort === 'function';
    }
    function eos(stream, opts, callback) {
      if (typeof opts === 'function') return eos(stream, null, opts);
      if (!opts) opts = {};
      callback = once(callback || noop);
      var readable = opts.readable || opts.readable !== false && stream.readable;
      var writable = opts.writable || opts.writable !== false && stream.writable;
      var onlegacyfinish = function onlegacyfinish() {
        if (!stream.writable) onfinish();
      };
      var writableEnded = stream._writableState && stream._writableState.finished;
      var onfinish = function onfinish() {
        writable = false;
        writableEnded = true;
        if (!readable) callback.call(stream);
      };
      var readableEnded = stream._readableState && stream._readableState.endEmitted;
      var onend = function onend() {
        readable = false;
        readableEnded = true;
        if (!writable) callback.call(stream);
      };
      var onerror = function onerror(err) {
        callback.call(stream, err);
      };
      var onclose = function onclose() {
        var err;
        if (readable && !readableEnded) {
          if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
          return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
          if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
          return callback.call(stream, err);
        }
      };
      var onrequest = function onrequest() {
        stream.req.on('finish', onfinish);
      };
      if (isRequest(stream)) {
        stream.on('complete', onfinish);
        stream.on('abort', onclose);
        if (stream.req) onrequest();else stream.on('request', onrequest);
      } else if (writable && !stream._writableState) {
        // legacy streams
        stream.on('end', onlegacyfinish);
        stream.on('close', onlegacyfinish);
      }
      stream.on('end', onend);
      stream.on('finish', onfinish);
      if (opts.error !== false) stream.on('error', onerror);
      stream.on('close', onclose);
      return function () {
        stream.removeListener('complete', onfinish);
        stream.removeListener('abort', onclose);
        stream.removeListener('request', onrequest);
        if (stream.req) stream.req.removeListener('finish', onfinish);
        stream.removeListener('end', onlegacyfinish);
        stream.removeListener('close', onlegacyfinish);
        stream.removeListener('finish', onfinish);
        stream.removeListener('end', onend);
        stream.removeListener('error', onerror);
        stream.removeListener('close', onclose);
      };
    }
    endOfStream = eos;
    return endOfStream;
  }

  var async_iterator;
  var hasRequiredAsync_iterator;
  function requireAsync_iterator() {
    if (hasRequiredAsync_iterator) return async_iterator;
    hasRequiredAsync_iterator = 1;
    var _Object$setPrototypeO;
    function _defineProperty(obj, key, value) {
      key = _toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null) return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var finished = requireEndOfStream();
    var kLastResolve = Symbol('lastResolve');
    var kLastReject = Symbol('lastReject');
    var kError = Symbol('error');
    var kEnded = Symbol('ended');
    var kLastPromise = Symbol('lastPromise');
    var kHandlePromise = Symbol('handlePromise');
    var kStream = Symbol('stream');
    function createIterResult(value, done) {
      return {
        value: value,
        done: done
      };
    }
    function readAndResolve(iter) {
      var resolve = iter[kLastResolve];
      if (resolve !== null) {
        var data = iter[kStream].read();
        // we defer if data is null
        // we can be expecting either 'end' or
        // 'error'
        if (data !== null) {
          iter[kLastPromise] = null;
          iter[kLastResolve] = null;
          iter[kLastReject] = null;
          resolve(createIterResult(data, false));
        }
      }
    }
    function onReadable(iter) {
      // we wait for the next tick, because it might
      // emit an error with process.nextTick
      process.nextTick(readAndResolve, iter);
    }
    function wrapForNext(lastPromise, iter) {
      return function (resolve, reject) {
        lastPromise.then(function () {
          if (iter[kEnded]) {
            resolve(createIterResult(undefined, true));
            return;
          }
          iter[kHandlePromise](resolve, reject);
        }, reject);
      };
    }
    var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
    var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
      get stream() {
        return this[kStream];
      },
      next: function next() {
        var _this = this;
        // if we have detected an error in the meanwhile
        // reject straight away
        var error = this[kError];
        if (error !== null) {
          return Promise.reject(error);
        }
        if (this[kEnded]) {
          return Promise.resolve(createIterResult(undefined, true));
        }
        if (this[kStream].destroyed) {
          // We need to defer via nextTick because if .destroy(err) is
          // called, the error will be emitted via nextTick, and
          // we cannot guarantee that there is no error lingering around
          // waiting to be emitted.
          return new Promise(function (resolve, reject) {
            process.nextTick(function () {
              if (_this[kError]) {
                reject(_this[kError]);
              } else {
                resolve(createIterResult(undefined, true));
              }
            });
          });
        }

        // if we have multiple next() calls
        // we will wait for the previous Promise to finish
        // this logic is optimized to support for await loops,
        // where next() is only called once at a time
        var lastPromise = this[kLastPromise];
        var promise;
        if (lastPromise) {
          promise = new Promise(wrapForNext(lastPromise, this));
        } else {
          // fast path needed to support multiple this.push()
          // without triggering the next() queue
          var data = this[kStream].read();
          if (data !== null) {
            return Promise.resolve(createIterResult(data, false));
          }
          promise = new Promise(this[kHandlePromise]);
        }
        this[kLastPromise] = promise;
        return promise;
      }
    }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
      return this;
    }), _defineProperty(_Object$setPrototypeO, "return", function _return() {
      var _this2 = this;
      // destroy(err, cb) is a private API
      // we can guarantee we have that here, because we control the
      // Readable class this is attached to
      return new Promise(function (resolve, reject) {
        _this2[kStream].destroy(null, function (err) {
          if (err) {
            reject(err);
            return;
          }
          resolve(createIterResult(undefined, true));
        });
      });
    }), _Object$setPrototypeO), AsyncIteratorPrototype);
    var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
      var _Object$create;
      var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
        value: stream,
        writable: true
      }), _defineProperty(_Object$create, kLastResolve, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kLastReject, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kError, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
      }), _defineProperty(_Object$create, kHandlePromise, {
        value: function value(resolve, reject) {
          var data = iterator[kStream].read();
          if (data) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            resolve(createIterResult(data, false));
          } else {
            iterator[kLastResolve] = resolve;
            iterator[kLastReject] = reject;
          }
        },
        writable: true
      }), _Object$create));
      iterator[kLastPromise] = null;
      finished(stream, function (err) {
        if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
          var reject = iterator[kLastReject];
          // reject if we are waiting for data in the Promise
          // returned by next() and store the error
          if (reject !== null) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            reject(err);
          }
          iterator[kError] = err;
          return;
        }
        var resolve = iterator[kLastResolve];
        if (resolve !== null) {
          iterator[kLastPromise] = null;
          iterator[kLastResolve] = null;
          iterator[kLastReject] = null;
          resolve(createIterResult(undefined, true));
        }
        iterator[kEnded] = true;
      });
      stream.on('readable', onReadable.bind(null, iterator));
      return iterator;
    };
    async_iterator = createReadableStreamAsyncIterator;
    return async_iterator;
  }

  var from_1;
  var hasRequiredFrom;
  function requireFrom() {
    if (hasRequiredFrom) return from_1;
    hasRequiredFrom = 1;
    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }
      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }
    function _asyncToGenerator(fn) {
      return function () {
        var self = this,
          args = arguments;
        return new Promise(function (resolve, reject) {
          var gen = fn.apply(self, args);
          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }
          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }
          _next(undefined);
        });
      };
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      key = _toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null) return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ERR_INVALID_ARG_TYPE = requireErrors().codes.ERR_INVALID_ARG_TYPE;
    function from(Readable, iterable, opts) {
      var iterator;
      if (iterable && typeof iterable.next === 'function') {
        iterator = iterable;
      } else if (iterable && iterable[Symbol.asyncIterator]) iterator = iterable[Symbol.asyncIterator]();else if (iterable && iterable[Symbol.iterator]) iterator = iterable[Symbol.iterator]();else throw new ERR_INVALID_ARG_TYPE('iterable', ['Iterable'], iterable);
      var readable = new Readable(_objectSpread({
        objectMode: true
      }, opts));
      // Reading boolean to protect against _read
      // being called before last iteration completion.
      var reading = false;
      readable._read = function () {
        if (!reading) {
          reading = true;
          next();
        }
      };
      function next() {
        return _next2.apply(this, arguments);
      }
      function _next2() {
        _next2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
          var _yield$iterator$next, value, done;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return iterator.next();
              case 3:
                _yield$iterator$next = _context.sent;
                value = _yield$iterator$next.value;
                done = _yield$iterator$next.done;
                if (!done) {
                  _context.next = 10;
                  break;
                }
                readable.push(null);
                _context.next = 19;
                break;
              case 10:
                _context.t0 = readable;
                _context.next = 13;
                return value;
              case 13:
                _context.t1 = _context.sent;
                if (!_context.t0.push.call(_context.t0, _context.t1)) {
                  _context.next = 18;
                  break;
                }
                next();
                _context.next = 19;
                break;
              case 18:
                reading = false;
              case 19:
                _context.next = 24;
                break;
              case 21:
                _context.prev = 21;
                _context.t2 = _context["catch"](0);
                readable.destroy(_context.t2);
              case 24:
              case "end":
                return _context.stop();
            }
          }, _callee, null, [[0, 21]]);
        }));
        return _next2.apply(this, arguments);
      }
      return readable;
    }
    from_1 = from;
    return from_1;
  }

  var _stream_readable;
  var hasRequired_stream_readable;
  function require_stream_readable() {
    if (hasRequired_stream_readable) return _stream_readable;
    hasRequired_stream_readable = 1;
    _stream_readable = Readable;

    /*<replacement>*/
    var Duplex;
    /*</replacement>*/

    Readable.ReadableState = ReadableState;

    /*<replacement>*/
    require$$0$6.EventEmitter;
    var EElistenerCount = function EElistenerCount(emitter, type) {
      return emitter.listeners(type).length;
    };
    /*</replacement>*/

    /*<replacement>*/
    var Stream = requireStream();
    /*</replacement>*/

    var Buffer = require$$0$a.Buffer;
    var OurUint8Array = (typeof commonjsGlobal !== 'undefined' ? commonjsGlobal : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};
    function _uint8ArrayToBuffer(chunk) {
      return Buffer.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
    }

    /*<replacement>*/
    var debugUtil = require$$1$3;
    var debug;
    if (debugUtil && debugUtil.debuglog) {
      debug = debugUtil.debuglog('stream');
    } else {
      debug = function debug() {};
    }
    /*</replacement>*/

    var BufferList = requireBuffer_list();
    var destroyImpl = requireDestroy();
    var _require = requireState(),
      getHighWaterMark = _require.getHighWaterMark;
    var _require$codes = requireErrors().codes,
      ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
      ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
      ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
      ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;

    // Lazy loaded to improve the startup performance.
    var StringDecoder;
    var createReadableStreamAsyncIterator;
    var from;
    inheritsExports(Readable, Stream);
    var errorOrDestroy = destroyImpl.errorOrDestroy;
    var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];
    function prependListener(emitter, event, fn) {
      // Sadly this is not cacheable as some libraries bundle their own
      // event emitter implementation with them.
      if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

      // This is a hack to make sure that our error handler is attached before any
      // userland ones.  NEVER DO THIS. This is here only because this code needs
      // to continue to work with older versions of Node.js that do not include
      // the prependListener() method. The goal is to eventually remove this hack.
      if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
    }
    function ReadableState(options, stream, isDuplex) {
      Duplex = Duplex || require_stream_duplex();
      options = options || {};

      // Duplex streams are both readable and writable, but share
      // the same options object.
      // However, some cases require setting options to different
      // values for the readable and the writable sides of the duplex stream.
      // These options can be provided separately as readableXXX and writableXXX.
      if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;

      // object stream flag. Used to make read(n) ignore n and to
      // make all the buffer merging and length checks go away
      this.objectMode = !!options.objectMode;
      if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

      // the point at which it stops calling _read() to fill the buffer
      // Note: 0 is a valid value, means "don't call _read preemptively ever"
      this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex);

      // A linked list is used to store data chunks instead of an array because the
      // linked list can remove elements from the beginning faster than
      // array.shift()
      this.buffer = new BufferList();
      this.length = 0;
      this.pipes = null;
      this.pipesCount = 0;
      this.flowing = null;
      this.ended = false;
      this.endEmitted = false;
      this.reading = false;

      // a flag to be able to tell if the event 'readable'/'data' is emitted
      // immediately, or on a later tick.  We set this to true at first, because
      // any actions that shouldn't happen until "later" should generally also
      // not happen before the first read call.
      this.sync = true;

      // whenever we return null, then we set a flag to say
      // that we're awaiting a 'readable' event emission.
      this.needReadable = false;
      this.emittedReadable = false;
      this.readableListening = false;
      this.resumeScheduled = false;
      this.paused = true;

      // Should close be emitted on destroy. Defaults to true.
      this.emitClose = options.emitClose !== false;

      // Should .destroy() be called after 'end' (and potentially 'finish')
      this.autoDestroy = !!options.autoDestroy;

      // has it been destroyed
      this.destroyed = false;

      // Crypto is kind of old and crusty.  Historically, its default string
      // encoding is 'binary' so we have to make this configurable.
      // Everything else in the universe uses 'utf8', though.
      this.defaultEncoding = options.defaultEncoding || 'utf8';

      // the number of writers that are awaiting a drain event in .pipe()s
      this.awaitDrain = 0;

      // if true, a maybeReadMore has been scheduled
      this.readingMore = false;
      this.decoder = null;
      this.encoding = null;
      if (options.encoding) {
        if (!StringDecoder) StringDecoder = requireString_decoder().StringDecoder;
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
      }
    }
    function Readable(options) {
      Duplex = Duplex || require_stream_duplex();
      if (!(this instanceof Readable)) return new Readable(options);

      // Checking for a Stream.Duplex instance is faster here instead of inside
      // the ReadableState constructor, at least with V8 6.5
      var isDuplex = this instanceof Duplex;
      this._readableState = new ReadableState(options, this, isDuplex);

      // legacy
      this.readable = true;
      if (options) {
        if (typeof options.read === 'function') this._read = options.read;
        if (typeof options.destroy === 'function') this._destroy = options.destroy;
      }
      Stream.call(this);
    }
    Object.defineProperty(Readable.prototype, 'destroyed', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        if (this._readableState === undefined) {
          return false;
        }
        return this._readableState.destroyed;
      },
      set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._readableState) {
          return;
        }

        // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
      }
    });
    Readable.prototype.destroy = destroyImpl.destroy;
    Readable.prototype._undestroy = destroyImpl.undestroy;
    Readable.prototype._destroy = function (err, cb) {
      cb(err);
    };

    // Manually shove something into the read() buffer.
    // This returns true if the highWaterMark has not been hit yet,
    // similar to how Writable.write() returns true if you should
    // write() some more.
    Readable.prototype.push = function (chunk, encoding) {
      var state = this._readableState;
      var skipChunkCheck;
      if (!state.objectMode) {
        if (typeof chunk === 'string') {
          encoding = encoding || state.defaultEncoding;
          if (encoding !== state.encoding) {
            chunk = Buffer.from(chunk, encoding);
            encoding = '';
          }
          skipChunkCheck = true;
        }
      } else {
        skipChunkCheck = true;
      }
      return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
    };

    // Unshift should *always* be something directly out of read()
    Readable.prototype.unshift = function (chunk) {
      return readableAddChunk(this, chunk, null, true, false);
    };
    function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
      debug('readableAddChunk', chunk);
      var state = stream._readableState;
      if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
      } else {
        var er;
        if (!skipChunkCheck) er = chunkInvalid(state, chunk);
        if (er) {
          errorOrDestroy(stream, er);
        } else if (state.objectMode || chunk && chunk.length > 0) {
          if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
            chunk = _uint8ArrayToBuffer(chunk);
          }
          if (addToFront) {
            if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
          } else if (state.ended) {
            errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
          } else if (state.destroyed) {
            return false;
          } else {
            state.reading = false;
            if (state.decoder && !encoding) {
              chunk = state.decoder.write(chunk);
              if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
            } else {
              addChunk(stream, state, chunk, false);
            }
          }
        } else if (!addToFront) {
          state.reading = false;
          maybeReadMore(stream, state);
        }
      }

      // We can push more data if we are below the highWaterMark.
      // Also, if we have no data yet, we can stand some more bytes.
      // This is to work around cases where hwm=0, such as the repl.
      return !state.ended && (state.length < state.highWaterMark || state.length === 0);
    }
    function addChunk(stream, state, chunk, addToFront) {
      if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit('data', chunk);
      } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
        if (state.needReadable) emitReadable(stream);
      }
      maybeReadMore(stream, state);
    }
    function chunkInvalid(state, chunk) {
      var er;
      if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
        er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
      }
      return er;
    }
    Readable.prototype.isPaused = function () {
      return this._readableState.flowing === false;
    };

    // backwards compatibility.
    Readable.prototype.setEncoding = function (enc) {
      if (!StringDecoder) StringDecoder = requireString_decoder().StringDecoder;
      var decoder = new StringDecoder(enc);
      this._readableState.decoder = decoder;
      // If setEncoding(null), decoder.encoding equals utf8
      this._readableState.encoding = this._readableState.decoder.encoding;

      // Iterate over current buffer to convert already stored Buffers:
      var p = this._readableState.buffer.head;
      var content = '';
      while (p !== null) {
        content += decoder.write(p.data);
        p = p.next;
      }
      this._readableState.buffer.clear();
      if (content !== '') this._readableState.buffer.push(content);
      this._readableState.length = content.length;
      return this;
    };

    // Don't raise the hwm > 1GB
    var MAX_HWM = 0x40000000;
    function computeNewHighWaterMark(n) {
      if (n >= MAX_HWM) {
        // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
        n = MAX_HWM;
      } else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
      }
      return n;
    }

    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    function howMuchToRead(n, state) {
      if (n <= 0 || state.length === 0 && state.ended) return 0;
      if (state.objectMode) return 1;
      if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
      }
      // If we're asking for more than the current hwm, then raise the hwm.
      if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
      if (n <= state.length) return n;
      // Don't have enough
      if (!state.ended) {
        state.needReadable = true;
        return 0;
      }
      return state.length;
    }

    // you can override either this method, or the async _read(n) below.
    Readable.prototype.read = function (n) {
      debug('read', n);
      n = parseInt(n, 10);
      var state = this._readableState;
      var nOrig = n;
      if (n !== 0) state.emittedReadable = false;

      // if we're doing read(0) to trigger a readable event, but we
      // already have a bunch of data in the buffer, then just trigger
      // the 'readable' event and move on.
      if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        debug('read: emitReadable', state.length, state.ended);
        if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
        return null;
      }
      n = howMuchToRead(n, state);

      // if we've ended, and we're now clear, then finish it up.
      if (n === 0 && state.ended) {
        if (state.length === 0) endReadable(this);
        return null;
      }

      // All the actual chunk generation logic needs to be
      // *below* the call to _read.  The reason is that in certain
      // synthetic stream cases, such as passthrough streams, _read
      // may be a completely synchronous operation which may change
      // the state of the read buffer, providing enough data when
      // before there was *not* enough.
      //
      // So, the steps are:
      // 1. Figure out what the state of things will be after we do
      // a read from the buffer.
      //
      // 2. If that resulting state will trigger a _read, then call _read.
      // Note that this may be asynchronous, or synchronous.  Yes, it is
      // deeply ugly to write APIs this way, but that still doesn't mean
      // that the Readable class should behave improperly, as streams are
      // designed to be sync/async agnostic.
      // Take note if the _read call is sync or async (ie, if the read call
      // has returned yet), so that we know whether or not it's safe to emit
      // 'readable' etc.
      //
      // 3. Actually pull the requested chunks out of the buffer and return.

      // if we need a readable event, then we need to do some reading.
      var doRead = state.needReadable;
      debug('need readable', doRead);

      // if we currently have less than the highWaterMark, then also read some
      if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug('length less than watermark', doRead);
      }

      // however, if we've ended, then there's no point, and if we're already
      // reading, then it's unnecessary.
      if (state.ended || state.reading) {
        doRead = false;
        debug('reading or ended', doRead);
      } else if (doRead) {
        debug('do read');
        state.reading = true;
        state.sync = true;
        // if the length is currently zero, then we *need* a readable event.
        if (state.length === 0) state.needReadable = true;
        // call internal read method
        this._read(state.highWaterMark);
        state.sync = false;
        // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.
        if (!state.reading) n = howMuchToRead(nOrig, state);
      }
      var ret;
      if (n > 0) ret = fromList(n, state);else ret = null;
      if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
      } else {
        state.length -= n;
        state.awaitDrain = 0;
      }
      if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true;

        // If we tried to read() past the EOF, then emit end on the next tick.
        if (nOrig !== n && state.ended) endReadable(this);
      }
      if (ret !== null) this.emit('data', ret);
      return ret;
    };
    function onEofChunk(stream, state) {
      debug('onEofChunk');
      if (state.ended) return;
      if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
          state.buffer.push(chunk);
          state.length += state.objectMode ? 1 : chunk.length;
        }
      }
      state.ended = true;
      if (state.sync) {
        // if we are sync, wait until next tick to emit the data.
        // Otherwise we risk emitting data in the flow()
        // the readable code triggers during a read() call
        emitReadable(stream);
      } else {
        // emit 'readable' now to make sure it gets picked up.
        state.needReadable = false;
        if (!state.emittedReadable) {
          state.emittedReadable = true;
          emitReadable_(stream);
        }
      }
    }

    // Don't emit readable right away in sync mode, because this can trigger
    // another read() call => stack overflow.  This way, it might trigger
    // a nextTick recursion warning, but that's not so bad.
    function emitReadable(stream) {
      var state = stream._readableState;
      debug('emitReadable', state.needReadable, state.emittedReadable);
      state.needReadable = false;
      if (!state.emittedReadable) {
        debug('emitReadable', state.flowing);
        state.emittedReadable = true;
        process.nextTick(emitReadable_, stream);
      }
    }
    function emitReadable_(stream) {
      var state = stream._readableState;
      debug('emitReadable_', state.destroyed, state.length, state.ended);
      if (!state.destroyed && (state.length || state.ended)) {
        stream.emit('readable');
        state.emittedReadable = false;
      }

      // The stream needs another readable event if
      // 1. It is not flowing, as the flow mechanism will take
      //    care of it.
      // 2. It is not ended.
      // 3. It is below the highWaterMark, so we can schedule
      //    another readable later.
      state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
      flow(stream);
    }

    // at this point, the user has presumably seen the 'readable' event,
    // and called read() to consume some data.  that may have triggered
    // in turn another _read(n) call, in which case reading = true if
    // it's in progress.
    // However, if we're not ended, or reading, and the length < hwm,
    // then go ahead and try to read some more preemptively.
    function maybeReadMore(stream, state) {
      if (!state.readingMore) {
        state.readingMore = true;
        process.nextTick(maybeReadMore_, stream, state);
      }
    }
    function maybeReadMore_(stream, state) {
      // Attempt to read more data if we should.
      //
      // The conditions for reading more data are (one of):
      // - Not enough data buffered (state.length < state.highWaterMark). The loop
      //   is responsible for filling the buffer with enough data if such data
      //   is available. If highWaterMark is 0 and we are not in the flowing mode
      //   we should _not_ attempt to buffer any extra data. We'll get more data
      //   when the stream consumer calls read() instead.
      // - No data in the buffer, and the stream is in flowing mode. In this mode
      //   the loop below is responsible for ensuring read() is called. Failing to
      //   call read here would abort the flow and there's no other mechanism for
      //   continuing the flow if the stream consumer has just subscribed to the
      //   'data' event.
      //
      // In addition to the above conditions to keep reading data, the following
      // conditions prevent the data from being read:
      // - The stream has ended (state.ended).
      // - There is already a pending 'read' operation (state.reading). This is a
      //   case where the the stream has called the implementation defined _read()
      //   method, but they are processing the call asynchronously and have _not_
      //   called push() with new data. In this case we skip performing more
      //   read()s. The execution ends in this method again after the _read() ends
      //   up calling push() with more data.
      while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
        var len = state.length;
        debug('maybeReadMore read 0');
        stream.read(0);
        if (len === state.length)
          // didn't get any data, stop spinning.
          break;
      }
      state.readingMore = false;
    }

    // abstract method.  to be overridden in specific implementation classes.
    // call cb(er, data) where data is <= n in length.
    // for virtual (non-string, non-buffer) streams, "length" is somewhat
    // arbitrary, and perhaps not very meaningful.
    Readable.prototype._read = function (n) {
      errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
    };
    Readable.prototype.pipe = function (dest, pipeOpts) {
      var src = this;
      var state = this._readableState;
      switch (state.pipesCount) {
        case 0:
          state.pipes = dest;
          break;
        case 1:
          state.pipes = [state.pipes, dest];
          break;
        default:
          state.pipes.push(dest);
          break;
      }
      state.pipesCount += 1;
      debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
      var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
      var endFn = doEnd ? onend : unpipe;
      if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
      dest.on('unpipe', onunpipe);
      function onunpipe(readable, unpipeInfo) {
        debug('onunpipe');
        if (readable === src) {
          if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
            unpipeInfo.hasUnpiped = true;
            cleanup();
          }
        }
      }
      function onend() {
        debug('onend');
        dest.end();
      }

      // when the dest drains, it reduces the awaitDrain counter
      // on the source.  This would be more elegant with a .once()
      // handler in flow(), but adding and removing repeatedly is
      // too slow.
      var ondrain = pipeOnDrain(src);
      dest.on('drain', ondrain);
      var cleanedUp = false;
      function cleanup() {
        debug('cleanup');
        // cleanup event handlers once the pipe is broken
        dest.removeListener('close', onclose);
        dest.removeListener('finish', onfinish);
        dest.removeListener('drain', ondrain);
        dest.removeListener('error', onerror);
        dest.removeListener('unpipe', onunpipe);
        src.removeListener('end', onend);
        src.removeListener('end', unpipe);
        src.removeListener('data', ondata);
        cleanedUp = true;

        // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
      }
      src.on('data', ondata);
      function ondata(chunk) {
        debug('ondata');
        var ret = dest.write(chunk);
        debug('dest.write', ret);
        if (ret === false) {
          // If the user unpiped during `dest.write()`, it is possible
          // to get stuck in a permanently paused state if that write
          // also returned false.
          // => Check whether `dest` is still a piping destination.
          if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
            debug('false write response, pause', state.awaitDrain);
            state.awaitDrain++;
          }
          src.pause();
        }
      }

      // if the dest has an error, then stop piping into it.
      // however, don't suppress the throwing behavior for this.
      function onerror(er) {
        debug('onerror', er);
        unpipe();
        dest.removeListener('error', onerror);
        if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
      }

      // Make sure our error handler is attached before userland ones.
      prependListener(dest, 'error', onerror);

      // Both close and finish should trigger unpipe, but only once.
      function onclose() {
        dest.removeListener('finish', onfinish);
        unpipe();
      }
      dest.once('close', onclose);
      function onfinish() {
        debug('onfinish');
        dest.removeListener('close', onclose);
        unpipe();
      }
      dest.once('finish', onfinish);
      function unpipe() {
        debug('unpipe');
        src.unpipe(dest);
      }

      // tell the dest that it's being piped to
      dest.emit('pipe', src);

      // start the flow if it hasn't been started already.
      if (!state.flowing) {
        debug('pipe resume');
        src.resume();
      }
      return dest;
    };
    function pipeOnDrain(src) {
      return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        debug('pipeOnDrain', state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
          state.flowing = true;
          flow(src);
        }
      };
    }
    Readable.prototype.unpipe = function (dest) {
      var state = this._readableState;
      var unpipeInfo = {
        hasUnpiped: false
      };

      // if we're not piping anywhere, then do nothing.
      if (state.pipesCount === 0) return this;

      // just one destination.  most common case.
      if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;
        if (!dest) dest = state.pipes;

        // got a match.
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit('unpipe', this, unpipeInfo);
        return this;
      }

      // slow case. multiple pipe destinations.

      if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for (var i = 0; i < len; i++) dests[i].emit('unpipe', this, {
          hasUnpiped: false
        });
        return this;
      }

      // try to find the right one.
      var index = indexOf(state.pipes, dest);
      if (index === -1) return this;
      state.pipes.splice(index, 1);
      state.pipesCount -= 1;
      if (state.pipesCount === 1) state.pipes = state.pipes[0];
      dest.emit('unpipe', this, unpipeInfo);
      return this;
    };

    // set up data events if they are asked for
    // Ensure readable listeners eventually get something
    Readable.prototype.on = function (ev, fn) {
      var res = Stream.prototype.on.call(this, ev, fn);
      var state = this._readableState;
      if (ev === 'data') {
        // update readableListening so that resume() may be a no-op
        // a few lines down. This is needed to support once('readable').
        state.readableListening = this.listenerCount('readable') > 0;

        // Try start flowing on next tick if stream isn't explicitly paused
        if (state.flowing !== false) this.resume();
      } else if (ev === 'readable') {
        if (!state.endEmitted && !state.readableListening) {
          state.readableListening = state.needReadable = true;
          state.flowing = false;
          state.emittedReadable = false;
          debug('on readable', state.length, state.reading);
          if (state.length) {
            emitReadable(this);
          } else if (!state.reading) {
            process.nextTick(nReadingNextTick, this);
          }
        }
      }
      return res;
    };
    Readable.prototype.addListener = Readable.prototype.on;
    Readable.prototype.removeListener = function (ev, fn) {
      var res = Stream.prototype.removeListener.call(this, ev, fn);
      if (ev === 'readable') {
        // We need to check if there is someone still listening to
        // readable and reset the state. However this needs to happen
        // after readable has been emitted but before I/O (nextTick) to
        // support once('readable', fn) cycles. This means that calling
        // resume within the same tick will have no
        // effect.
        process.nextTick(updateReadableListening, this);
      }
      return res;
    };
    Readable.prototype.removeAllListeners = function (ev) {
      var res = Stream.prototype.removeAllListeners.apply(this, arguments);
      if (ev === 'readable' || ev === undefined) {
        // We need to check if there is someone still listening to
        // readable and reset the state. However this needs to happen
        // after readable has been emitted but before I/O (nextTick) to
        // support once('readable', fn) cycles. This means that calling
        // resume within the same tick will have no
        // effect.
        process.nextTick(updateReadableListening, this);
      }
      return res;
    };
    function updateReadableListening(self) {
      var state = self._readableState;
      state.readableListening = self.listenerCount('readable') > 0;
      if (state.resumeScheduled && !state.paused) {
        // flowing needs to be set to true now, otherwise
        // the upcoming resume will not flow.
        state.flowing = true;

        // crude way to check if we should resume
      } else if (self.listenerCount('data') > 0) {
        self.resume();
      }
    }
    function nReadingNextTick(self) {
      debug('readable nexttick read 0');
      self.read(0);
    }

    // pause() and resume() are remnants of the legacy readable stream API
    // If the user uses them, then switch into old mode.
    Readable.prototype.resume = function () {
      var state = this._readableState;
      if (!state.flowing) {
        debug('resume');
        // we flow only if there is no one listening
        // for readable, but we still have to call
        // resume()
        state.flowing = !state.readableListening;
        resume(this, state);
      }
      state.paused = false;
      return this;
    };
    function resume(stream, state) {
      if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        process.nextTick(resume_, stream, state);
      }
    }
    function resume_(stream, state) {
      debug('resume', state.reading);
      if (!state.reading) {
        stream.read(0);
      }
      state.resumeScheduled = false;
      stream.emit('resume');
      flow(stream);
      if (state.flowing && !state.reading) stream.read(0);
    }
    Readable.prototype.pause = function () {
      debug('call pause flowing=%j', this._readableState.flowing);
      if (this._readableState.flowing !== false) {
        debug('pause');
        this._readableState.flowing = false;
        this.emit('pause');
      }
      this._readableState.paused = true;
      return this;
    };
    function flow(stream) {
      var state = stream._readableState;
      debug('flow', state.flowing);
      while (state.flowing && stream.read() !== null);
    }

    // wrap an old-style stream as the async data source.
    // This is *not* part of the readable stream interface.
    // It is an ugly unfortunate mess of history.
    Readable.prototype.wrap = function (stream) {
      var _this = this;
      var state = this._readableState;
      var paused = false;
      stream.on('end', function () {
        debug('wrapped end');
        if (state.decoder && !state.ended) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length) _this.push(chunk);
        }
        _this.push(null);
      });
      stream.on('data', function (chunk) {
        debug('wrapped data');
        if (state.decoder) chunk = state.decoder.write(chunk);

        // don't skip over falsy values in objectMode
        if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;
        var ret = _this.push(chunk);
        if (!ret) {
          paused = true;
          stream.pause();
        }
      });

      // proxy all the other methods.
      // important when wrapping filters and duplexes.
      for (var i in stream) {
        if (this[i] === undefined && typeof stream[i] === 'function') {
          this[i] = function methodWrap(method) {
            return function methodWrapReturnFunction() {
              return stream[method].apply(stream, arguments);
            };
          }(i);
        }
      }

      // proxy certain important events.
      for (var n = 0; n < kProxyEvents.length; n++) {
        stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
      }

      // when we try to consume some more bytes, simply unpause the
      // underlying stream.
      this._read = function (n) {
        debug('wrapped _read', n);
        if (paused) {
          paused = false;
          stream.resume();
        }
      };
      return this;
    };
    if (typeof Symbol === 'function') {
      Readable.prototype[Symbol.asyncIterator] = function () {
        if (createReadableStreamAsyncIterator === undefined) {
          createReadableStreamAsyncIterator = requireAsync_iterator();
        }
        return createReadableStreamAsyncIterator(this);
      };
    }
    Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState.highWaterMark;
      }
    });
    Object.defineProperty(Readable.prototype, 'readableBuffer', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState && this._readableState.buffer;
      }
    });
    Object.defineProperty(Readable.prototype, 'readableFlowing', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState.flowing;
      },
      set: function set(state) {
        if (this._readableState) {
          this._readableState.flowing = state;
        }
      }
    });

    // exposed for testing purposes only.
    Readable._fromList = fromList;
    Object.defineProperty(Readable.prototype, 'readableLength', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState.length;
      }
    });

    // Pluck off n bytes from an array of buffers.
    // Length is the combined lengths of all the buffers in the list.
    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    function fromList(n, state) {
      // nothing buffered
      if (state.length === 0) return null;
      var ret;
      if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
        state.buffer.clear();
      } else {
        // read part of list
        ret = state.buffer.consume(n, state.decoder);
      }
      return ret;
    }
    function endReadable(stream) {
      var state = stream._readableState;
      debug('endReadable', state.endEmitted);
      if (!state.endEmitted) {
        state.ended = true;
        process.nextTick(endReadableNT, state, stream);
      }
    }
    function endReadableNT(state, stream) {
      debug('endReadableNT', state.endEmitted, state.length);

      // Check that we didn't get one last unshift.
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');
        if (state.autoDestroy) {
          // In case of duplex streams we need a way to detect
          // if the writable side is ready for autoDestroy as well
          var wState = stream._writableState;
          if (!wState || wState.autoDestroy && wState.finished) {
            stream.destroy();
          }
        }
      }
    }
    if (typeof Symbol === 'function') {
      Readable.from = function (iterable, opts) {
        if (from === undefined) {
          from = requireFrom();
        }
        return from(Readable, iterable, opts);
      };
    }
    function indexOf(xs, x) {
      for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) return i;
      }
      return -1;
    }
    return _stream_readable;
  }

  var _stream_transform;
  var hasRequired_stream_transform;
  function require_stream_transform() {
    if (hasRequired_stream_transform) return _stream_transform;
    hasRequired_stream_transform = 1;
    _stream_transform = Transform;
    var _require$codes = requireErrors().codes,
      ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
      ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
      ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
      ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
    var Duplex = require_stream_duplex();
    inheritsExports(Transform, Duplex);
    function afterTransform(er, data) {
      var ts = this._transformState;
      ts.transforming = false;
      var cb = ts.writecb;
      if (cb === null) {
        return this.emit('error', new ERR_MULTIPLE_CALLBACK());
      }
      ts.writechunk = null;
      ts.writecb = null;
      if (data != null)
        // single equals check for both `null` and `undefined`
        this.push(data);
      cb(er);
      var rs = this._readableState;
      rs.reading = false;
      if (rs.needReadable || rs.length < rs.highWaterMark) {
        this._read(rs.highWaterMark);
      }
    }
    function Transform(options) {
      if (!(this instanceof Transform)) return new Transform(options);
      Duplex.call(this, options);
      this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
      };

      // start out asking for a readable event once data is transformed.
      this._readableState.needReadable = true;

      // we have implemented the _read method, and done the other things
      // that Readable wants before the first _read call, so unset the
      // sync guard flag.
      this._readableState.sync = false;
      if (options) {
        if (typeof options.transform === 'function') this._transform = options.transform;
        if (typeof options.flush === 'function') this._flush = options.flush;
      }

      // When the writable side finishes, then flush out anything remaining.
      this.on('prefinish', prefinish);
    }
    function prefinish() {
      var _this = this;
      if (typeof this._flush === 'function' && !this._readableState.destroyed) {
        this._flush(function (er, data) {
          done(_this, er, data);
        });
      } else {
        done(this, null, null);
      }
    }
    Transform.prototype.push = function (chunk, encoding) {
      this._transformState.needTransform = false;
      return Duplex.prototype.push.call(this, chunk, encoding);
    };

    // This is the part where you do stuff!
    // override this function in implementation classes.
    // 'chunk' is an input chunk.
    //
    // Call `push(newChunk)` to pass along transformed output
    // to the readable side.  You may call 'push' zero or more times.
    //
    // Call `cb(err)` when you are done with this chunk.  If you pass
    // an error, then that'll put the hurt on the whole operation.  If you
    // never call cb(), then you'll never get another chunk.
    Transform.prototype._transform = function (chunk, encoding, cb) {
      cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
    };
    Transform.prototype._write = function (chunk, encoding, cb) {
      var ts = this._transformState;
      ts.writecb = cb;
      ts.writechunk = chunk;
      ts.writeencoding = encoding;
      if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
      }
    };

    // Doesn't matter what the args are here.
    // _transform does all the work.
    // That we got here means that the readable side wants more data.
    Transform.prototype._read = function (n) {
      var ts = this._transformState;
      if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
      } else {
        // mark that we need a transform, so that any data that comes in
        // will get processed, now that we've asked for it.
        ts.needTransform = true;
      }
    };
    Transform.prototype._destroy = function (err, cb) {
      Duplex.prototype._destroy.call(this, err, function (err2) {
        cb(err2);
      });
    };
    function done(stream, er, data) {
      if (er) return stream.emit('error', er);
      if (data != null)
        // single equals check for both `null` and `undefined`
        stream.push(data);

      // TODO(BridgeAR): Write a test for these two error cases
      // if there's nothing in the write buffer, then that means
      // that nothing more will ever be provided
      if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
      if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
      return stream.push(null);
    }
    return _stream_transform;
  }

  var _stream_passthrough;
  var hasRequired_stream_passthrough;
  function require_stream_passthrough() {
    if (hasRequired_stream_passthrough) return _stream_passthrough;
    hasRequired_stream_passthrough = 1;
    _stream_passthrough = PassThrough;
    var Transform = require_stream_transform();
    inheritsExports(PassThrough, Transform);
    function PassThrough(options) {
      if (!(this instanceof PassThrough)) return new PassThrough(options);
      Transform.call(this, options);
    }
    PassThrough.prototype._transform = function (chunk, encoding, cb) {
      cb(null, chunk);
    };
    return _stream_passthrough;
  }

  var pipeline_1;
  var hasRequiredPipeline;
  function requirePipeline() {
    if (hasRequiredPipeline) return pipeline_1;
    hasRequiredPipeline = 1;
    var eos;
    function once(callback) {
      var called = false;
      return function () {
        if (called) return;
        called = true;
        callback.apply(void 0, arguments);
      };
    }
    var _require$codes = requireErrors().codes,
      ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
      ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
    function noop(err) {
      // Rethrow the error if it exists to avoid swallowing it
      if (err) throw err;
    }
    function isRequest(stream) {
      return stream.setHeader && typeof stream.abort === 'function';
    }
    function destroyer(stream, reading, writing, callback) {
      callback = once(callback);
      var closed = false;
      stream.on('close', function () {
        closed = true;
      });
      if (eos === undefined) eos = requireEndOfStream();
      eos(stream, {
        readable: reading,
        writable: writing
      }, function (err) {
        if (err) return callback(err);
        closed = true;
        callback();
      });
      var destroyed = false;
      return function (err) {
        if (closed) return;
        if (destroyed) return;
        destroyed = true;

        // request.destroy just do .end - .abort is what we want
        if (isRequest(stream)) return stream.abort();
        if (typeof stream.destroy === 'function') return stream.destroy();
        callback(err || new ERR_STREAM_DESTROYED('pipe'));
      };
    }
    function call(fn) {
      fn();
    }
    function pipe(from, to) {
      return from.pipe(to);
    }
    function popCallback(streams) {
      if (!streams.length) return noop;
      if (typeof streams[streams.length - 1] !== 'function') return noop;
      return streams.pop();
    }
    function pipeline() {
      for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
        streams[_key] = arguments[_key];
      }
      var callback = popCallback(streams);
      if (Array.isArray(streams[0])) streams = streams[0];
      if (streams.length < 2) {
        throw new ERR_MISSING_ARGS('streams');
      }
      var error;
      var destroys = streams.map(function (stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return destroyer(stream, reading, writing, function (err) {
          if (!error) error = err;
          if (err) destroys.forEach(call);
          if (reading) return;
          destroys.forEach(call);
          callback(error);
        });
      });
      return streams.reduce(pipe);
    }
    pipeline_1 = pipeline;
    return pipeline_1;
  }

  (function (module, exports) {
    var Stream = require$$0$3;
    if (process.env.READABLE_STREAM === 'disable' && Stream) {
      module.exports = Stream.Readable;
      Object.assign(module.exports, Stream);
      module.exports.Stream = Stream;
    } else {
      exports = module.exports = require_stream_readable();
      exports.Stream = Stream || exports;
      exports.Readable = exports;
      exports.Writable = require_stream_writable();
      exports.Duplex = require_stream_duplex();
      exports.Transform = require_stream_transform();
      exports.PassThrough = require_stream_passthrough();
      exports.finished = requireEndOfStream();
      exports.pipeline = requirePipeline();
    }
  })(readable, readable.exports);
  var readableExports = readable.exports;

  var multistream = MultiStream;
  var inherits = inheritsExports;
  var stream = readableExports;
  inherits(MultiStream, stream.Readable);
  function MultiStream(streams, opts) {
    var self = this;
    if (!(self instanceof MultiStream)) return new MultiStream(streams, opts);
    stream.Readable.call(self, opts);
    self.destroyed = false;
    self._drained = false;
    self._forwarding = false;
    self._current = null;
    self._toStreams2 = opts && opts.objectMode ? toStreams2Obj : toStreams2Buf;
    if (typeof streams === 'function') {
      self._queue = streams;
    } else {
      self._queue = streams.map(self._toStreams2);
      self._queue.forEach(function (stream) {
        if (typeof stream !== 'function') self._attachErrorListener(stream);
      });
    }
    self._next();
  }
  MultiStream.obj = function (streams) {
    return new MultiStream(streams, {
      objectMode: true,
      highWaterMark: 16
    });
  };
  MultiStream.prototype._read = function () {
    this._drained = true;
    this._forward();
  };
  MultiStream.prototype._forward = function () {
    if (this._forwarding || !this._drained || !this._current) return;
    this._forwarding = true;
    var chunk;
    while ((chunk = this._current.read()) !== null && this._drained) {
      this._drained = this.push(chunk);
    }
    this._forwarding = false;
  };
  MultiStream.prototype.destroy = function (err) {
    if (this.destroyed) return;
    this.destroyed = true;
    if (this._current && this._current.destroy) this._current.destroy();
    if (typeof this._queue !== 'function') {
      this._queue.forEach(function (stream) {
        if (stream.destroy) stream.destroy();
      });
    }
    if (err) this.emit('error', err);
    this.emit('close');
  };
  MultiStream.prototype._next = function () {
    var self = this;
    self._current = null;
    if (typeof self._queue === 'function') {
      self._queue(function (err, stream) {
        if (err) return self.destroy(err);
        stream = self._toStreams2(stream);
        self._attachErrorListener(stream);
        self._gotNextStream(stream);
      });
    } else {
      var stream = self._queue.shift();
      if (typeof stream === 'function') {
        stream = self._toStreams2(stream());
        self._attachErrorListener(stream);
      }
      self._gotNextStream(stream);
    }
  };
  MultiStream.prototype._gotNextStream = function (stream) {
    var self = this;
    if (!stream) {
      self.push(null);
      self.destroy();
      return;
    }
    self._current = stream;
    self._forward();
    stream.on('readable', onReadable);
    stream.once('end', onEnd);
    stream.once('close', onClose);
    function onReadable() {
      self._forward();
    }
    function onClose() {
      if (!stream._readableState.ended) {
        self.destroy();
      }
    }
    function onEnd() {
      self._current = null;
      stream.removeListener('readable', onReadable);
      stream.removeListener('end', onEnd);
      stream.removeListener('close', onClose);
      self._next();
    }
  };
  MultiStream.prototype._attachErrorListener = function (stream) {
    var self = this;
    if (!stream) return;
    stream.once('error', onError);
    function onError(err) {
      stream.removeListener('error', onError);
      self.destroy(err);
    }
  };
  function toStreams2Obj(s) {
    return toStreams2(s, {
      objectMode: true,
      highWaterMark: 16
    });
  }
  function toStreams2Buf(s) {
    return toStreams2(s);
  }
  function toStreams2(s, opts) {
    if (!s || typeof s === 'function' || s._readableState) return s;
    var wrap = new stream.Readable(opts).wrap(s);
    if (s.destroy) {
      wrap.destroy = s.destroy.bind(s);
    }
    return wrap;
  }

  var _excluded$3 = ["Id", "type", "attributes"],
    _excluded2$1 = ["path", "responseType"];
  var __importDefault$4 = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };
  Object.defineProperty(bulk, "__esModule", {
    value: true
  });
  bulk.Bulk = bulk.Batch = bulk.Job = void 0;
  /**
   * @file Manages Salesforce Bulk API related operations
   * @author Shinichi Tomita <shinichi.tomita@gmail.com>
   */
  var events_1$1 = require$$0$6;
  var stream_1$1 = require$$0$3;
  var multistream_1 = __importDefault$4(multistream);
  var record_stream_1$1 = recordStream;
  var http_api_1$2 = __importDefault$4(httpApi);
  var jsforce_1$4 = requireJsforce();
  var stream_2$1 = stream$4;
  var is_1$1 = __importDefault$4(distExports);
  /**
   * Class for Bulk API Job
   */
  var Job = /*#__PURE__*/function (_events_1$EventEmitte) {
    /**
     *
     */
    function Job(bulk, type, operation, options, jobId) {
      var _this;
      _classCallCheck(this, Job);
      _this = _callSuper(this, Job);
      _defineProperty(_this, "type", void 0);
      _defineProperty(_this, "operation", void 0);
      _defineProperty(_this, "options", void 0);
      _defineProperty(_this, "id", void 0);
      _defineProperty(_this, "state", void 0);
      _defineProperty(_this, "_bulk", void 0);
      _defineProperty(_this, "_batches", void 0);
      _defineProperty(_this, "_jobInfo", void 0);
      _defineProperty(_this, "_error", void 0);
      _this._bulk = bulk;
      _this.type = type;
      _this.operation = operation;
      _this.options = options || {};
      _this.id = jobId !== null && jobId !== void 0 ? jobId : null;
      _this.state = _this.id ? 'Open' : 'Unknown';
      _this._batches = {};
      // default error handler to keep the latest error
      _this.on('error', function (error) {
        return _this._error = error;
      });
      return _this;
    }
    /**
     * Return latest jobInfo from cache
     */
    _inherits(Job, _events_1$EventEmitte);
    return _createClass(Job, [{
      key: "info",
      value: function info() {
        // if cache is not available, check the latest
        if (!this._jobInfo) {
          this._jobInfo = this.check();
        }
        return this._jobInfo;
      }
      /**
       * Open new job and get jobinfo
       */
    }, {
      key: "open",
      value: function open() {
        var _this2 = this;
        var bulk = this._bulk;
        var options = this.options;
        // if sobject type / operation is not provided
        if (!this.type || !this.operation) {
          throw new Error('type / operation is required to open a new job');
        }
        // if not requested opening job
        if (!this._jobInfo) {
          var operation = this.operation.toLowerCase();
          if (operation === 'harddelete') {
            operation = 'hardDelete';
          }
          if (operation === 'queryall') {
            operation = 'queryAll';
          }
          var body = "\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<jobInfo  xmlns=\"http://www.force.com/2009/06/asyncapi/dataload\">\n  <operation>".concat(operation, "</operation>\n  <object>").concat(this.type, "</object>\n  ").concat(options.extIdField ? "<externalIdFieldName>".concat(options.extIdField, "</externalIdFieldName>") : '', "\n  ").concat(options.concurrencyMode ? "<concurrencyMode>".concat(options.concurrencyMode, "</concurrencyMode>") : '', "\n  ").concat(options.assignmentRuleId ? "<assignmentRuleId>".concat(options.assignmentRuleId, "</assignmentRuleId>") : '', "\n  <contentType>CSV</contentType>\n</jobInfo>\n      ").trim();
          this._jobInfo = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var res;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  _context.prev = 0;
                  _context.next = 3;
                  return bulk._request({
                    method: 'POST',
                    path: '/job',
                    body: body,
                    headers: {
                      'Content-Type': 'application/xml; charset=utf-8'
                    },
                    responseType: 'application/xml'
                  });
                case 3:
                  res = _context.sent;
                  _this2.emit('open', res.jobInfo);
                  _this2.id = res.jobInfo.id;
                  _this2.state = res.jobInfo.state;
                  return _context.abrupt("return", res.jobInfo);
                case 10:
                  _context.prev = 10;
                  _context.t0 = _context["catch"](0);
                  _this2.emit('error', _context.t0);
                  throw _context.t0;
                case 14:
                case "end":
                  return _context.stop();
              }
            }, _callee, null, [[0, 10]]);
          }))();
        }
        return this._jobInfo;
      }
      /**
       * Create a new batch instance in the job
       */
    }, {
      key: "createBatch",
      value: function createBatch() {
        var _this3 = this;
        var batch = new Batch(this);
        batch.on('queue', function () {
          _this3._batches[batch.id] = batch;
        });
        return batch;
      }
      /**
       * Get a batch instance specified by given batch ID
       */
    }, {
      key: "batch",
      value: function batch(batchId) {
        var batch = this._batches[batchId];
        if (!batch) {
          batch = new Batch(this, batchId);
          this._batches[batchId] = batch;
        }
        return batch;
      }
      /**
       * Check the latest job status from server
       */
    }, {
      key: "check",
      value: function check() {
        var _this4 = this;
        var bulk = this._bulk;
        var logger = bulk._logger;
        this._jobInfo = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
          var jobId, res;
          return _regeneratorRuntime().wrap(function _callee2$(_context2) {
            while (1) switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return _this4.ready();
              case 2:
                jobId = _context2.sent;
                _context2.next = 5;
                return bulk._request({
                  method: 'GET',
                  path: '/job/' + jobId,
                  responseType: 'application/xml'
                });
              case 5:
                res = _context2.sent;
                logger.debug(res.jobInfo);
                _this4.id = res.jobInfo.id;
                _this4.type = res.jobInfo.object;
                _this4.operation = res.jobInfo.operation;
                _this4.state = res.jobInfo.state;
                return _context2.abrupt("return", res.jobInfo);
              case 12:
              case "end":
                return _context2.stop();
            }
          }, _callee2);
        }))();
        return this._jobInfo;
      }
      /**
       * Wait till the job is assigned to server
       */
    }, {
      key: "ready",
      value: function ready() {
        return this.id ? Promise.resolve(this.id) : this.open().then(function (_ref3) {
          var id = _ref3.id;
          return id;
        });
      }
      /**
       * List all registered batch info in job
       */
    }, {
      key: "list",
      value: (function () {
        var _list = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
          var bulk, logger, jobId, res, batchInfoList;
          return _regeneratorRuntime().wrap(function _callee3$(_context3) {
            while (1) switch (_context3.prev = _context3.next) {
              case 0:
                bulk = this._bulk;
                logger = bulk._logger;
                _context3.next = 4;
                return this.ready();
              case 4:
                jobId = _context3.sent;
                _context3.next = 7;
                return bulk._request({
                  method: 'GET',
                  path: '/job/' + jobId + '/batch',
                  responseType: 'application/xml'
                });
              case 7:
                res = _context3.sent;
                logger.debug(res.batchInfoList.batchInfo);
                batchInfoList = Array.isArray(res.batchInfoList.batchInfo) ? res.batchInfoList.batchInfo : [res.batchInfoList.batchInfo];
                return _context3.abrupt("return", batchInfoList);
              case 11:
              case "end":
                return _context3.stop();
            }
          }, _callee3, this);
        }));
        function list() {
          return _list.apply(this, arguments);
        }
        return list;
      }()
      /**
       * Close opened job
       */
      )
    }, {
      key: "close",
      value: (function () {
        var _close = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
          var jobInfo;
          return _regeneratorRuntime().wrap(function _callee4$(_context4) {
            while (1) switch (_context4.prev = _context4.next) {
              case 0:
                if (this.id) {
                  _context4.next = 2;
                  break;
                }
                return _context4.abrupt("return");
              case 2:
                _context4.prev = 2;
                _context4.next = 5;
                return this._changeState('Closed');
              case 5:
                jobInfo = _context4.sent;
                this.id = null;
                this.emit('close', jobInfo);
                return _context4.abrupt("return", jobInfo);
              case 11:
                _context4.prev = 11;
                _context4.t0 = _context4["catch"](2);
                this.emit('error', _context4.t0);
                throw _context4.t0;
              case 15:
              case "end":
                return _context4.stop();
            }
          }, _callee4, this, [[2, 11]]);
        }));
        function close() {
          return _close.apply(this, arguments);
        }
        return close;
      }()
      /**
       * Set the status to abort
       */
      )
    }, {
      key: "abort",
      value: (function () {
        var _abort = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
          var jobInfo;
          return _regeneratorRuntime().wrap(function _callee5$(_context5) {
            while (1) switch (_context5.prev = _context5.next) {
              case 0:
                if (this.id) {
                  _context5.next = 2;
                  break;
                }
                return _context5.abrupt("return");
              case 2:
                _context5.prev = 2;
                _context5.next = 5;
                return this._changeState('Aborted');
              case 5:
                jobInfo = _context5.sent;
                this.id = null;
                this.emit('abort', jobInfo);
                return _context5.abrupt("return", jobInfo);
              case 11:
                _context5.prev = 11;
                _context5.t0 = _context5["catch"](2);
                this.emit('error', _context5.t0);
                throw _context5.t0;
              case 15:
              case "end":
                return _context5.stop();
            }
          }, _callee5, this, [[2, 11]]);
        }));
        function abort() {
          return _abort.apply(this, arguments);
        }
        return abort;
      }()
      /**
       * @private
       */
      )
    }, {
      key: "_changeState",
      value: (function () {
        var _changeState2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7(state) {
          var _this5 = this;
          var bulk, logger;
          return _regeneratorRuntime().wrap(function _callee7$(_context7) {
            while (1) switch (_context7.prev = _context7.next) {
              case 0:
                bulk = this._bulk;
                logger = bulk._logger;
                this._jobInfo = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
                  var jobId, body, res;
                  return _regeneratorRuntime().wrap(function _callee6$(_context6) {
                    while (1) switch (_context6.prev = _context6.next) {
                      case 0:
                        _context6.next = 2;
                        return _this5.ready();
                      case 2:
                        jobId = _context6.sent;
                        body = " \n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <jobInfo xmlns=\"http://www.force.com/2009/06/asyncapi/dataload\">\n  <state>".concat(state, "</state>\n</jobInfo>\n      ").trim();
                        _context6.next = 6;
                        return bulk._request({
                          method: 'POST',
                          path: '/job/' + jobId,
                          body: body,
                          headers: {
                            'Content-Type': 'application/xml; charset=utf-8'
                          },
                          responseType: 'application/xml'
                        });
                      case 6:
                        res = _context6.sent;
                        logger.debug(res.jobInfo);
                        _this5.state = res.jobInfo.state;
                        return _context6.abrupt("return", res.jobInfo);
                      case 10:
                      case "end":
                        return _context6.stop();
                    }
                  }, _callee6);
                }))();
                return _context7.abrupt("return", this._jobInfo);
              case 4:
              case "end":
                return _context7.stop();
            }
          }, _callee7, this);
        }));
        function _changeState(_x) {
          return _changeState2.apply(this, arguments);
        }
        return _changeState;
      }())
    }]);
  }(events_1$1.EventEmitter);
  bulk.Job = Job;
  /*--------------------------------------------*/
  var PollingTimeoutError = /*#__PURE__*/function (_Error) {
    /**
     *
     */
    function PollingTimeoutError(message, jobId, batchId) {
      var _this6;
      _classCallCheck(this, PollingTimeoutError);
      _this6 = _callSuper(this, PollingTimeoutError, [message]);
      _defineProperty(_this6, "jobId", void 0);
      _defineProperty(_this6, "batchId", void 0);
      _this6.name = 'PollingTimeout';
      _this6.jobId = jobId;
      _this6.batchId = batchId;
      return _this6;
    }
    _inherits(PollingTimeoutError, _Error);
    return _createClass(PollingTimeoutError);
  }(/*#__PURE__*/_wrapNativeSuper(Error));
  /*--------------------------------------------*/
  /**
   * Batch (extends Writable)
   */
  var Batch = /*#__PURE__*/function (_stream_1$Writable) {
    /**
     *
     */
    function Batch(job, id) {
      var _this7;
      _classCallCheck(this, Batch);
      _this7 = _callSuper(this, Batch, [{
        objectMode: true
      }]);
      _defineProperty(_this7, "job", void 0);
      _defineProperty(_this7, "id", void 0);
      _defineProperty(_this7, "_bulk", void 0);
      _defineProperty(_this7, "_uploadStream", void 0);
      _defineProperty(_this7, "_downloadStream", void 0);
      _defineProperty(_this7, "_dataStream", void 0);
      _defineProperty(_this7, "_result", void 0);
      _defineProperty(_this7, "_error", void 0);
      _defineProperty(_this7, "run", _this7.execute);
      _defineProperty(_this7, "exec", _this7.execute);
      _this7.job = job;
      _this7.id = id;
      _this7._bulk = job._bulk;
      // default error handler to keep the latest error
      _this7.on('error', function (error) {
        return _this7._error = error;
      });
      //
      // setup data streams
      //
      var converterOptions = {
        nullValue: '#N/A'
      };
      var uploadStream = _this7._uploadStream = new record_stream_1$1.Serializable();
      var uploadDataStream = uploadStream.stream('csv', converterOptions);
      var downloadStream = _this7._downloadStream = new record_stream_1$1.Parsable();
      var downloadDataStream = downloadStream.stream('csv', converterOptions);
      _this7.on('finish', function () {
        return uploadStream.end();
      });
      uploadDataStream.once('readable', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
        return _regeneratorRuntime().wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              _context8.prev = 0;
              _context8.next = 3;
              return _this7.job.ready();
            case 3:
              // pipe upload data to batch API request stream
              uploadDataStream.pipe(_this7._createRequestStream());
              _context8.next = 9;
              break;
            case 6:
              _context8.prev = 6;
              _context8.t0 = _context8["catch"](0);
              _this7.emit('error', _context8.t0);
            case 9:
            case "end":
              return _context8.stop();
          }
        }, _callee8, null, [[0, 6]]);
      })));
      // duplex data stream, opened access to API programmers by Batch#stream()
      _this7._dataStream = (0, stream_2$1.concatStreamsAsDuplex)(uploadDataStream, downloadDataStream);
      return _this7;
    }
    /**
     * Connect batch API and create stream instance of request/response
     *
     * @private
     */
    _inherits(Batch, _stream_1$Writable);
    return _createClass(Batch, [{
      key: "_createRequestStream",
      value: function _createRequestStream() {
        var _this8 = this;
        var bulk = this._bulk;
        var logger = bulk._logger;
        var req = bulk._request({
          method: 'POST',
          path: '/job/' + this.job.id + '/batch',
          headers: {
            'Content-Type': 'text/csv'
          },
          responseType: 'application/xml'
        });
        _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {
          var res;
          return _regeneratorRuntime().wrap(function _callee9$(_context9) {
            while (1) switch (_context9.prev = _context9.next) {
              case 0:
                _context9.prev = 0;
                _context9.next = 3;
                return req;
              case 3:
                res = _context9.sent;
                logger.debug(res.batchInfo);
                _this8.id = res.batchInfo.id;
                _this8.emit('queue', res.batchInfo);
                _context9.next = 12;
                break;
              case 9:
                _context9.prev = 9;
                _context9.t0 = _context9["catch"](0);
                _this8.emit('error', _context9.t0);
              case 12:
              case "end":
                return _context9.stop();
            }
          }, _callee9, null, [[0, 9]]);
        }))();
        return req.stream();
      }
      /**
       * Implementation of Writable
       */
    }, {
      key: "_write",
      value: function _write(record_, enc, cb) {
        var Id = record_.Id;
          record_.type;
          record_.attributes;
          var rrec = _objectWithoutProperties(record_, _excluded$3);
        var record;
        switch (this.job.operation) {
          case 'insert':
            record = rrec;
            break;
          case 'delete':
          case 'hardDelete':
            record = {
              Id: Id
            };
            break;
          default:
            record = _objectSpread2({
              Id: Id
            }, rrec);
        }
        this._uploadStream.write(record, enc, cb);
      }
      /**
       * Returns duplex stream which accepts CSV data input and batch result output
       */
    }, {
      key: "stream",
      value: function stream() {
        return this._dataStream;
      }
      /**
       * Execute batch operation
       */
    }, {
      key: "execute",
      value: function execute(input) {
        var _this9 = this;
        // if batch is already executed
        if (this._result) {
          throw new Error('Batch already executed.');
        }
        this._result = new Promise(function (resolve, reject) {
          _this9.once('response', resolve);
          _this9.once('error', reject);
        });
        if (is_1$1["default"].nodeStream(input)) {
          // if input has stream.Readable interface
          input.pipe(this._dataStream);
        } else {
          var recordData = structuredClone(input);
          if (Array.isArray(recordData)) {
            var _iterator = _createForOfIteratorHelper(recordData),
              _step;
            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var record = _step.value;
                for (var _i = 0, _Object$keys = Object.keys(record); _i < _Object$keys.length; _i++) {
                  var key = _Object$keys[_i];
                  if (typeof record[key] === 'boolean') {
                    record[key] = String(record[key]);
                  }
                }
                this.write(record);
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
            this.end();
          } else if (typeof recordData === 'string') {
            this._dataStream.write(recordData, 'utf8');
            this._dataStream.end();
          }
        }
        // return Batch instance for chaining
        return this;
      }
    }, {
      key: "then",
      value:
      /**
       * Promise/A+ interface
       * Delegate to promise, return promise instance for batch result
       */
      function then(onResolved, onReject) {
        if (!this._result) {
          this.execute();
        }
        return this._result.then(onResolved, onReject);
      }
      /**
       * Check the latest batch status in server
       */
    }, {
      key: "check",
      value: (function () {
        var _check = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {
          var bulk, logger, jobId, batchId, res;
          return _regeneratorRuntime().wrap(function _callee10$(_context10) {
            while (1) switch (_context10.prev = _context10.next) {
              case 0:
                bulk = this._bulk;
                logger = bulk._logger;
                jobId = this.job.id;
                batchId = this.id;
                if (!(!jobId || !batchId)) {
                  _context10.next = 6;
                  break;
                }
                throw new Error('Batch not started.');
              case 6:
                _context10.next = 8;
                return bulk._request({
                  method: 'GET',
                  path: '/job/' + jobId + '/batch/' + batchId,
                  responseType: 'application/xml'
                });
              case 8:
                res = _context10.sent;
                logger.debug(res.batchInfo);
                return _context10.abrupt("return", res.batchInfo);
              case 11:
              case "end":
                return _context10.stop();
            }
          }, _callee10, this);
        }));
        function check() {
          return _check.apply(this, arguments);
        }
        return check;
      }()
      /**
       * Polling the batch result and retrieve
       */
      )
    }, {
      key: "poll",
      value: function poll(interval, timeout) {
        var _this10 = this;
        var jobId = this.job.id;
        var batchId = this.id;
        if (!jobId || !batchId) {
          throw new Error('Batch not started.');
        }
        var startTime = new Date().getTime();
        var endTime = startTime + timeout;
        if (timeout === 0) {
          throw new PollingTimeoutError("Skipping polling because of timeout = 0ms. Job Id = ".concat(jobId, " | Batch Id = ").concat(batchId), jobId, batchId);
        }
        var poll = /*#__PURE__*/function () {
          var _ref7 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {
            var now, err, res;
            return _regeneratorRuntime().wrap(function _callee11$(_context11) {
              while (1) switch (_context11.prev = _context11.next) {
                case 0:
                  now = new Date().getTime();
                  if (!(endTime < now)) {
                    _context11.next = 5;
                    break;
                  }
                  err = new PollingTimeoutError('Polling time out. Job Id = ' + jobId + ' , batch Id = ' + batchId, jobId, batchId);
                  _this10.emit('error', err);
                  return _context11.abrupt("return");
                case 5:
                  _context11.prev = 5;
                  _context11.next = 8;
                  return _this10.check();
                case 8:
                  res = _context11.sent;
                  _context11.next = 15;
                  break;
                case 11:
                  _context11.prev = 11;
                  _context11.t0 = _context11["catch"](5);
                  _this10.emit('error', _context11.t0);
                  return _context11.abrupt("return");
                case 15:
                  if (res.state === 'Failed') {
                    if (parseInt(res.numberRecordsProcessed, 10) > 0) {
                      _this10.retrieve();
                    } else {
                      _this10.emit('error', new Error(res.stateMessage));
                    }
                  } else if (res.state === 'Completed') {
                    _this10.retrieve();
                  } else if (res.state === 'NotProcessed') {
                    _this10.emit('error', new Error('Job has been aborted'));
                  } else {
                    _this10.emit('inProgress', res);
                    setTimeout(poll, interval);
                  }
                case 16:
                case "end":
                  return _context11.stop();
              }
            }, _callee11, null, [[5, 11]]);
          }));
          return function poll() {
            return _ref7.apply(this, arguments);
          };
        }();
        setTimeout(poll, interval);
      }
      /**
       * Retrieve batch result
       */
    }, {
      key: "retrieve",
      value: (function () {
        var _retrieve = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {
          var bulk, jobId, job, batchId, resp, results, res, resultId, _res;
          return _regeneratorRuntime().wrap(function _callee12$(_context12) {
            while (1) switch (_context12.prev = _context12.next) {
              case 0:
                bulk = this._bulk;
                jobId = this.job.id;
                job = this.job;
                batchId = this.id;
                if (!(!jobId || !batchId)) {
                  _context12.next = 6;
                  break;
                }
                throw new Error('Batch not started.');
              case 6:
                _context12.prev = 6;
                _context12.next = 9;
                return bulk._request({
                  method: 'GET',
                  path: '/job/' + jobId + '/batch/' + batchId + '/result'
                });
              case 9:
                resp = _context12.sent;
                if (job.operation === 'query' || job.operation === 'queryAll') {
                  res = resp;
                  resultId = res['result-list'].result;
                  results = (Array.isArray(resultId) ? resultId : [resultId]).map(function (id) {
                    return {
                      id: id,
                      batchId: batchId,
                      jobId: jobId
                    };
                  });
                } else {
                  _res = resp;
                  results = _res.map(function (ret) {
                    return {
                      id: ret.Id || null,
                      success: ret.Success === 'true',
                      created: ret.Created === 'true',
                      errors: ret.Error ? [ret.Error] : []
                    };
                  });
                }
                this.emit('response', results);
                return _context12.abrupt("return", results);
              case 15:
                _context12.prev = 15;
                _context12.t0 = _context12["catch"](6);
                this.emit('error', _context12.t0);
                throw _context12.t0;
              case 19:
              case "end":
                return _context12.stop();
            }
          }, _callee12, this, [[6, 15]]);
        }));
        function retrieve() {
          return _retrieve.apply(this, arguments);
        }
        return retrieve;
      }()
      /**
       * Fetch query batch result as a record stream
       *
       * @param {String} resultId - Result id
       * @returns {RecordStream} - Record stream, convertible to CSV data stream
       */
      )
    }, {
      key: "result",
      value: function result(resultId) {
        var jobId = this.job.id;
        var batchId = this.id;
        if (!jobId || !batchId) {
          throw new Error('Batch not started.');
        }
        var resultStream = new record_stream_1$1.Parsable();
        var resultDataStream = resultStream.stream('csv');
        this._bulk._request({
          method: 'GET',
          path: '/job/' + jobId + '/batch/' + batchId + '/result/' + resultId,
          responseType: 'application/octet-stream'
        }).stream().pipe(resultDataStream);
        return resultStream;
      }
    }]);
  }(stream_1$1.Writable);
  bulk.Batch = Batch;
  /*--------------------------------------------*/
  /**
   *
   */
  var BulkApi = /*#__PURE__*/function (_http_api_1$default) {
    function BulkApi() {
      _classCallCheck(this, BulkApi);
      return _callSuper(this, BulkApi, arguments);
    }
    _inherits(BulkApi, _http_api_1$default);
    return _createClass(BulkApi, [{
      key: "beforeSend",
      value: function beforeSend(request) {
        var _this$_conn$accessTok;
        request.headers = _objectSpread2(_objectSpread2({}, request.headers), {}, {
          'X-SFDC-SESSION': (_this$_conn$accessTok = this._conn.accessToken) !== null && _this$_conn$accessTok !== void 0 ? _this$_conn$accessTok : ''
        });
      }
    }, {
      key: "isSessionExpired",
      value: function isSessionExpired(response) {
        return response.statusCode === 400 && response.body.includes('<exceptionCode>InvalidSessionId</exceptionCode>');
      }
    }, {
      key: "hasErrorInResponseBody",
      value: function hasErrorInResponseBody(body) {
        return !!body.error;
      }
    }, {
      key: "parseError",
      value: function parseError(body) {
        return {
          errorCode: body.error.exceptionCode,
          message: body.error.exceptionMessage
        };
      }
    }]);
  }(http_api_1$2["default"]);
  /*--------------------------------------------*/
  /**
   * Class for Bulk API
   *
   * @class
   */
  var Bulk = /*#__PURE__*/function () {
    /**
     *
     */
    function Bulk(conn) {
      _classCallCheck(this, Bulk);
      _defineProperty(this, "_conn", void 0);
      _defineProperty(this, "_logger", void 0);
      /**
       * Polling interval in milliseconds
       *
       * Default: 1000 (1 second)
       */
      _defineProperty(this, "pollInterval", 1000);
      /**
       * Polling timeout in milliseconds
       *
       * Default: 30000 (30 seconds)
       */
      _defineProperty(this, "pollTimeout", 30000);
      this._conn = conn;
      this._logger = conn._logger;
    }
    /**
     *
     */
    return _createClass(Bulk, [{
      key: "_request",
      value: function _request(request_) {
        var conn = this._conn;
        var path = request_.path,
          responseType = request_.responseType,
          rreq = _objectWithoutProperties(request_, _excluded2$1);
        var baseUrl = [conn.instanceUrl, 'services/async', conn.version].join('/');
        var request = _objectSpread2(_objectSpread2({}, rreq), {}, {
          url: baseUrl + path
        });
        return new BulkApi(this._conn, {
          responseType: responseType
        }).request(request);
      }
    }, {
      key: "load",
      value: function load(type, operation, optionsOrInput, input) {
        var _this11 = this;
        var options = {};
        if (typeof optionsOrInput === 'string' || Array.isArray(optionsOrInput) || is_1$1["default"].nodeStream(optionsOrInput)) {
          // when options is not plain hash object, it is omitted
          input = optionsOrInput;
        } else {
          options = optionsOrInput;
        }
        var job = this.createJob(type, operation, options);
        var batch = job.createBatch();
        var cleanup = function cleanup() {
          return job.close();
        };
        var cleanupOnError = function cleanupOnError(err) {
          if (err.name !== 'PollingTimeout') {
            cleanup();
          }
        };
        batch.on('response', cleanup);
        batch.on('error', cleanupOnError);
        batch.on('queue', function () {
          batch === null || batch === void 0 || batch.poll(_this11.pollInterval, _this11.pollTimeout);
        });
        return batch.execute(input);
      }
      /**
       * Execute bulk query and get record stream
       */
    }, {
      key: "query",
      value: (function () {
        var _query = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee13(soql) {
          var _this12 = this;
          var m, type, recordStream, dataStream, results, streams;
          return _regeneratorRuntime().wrap(function _callee13$(_context13) {
            while (1) switch (_context13.prev = _context13.next) {
              case 0:
                m = soql.replace(/\([\s\S]+\)/g, '').match(/FROM\s+(\w+)/i);
                if (m) {
                  _context13.next = 3;
                  break;
                }
                throw new Error('No sobject type found in query, maybe caused by invalid SOQL.');
              case 3:
                type = m[1];
                recordStream = new record_stream_1$1.Parsable();
                dataStream = recordStream.stream('csv');
                _context13.next = 8;
                return this.load(type, 'query', soql);
              case 8:
                results = _context13.sent;
                streams = results.map(function (result) {
                  return _this12.job(result.jobId).batch(result.batchId).result(result.id).stream();
                });
                (0, multistream_1["default"])(streams).pipe(dataStream);
                return _context13.abrupt("return", recordStream);
              case 12:
              case "end":
                return _context13.stop();
            }
          }, _callee13, this);
        }));
        function query(_x2) {
          return _query.apply(this, arguments);
        }
        return query;
      }()
      /**
       * Create a new job instance
       */
      )
    }, {
      key: "createJob",
      value: function createJob(type, operation) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        return new Job(this, type, operation, options);
      }
      /**
       * Get a job instance specified by given job ID
       *
       * @param {String} jobId - Job ID
       * @returns {Bulk~Job}
       */
    }, {
      key: "job",
      value: function job(jobId) {
        return new Job(this, null, null, null, jobId);
      }
    }]);
  }();
  bulk.Bulk = Bulk;
  /*--------------------------------------------*/
  /*
   * Register hook in connection instantiation for dynamically adding this API module features
   */
  (0, jsforce_1$4.registerModule)('bulk', function (conn) {
    return new Bulk(conn);
  });
  bulk["default"] = Bulk;

  var bulk2 = {};

  var _excluded$2 = ["pollInterval", "pollTimeout", "input"],
    _excluded2 = ["Id", "type", "attributes"];
  var __importDefault$3 = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };
  Object.defineProperty(bulk2, "__esModule", {
    value: true
  });
  bulk2.IngestJobV2 = bulk2.QueryJobV2 = bulk2.BulkV2 = void 0;
  var events_1 = require$$0$6;
  var stream_1 = require$$0$3;
  var record_stream_1 = recordStream;
  var http_api_1$1 = __importDefault$3(httpApi);
  var jsforce_1$3 = requireJsforce();
  var logger_1 = logger;
  var stream_2 = stream$4;
  var is_1 = __importDefault$3(distExports);
  var JobPollingTimeoutError = /*#__PURE__*/function (_Error) {
    /**
     *
     */
    function JobPollingTimeoutError(message, jobId) {
      var _this;
      _classCallCheck(this, JobPollingTimeoutError);
      _this = _callSuper(this, JobPollingTimeoutError, [message]);
      _defineProperty(_this, "jobId", void 0);
      _this.name = 'JobPollingTimeout';
      _this.jobId = jobId;
      return _this;
    }
    _inherits(JobPollingTimeoutError, _Error);
    return _createClass(JobPollingTimeoutError);
  }(/*#__PURE__*/_wrapNativeSuper(Error));
  var BulkApiV2 = /*#__PURE__*/function (_http_api_1$default) {
    function BulkApiV2() {
      _classCallCheck(this, BulkApiV2);
      return _callSuper(this, BulkApiV2, arguments);
    }
    _inherits(BulkApiV2, _http_api_1$default);
    return _createClass(BulkApiV2, [{
      key: "hasErrorInResponseBody",
      value: function hasErrorInResponseBody(body) {
        return Array.isArray(body) && _typeof(body[0]) === 'object' && 'errorCode' in body[0];
      }
    }, {
      key: "isSessionExpired",
      value: function isSessionExpired(response) {
        return response.statusCode === 401 && response.body.includes('INVALID_SESSION_ID');
      }
    }, {
      key: "parseError",
      value: function parseError(body) {
        return {
          errorCode: body[0].errorCode,
          message: body[0].message
        };
      }
    }]);
  }(http_api_1$1["default"]);
  var BulkV2 = /*#__PURE__*/function () {
    function BulkV2(connection) {
      _classCallCheck(this, BulkV2);
      _defineProperty(this, "connection", void 0);
      _defineProperty(this, "logger", void 0);
      /**
       * Polling interval in milliseconds
       *
       * Default: 1000 (1 second)
       */
      _defineProperty(this, "pollInterval", 1000);
      /**
       * Polling timeout in milliseconds
       *
       * Default: 30000 (30 seconds)
       */
      _defineProperty(this, "pollTimeout", 30000);
      this.connection = connection;
      this.logger = this.connection._logLevel ? (0, logger_1.getLogger)('bulk2').createInstance(this.connection._logLevel) : (0, logger_1.getLogger)('bulk2');
    }
    /**
     * Create an instance of an ingest job object.
     *
     * @params {NewIngestJobOptions} options object
     * @returns {IngestJobV2} An ingest job instance
     * @example
     * // Upsert records to the Account object.
     *
     * const job = connection.bulk2.createJob({
     *   operation: 'insert'
     *   object: 'Account',
     * });
     *
     * // create the job in the org
     * await job.open()
     *
     * // upload data
     * await job.uploadData(csvFile)
     *
     * // finished uploading data, mark it as ready for processing
     * await job.close()
     */
    return _createClass(BulkV2, [{
      key: "createJob",
      value: function createJob(options) {
        return new IngestJobV2(this.connection, {
          bodyParams: options,
          pollingOptions: this
        });
      }
    }, {
      key: "job",
      value: function job() {
        var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'ingest';
        var options = arguments.length > 1 ? arguments[1] : undefined;
        if (type === 'ingest') {
          return new IngestJobV2(this.connection, {
            id: options.id,
            pollingOptions: this
          });
        } else {
          return new QueryJobV2(this.connection, {
            id: options.id,
            pollingOptions: this
          });
        }
      }
      /**
       * Create, upload, and start bulkload job
       */
    }, {
      key: "loadAndWaitForResults",
      value: (function () {
        var _loadAndWaitForResults = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(options) {
          var pollInterval, pollTimeout, input, createJobOpts, job, err;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                if (!options.pollTimeout) options.pollTimeout = this.pollTimeout;
                if (!options.pollInterval) options.pollInterval = this.pollInterval;
                pollInterval = options.pollInterval, pollTimeout = options.pollTimeout, input = options.input, createJobOpts = _objectWithoutProperties(options, _excluded$2);
                job = this.createJob(createJobOpts);
                _context.prev = 4;
                _context.next = 7;
                return job.open();
              case 7:
                _context.next = 9;
                return job.uploadData(input);
              case 9:
                _context.next = 11;
                return job.close();
              case 11:
                _context.next = 13;
                return job.poll(pollInterval, pollTimeout);
              case 13:
                _context.next = 15;
                return job.getAllResults();
              case 15:
                return _context.abrupt("return", _context.sent);
              case 18:
                _context.prev = 18;
                _context.t0 = _context["catch"](4);
                err = _context.t0;
                this.logger.error("bulk load failed due to: ".concat(err.message));
                if (err.name !== 'JobPollingTimeoutError') {
                  // fires off one last attempt to clean up and ignores the result | error
                  job["delete"]()["catch"](function (ignored) {
                    return ignored;
                  });
                }
                throw err;
              case 24:
              case "end":
                return _context.stop();
            }
          }, _callee, this, [[4, 18]]);
        }));
        function loadAndWaitForResults(_x) {
          return _loadAndWaitForResults.apply(this, arguments);
        }
        return loadAndWaitForResults;
      }()
      /**
       * Execute bulk query and get a record stream.
       *
       * Default timeout: 10000ms
       *
       * @param soql SOQL query
       * @param options
       *
       * @returns {RecordStream} - Record stream, convertible to a CSV data stream
       */
      )
    }, {
      key: "query",
      value: (function () {
        var _query = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(soql, options) {
          var queryJob, recordStream, dataStream, queryRecordsStream, err;
          return _regeneratorRuntime().wrap(function _callee2$(_context2) {
            while (1) switch (_context2.prev = _context2.next) {
              case 0:
                queryJob = new QueryJobV2(this.connection, {
                  bodyParams: {
                    query: soql,
                    operation: options !== null && options !== void 0 && options.scanAll ? 'queryAll' : 'query',
                    columnDelimiter: options === null || options === void 0 ? void 0 : options.columnDelimiter,
                    lineEnding: options === null || options === void 0 ? void 0 : options.lineEnding
                  },
                  pollingOptions: this
                });
                recordStream = new record_stream_1.Parsable();
                dataStream = recordStream.stream('csv');
                _context2.prev = 3;
                _context2.next = 6;
                return queryJob.open();
              case 6:
                _context2.next = 8;
                return queryJob.poll(options === null || options === void 0 ? void 0 : options.pollInterval, options === null || options === void 0 ? void 0 : options.pollTimeout);
              case 8:
                _context2.next = 10;
                return queryJob.result().then(function (s) {
                  return s.stream();
                });
              case 10:
                queryRecordsStream = _context2.sent;
                queryRecordsStream.pipe(dataStream);
                _context2.next = 20;
                break;
              case 14:
                _context2.prev = 14;
                _context2.t0 = _context2["catch"](3);
                err = _context2.t0;
                this.logger.error("bulk query failed due to: ".concat(err.message));
                if (err.name !== 'JobPollingTimeoutError') {
                  // fires off one last attempt to clean up and ignores the result | error
                  queryJob["delete"]()["catch"](function (ignored) {
                    return ignored;
                  });
                }
                throw err;
              case 20:
                return _context2.abrupt("return", recordStream);
              case 21:
              case "end":
                return _context2.stop();
            }
          }, _callee2, this, [[3, 14]]);
        }));
        function query(_x2, _x3) {
          return _query.apply(this, arguments);
        }
        return query;
      }())
    }]);
  }();
  bulk2.BulkV2 = BulkV2;
  var QueryJobV2 = /*#__PURE__*/function (_events_1$EventEmitte) {
    function QueryJobV2(conn, options) {
      var _this2;
      _classCallCheck(this, QueryJobV2);
      _this2 = _callSuper(this, QueryJobV2);
      _defineProperty(_this2, "connection", void 0);
      _defineProperty(_this2, "logger", void 0);
      _defineProperty(_this2, "_id", void 0);
      _defineProperty(_this2, "bodyParams", void 0);
      _defineProperty(_this2, "pollingOptions", void 0);
      _defineProperty(_this2, "error", void 0);
      _defineProperty(_this2, "jobInfo", void 0);
      _defineProperty(_this2, "locator", void 0);
      _this2.connection = conn;
      _this2.logger = _this2.connection._logLevel ? (0, logger_1.getLogger)('bulk2:QueryJobV2').createInstance(_this2.connection._logLevel) : (0, logger_1.getLogger)('bulk2:QueryJobV2');
      if ('id' in options) {
        _this2._id = options.id;
      } else {
        _this2.bodyParams = options.bodyParams;
      }
      _this2.pollingOptions = options.pollingOptions;
      // default error handler to keep the latest error
      _this2.on('error', function (error) {
        return _this2.error = error;
      });
      return _this2;
    }
    /**
     * Get the query job ID.
     *
     * @returns {string} query job Id.
     */
    _inherits(QueryJobV2, _events_1$EventEmitte);
    return _createClass(QueryJobV2, [{
      key: "id",
      get: function get() {
        return this.jobInfo ? this.jobInfo.id : this._id;
      }
      /**
       * Get the query job info.
       *
       * @returns {Promise<QueryJobInfoV2>} query job information.
       */
    }, {
      key: "getInfo",
      value: function getInfo() {
        if (this.jobInfo) {
          return this.jobInfo;
        }
        throw new Error('No internal job info. Make sure to call `await job.check`.');
      }
      /**
       * Creates a query job
       *
       * @returns {Promise<QueryJobInfoV2>} job information.
       */
    }, {
      key: "open",
      value: (function () {
        var _open = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
          return _regeneratorRuntime().wrap(function _callee3$(_context3) {
            while (1) switch (_context3.prev = _context3.next) {
              case 0:
                if (this.bodyParams) {
                  _context3.next = 2;
                  break;
                }
                throw new Error('Missing required body params to open a new query job.');
              case 2:
                _context3.prev = 2;
                _context3.next = 5;
                return this.createQueryRequest({
                  method: 'POST',
                  body: JSON.stringify(this.bodyParams),
                  headers: {
                    'Content-Type': 'application/json; charset=utf-8'
                  },
                  responseType: 'application/json'
                });
              case 5:
                this.jobInfo = _context3.sent;
                this.logger.debug("Successfully created job ".concat(this.id));
                this.emit('open', this.jobInfo);
                _context3.next = 14;
                break;
              case 10:
                _context3.prev = 10;
                _context3.t0 = _context3["catch"](2);
                this.emit('error', _context3.t0);
                throw _context3.t0;
              case 14:
                return _context3.abrupt("return", this.jobInfo);
              case 15:
              case "end":
                return _context3.stop();
            }
          }, _callee3, this, [[2, 10]]);
        }));
        function open() {
          return _open.apply(this, arguments);
        }
        return open;
      }()
      /**
       * Abort the job
       *
       * The 'aborted' event is emitted when the job successfully aborts.
       * @returns {Promise<QueryJobInfoV2>} job information.
       */
      )
    }, {
      key: "abort",
      value: (function () {
        var _abort = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
          var state;
          return _regeneratorRuntime().wrap(function _callee4$(_context4) {
            while (1) switch (_context4.prev = _context4.next) {
              case 0:
                _context4.prev = 0;
                state = 'Aborted';
                _context4.next = 4;
                return this.createQueryRequest({
                  method: 'PATCH',
                  path: "/".concat(this.id),
                  body: JSON.stringify({
                    state: state
                  }),
                  headers: {
                    'Content-Type': 'application/json; charset=utf-8'
                  },
                  responseType: 'application/json'
                });
              case 4:
                this.jobInfo = _context4.sent;
                this.logger.debug("Successfully aborted job ".concat(this.id));
                return _context4.abrupt("return", this.jobInfo);
              case 9:
                _context4.prev = 9;
                _context4.t0 = _context4["catch"](0);
                this.emit('error', _context4.t0);
                throw _context4.t0;
              case 13:
              case "end":
                return _context4.stop();
            }
          }, _callee4, this, [[0, 9]]);
        }));
        function abort() {
          return _abort.apply(this, arguments);
        }
        return abort;
      }()
      /**
       * Poll for the state of the processing for the job.
       *
       * @param interval Polling interval in milliseconds
       * @param timeout Polling timeout in milliseconds
       * @returns {Promise<Record[]>} A promise that resolves when the job finished being processed.
       */
      )
    }, {
      key: "poll",
      value: (function () {
        var _poll = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
          var interval,
            timeout,
            jobId,
            startTime,
            endTime,
            res,
            timeoutError,
            _args5 = arguments;
          return _regeneratorRuntime().wrap(function _callee5$(_context5) {
            while (1) switch (_context5.prev = _context5.next) {
              case 0:
                interval = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : this.pollingOptions.pollInterval;
                timeout = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : this.pollingOptions.pollTimeout;
                jobId = this.id;
                startTime = Date.now();
                endTime = startTime + timeout;
                this.logger.debug('Start polling for job status');
                this.logger.debug("Polling options: timeout:".concat(timeout, "ms | interval: ").concat(interval, "ms."));
                if (!(timeout === 0)) {
                  _context5.next = 9;
                  break;
                }
                throw new JobPollingTimeoutError("Skipping polling because of timeout = 0ms. Job Id = ".concat(jobId), jobId);
              case 9:
                if (!(endTime > Date.now())) {
                  _context5.next = 35;
                  break;
                }
                _context5.prev = 10;
                _context5.next = 13;
                return this.check();
              case 13:
                res = _context5.sent;
                _context5.t0 = res.state;
                _context5.next = _context5.t0 === 'Aborted' ? 17 : _context5.t0 === 'UploadComplete' ? 18 : _context5.t0 === 'InProgress' ? 18 : _context5.t0 === 'Failed' ? 22 : _context5.t0 === 'JobComplete' ? 24 : 27;
                break;
              case 17:
                throw new Error('Job has been aborted');
              case 18:
                this.emit('inProgress', res);
                _context5.next = 21;
                return delay(interval);
              case 21:
                return _context5.abrupt("break", 27);
              case 22:
                // unlike ingest jobs, the API doesn't return an error msg:
                // https://developer.salesforce.com/docs/atlas.en-us.api_asynch.meta/api_asynch/query_get_one_job.htm
                this.logger.debug(res);
                throw new Error('Query job failed to complete');
              case 24:
                this.logger.debug("Job ".concat(this.id, " was successfully processed."));
                this.emit('jobComplete');
                return _context5.abrupt("return");
              case 27:
                _context5.next = 33;
                break;
              case 29:
                _context5.prev = 29;
                _context5.t1 = _context5["catch"](10);
                this.emit('error', _context5.t1);
                throw _context5.t1;
              case 33:
                _context5.next = 9;
                break;
              case 35:
                timeoutError = new JobPollingTimeoutError("Polling timed out after ".concat(timeout, "ms. Job Id = ").concat(jobId), jobId);
                this.emit('error', timeoutError);
                throw timeoutError;
              case 38:
              case "end":
                return _context5.stop();
            }
          }, _callee5, this, [[10, 29]]);
        }));
        function poll() {
          return _poll.apply(this, arguments);
        }
        return poll;
      }()
      /**
       * Check the latest job status
       *
       * @returns {Promise<QueryJobInfoV2>} job information.
       */
      )
    }, {
      key: "check",
      value: (function () {
        var _check = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
          var jobInfo;
          return _regeneratorRuntime().wrap(function _callee6$(_context6) {
            while (1) switch (_context6.prev = _context6.next) {
              case 0:
                _context6.prev = 0;
                _context6.next = 3;
                return this.createQueryRequest({
                  method: 'GET',
                  path: "/".concat(this.id),
                  responseType: 'application/json'
                });
              case 3:
                jobInfo = _context6.sent;
                this.jobInfo = jobInfo;
                return _context6.abrupt("return", jobInfo);
              case 8:
                _context6.prev = 8;
                _context6.t0 = _context6["catch"](0);
                this.emit('error', _context6.t0);
                throw _context6.t0;
              case 12:
              case "end":
                return _context6.stop();
            }
          }, _callee6, this, [[0, 8]]);
        }));
        function check() {
          return _check.apply(this, arguments);
        }
        return check;
      }()
      /**
       * Get the results for a query job as a record stream
       *
       * This method assumes the job finished being processed
       * @returns {RecordStream} - Record stream, convertible to a CSV data stream
       */
      )
    }, {
      key: "result",
      value: (function () {
        var _result = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {
          var resultStream, resultDataStream, resultsPath, resPromise;
          return _regeneratorRuntime().wrap(function _callee7$(_context7) {
            while (1) switch (_context7.prev = _context7.next) {
              case 0:
                resultStream = new record_stream_1.Parsable();
                resultDataStream = resultStream.stream('csv');
                resultsPath = "/".concat(this.id, "/results");
              case 3:
                if (!(this.locator !== 'null')) {
                  _context7.next = 10;
                  break;
                }
                resPromise = this.createQueryRequest({
                  method: 'GET',
                  path: this.locator
                  // resultsPath starts with '/'
                  ? "".concat(resultsPath, "?locator=").concat(this.locator) : resultsPath,
                  headers: {
                    Accept: 'text/csv'
                  }
                });
                resPromise.stream().pipe(resultDataStream);
                _context7.next = 8;
                return resPromise;
              case 8:
                _context7.next = 3;
                break;
              case 10:
                return _context7.abrupt("return", resultStream);
              case 11:
              case "end":
                return _context7.stop();
            }
          }, _callee7, this);
        }));
        function result() {
          return _result.apply(this, arguments);
        }
        return result;
      }()
      /**
       * Deletes a query job.
       */
      )
    }, {
      key: "delete",
      value: (function () {
        var _delete2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
          return _regeneratorRuntime().wrap(function _callee8$(_context8) {
            while (1) switch (_context8.prev = _context8.next) {
              case 0:
                return _context8.abrupt("return", this.createQueryRequest({
                  method: 'DELETE',
                  path: "/".concat(this.id)
                }));
              case 1:
              case "end":
                return _context8.stop();
            }
          }, _callee8, this);
        }));
        function _delete() {
          return _delete2.apply(this, arguments);
        }
        return _delete;
      }())
    }, {
      key: "createQueryRequest",
      value: function createQueryRequest(request) {
        var _this3 = this;
        var path = request.path,
          responseType = request.responseType;
        var basePath = "services/data/v".concat(this.connection.version, "/jobs/query");
        var url = new URL(path ? basePath + path : basePath, this.connection.instanceUrl).toString();
        var httpApi = new BulkApiV2(this.connection, {
          responseType: responseType
        });
        httpApi.on('response', function (response) {
          _this3.locator = response.headers['sforce-locator'];
          _this3.logger.debug("sforce-locator: ".concat(_this3.locator));
        });
        return httpApi.request(_objectSpread2(_objectSpread2({}, request), {}, {
          url: url
        }));
      }
    }]);
  }(events_1.EventEmitter);
  bulk2.QueryJobV2 = QueryJobV2;
  /**
   * Class for Bulk API V2 Ingest Job
   */
  var IngestJobV2 = /*#__PURE__*/function (_events_1$EventEmitte2) {
    /**
     *
     */
    function IngestJobV2(conn, options) {
      var _this4;
      _classCallCheck(this, IngestJobV2);
      _this4 = _callSuper(this, IngestJobV2);
      _defineProperty(_this4, "connection", void 0);
      _defineProperty(_this4, "logger", void 0);
      _defineProperty(_this4, "_id", void 0);
      _defineProperty(_this4, "bodyParams", void 0);
      _defineProperty(_this4, "jobData", void 0);
      _defineProperty(_this4, "pollingOptions", void 0);
      _defineProperty(_this4, "bulkJobSuccessfulResults", void 0);
      _defineProperty(_this4, "bulkJobFailedResults", void 0);
      _defineProperty(_this4, "bulkJobUnprocessedRecords", void 0);
      _defineProperty(_this4, "error", void 0);
      _defineProperty(_this4, "jobInfo", void 0);
      _this4.connection = conn;
      _this4.logger = _this4.connection._logLevel ? (0, logger_1.getLogger)('bulk2:IngestJobV2').createInstance(_this4.connection._logLevel) : (0, logger_1.getLogger)('bulk2:IngestJobV2');
      _this4.pollingOptions = options.pollingOptions;
      if ('id' in options) {
        _this4._id = options.id;
      } else {
        _this4.bodyParams = options.bodyParams;
      }
      _this4.jobData = new JobDataV2({
        createRequest: function createRequest(request) {
          return _this4.createIngestRequest(request);
        },
        job: _this4
      });
      // default error handler to keep the latest error
      _this4.on('error', function (error) {
        return _this4.error = error;
      });
      return _this4;
    }
    /**
     * Get the query job ID.
     *
     * @returns {string} query job Id.
     */
    _inherits(IngestJobV2, _events_1$EventEmitte2);
    return _createClass(IngestJobV2, [{
      key: "id",
      get: function get() {
        return this.jobInfo ? this.jobInfo.id : this._id;
      }
      /**
       * Get the query job info.
       *
       * @returns {Promise<QueryJobInfoV2>} ingest job information.
       */
    }, {
      key: "getInfo",
      value: function getInfo() {
        if (this.jobInfo) {
          return this.jobInfo;
        }
        throw new Error('No internal job info. Make sure to call `await job.check`.');
      }
      /**
       * Create a job representing a bulk operation in the org
       *
       * @returns {Promise<QueryJobInfoV2>} job information.
       */
    }, {
      key: "open",
      value: (function () {
        var _open2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {
          return _regeneratorRuntime().wrap(function _callee9$(_context9) {
            while (1) switch (_context9.prev = _context9.next) {
              case 0:
                if (this.bodyParams) {
                  _context9.next = 2;
                  break;
                }
                throw new Error('Missing required body params to open a new ingest job.');
              case 2:
                _context9.prev = 2;
                _context9.next = 5;
                return this.createIngestRequest({
                  method: 'POST',
                  body: JSON.stringify(this.bodyParams),
                  headers: {
                    'Content-Type': 'application/json; charset=utf-8'
                  },
                  responseType: 'application/json'
                });
              case 5:
                this.jobInfo = _context9.sent;
                this.logger.debug("Successfully created job ".concat(this.id));
                this.emit('open');
                _context9.next = 14;
                break;
              case 10:
                _context9.prev = 10;
                _context9.t0 = _context9["catch"](2);
                this.emit('error', _context9.t0);
                throw _context9.t0;
              case 14:
                return _context9.abrupt("return", this.jobInfo);
              case 15:
              case "end":
                return _context9.stop();
            }
          }, _callee9, this, [[2, 10]]);
        }));
        function open() {
          return _open2.apply(this, arguments);
        }
        return open;
      }()
      /** Upload data for a job in CSV format
       *
       *  @param input CSV as a string, or array of records or readable stream
       */
      )
    }, {
      key: "uploadData",
      value: (function () {
        var _uploadData = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee10(input) {
          return _regeneratorRuntime().wrap(function _callee10$(_context10) {
            while (1) switch (_context10.prev = _context10.next) {
              case 0:
                _context10.next = 2;
                return this.jobData.execute(input).result;
              case 2:
                this.logger.debug("Successfully uploaded data to job ".concat(this.id));
              case 3:
              case "end":
                return _context10.stop();
            }
          }, _callee10, this);
        }));
        function uploadData(_x4) {
          return _uploadData.apply(this, arguments);
        }
        return uploadData;
      }()
      /**
       * Close opened job
       *
       * This method will notify the org  that the upload of job data is complete and is ready for processing.
       */
      )
    }, {
      key: "close",
      value: (function () {
        var _close = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {
          var state;
          return _regeneratorRuntime().wrap(function _callee11$(_context11) {
            while (1) switch (_context11.prev = _context11.next) {
              case 0:
                _context11.prev = 0;
                state = 'UploadComplete';
                _context11.next = 4;
                return this.createIngestRequest({
                  method: 'PATCH',
                  path: "/".concat(this.id),
                  body: JSON.stringify({
                    state: state
                  }),
                  headers: {
                    'Content-Type': 'application/json; charset=utf-8'
                  },
                  responseType: 'application/json'
                });
              case 4:
                this.jobInfo = _context11.sent;
                this.logger.debug("Successfully closed job ".concat(this.id));
                this.emit('close');
                _context11.next = 13;
                break;
              case 9:
                _context11.prev = 9;
                _context11.t0 = _context11["catch"](0);
                this.emit('error', _context11.t0);
                throw _context11.t0;
              case 13:
              case "end":
                return _context11.stop();
            }
          }, _callee11, this, [[0, 9]]);
        }));
        function close() {
          return _close.apply(this, arguments);
        }
        return close;
      }()
      /**
       * Set the status to abort
       */
      )
    }, {
      key: "abort",
      value: (function () {
        var _abort2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {
          var state;
          return _regeneratorRuntime().wrap(function _callee12$(_context12) {
            while (1) switch (_context12.prev = _context12.next) {
              case 0:
                _context12.prev = 0;
                state = 'Aborted';
                _context12.next = 4;
                return this.createIngestRequest({
                  method: 'PATCH',
                  path: "/".concat(this.id),
                  body: JSON.stringify({
                    state: state
                  }),
                  headers: {
                    'Content-Type': 'application/json; charset=utf-8'
                  },
                  responseType: 'application/json'
                });
              case 4:
                this.jobInfo = _context12.sent;
                this.logger.debug("Successfully aborted job ".concat(this.id));
                this.emit('aborted');
                _context12.next = 13;
                break;
              case 9:
                _context12.prev = 9;
                _context12.t0 = _context12["catch"](0);
                this.emit('error', _context12.t0);
                throw _context12.t0;
              case 13:
              case "end":
                return _context12.stop();
            }
          }, _callee12, this, [[0, 9]]);
        }));
        function abort() {
          return _abort2.apply(this, arguments);
        }
        return abort;
      }()
      /**
       * Poll for the state of the processing for the job.
       *
       * This method will only throw after a timeout. To capture a
       * job failure while polling you must set a listener for the
       * `failed` event before calling it:
       *
       * job.on('failed', (err) => console.error(err))
       * await job.poll()
       *
       * @param interval Polling interval in milliseconds
       * @param timeout Polling timeout in milliseconds
       * @returns {Promise<void>} A promise that resolves when the job finishes successfully
       */
      )
    }, {
      key: "poll",
      value: (function () {
        var _poll2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {
          var interval,
            timeout,
            jobId,
            startTime,
            endTime,
            res,
            timeoutError,
            _args13 = arguments;
          return _regeneratorRuntime().wrap(function _callee13$(_context13) {
            while (1) switch (_context13.prev = _context13.next) {
              case 0:
                interval = _args13.length > 0 && _args13[0] !== undefined ? _args13[0] : this.pollingOptions.pollInterval;
                timeout = _args13.length > 1 && _args13[1] !== undefined ? _args13[1] : this.pollingOptions.pollTimeout;
                jobId = this.id;
                startTime = Date.now();
                endTime = startTime + timeout;
                if (!(timeout === 0)) {
                  _context13.next = 7;
                  break;
                }
                throw new JobPollingTimeoutError("Skipping polling because of timeout = 0ms. Job Id = ".concat(jobId), jobId);
              case 7:
                this.logger.debug('Start polling for job status');
                this.logger.debug("Polling options: timeout:".concat(timeout, "ms | interval: ").concat(interval, "ms."));
              case 9:
                if (!(endTime > Date.now())) {
                  _context13.next = 36;
                  break;
                }
                _context13.prev = 10;
                _context13.next = 13;
                return this.check();
              case 13:
                res = _context13.sent;
                _context13.t0 = res.state;
                _context13.next = _context13.t0 === 'Open' ? 17 : _context13.t0 === 'Aborted' ? 18 : _context13.t0 === 'UploadComplete' ? 19 : _context13.t0 === 'InProgress' ? 19 : _context13.t0 === 'Failed' ? 23 : _context13.t0 === 'JobComplete' ? 25 : 28;
                break;
              case 17:
                throw new Error('Job is still open. Make sure close the job by `close` method on the job instance before polling.');
              case 18:
                throw new Error('Job has been aborted');
              case 19:
                this.emit('inProgress', res);
                _context13.next = 22;
                return delay(interval);
              case 22:
                return _context13.abrupt("break", 28);
              case 23:
                this.logger.debug(res);
                throw new Error("Ingest job failed to complete due to: ".concat(res.errorMessage));
              case 25:
                this.logger.debug("Job ".concat(this.id, " was successfully processed."));
                this.emit('jobComplete');
                return _context13.abrupt("return");
              case 28:
                _context13.next = 34;
                break;
              case 30:
                _context13.prev = 30;
                _context13.t1 = _context13["catch"](10);
                this.emit('error', _context13.t1);
                throw _context13.t1;
              case 34:
                _context13.next = 9;
                break;
              case 36:
                timeoutError = new JobPollingTimeoutError("Polling timed out after ".concat(timeout, "ms. Job Id = ").concat(jobId), jobId);
                this.emit('error', timeoutError);
                throw timeoutError;
              case 39:
              case "end":
                return _context13.stop();
            }
          }, _callee13, this, [[10, 30]]);
        }));
        function poll() {
          return _poll2.apply(this, arguments);
        }
        return poll;
      }()
      /**
       * Check the latest batch status in server
       */
      )
    }, {
      key: "check",
      value: (function () {
        var _check2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {
          var jobInfo;
          return _regeneratorRuntime().wrap(function _callee14$(_context14) {
            while (1) switch (_context14.prev = _context14.next) {
              case 0:
                _context14.prev = 0;
                _context14.next = 3;
                return this.createIngestRequest({
                  method: 'GET',
                  path: "/".concat(this.id),
                  responseType: 'application/json'
                });
              case 3:
                jobInfo = _context14.sent;
                this.jobInfo = jobInfo;
                return _context14.abrupt("return", jobInfo);
              case 8:
                _context14.prev = 8;
                _context14.t0 = _context14["catch"](0);
                this.emit('error', _context14.t0);
                throw _context14.t0;
              case 12:
              case "end":
                return _context14.stop();
            }
          }, _callee14, this, [[0, 8]]);
        }));
        function check() {
          return _check2.apply(this, arguments);
        }
        return check;
      }()
      /** Return all record results
       *
       * This method will return successful, failed and unprocessed records
       *
       * @returns Promise<IngestJobV2Results>
       */
      )
    }, {
      key: "getAllResults",
      value: (function () {
        var _getAllResults = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {
          var _yield$Promise$all, _yield$Promise$all2, successfulResults, failedResults, unprocessedRecords;
          return _regeneratorRuntime().wrap(function _callee15$(_context15) {
            while (1) switch (_context15.prev = _context15.next) {
              case 0:
                _context15.next = 2;
                return Promise.all([this.getSuccessfulResults(), this.getFailedResults(), this.getUnprocessedRecords()]);
              case 2:
                _yield$Promise$all = _context15.sent;
                _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 3);
                successfulResults = _yield$Promise$all2[0];
                failedResults = _yield$Promise$all2[1];
                unprocessedRecords = _yield$Promise$all2[2];
                return _context15.abrupt("return", {
                  successfulResults: successfulResults,
                  failedResults: failedResults,
                  unprocessedRecords: unprocessedRecords
                });
              case 8:
              case "end":
                return _context15.stop();
            }
          }, _callee15, this);
        }));
        function getAllResults() {
          return _getAllResults.apply(this, arguments);
        }
        return getAllResults;
      }()
      /** Return successful results
       *
       * The order of records returned is not guaranteed to match the ordering of the uploaded data.
       *
       * @returns Promise<IngestJobV2SuccessfulResults>
       */
      )
    }, {
      key: "getSuccessfulResults",
      value: (function () {
        var _getSuccessfulResults = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {
          var results;
          return _regeneratorRuntime().wrap(function _callee16$(_context16) {
            while (1) switch (_context16.prev = _context16.next) {
              case 0:
                if (!this.bulkJobSuccessfulResults) {
                  _context16.next = 2;
                  break;
                }
                return _context16.abrupt("return", this.bulkJobSuccessfulResults);
              case 2:
                _context16.next = 4;
                return this.createIngestRequest({
                  method: 'GET',
                  path: "/".concat(this.id, "/successfulResults"),
                  responseType: 'text/csv'
                });
              case 4:
                results = _context16.sent;
                this.bulkJobSuccessfulResults = results !== null && results !== void 0 ? results : [];
                return _context16.abrupt("return", this.bulkJobSuccessfulResults);
              case 7:
              case "end":
                return _context16.stop();
            }
          }, _callee16, this);
        }));
        function getSuccessfulResults() {
          return _getSuccessfulResults.apply(this, arguments);
        }
        return getSuccessfulResults;
      }()
      /** Return failed results
       *
       * The order of records in the response is not guaranteed to match the ordering of records in the original job data.
       *
       * @returns Promise<IngestJobV2SuccessfulResults>
       */
      )
    }, {
      key: "getFailedResults",
      value: (function () {
        var _getFailedResults = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee17() {
          var results;
          return _regeneratorRuntime().wrap(function _callee17$(_context17) {
            while (1) switch (_context17.prev = _context17.next) {
              case 0:
                if (!this.bulkJobFailedResults) {
                  _context17.next = 2;
                  break;
                }
                return _context17.abrupt("return", this.bulkJobFailedResults);
              case 2:
                _context17.next = 4;
                return this.createIngestRequest({
                  method: 'GET',
                  path: "/".concat(this.id, "/failedResults"),
                  responseType: 'text/csv'
                });
              case 4:
                results = _context17.sent;
                this.bulkJobFailedResults = results !== null && results !== void 0 ? results : [];
                return _context17.abrupt("return", this.bulkJobFailedResults);
              case 7:
              case "end":
                return _context17.stop();
            }
          }, _callee17, this);
        }));
        function getFailedResults() {
          return _getFailedResults.apply(this, arguments);
        }
        return getFailedResults;
      }()
      /** Return unprocessed results
       *
       * The unprocessed records endpoint returns records as a CSV.
       * If the request helper is able to parse it, you get the records
       * as an array of objects.
       * If unable to parse the it (bad CSV), you get the raw response as a string.
       *
       * The order of records in the response is not guaranteed to match the ordering of records in the original job data.
       *
       * @returns Promise<IngestJobV2UnprocessedRecords>
       */
      )
    }, {
      key: "getUnprocessedRecords",
      value: (function () {
        var _getUnprocessedRecords = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee18() {
          var results;
          return _regeneratorRuntime().wrap(function _callee18$(_context18) {
            while (1) switch (_context18.prev = _context18.next) {
              case 0:
                if (!this.bulkJobUnprocessedRecords) {
                  _context18.next = 2;
                  break;
                }
                return _context18.abrupt("return", this.bulkJobUnprocessedRecords);
              case 2:
                _context18.next = 4;
                return this.createIngestRequest({
                  method: 'GET',
                  path: "/".concat(this.id, "/unprocessedrecords"),
                  responseType: 'text/csv'
                });
              case 4:
                results = _context18.sent;
                this.bulkJobUnprocessedRecords = results !== null && results !== void 0 ? results : [];
                return _context18.abrupt("return", this.bulkJobUnprocessedRecords);
              case 7:
              case "end":
                return _context18.stop();
            }
          }, _callee18, this);
        }));
        function getUnprocessedRecords() {
          return _getUnprocessedRecords.apply(this, arguments);
        }
        return getUnprocessedRecords;
      }()
      /**
       * Deletes an ingest job.
       */
      )
    }, {
      key: "delete",
      value: (function () {
        var _delete3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee19() {
          return _regeneratorRuntime().wrap(function _callee19$(_context19) {
            while (1) switch (_context19.prev = _context19.next) {
              case 0:
                return _context19.abrupt("return", this.createIngestRequest({
                  method: 'DELETE',
                  path: "/".concat(this.id)
                }));
              case 1:
              case "end":
                return _context19.stop();
            }
          }, _callee19, this);
        }));
        function _delete() {
          return _delete3.apply(this, arguments);
        }
        return _delete;
      }())
    }, {
      key: "createIngestRequest",
      value: function createIngestRequest(request) {
        var path = request.path,
          responseType = request.responseType;
        var basePath = "/services/data/v".concat(this.connection.version, "/jobs/ingest");
        var url = new URL(path ? basePath + path : basePath, this.connection.instanceUrl).toString();
        return new BulkApiV2(this.connection, {
          responseType: responseType
        }).request(_objectSpread2(_objectSpread2({}, request), {}, {
          url: url
        }));
      }
    }]);
  }(events_1.EventEmitter);
  bulk2.IngestJobV2 = IngestJobV2;
  var JobDataV2 = /*#__PURE__*/function (_stream_1$Writable) {
    /**
     *
     */
    function JobDataV2(options) {
      var _this5;
      _classCallCheck(this, JobDataV2);
      _this5 = _callSuper(this, JobDataV2, [{
        objectMode: true
      }]);
      _defineProperty(_this5, "job", void 0);
      _defineProperty(_this5, "uploadStream", void 0);
      _defineProperty(_this5, "downloadStream", void 0);
      _defineProperty(_this5, "dataStream", void 0);
      _defineProperty(_this5, "result", void 0);
      var createRequest = options.createRequest;
      _this5.job = options.job;
      _this5.uploadStream = new record_stream_1.Serializable();
      _this5.downloadStream = new record_stream_1.Parsable();
      var converterOptions = {
        nullValue: '#N/A'
      };
      var uploadDataStream = _this5.uploadStream.stream('csv', converterOptions);
      var downloadDataStream = _this5.downloadStream.stream('csv', converterOptions);
      _this5.dataStream = (0, stream_2.concatStreamsAsDuplex)(uploadDataStream, downloadDataStream);
      _this5.on('finish', function () {
        return _this5.uploadStream.end();
      });
      uploadDataStream.once('readable', function () {
        try {
          // pipe upload data to batch API request stream
          var req = createRequest({
            method: 'PUT',
            path: "/".concat(_this5.job.id, "/batches"),
            headers: {
              'Content-Type': 'text/csv'
            },
            responseType: 'application/json'
          });
          _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee20() {
            var res;
            return _regeneratorRuntime().wrap(function _callee20$(_context20) {
              while (1) switch (_context20.prev = _context20.next) {
                case 0:
                  _context20.prev = 0;
                  _context20.next = 3;
                  return req;
                case 3:
                  res = _context20.sent;
                  _this5.emit('response', res);
                  _context20.next = 10;
                  break;
                case 7:
                  _context20.prev = 7;
                  _context20.t0 = _context20["catch"](0);
                  _this5.emit('error', _context20.t0);
                case 10:
                case "end":
                  return _context20.stop();
              }
            }, _callee20, null, [[0, 7]]);
          }))();
          uploadDataStream.pipe(req.stream());
        } catch (err) {
          _this5.emit('error', err);
        }
      });
      return _this5;
    }
    _inherits(JobDataV2, _stream_1$Writable);
    return _createClass(JobDataV2, [{
      key: "_write",
      value: function _write(record_, enc, cb) {
        var Id = record_.Id;
          record_.type;
          record_.attributes;
          var rrec = _objectWithoutProperties(record_, _excluded2);
        var record;
        switch (this.job.getInfo().operation) {
          case 'insert':
            record = rrec;
            break;
          case 'delete':
          case 'hardDelete':
            record = {
              Id: Id
            };
            break;
          default:
            record = _objectSpread2({
              Id: Id
            }, rrec);
        }
        this.uploadStream.write(record, enc, cb);
      }
      /**
       * Returns duplex stream which accepts CSV data input and batch result output
       */
    }, {
      key: "stream",
      value: function stream() {
        return this.dataStream;
      }
      /**
       * Execute batch operation
       */
    }, {
      key: "execute",
      value: function execute(input) {
        var _this6 = this;
        if (this.result) {
          throw new Error('Data can only be uploaded to a job once.');
        }
        this.result = new Promise(function (resolve, reject) {
          _this6.once('response', function () {
            return resolve();
          });
          _this6.once('error', reject);
        });
        if (is_1["default"].nodeStream(input)) {
          // if input has stream.Readable interface
          input.pipe(this.dataStream);
        } else {
          var recordData = structuredClone(input);
          if (Array.isArray(recordData)) {
            var _iterator = _createForOfIteratorHelper(recordData),
              _step;
            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var record = _step.value;
                for (var _i = 0, _Object$keys = Object.keys(record); _i < _Object$keys.length; _i++) {
                  var key = _Object$keys[_i];
                  if (typeof record[key] === 'boolean') {
                    record[key] = String(record[key]);
                  }
                }
                this.write(record);
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
            this.end();
          } else if (typeof recordData === 'string') {
            this.dataStream.write(recordData, 'utf8');
            this.dataStream.end();
          }
        }
        return this;
      }
    }]);
  }(stream_1.Writable);
  function delay(ms) {
    return new Promise(function (resolve) {
      return setTimeout(resolve, ms);
    });
  }
  /*--------------------------------------------*/
  /*
   * Register hook in connection instantiation for dynamically adding this API module features
   */
  (0, jsforce_1$3.registerModule)('bulk2', function (conn) {
    return new BulkV2(conn);
  });
  bulk2["default"] = BulkV2;

  var chatter = {};

  var _function = {};

  Object.defineProperty(_function, "__esModule", {
    value: true
  });
  _function.emptyFunc = _function.identityFunc = _function.isPromiseLike = _function.isNumber = _function.isFunction = _function.isMapObject = _function.isObject = void 0;
  /**
   *
   */
  function isObject$1(v) {
    var t = _typeof(v);
    return v != null && (t == 'object' || t == 'function');
  }
  _function.isObject = isObject$1;
  /**
   *
   */
  function isMapObject(v) {
    var t = _typeof(v);
    return v != null && t == 'object';
  }
  _function.isMapObject = isMapObject;
  /**
   *
   */
  function isFunction$1(v) {
    return typeof v == 'function';
  }
  _function.isFunction = isFunction$1;
  /**
   *
   */
  function isNumber(v) {
    return typeof v == 'number';
  }
  _function.isNumber = isNumber;
  /**
   * Detect whether the value has CommonJS Promise/A+ interface or not
   */
  function isPromiseLike(v) {
    return isObject$1(v) && isFunction$1(v.then);
  }
  _function.isPromiseLike = isPromiseLike;
  /**
   *
   */
  function identityFunc(a) {
    return a;
  }
  _function.identityFunc = identityFunc;
  /**
   *
   */
  function emptyFunc() {}
  _function.emptyFunc = emptyFunc;

  Object.defineProperty(chatter, "__esModule", {
    value: true
  });
  chatter.Chatter = chatter.Resource = void 0;
  /**
   * @file Manages Salesforce Chatter REST API calls
   * @author Shinichi Tomita <shinichi.tomita@gmail.com>
   */
  var jsforce_1$2 = requireJsforce();
  var function_1$1 = _function;
  /*--------------------------------------------*/
  /**
   * A class representing chatter API request
   */
  var Request = /*#__PURE__*/function () {
    function Request(chatter, request) {
      _classCallCheck(this, Request);
      _defineProperty(this, "_chatter", void 0);
      _defineProperty(this, "_request", void 0);
      _defineProperty(this, "_promise", void 0);
      this._chatter = chatter;
      this._request = request;
    }
    /**
     * Retrieve parameters in batch request form
     */
    return _createClass(Request, [{
      key: "batchParams",
      value: function batchParams() {
        var _this$_request = this._request,
          method = _this$_request.method,
          url = _this$_request.url,
          body = _this$_request.body;
        return _objectSpread2({
          method: method,
          url: this._chatter._normalizeUrl(url)
        }, typeof body !== 'undefined' ? {
          richInput: body
        } : {});
      }
      /**
       * Retrieve parameters in batch request form
       *
       * @method Chatter~Request#promise
       * @returns {Promise.<Chatter~RequestResult>}
       */
    }, {
      key: "promise",
      value: function promise() {
        return this._promise || (this._promise = this._chatter._request(this._request));
      }
      /**
       * Returns Node.js Stream object for request
       *
       * @method Chatter~Request#stream
       * @returns {stream.Stream}
       */
    }, {
      key: "stream",
      value: function stream() {
        return this._chatter._request(this._request).stream();
      }
      /**
       * Promise/A+ interface
       * http://promises-aplus.github.io/promises-spec/
       *
       * Delegate to deferred promise, return promise instance for batch result
       */
    }, {
      key: "then",
      value: function then(onResolve, onReject) {
        return this.promise().then(onResolve, onReject);
      }
    }]);
  }();
  function apppendQueryParamsToUrl(url, queryParams) {
    if (queryParams) {
      var qstring = Object.keys(queryParams).map(function (name) {
        var _queryParams$name;
        return "".concat(name, "=").concat(encodeURIComponent(String((_queryParams$name = queryParams[name]) !== null && _queryParams$name !== void 0 ? _queryParams$name : '')));
      }).join('&');
      url += (url.indexOf('?') > 0 ? '&' : '?') + qstring;
    }
    return url;
  }
  /*------------------------------*/
  var Resource = /*#__PURE__*/function (_Request2) {
    /**
     *
     */
    function Resource(chatter, url, queryParams) {
      var _this;
      _classCallCheck(this, Resource);
      _this = _callSuper(this, Resource, [chatter, {
        method: 'GET',
        url: apppendQueryParamsToUrl(url, queryParams)
      }]);
      _defineProperty(_this, "_url", void 0);
      /**
       * Synonym of Resource#destroy()
       */
      _defineProperty(_this, "delete", _this.destroy);
      /**
       * Synonym of Resource#destroy()
       */
      _defineProperty(_this, "del", _this.destroy);
      _this._url = _this._request.url;
      return _this;
    }
    /**
     * Create a new resource
     */
    _inherits(Resource, _Request2);
    return _createClass(Resource, [{
      key: "create",
      value: function create(data) {
        return this._chatter.request({
          method: 'POST',
          url: this._url,
          body: data
        });
      }
      /**
       * Retrieve resource content
       */
    }, {
      key: "retrieve",
      value: function retrieve() {
        return this._chatter.request({
          method: 'GET',
          url: this._url
        });
      }
      /**
       * Update specified resource
       */
    }, {
      key: "update",
      value: function update(data) {
        return this._chatter.request({
          method: 'POST',
          url: this._url,
          body: data
        });
      }
      /**
       * Delete specified resource
       */
    }, {
      key: "destroy",
      value: function destroy() {
        return this._chatter.request({
          method: 'DELETE',
          url: this._url
        });
      }
    }]);
  }(Request);
  chatter.Resource = Resource;
  /*------------------------------*/
  /**
   * API class for Chatter REST API call
   */
  var Chatter = /*#__PURE__*/function () {
    /**
     *
     */
    function Chatter(conn) {
      _classCallCheck(this, Chatter);
      _defineProperty(this, "_conn", void 0);
      this._conn = conn;
    }
    /**
     * Sending request to API endpoint
     * @private
     */
    return _createClass(Chatter, [{
      key: "_request",
      value: function _request(req_) {
        var method = req_.method,
          url_ = req_.url,
          headers_ = req_.headers,
          body_ = req_.body;
        var headers = headers_ !== null && headers_ !== void 0 ? headers_ : {};
        var body;
        if (/^(put|post|patch)$/i.test(method)) {
          if ((0, function_1$1.isObject)(body_)) {
            headers = _objectSpread2(_objectSpread2({}, headers_), {}, {
              'Content-Type': 'application/json'
            });
            body = JSON.stringify(body_);
          } else {
            body = body_;
          }
        }
        var url = this._normalizeUrl(url_);
        return this._conn.request({
          method: method,
          url: url,
          headers: headers,
          body: body
        });
      }
      /**
       * Convert path to site root relative url
       * @private
       */
    }, {
      key: "_normalizeUrl",
      value: function _normalizeUrl(url) {
        if (url.startsWith('/chatter/') || url.startsWith('/connect/')) {
          return '/services/data/v' + this._conn.version + url;
        } else if (/^\/v[\d]+\.[\d]+\//.test(url)) {
          return '/services/data' + url;
        } else if (!url.startsWith('/services/') && url.startsWith('/')) {
          return '/services/data/v' + this._conn.version + '/chatter' + url;
        } else {
          return url;
        }
      }
      /**
       * Make a request for chatter API resource
       */
    }, {
      key: "request",
      value: function request(req) {
        return new Request(this, req);
      }
      /**
       * Make a resource request to chatter API
       */
    }, {
      key: "resource",
      value: function resource(url, queryParams) {
        return new Resource(this, url, queryParams);
      }
      /**
       * Make a batch request to chatter API
       */
    }, {
      key: "batch",
      value: (function () {
        var _batch = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(requests) {
          var deferreds, res;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                deferreds = requests.map(function (request) {
                  var deferred = defer();
                  request._promise = deferred.promise;
                  return deferred;
                });
                _context.next = 3;
                return this.request({
                  method: 'POST',
                  url: this._normalizeUrl('/connect/batch'),
                  body: {
                    batchRequests: requests.map(function (request) {
                      return request.batchParams();
                    })
                  }
                });
              case 3:
                res = _context.sent;
                res.results.forEach(function (result, i) {
                  var deferred = deferreds[i];
                  if (result.statusCode >= 400) {
                    deferred.reject(result.result);
                  } else {
                    deferred.resolve(result.result);
                  }
                });
                return _context.abrupt("return", res);
              case 6:
              case "end":
                return _context.stop();
            }
          }, _callee, this);
        }));
        function batch(_x) {
          return _batch.apply(this, arguments);
        }
        return batch;
      }())
    }]);
  }();
  chatter.Chatter = Chatter;
  function defer() {
    var resolve_ = function resolve_() {};
    var reject_ = function reject_() {};
    var promise = new Promise(function (resolve, reject) {
      resolve_ = resolve;
      reject_ = reject;
    });
    return {
      promise: promise,
      resolve: resolve_,
      reject: reject_
    };
  }
  /*--------------------------------------------*/
  /*
   * Register hook in connection instantiation for dynamically adding this API module features
   */
  (0, jsforce_1$2.registerModule)('chatter', function (conn) {
    return new Chatter(conn);
  });
  chatter["default"] = Chatter;

  var metadata = {};

  var soap$2 = {};

  var __importDefault$2 = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };
  Object.defineProperty(soap$2, "__esModule", {
    value: true
  });
  soap$2.SOAP = soap$2.castTypeUsingSchema = void 0;
  /**
   * @file Manages method call to SOAP endpoint
   * @author Shinichi Tomita <shinichi.tomita@gmail.com>
   */
  var http_api_1 = __importDefault$2(httpApi);
  var function_1 = _function;
  var get_body_size_1 = getBodySize$1;
  /**
   *
   */
  function getPropsSchema(schema, schemaDict) {
    if (schema["extends"] && schemaDict[schema["extends"]]) {
      var extendSchema = schemaDict[schema["extends"]];
      return _objectSpread2(_objectSpread2({}, getPropsSchema(extendSchema, schemaDict)), schema.props);
    }
    return schema.props;
  }
  function isNillValue(value) {
    return value == null || (0, function_1.isMapObject)(value) && (0, function_1.isMapObject)(value.$) && value.$['xsi:nil'] === 'true';
  }
  /**
   *
   */
  function castTypeUsingSchema(value, schema) {
    var schemaDict = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    if (Array.isArray(schema)) {
      var nillable = schema.length === 2 && schema[0] === '?';
      var schema_ = nillable ? schema[1] : schema[0];
      if (value == null) {
        return nillable ? null : [];
      }
      return (Array.isArray(value) ? value : [value]).map(function (v) {
        return castTypeUsingSchema(v, schema_, schemaDict);
      });
    } else if ((0, function_1.isMapObject)(schema)) {
      // if schema is Schema Definition, not schema element
      if ('type' in schema && 'props' in schema && (0, function_1.isMapObject)(schema.props)) {
        var props = getPropsSchema(schema, schemaDict);
        return castTypeUsingSchema(value, props, schemaDict);
      }
      var _nillable = '?' in schema;
      var _schema_ = '?' in schema ? schema['?'] : schema;
      if (_nillable && isNillValue(value)) {
        return null;
      }
      var obj = (0, function_1.isMapObject)(value) ? value : {};
      return Object.keys(_schema_).reduce(function (o, k) {
        var s = _schema_[k];
        var v = obj[k];
        var nillable = Array.isArray(s) && s.length === 2 && s[0] === '?' || (0, function_1.isMapObject)(s) && '?' in s || typeof s === 'string' && s.startsWith('?');
        if (typeof v === 'undefined' && nillable) {
          return o;
        }
        return _objectSpread2(_objectSpread2({}, o), {}, _defineProperty({}, k, castTypeUsingSchema(v, s, schemaDict)));
      }, obj);
    } else {
      var _nillable2 = typeof schema === 'string' && schema.startsWith('?');
      var type = typeof schema === 'string' ? _nillable2 ? schema.substring(1) : schema : 'any';
      switch (type) {
        case 'string':
          return isNillValue(value) ? _nillable2 ? null : '' : String(value);
        case 'number':
          return isNillValue(value) ? _nillable2 ? null : 0 : Number(value);
        case 'boolean':
          return isNillValue(value) ? _nillable2 ? null : false : value === 'true';
        case 'null':
          return null;
        default:
          {
            if (schemaDict[type]) {
              var cvalue = castTypeUsingSchema(value, schemaDict[type], schemaDict);
              var isEmpty = (0, function_1.isMapObject)(cvalue) && Object.keys(cvalue).length === 0;
              return isEmpty && _nillable2 ? null : cvalue;
            }
            return value;
          }
      }
    }
  }
  soap$2.castTypeUsingSchema = castTypeUsingSchema;
  /**
   * @private
   */
  function lookupValue(obj, propRegExps) {
    var regexp = propRegExps.shift();
    if (!regexp) {
      return obj;
    }
    if ((0, function_1.isMapObject)(obj)) {
      for (var _i = 0, _Object$keys = Object.keys(obj); _i < _Object$keys.length; _i++) {
        var prop = _Object$keys[_i];
        if (regexp.test(prop)) {
          return lookupValue(obj[prop], propRegExps);
        }
      }
      return null;
    }
  }
  /**
   * @private
   */
  function toXML(name, value) {
    if ((0, function_1.isObject)(name)) {
      value = name;
      name = null;
    }
    if (Array.isArray(value)) {
      return value.map(function (v) {
        return toXML(name, v);
      }).join('');
    } else {
      var attrs = [];
      var elems = [];
      if ((0, function_1.isMapObject)(value)) {
        for (var _i2 = 0, _Object$keys2 = Object.keys(value); _i2 < _Object$keys2.length; _i2++) {
          var k = _Object$keys2[_i2];
          var v = value[k];
          if (k.startsWith('@')) {
            var kk = k.substring(1);
            attrs.push("".concat(kk, "=\"").concat(v, "\""));
          } else {
            elems.push(toXML(k, v));
          }
        }
        value = elems.join('');
      } else {
        value = String(value).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&apos;');
      }
      var startTag = name ? '<' + name + (attrs.length > 0 ? ' ' + attrs.join(' ') : '') + '>' : '';
      var endTag = name ? '</' + name + '>' : '';
      return startTag + value + endTag;
    }
  }
  /**
   * Class for SOAP endpoint of Salesforce
   *
   * @protected
   * @class
   * @constructor
   * @param {Connection} conn - Connection instance
   * @param {Object} options - SOAP endpoint setting options
   * @param {String} options.endpointUrl - SOAP endpoint URL
   * @param {String} [options.xmlns] - XML namespace for method call (default is "urn:partner.soap.sforce.com")
   */
  var SOAP = /*#__PURE__*/function (_http_api_1$default) {
    function SOAP(conn, options) {
      var _this;
      _classCallCheck(this, SOAP);
      _this = _callSuper(this, SOAP, [conn, options]);
      _defineProperty(_this, "_endpointUrl", void 0);
      _defineProperty(_this, "_xmlns", void 0);
      _this._endpointUrl = options.endpointUrl;
      _this._xmlns = options.xmlns || 'urn:partner.soap.sforce.com';
      return _this;
    }
    /**
     * Invoke SOAP call using method and arguments
     */
    _inherits(SOAP, _http_api_1$default);
    return _createClass(SOAP, [{
      key: "invoke",
      value: (function () {
        var _invoke = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(method, args, schema, schemaDict) {
          var res;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.request({
                  method: 'POST',
                  url: this._endpointUrl,
                  headers: {
                    'Content-Type': 'text/xml',
                    SOAPAction: '""'
                  },
                  _message: _defineProperty({}, method, args)
                });
              case 2:
                res = _context.sent;
                return _context.abrupt("return", schema ? castTypeUsingSchema(res, schema, schemaDict) : res);
              case 4:
              case "end":
                return _context.stop();
            }
          }, _callee, this);
        }));
        function invoke(_x, _x2, _x3, _x4) {
          return _invoke.apply(this, arguments);
        }
        return invoke;
      }() /** @override */)
    }, {
      key: "beforeSend",
      value: function beforeSend(request) {
        request.body = this._createEnvelope(request._message);
        var headers = request.headers || {};
        var bodySize = (0, get_body_size_1.getBodySize)(request.body, request.headers);
        if (request.method === 'POST' && !('transfer-encoding' in headers) && !('content-length' in headers) && !!bodySize) {
          this._logger.debug("missing 'content-length' header, setting it to: ".concat(bodySize));
          headers['content-length'] = String(bodySize);
        }
        request.headers = headers;
      }
      /** @override **/
    }, {
      key: "isSessionExpired",
      value: function isSessionExpired(response) {
        return response.statusCode === 500 && /<faultcode>[a-zA-Z]+:INVALID_SESSION_ID<\/faultcode>/.test(response.body);
      }
      /** @override **/
    }, {
      key: "parseError",
      value: function parseError(body) {
        var error = lookupValue(body, [/:Envelope$/, /:Body$/, /:Fault$/]);
        return {
          errorCode: error.faultcode,
          message: error.faultstring
        };
      }
      /** @override **/
    }, {
      key: "getResponseBody",
      value: (function () {
        var _getResponseBody = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(response) {
          var body;
          return _regeneratorRuntime().wrap(function _callee2$(_context2) {
            while (1) switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return _get(_getPrototypeOf(SOAP.prototype), "getResponseBody", this).call(this, response);
              case 2:
                body = _context2.sent;
                return _context2.abrupt("return", lookupValue(body, [/:Envelope$/, /:Body$/, /.+/]));
              case 4:
              case "end":
                return _context2.stop();
            }
          }, _callee2, this);
        }));
        function getResponseBody(_x5) {
          return _getResponseBody.apply(this, arguments);
        }
        return getResponseBody;
      }()
      /**
       * @private
       */
      )
    }, {
      key: "_createEnvelope",
      value: function _createEnvelope(message) {
        var header = {};
        var conn = this._conn;
        if (conn.accessToken) {
          header.SessionHeader = {
            sessionId: conn.accessToken
          };
        }
        if (conn._callOptions) {
          header.CallOptions = conn._callOptions;
        }
        return ['<?xml version="1.0" encoding="UTF-8"?>', '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"', ' xmlns:xsd="http://www.w3.org/2001/XMLSchema"', ' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">', '<soapenv:Header xmlns="' + this._xmlns + '">', toXML(header), '</soapenv:Header>', '<soapenv:Body xmlns="' + this._xmlns + '">', toXML(message), '</soapenv:Body>', '</soapenv:Envelope>'].join('');
      }
    }]);
  }(http_api_1["default"]);
  soap$2.SOAP = SOAP;
  soap$2["default"] = SOAP;

  var schema$2 = {};

  /**
   * This file is generated from WSDL file by wsdl2schema.ts.
   * Do not modify directly.
   * To generate the file, run "ts-node path/to/wsdl2schema.ts path/to/wsdl.xml path/to/schema.ts"
   */
  Object.defineProperty(schema$2, "__esModule", {
    value: true
  });
  schema$2.ApiSchemas = void 0;
  schema$2.ApiSchemas = {
    CancelDeployResult: {
      type: 'CancelDeployResult',
      props: {
        done: 'boolean',
        id: 'string'
      }
    },
    DeployResult: {
      type: 'DeployResult',
      props: {
        canceledBy: '?string',
        canceledByName: '?string',
        checkOnly: 'boolean',
        completedDate: '?string',
        createdBy: 'string',
        createdByName: 'string',
        createdDate: 'string',
        details: 'DeployDetails',
        done: 'boolean',
        errorMessage: '?string',
        errorStatusCode: '?string',
        id: 'string',
        ignoreWarnings: 'boolean',
        lastModifiedDate: '?string',
        numberComponentErrors: 'number',
        numberComponentsDeployed: 'number',
        numberComponentsTotal: 'number',
        numberTestErrors: 'number',
        numberTestsCompleted: 'number',
        numberTestsTotal: 'number',
        rollbackOnError: 'boolean',
        runTestsEnabled: 'boolean',
        startDate: '?string',
        stateDetail: '?string',
        status: 'string',
        success: 'boolean'
      }
    },
    DeployDetails: {
      type: 'DeployDetails',
      props: {
        componentFailures: ['DeployMessage'],
        componentSuccesses: ['DeployMessage'],
        retrieveResult: '?RetrieveResult',
        runTestResult: '?RunTestsResult'
      }
    },
    DeployMessage: {
      type: 'DeployMessage',
      props: {
        changed: 'boolean',
        columnNumber: '?number',
        componentType: '?string',
        created: 'boolean',
        createdDate: 'string',
        deleted: 'boolean',
        fileName: 'string',
        fullName: 'string',
        id: '?string',
        lineNumber: '?number',
        problem: '?string',
        problemType: '?string',
        success: 'boolean'
      }
    },
    RetrieveResult: {
      type: 'RetrieveResult',
      props: {
        done: 'boolean',
        errorMessage: '?string',
        errorStatusCode: '?string',
        fileProperties: ['FileProperties'],
        id: 'string',
        messages: ['RetrieveMessage'],
        status: 'string',
        success: 'boolean',
        zipFile: 'string'
      }
    },
    FileProperties: {
      type: 'FileProperties',
      props: {
        createdById: 'string',
        createdByName: 'string',
        createdDate: 'string',
        fileName: 'string',
        fullName: 'string',
        id: 'string',
        lastModifiedById: 'string',
        lastModifiedByName: 'string',
        lastModifiedDate: 'string',
        manageableState: '?string',
        namespacePrefix: '?string',
        type: 'string'
      }
    },
    RetrieveMessage: {
      type: 'RetrieveMessage',
      props: {
        fileName: 'string',
        problem: 'string'
      }
    },
    RunTestsResult: {
      type: 'RunTestsResult',
      props: {
        apexLogId: '?string',
        codeCoverage: ['CodeCoverageResult'],
        codeCoverageWarnings: ['CodeCoverageWarning'],
        failures: ['RunTestFailure'],
        flowCoverage: ['FlowCoverageResult'],
        flowCoverageWarnings: ['FlowCoverageWarning'],
        numFailures: 'number',
        numTestsRun: 'number',
        successes: ['RunTestSuccess'],
        totalTime: 'number'
      }
    },
    CodeCoverageResult: {
      type: 'CodeCoverageResult',
      props: {
        dmlInfo: ['CodeLocation'],
        id: 'string',
        locationsNotCovered: ['CodeLocation'],
        methodInfo: ['CodeLocation'],
        name: 'string',
        namespace: '?string',
        numLocations: 'number',
        numLocationsNotCovered: 'number',
        soqlInfo: ['CodeLocation'],
        soslInfo: ['CodeLocation'],
        type: 'string'
      }
    },
    CodeLocation: {
      type: 'CodeLocation',
      props: {
        column: 'number',
        line: 'number',
        numExecutions: 'number',
        time: 'number'
      }
    },
    CodeCoverageWarning: {
      type: 'CodeCoverageWarning',
      props: {
        id: 'string',
        message: 'string',
        name: '?string',
        namespace: '?string'
      }
    },
    RunTestFailure: {
      type: 'RunTestFailure',
      props: {
        id: 'string',
        message: 'string',
        methodName: '?string',
        name: 'string',
        namespace: '?string',
        packageName: 'string',
        seeAllData: '?boolean',
        stackTrace: '?string',
        time: 'number',
        type: 'string'
      }
    },
    FlowCoverageResult: {
      type: 'FlowCoverageResult',
      props: {
        elementsNotCovered: ['string'],
        flowId: 'string',
        flowName: 'string',
        flowNamespace: '?string',
        numElements: 'number',
        numElementsNotCovered: 'number',
        processType: 'string'
      }
    },
    FlowCoverageWarning: {
      type: 'FlowCoverageWarning',
      props: {
        flowId: '?string',
        flowName: '?string',
        flowNamespace: '?string',
        message: 'string'
      }
    },
    RunTestSuccess: {
      type: 'RunTestSuccess',
      props: {
        id: 'string',
        methodName: 'string',
        name: 'string',
        namespace: '?string',
        seeAllData: '?boolean',
        time: 'number'
      }
    },
    Metadata: {
      type: 'Metadata',
      props: {
        fullName: '?string'
      }
    },
    AccountRelationshipShareRule: {
      type: 'AccountRelationshipShareRule',
      props: {
        accessLevel: 'string',
        accountToCriteriaField: 'string',
        description: '?string',
        entityType: 'string',
        masterLabel: 'string',
        staticFormulaCriteria: '?string',
        type: 'string'
      },
      "extends": 'Metadata'
    },
    AccountSettings: {
      type: 'AccountSettings',
      props: {
        enableAccountHistoryTracking: '?boolean',
        enableAccountInsightsInMobile: '?boolean',
        enableAccountOwnerReport: '?boolean',
        enableAccountTeams: '?boolean',
        enableContactHistoryTracking: '?boolean',
        enableRelateContactToMultipleAccounts: '?boolean',
        showViewHierarchyLink: '?boolean'
      },
      "extends": 'Metadata'
    },
    ActionLinkGroupTemplate: {
      type: 'ActionLinkGroupTemplate',
      props: {
        actionLinkTemplates: ['ActionLinkTemplate'],
        category: 'string',
        executionsAllowed: 'string',
        hoursUntilExpiration: '?number',
        isPublished: 'boolean',
        name: 'string'
      },
      "extends": 'Metadata'
    },
    ActionLinkTemplate: {
      type: 'ActionLinkTemplate',
      props: {
        actionUrl: 'string',
        headers: '?string',
        isConfirmationRequired: 'boolean',
        isGroupDefault: 'boolean',
        label: '?string',
        labelKey: 'string',
        linkType: 'string',
        method: 'string',
        position: 'number',
        requestBody: '?string',
        userAlias: '?string',
        userVisibility: 'string'
      }
    },
    ActionPlanTemplate: {
      type: 'ActionPlanTemplate',
      props: {
        actionPlanTemplateItem: ['ActionPlanTemplateItem'],
        description: '?string',
        name: 'string',
        targetEntityType: 'string',
        uniqueName: 'string'
      },
      "extends": 'Metadata'
    },
    ActionPlanTemplateItem: {
      type: 'ActionPlanTemplateItem',
      props: {
        actionPlanTemplateItemValue: ['ActionPlanTemplateItemValue'],
        displayOrder: '?number',
        isRequired: '?boolean',
        name: 'string',
        uniqueName: 'string'
      }
    },
    ActionPlanTemplateItemValue: {
      type: 'ActionPlanTemplateItemValue',
      props: {
        name: 'string',
        valueFormula: '?string',
        valueLiteral: '?string'
      }
    },
    ActionsSettings: {
      type: 'ActionsSettings',
      props: {
        enableDefaultQuickActionsOn: '?boolean',
        enableMdpEnabled: '?boolean',
        enableThirdPartyActions: '?boolean'
      },
      "extends": 'Metadata'
    },
    ActivitiesSettings: {
      type: 'ActivitiesSettings',
      props: {
        allowUsersToRelateMultipleContactsToTasksAndEvents: '?boolean',
        autoRelateEventAttendees: '?boolean',
        enableActivityReminders: '?boolean',
        enableClickCreateEvents: '?boolean',
        enableDragAndDropScheduling: '?boolean',
        enableEmailTracking: '?boolean',
        enableGroupTasks: '?boolean',
        enableListViewScheduling: '?boolean',
        enableLogNote: '?boolean',
        enableMultidayEvents: '?boolean',
        enableRecurringEvents: '?boolean',
        enableRecurringTasks: '?boolean',
        enableRollUpActivToContactsAcct: '?boolean',
        enableSidebarCalendarShortcut: '?boolean',
        enableSimpleTaskCreateUI: '?boolean',
        enableUNSTaskDelegatedToNotifications: '?boolean',
        enableUserListViewCalendars: '?boolean',
        meetingRequestsLogo: '?string',
        showCustomLogoMeetingRequests: '?boolean',
        showEventDetailsMultiUserCalendar: '?boolean',
        showHomePageHoverLinksForEvents: '?boolean',
        showMyTasksHoverLinks: '?boolean'
      },
      "extends": 'Metadata'
    },
    AddressSettings: {
      type: 'AddressSettings',
      props: {
        countriesAndStates: 'CountriesAndStates'
      },
      "extends": 'Metadata'
    },
    CountriesAndStates: {
      type: 'CountriesAndStates',
      props: {
        countries: ['Country']
      }
    },
    Country: {
      type: 'Country',
      props: {
        active: 'boolean',
        integrationValue: 'string',
        isoCode: 'string',
        label: 'string',
        orgDefault: 'boolean',
        standard: 'boolean',
        states: ['State'],
        visible: 'boolean'
      }
    },
    State: {
      type: 'State',
      props: {
        active: 'boolean',
        integrationValue: 'string',
        isoCode: 'string',
        label: 'string',
        standard: 'boolean',
        visible: 'boolean'
      }
    },
    AnalyticSnapshot: {
      type: 'AnalyticSnapshot',
      props: {
        description: '?string',
        groupColumn: '?string',
        mappings: ['AnalyticSnapshotMapping'],
        name: 'string',
        runningUser: '?string',
        sourceReport: 'string',
        targetObject: 'string'
      },
      "extends": 'Metadata'
    },
    AnalyticSnapshotMapping: {
      type: 'AnalyticSnapshotMapping',
      props: {
        aggregateType: '?string',
        sourceField: 'string',
        sourceType: 'string',
        targetField: 'string'
      }
    },
    AnalyticsSettings: {
      type: 'AnalyticsSettings',
      props: {
        alwaysGenPreviews: '?boolean',
        analyticsAdoptionMetadata: '?boolean',
        canAccessAnalyticsViaAPI: '?boolean',
        canAnnotateDashboards: '?boolean',
        canEnableSavedView: '?boolean',
        canExploreDataConversationally: '?boolean',
        canShareAppsWithCommunities: '?boolean',
        canSubscribeDashboardWidgets: '?boolean',
        canViewThumbnailAssets: '?boolean',
        enableAnalyticsSubtotals: '?boolean',
        enableAutoCompleteCombo: '?boolean',
        enableDashboardComponentSnapshot: '?boolean',
        enableDashboardFlexiTable: '?boolean',
        enableEmailReportsToPortalUsers: '?boolean',
        enableFloatingReportHeaders: '?boolean',
        enableInsights: '?boolean',
        enableLightningReportBuilder: '?boolean',
        enableLotusNotesImages: '?boolean',
        enableMassEnableReportBuilder: '?boolean',
        enableNewChartsEngine: '?boolean',
        enablePowerInsights: '?boolean',
        enableRemoveFooterForRepDisplay: '?boolean',
        enableRemoveFooterFromRepExp: '?boolean',
        enableReportFieldToFieldPref: '?boolean',
        enableReportUniqueRowCountPref: '?boolean',
        enableSFXJoinedReportsEnable: '?boolean',
        enableSmartDataDiscovery: '?boolean',
        enableUseOldChartsLookAndFeel: '?boolean',
        enableWaveReplication: '?boolean',
        enableWaveSharingInheritance: '?boolean',
        enableWaveTemplate: '?boolean',
        enableWaveTrendedDatasetCleanup: '?boolean'
      },
      "extends": 'Metadata'
    },
    AnimationRule: {
      type: 'AnimationRule',
      props: {
        animationFrequency: 'string',
        developerName: 'string',
        isActive: 'boolean',
        masterLabel: 'string',
        recordTypeContext: 'string',
        recordTypeName: '?string',
        sobjectType: 'string',
        targetField: 'string',
        targetFieldChangeToValues: 'string'
      },
      "extends": 'Metadata'
    },
    ApexSettings: {
      type: 'ApexSettings',
      props: {
        enableAggregateCodeCoverageOnly: '?boolean',
        enableApexAccessRightsPref: '?boolean',
        enableApexApprovalLockUnlock: '?boolean',
        enableApexCtrlImplicitWithSharingPref: '?boolean',
        enableApexPropertyGetterPref: '?boolean',
        enableAuraApexCtrlAuthUserAccessCheckPref: '?boolean',
        enableAuraApexCtrlGuestUserAccessCheckPref: '?boolean',
        enableCompileOnDeploy: '?boolean',
        enableDisableParallelApexTesting: '?boolean',
        enableDoNotEmailDebugLog: '?boolean',
        enableGaplessTestAutoNum: '?boolean',
        enableMngdCtrlActionAccessPref: '?boolean',
        enableNonCertifiedApexMdCrud: '?boolean'
      },
      "extends": 'Metadata'
    },
    ApexTestSuite: {
      type: 'ApexTestSuite',
      props: {
        testClassName: ['string']
      },
      "extends": 'Metadata'
    },
    AppExperienceSettings: {
      type: 'AppExperienceSettings',
      props: {
        doesHideAllAppsInAppLauncher: '?boolean'
      },
      "extends": 'Metadata'
    },
    AppMenu: {
      type: 'AppMenu',
      props: {
        appMenuItems: ['AppMenuItem']
      },
      "extends": 'Metadata'
    },
    AppMenuItem: {
      type: 'AppMenuItem',
      props: {
        name: 'string',
        type: 'string'
      }
    },
    AppointmentSchedulingPolicy: {
      type: 'AppointmentSchedulingPolicy',
      props: {
        appointmentStartTimeInterval: 'string',
        masterLabel: 'string',
        shouldConsiderCalendarEvents: 'boolean',
        shouldEnforceExcludedResource: 'boolean',
        shouldEnforceRequiredResource: 'boolean',
        shouldMatchSkill: 'boolean',
        shouldMatchSkillLevel: 'boolean',
        shouldRespectVisitingHours: 'boolean',
        shouldUsePrimaryMembers: 'boolean',
        shouldUseSecondaryMembers: 'boolean'
      },
      "extends": 'Metadata'
    },
    ApprovalProcess: {
      type: 'ApprovalProcess',
      props: {
        active: 'boolean',
        allowRecall: '?boolean',
        allowedSubmitters: ['ApprovalSubmitter'],
        approvalPageFields: '?ApprovalPageField',
        approvalStep: ['ApprovalStep'],
        description: '?string',
        emailTemplate: '?string',
        enableMobileDeviceAccess: '?boolean',
        entryCriteria: '?ApprovalEntryCriteria',
        finalApprovalActions: '?ApprovalAction',
        finalApprovalRecordLock: '?boolean',
        finalRejectionActions: '?ApprovalAction',
        finalRejectionRecordLock: '?boolean',
        initialSubmissionActions: '?ApprovalAction',
        label: 'string',
        nextAutomatedApprover: '?NextAutomatedApprover',
        postTemplate: '?string',
        recallActions: '?ApprovalAction',
        recordEditability: 'string',
        showApprovalHistory: '?boolean'
      },
      "extends": 'Metadata'
    },
    ApprovalSubmitter: {
      type: 'ApprovalSubmitter',
      props: {
        submitter: '?string',
        type: 'string'
      }
    },
    ApprovalPageField: {
      type: 'ApprovalPageField',
      props: {
        field: ['string']
      }
    },
    ApprovalStep: {
      type: 'ApprovalStep',
      props: {
        allowDelegate: '?boolean',
        approvalActions: '?ApprovalAction',
        assignedApprover: 'ApprovalStepApprover',
        description: '?string',
        entryCriteria: '?ApprovalEntryCriteria',
        ifCriteriaNotMet: '?string',
        label: 'string',
        name: 'string',
        rejectBehavior: '?ApprovalStepRejectBehavior',
        rejectionActions: '?ApprovalAction'
      }
    },
    ApprovalAction: {
      type: 'ApprovalAction',
      props: {
        action: ['WorkflowActionReference']
      }
    },
    WorkflowActionReference: {
      type: 'WorkflowActionReference',
      props: {
        name: 'string',
        type: 'string'
      }
    },
    ApprovalStepApprover: {
      type: 'ApprovalStepApprover',
      props: {
        approver: ['Approver'],
        whenMultipleApprovers: '?string'
      }
    },
    Approver: {
      type: 'Approver',
      props: {
        name: '?string',
        type: 'string'
      }
    },
    ApprovalEntryCriteria: {
      type: 'ApprovalEntryCriteria',
      props: {
        booleanFilter: '?string',
        criteriaItems: ['FilterItem'],
        formula: '?string'
      }
    },
    FilterItem: {
      type: 'FilterItem',
      props: {
        field: 'string',
        operation: 'string',
        value: '?string',
        valueField: '?string'
      }
    },
    DuplicateRuleFilterItem: {
      type: 'DuplicateRuleFilterItem',
      props: {
        sortOrder: 'number',
        table: 'string'
      },
      "extends": 'FilterItem'
    },
    ApprovalStepRejectBehavior: {
      type: 'ApprovalStepRejectBehavior',
      props: {
        type: 'string'
      }
    },
    NextAutomatedApprover: {
      type: 'NextAutomatedApprover',
      props: {
        useApproverFieldOfRecordOwner: '?boolean',
        userHierarchyField: 'string'
      }
    },
    ArchiveSettings: {
      type: 'ArchiveSettings',
      props: {
        enableEntityArchivingEnabled: '?boolean'
      },
      "extends": 'Metadata'
    },
    AssignmentRule: {
      type: 'AssignmentRule',
      props: {
        active: '?boolean',
        ruleEntry: ['RuleEntry']
      },
      "extends": 'Metadata'
    },
    RuleEntry: {
      type: 'RuleEntry',
      props: {
        assignedTo: '?string',
        assignedToType: '?string',
        booleanFilter: '?string',
        businessHours: '?string',
        businessHoursSource: '?string',
        criteriaItems: ['FilterItem'],
        disableEscalationWhenModified: '?boolean',
        escalationAction: ['EscalationAction'],
        escalationStartTime: '?string',
        formula: '?string',
        notifyCcRecipients: '?boolean',
        overrideExistingTeams: '?boolean',
        replyToEmail: '?string',
        senderEmail: '?string',
        senderName: '?string',
        team: ['string'],
        template: '?string'
      }
    },
    EscalationAction: {
      type: 'EscalationAction',
      props: {
        assignedTo: '?string',
        assignedToTemplate: '?string',
        assignedToType: '?string',
        minutesToEscalation: '?number',
        notifyCaseOwner: '?boolean',
        notifyEmail: ['string'],
        notifyTo: '?string',
        notifyToTemplate: '?string'
      }
    },
    AssignmentRules: {
      type: 'AssignmentRules',
      props: {
        assignmentRule: ['AssignmentRule']
      },
      "extends": 'Metadata'
    },
    Audience: {
      type: 'Audience',
      props: {
        audienceName: 'string',
        container: 'string',
        criteria: 'AudienceCriteria',
        description: '?string',
        formula: '?string',
        formulaFilterType: '?string',
        targets: '?PersonalizationTargetInfos'
      },
      "extends": 'Metadata'
    },
    AudienceCriteria: {
      type: 'AudienceCriteria',
      props: {
        criterion: ['AudienceCriterion']
      }
    },
    AudienceCriterion: {
      type: 'AudienceCriterion',
      props: {
        criteriaNumber: '?number',
        criterionValue: '?AudienceCriteriaValue',
        operator: '?string',
        type: 'string'
      }
    },
    AudienceCriteriaValue: {
      type: 'AudienceCriteriaValue',
      props: {
        city: '?string',
        country: '?string',
        domain: '?string',
        entityField: '?string',
        entityType: '?string',
        fieldValue: '?string',
        isEnabled: '?string',
        permissionName: '?string',
        permissionType: '?string',
        profile: '?string',
        subdivision: '?string'
      }
    },
    PersonalizationTargetInfos: {
      type: 'PersonalizationTargetInfos',
      props: {
        target: ['PersonalizationTargetInfo']
      }
    },
    PersonalizationTargetInfo: {
      type: 'PersonalizationTargetInfo',
      props: {
        groupName: 'string',
        priority: '?number',
        targetType: 'string',
        targetValue: 'string'
      }
    },
    AuraDefinitionBundle: {
      type: 'AuraDefinitionBundle',
      props: {
        SVGContent: '?string',
        apiVersion: '?number',
        controllerContent: '?string',
        description: '?string',
        designContent: '?string',
        documentationContent: '?string',
        helperContent: '?string',
        markup: '?string',
        modelContent: '?string',
        packageVersions: ['PackageVersion'],
        rendererContent: '?string',
        styleContent: '?string',
        testsuiteContent: '?string',
        type: '?string'
      },
      "extends": 'Metadata'
    },
    PackageVersion: {
      type: 'PackageVersion',
      props: {
        majorNumber: 'number',
        minorNumber: 'number',
        namespace: 'string'
      }
    },
    AuthProvider: {
      type: 'AuthProvider',
      props: {
        appleTeam: '?string',
        authorizeUrl: '?string',
        consumerKey: '?string',
        consumerSecret: '?string',
        customMetadataTypeRecord: '?string',
        defaultScopes: '?string',
        ecKey: '?string',
        errorUrl: '?string',
        executionUser: '?string',
        friendlyName: 'string',
        iconUrl: '?string',
        idTokenIssuer: '?string',
        includeOrgIdInIdentifier: '?boolean',
        linkKickoffUrl: '?string',
        logoutUrl: '?string',
        oauthKickoffUrl: '?string',
        plugin: '?string',
        portal: '?string',
        providerType: 'string',
        registrationHandler: '?string',
        sendAccessTokenInHeader: '?boolean',
        sendClientCredentialsInHeader: '?boolean',
        sendSecretInApis: '?boolean',
        ssoKickoffUrl: '?string',
        tokenUrl: '?string',
        userInfoUrl: '?string'
      },
      "extends": 'Metadata'
    },
    AutoResponseRule: {
      type: 'AutoResponseRule',
      props: {
        active: '?boolean',
        ruleEntry: ['RuleEntry']
      },
      "extends": 'Metadata'
    },
    AutoResponseRules: {
      type: 'AutoResponseRules',
      props: {
        autoResponseRule: ['AutoResponseRule']
      },
      "extends": 'Metadata'
    },
    BlockchainSettings: {
      type: 'BlockchainSettings',
      props: {
        enableBcp: '?boolean',
        enableBcpCoin: '?boolean'
      },
      "extends": 'Metadata'
    },
    Bot: {
      type: 'Bot',
      props: {
        botMlDomain: '?LocalMlDomain',
        botUser: '?string',
        botVersions: ['BotVersion'],
        contextVariables: ['ConversationContextVariable'],
        description: '?string',
        label: '?string'
      },
      "extends": 'Metadata'
    },
    LocalMlDomain: {
      type: 'LocalMlDomain',
      props: {
        label: 'string',
        mlIntents: ['MlIntent'],
        mlSlotClasses: ['MlSlotClass'],
        name: 'string'
      }
    },
    MlIntent: {
      type: 'MlIntent',
      props: {
        description: '?string',
        developerName: 'string',
        label: 'string',
        mlIntentUtterances: ['MlIntentUtterance'],
        relatedMlIntents: ['MlRelatedIntent']
      }
    },
    MlIntentUtterance: {
      type: 'MlIntentUtterance',
      props: {
        utterance: 'string'
      }
    },
    MlRelatedIntent: {
      type: 'MlRelatedIntent',
      props: {
        relatedMlIntent: 'string'
      }
    },
    MlSlotClass: {
      type: 'MlSlotClass',
      props: {
        dataType: 'string',
        description: '?string',
        developerName: 'string',
        extractionRegex: '?string',
        extractionType: '?string',
        label: 'string',
        mlSlotClassValues: ['MlSlotClassValue']
      }
    },
    MlSlotClassValue: {
      type: 'MlSlotClassValue',
      props: {
        synonymGroup: '?SynonymGroup',
        value: 'string'
      }
    },
    SynonymGroup: {
      type: 'SynonymGroup',
      props: {
        languages: ['string'],
        terms: ['string']
      }
    },
    BotVersion: {
      type: 'BotVersion',
      props: {
        botDialogGroups: ['BotDialogGroup'],
        botDialogs: ['BotDialog'],
        conversationVariables: ['ConversationVariable'],
        entryDialog: 'string',
        mainMenuDialog: 'string',
        responseDelayMilliseconds: '?number'
      },
      "extends": 'Metadata'
    },
    BotDialogGroup: {
      type: 'BotDialogGroup',
      props: {
        description: '?string',
        developerName: 'string',
        label: 'string'
      }
    },
    BotDialog: {
      type: 'BotDialog',
      props: {
        botDialogGroup: '?string',
        botSteps: ['BotStep'],
        description: '?string',
        developerName: 'string',
        label: 'string',
        mlIntent: '?string',
        mlIntentTrainingEnabled: '?boolean',
        showInFooterMenu: '?boolean'
      }
    },
    BotStep: {
      type: 'BotStep',
      props: {
        booleanFilter: '?string',
        botInvocation: '?BotInvocation',
        botMessages: ['BotMessage'],
        botNavigation: '?BotNavigation',
        botStepConditions: ['BotStepCondition'],
        botSteps: ['BotStep'],
        botVariableOperation: '?BotVariableOperation',
        conversationRecordLookup: '?ConversationRecordLookup',
        conversationSystemMessage: '?ConversationSystemMessage',
        type: 'string'
      }
    },
    BotInvocation: {
      type: 'BotInvocation',
      props: {
        invocationActionName: '?string',
        invocationActionType: '?string',
        invocationMappings: ['BotInvocationMapping']
      }
    },
    BotInvocationMapping: {
      type: 'BotInvocationMapping',
      props: {
        parameterName: 'string',
        type: 'string',
        value: '?string',
        variableName: '?string',
        variableType: '?string'
      }
    },
    BotMessage: {
      type: 'BotMessage',
      props: {
        message: 'string'
      }
    },
    BotNavigation: {
      type: 'BotNavigation',
      props: {
        botNavigationLinks: ['BotNavigationLink'],
        type: 'string'
      }
    },
    BotNavigationLink: {
      type: 'BotNavigationLink',
      props: {
        label: '?string',
        targetBotDialog: 'string'
      }
    },
    BotStepCondition: {
      type: 'BotStepCondition',
      props: {
        leftOperandName: 'string',
        leftOperandType: 'string',
        operatorType: 'string',
        rightOperandValue: '?string'
      }
    },
    BotVariableOperation: {
      type: 'BotVariableOperation',
      props: {
        botInvocation: '?BotInvocation',
        botMessages: ['BotMessage'],
        botQuickReplyOptions: ['BotQuickReplyOption'],
        botVariableOperands: ['BotVariableOperand'],
        invalidInputBotNavigation: '?BotNavigation',
        quickReplyOptionTemplate: '?string',
        quickReplyType: '?string',
        quickReplyWidgetType: '?string',
        sourceVariableName: '?string',
        sourceVariableType: '?string',
        type: 'string'
      }
    },
    BotQuickReplyOption: {
      type: 'BotQuickReplyOption',
      props: {
        literalValue: 'string'
      }
    },
    BotVariableOperand: {
      type: 'BotVariableOperand',
      props: {
        disableAutoFill: '?boolean',
        sourceName: '?string',
        sourceType: '?string',
        sourceValue: '?string',
        targetName: 'string',
        targetType: 'string'
      }
    },
    ConversationRecordLookup: {
      type: 'ConversationRecordLookup',
      props: {
        SObjectType: 'string',
        lookupFields: ['ConversationRecordLookupField'],
        maxLookupResults: 'number',
        sourceVariableName: 'string',
        sourceVariableType: 'string',
        targetVariableName: 'string'
      }
    },
    ConversationRecordLookupField: {
      type: 'ConversationRecordLookupField',
      props: {
        fieldName: 'string'
      }
    },
    ConversationSystemMessage: {
      type: 'ConversationSystemMessage',
      props: {
        systemMessageMappings: ['ConversationSystemMessageMapping'],
        type: 'string'
      }
    },
    ConversationSystemMessageMapping: {
      type: 'ConversationSystemMessageMapping',
      props: {
        mappingType: 'string',
        parameterType: 'string',
        variableName: 'string'
      }
    },
    ConversationVariable: {
      type: 'ConversationVariable',
      props: {
        SObjectType: '?string',
        collectionType: '?string',
        dataType: 'string',
        developerName: 'string',
        label: 'string'
      }
    },
    ConversationContextVariable: {
      type: 'ConversationContextVariable',
      props: {
        SObjectType: '?string',
        contextVariableMappings: ['ConversationContextVariableMapping'],
        dataType: 'string',
        developerName: 'string',
        label: 'string'
      }
    },
    ConversationContextVariableMapping: {
      type: 'ConversationContextVariableMapping',
      props: {
        SObjectType: 'string',
        fieldName: 'string',
        messageType: 'string'
      }
    },
    BotSettings: {
      type: 'BotSettings',
      props: {
        enableBots: '?boolean'
      },
      "extends": 'Metadata'
    },
    BrandingSet: {
      type: 'BrandingSet',
      props: {
        brandingSetProperty: ['BrandingSetProperty'],
        description: '?string',
        masterLabel: 'string',
        type: '?string'
      },
      "extends": 'Metadata'
    },
    BrandingSetProperty: {
      type: 'BrandingSetProperty',
      props: {
        propertyName: 'string',
        propertyValue: '?string'
      }
    },
    BusinessHoursEntry: {
      type: 'BusinessHoursEntry',
      props: {
        active: '?boolean',
        "default": 'boolean',
        fridayEndTime: '?string',
        fridayStartTime: '?string',
        mondayEndTime: '?string',
        mondayStartTime: '?string',
        name: '?string',
        saturdayEndTime: '?string',
        saturdayStartTime: '?string',
        sundayEndTime: '?string',
        sundayStartTime: '?string',
        thursdayEndTime: '?string',
        thursdayStartTime: '?string',
        timeZoneId: '?string',
        tuesdayEndTime: '?string',
        tuesdayStartTime: '?string',
        wednesdayEndTime: '?string',
        wednesdayStartTime: '?string'
      },
      "extends": 'Metadata'
    },
    BusinessHoursSettings: {
      type: 'BusinessHoursSettings',
      props: {
        businessHours: ['BusinessHoursEntry'],
        holidays: ['Holiday']
      },
      "extends": 'Metadata'
    },
    Holiday: {
      type: 'Holiday',
      props: {
        activityDate: '?string',
        businessHours: ['string'],
        description: '?string',
        endTime: '?string',
        isRecurring: '?boolean',
        name: '?string',
        recurrenceDayOfMonth: '?number',
        recurrenceDayOfWeek: ['string'],
        recurrenceDayOfWeekMask: '?number',
        recurrenceEndDate: '?string',
        recurrenceInstance: '?string',
        recurrenceInterval: '?number',
        recurrenceMonthOfYear: '?string',
        recurrenceStartDate: '?string',
        recurrenceType: '?string',
        startTime: '?string'
      }
    },
    BusinessProcess: {
      type: 'BusinessProcess',
      props: {
        description: '?string',
        isActive: '?boolean',
        values: ['PicklistValue']
      },
      "extends": 'Metadata'
    },
    PicklistValue: {
      type: 'PicklistValue',
      props: {
        color: '?string',
        "default": 'boolean',
        description: '?string',
        isActive: '?boolean',
        allowEmail: '?boolean',
        closed: '?boolean',
        controllingFieldValues: ['string'],
        converted: '?boolean',
        cssExposed: '?boolean',
        forecastCategory: '?string',
        highPriority: '?boolean',
        probability: '?number',
        reverseRole: '?string',
        reviewed: '?boolean',
        won: '?boolean'
      },
      "extends": 'Metadata'
    },
    CMSConnectSource: {
      type: 'CMSConnectSource',
      props: {
        cmsConnectAsset: ['CMSConnectAsset'],
        cmsConnectLanguage: ['CMSConnectLanguage'],
        cmsConnectPersonalization: '?CMSConnectPersonalization',
        cmsConnectResourceType: ['CMSConnectResourceType'],
        connectionType: 'string',
        cssScope: '?string',
        developerName: 'string',
        languageEnabled: '?string',
        masterLabel: 'string',
        namedCredential: '?string',
        personalizationEnabled: '?string',
        rootPath: '?string',
        sortOrder: 'number',
        status: 'string',
        type: 'string',
        websiteUrl: '?string'
      },
      "extends": 'Metadata'
    },
    CMSConnectAsset: {
      type: 'CMSConnectAsset',
      props: {
        assetPath: 'string',
        assetType: 'string',
        sortOrder: 'number'
      }
    },
    CMSConnectLanguage: {
      type: 'CMSConnectLanguage',
      props: {
        cmsLanguage: 'string',
        language: 'string'
      }
    },
    CMSConnectPersonalization: {
      type: 'CMSConnectPersonalization',
      props: {
        connectorPage: 'string',
        connectorPageAsset: 'string'
      }
    },
    CMSConnectResourceType: {
      type: 'CMSConnectResourceType',
      props: {
        cmsConnectResourceDefinition: ['CMSConnectResourceDefinition'],
        developerName: 'string',
        masterLabel: 'string',
        resourceType: 'string'
      }
    },
    CMSConnectResourceDefinition: {
      type: 'CMSConnectResourceDefinition',
      props: {
        developerName: 'string',
        masterLabel: 'string',
        options: 'number',
        payloadType: 'string',
        resourceIdPath: '?string',
        resourceNamePath: '?string',
        resourcePath: 'string',
        rootNodePath: '?string'
      }
    },
    CallCenter: {
      type: 'CallCenter',
      props: {
        adapterUrl: '?string',
        customSettings: '?string',
        displayName: 'string',
        displayNameLabel: 'string',
        internalNameLabel: 'string',
        sections: ['CallCenterSection'],
        version: '?string'
      },
      "extends": 'Metadata'
    },
    CallCenterSection: {
      type: 'CallCenterSection',
      props: {
        items: ['CallCenterItem'],
        label: 'string',
        name: 'string'
      }
    },
    CallCenterItem: {
      type: 'CallCenterItem',
      props: {
        label: 'string',
        name: 'string',
        value: 'string'
      }
    },
    CampaignInfluenceModel: {
      type: 'CampaignInfluenceModel',
      props: {
        isActive: '?boolean',
        isDefaultModel: 'boolean',
        isModelLocked: 'boolean',
        modelDescription: '?string',
        name: 'string',
        recordPreference: '?string'
      },
      "extends": 'Metadata'
    },
    CampaignSettings: {
      type: 'CampaignSettings',
      props: {
        enableAutoCampInfluenceDisabled: '?boolean',
        enableB2bmaCampaignInfluence2: '?boolean',
        enableCampaignHistoryTrackEnabled: '?boolean',
        enableCampaignInfluence2: '?boolean',
        enableCampaignMemberTWCF: '?boolean',
        enableSuppressNoValueCI2: '?boolean'
      },
      "extends": 'Metadata'
    },
    CanvasMetadata: {
      type: 'CanvasMetadata',
      props: {
        accessMethod: 'string',
        canvasOptions: '?string',
        canvasUrl: 'string',
        lifecycleClass: '?string',
        locationOptions: '?string',
        samlInitiationMethod: '?string'
      },
      "extends": 'Metadata'
    },
    CaseClassificationSettings: {
      type: 'CaseClassificationSettings',
      props: {
        caseClassificationRecommendations: '?boolean',
        reRunAttributeBasedRules: '?boolean',
        runAssignmentRules: '?boolean'
      },
      "extends": 'Metadata'
    },
    CaseSettings: {
      type: 'CaseSettings',
      props: {
        caseAssignNotificationTemplate: '?string',
        caseAutoProcUser: '?boolean',
        caseCloseNotificationTemplate: '?string',
        caseCommentNotificationTemplate: '?string',
        caseCreateNotificationTemplate: '?string',
        caseFeedItemSettings: ['FeedItemSettings'],
        caseFeedReadUnreadLtng: '?boolean',
        caseMergeInLightning: '?boolean',
        closeCaseThroughStatusChange: '?boolean',
        defaultCaseFeedLayoutOn: '?boolean',
        defaultCaseOwner: '?string',
        defaultCaseOwnerType: '?string',
        defaultCaseUser: '?string',
        emailActionDefaultsHandlerClass: '?string',
        emailToCase: '?EmailToCaseSettings',
        enableCaseFeed: '?boolean',
        enableCollapseEmailThread: '?boolean',
        enableDraftEmails: '?boolean',
        enableEarlyEscalationRuleTriggers: '?boolean',
        enableEmailActionDefaultsHandler: '?boolean',
        enableSuggestedArticlesApplication: '?boolean',
        enableSuggestedArticlesCustomerPortal: '?boolean',
        enableSuggestedArticlesPartnerPortal: '?boolean',
        enableSuggestedSolutions: '?boolean',
        escalateCaseBefore: '?boolean',
        genericMessageEnabled: '?boolean',
        keepRecordTypeOnAssignmentRule: '?boolean',
        notifyContactOnCaseComment: '?boolean',
        notifyDefaultCaseOwner: '?boolean',
        notifyOwnerOnCaseComment: '?boolean',
        notifyOwnerOnCaseOwnerChange: '?boolean',
        predictiveSupportEnabled: '?boolean',
        showEmailAttachmentsInCaseAttachmentsRL: '?boolean',
        showFewerCloseActions: '?boolean',
        systemUserEmail: '?string',
        useSystemEmailAddress: '?boolean',
        useSystemUserAsDefaultCaseUser: '?boolean',
        webToCase: '?WebToCaseSettings'
      },
      "extends": 'Metadata'
    },
    FeedItemSettings: {
      type: 'FeedItemSettings',
      props: {
        characterLimit: '?number',
        displayFormat: '?string',
        feedItemType: 'string'
      }
    },
    EmailToCaseSettings: {
      type: 'EmailToCaseSettings',
      props: {
        enableE2CAttachmentAsFile: '?boolean',
        enableE2CSourceTracking: '?boolean',
        enableEmailToCase: '?boolean',
        enableHtmlEmail: '?boolean',
        enableOnDemandEmailToCase: '?boolean',
        enableThreadIDInBody: '?boolean',
        enableThreadIDInSubject: '?boolean',
        notifyOwnerOnNewCaseEmail: '?boolean',
        overEmailLimitAction: '?string',
        preQuoteSignature: '?boolean',
        routingAddresses: ['EmailToCaseRoutingAddress'],
        unauthorizedSenderAction: '?string'
      }
    },
    EmailToCaseRoutingAddress: {
      type: 'EmailToCaseRoutingAddress',
      props: {
        addressType: '?string',
        authorizedSenders: '?string',
        caseOrigin: '?string',
        caseOwner: '?string',
        caseOwnerType: '?string',
        casePriority: '?string',
        createTask: '?boolean',
        emailAddress: '?string',
        emailServicesAddress: '?string',
        isVerified: '?boolean',
        routingName: '?string',
        saveEmailHeaders: '?boolean',
        taskStatus: '?string'
      }
    },
    WebToCaseSettings: {
      type: 'WebToCaseSettings',
      props: {
        caseOrigin: '?string',
        defaultResponseTemplate: '?string',
        enableWebToCase: '?boolean'
      }
    },
    CaseSubjectParticle: {
      type: 'CaseSubjectParticle',
      props: {
        index: 'number',
        textField: '?string',
        type: 'string'
      },
      "extends": 'Metadata'
    },
    ChannelLayout: {
      type: 'ChannelLayout',
      props: {
        enabledChannels: ['string'],
        label: 'string',
        layoutItems: ['ChannelLayoutItem'],
        recordType: '?string'
      },
      "extends": 'Metadata'
    },
    ChannelLayoutItem: {
      type: 'ChannelLayoutItem',
      props: {
        field: 'string'
      }
    },
    ChatterAnswersSettings: {
      type: 'ChatterAnswersSettings',
      props: {
        emailFollowersOnBestAnswer: '?boolean',
        emailFollowersOnReply: '?boolean',
        emailOwnerOnPrivateReply: '?boolean',
        emailOwnerOnReply: '?boolean',
        enableAnswerViaEmail: '?boolean',
        enableChatterAnswers: 'boolean',
        enableFacebookSSO: '?boolean',
        enableInlinePublisher: '?boolean',
        enableReputation: '?boolean',
        enableRichTextEditor: '?boolean',
        facebookAuthProvider: '?string',
        showInPortals: '?boolean'
      },
      "extends": 'Metadata'
    },
    ChatterEmailsMDSettings: {
      type: 'ChatterEmailsMDSettings',
      props: {
        enableChatterDigestEmailsApiOnly: '?boolean',
        enableChatterEmailAttachment: '?boolean',
        enableCollaborationEmail: '?boolean',
        enableDisplayAppDownloadBadges: '?boolean',
        enableEmailReplyToChatter: '?boolean',
        enableEmailToChatter: '?boolean'
      },
      "extends": 'Metadata'
    },
    ChatterExtension: {
      type: 'ChatterExtension',
      props: {
        compositionComponent: 'string',
        description: 'string',
        extensionName: 'string',
        headerText: '?string',
        hoverText: '?string',
        icon: 'string',
        isProtected: '?boolean',
        masterLabel: 'string',
        renderComponent: 'string',
        type: 'string'
      },
      "extends": 'Metadata'
    },
    ChatterSettings: {
      type: 'ChatterSettings',
      props: {
        allowChatterGroupArchiving: '?boolean',
        allowRecordsInChatterGroup: '?boolean',
        allowSharingInChatterGroup: '?boolean',
        enableApprovalRequest: '?boolean',
        enableChatter: '?boolean',
        enableChatterEmoticons: '?boolean',
        enableFeedEdit: '?boolean',
        enableFeedPinning: '?boolean',
        enableFeedsDraftPosts: '?boolean',
        enableFeedsRichText: '?boolean',
        enableInviteCsnUsers: '?boolean',
        enableOutOfOfficeEnabledPref: '?boolean',
        enableRichLinkPreviewsInFeed: '?boolean',
        enableTodayRecsInFeed: '?boolean',
        unlistedGroupsEnabled: '?boolean'
      },
      "extends": 'Metadata'
    },
    CleanDataService: {
      type: 'CleanDataService',
      props: {
        cleanRules: ['CleanRule'],
        description: 'string',
        masterLabel: 'string',
        matchEngine: 'string'
      },
      "extends": 'Metadata'
    },
    CleanRule: {
      type: 'CleanRule',
      props: {
        bulkEnabled: 'boolean',
        bypassTriggers: 'boolean',
        bypassWorkflow: 'boolean',
        description: 'string',
        developerName: 'string',
        fieldMappings: ['FieldMapping'],
        masterLabel: 'string',
        matchRule: 'string',
        sourceSobjectType: 'string',
        status: 'string',
        targetSobjectType: 'string'
      }
    },
    FieldMapping: {
      type: 'FieldMapping',
      props: {
        SObjectType: 'string',
        developerName: 'string',
        fieldMappingRows: ['FieldMappingRow'],
        masterLabel: 'string'
      }
    },
    FieldMappingRow: {
      type: 'FieldMappingRow',
      props: {
        SObjectType: 'string',
        fieldMappingFields: ['FieldMappingField'],
        fieldName: 'string',
        mappingOperation: 'string'
      }
    },
    FieldMappingField: {
      type: 'FieldMappingField',
      props: {
        dataServiceField: 'string',
        dataServiceObjectName: 'string',
        priority: 'number'
      }
    },
    CommandAction: {
      type: 'CommandAction',
      props: {
        actionType: 'string',
        description: '?string',
        intents: ['CommandActionIntent'],
        label: 'string',
        parameters: ['CommandActionParam'],
        responseTemplates: ['CommandActionResponse'],
        target: '?string'
      },
      "extends": 'Metadata'
    },
    CommandActionIntent: {
      type: 'CommandActionIntent',
      props: {
        phrase: 'string',
        responseTemplates: ['CommandActionResponse']
      }
    },
    CommandActionResponse: {
      type: 'CommandActionResponse',
      props: {
        template: 'string'
      }
    },
    CommandActionParam: {
      type: 'CommandActionParam',
      props: {
        defaultValue: '?string',
        description: '?string',
        name: 'string',
        required: '?boolean',
        type: 'string'
      }
    },
    CommunitiesSettings: {
      type: 'CommunitiesSettings',
      props: {
        canModerateAllFeedPosts: '?boolean',
        canModerateInternalFeedPosts: '?boolean',
        embeddedVisualforcePages: '?boolean',
        enableCommunityWorkspaces: '?boolean',
        enableCspContactVisibilityPref: '?boolean',
        enableCspNotesOnAccConPref: '?boolean',
        enableEnablePRM: '?boolean',
        enableExternalAccHierPref: '?boolean',
        enableGuestRecordReassignOrgPref: '?boolean',
        enableInviteChatterGuestEnabled: '?boolean',
        enableNetPortalUserReportOpts: '?boolean',
        enableNetworksEnabled: '?boolean',
        enableOotbProfExtUserOpsEnable: '?boolean',
        enablePRMAccRelPref: '?boolean',
        enablePowerCustomerCaseStatus: '?boolean',
        enableRelaxPartnerAccountFieldPref: '?boolean',
        enableUsernameUniqForOrgPref: '?boolean'
      },
      "extends": 'Metadata'
    },
    Community: {
      type: 'Community',
      props: {
        active: '?boolean',
        chatterAnswersFacebookSsoUrl: '?string',
        communityFeedPage: '?string',
        dataCategoryName: '?string',
        description: '?string',
        emailFooterDocument: '?string',
        emailHeaderDocument: '?string',
        emailNotificationUrl: '?string',
        enableChatterAnswers: '?boolean',
        enablePrivateQuestions: '?boolean',
        expertsGroup: '?string',
        portal: '?string',
        reputationLevels: '?ReputationLevels',
        showInPortal: '?boolean',
        site: '?string'
      },
      "extends": 'Metadata'
    },
    ReputationLevels: {
      type: 'ReputationLevels',
      props: {
        chatterAnswersReputationLevels: ['ChatterAnswersReputationLevel'],
        ideaReputationLevels: ['IdeaReputationLevel']
      }
    },
    ChatterAnswersReputationLevel: {
      type: 'ChatterAnswersReputationLevel',
      props: {
        name: 'string',
        value: 'number'
      }
    },
    IdeaReputationLevel: {
      type: 'IdeaReputationLevel',
      props: {
        name: 'string',
        value: 'number'
      }
    },
    CommunityTemplateDefinition: {
      type: 'CommunityTemplateDefinition',
      props: {
        baseTemplate: '?string',
        bundlesInfo: ['CommunityTemplateBundleInfo'],
        category: 'string',
        defaultBrandingSet: '?string',
        defaultThemeDefinition: 'string',
        description: '?string',
        enableExtendedCleanUpOnDelete: '?boolean',
        masterLabel: 'string',
        navigationLinkSet: ['NavigationLinkSet'],
        pageSetting: ['CommunityTemplatePageSetting'],
        publisher: '?string'
      },
      "extends": 'Metadata'
    },
    CommunityTemplateBundleInfo: {
      type: 'CommunityTemplateBundleInfo',
      props: {
        description: '?string',
        image: '?string',
        order: 'number',
        title: 'string',
        type: 'string'
      }
    },
    CommunityThemeBundleInfo: {
      type: 'CommunityThemeBundleInfo',
      props: {},
      "extends": 'CommunityTemplateBundleInfo'
    },
    NavigationLinkSet: {
      type: 'NavigationLinkSet',
      props: {
        navigationMenuItem: ['NavigationMenuItem']
      }
    },
    NavigationMenuItem: {
      type: 'NavigationMenuItem',
      props: {
        defaultListViewId: '?string',
        label: 'string',
        menuItemBranding: '?NavigationMenuItemBranding',
        position: 'number',
        publiclyAvailable: '?boolean',
        subMenu: '?NavigationSubMenu',
        target: '?string',
        targetPreference: '?string',
        type: 'string'
      }
    },
    NavigationMenuItemBranding: {
      type: 'NavigationMenuItemBranding',
      props: {
        tileImage: '?string'
      }
    },
    NavigationSubMenu: {
      type: 'NavigationSubMenu',
      props: {
        navigationMenuItem: ['NavigationMenuItem']
      }
    },
    CommunityTemplatePageSetting: {
      type: 'CommunityTemplatePageSetting',
      props: {
        page: 'string',
        themeLayout: 'string'
      }
    },
    CommunityThemeDefinition: {
      type: 'CommunityThemeDefinition',
      props: {
        bundlesInfo: ['CommunityThemeBundleInfo'],
        customThemeLayoutType: ['CommunityCustomThemeLayoutType'],
        defaultBrandingSet: '?string',
        description: '?string',
        enableExtendedCleanUpOnDelete: '?boolean',
        masterLabel: 'string',
        publisher: '?string',
        themeRouteOverride: ['CommunityThemeRouteOverride'],
        themeSetting: ['CommunityThemeSetting']
      },
      "extends": 'Metadata'
    },
    CommunityCustomThemeLayoutType: {
      type: 'CommunityCustomThemeLayoutType',
      props: {
        description: '?string',
        label: 'string'
      }
    },
    CommunityThemeRouteOverride: {
      type: 'CommunityThemeRouteOverride',
      props: {
        customThemeLayoutType: '?string',
        pageAttributes: 'string',
        pageType: 'string',
        themeLayoutType: '?string'
      }
    },
    CommunityThemeSetting: {
      type: 'CommunityThemeSetting',
      props: {
        customThemeLayoutType: '?string',
        themeLayout: 'string',
        themeLayoutType: '?string'
      }
    },
    CompactLayout: {
      type: 'CompactLayout',
      props: {
        fields: ['string'],
        label: 'string'
      },
      "extends": 'Metadata'
    },
    CompanySettings: {
      type: 'CompanySettings',
      props: {
        enableCustomFiscalYear: 'boolean',
        fiscalYear: '?FiscalYearSettings'
      },
      "extends": 'Metadata'
    },
    FiscalYearSettings: {
      type: 'FiscalYearSettings',
      props: {
        fiscalYearNameBasedOn: '?string',
        startMonth: '?string'
      }
    },
    ConnectedApp: {
      type: 'ConnectedApp',
      props: {
        attributes: ['ConnectedAppAttribute'],
        canvas: '?CanvasMetadata',
        canvasConfig: '?ConnectedAppCanvasConfig',
        contactEmail: 'string',
        contactPhone: '?string',
        description: '?string',
        iconUrl: '?string',
        infoUrl: '?string',
        ipRanges: ['ConnectedAppIpRange'],
        label: 'string',
        logoUrl: '?string',
        mobileAppConfig: '?ConnectedAppMobileDetailConfig',
        mobileStartUrl: '?string',
        oauthConfig: '?ConnectedAppOauthConfig',
        permissionSetName: ['string'],
        plugin: '?string',
        pluginExecutionUser: '?string',
        profileName: ['string'],
        samlConfig: '?ConnectedAppSamlConfig',
        startUrl: '?string'
      },
      "extends": 'Metadata'
    },
    ConnectedAppAttribute: {
      type: 'ConnectedAppAttribute',
      props: {
        formula: 'string',
        key: 'string'
      }
    },
    ConnectedAppCanvasConfig: {
      type: 'ConnectedAppCanvasConfig',
      props: {
        accessMethod: 'string',
        canvasUrl: 'string',
        lifecycleClass: '?string',
        locations: ['string'],
        options: ['string'],
        samlInitiationMethod: '?string'
      }
    },
    ConnectedAppIpRange: {
      type: 'ConnectedAppIpRange',
      props: {
        description: '?string',
        end: 'string',
        start: 'string'
      }
    },
    ConnectedAppMobileDetailConfig: {
      type: 'ConnectedAppMobileDetailConfig',
      props: {
        applicationBinaryFile: '?string',
        applicationBinaryFileName: '?string',
        applicationBundleIdentifier: '?string',
        applicationFileLength: '?number',
        applicationIconFile: '?string',
        applicationIconFileName: '?string',
        applicationInstallUrl: '?string',
        devicePlatform: 'string',
        deviceType: '?string',
        minimumOsVersion: '?string',
        privateApp: '?boolean',
        version: 'string'
      }
    },
    ConnectedAppOauthConfig: {
      type: 'ConnectedAppOauthConfig',
      props: {
        callbackUrl: 'string',
        certificate: '?string',
        consumerKey: '?string',
        consumerSecret: '?string',
        idTokenConfig: '?ConnectedAppOauthIdToken',
        isAdminApproved: '?boolean',
        scopes: ['string'],
        singleLogoutUrl: '?string'
      }
    },
    ConnectedAppOauthIdToken: {
      type: 'ConnectedAppOauthIdToken',
      props: {
        idTokenAudience: '?string',
        idTokenIncludeAttributes: '?boolean',
        idTokenIncludeCustomPerms: '?boolean',
        idTokenIncludeStandardClaims: '?boolean',
        idTokenValidity: '?number'
      }
    },
    ConnectedAppSamlConfig: {
      type: 'ConnectedAppSamlConfig',
      props: {
        acsUrl: 'string',
        certificate: '?string',
        encryptionCertificate: '?string',
        encryptionType: '?string',
        entityUrl: 'string',
        issuer: '?string',
        samlIdpSLOBindingEnum: '?string',
        samlNameIdFormat: '?string',
        samlSloUrl: '?string',
        samlSubjectCustomAttr: '?string',
        samlSubjectType: 'string'
      }
    },
    ConnectedAppSettings: {
      type: 'ConnectedAppSettings',
      props: {
        enableAdminApprovedAppsOnly: '?boolean',
        enableSkipUserProvisioningWizardWelcomePage: '?boolean'
      },
      "extends": 'Metadata'
    },
    ContentSettings: {
      type: 'ContentSettings',
      props: {
        enableChatterFileLink: '?boolean',
        enableContent: '?boolean',
        enableContentAutoAssign: '?boolean',
        enableContentDistForPortalUsers: '?boolean',
        enableContentDistPwOptionsBit1: '?boolean',
        enableContentDistPwOptionsBit2: '?boolean',
        enableContentDistribution: '?boolean',
        enableContentSupportMultiLanguage: '?boolean',
        enableContentWorkspaceAccess: '?boolean',
        enableFileShareSetByRecord: '?boolean',
        enableFilesUsrShareNetRestricted: '?boolean',
        enableJPGPreviews: '?boolean',
        enableLibraryManagedFiles: '?boolean',
        enableSiteGuestUserToUploadFiles: '?boolean',
        enableUploadFilesOnAttachments: '?boolean',
        skipContentAssetTriggers: '?boolean',
        skipContentAssetTriggersOnDeploy: '?boolean'
      },
      "extends": 'Metadata'
    },
    ContractSettings: {
      type: 'ContractSettings',
      props: {
        autoCalculateEndDate: '?boolean',
        autoExpirationDelay: '?string',
        autoExpirationRecipient: '?string',
        autoExpireContracts: '?boolean',
        enableContractHistoryTracking: '?boolean',
        notifyOwnersOnContractExpiration: '?boolean'
      },
      "extends": 'Metadata'
    },
    CorsWhitelistOrigin: {
      type: 'CorsWhitelistOrigin',
      props: {
        urlPattern: 'string'
      },
      "extends": 'Metadata'
    },
    CspTrustedSite: {
      type: 'CspTrustedSite',
      props: {
        context: '?string',
        description: '?string',
        endpointUrl: 'string',
        isActive: 'boolean'
      },
      "extends": 'Metadata'
    },
    CurrencySettings: {
      type: 'CurrencySettings',
      props: {
        enableCurrencyEffectiveDates: '?boolean',
        enableCurrencySymbolWithMultiCurrency: '?boolean',
        enableMultiCurrency: '?boolean',
        isMultiCurrencyActivationAllowed: '?boolean',
        isParenCurrencyConvDisabled: '?boolean'
      },
      "extends": 'Metadata'
    },
    CustomApplication: {
      type: 'CustomApplication',
      props: {
        actionOverrides: ['AppActionOverride'],
        brand: '?AppBrand',
        consoleConfig: '?ServiceCloudConsoleConfig',
        defaultLandingTab: '?string',
        description: '?string',
        formFactors: ['string'],
        isNavAutoTempTabsDisabled: '?boolean',
        isNavPersonalizationDisabled: '?boolean',
        isServiceCloudConsole: '?boolean',
        label: '?string',
        logo: '?string',
        navType: '?string',
        preferences: '?AppPreferences',
        profileActionOverrides: ['AppProfileActionOverride'],
        setupExperience: '?string',
        subscriberTabs: ['string'],
        tabs: ['string'],
        uiType: '?string',
        utilityBar: '?string',
        workspaceConfig: '?AppWorkspaceConfig'
      },
      "extends": 'Metadata'
    },
    AppActionOverride: {
      type: 'AppActionOverride',
      props: {
        pageOrSobjectType: 'string'
      },
      "extends": 'ActionOverride'
    },
    ActionOverride: {
      type: 'ActionOverride',
      props: {
        actionName: '?string',
        comment: '?string',
        content: '?string',
        formFactor: '?string',
        skipRecordTypeSelect: '?boolean',
        type: '?string'
      }
    },
    AppBrand: {
      type: 'AppBrand',
      props: {
        footerColor: '?string',
        headerColor: '?string',
        logo: '?string',
        logoVersion: '?number',
        shouldOverrideOrgTheme: '?boolean'
      }
    },
    ServiceCloudConsoleConfig: {
      type: 'ServiceCloudConsoleConfig',
      props: {
        componentList: '?AppComponentList',
        detailPageRefreshMethod: 'string',
        footerColor: '?string',
        headerColor: '?string',
        keyboardShortcuts: 'KeyboardShortcuts',
        listPlacement: 'ListPlacement',
        listRefreshMethod: 'string',
        liveAgentConfig: '?LiveAgentConfig',
        primaryTabColor: '?string',
        pushNotifications: ['PushNotification'],
        tabLimitConfig: '?TabLimitConfig',
        whitelistedDomains: ['string']
      }
    },
    AppComponentList: {
      type: 'AppComponentList',
      props: {
        alignment: 'string',
        components: ['string']
      }
    },
    KeyboardShortcuts: {
      type: 'KeyboardShortcuts',
      props: {
        customShortcuts: ['CustomShortcut'],
        defaultShortcuts: ['DefaultShortcut']
      }
    },
    CustomShortcut: {
      type: 'CustomShortcut',
      props: {
        description: '?string',
        eventName: 'string'
      },
      "extends": 'DefaultShortcut'
    },
    DefaultShortcut: {
      type: 'DefaultShortcut',
      props: {
        action: 'string',
        active: 'boolean',
        keyCommand: 'string'
      }
    },
    ListPlacement: {
      type: 'ListPlacement',
      props: {
        height: '?number',
        location: 'string',
        units: '?string',
        width: '?number'
      }
    },
    LiveAgentConfig: {
      type: 'LiveAgentConfig',
      props: {
        enableLiveChat: '?boolean',
        openNewAccountSubtab: '?boolean',
        openNewCaseSubtab: '?boolean',
        openNewContactSubtab: '?boolean',
        openNewLeadSubtab: '?boolean',
        openNewVFPageSubtab: '?boolean',
        pageNamesToOpen: ['string'],
        showKnowledgeArticles: '?boolean'
      }
    },
    PushNotification: {
      type: 'PushNotification',
      props: {
        fieldNames: ['string'],
        objectName: 'string'
      }
    },
    TabLimitConfig: {
      type: 'TabLimitConfig',
      props: {
        maxNumberOfPrimaryTabs: '?string',
        maxNumberOfSubTabs: '?string'
      }
    },
    AppPreferences: {
      type: 'AppPreferences',
      props: {
        enableCustomizeMyTabs: 'boolean',
        enableKeyboardShortcuts: 'boolean',
        enableListViewHover: 'boolean',
        enableListViewReskin: 'boolean',
        enableMultiMonitorComponents: 'boolean',
        enablePinTabs: 'boolean',
        enableTabHover: 'boolean',
        enableTabLimits: 'boolean',
        saveUserSessions: 'boolean'
      }
    },
    AppProfileActionOverride: {
      type: 'AppProfileActionOverride',
      props: {
        profile: 'string'
      },
      "extends": 'ProfileActionOverride'
    },
    ProfileActionOverride: {
      type: 'ProfileActionOverride',
      props: {
        actionName: 'string',
        content: '?string',
        formFactor: 'string',
        pageOrSobjectType: 'string',
        recordType: '?string',
        type: 'string'
      }
    },
    AppWorkspaceConfig: {
      type: 'AppWorkspaceConfig',
      props: {
        mappings: ['WorkspaceMapping']
      }
    },
    WorkspaceMapping: {
      type: 'WorkspaceMapping',
      props: {
        fieldName: '?string',
        tab: 'string'
      }
    },
    CustomApplicationComponent: {
      type: 'CustomApplicationComponent',
      props: {
        buttonIconUrl: '?string',
        buttonStyle: '?string',
        buttonText: '?string',
        buttonWidth: '?number',
        height: '?number',
        isHeightFixed: 'boolean',
        isHidden: 'boolean',
        isWidthFixed: 'boolean',
        visualforcePage: 'string',
        width: '?number'
      },
      "extends": 'Metadata'
    },
    CustomFeedFilter: {
      type: 'CustomFeedFilter',
      props: {
        criteria: ['FeedFilterCriterion'],
        description: '?string',
        isProtected: '?boolean',
        label: 'string'
      },
      "extends": 'Metadata'
    },
    FeedFilterCriterion: {
      type: 'FeedFilterCriterion',
      props: {
        feedItemType: 'string',
        feedItemVisibility: '?string',
        relatedSObjectType: '?string'
      }
    },
    CustomField: {
      type: 'CustomField',
      props: {
        businessOwnerGroup: '?string',
        businessOwnerUser: '?string',
        businessStatus: '?string',
        caseSensitive: '?boolean',
        complianceGroup: '?string',
        customDataType: '?string',
        defaultValue: '?string',
        deleteConstraint: '?string',
        deprecated: '?boolean',
        description: '?string',
        displayFormat: '?string',
        encryptionScheme: '?string',
        escapeMarkup: '?boolean',
        externalDeveloperName: '?string',
        externalId: '?boolean',
        fieldManageability: '?string',
        formula: '?string',
        formulaTreatBlanksAs: '?string',
        inlineHelpText: '?string',
        isAIPredictionField: '?boolean',
        isConvertLeadDisabled: '?boolean',
        isFilteringDisabled: '?boolean',
        isNameField: '?boolean',
        isSortingDisabled: '?boolean',
        label: '?string',
        length: '?number',
        lookupFilter: '?LookupFilter',
        maskChar: '?string',
        maskType: '?string',
        metadataRelationshipControllingField: '?string',
        populateExistingRows: '?boolean',
        precision: '?number',
        referenceTargetField: '?string',
        referenceTo: '?string',
        relationshipLabel: '?string',
        relationshipName: '?string',
        relationshipOrder: '?number',
        reparentableMasterDetail: '?boolean',
        required: '?boolean',
        restrictedAdminField: '?boolean',
        scale: '?number',
        securityClassification: '?string',
        startingNumber: '?number',
        stripMarkup: '?boolean',
        summarizedField: '?string',
        summaryFilterItems: ['FilterItem'],
        summaryForeignKey: '?string',
        summaryOperation: '?string',
        trackFeedHistory: '?boolean',
        trackHistory: '?boolean',
        trackTrending: '?boolean',
        translateData: '?boolean',
        type: '?string',
        unique: '?boolean',
        valueSet: '?ValueSet',
        visibleLines: '?number',
        writeRequiresMasterRead: '?boolean'
      },
      "extends": 'Metadata'
    },
    LookupFilter: {
      type: 'LookupFilter',
      props: {
        active: 'boolean',
        booleanFilter: '?string',
        description: '?string',
        errorMessage: '?string',
        filterItems: ['FilterItem'],
        infoMessage: '?string',
        isOptional: 'boolean'
      }
    },
    ValueSet: {
      type: 'ValueSet',
      props: {
        controllingField: '?string',
        restricted: '?boolean',
        valueSetDefinition: '?ValueSetValuesDefinition',
        valueSetName: '?string',
        valueSettings: ['ValueSettings']
      }
    },
    ValueSetValuesDefinition: {
      type: 'ValueSetValuesDefinition',
      props: {
        sorted: 'boolean',
        value: ['CustomValue']
      }
    },
    CustomValue: {
      type: 'CustomValue',
      props: {
        color: '?string',
        "default": 'boolean',
        description: '?string',
        isActive: '?boolean',
        label: '?string'
      },
      "extends": 'Metadata'
    },
    StandardValue: {
      type: 'StandardValue',
      props: {
        allowEmail: '?boolean',
        closed: '?boolean',
        converted: '?boolean',
        cssExposed: '?boolean',
        forecastCategory: '?string',
        groupingString: '?string',
        highPriority: '?boolean',
        probability: '?number',
        reverseRole: '?string',
        reviewed: '?boolean',
        won: '?boolean'
      },
      "extends": 'CustomValue'
    },
    ValueSettings: {
      type: 'ValueSettings',
      props: {
        controllingFieldValue: ['string'],
        valueName: 'string'
      }
    },
    CustomHelpMenuSection: {
      type: 'CustomHelpMenuSection',
      props: {
        customHelpMenuItems: ['CustomHelpMenuItem'],
        masterLabel: 'string'
      },
      "extends": 'Metadata'
    },
    CustomHelpMenuItem: {
      type: 'CustomHelpMenuItem',
      props: {
        linkUrl: 'string',
        masterLabel: 'string',
        sortOrder: 'number'
      }
    },
    CustomLabel: {
      type: 'CustomLabel',
      props: {
        categories: '?string',
        language: 'string',
        "protected": 'boolean',
        shortDescription: 'string',
        value: 'string'
      },
      "extends": 'Metadata'
    },
    CustomLabels: {
      type: 'CustomLabels',
      props: {
        labels: ['CustomLabel']
      },
      "extends": 'Metadata'
    },
    CustomMetadata: {
      type: 'CustomMetadata',
      props: {
        description: '?string',
        label: '?string',
        "protected": '?boolean',
        values: ['CustomMetadataValue']
      },
      "extends": 'Metadata'
    },
    CustomMetadataValue: {
      type: 'CustomMetadataValue',
      props: {
        field: 'string',
        value: '?any'
      }
    },
    CustomNotificationType: {
      type: 'CustomNotificationType',
      props: {
        customNotifTypeName: 'string',
        description: '?string',
        desktop: 'boolean',
        masterLabel: 'string',
        mobile: 'boolean'
      },
      "extends": 'Metadata'
    },
    CustomObject: {
      type: 'CustomObject',
      props: {
        actionOverrides: ['ActionOverride'],
        allowInChatterGroups: '?boolean',
        articleTypeChannelDisplay: '?ArticleTypeChannelDisplay',
        businessProcesses: ['BusinessProcess'],
        compactLayoutAssignment: '?string',
        compactLayouts: ['CompactLayout'],
        customHelp: '?string',
        customHelpPage: '?string',
        customSettingsType: '?string',
        deploymentStatus: '?string',
        deprecated: '?boolean',
        description: '?string',
        enableActivities: '?boolean',
        enableBulkApi: '?boolean',
        enableDataTranslation: '?boolean',
        enableDivisions: '?boolean',
        enableEnhancedLookup: '?boolean',
        enableFeeds: '?boolean',
        enableHistory: '?boolean',
        enableLicensing: '?boolean',
        enableReports: '?boolean',
        enableSearch: '?boolean',
        enableSharing: '?boolean',
        enableStreamingApi: '?boolean',
        eventType: '?string',
        externalDataSource: '?string',
        externalName: '?string',
        externalRepository: '?string',
        externalSharingModel: '?string',
        fieldSets: ['FieldSet'],
        fields: ['CustomField'],
        gender: '?string',
        historyRetentionPolicy: '?HistoryRetentionPolicy',
        household: '?boolean',
        indexes: ['Index'],
        label: '?string',
        listViews: ['ListView'],
        nameField: '?CustomField',
        pluralLabel: '?string',
        profileSearchLayouts: ['ProfileSearchLayouts'],
        publishBehavior: '?string',
        recordTypeTrackFeedHistory: '?boolean',
        recordTypeTrackHistory: '?boolean',
        recordTypes: ['RecordType'],
        searchLayouts: '?SearchLayouts',
        sharingModel: '?string',
        sharingReasons: ['SharingReason'],
        sharingRecalculations: ['SharingRecalculation'],
        startsWith: '?string',
        validationRules: ['ValidationRule'],
        visibility: '?string',
        webLinks: ['WebLink']
      },
      "extends": 'Metadata'
    },
    ArticleTypeChannelDisplay: {
      type: 'ArticleTypeChannelDisplay',
      props: {
        articleTypeTemplates: ['ArticleTypeTemplate']
      }
    },
    ArticleTypeTemplate: {
      type: 'ArticleTypeTemplate',
      props: {
        channel: 'string',
        page: '?string',
        template: 'string'
      }
    },
    FieldSet: {
      type: 'FieldSet',
      props: {
        availableFields: ['FieldSetItem'],
        description: 'string',
        displayedFields: ['FieldSetItem'],
        label: 'string'
      },
      "extends": 'Metadata'
    },
    FieldSetItem: {
      type: 'FieldSetItem',
      props: {
        field: '?string',
        isFieldManaged: '?boolean',
        isRequired: '?boolean'
      }
    },
    HistoryRetentionPolicy: {
      type: 'HistoryRetentionPolicy',
      props: {
        archiveAfterMonths: 'number',
        archiveRetentionYears: 'number',
        description: '?string'
      }
    },
    Index: {
      type: 'Index',
      props: {
        fields: ['IndexField'],
        label: 'string'
      },
      "extends": 'Metadata'
    },
    IndexField: {
      type: 'IndexField',
      props: {
        name: 'string',
        sortDirection: 'string'
      }
    },
    ListView: {
      type: 'ListView',
      props: {
        booleanFilter: '?string',
        columns: ['string'],
        division: '?string',
        filterScope: 'string',
        filters: ['ListViewFilter'],
        label: 'string',
        language: '?string',
        queue: '?string',
        sharedTo: '?SharedTo'
      },
      "extends": 'Metadata'
    },
    ListViewFilter: {
      type: 'ListViewFilter',
      props: {
        field: 'string',
        operation: 'string',
        value: '?string'
      }
    },
    SharedTo: {
      type: 'SharedTo',
      props: {
        allCustomerPortalUsers: '?string',
        allInternalUsers: '?string',
        allPartnerUsers: '?string',
        channelProgramGroup: ['string'],
        channelProgramGroups: ['string'],
        group: ['string'],
        groups: ['string'],
        guestUser: ['string'],
        managerSubordinates: ['string'],
        managers: ['string'],
        portalRole: ['string'],
        portalRoleAndSubordinates: ['string'],
        queue: ['string'],
        role: ['string'],
        roleAndSubordinates: ['string'],
        roleAndSubordinatesInternal: ['string'],
        roles: ['string'],
        rolesAndSubordinates: ['string'],
        territories: ['string'],
        territoriesAndSubordinates: ['string'],
        territory: ['string'],
        territoryAndSubordinates: ['string']
      }
    },
    ProfileSearchLayouts: {
      type: 'ProfileSearchLayouts',
      props: {
        fields: ['string'],
        profileName: '?string'
      }
    },
    RecordType: {
      type: 'RecordType',
      props: {
        active: 'boolean',
        businessProcess: '?string',
        compactLayoutAssignment: '?string',
        description: '?string',
        label: 'string',
        picklistValues: ['RecordTypePicklistValue']
      },
      "extends": 'Metadata'
    },
    RecordTypePicklistValue: {
      type: 'RecordTypePicklistValue',
      props: {
        picklist: 'string',
        values: ['PicklistValue']
      }
    },
    SearchLayouts: {
      type: 'SearchLayouts',
      props: {
        customTabListAdditionalFields: ['string'],
        excludedStandardButtons: ['string'],
        listViewButtons: ['string'],
        lookupDialogsAdditionalFields: ['string'],
        lookupFilterFields: ['string'],
        lookupPhoneDialogsAdditionalFields: ['string'],
        massQuickActions: ['string'],
        searchFilterFields: ['string'],
        searchResultsAdditionalFields: ['string'],
        searchResultsCustomButtons: ['string']
      }
    },
    SharingReason: {
      type: 'SharingReason',
      props: {
        label: 'string'
      },
      "extends": 'Metadata'
    },
    SharingRecalculation: {
      type: 'SharingRecalculation',
      props: {
        className: 'string'
      }
    },
    ValidationRule: {
      type: 'ValidationRule',
      props: {
        active: 'boolean',
        description: '?string',
        errorConditionFormula: 'string',
        errorDisplayField: '?string',
        errorMessage: 'string'
      },
      "extends": 'Metadata'
    },
    WebLink: {
      type: 'WebLink',
      props: {
        availability: 'string',
        description: '?string',
        displayType: 'string',
        encodingKey: '?string',
        hasMenubar: '?boolean',
        hasScrollbars: '?boolean',
        hasToolbar: '?boolean',
        height: '?number',
        isResizable: '?boolean',
        linkType: 'string',
        masterLabel: '?string',
        openType: 'string',
        page: '?string',
        position: '?string',
        "protected": 'boolean',
        requireRowSelection: '?boolean',
        scontrol: '?string',
        showsLocation: '?boolean',
        showsStatus: '?boolean',
        url: '?string',
        width: '?number'
      },
      "extends": 'Metadata'
    },
    CustomObjectTranslation: {
      type: 'CustomObjectTranslation',
      props: {
        caseValues: ['ObjectNameCaseValue'],
        fieldSets: ['FieldSetTranslation'],
        fields: ['CustomFieldTranslation'],
        gender: '?string',
        layouts: ['LayoutTranslation'],
        nameFieldLabel: '?string',
        quickActions: ['QuickActionTranslation'],
        recordTypes: ['RecordTypeTranslation'],
        sharingReasons: ['SharingReasonTranslation'],
        standardFields: ['StandardFieldTranslation'],
        startsWith: '?string',
        validationRules: ['ValidationRuleTranslation'],
        webLinks: ['WebLinkTranslation'],
        workflowTasks: ['WorkflowTaskTranslation']
      },
      "extends": 'Metadata'
    },
    ObjectNameCaseValue: {
      type: 'ObjectNameCaseValue',
      props: {
        article: '?string',
        caseType: '?string',
        plural: '?boolean',
        possessive: '?string',
        value: 'string'
      }
    },
    FieldSetTranslation: {
      type: 'FieldSetTranslation',
      props: {
        label: 'string',
        name: 'string'
      }
    },
    CustomFieldTranslation: {
      type: 'CustomFieldTranslation',
      props: {
        caseValues: ['ObjectNameCaseValue'],
        gender: '?string',
        help: '?string',
        label: '?string',
        lookupFilter: '?LookupFilterTranslation',
        name: 'string',
        picklistValues: ['PicklistValueTranslation'],
        relationshipLabel: '?string',
        startsWith: '?string'
      }
    },
    LookupFilterTranslation: {
      type: 'LookupFilterTranslation',
      props: {
        errorMessage: 'string',
        informationalMessage: 'string'
      }
    },
    PicklistValueTranslation: {
      type: 'PicklistValueTranslation',
      props: {
        masterLabel: 'string',
        translation: '?string'
      }
    },
    LayoutTranslation: {
      type: 'LayoutTranslation',
      props: {
        layout: 'string',
        layoutType: '?string',
        sections: ['LayoutSectionTranslation']
      }
    },
    LayoutSectionTranslation: {
      type: 'LayoutSectionTranslation',
      props: {
        label: 'string',
        section: 'string'
      }
    },
    QuickActionTranslation: {
      type: 'QuickActionTranslation',
      props: {
        label: 'string',
        name: 'string'
      }
    },
    RecordTypeTranslation: {
      type: 'RecordTypeTranslation',
      props: {
        description: '?string',
        label: 'string',
        name: 'string'
      }
    },
    SharingReasonTranslation: {
      type: 'SharingReasonTranslation',
      props: {
        label: 'string',
        name: 'string'
      }
    },
    StandardFieldTranslation: {
      type: 'StandardFieldTranslation',
      props: {
        label: '?string',
        name: 'string'
      }
    },
    ValidationRuleTranslation: {
      type: 'ValidationRuleTranslation',
      props: {
        errorMessage: 'string',
        name: 'string'
      }
    },
    WebLinkTranslation: {
      type: 'WebLinkTranslation',
      props: {
        label: 'string',
        name: 'string'
      }
    },
    WorkflowTaskTranslation: {
      type: 'WorkflowTaskTranslation',
      props: {
        description: '?string',
        name: 'string',
        subject: '?string'
      }
    },
    CustomPageWebLink: {
      type: 'CustomPageWebLink',
      props: {
        availability: 'string',
        description: '?string',
        displayType: 'string',
        encodingKey: '?string',
        hasMenubar: '?boolean',
        hasScrollbars: '?boolean',
        hasToolbar: '?boolean',
        height: '?number',
        isResizable: '?boolean',
        linkType: 'string',
        masterLabel: '?string',
        openType: 'string',
        page: '?string',
        position: '?string',
        "protected": 'boolean',
        requireRowSelection: '?boolean',
        scontrol: '?string',
        showsLocation: '?boolean',
        showsStatus: '?boolean',
        url: '?string',
        width: '?number'
      },
      "extends": 'Metadata'
    },
    CustomPermission: {
      type: 'CustomPermission',
      props: {
        connectedApp: '?string',
        description: '?string',
        label: 'string',
        requiredPermission: ['CustomPermissionDependencyRequired']
      },
      "extends": 'Metadata'
    },
    CustomPermissionDependencyRequired: {
      type: 'CustomPermissionDependencyRequired',
      props: {
        customPermission: 'string',
        dependency: 'boolean'
      }
    },
    CustomSite: {
      type: 'CustomSite',
      props: {
        active: 'boolean',
        allowHomePage: 'boolean',
        allowStandardAnswersPages: '?boolean',
        allowStandardIdeasPages: 'boolean',
        allowStandardLookups: 'boolean',
        allowStandardPortalPages: 'boolean',
        allowStandardSearch: 'boolean',
        analyticsTrackingCode: '?string',
        authorizationRequiredPage: '?string',
        bandwidthExceededPage: '?string',
        browserXssProtection: 'boolean',
        changePasswordPage: '?string',
        chatterAnswersForgotPasswordConfirmPage: '?string',
        chatterAnswersForgotPasswordPage: '?string',
        chatterAnswersHelpPage: '?string',
        chatterAnswersLoginPage: '?string',
        chatterAnswersRegistrationPage: '?string',
        clickjackProtectionLevel: 'string',
        contentSniffingProtection: 'boolean',
        cspUpgradeInsecureRequests: 'boolean',
        customWebAddresses: ['SiteWebAddress'],
        description: '?string',
        enableAuraRequests: '?boolean',
        favoriteIcon: '?string',
        fileNotFoundPage: '?string',
        forgotPasswordPage: '?string',
        genericErrorPage: '?string',
        guestProfile: '?string',
        inMaintenancePage: '?string',
        inactiveIndexPage: '?string',
        indexPage: 'string',
        masterLabel: 'string',
        myProfilePage: '?string',
        portal: '?string',
        referrerPolicyOriginWhenCrossOrigin: 'boolean',
        requireHttps: 'boolean',
        requireInsecurePortalAccess: 'boolean',
        robotsTxtPage: '?string',
        rootComponent: '?string',
        selfRegPage: '?string',
        serverIsDown: '?string',
        siteAdmin: '?string',
        siteRedirectMappings: ['SiteRedirectMapping'],
        siteTemplate: '?string',
        siteType: 'string',
        subdomain: '?string',
        urlPathPrefix: '?string'
      },
      "extends": 'Metadata'
    },
    SiteWebAddress: {
      type: 'SiteWebAddress',
      props: {
        certificate: '?string',
        domainName: 'string',
        primary: 'boolean'
      }
    },
    SiteRedirectMapping: {
      type: 'SiteRedirectMapping',
      props: {
        action: 'string',
        isActive: '?boolean',
        source: 'string',
        target: 'string'
      }
    },
    CustomTab: {
      type: 'CustomTab',
      props: {
        actionOverrides: ['ActionOverride'],
        auraComponent: '?string',
        customObject: '?boolean',
        description: '?string',
        flexiPage: '?string',
        frameHeight: '?number',
        hasSidebar: '?boolean',
        icon: '?string',
        label: '?string',
        lwcComponent: '?string',
        motif: '?string',
        page: '?string',
        scontrol: '?string',
        splashPageLink: '?string',
        url: '?string',
        urlEncodingKey: '?string'
      },
      "extends": 'Metadata'
    },
    Dashboard: {
      type: 'Dashboard',
      props: {
        backgroundEndColor: 'string',
        backgroundFadeDirection: 'string',
        backgroundStartColor: 'string',
        chartTheme: '?string',
        colorPalette: '?string',
        dashboardChartTheme: '?string',
        dashboardColorPalette: '?string',
        dashboardFilters: ['DashboardFilter'],
        dashboardGridLayout: '?DashboardGridLayout',
        dashboardResultRefreshedDate: '?string',
        dashboardResultRunningUser: '?string',
        dashboardType: '?string',
        description: '?string',
        folderName: '?string',
        isGridLayout: '?boolean',
        leftSection: '?DashboardComponentSection',
        middleSection: '?DashboardComponentSection',
        numSubscriptions: '?number',
        rightSection: '?DashboardComponentSection',
        runningUser: '?string',
        textColor: 'string',
        title: 'string',
        titleColor: 'string',
        titleSize: 'number'
      },
      "extends": 'Metadata'
    },
    DashboardFilter: {
      type: 'DashboardFilter',
      props: {
        dashboardFilterOptions: ['DashboardFilterOption'],
        name: 'string'
      }
    },
    DashboardFilterOption: {
      type: 'DashboardFilterOption',
      props: {
        operator: 'string',
        values: ['string']
      }
    },
    DashboardGridLayout: {
      type: 'DashboardGridLayout',
      props: {
        dashboardGridComponents: ['DashboardGridComponent'],
        numberOfColumns: 'number',
        rowHeight: 'number'
      }
    },
    DashboardGridComponent: {
      type: 'DashboardGridComponent',
      props: {
        colSpan: 'number',
        columnIndex: 'number',
        dashboardComponent: 'DashboardComponent',
        rowIndex: 'number',
        rowSpan: 'number'
      }
    },
    DashboardComponent: {
      type: 'DashboardComponent',
      props: {
        autoselectColumnsFromReport: '?boolean',
        chartAxisRange: '?string',
        chartAxisRangeMax: '?number',
        chartAxisRangeMin: '?number',
        chartSummary: ['ChartSummary'],
        componentChartTheme: '?string',
        componentType: 'string',
        dashboardFilterColumns: ['DashboardFilterColumn'],
        dashboardTableColumn: ['DashboardTableColumn'],
        decimalPrecision: '?number',
        displayUnits: '?string',
        drillDownUrl: '?string',
        drillEnabled: '?boolean',
        drillToDetailEnabled: '?boolean',
        enableHover: '?boolean',
        expandOthers: '?boolean',
        flexComponentProperties: '?DashboardFlexTableComponentProperties',
        footer: '?string',
        gaugeMax: '?number',
        gaugeMin: '?number',
        groupingColumn: ['string'],
        groupingSortProperties: '?DashboardComponentGroupingSortProperties',
        header: '?string',
        indicatorBreakpoint1: '?number',
        indicatorBreakpoint2: '?number',
        indicatorHighColor: '?string',
        indicatorLowColor: '?string',
        indicatorMiddleColor: '?string',
        legendPosition: '?string',
        maxValuesDisplayed: '?number',
        metricLabel: '?string',
        page: '?string',
        pageHeightInPixels: '?number',
        report: '?string',
        scontrol: '?string',
        scontrolHeightInPixels: '?number',
        showPercentage: '?boolean',
        showPicturesOnCharts: '?boolean',
        showPicturesOnTables: '?boolean',
        showRange: '?boolean',
        showTotal: '?boolean',
        showValues: '?boolean',
        sortBy: '?string',
        title: '?string',
        useReportChart: '?boolean'
      }
    },
    ChartSummary: {
      type: 'ChartSummary',
      props: {
        aggregate: '?string',
        axisBinding: '?string',
        column: 'string'
      }
    },
    DashboardFilterColumn: {
      type: 'DashboardFilterColumn',
      props: {
        column: 'string'
      }
    },
    DashboardTableColumn: {
      type: 'DashboardTableColumn',
      props: {
        aggregateType: '?string',
        calculatePercent: '?boolean',
        column: 'string',
        decimalPlaces: '?number',
        showSubTotal: '?boolean',
        showTotal: '?boolean',
        sortBy: '?string'
      }
    },
    DashboardFlexTableComponentProperties: {
      type: 'DashboardFlexTableComponentProperties',
      props: {
        decimalPrecision: '?number',
        flexTableColumn: ['DashboardComponentColumn'],
        flexTableSortInfo: '?DashboardComponentSortInfo',
        hideChatterPhotos: '?boolean'
      }
    },
    DashboardComponentColumn: {
      type: 'DashboardComponentColumn',
      props: {
        breakPoint1: '?number',
        breakPoint2: '?number',
        breakPointOrder: '?number',
        highRangeColor: '?number',
        lowRangeColor: '?number',
        midRangeColor: '?number',
        reportColumn: 'string',
        showSubTotal: '?boolean',
        showTotal: '?boolean',
        type: 'string'
      }
    },
    DashboardComponentSortInfo: {
      type: 'DashboardComponentSortInfo',
      props: {
        sortColumn: '?string',
        sortOrder: '?string'
      }
    },
    DashboardComponentGroupingSortProperties: {
      type: 'DashboardComponentGroupingSortProperties',
      props: {
        groupingSorts: ['DashboardComponentGroupingSort']
      }
    },
    DashboardComponentGroupingSort: {
      type: 'DashboardComponentGroupingSort',
      props: {
        groupingLevel: 'string',
        inheritedReportGroupingSort: '?string',
        sortColumn: '?string',
        sortOrder: '?string'
      }
    },
    DashboardComponentSection: {
      type: 'DashboardComponentSection',
      props: {
        columnSize: 'string',
        components: ['DashboardComponent']
      }
    },
    DataCategoryGroup: {
      type: 'DataCategoryGroup',
      props: {
        active: 'boolean',
        dataCategory: 'DataCategory',
        description: '?string',
        label: 'string',
        objectUsage: '?ObjectUsage'
      },
      "extends": 'Metadata'
    },
    DataCategory: {
      type: 'DataCategory',
      props: {
        dataCategory: ['DataCategory'],
        label: 'string',
        name: 'string'
      }
    },
    ObjectUsage: {
      type: 'ObjectUsage',
      props: {
        object: ['string']
      }
    },
    DataDotComSettings: {
      type: 'DataDotComSettings',
      props: {
        enableAccountExportButtonOff: '?boolean',
        enableAccountImportButtonOff: '?boolean',
        enableAllowDupeContactFromLead: '?boolean',
        enableAllowDupeLeadFromContact: '?boolean',
        enableCleanUpgradeRequested: '?boolean',
        enableContactExportButtonOff: '?boolean',
        enableContactImportButtonOff: '?boolean'
      },
      "extends": 'Metadata'
    },
    DelegateGroup: {
      type: 'DelegateGroup',
      props: {
        customObjects: ['string'],
        groups: ['string'],
        label: 'string',
        loginAccess: 'boolean',
        permissionSets: ['string'],
        profiles: ['string'],
        roles: ['string']
      },
      "extends": 'Metadata'
    },
    DeploymentSettings: {
      type: 'DeploymentSettings',
      props: {
        doesSkipAsyncApexValidation: '?boolean'
      },
      "extends": 'Metadata'
    },
    DevHubSettings: {
      type: 'DevHubSettings',
      props: {
        enableShapeExportPref: '?boolean'
      },
      "extends": 'Metadata'
    },
    DiscoverySettings: {
      type: 'DiscoverySettings',
      props: {
        enableEinsteinAnswersPref: '?boolean'
      },
      "extends": 'Metadata'
    },
    DocumentType: {
      type: 'DocumentType',
      props: {
        description: 'string',
        isActive: 'boolean',
        masterLabel: 'string'
      },
      "extends": 'Metadata'
    },
    DuplicateRule: {
      type: 'DuplicateRule',
      props: {
        actionOnInsert: 'string',
        actionOnUpdate: 'string',
        alertText: '?string',
        description: '?string',
        duplicateRuleFilter: '?DuplicateRuleFilter',
        duplicateRuleMatchRules: ['?', 'DuplicateRuleMatchRule'],
        isActive: 'boolean',
        masterLabel: 'string',
        operationsOnInsert: ['string'],
        operationsOnUpdate: ['string'],
        securityOption: 'string',
        sortOrder: 'number'
      },
      "extends": 'Metadata'
    },
    DuplicateRuleFilter: {
      type: 'DuplicateRuleFilter',
      props: {
        booleanFilter: '?string',
        duplicateRuleFilterItems: ['DuplicateRuleFilterItem']
      }
    },
    DuplicateRuleMatchRule: {
      type: 'DuplicateRuleMatchRule',
      props: {
        matchRuleSObjectType: 'string',
        matchingRule: 'string',
        objectMapping: '?ObjectMapping'
      }
    },
    ObjectMapping: {
      type: 'ObjectMapping',
      props: {
        inputObject: 'string',
        mappingFields: ['ObjectMappingField'],
        outputObject: 'string'
      }
    },
    ObjectMappingField: {
      type: 'ObjectMappingField',
      props: {
        inputField: 'string',
        outputField: 'string'
      }
    },
    EACSettings: {
      type: 'EACSettings',
      props: {
        enableEACForEveryonePref: '?boolean',
        enableInboxActivitySharing: '?boolean',
        enableInsightsInTimeline: '?boolean',
        enableInsightsInTimelineEacStd: '?boolean'
      },
      "extends": 'Metadata'
    },
    EmailAdministrationSettings: {
      type: 'EmailAdministrationSettings',
      props: {
        enableComplianceBcc: '?boolean',
        enableEmailConsentManagement: '?boolean',
        enableEmailSenderIdCompliance: '?boolean',
        enableEmailSpfCompliance: '?boolean',
        enableEmailToSalesforce: '?boolean',
        enableEmailWorkflowApproval: '?boolean',
        enableEnhancedEmailEnabled: '?boolean',
        enableHandleBouncedEmails: '?boolean',
        enableHtmlEmail: '?boolean',
        enableListEmailLogActivities: '?boolean',
        enableResendBouncedEmails: '?boolean',
        enableRestrictTlsToDomains: '?boolean',
        enableSendThroughGmailPref: '?boolean',
        enableSendViaExchangePref: '?boolean',
        enableSendViaGmailPref: '?boolean',
        enableSetMatchingEmailsOnBounce: '?boolean',
        enableUseOrgFootersForExtTrans: '?boolean',
        sendEmailsEvenWhenAutomationUpdatesSameRecord: '?boolean',
        sendMassEmailNotification: '?boolean',
        sendTextOnlySystemEmails: '?boolean'
      },
      "extends": 'Metadata'
    },
    EmailIntegrationSettings: {
      type: 'EmailIntegrationSettings',
      props: {
        doesEmailLogAsEmailMessageInOutlook: '?boolean',
        doesGmailStayConnectedToSalesforce: '?boolean',
        enableContactAndEventSync: '?boolean',
        enableEmailTrackingInMobile: '?boolean',
        enableEngageForOutlook: '?boolean',
        enableGmailIntegration: '?boolean',
        enableOutlookIntegration: '?boolean',
        enableProductivityFeatures: '?boolean',
        enableSupplementalContactInfoInMobile: '?boolean',
        isLayoutCustomizationAllowed: '?boolean',
        shouldUseTrustedDomainsList: '?boolean'
      },
      "extends": 'Metadata'
    },
    EmailServicesFunction: {
      type: 'EmailServicesFunction',
      props: {
        apexClass: 'string',
        attachmentOption: 'string',
        authenticationFailureAction: 'string',
        authorizationFailureAction: 'string',
        authorizedSenders: '?string',
        emailServicesAddresses: ['EmailServicesAddress'],
        errorRoutingAddress: '?string',
        functionInactiveAction: 'string',
        functionName: 'string',
        isActive: '?boolean',
        isAuthenticationRequired: '?boolean',
        isErrorRoutingEnabled: '?boolean',
        isTextAttachmentsAsBinary: '?boolean',
        isTlsRequired: '?boolean',
        overLimitAction: 'string'
      },
      "extends": 'Metadata'
    },
    EmailServicesAddress: {
      type: 'EmailServicesAddress',
      props: {
        authorizedSenders: '?string',
        developerName: 'string',
        isActive: '?boolean',
        localPart: 'string',
        runAsUser: 'string'
      }
    },
    EmailTemplateSettings: {
      type: 'EmailTemplateSettings',
      props: {
        enableLwcEmailTemplateBuilder: '?boolean',
        enableTemplateEnhancedFolderPref: '?boolean'
      },
      "extends": 'Metadata'
    },
    EmbeddedServiceBranding: {
      type: 'EmbeddedServiceBranding',
      props: {
        contrastInvertedColor: '?string',
        contrastPrimaryColor: '?string',
        embeddedServiceConfig: 'string',
        font: '?string',
        height: '?number',
        masterLabel: 'string',
        navBarColor: '?string',
        primaryColor: '?string',
        secondaryColor: '?string',
        width: '?number'
      },
      "extends": 'Metadata'
    },
    EmbeddedServiceConfig: {
      type: 'EmbeddedServiceConfig',
      props: {
        areGuestUsersAllowed: '?boolean',
        authMethod: '?string',
        embeddedServiceAppointmentSettings: '?EmbeddedServiceAppointmentSettings',
        embeddedServiceCustomComponents: ['EmbeddedServiceCustomComponent'],
        embeddedServiceCustomLabels: ['EmbeddedServiceCustomLabel'],
        embeddedServiceFlowConfig: '?EmbeddedServiceFlowConfig',
        embeddedServiceFlows: ['EmbeddedServiceFlow'],
        embeddedServiceLayouts: ['EmbeddedServiceLayout'],
        masterLabel: 'string',
        shouldHideAuthDialog: '?boolean',
        site: 'string'
      },
      "extends": 'Metadata'
    },
    EmbeddedServiceAppointmentSettings: {
      type: 'EmbeddedServiceAppointmentSettings',
      props: {
        appointmentConfirmImg: '?string',
        enabled: 'boolean',
        homeImg: '?string',
        logoImg: '?string',
        shouldShowExistingAppointment: '?boolean',
        shouldShowNewAppointment: '?boolean'
      }
    },
    EmbeddedServiceCustomComponent: {
      type: 'EmbeddedServiceCustomComponent',
      props: {
        componentBundleType: '?string',
        customComponent: '?string',
        customComponentType: '?string'
      }
    },
    EmbeddedServiceCustomLabel: {
      type: 'EmbeddedServiceCustomLabel',
      props: {
        customLabel: '?string',
        feature: '?string',
        labelKey: '?string'
      }
    },
    EmbeddedServiceFlowConfig: {
      type: 'EmbeddedServiceFlowConfig',
      props: {
        enabled: 'boolean'
      },
      "extends": 'Metadata'
    },
    EmbeddedServiceFlow: {
      type: 'EmbeddedServiceFlow',
      props: {
        flow: 'string',
        flowType: 'string',
        isAuthenticationRequired: 'boolean'
      }
    },
    EmbeddedServiceLayout: {
      type: 'EmbeddedServiceLayout',
      props: {
        embeddedServiceLayoutRules: ['EmbeddedServiceLayoutRule'],
        layout: 'string',
        layoutType: '?string'
      }
    },
    EmbeddedServiceLayoutRule: {
      type: 'EmbeddedServiceLayoutRule',
      props: {
        appointmentStatus: 'string'
      }
    },
    EmbeddedServiceLiveAgent: {
      type: 'EmbeddedServiceLiveAgent',
      props: {
        avatarImg: '?string',
        embeddedServiceConfig: 'string',
        embeddedServiceQuickActions: ['EmbeddedServiceQuickAction'],
        enabled: 'boolean',
        fontSize: 'string',
        headerBackgroundImg: '?string',
        isOfflineCaseEnabled: '?boolean',
        isQueuePositionEnabled: '?boolean',
        liveAgentChatUrl: '?string',
        liveAgentContentUrl: '?string',
        liveChatButton: 'string',
        liveChatDeployment: 'string',
        masterLabel: 'string',
        offlineCaseBackgroundImg: '?string',
        prechatBackgroundImg: '?string',
        prechatEnabled: 'boolean',
        prechatJson: '?string',
        scenario: 'string',
        smallCompanyLogoImg: '?string',
        waitingStateBackgroundImg: '?string'
      },
      "extends": 'Metadata'
    },
    EmbeddedServiceQuickAction: {
      type: 'EmbeddedServiceQuickAction',
      props: {
        embeddedServiceLiveAgent: 'string',
        order: 'number',
        quickActionDefinition: 'string',
        quickActionType: '?string'
      }
    },
    EmbeddedServiceMenuSettings: {
      type: 'EmbeddedServiceMenuSettings',
      props: {
        branding: '?string',
        embeddedServiceMenuItems: ['EmbeddedServiceMenuItem'],
        isEnabled: '?boolean',
        masterLabel: '?string',
        site: '?string'
      },
      "extends": 'Metadata'
    },
    EmbeddedServiceMenuItem: {
      type: 'EmbeddedServiceMenuItem',
      props: {
        channel: '?string',
        channelType: '?string',
        displayOrder: '?number',
        phoneNumber: '?string'
      }
    },
    EncryptionKeySettings: {
      type: 'EncryptionKeySettings',
      props: {
        canOptOutOfDerivationWithBYOK: '?boolean',
        enableCacheOnlyKeys: '?boolean',
        enableReplayDetection: '?boolean'
      },
      "extends": 'Metadata'
    },
    EnhancedNotesSettings: {
      type: 'EnhancedNotesSettings',
      props: {
        enableEnhancedNotes: '?boolean',
        enableTasksOnEnhancedNotes: '?boolean'
      },
      "extends": 'Metadata'
    },
    EntitlementProcess: {
      type: 'EntitlementProcess',
      props: {
        SObjectType: '?string',
        active: '?boolean',
        businessHours: '?string',
        description: '?string',
        entryStartDateField: '?string',
        exitCriteriaBooleanFilter: '?string',
        exitCriteriaFilterItems: ['FilterItem'],
        exitCriteriaFormula: '?string',
        isRecordTypeApplied: '?boolean',
        isVersionDefault: '?boolean',
        milestones: ['EntitlementProcessMilestoneItem'],
        name: '?string',
        recordType: '?string',
        versionMaster: '?string',
        versionNotes: '?string',
        versionNumber: '?number'
      },
      "extends": 'Metadata'
    },
    EntitlementProcessMilestoneItem: {
      type: 'EntitlementProcessMilestoneItem',
      props: {
        businessHours: '?string',
        criteriaBooleanFilter: '?string',
        milestoneCriteriaFilterItems: ['FilterItem'],
        milestoneCriteriaFormula: '?string',
        milestoneName: '?string',
        minutesCustomClass: '?string',
        minutesToComplete: '?number',
        successActions: ['WorkflowActionReference'],
        timeTriggers: ['EntitlementProcessMilestoneTimeTrigger'],
        useCriteriaStartTime: '?boolean'
      }
    },
    EntitlementProcessMilestoneTimeTrigger: {
      type: 'EntitlementProcessMilestoneTimeTrigger',
      props: {
        actions: ['WorkflowActionReference'],
        timeLength: '?number',
        workflowTimeTriggerUnit: 'string'
      }
    },
    EntitlementSettings: {
      type: 'EntitlementSettings',
      props: {
        assetLookupLimitedToActiveEntitlementsOnAccount: '?boolean',
        assetLookupLimitedToActiveEntitlementsOnContact: '?boolean',
        assetLookupLimitedToSameAccount: '?boolean',
        assetLookupLimitedToSameContact: '?boolean',
        enableEntitlementVersioning: 'boolean',
        enableEntitlements: 'boolean',
        enableMilestoneFeedItem: '?boolean',
        enableMilestoneStoppedTime: '?boolean',
        entitlementLookupLimitedToActiveStatus: '?boolean',
        entitlementLookupLimitedToSameAccount: '?boolean',
        entitlementLookupLimitedToSameAsset: '?boolean',
        entitlementLookupLimitedToSameContact: '?boolean',
        ignoreMilestoneBusinessHours: '?boolean'
      },
      "extends": 'Metadata'
    },
    EntitlementTemplate: {
      type: 'EntitlementTemplate',
      props: {
        businessHours: '?string',
        casesPerEntitlement: '?number',
        entitlementProcess: '?string',
        isPerIncident: '?boolean',
        term: '?number',
        type: '?string'
      },
      "extends": 'Metadata'
    },
    EntityImplements: {
      type: 'EntityImplements',
      props: {
        fieldMap: ['FieldImplements'],
        "interface": '?string',
        isDefault: '?boolean'
      },
      "extends": 'Metadata'
    },
    FieldImplements: {
      type: 'FieldImplements',
      props: {
        field: '?string',
        interfaceField: '?string'
      }
    },
    EscalationRule: {
      type: 'EscalationRule',
      props: {
        active: '?boolean',
        ruleEntry: ['RuleEntry']
      },
      "extends": 'Metadata'
    },
    EscalationRules: {
      type: 'EscalationRules',
      props: {
        escalationRule: ['EscalationRule']
      },
      "extends": 'Metadata'
    },
    EssentialsSettings: {
      type: 'EssentialsSettings',
      props: {
        emailConnectorEnabled: '?boolean',
        essentialsAppEnabled: '?boolean'
      },
      "extends": 'Metadata'
    },
    EssentialsTrialOrgSettings: {
      type: 'EssentialsTrialOrgSettings',
      props: {
        enableSampleDataDeleted: '?boolean'
      },
      "extends": 'Metadata'
    },
    EventSettings: {
      type: 'EventSettings',
      props: {
        enableApexLimitEvents: '?boolean',
        enableDeleteMonitoringData: '?boolean',
        enableDynamicStreamingChannel: '?boolean',
        enableEventLogWaveIntegration: '?boolean',
        enableLoginForensics: '?boolean',
        enableStreamingApi: '?boolean',
        enableTerminateOldestSession: '?boolean',
        enableTransactionSecurityPolicies: '?boolean'
      },
      "extends": 'Metadata'
    },
    ExperienceBundleSettings: {
      type: 'ExperienceBundleSettings',
      props: {
        enableExperienceBundleMetadata: '?boolean'
      },
      "extends": 'Metadata'
    },
    ExternalDataSource: {
      type: 'ExternalDataSource',
      props: {
        authProvider: '?string',
        certificate: '?string',
        customConfiguration: '?string',
        customHttpHeaders: ['CustomHttpHeader'],
        endpoint: '?string',
        isWritable: '?boolean',
        label: 'string',
        oauthRefreshToken: '?string',
        oauthScope: '?string',
        oauthToken: '?string',
        password: '?string',
        principalType: 'string',
        protocol: 'string',
        repository: '?string',
        type: 'string',
        username: '?string',
        version: '?string'
      },
      "extends": 'Metadata'
    },
    CustomHttpHeader: {
      type: 'CustomHttpHeader',
      props: {
        description: '?string',
        headerFieldName: 'string',
        headerFieldValue: 'string',
        isActive: '?boolean'
      }
    },
    ExternalServiceRegistration: {
      type: 'ExternalServiceRegistration',
      props: {
        description: '?string',
        label: 'string',
        namedCredential: '?string',
        schema: '?string',
        schemaType: '?string',
        schemaUrl: '?string',
        status: 'string'
      },
      "extends": 'Metadata'
    },
    ExternalServicesSettings: {
      type: 'ExternalServicesSettings',
      props: {
        enableEnhancedExternalServices: '?boolean'
      },
      "extends": 'Metadata'
    },
    FieldServiceSettings: {
      type: 'FieldServiceSettings',
      props: {
        capacityUsageCalcClassId: '?string',
        doesAllowEditSaForCrew: '?boolean',
        doesShareSaParentWoWithAr: '?boolean',
        doesShareSaWithAr: '?boolean',
        enableWorkOrders: '?boolean',
        fieldServiceNotificationsOrgPref: '?boolean',
        fieldServiceOrgPref: '?boolean',
        isGeoCodeSyncEnabled: '?boolean',
        isLocationHistoryEnabled: '?boolean',
        serviceAppointmentsDueDateOffsetOrgValue: '?number',
        workOrderLineItemSearchFields: ['string'],
        workOrderSearchFields: ['string']
      },
      "extends": 'Metadata'
    },
    FileUploadAndDownloadSecuritySettings: {
      type: 'FileUploadAndDownloadSecuritySettings',
      props: {
        dispositions: ['FileTypeDispositionAssignmentBean'],
        noHtmlUploadAsAttachment: 'boolean'
      },
      "extends": 'Metadata'
    },
    FileTypeDispositionAssignmentBean: {
      type: 'FileTypeDispositionAssignmentBean',
      props: {
        behavior: 'string',
        fileType: 'string',
        securityRiskFileType: 'boolean'
      }
    },
    FilesConnectSettings: {
      type: 'FilesConnectSettings',
      props: {
        enableContentHubAllowed: '?boolean',
        enableContentHubCvtLinksAllowed: '?boolean',
        enableContentHubEOSearchLayout: '?boolean'
      },
      "extends": 'Metadata'
    },
    FlexiPage: {
      type: 'FlexiPage',
      props: {
        description: '?string',
        flexiPageRegions: ['FlexiPageRegion'],
        masterLabel: 'string',
        parentFlexiPage: '?string',
        platformActionlist: '?PlatformActionList',
        quickActionList: '?QuickActionList',
        sobjectType: '?string',
        template: 'FlexiPageTemplateInstance',
        type: 'string'
      },
      "extends": 'Metadata'
    },
    FlexiPageRegion: {
      type: 'FlexiPageRegion',
      props: {
        appendable: '?string',
        componentInstances: ['ComponentInstance'],
        mode: '?string',
        name: 'string',
        prependable: '?string',
        replaceable: '?string',
        type: 'string'
      }
    },
    ComponentInstance: {
      type: 'ComponentInstance',
      props: {
        componentInstanceProperties: ['ComponentInstanceProperty'],
        componentName: 'string',
        visibilityRule: '?UiFormulaRule'
      }
    },
    ComponentInstanceProperty: {
      type: 'ComponentInstanceProperty',
      props: {
        name: '?string',
        type: '?string',
        value: '?string'
      }
    },
    UiFormulaRule: {
      type: 'UiFormulaRule',
      props: {
        booleanFilter: '?string',
        criteria: ['UiFormulaCriterion']
      }
    },
    UiFormulaCriterion: {
      type: 'UiFormulaCriterion',
      props: {
        leftValue: 'string',
        operator: 'string',
        rightValue: '?string'
      }
    },
    PlatformActionList: {
      type: 'PlatformActionList',
      props: {
        actionListContext: 'string',
        platformActionListItems: ['PlatformActionListItem'],
        relatedSourceEntity: '?string'
      },
      "extends": 'Metadata'
    },
    PlatformActionListItem: {
      type: 'PlatformActionListItem',
      props: {
        actionName: 'string',
        actionType: 'string',
        sortOrder: 'number',
        subtype: '?string'
      }
    },
    QuickActionList: {
      type: 'QuickActionList',
      props: {
        quickActionListItems: ['QuickActionListItem']
      }
    },
    QuickActionListItem: {
      type: 'QuickActionListItem',
      props: {
        quickActionName: 'string'
      }
    },
    FlexiPageTemplateInstance: {
      type: 'FlexiPageTemplateInstance',
      props: {
        name: 'string',
        properties: ['ComponentInstanceProperty']
      }
    },
    Flow: {
      type: 'Flow',
      props: {
        actionCalls: ['FlowActionCall'],
        apexPluginCalls: ['FlowApexPluginCall'],
        assignments: ['FlowAssignment'],
        choices: ['FlowChoice'],
        constants: ['FlowConstant'],
        decisions: ['FlowDecision'],
        description: '?string',
        dynamicChoiceSets: ['FlowDynamicChoiceSet'],
        formulas: ['FlowFormula'],
        interviewLabel: '?string',
        isAdditionalPermissionRequiredToRun: '?boolean',
        isTemplate: '?boolean',
        label: 'string',
        loops: ['FlowLoop'],
        processMetadataValues: ['FlowMetadataValue'],
        processType: '?string',
        recordCreates: ['FlowRecordCreate'],
        recordDeletes: ['FlowRecordDelete'],
        recordLookups: ['FlowRecordLookup'],
        recordUpdates: ['FlowRecordUpdate'],
        screens: ['FlowScreen'],
        stages: ['FlowStage'],
        start: '?FlowStart',
        startElementReference: '?string',
        status: '?string',
        steps: ['FlowStep'],
        subflows: ['FlowSubflow'],
        textTemplates: ['FlowTextTemplate'],
        variables: ['FlowVariable'],
        waits: ['FlowWait']
      },
      "extends": 'Metadata'
    },
    FlowActionCall: {
      type: 'FlowActionCall',
      props: {
        actionName: 'string',
        actionType: 'string',
        connector: '?FlowConnector',
        faultConnector: '?FlowConnector',
        inputParameters: ['FlowActionCallInputParameter'],
        outputParameters: ['FlowActionCallOutputParameter']
      },
      "extends": 'FlowNode'
    },
    FlowNode: {
      type: 'FlowNode',
      props: {
        label: '?string',
        locationX: 'number',
        locationY: 'number'
      },
      "extends": 'FlowElement'
    },
    FlowElement: {
      type: 'FlowElement',
      props: {
        description: '?string',
        name: '?string'
      },
      "extends": 'FlowBaseElement'
    },
    FlowBaseElement: {
      type: 'FlowBaseElement',
      props: {
        processMetadataValues: ['FlowMetadataValue']
      }
    },
    FlowMetadataValue: {
      type: 'FlowMetadataValue',
      props: {
        name: 'string',
        value: '?FlowElementReferenceOrValue'
      }
    },
    FlowElementReferenceOrValue: {
      type: 'FlowElementReferenceOrValue',
      props: {
        booleanValue: '?boolean',
        dateTimeValue: '?string',
        dateValue: '?string',
        elementReference: '?string',
        numberValue: '?number',
        stringValue: '?string'
      }
    },
    FlowActionCallInputParameter: {
      type: 'FlowActionCallInputParameter',
      props: {
        name: 'string',
        value: '?FlowElementReferenceOrValue'
      },
      "extends": 'FlowBaseElement'
    },
    FlowActionCallOutputParameter: {
      type: 'FlowActionCallOutputParameter',
      props: {
        assignToReference: 'string',
        name: 'string'
      },
      "extends": 'FlowBaseElement'
    },
    FlowApexPluginCallInputParameter: {
      type: 'FlowApexPluginCallInputParameter',
      props: {
        name: 'string',
        value: '?FlowElementReferenceOrValue'
      },
      "extends": 'FlowBaseElement'
    },
    FlowApexPluginCallOutputParameter: {
      type: 'FlowApexPluginCallOutputParameter',
      props: {
        assignToReference: 'string',
        name: 'string'
      },
      "extends": 'FlowBaseElement'
    },
    FlowAssignmentItem: {
      type: 'FlowAssignmentItem',
      props: {
        assignToReference: 'string',
        operator: 'string',
        value: '?FlowElementReferenceOrValue'
      },
      "extends": 'FlowBaseElement'
    },
    FlowChoiceUserInput: {
      type: 'FlowChoiceUserInput',
      props: {
        isRequired: '?boolean',
        promptText: '?string',
        validationRule: '?FlowInputValidationRule'
      },
      "extends": 'FlowBaseElement'
    },
    FlowInputValidationRule: {
      type: 'FlowInputValidationRule',
      props: {
        errorMessage: 'string',
        formulaExpression: 'string'
      }
    },
    FlowCondition: {
      type: 'FlowCondition',
      props: {
        leftValueReference: 'string',
        operator: 'string',
        rightValue: '?FlowElementReferenceOrValue'
      },
      "extends": 'FlowBaseElement'
    },
    FlowConnector: {
      type: 'FlowConnector',
      props: {
        targetReference: 'string'
      },
      "extends": 'FlowBaseElement'
    },
    FlowInputFieldAssignment: {
      type: 'FlowInputFieldAssignment',
      props: {
        field: 'string',
        value: '?FlowElementReferenceOrValue'
      },
      "extends": 'FlowBaseElement'
    },
    FlowOutputFieldAssignment: {
      type: 'FlowOutputFieldAssignment',
      props: {
        assignToReference: 'string',
        field: 'string'
      },
      "extends": 'FlowBaseElement'
    },
    FlowRecordFilter: {
      type: 'FlowRecordFilter',
      props: {
        field: 'string',
        operator: 'string',
        value: '?FlowElementReferenceOrValue'
      },
      "extends": 'FlowBaseElement'
    },
    FlowScreenFieldInputParameter: {
      type: 'FlowScreenFieldInputParameter',
      props: {
        name: 'string',
        value: '?FlowElementReferenceOrValue'
      },
      "extends": 'FlowBaseElement'
    },
    FlowScreenFieldOutputParameter: {
      type: 'FlowScreenFieldOutputParameter',
      props: {
        assignToReference: 'string',
        name: 'string'
      },
      "extends": 'FlowBaseElement'
    },
    FlowScreenRule: {
      type: 'FlowScreenRule',
      props: {
        conditionLogic: '?string',
        conditions: ['FlowCondition'],
        label: 'string',
        ruleActions: ['FlowScreenRuleAction']
      },
      "extends": 'FlowBaseElement'
    },
    FlowScreenRuleAction: {
      type: 'FlowScreenRuleAction',
      props: {
        attribute: 'string',
        fieldReference: 'string',
        value: '?FlowElementReferenceOrValue'
      },
      "extends": 'FlowBaseElement'
    },
    FlowSubflowInputAssignment: {
      type: 'FlowSubflowInputAssignment',
      props: {
        name: 'string',
        value: '?FlowElementReferenceOrValue'
      },
      "extends": 'FlowBaseElement'
    },
    FlowSubflowOutputAssignment: {
      type: 'FlowSubflowOutputAssignment',
      props: {
        assignToReference: 'string',
        name: 'string'
      },
      "extends": 'FlowBaseElement'
    },
    FlowVisibilityRule: {
      type: 'FlowVisibilityRule',
      props: {
        conditionLogic: '?string',
        conditions: ['FlowCondition']
      },
      "extends": 'FlowBaseElement'
    },
    FlowWaitEventInputParameter: {
      type: 'FlowWaitEventInputParameter',
      props: {
        name: 'string',
        value: '?FlowElementReferenceOrValue'
      },
      "extends": 'FlowBaseElement'
    },
    FlowWaitEventOutputParameter: {
      type: 'FlowWaitEventOutputParameter',
      props: {
        assignToReference: 'string',
        name: 'string'
      },
      "extends": 'FlowBaseElement'
    },
    FlowChoice: {
      type: 'FlowChoice',
      props: {
        choiceText: 'string',
        dataType: 'string',
        userInput: '?FlowChoiceUserInput',
        value: '?FlowElementReferenceOrValue'
      },
      "extends": 'FlowElement'
    },
    FlowConstant: {
      type: 'FlowConstant',
      props: {
        dataType: 'string',
        value: '?FlowElementReferenceOrValue'
      },
      "extends": 'FlowElement'
    },
    FlowDynamicChoiceSet: {
      type: 'FlowDynamicChoiceSet',
      props: {
        dataType: 'string',
        displayField: 'string',
        filters: ['FlowRecordFilter'],
        limit: '?number',
        object: 'string',
        outputAssignments: ['FlowOutputFieldAssignment'],
        picklistField: '?string',
        picklistObject: '?string',
        sortField: '?string',
        sortOrder: '?string',
        valueField: '?string'
      },
      "extends": 'FlowElement'
    },
    FlowFormula: {
      type: 'FlowFormula',
      props: {
        dataType: '?string',
        expression: 'string',
        scale: '?number'
      },
      "extends": 'FlowElement'
    },
    FlowRule: {
      type: 'FlowRule',
      props: {
        conditionLogic: 'string',
        conditions: ['FlowCondition'],
        connector: '?FlowConnector',
        label: 'string'
      },
      "extends": 'FlowElement'
    },
    FlowScreenField: {
      type: 'FlowScreenField',
      props: {
        choiceReferences: ['string'],
        dataType: '?string',
        defaultSelectedChoiceReference: '?string',
        defaultValue: '?FlowElementReferenceOrValue',
        extensionName: '?string',
        fieldText: '?string',
        fieldType: 'string',
        helpText: '?string',
        inputParameters: ['FlowScreenFieldInputParameter'],
        isRequired: '?boolean',
        isVisible: '?boolean',
        outputParameters: ['FlowScreenFieldOutputParameter'],
        scale: '?number',
        storeOutputAutomatically: '?boolean',
        validationRule: '?FlowInputValidationRule',
        visibilityRule: '?FlowVisibilityRule'
      },
      "extends": 'FlowElement'
    },
    FlowStage: {
      type: 'FlowStage',
      props: {
        isActive: 'boolean',
        label: 'string',
        stageOrder: 'number'
      },
      "extends": 'FlowElement'
    },
    FlowTextTemplate: {
      type: 'FlowTextTemplate',
      props: {
        text: 'string'
      },
      "extends": 'FlowElement'
    },
    FlowVariable: {
      type: 'FlowVariable',
      props: {
        apexClass: '?string',
        dataType: 'string',
        isCollection: '?boolean',
        isInput: '?boolean',
        isOutput: '?boolean',
        objectType: '?string',
        scale: '?number',
        value: '?FlowElementReferenceOrValue'
      },
      "extends": 'FlowElement'
    },
    FlowWaitEvent: {
      type: 'FlowWaitEvent',
      props: {
        conditionLogic: '?string',
        conditions: ['FlowCondition'],
        connector: 'FlowConnector',
        eventType: 'string',
        inputParameters: ['FlowWaitEventInputParameter'],
        label: 'string',
        outputParameters: ['FlowWaitEventOutputParameter']
      },
      "extends": 'FlowElement'
    },
    FlowApexPluginCall: {
      type: 'FlowApexPluginCall',
      props: {
        apexClass: 'string',
        connector: '?FlowConnector',
        faultConnector: '?FlowConnector',
        inputParameters: ['FlowApexPluginCallInputParameter'],
        outputParameters: ['FlowApexPluginCallOutputParameter']
      },
      "extends": 'FlowNode'
    },
    FlowAssignment: {
      type: 'FlowAssignment',
      props: {
        assignmentItems: ['FlowAssignmentItem'],
        connector: '?FlowConnector'
      },
      "extends": 'FlowNode'
    },
    FlowDecision: {
      type: 'FlowDecision',
      props: {
        defaultConnector: '?FlowConnector',
        defaultConnectorLabel: '?string',
        rules: ['FlowRule']
      },
      "extends": 'FlowNode'
    },
    FlowLoop: {
      type: 'FlowLoop',
      props: {
        assignNextValueToReference: 'string',
        collectionReference: 'string',
        iterationOrder: '?string',
        nextValueConnector: '?FlowConnector',
        noMoreValuesConnector: '?FlowConnector'
      },
      "extends": 'FlowNode'
    },
    FlowRecordCreate: {
      type: 'FlowRecordCreate',
      props: {
        assignRecordIdToReference: '?string',
        connector: '?FlowConnector',
        faultConnector: '?FlowConnector',
        inputAssignments: ['FlowInputFieldAssignment'],
        inputReference: '?string',
        object: '?string'
      },
      "extends": 'FlowNode'
    },
    FlowRecordDelete: {
      type: 'FlowRecordDelete',
      props: {
        connector: '?FlowConnector',
        faultConnector: '?FlowConnector',
        filters: ['FlowRecordFilter'],
        inputReference: '?string',
        object: '?string'
      },
      "extends": 'FlowNode'
    },
    FlowRecordLookup: {
      type: 'FlowRecordLookup',
      props: {
        assignNullValuesIfNoRecordsFound: '?boolean',
        connector: '?FlowConnector',
        faultConnector: '?FlowConnector',
        filters: ['FlowRecordFilter'],
        getFirstRecordOnly: '?boolean',
        object: 'string',
        outputAssignments: ['FlowOutputFieldAssignment'],
        outputReference: '?string',
        queriedFields: ['string'],
        sortField: '?string',
        sortOrder: '?string',
        storeOutputAutomatically: '?boolean'
      },
      "extends": 'FlowNode'
    },
    FlowRecordUpdate: {
      type: 'FlowRecordUpdate',
      props: {
        connector: '?FlowConnector',
        faultConnector: '?FlowConnector',
        filters: ['FlowRecordFilter'],
        inputAssignments: ['FlowInputFieldAssignment'],
        inputReference: '?string',
        object: '?string'
      },
      "extends": 'FlowNode'
    },
    FlowScreen: {
      type: 'FlowScreen',
      props: {
        allowBack: '?boolean',
        allowFinish: '?boolean',
        allowPause: '?boolean',
        connector: '?FlowConnector',
        fields: ['FlowScreenField'],
        helpText: '?string',
        pausedText: '?string',
        rules: ['FlowScreenRule'],
        showFooter: '?boolean',
        showHeader: '?boolean'
      },
      "extends": 'FlowNode'
    },
    FlowStart: {
      type: 'FlowStart',
      props: {
        connector: '?FlowConnector',
        filters: ['FlowRecordFilter'],
        object: '?string',
        schedule: '?FlowSchedule',
        triggerType: '?string'
      },
      "extends": 'FlowNode'
    },
    FlowSchedule: {
      type: 'FlowSchedule',
      props: {
        frequency: '?string',
        startDate: '?string',
        startTime: '?string'
      }
    },
    FlowStep: {
      type: 'FlowStep',
      props: {
        connectors: ['FlowConnector']
      },
      "extends": 'FlowNode'
    },
    FlowSubflow: {
      type: 'FlowSubflow',
      props: {
        connector: '?FlowConnector',
        flowName: 'string',
        inputAssignments: ['FlowSubflowInputAssignment'],
        outputAssignments: ['FlowSubflowOutputAssignment']
      },
      "extends": 'FlowNode'
    },
    FlowWait: {
      type: 'FlowWait',
      props: {
        defaultConnector: '?FlowConnector',
        defaultConnectorLabel: 'string',
        faultConnector: '?FlowConnector',
        waitEvents: ['FlowWaitEvent']
      },
      "extends": 'FlowNode'
    },
    FlowCategory: {
      type: 'FlowCategory',
      props: {
        description: '?string',
        flowCategoryItems: ['FlowCategoryItems'],
        masterLabel: 'string'
      },
      "extends": 'Metadata'
    },
    FlowCategoryItems: {
      type: 'FlowCategoryItems',
      props: {
        flow: 'string'
      }
    },
    FlowDefinition: {
      type: 'FlowDefinition',
      props: {
        activeVersionNumber: '?number',
        description: '?string',
        masterLabel: '?string'
      },
      "extends": 'Metadata'
    },
    FlowSettings: {
      type: 'FlowSettings',
      props: {
        enableFlowBREncodedFixEnabled: '?boolean',
        enableFlowDeployAsActiveEnabled: '?boolean',
        enableFlowFieldFilterEnabled: '?boolean',
        enableFlowFormulasFixEnabled: '?boolean',
        enableFlowInterviewSharingEnabled: '?boolean',
        enableFlowNullPreviousValueFix: '?boolean',
        enableFlowPauseEnabled: '?boolean',
        enableFlowUseApexExceptionEmail: '?boolean',
        enableInvocableFlowFixEnabled: '?boolean',
        enableLightningRuntimeEnabled: '?boolean',
        enableUseFlowBuilder: '?boolean',
        isAccessToInvokedApexRequired: '?boolean',
        isEnhancedFlowListViewVisible: '?boolean',
        isManageFlowRequiredForAutomationCharts: '?boolean'
      },
      "extends": 'Metadata'
    },
    Folder: {
      type: 'Folder',
      props: {
        accessType: '?string',
        folderShares: ['FolderShare'],
        name: 'string',
        publicFolderAccess: '?string',
        sharedTo: '?SharedTo'
      },
      "extends": 'Metadata'
    },
    FolderShare: {
      type: 'FolderShare',
      props: {
        accessLevel: 'string',
        sharedTo: 'string',
        sharedToType: 'string'
      }
    },
    DashboardFolder: {
      type: 'DashboardFolder',
      props: {},
      "extends": 'Folder'
    },
    DocumentFolder: {
      type: 'DocumentFolder',
      props: {},
      "extends": 'Folder'
    },
    EmailFolder: {
      type: 'EmailFolder',
      props: {},
      "extends": 'Folder'
    },
    ReportFolder: {
      type: 'ReportFolder',
      props: {},
      "extends": 'Folder'
    },
    ForecastingSettings: {
      type: 'ForecastingSettings',
      props: {
        defaultToPersonalCurrency: '?boolean',
        enableForecasts: '?boolean',
        forecastingCategoryMappings: ['ForecastingCategoryMapping'],
        forecastingDisplayedFamilySettings: ['ForecastingDisplayedFamilySettings'],
        forecastingTypeSettings: ['ForecastingTypeSettings']
      },
      "extends": 'Metadata'
    },
    ForecastingCategoryMapping: {
      type: 'ForecastingCategoryMapping',
      props: {
        forecastingItemCategoryApiName: 'string',
        weightedSourceCategories: ['WeightedSourceCategory']
      }
    },
    WeightedSourceCategory: {
      type: 'WeightedSourceCategory',
      props: {
        sourceCategoryApiName: 'string',
        weight: 'number'
      }
    },
    ForecastingDisplayedFamilySettings: {
      type: 'ForecastingDisplayedFamilySettings',
      props: {
        productFamily: '?string'
      }
    },
    ForecastingTypeSettings: {
      type: 'ForecastingTypeSettings',
      props: {
        active: 'boolean',
        adjustmentsSettings: 'AdjustmentsSettings',
        displayedCategoryApiNames: ['string'],
        forecastRangeSettings: 'ForecastRangeSettings',
        forecastedCategoryApiNames: ['string'],
        forecastingDateType: 'string',
        hasProductFamily: 'boolean',
        isAmount: 'boolean',
        isAvailable: 'boolean',
        isQuantity: 'boolean',
        managerAdjustableCategoryApiNames: ['string'],
        masterLabel: 'string',
        name: 'string',
        opportunityListFieldsLabelMappings: ['OpportunityListFieldsLabelMapping'],
        opportunityListFieldsSelectedSettings: 'OpportunityListFieldsSelectedSettings',
        opportunityListFieldsUnselectedSettings: 'OpportunityListFieldsUnselectedSettings',
        opportunitySplitName: '?string',
        ownerAdjustableCategoryApiNames: ['string'],
        quotasSettings: 'QuotasSettings',
        territory2ModelName: '?string'
      }
    },
    AdjustmentsSettings: {
      type: 'AdjustmentsSettings',
      props: {
        enableAdjustments: 'boolean',
        enableOwnerAdjustments: 'boolean'
      }
    },
    ForecastRangeSettings: {
      type: 'ForecastRangeSettings',
      props: {
        beginning: 'number',
        displaying: 'number',
        periodType: 'string'
      }
    },
    OpportunityListFieldsLabelMapping: {
      type: 'OpportunityListFieldsLabelMapping',
      props: {
        field: 'string',
        label: 'string'
      }
    },
    OpportunityListFieldsSelectedSettings: {
      type: 'OpportunityListFieldsSelectedSettings',
      props: {
        field: ['string']
      }
    },
    OpportunityListFieldsUnselectedSettings: {
      type: 'OpportunityListFieldsUnselectedSettings',
      props: {
        field: ['string']
      }
    },
    QuotasSettings: {
      type: 'QuotasSettings',
      props: {
        showQuotas: 'boolean'
      }
    },
    Form: {
      type: 'Form',
      props: {
        description: '?string',
        formSections: ['FormSection'],
        masterLabel: 'string'
      },
      "extends": 'Metadata'
    },
    FormSection: {
      type: 'FormSection',
      props: {
        formColumns: ['FormColumn'],
        masterLabel: 'string',
        tabOrderType: 'string'
      },
      "extends": 'Metadata'
    },
    FormColumn: {
      type: 'FormColumn',
      props: {
        formItems: ['FormItem']
      }
    },
    FormItem: {
      type: 'FormItem',
      props: {
        emptySpace: '?boolean',
        expression: '?string',
        formLayoutableItem: '?string',
        helpText: '?string'
      }
    },
    FormulaSettings: {
      type: 'FormulaSettings',
      props: {
        enableDSTAwareDatevalue: '?boolean'
      },
      "extends": 'Metadata'
    },
    GlobalValueSet: {
      type: 'GlobalValueSet',
      props: {
        customValue: ['CustomValue'],
        description: '?string',
        masterLabel: 'string',
        sorted: 'boolean'
      },
      "extends": 'Metadata'
    },
    GlobalValueSetTranslation: {
      type: 'GlobalValueSetTranslation',
      props: {
        valueTranslation: ['ValueTranslation']
      },
      "extends": 'Metadata'
    },
    ValueTranslation: {
      type: 'ValueTranslation',
      props: {
        masterLabel: 'string',
        translation: '?string'
      }
    },
    GoogleAppsSettings: {
      type: 'GoogleAppsSettings',
      props: {
        enableGmailButtons: '?boolean',
        enableGmailButtonsAndLinks: '?boolean',
        enableGmailLinks: '?boolean',
        enableGoogleDocs: '?boolean',
        enableGoogleDocsTab: '?boolean',
        enableGoogleTalk: '?boolean',
        googleAppsDomain: '?string',
        googleAppsDomainLinked: '?boolean',
        googleAppsDomainValidated: '?boolean'
      },
      "extends": 'Metadata'
    },
    Group: {
      type: 'Group',
      props: {
        doesIncludeBosses: '?boolean',
        name: 'string'
      },
      "extends": 'Metadata'
    },
    HighVelocitySalesSettings: {
      type: 'HighVelocitySalesSettings',
      props: {
        enableDispositionCategory: '?boolean',
        enableEngagementWaveAnalyticsPref: '?boolean',
        enableHighVelocitySales: '?boolean',
        enableHighVelocitySalesSetup: '?boolean'
      },
      "extends": 'Metadata'
    },
    HomePageComponent: {
      type: 'HomePageComponent',
      props: {
        body: '?string',
        height: '?number',
        links: ['string'],
        page: '?string',
        pageComponentType: 'string',
        showLabel: '?boolean',
        showScrollbars: '?boolean',
        width: '?string'
      },
      "extends": 'Metadata'
    },
    HomePageLayout: {
      type: 'HomePageLayout',
      props: {
        narrowComponents: ['string'],
        wideComponents: ['string']
      },
      "extends": 'Metadata'
    },
    IdeasSettings: {
      type: 'IdeasSettings',
      props: {
        enableChatterProfile: '?boolean',
        enableHtmlIdea: '?boolean',
        enableIdeaMultipleCategory: '?boolean',
        enableIdeaThemes: '?boolean',
        enableIdeas: '?boolean',
        enableIdeasControllerExtensions: '?boolean',
        enableIdeasReputation: '?boolean',
        halfLife: '?number',
        ideasProfilePage: '?string'
      },
      "extends": 'Metadata'
    },
    IndustriesManufacturingSettings: {
      type: 'IndustriesManufacturingSettings',
      props: {
        enableIndManufacturing: '?boolean',
        enableIndustriesMfgAccountForecast: '?boolean'
      },
      "extends": 'Metadata'
    },
    IndustriesSettings: {
      type: 'IndustriesSettings',
      props: {
        allowMultipleProducersToWorkOnSamePolicy: '?boolean',
        enableAccessToMasterListOfCoverageTypes: '?boolean',
        enableBlockResourceAvailabilityOrgPref: '?boolean',
        enableEventManagementOrgPref: '?boolean',
        enableHCReferralScoring: '?boolean',
        enableManyToManyRelationships: '?boolean',
        enableMortgageRlaTotalsOrgPref: '?boolean',
        enableMultiResourceOrgPref: '?boolean',
        enableObjectDetection: '?boolean',
        enableOverbookingOrgPref: '?boolean',
        enableProviderSearchSyncOrgPref: '?boolean',
        enableReferralScoring: '?boolean',
        enableSentimentAnalysis: '?boolean'
      },
      "extends": 'Metadata'
    },
    InstalledPackage: {
      type: 'InstalledPackage',
      props: {
        activateRSS: 'boolean',
        password: '?string',
        versionNumber: 'string'
      },
      "extends": 'Metadata'
    },
    IntegrationHubSettings: {
      type: 'IntegrationHubSettings',
      props: {
        canonicalName: '?string',
        canonicalNameBindingChar: '?string',
        description: '?string',
        isEnabled: '?boolean',
        isProtected: '?boolean',
        masterLabel: 'string',
        setupData: '?string',
        setupDefinition: '?string',
        setupNamespace: '?string',
        setupSimpleName: 'string',
        uUID: '?string',
        version: '?string',
        versionBuild: '?number',
        versionMajor: '?number',
        versionMinor: '?number',
        versionSetUuid: '?string'
      },
      "extends": 'Metadata'
    },
    IntegrationHubSettingsType: {
      type: 'IntegrationHubSettingsType',
      props: {
        canonicalName: '?string',
        canonicalNameBindingChar: '?string',
        description: '?string',
        isEnabled: '?boolean',
        isProtected: '?boolean',
        masterLabel: 'string',
        setupNamespace: '?string',
        setupSimpleName: 'string',
        uUID: '?string',
        version: '?string',
        versionBuild: '?number',
        versionMajor: '?number',
        versionMinor: '?number',
        versionSetUuid: '?string'
      },
      "extends": 'Metadata'
    },
    InvocableActionSettings: {
      type: 'InvocableActionSettings',
      props: {
        isPartialSaveAllowed: '?boolean'
      },
      "extends": 'Metadata'
    },
    IoTSettings: {
      type: 'IoTSettings',
      props: {
        enableIoT: '?boolean',
        enableIoTInsightsPilot: '?boolean',
        enableIoTUsageEmail: '?boolean'
      },
      "extends": 'Metadata'
    },
    IsvHammerSettings: {
      type: 'IsvHammerSettings',
      props: {
        enableIsvHammerSubIsOptedOut: '?boolean'
      },
      "extends": 'Metadata'
    },
    KeywordList: {
      type: 'KeywordList',
      props: {
        description: '?string',
        keywords: ['Keyword'],
        masterLabel: 'string'
      },
      "extends": 'Metadata'
    },
    Keyword: {
      type: 'Keyword',
      props: {
        keyword: 'string'
      }
    },
    KnowledgeSettings: {
      type: 'KnowledgeSettings',
      props: {
        answers: '?KnowledgeAnswerSettings',
        cases: '?KnowledgeCaseSettings',
        defaultLanguage: '?string',
        enableChatterQuestionKBDeflection: '?boolean',
        enableCreateEditOnArticlesTab: '?boolean',
        enableExternalMediaContent: '?boolean',
        enableKnowledge: '?boolean',
        enableKnowledgeArticleTextHighlights: '?boolean',
        enableKnowledgeKeywordAutoComplete: '?boolean',
        enableKnowledgeTitleAutoComplete: '?boolean',
        enableLightningKbAutoLoadRichTextField: '?boolean',
        enableLightningKnowledge: '?boolean',
        languages: '?KnowledgeLanguageSettings',
        showArticleSummariesCustomerPortal: '?boolean',
        showArticleSummariesInternalApp: '?boolean',
        showArticleSummariesPartnerPortal: '?boolean',
        showValidationStatusField: '?boolean',
        suggestedArticles: '?KnowledgeSuggestedArticlesSettings'
      },
      "extends": 'Metadata'
    },
    KnowledgeAnswerSettings: {
      type: 'KnowledgeAnswerSettings',
      props: {
        assignTo: '?string',
        defaultArticleType: '?string',
        enableArticleCreation: '?boolean'
      }
    },
    KnowledgeCaseSettings: {
      type: 'KnowledgeCaseSettings',
      props: {
        articlePDFCreationProfile: '?string',
        articlePublicSharingCommunities: '?KnowledgeCommunitiesSettings',
        articlePublicSharingSites: '?KnowledgeSitesSettings',
        articlePublicSharingSitesChatterAnswers: '?KnowledgeSitesSettings',
        assignTo: '?string',
        customizationClass: '?string',
        defaultContributionArticleType: '?string',
        editor: '?string',
        enableArticleCreation: '?boolean',
        enableArticlePublicSharingSites: '?boolean',
        enableCaseDataCategoryMapping: '?boolean',
        useProfileForPDFCreation: '?boolean'
      }
    },
    KnowledgeCommunitiesSettings: {
      type: 'KnowledgeCommunitiesSettings',
      props: {
        community: ['string']
      }
    },
    KnowledgeSitesSettings: {
      type: 'KnowledgeSitesSettings',
      props: {
        site: ['string']
      }
    },
    KnowledgeLanguageSettings: {
      type: 'KnowledgeLanguageSettings',
      props: {
        language: ['KnowledgeLanguage']
      }
    },
    KnowledgeLanguage: {
      type: 'KnowledgeLanguage',
      props: {
        active: '?boolean',
        defaultAssignee: '?string',
        defaultAssigneeType: '?string',
        defaultReviewer: '?string',
        defaultReviewerType: '?string',
        name: 'string'
      }
    },
    KnowledgeSuggestedArticlesSettings: {
      type: 'KnowledgeSuggestedArticlesSettings',
      props: {
        caseFields: '?KnowledgeCaseFieldsSettings',
        useSuggestedArticlesForCase: '?boolean',
        workOrderFields: '?KnowledgeWorkOrderFieldsSettings',
        workOrderLineItemFields: '?KnowledgeWorkOrderLineItemFieldsSettings'
      }
    },
    KnowledgeCaseFieldsSettings: {
      type: 'KnowledgeCaseFieldsSettings',
      props: {
        field: ['KnowledgeCaseField']
      }
    },
    KnowledgeCaseField: {
      type: 'KnowledgeCaseField',
      props: {
        name: '?string'
      }
    },
    KnowledgeWorkOrderFieldsSettings: {
      type: 'KnowledgeWorkOrderFieldsSettings',
      props: {
        field: ['KnowledgeWorkOrderField']
      }
    },
    KnowledgeWorkOrderField: {
      type: 'KnowledgeWorkOrderField',
      props: {
        name: '?string'
      }
    },
    KnowledgeWorkOrderLineItemFieldsSettings: {
      type: 'KnowledgeWorkOrderLineItemFieldsSettings',
      props: {
        field: ['KnowledgeWorkOrderLineItemField']
      }
    },
    KnowledgeWorkOrderLineItemField: {
      type: 'KnowledgeWorkOrderLineItemField',
      props: {
        name: '?string'
      }
    },
    LanguageSettings: {
      type: 'LanguageSettings',
      props: {
        enableCanadaIcuFormat: '?boolean',
        enableEndUserLanguages: '?boolean',
        enableICULocaleDateFormat: '?boolean',
        enablePlatformLanguages: '?boolean',
        enableTranslationWorkbench: '?boolean',
        useLanguageFallback: '?boolean'
      },
      "extends": 'Metadata'
    },
    Layout: {
      type: 'Layout',
      props: {
        customButtons: ['string'],
        customConsoleComponents: '?CustomConsoleComponents',
        emailDefault: '?boolean',
        excludeButtons: ['string'],
        feedLayout: '?FeedLayout',
        headers: ['string'],
        layoutSections: ['LayoutSection'],
        miniLayout: '?MiniLayout',
        multilineLayoutFields: ['string'],
        platformActionList: '?PlatformActionList',
        quickActionList: '?QuickActionList',
        relatedContent: '?RelatedContent',
        relatedLists: ['RelatedListItem'],
        relatedObjects: ['string'],
        runAssignmentRulesDefault: '?boolean',
        showEmailCheckbox: '?boolean',
        showHighlightsPanel: '?boolean',
        showInteractionLogPanel: '?boolean',
        showKnowledgeComponent: '?boolean',
        showRunAssignmentRulesCheckbox: '?boolean',
        showSolutionSection: '?boolean',
        showSubmitAndAttachButton: '?boolean',
        summaryLayout: '?SummaryLayout'
      },
      "extends": 'Metadata'
    },
    CustomConsoleComponents: {
      type: 'CustomConsoleComponents',
      props: {
        primaryTabComponents: '?PrimaryTabComponents',
        subtabComponents: '?SubtabComponents'
      }
    },
    PrimaryTabComponents: {
      type: 'PrimaryTabComponents',
      props: {
        containers: ['Container']
      }
    },
    Container: {
      type: 'Container',
      props: {
        height: '?number',
        isContainerAutoSizeEnabled: 'boolean',
        region: 'string',
        sidebarComponents: ['SidebarComponent'],
        style: 'string',
        unit: 'string',
        width: '?number'
      }
    },
    SidebarComponent: {
      type: 'SidebarComponent',
      props: {
        componentType: 'string',
        createAction: '?string',
        enableLinking: '?boolean',
        height: '?number',
        label: '?string',
        lookup: '?string',
        page: '?string',
        relatedLists: ['RelatedList'],
        unit: '?string',
        updateAction: '?string',
        width: '?number'
      }
    },
    RelatedList: {
      type: 'RelatedList',
      props: {
        hideOnDetail: 'boolean',
        name: 'string'
      }
    },
    SubtabComponents: {
      type: 'SubtabComponents',
      props: {
        containers: ['Container']
      }
    },
    FeedLayout: {
      type: 'FeedLayout',
      props: {
        autocollapsePublisher: '?boolean',
        compactFeed: '?boolean',
        feedFilterPosition: '?string',
        feedFilters: ['FeedLayoutFilter'],
        fullWidthFeed: '?boolean',
        hideSidebar: '?boolean',
        highlightExternalFeedItems: '?boolean',
        leftComponents: ['FeedLayoutComponent'],
        rightComponents: ['FeedLayoutComponent'],
        useInlineFiltersInConsole: '?boolean'
      }
    },
    FeedLayoutFilter: {
      type: 'FeedLayoutFilter',
      props: {
        feedFilterName: '?string',
        feedFilterType: 'string',
        feedItemType: '?string'
      }
    },
    FeedLayoutComponent: {
      type: 'FeedLayoutComponent',
      props: {
        componentType: 'string',
        height: '?number',
        page: '?string'
      }
    },
    LayoutSection: {
      type: 'LayoutSection',
      props: {
        customLabel: '?boolean',
        detailHeading: '?boolean',
        editHeading: '?boolean',
        label: '?string',
        layoutColumns: ['LayoutColumn'],
        style: 'string'
      }
    },
    LayoutColumn: {
      type: 'LayoutColumn',
      props: {
        layoutItems: ['LayoutItem'],
        reserved: '?string'
      }
    },
    LayoutItem: {
      type: 'LayoutItem',
      props: {
        analyticsCloudComponent: '?AnalyticsCloudComponentLayoutItem',
        behavior: '?string',
        canvas: '?string',
        component: '?string',
        customLink: '?string',
        emptySpace: '?boolean',
        field: '?string',
        height: '?number',
        page: '?string',
        reportChartComponent: '?ReportChartComponentLayoutItem',
        scontrol: '?string',
        showLabel: '?boolean',
        showScrollbars: '?boolean',
        width: '?string'
      }
    },
    AnalyticsCloudComponentLayoutItem: {
      type: 'AnalyticsCloudComponentLayoutItem',
      props: {
        assetType: 'string',
        devName: 'string',
        error: '?string',
        filter: '?string',
        height: '?number',
        hideOnError: '?boolean',
        showHeader: '?boolean',
        showSharing: '?boolean',
        showTitle: '?boolean',
        width: '?string'
      }
    },
    ReportChartComponentLayoutItem: {
      type: 'ReportChartComponentLayoutItem',
      props: {
        cacheData: '?boolean',
        contextFilterableField: '?string',
        error: '?string',
        hideOnError: '?boolean',
        includeContext: '?boolean',
        reportName: 'string',
        showTitle: '?boolean',
        size: '?string'
      }
    },
    MiniLayout: {
      type: 'MiniLayout',
      props: {
        fields: ['string'],
        relatedLists: ['RelatedListItem']
      }
    },
    RelatedListItem: {
      type: 'RelatedListItem',
      props: {
        customButtons: ['string'],
        excludeButtons: ['string'],
        fields: ['string'],
        relatedList: 'string',
        sortField: '?string',
        sortOrder: '?string'
      }
    },
    RelatedContent: {
      type: 'RelatedContent',
      props: {
        relatedContentItems: ['RelatedContentItem']
      }
    },
    RelatedContentItem: {
      type: 'RelatedContentItem',
      props: {
        layoutItem: 'LayoutItem'
      }
    },
    SummaryLayout: {
      type: 'SummaryLayout',
      props: {
        masterLabel: 'string',
        sizeX: 'number',
        sizeY: '?number',
        sizeZ: '?number',
        summaryLayoutItems: ['SummaryLayoutItem'],
        summaryLayoutStyle: 'string'
      }
    },
    SummaryLayoutItem: {
      type: 'SummaryLayoutItem',
      props: {
        customLink: '?string',
        field: '?string',
        posX: 'number',
        posY: '?number',
        posZ: '?number'
      }
    },
    LeadConfigSettings: {
      type: 'LeadConfigSettings',
      props: {
        doesEnableLeadConvertDefaultSubjectBlankTaskCreation: '?boolean',
        doesHideOpportunityInConvertLeadWindow: '?boolean',
        doesPreserveLeadStatus: '?boolean',
        doesSelectNoOpportunityOnConvertLead: '?boolean',
        doesTrackHistory: '?boolean',
        enableConversionsOnMobile: '?boolean',
        enableOrgWideMergeAndDelete: '?boolean',
        shouldLeadConvertRequireValidation: '?boolean'
      },
      "extends": 'Metadata'
    },
    LeadConvertSettings: {
      type: 'LeadConvertSettings',
      props: {
        allowOwnerChange: '?boolean',
        objectMapping: ['ObjectMapping'],
        opportunityCreationOptions: '?string'
      },
      "extends": 'Metadata'
    },
    Letterhead: {
      type: 'Letterhead',
      props: {
        available: 'boolean',
        backgroundColor: 'string',
        bodyColor: 'string',
        bottomLine: 'LetterheadLine',
        description: '?string',
        footer: 'LetterheadHeaderFooter',
        header: 'LetterheadHeaderFooter',
        middleLine: 'LetterheadLine',
        name: 'string',
        topLine: 'LetterheadLine'
      },
      "extends": 'Metadata'
    },
    LetterheadLine: {
      type: 'LetterheadLine',
      props: {
        color: 'string',
        height: 'number'
      }
    },
    LetterheadHeaderFooter: {
      type: 'LetterheadHeaderFooter',
      props: {
        backgroundColor: 'string',
        height: 'number',
        horizontalAlignment: '?string',
        logo: '?string',
        verticalAlignment: '?string'
      }
    },
    LicenseDefinition: {
      type: 'LicenseDefinition',
      props: {
        aggregationGroup: 'string',
        description: '?string',
        isPublished: 'boolean',
        label: 'string',
        licensedCustomPermissions: ['LicensedCustomPermissions'],
        licensingAuthority: 'string',
        licensingAuthorityProvider: 'string',
        minPlatformVersion: 'number',
        origin: 'string',
        revision: 'number',
        trialLicenseDuration: 'number',
        trialLicenseQuantity: 'number'
      },
      "extends": 'Metadata'
    },
    LicensedCustomPermissions: {
      type: 'LicensedCustomPermissions',
      props: {
        customPermission: 'string',
        licenseDefinition: 'string'
      }
    },
    LightningBolt: {
      type: 'LightningBolt',
      props: {
        category: 'string',
        lightningBoltFeatures: ['LightningBoltFeatures'],
        lightningBoltImages: ['LightningBoltImages'],
        lightningBoltItems: ['LightningBoltItems'],
        masterLabel: 'string',
        publisher: 'string',
        summary: 'string'
      },
      "extends": 'Metadata'
    },
    LightningBoltFeatures: {
      type: 'LightningBoltFeatures',
      props: {
        description: '?string',
        order: 'number',
        title: 'string'
      }
    },
    LightningBoltImages: {
      type: 'LightningBoltImages',
      props: {
        image: 'string',
        order: 'number'
      }
    },
    LightningBoltItems: {
      type: 'LightningBoltItems',
      props: {
        name: 'string',
        type: 'string'
      }
    },
    LightningComponentBundle: {
      type: 'LightningComponentBundle',
      props: {
        apiVersion: '?number',
        description: '?string',
        isExplicitImport: '?boolean',
        isExposed: '?boolean',
        lwcResources: '?LwcResources',
        masterLabel: '?string',
        runtimeNamespace: '?string',
        targetConfigs: '?string',
        targets: '?Targets'
      },
      "extends": 'Metadata'
    },
    LwcResources: {
      type: 'LwcResources',
      props: {
        lwcResource: ['LwcResource']
      }
    },
    LwcResource: {
      type: 'LwcResource',
      props: {
        filePath: 'string',
        source: 'string'
      }
    },
    Targets: {
      type: 'Targets',
      props: {
        target: ['string']
      }
    },
    LightningExperienceSettings: {
      type: 'LightningExperienceSettings',
      props: {
        enableAccessCheckCrucPref: '?boolean',
        enableApiUserLtngOutAccessPref: '?boolean',
        enableAuraCDNPref: '?boolean',
        enableFeedbackInMobile: '?boolean',
        enableIE11DeprecationMsgHidden: '?boolean',
        enableIE11LEXCrucPref: '?boolean',
        enableInAppTooltips: '?boolean',
        enableLEXOnIpadEnabled: '?boolean',
        enableLexEndUsersNoSwitching: '?boolean',
        enableNavPersonalizationOptOut: '?boolean',
        enableRemoveThemeBrandBanner: '?boolean',
        enableS1BannerPref: '?boolean',
        enableS1BrowserEnabled: '?boolean',
        enableS1DesktopEnabled: '?boolean',
        enableS1UiLoggingEnabled: '?boolean',
        enableTryLightningOptOut: '?boolean',
        enableUseS1AlohaDesktop: '?boolean',
        enableUsersAreLightningOnly: '?boolean'
      },
      "extends": 'Metadata'
    },
    LightningExperienceTheme: {
      type: 'LightningExperienceTheme',
      props: {
        defaultBrandingSet: 'string',
        description: '?string',
        masterLabel: 'string',
        shouldOverrideLoadingImage: '?boolean'
      },
      "extends": 'Metadata'
    },
    LightningMessageChannel: {
      type: 'LightningMessageChannel',
      props: {
        description: '?string',
        isExposed: '?boolean',
        lightningMessageFields: ['LightningMessageField'],
        masterLabel: 'string'
      },
      "extends": 'Metadata'
    },
    LightningMessageField: {
      type: 'LightningMessageField',
      props: {
        description: '?string',
        fieldName: 'string'
      }
    },
    LightningOnboardingConfig: {
      type: 'LightningOnboardingConfig',
      props: {
        collaborationGroup: '?string',
        customQuestion: 'string',
        feedbackFormDaysFrequency: 'number',
        isCustom: 'boolean',
        masterLabel: 'string',
        sendFeedbackToSalesforce: 'boolean'
      },
      "extends": 'Metadata'
    },
    LiveAgentSettings: {
      type: 'LiveAgentSettings',
      props: {
        enableLiveAgent: '?boolean',
        enableQuickTextEnabled: '?boolean'
      },
      "extends": 'Metadata'
    },
    LiveChatAgentConfig: {
      type: 'LiveChatAgentConfig',
      props: {
        assignments: '?AgentConfigAssignments',
        autoGreeting: '?string',
        capacity: '?number',
        criticalWaitTime: '?number',
        customAgentName: '?string',
        enableAgentFileTransfer: '?boolean',
        enableAgentSneakPeek: '?boolean',
        enableAssistanceFlag: '?boolean',
        enableAutoAwayOnDecline: '?boolean',
        enableAutoAwayOnPushTimeout: '?boolean',
        enableChatConferencing: '?boolean',
        enableChatMonitoring: '?boolean',
        enableChatTransferToAgent: '?boolean',
        enableChatTransferToButton: '?boolean',
        enableChatTransferToSkill: '?boolean',
        enableLogoutSound: '?boolean',
        enableNotifications: '?boolean',
        enableRequestSound: '?boolean',
        enableSneakPeek: '?boolean',
        enableVisitorBlocking: '?boolean',
        enableWhisperMessage: '?boolean',
        label: 'string',
        supervisorDefaultAgentStatusFilter: '?string',
        supervisorDefaultButtonFilter: '?string',
        supervisorDefaultSkillFilter: '?string',
        supervisorSkills: '?SupervisorAgentConfigSkills',
        transferableButtons: '?AgentConfigButtons',
        transferableSkills: '?AgentConfigSkills'
      },
      "extends": 'Metadata'
    },
    AgentConfigAssignments: {
      type: 'AgentConfigAssignments',
      props: {
        profiles: '?AgentConfigProfileAssignments',
        users: '?AgentConfigUserAssignments'
      }
    },
    AgentConfigProfileAssignments: {
      type: 'AgentConfigProfileAssignments',
      props: {
        profile: ['string']
      }
    },
    AgentConfigUserAssignments: {
      type: 'AgentConfigUserAssignments',
      props: {
        user: ['string']
      }
    },
    SupervisorAgentConfigSkills: {
      type: 'SupervisorAgentConfigSkills',
      props: {
        skill: ['string']
      }
    },
    AgentConfigButtons: {
      type: 'AgentConfigButtons',
      props: {
        button: ['string']
      }
    },
    AgentConfigSkills: {
      type: 'AgentConfigSkills',
      props: {
        skill: ['string']
      }
    },
    LiveChatButton: {
      type: 'LiveChatButton',
      props: {
        animation: '?string',
        autoGreeting: '?string',
        chasitorIdleTimeout: '?number',
        chasitorIdleTimeoutWarning: '?number',
        chatPage: '?string',
        customAgentName: '?string',
        deployments: '?LiveChatButtonDeployments',
        enableQueue: '?boolean',
        inviteEndPosition: '?string',
        inviteImage: '?string',
        inviteStartPosition: '?string',
        isActive: '?boolean',
        label: 'string',
        numberOfReroutingAttempts: '?number',
        offlineImage: '?string',
        onlineImage: '?string',
        optionsCustomRoutingIsEnabled: '?boolean',
        optionsHasChasitorIdleTimeout: 'boolean',
        optionsHasInviteAfterAccept: '?boolean',
        optionsHasInviteAfterReject: '?boolean',
        optionsHasRerouteDeclinedRequest: '?boolean',
        optionsIsAutoAccept: '?boolean',
        optionsIsInviteAutoRemove: '?boolean',
        overallQueueLength: '?number',
        perAgentQueueLength: '?number',
        postChatPage: '?string',
        postChatUrl: '?string',
        preChatFormPage: '?string',
        preChatFormUrl: '?string',
        pushTimeOut: '?number',
        routingType: 'string',
        site: '?string',
        skills: '?LiveChatButtonSkills',
        timeToRemoveInvite: '?number',
        type: 'string',
        windowLanguage: '?string'
      },
      "extends": 'Metadata'
    },
    LiveChatButtonDeployments: {
      type: 'LiveChatButtonDeployments',
      props: {
        deployment: ['string']
      }
    },
    LiveChatButtonSkills: {
      type: 'LiveChatButtonSkills',
      props: {
        skill: ['string']
      }
    },
    LiveChatDeployment: {
      type: 'LiveChatDeployment',
      props: {
        brandingImage: '?string',
        connectionTimeoutDuration: '?number',
        connectionWarningDuration: '?number',
        displayQueuePosition: '?boolean',
        domainWhiteList: '?LiveChatDeploymentDomainWhitelist',
        enablePrechatApi: '?boolean',
        enableTranscriptSave: '?boolean',
        label: 'string',
        mobileBrandingImage: '?string',
        site: '?string',
        windowTitle: 'string'
      },
      "extends": 'Metadata'
    },
    LiveChatDeploymentDomainWhitelist: {
      type: 'LiveChatDeploymentDomainWhitelist',
      props: {
        domain: ['string']
      }
    },
    LiveChatSensitiveDataRule: {
      type: 'LiveChatSensitiveDataRule',
      props: {
        actionType: 'string',
        description: '?string',
        enforceOn: 'number',
        isEnabled: 'boolean',
        pattern: 'string',
        priority: 'number',
        replacement: '?string'
      },
      "extends": 'Metadata'
    },
    LiveMessageSettings: {
      type: 'LiveMessageSettings',
      props: {
        enableLiveMessage: '?boolean'
      },
      "extends": 'Metadata'
    },
    MacroSettings: {
      type: 'MacroSettings',
      props: {
        enableAdvancedSearch: '?boolean',
        macrosInFolders: '?boolean'
      },
      "extends": 'Metadata'
    },
    ManagedContentType: {
      type: 'ManagedContentType',
      props: {
        description: '?string',
        developerName: 'string',
        managedContentNodeTypes: ['ManagedContentNodeType'],
        masterLabel: 'string'
      },
      "extends": 'Metadata'
    },
    ManagedContentNodeType: {
      type: 'ManagedContentNodeType',
      props: {
        helpText: '?string',
        isLocalizable: '?boolean',
        isRequired: '?boolean',
        nodeLabel: 'string',
        nodeName: 'string',
        nodeType: 'string',
        placeholderText: '?string'
      }
    },
    ManagedTopic: {
      type: 'ManagedTopic',
      props: {
        managedTopicType: 'string',
        name: 'string',
        parentName: 'string',
        position: 'number',
        topicDescription: 'string'
      },
      "extends": 'Metadata'
    },
    ManagedTopics: {
      type: 'ManagedTopics',
      props: {
        managedTopic: ['ManagedTopic']
      },
      "extends": 'Metadata'
    },
    SourceTrackingSettings: {
      type: 'SourceTrackingSettings',
      props: {
        enableSourceTrackingSandboxes: '?boolean'
      },
      "extends": 'Metadata'
    },
    MapsAndLocationSettings: {
      type: 'MapsAndLocationSettings',
      props: {
        enableAddressAutoComplete: '?boolean',
        enableMapsAndLocation: '?boolean'
      },
      "extends": 'Metadata'
    },
    MatchingRule: {
      type: 'MatchingRule',
      props: {
        booleanFilter: '?string',
        description: '?string',
        label: 'string',
        matchingRuleItems: ['MatchingRuleItem'],
        ruleStatus: 'string'
      },
      "extends": 'Metadata'
    },
    MatchingRuleItem: {
      type: 'MatchingRuleItem',
      props: {
        blankValueBehavior: '?string',
        fieldName: 'string',
        matchingMethod: 'string'
      }
    },
    MatchingRules: {
      type: 'MatchingRules',
      props: {
        matchingRules: ['MatchingRule']
      },
      "extends": 'Metadata'
    },
    MetadataWithContent: {
      type: 'MetadataWithContent',
      props: {
        content: '?string'
      },
      "extends": 'Metadata'
    },
    AccessControlPolicy: {
      type: 'AccessControlPolicy',
      props: {
        active: 'boolean',
        deploymentStatus: 'string',
        description: '?string',
        masterLabel: 'string',
        targetEntity: 'string',
        version: 'number'
      },
      "extends": 'MetadataWithContent'
    },
    ApexClass: {
      type: 'ApexClass',
      props: {
        apiVersion: 'number',
        packageVersions: ['PackageVersion'],
        status: 'string'
      },
      "extends": 'MetadataWithContent'
    },
    ApexComponent: {
      type: 'ApexComponent',
      props: {
        apiVersion: '?number',
        description: '?string',
        label: 'string',
        packageVersions: ['PackageVersion']
      },
      "extends": 'MetadataWithContent'
    },
    ApexPage: {
      type: 'ApexPage',
      props: {
        apiVersion: 'number',
        availableInTouch: '?boolean',
        confirmationTokenRequired: '?boolean',
        description: '?string',
        label: 'string',
        packageVersions: ['PackageVersion']
      },
      "extends": 'MetadataWithContent'
    },
    ApexTrigger: {
      type: 'ApexTrigger',
      props: {
        apiVersion: 'number',
        packageVersions: ['PackageVersion'],
        status: 'string'
      },
      "extends": 'MetadataWithContent'
    },
    Certificate: {
      type: 'Certificate',
      props: {
        caSigned: 'boolean',
        encryptedWithPlatformEncryption: '?boolean',
        expirationDate: '?string',
        keySize: '?number',
        masterLabel: 'string',
        privateKeyExportable: '?boolean'
      },
      "extends": 'MetadataWithContent'
    },
    ContentAsset: {
      type: 'ContentAsset',
      props: {
        format: '?string',
        isVisibleByExternalUsers: '?boolean',
        language: 'string',
        masterLabel: 'string',
        originNetwork: '?string',
        relationships: '?ContentAssetRelationships',
        versions: 'ContentAssetVersions'
      },
      "extends": 'MetadataWithContent'
    },
    ContentAssetRelationships: {
      type: 'ContentAssetRelationships',
      props: {
        insightsApplication: ['ContentAssetLink'],
        network: ['ContentAssetLink'],
        organization: '?ContentAssetLink',
        workspace: ['ContentAssetLink']
      }
    },
    ContentAssetLink: {
      type: 'ContentAssetLink',
      props: {
        access: 'string',
        isManagingWorkspace: '?boolean',
        name: '?string'
      }
    },
    ContentAssetVersions: {
      type: 'ContentAssetVersions',
      props: {
        version: ['ContentAssetVersion']
      }
    },
    ContentAssetVersion: {
      type: 'ContentAssetVersion',
      props: {
        number: 'string',
        pathOnClient: 'string',
        zipEntry: '?string'
      }
    },
    Document: {
      type: 'Document',
      props: {
        description: '?string',
        internalUseOnly: 'boolean',
        keywords: '?string',
        name: '?string',
        "public": 'boolean'
      },
      "extends": 'MetadataWithContent'
    },
    EclairGeoData: {
      type: 'EclairGeoData',
      props: {
        maps: ['EclairMap'],
        masterLabel: 'string'
      },
      "extends": 'MetadataWithContent'
    },
    EclairMap: {
      type: 'EclairMap',
      props: {
        boundingBoxBottom: '?number',
        boundingBoxLeft: '?number',
        boundingBoxRight: '?number',
        boundingBoxTop: '?number',
        mapLabel: '?string',
        mapName: 'string',
        projection: 'string'
      }
    },
    EmailTemplate: {
      type: 'EmailTemplate',
      props: {
        apiVersion: '?number',
        attachedDocuments: ['string'],
        attachments: ['Attachment'],
        available: 'boolean',
        description: '?string',
        encodingKey: 'string',
        letterhead: '?string',
        name: 'string',
        packageVersions: ['PackageVersion'],
        relatedEntityType: '?string',
        style: 'string',
        subject: '?string',
        textOnly: '?string',
        type: 'string',
        uiType: '?string'
      },
      "extends": 'MetadataWithContent'
    },
    Attachment: {
      type: 'Attachment',
      props: {
        content: 'string',
        name: 'string'
      }
    },
    NetworkBranding: {
      type: 'NetworkBranding',
      props: {
        loginBackgroundImageUrl: '?string',
        loginFooterText: '?string',
        loginLogo: '?string',
        loginLogoName: '?string',
        loginPrimaryColor: '?string',
        loginQuaternaryColor: '?string',
        loginRightFrameUrl: '?string',
        network: '?string',
        pageFooter: '?string',
        pageHeader: '?string',
        primaryColor: 'string',
        primaryComplementColor: 'string',
        quaternaryColor: 'string',
        quaternaryComplementColor: 'string',
        secondaryColor: 'string',
        staticLogoImageUrl: '?string',
        tertiaryColor: 'string',
        tertiaryComplementColor: 'string',
        zeronaryColor: 'string',
        zeronaryComplementColor: 'string'
      },
      "extends": 'MetadataWithContent'
    },
    Orchestration: {
      type: 'Orchestration',
      props: {
        context: 'string',
        masterLabel: 'string'
      },
      "extends": 'MetadataWithContent'
    },
    Scontrol: {
      type: 'Scontrol',
      props: {
        contentSource: 'string',
        description: '?string',
        encodingKey: 'string',
        fileContent: '?string',
        fileName: '?string',
        name: 'string',
        supportsCaching: 'boolean'
      },
      "extends": 'MetadataWithContent'
    },
    SiteDotCom: {
      type: 'SiteDotCom',
      props: {
        label: 'string',
        siteType: 'string'
      },
      "extends": 'MetadataWithContent'
    },
    StaticResource: {
      type: 'StaticResource',
      props: {
        cacheControl: 'string',
        contentType: 'string',
        description: '?string'
      },
      "extends": 'MetadataWithContent'
    },
    UiPlugin: {
      type: 'UiPlugin',
      props: {
        description: '?string',
        extensionPointIdentifier: 'string',
        isEnabled: 'boolean',
        language: 'string',
        masterLabel: 'string'
      },
      "extends": 'MetadataWithContent'
    },
    WaveDashboard: {
      type: 'WaveDashboard',
      props: {
        application: 'string',
        description: '?string',
        masterLabel: 'string',
        templateAssetSourceName: '?string'
      },
      "extends": 'MetadataWithContent'
    },
    WaveDataflow: {
      type: 'WaveDataflow',
      props: {
        dataflowType: '?string',
        description: '?string',
        masterLabel: 'string'
      },
      "extends": 'MetadataWithContent'
    },
    WaveLens: {
      type: 'WaveLens',
      props: {
        application: 'string',
        datasets: ['string'],
        description: '?string',
        masterLabel: 'string',
        templateAssetSourceName: '?string',
        visualizationType: 'string'
      },
      "extends": 'MetadataWithContent'
    },
    WaveRecipe: {
      type: 'WaveRecipe',
      props: {
        dataflow: 'string',
        masterLabel: 'string',
        securityPredicate: '?string',
        targetDatasetAlias: 'string'
      },
      "extends": 'MetadataWithContent'
    },
    MilestoneType: {
      type: 'MilestoneType',
      props: {
        description: '?string',
        recurrenceType: '?string'
      },
      "extends": 'Metadata'
    },
    MlDomain: {
      type: 'MlDomain',
      props: {
        description: '?string',
        label: 'string',
        mlIntents: ['MlIntent'],
        mlSlotClasses: ['MlSlotClass']
      },
      "extends": 'Metadata'
    },
    MobileApplicationDetail: {
      type: 'MobileApplicationDetail',
      props: {
        applicationBinaryFile: '?string',
        applicationBinaryFileName: '?string',
        applicationBundleIdentifier: '?string',
        applicationFileLength: '?number',
        applicationIconFile: '?string',
        applicationIconFileName: '?string',
        applicationInstallUrl: '?string',
        devicePlatform: 'string',
        deviceType: '?string',
        minimumOsVersion: '?string',
        privateApp: '?boolean',
        version: 'string'
      },
      "extends": 'Metadata'
    },
    MobileSettings: {
      type: 'MobileSettings',
      props: {
        dashboardMobile: '?DashboardMobileSettings',
        enableImportContactFromDevice: '?boolean',
        enableLightningOnMobile: '?boolean',
        enableOfflineDraftsEnabled: '?boolean',
        enablePopulateNameManuallyInToday: '?boolean',
        enableS1EncryptedStoragePref2: '?boolean',
        enableS1OfflinePref: '?boolean'
      },
      "extends": 'Metadata'
    },
    DashboardMobileSettings: {
      type: 'DashboardMobileSettings',
      props: {
        enableDashboardIPadApp: '?boolean'
      }
    },
    ModerationRule: {
      type: 'ModerationRule',
      props: {
        action: 'string',
        actionLimit: '?number',
        active: 'boolean',
        description: '?string',
        entitiesAndFields: ['ModeratedEntityField'],
        masterLabel: 'string',
        notifyLimit: '?number',
        timePeriod: '?string',
        type: '?string',
        userCriteria: ['string'],
        userMessage: '?string'
      },
      "extends": 'Metadata'
    },
    ModeratedEntityField: {
      type: 'ModeratedEntityField',
      props: {
        entityName: 'string',
        fieldName: '?string',
        keywordList: '?string'
      }
    },
    MyDomainSettings: {
      type: 'MyDomainSettings',
      props: {
        canOnlyLoginWithMyDomainUrl: '?boolean',
        doesApiLoginRequireOrgDomain: '?boolean',
        enableNativeBrowserForAuthOnAndroid: '?boolean',
        enableNativeBrowserForAuthOnIos: '?boolean',
        useStabilizedMyDomainHostnames: '?boolean',
        useStabilizedSandboxMyDomainHostnames: '?boolean'
      },
      "extends": 'Metadata'
    },
    NameSettings: {
      type: 'NameSettings',
      props: {
        enableMiddleName: '?boolean',
        enableNameSuffix: '?boolean'
      },
      "extends": 'Metadata'
    },
    NamedCredential: {
      type: 'NamedCredential',
      props: {
        allowMergeFieldsInBody: '?boolean',
        allowMergeFieldsInHeader: '?boolean',
        authProvider: '?string',
        authTokenEndpointUrl: '?string',
        awsAccessKey: '?string',
        awsAccessSecret: '?string',
        awsRegion: '?string',
        awsService: '?string',
        certificate: '?string',
        endpoint: '?string',
        generateAuthorizationHeader: '?boolean',
        jwtAudience: '?string',
        jwtFormulaSubject: '?string',
        jwtIssuer: '?string',
        jwtSigningCertificate: '?string',
        jwtTextSubject: '?string',
        jwtValidityPeriodSeconds: '?number',
        label: 'string',
        oauthRefreshToken: '?string',
        oauthScope: '?string',
        oauthToken: '?string',
        password: '?string',
        principalType: 'string',
        privateConnection: '?string',
        protocol: 'string',
        username: '?string'
      },
      "extends": 'Metadata'
    },
    NavigationMenu: {
      type: 'NavigationMenu',
      props: {
        container: 'string',
        containerType: 'string',
        label: 'string',
        navigationMenuItem: ['NavigationMenuItem']
      },
      "extends": 'Metadata'
    },
    Network: {
      type: 'Network',
      props: {
        allowInternalUserLogin: '?boolean',
        allowMembersToFlag: '?boolean',
        allowedExtensions: '?string',
        caseCommentEmailTemplate: '?string',
        changePasswordTemplate: 'string',
        communityRoles: '?CommunityRoles',
        description: '?string',
        disableReputationRecordConversations: '?boolean',
        emailFooterLogo: '?string',
        emailFooterText: '?string',
        emailSenderAddress: 'string',
        emailSenderName: 'string',
        enableCustomVFErrorPageOverrides: '?boolean',
        enableDirectMessages: '?boolean',
        enableGuestChatter: '?boolean',
        enableGuestFileAccess: '?boolean',
        enableGuestMemberVisibility: '?boolean',
        enableInvitation: '?boolean',
        enableKnowledgeable: '?boolean',
        enableMemberVisibility: '?boolean',
        enableNicknameDisplay: '?boolean',
        enablePrivateMessages: '?boolean',
        enableReputation: '?boolean',
        enableShowAllNetworkSettings: '?boolean',
        enableSiteAsContainer: '?boolean',
        enableTalkingAboutStats: '?boolean',
        enableTopicAssignmentRules: '?boolean',
        enableTopicSuggestions: '?boolean',
        enableUpDownVote: '?boolean',
        feedChannel: '?string',
        forgotPasswordTemplate: 'string',
        gatherCustomerSentimentData: '?boolean',
        lockoutTemplate: '?string',
        logoutUrl: '?string',
        maxFileSizeKb: '?number',
        navigationLinkSet: '?NavigationLinkSet',
        networkMemberGroups: '?NetworkMemberGroup',
        networkPageOverrides: '?NetworkPageOverride',
        newSenderAddress: '?string',
        picassoSite: '?string',
        recommendationAudience: '?RecommendationAudience',
        recommendationDefinition: '?RecommendationDefinition',
        reputationLevels: '?ReputationLevelDefinitions',
        reputationPointsRules: '?ReputationPointsRules',
        selfRegProfile: '?string',
        selfRegistration: '?boolean',
        sendWelcomeEmail: '?boolean',
        site: 'string',
        status: 'string',
        tabs: 'NetworkTabSet',
        urlPathPrefix: '?string',
        verificationTemplate: '?string',
        welcomeTemplate: 'string'
      },
      "extends": 'Metadata'
    },
    CommunityRoles: {
      type: 'CommunityRoles',
      props: {
        customerUserRole: '?string',
        employeeUserRole: '?string',
        partnerUserRole: '?string'
      }
    },
    NetworkMemberGroup: {
      type: 'NetworkMemberGroup',
      props: {
        permissionSet: ['string'],
        profile: ['string']
      }
    },
    NetworkPageOverride: {
      type: 'NetworkPageOverride',
      props: {
        changePasswordPageOverrideSetting: '?string',
        forgotPasswordPageOverrideSetting: '?string',
        homePageOverrideSetting: '?string',
        loginPageOverrideSetting: '?string',
        selfRegProfilePageOverrideSetting: '?string'
      }
    },
    RecommendationAudience: {
      type: 'RecommendationAudience',
      props: {
        recommendationAudienceDetails: ['RecommendationAudienceDetail']
      }
    },
    RecommendationAudienceDetail: {
      type: 'RecommendationAudienceDetail',
      props: {
        audienceCriteriaType: '?string',
        audienceCriteriaValue: '?string',
        setupName: '?string'
      }
    },
    RecommendationDefinition: {
      type: 'RecommendationDefinition',
      props: {
        recommendationDefinitionDetails: ['RecommendationDefinitionDetail']
      }
    },
    RecommendationDefinitionDetail: {
      type: 'RecommendationDefinitionDetail',
      props: {
        actionUrl: '?string',
        description: '?string',
        linkText: '?string',
        scheduledRecommendations: '?ScheduledRecommendation',
        setupName: '?string',
        title: '?string'
      }
    },
    ScheduledRecommendation: {
      type: 'ScheduledRecommendation',
      props: {
        scheduledRecommendationDetails: ['ScheduledRecommendationDetail']
      }
    },
    ScheduledRecommendationDetail: {
      type: 'ScheduledRecommendationDetail',
      props: {
        channel: '?string',
        enabled: '?boolean',
        rank: '?number',
        recommendationAudience: '?string'
      }
    },
    ReputationLevelDefinitions: {
      type: 'ReputationLevelDefinitions',
      props: {
        level: ['ReputationLevel']
      }
    },
    ReputationLevel: {
      type: 'ReputationLevel',
      props: {
        branding: '?ReputationBranding',
        label: '?string',
        lowerThreshold: 'number'
      }
    },
    ReputationBranding: {
      type: 'ReputationBranding',
      props: {
        smallImage: '?string'
      }
    },
    ReputationPointsRules: {
      type: 'ReputationPointsRules',
      props: {
        pointsRule: ['ReputationPointsRule']
      }
    },
    ReputationPointsRule: {
      type: 'ReputationPointsRule',
      props: {
        eventType: 'string',
        points: 'number'
      }
    },
    NetworkTabSet: {
      type: 'NetworkTabSet',
      props: {
        customTab: ['string'],
        defaultTab: 'string',
        standardTab: ['string']
      }
    },
    NotificationsSettings: {
      type: 'NotificationsSettings',
      props: {
        enableMobileAppPushNotifications: '?boolean',
        enableNotifications: '?boolean'
      },
      "extends": 'Metadata'
    },
    OauthCustomScope: {
      type: 'OauthCustomScope',
      props: {
        description: 'string',
        developerName: 'string',
        isProtected: '?boolean',
        isPublic: '?boolean',
        masterLabel: 'string'
      },
      "extends": 'Metadata'
    },
    ObjectLinkingSettings: {
      type: 'ObjectLinkingSettings',
      props: {
        enableObjectLinking: '?boolean'
      },
      "extends": 'Metadata'
    },
    OmniChannelSettings: {
      type: 'OmniChannelSettings',
      props: {
        enableOmniAutoLoginPrompt: '?boolean',
        enableOmniChannel: '?boolean',
        enableOmniSecondaryRoutingPriority: '?boolean',
        enableOmniSkillsRouting: '?boolean'
      },
      "extends": 'Metadata'
    },
    OpportunitySettings: {
      type: 'OpportunitySettings',
      props: {
        autoActivateNewReminders: '?boolean',
        customizableProductSchedulesEnabled: '?boolean',
        doesAutoAddSplitOwnerAsOpportunityTeamMember: '?boolean',
        doesEnforceStandardOpportunitySaveLogic: '?boolean',
        enableFindSimilarOpportunities: '?boolean',
        enableOpportunityFieldHistoryTracking: '?boolean',
        enableOpportunityInsightsInMobile: '?boolean',
        enableOpportunityTeam: '?boolean',
        enableUpdateReminders: '?boolean',
        findSimilarOppFilter: '?FindSimilarOppFilter',
        promptToAddProducts: '?boolean'
      },
      "extends": 'Metadata'
    },
    FindSimilarOppFilter: {
      type: 'FindSimilarOppFilter',
      props: {
        similarOpportunitiesDisplayColumns: ['string'],
        similarOpportunitiesMatchFields: ['string']
      }
    },
    OrchestrationContext: {
      type: 'OrchestrationContext',
      props: {
        datasets: ['OrchestrationContextDataset'],
        description: '?string',
        events: ['OrchestrationContextEvent'],
        imageFile: 'string',
        imageScale: 'number',
        masterLabel: 'string',
        runtimeType: 'string',
        salesforceObject: '?string',
        salesforceObjectPrimaryKey: '?string'
      },
      "extends": 'Metadata'
    },
    OrchestrationContextDataset: {
      type: 'OrchestrationContextDataset',
      props: {
        datasetType: 'string',
        orchestrationDataset: 'string'
      }
    },
    OrchestrationContextEvent: {
      type: 'OrchestrationContextEvent',
      props: {
        eventType: 'string',
        orchestrationEvent: 'string',
        platformEvent: 'string',
        platformEventPrimaryKey: 'string'
      }
    },
    OrderManagementSettings: {
      type: 'OrderManagementSettings',
      props: {
        enableOrderManagement: '?boolean'
      },
      "extends": 'Metadata'
    },
    OrderSettings: {
      type: 'OrderSettings',
      props: {
        enableNegativeQuantity: '?boolean',
        enableOrders: '?boolean',
        enableReductionOrders: '?boolean',
        enableZeroQuantity: '?boolean'
      },
      "extends": 'Metadata'
    },
    OrgPreferenceSettings: {
      type: 'OrgPreferenceSettings',
      props: {
        preferences: ['OrganizationSettingsDetail']
      },
      "extends": 'Metadata'
    },
    OrganizationSettingsDetail: {
      type: 'OrganizationSettingsDetail',
      props: {
        settingName: 'string',
        settingValue: 'boolean'
      }
    },
    OrgSettings: {
      type: 'OrgSettings',
      props: {
        enableCustomerSuccessPortal: '?boolean',
        enableExtendedMailMerge: '?boolean',
        enableIncludeContractStatus: '?boolean',
        enableMakeDeploymentsMandatory: '?boolean',
        enableManageSelfServiceUsers: '?boolean',
        enableOrgFeedSentimentAnalysis: '?boolean',
        enableRADeploymentAttributeOnly: '?boolean',
        enableResetDivisionOnLogin: '?boolean',
        saveMailMergeDocsAsSalesforceDocs: '?boolean'
      },
      "extends": 'Metadata'
    },
    Package: {
      type: 'Package',
      props: {
        apiAccessLevel: '?string',
        description: '?string',
        namespacePrefix: '?string',
        objectPermissions: ['ProfileObjectPermissions'],
        packageType: '?string',
        postInstallClass: '?string',
        setupWeblink: '?string',
        types: ['PackageTypeMembers'],
        uninstallClass: '?string',
        version: 'string'
      },
      "extends": 'Metadata'
    },
    ProfileObjectPermissions: {
      type: 'ProfileObjectPermissions',
      props: {
        allowCreate: '?boolean',
        allowDelete: '?boolean',
        allowEdit: '?boolean',
        allowRead: '?boolean',
        modifyAllRecords: '?boolean',
        object: 'string',
        viewAllRecords: '?boolean'
      }
    },
    PackageTypeMembers: {
      type: 'PackageTypeMembers',
      props: {
        members: ['string'],
        name: 'string'
      }
    },
    PardotEinsteinSettings: {
      type: 'PardotEinsteinSettings',
      props: {
        enableCampaignInsight: '?boolean',
        enableEngagementScore: '?boolean'
      },
      "extends": 'Metadata'
    },
    PardotSettings: {
      type: 'PardotSettings',
      props: {
        enableB2bmaAppEnabled: '?boolean',
        enableEngagementHistoryDashboards: '?boolean',
        enablePardotAppV1Enabled: '?boolean',
        enablePardotEnabled: '?boolean',
        enableProspectActivityDataset: '?boolean'
      },
      "extends": 'Metadata'
    },
    PartyDataModelSettings: {
      type: 'PartyDataModelSettings',
      props: {
        enableAutoSelectIndividualOnMerge: '?boolean',
        enableConsentManagement: '?boolean'
      },
      "extends": 'Metadata'
    },
    PathAssistant: {
      type: 'PathAssistant',
      props: {
        active: 'boolean',
        entityName: 'string',
        fieldName: 'string',
        masterLabel: 'string',
        pathAssistantSteps: ['PathAssistantStep'],
        recordTypeName: 'string'
      },
      "extends": 'Metadata'
    },
    PathAssistantStep: {
      type: 'PathAssistantStep',
      props: {
        fieldNames: ['string'],
        info: '?string',
        picklistValueName: 'string'
      }
    },
    PathAssistantSettings: {
      type: 'PathAssistantSettings',
      props: {
        canOverrideAutoPathCollapseWithUserPref: '?boolean',
        pathAssistantEnabled: '?boolean'
      },
      "extends": 'Metadata'
    },
    PermissionSet: {
      type: 'PermissionSet',
      props: {
        applicationVisibilities: ['PermissionSetApplicationVisibility'],
        classAccesses: ['PermissionSetApexClassAccess'],
        customMetadataTypeAccesses: ['PermissionSetCustomMetadataTypeAccess'],
        customPermissions: ['PermissionSetCustomPermissions'],
        description: '?string',
        externalDataSourceAccesses: ['PermissionSetExternalDataSourceAccess'],
        fieldPermissions: ['PermissionSetFieldPermissions'],
        flowAccesses: ['PermissionSetFlowAccess'],
        hasActivationRequired: '?boolean',
        label: 'string',
        license: '?string',
        objectPermissions: ['PermissionSetObjectPermissions'],
        pageAccesses: ['PermissionSetApexPageAccess'],
        recordTypeVisibilities: ['PermissionSetRecordTypeVisibility'],
        tabSettings: ['PermissionSetTabSetting'],
        userPermissions: ['PermissionSetUserPermission']
      },
      "extends": 'Metadata'
    },
    PermissionSetApplicationVisibility: {
      type: 'PermissionSetApplicationVisibility',
      props: {
        application: 'string',
        visible: 'boolean'
      }
    },
    PermissionSetApexClassAccess: {
      type: 'PermissionSetApexClassAccess',
      props: {
        apexClass: 'string',
        enabled: 'boolean'
      }
    },
    PermissionSetCustomMetadataTypeAccess: {
      type: 'PermissionSetCustomMetadataTypeAccess',
      props: {
        enabled: 'boolean',
        name: 'string'
      }
    },
    PermissionSetCustomPermissions: {
      type: 'PermissionSetCustomPermissions',
      props: {
        enabled: 'boolean',
        name: 'string'
      }
    },
    PermissionSetExternalDataSourceAccess: {
      type: 'PermissionSetExternalDataSourceAccess',
      props: {
        enabled: 'boolean',
        externalDataSource: 'string'
      }
    },
    PermissionSetFieldPermissions: {
      type: 'PermissionSetFieldPermissions',
      props: {
        editable: 'boolean',
        field: 'string',
        readable: '?boolean'
      }
    },
    PermissionSetFlowAccess: {
      type: 'PermissionSetFlowAccess',
      props: {
        enabled: 'boolean',
        flow: 'string'
      }
    },
    PermissionSetObjectPermissions: {
      type: 'PermissionSetObjectPermissions',
      props: {
        allowCreate: 'boolean',
        allowDelete: 'boolean',
        allowEdit: 'boolean',
        allowRead: 'boolean',
        modifyAllRecords: 'boolean',
        object: 'string',
        viewAllRecords: 'boolean'
      }
    },
    PermissionSetApexPageAccess: {
      type: 'PermissionSetApexPageAccess',
      props: {
        apexPage: 'string',
        enabled: 'boolean'
      }
    },
    PermissionSetRecordTypeVisibility: {
      type: 'PermissionSetRecordTypeVisibility',
      props: {
        recordType: 'string',
        visible: 'boolean'
      }
    },
    PermissionSetTabSetting: {
      type: 'PermissionSetTabSetting',
      props: {
        tab: 'string',
        visibility: 'string'
      }
    },
    PermissionSetUserPermission: {
      type: 'PermissionSetUserPermission',
      props: {
        enabled: 'boolean',
        name: 'string'
      }
    },
    MutingPermissionSet: {
      type: 'MutingPermissionSet',
      props: {
        label: 'string'
      },
      "extends": 'PermissionSet'
    },
    PermissionSetGroup: {
      type: 'PermissionSetGroup',
      props: {
        description: '?string',
        label: 'string',
        mutingPermissionSets: ['string'],
        permissionSets: ['string'],
        status: '?string'
      },
      "extends": 'Metadata'
    },
    PersonListSettings: {
      type: 'PersonListSettings',
      props: {
        enablePersonList: 'boolean'
      },
      "extends": 'Metadata'
    },
    PicklistSettings: {
      type: 'PicklistSettings',
      props: {
        isPicklistApiNameEditDisabled: '?boolean'
      },
      "extends": 'Metadata'
    },
    PlatformCachePartition: {
      type: 'PlatformCachePartition',
      props: {
        description: '?string',
        isDefaultPartition: 'boolean',
        masterLabel: 'string',
        platformCachePartitionTypes: ['PlatformCachePartitionType']
      },
      "extends": 'Metadata'
    },
    PlatformCachePartitionType: {
      type: 'PlatformCachePartitionType',
      props: {
        allocatedCapacity: 'number',
        allocatedPurchasedCapacity: 'number',
        allocatedTrialCapacity: 'number',
        cacheType: 'string'
      }
    },
    PlatformEncryptionSettings: {
      type: 'PlatformEncryptionSettings',
      props: {
        canEncryptManagedPackageFields: '?boolean',
        enableDeterministicEncryption: '?boolean',
        enableEncryptFieldHistory: '?boolean',
        enableEventBusEncryption: '?boolean',
        isMEKForEncryptionRequired: '?boolean',
        isUseHighAssuranceKeysRequired: '?boolean'
      },
      "extends": 'Metadata'
    },
    PlatformEventChannel: {
      type: 'PlatformEventChannel',
      props: {
        channelType: 'string',
        label: 'string'
      },
      "extends": 'Metadata'
    },
    PlatformEventChannelMember: {
      type: 'PlatformEventChannelMember',
      props: {
        eventChannel: 'string',
        selectedEntity: 'string'
      },
      "extends": 'Metadata'
    },
    Portal: {
      type: 'Portal',
      props: {
        active: 'boolean',
        admin: '?string',
        defaultLanguage: '?string',
        description: '?string',
        emailSenderAddress: 'string',
        emailSenderName: 'string',
        enableSelfCloseCase: '?boolean',
        footerDocument: '?string',
        forgotPassTemplate: '?string',
        headerDocument: '?string',
        isSelfRegistrationActivated: '?boolean',
        loginHeaderDocument: '?string',
        logoDocument: '?string',
        logoutUrl: '?string',
        newCommentTemplate: '?string',
        newPassTemplate: '?string',
        newUserTemplate: '?string',
        ownerNotifyTemplate: '?string',
        selfRegNewUserUrl: '?string',
        selfRegUserDefaultProfile: '?string',
        selfRegUserDefaultRole: '?string',
        selfRegUserTemplate: '?string',
        showActionConfirmation: '?boolean',
        stylesheetDocument: '?string',
        type: 'string'
      },
      "extends": 'Metadata'
    },
    PostTemplate: {
      type: 'PostTemplate',
      props: {
        "default": '?boolean',
        description: '?string',
        fields: ['string'],
        label: 'string'
      },
      "extends": 'Metadata'
    },
    PresenceDeclineReason: {
      type: 'PresenceDeclineReason',
      props: {
        label: 'string'
      },
      "extends": 'Metadata'
    },
    PresenceUserConfig: {
      type: 'PresenceUserConfig',
      props: {
        assignments: '?PresenceConfigAssignments',
        capacity: 'number',
        declineReasons: ['string'],
        enableAutoAccept: '?boolean',
        enableDecline: '?boolean',
        enableDeclineReason: '?boolean',
        enableDisconnectSound: '?boolean',
        enableRequestSound: '?boolean',
        label: 'string',
        presenceStatusOnDecline: '?string',
        presenceStatusOnPushTimeout: '?string'
      },
      "extends": 'Metadata'
    },
    PresenceConfigAssignments: {
      type: 'PresenceConfigAssignments',
      props: {
        profiles: '?PresenceConfigProfileAssignments',
        users: '?PresenceConfigUserAssignments'
      }
    },
    PresenceConfigProfileAssignments: {
      type: 'PresenceConfigProfileAssignments',
      props: {
        profile: ['string']
      }
    },
    PresenceConfigUserAssignments: {
      type: 'PresenceConfigUserAssignments',
      props: {
        user: ['string']
      }
    },
    PrivacySettings: {
      type: 'PrivacySettings',
      props: {
        enableConsentAuditTrail: '?boolean',
        enableConsentEventStream: '?boolean',
        enableDefaultMetadataValues: '?boolean'
      },
      "extends": 'Metadata'
    },
    PrivateConnection: {
      type: 'PrivateConnection',
      props: {
        description: '?string',
        direction: 'string',
        externalConnectionProperties: ['ExternalConnectionProperty'],
        label: 'string',
        status: 'string',
        type: 'string'
      },
      "extends": 'Metadata'
    },
    ExternalConnectionProperty: {
      type: 'ExternalConnectionProperty',
      props: {
        propertyName: 'string',
        propertyValue: 'string'
      }
    },
    ProductSettings: {
      type: 'ProductSettings',
      props: {
        enableCascadeActivateToRelatedPrices: '?boolean',
        enableMySettings: '?boolean',
        enableQuantitySchedule: '?boolean',
        enableRevenueSchedule: '?boolean'
      },
      "extends": 'Metadata'
    },
    Profile: {
      type: 'Profile',
      props: {
        applicationVisibilities: ['ProfileApplicationVisibility'],
        categoryGroupVisibilities: ['ProfileCategoryGroupVisibility'],
        classAccesses: ['ProfileApexClassAccess'],
        custom: '?boolean',
        customMetadataTypeAccesses: ['ProfileCustomMetadataTypeAccess'],
        customPermissions: ['ProfileCustomPermissions'],
        description: '?string',
        externalDataSourceAccesses: ['ProfileExternalDataSourceAccess'],
        fieldPermissions: ['ProfileFieldLevelSecurity'],
        flowAccesses: ['ProfileFlowAccess'],
        layoutAssignments: ['ProfileLayoutAssignment'],
        loginHours: '?ProfileLoginHours',
        loginIpRanges: ['ProfileLoginIpRange'],
        objectPermissions: ['ProfileObjectPermissions'],
        pageAccesses: ['ProfileApexPageAccess'],
        profileActionOverrides: ['ProfileActionOverride'],
        recordTypeVisibilities: ['ProfileRecordTypeVisibility'],
        tabVisibilities: ['ProfileTabVisibility'],
        userLicense: '?string',
        userPermissions: ['ProfileUserPermission']
      },
      "extends": 'Metadata'
    },
    ProfileApplicationVisibility: {
      type: 'ProfileApplicationVisibility',
      props: {
        application: 'string',
        "default": 'boolean',
        visible: 'boolean'
      }
    },
    ProfileCategoryGroupVisibility: {
      type: 'ProfileCategoryGroupVisibility',
      props: {
        dataCategories: ['string'],
        dataCategoryGroup: 'string',
        visibility: 'string'
      }
    },
    ProfileApexClassAccess: {
      type: 'ProfileApexClassAccess',
      props: {
        apexClass: 'string',
        enabled: 'boolean'
      }
    },
    ProfileCustomMetadataTypeAccess: {
      type: 'ProfileCustomMetadataTypeAccess',
      props: {
        enabled: 'boolean',
        name: 'string'
      }
    },
    ProfileCustomPermissions: {
      type: 'ProfileCustomPermissions',
      props: {
        enabled: 'boolean',
        name: 'string'
      }
    },
    ProfileExternalDataSourceAccess: {
      type: 'ProfileExternalDataSourceAccess',
      props: {
        enabled: 'boolean',
        externalDataSource: 'string'
      }
    },
    ProfileFieldLevelSecurity: {
      type: 'ProfileFieldLevelSecurity',
      props: {
        editable: 'boolean',
        field: 'string',
        readable: '?boolean'
      }
    },
    ProfileFlowAccess: {
      type: 'ProfileFlowAccess',
      props: {
        enabled: 'boolean',
        flow: 'string'
      }
    },
    ProfileLayoutAssignment: {
      type: 'ProfileLayoutAssignment',
      props: {
        layout: 'string',
        recordType: '?string'
      }
    },
    ProfileLoginHours: {
      type: 'ProfileLoginHours',
      props: {
        fridayEnd: '?string',
        fridayStart: '?string',
        mondayEnd: '?string',
        mondayStart: '?string',
        saturdayEnd: '?string',
        saturdayStart: '?string',
        sundayEnd: '?string',
        sundayStart: '?string',
        thursdayEnd: '?string',
        thursdayStart: '?string',
        tuesdayEnd: '?string',
        tuesdayStart: '?string',
        wednesdayEnd: '?string',
        wednesdayStart: '?string'
      }
    },
    ProfileLoginIpRange: {
      type: 'ProfileLoginIpRange',
      props: {
        description: '?string',
        endAddress: 'string',
        startAddress: 'string'
      }
    },
    ProfileApexPageAccess: {
      type: 'ProfileApexPageAccess',
      props: {
        apexPage: 'string',
        enabled: 'boolean'
      }
    },
    ProfileRecordTypeVisibility: {
      type: 'ProfileRecordTypeVisibility',
      props: {
        "default": 'boolean',
        personAccountDefault: '?boolean',
        recordType: 'string',
        visible: 'boolean'
      }
    },
    ProfileTabVisibility: {
      type: 'ProfileTabVisibility',
      props: {
        tab: 'string',
        visibility: 'string'
      }
    },
    ProfileUserPermission: {
      type: 'ProfileUserPermission',
      props: {
        enabled: 'boolean',
        name: 'string'
      }
    },
    ProfilePasswordPolicy: {
      type: 'ProfilePasswordPolicy',
      props: {
        forgotPasswordRedirect: '?boolean',
        lockoutInterval: 'number',
        maxLoginAttempts: 'number',
        minimumPasswordLength: 'number',
        minimumPasswordLifetime: '?boolean',
        obscure: '?boolean',
        passwordComplexity: 'number',
        passwordExpiration: 'number',
        passwordHistory: 'number',
        passwordQuestion: 'number',
        profile: 'string'
      },
      "extends": 'Metadata'
    },
    ProfileSessionSetting: {
      type: 'ProfileSessionSetting',
      props: {
        externalCommunityUserIdentityVerif: 'boolean',
        forceLogout: 'boolean',
        profile: 'string',
        requiredSessionLevel: '?string',
        sessionPersistence: 'boolean',
        sessionTimeout: 'number',
        sessionTimeoutWarning: 'boolean'
      },
      "extends": 'Metadata'
    },
    Prompt: {
      type: 'Prompt',
      props: {
        masterLabel: 'string',
        promptVersions: ['PromptVersion']
      },
      "extends": 'Metadata'
    },
    PromptVersion: {
      type: 'PromptVersion',
      props: {
        actionButtonLabel: '?string',
        actionButtonLink: '?string',
        body: 'string',
        customApplication: '?string',
        delayDays: 'number',
        description: '?string',
        dismissButtonLabel: '?string',
        displayPosition: '?string',
        displayType: 'string',
        endDate: '?string',
        header: '?string',
        indexWithIsPublished: '?string',
        indexWithoutIsPublished: '?string',
        isPublished: '?boolean',
        masterLabel: 'string',
        publishedByUser: '?string',
        publishedDate: '?string',
        shouldDisplayActionButton: 'boolean',
        startDate: 'string',
        targetAppDeveloperName: 'string',
        targetAppNamespacePrefix: '?string',
        targetPageKey1: 'string',
        targetPageKey2: '?string',
        targetPageType: 'string',
        timesToDisplay: 'number',
        title: 'string',
        uiFormulaRule: '?UiFormulaRule',
        userAccess: 'string',
        versionNumber: 'number'
      }
    },
    Queue: {
      type: 'Queue',
      props: {
        doesSendEmailToMembers: '?boolean',
        email: '?string',
        name: 'string',
        queueMembers: '?QueueMembers',
        queueRoutingConfig: '?string',
        queueSobject: ['QueueSobject']
      },
      "extends": 'Metadata'
    },
    QueueMembers: {
      type: 'QueueMembers',
      props: {
        publicGroups: '?PublicGroups',
        roleAndSubordinates: '?RoleAndSubordinates',
        roleAndSubordinatesInternal: '?RoleAndSubordinatesInternal',
        roles: '?Roles',
        users: '?Users'
      }
    },
    PublicGroups: {
      type: 'PublicGroups',
      props: {
        publicGroup: ['string']
      }
    },
    RoleAndSubordinates: {
      type: 'RoleAndSubordinates',
      props: {
        roleAndSubordinate: ['string']
      }
    },
    RoleAndSubordinatesInternal: {
      type: 'RoleAndSubordinatesInternal',
      props: {
        roleAndSubordinateInternal: ['string']
      }
    },
    Roles: {
      type: 'Roles',
      props: {
        role: ['string']
      }
    },
    Users: {
      type: 'Users',
      props: {
        user: ['string']
      }
    },
    QueueSobject: {
      type: 'QueueSobject',
      props: {
        sobjectType: 'string'
      }
    },
    QueueRoutingConfig: {
      type: 'QueueRoutingConfig',
      props: {
        capacityPercentage: '?number',
        capacityWeight: '?number',
        dropAdditionalSkillsTimeout: '?number',
        isAttributeBased: '?boolean',
        label: 'string',
        pushTimeout: '?number',
        queueOverflowAssignee: '?string',
        routingModel: 'string',
        routingPriority: 'number',
        userOverflowAssignee: '?string'
      },
      "extends": 'Metadata'
    },
    QuickAction: {
      type: 'QuickAction',
      props: {
        canvas: '?string',
        description: '?string',
        fieldOverrides: ['FieldOverride'],
        flowDefinition: '?string',
        height: '?number',
        icon: '?string',
        isProtected: '?boolean',
        label: '?string',
        lightningComponent: '?string',
        mobExtDisplayMode: '?string',
        optionsCreateFeedItem: 'boolean',
        page: '?string',
        quickActionLayout: '?QuickActionLayout',
        quickActionSendEmailOptions: '?QuickActionSendEmailOptions',
        standardLabel: '?string',
        successMessage: '?string',
        targetObject: '?string',
        targetParentField: '?string',
        targetRecordType: '?string',
        type: 'string',
        width: '?number'
      },
      "extends": 'Metadata'
    },
    FieldOverride: {
      type: 'FieldOverride',
      props: {
        field: 'string',
        formula: '?string',
        literalValue: '?string'
      }
    },
    QuickActionLayout: {
      type: 'QuickActionLayout',
      props: {
        layoutSectionStyle: 'string',
        quickActionLayoutColumns: ['QuickActionLayoutColumn']
      }
    },
    QuickActionLayoutColumn: {
      type: 'QuickActionLayoutColumn',
      props: {
        quickActionLayoutItems: ['QuickActionLayoutItem']
      }
    },
    QuickActionLayoutItem: {
      type: 'QuickActionLayoutItem',
      props: {
        emptySpace: '?boolean',
        field: '?string',
        uiBehavior: '?string'
      }
    },
    QuickActionSendEmailOptions: {
      type: 'QuickActionSendEmailOptions',
      props: {
        defaultEmailTemplateName: '?string',
        ignoreDefaultEmailTemplateSubject: 'boolean'
      }
    },
    QuoteSettings: {
      type: 'QuoteSettings',
      props: {
        enableQuote: 'boolean',
        enableQuotesWithoutOppEnabled: '?boolean'
      },
      "extends": 'Metadata'
    },
    RecommendationStrategy: {
      type: 'RecommendationStrategy',
      props: {
        actionContext: ['StrategyAction'],
        contextRecordType: '?string',
        description: '?string',
        filter: ['StrategyNodeFilter'],
        "if": ['StrategyNodeIf'],
        invocableAction: ['StrategyNodeInvocableAction'],
        isTemplate: '?boolean',
        label: 'string',
        map: ['StrategyNodeMap'],
        mutuallyExclusive: ['StrategyNodeExclusive'],
        onBehalfOfExpression: '?string',
        recommendationLimit: ['StrategyNodeRecommendationLimit'],
        recommendationLoad: ['StrategyNodeRecommendationLoad'],
        sort: ['StrategyNodeSort'],
        union: ['StrategyNodeUnion']
      },
      "extends": 'Metadata'
    },
    StrategyAction: {
      type: 'StrategyAction',
      props: {
        action: 'string',
        argument: ['StrategyActionArg'],
        description: '?string',
        label: '?string',
        name: 'string',
        type: 'string'
      }
    },
    StrategyActionArg: {
      type: 'StrategyActionArg',
      props: {
        name: 'string',
        value: 'string'
      }
    },
    StrategyNodeFilter: {
      type: 'StrategyNodeFilter',
      props: {
        expression: 'string'
      },
      "extends": 'StrategyNodeUnionBase'
    },
    StrategyNodeUnionBase: {
      type: 'StrategyNodeUnionBase',
      props: {
        limit: '?number'
      },
      "extends": 'StrategyNodeBase'
    },
    StrategyNodeBase: {
      type: 'StrategyNodeBase',
      props: {
        childNode: ['string'],
        description: '?string',
        label: '?string',
        name: 'string'
      }
    },
    StrategyNodeExclusive: {
      type: 'StrategyNodeExclusive',
      props: {},
      "extends": 'StrategyNodeUnionBase'
    },
    StrategyNodeIf: {
      type: 'StrategyNodeIf',
      props: {
        childNodeExpression: ['IfExpression'],
        onlyFirstMatch: '?boolean'
      },
      "extends": 'StrategyNodeUnionBase'
    },
    IfExpression: {
      type: 'IfExpression',
      props: {
        childName: 'string',
        expression: 'string'
      }
    },
    StrategyNodeInvocableAction: {
      type: 'StrategyNodeInvocableAction',
      props: {
        action: 'string',
        argument: ['StrategyNodeInvocableActionArg'],
        isGenerator: 'boolean',
        type: 'string'
      },
      "extends": 'StrategyNodeUnionBase'
    },
    StrategyNodeInvocableActionArg: {
      type: 'StrategyNodeInvocableActionArg',
      props: {
        name: 'string',
        value: 'string'
      }
    },
    StrategyNodeMap: {
      type: 'StrategyNodeMap',
      props: {
        mapExpression: ['MapExpression']
      },
      "extends": 'StrategyNodeUnionBase'
    },
    MapExpression: {
      type: 'MapExpression',
      props: {
        expression: 'string',
        name: 'string',
        type: 'string'
      }
    },
    StrategyNodeRecommendationLimit: {
      type: 'StrategyNodeRecommendationLimit',
      props: {
        filterMode: ['string'],
        lookbackDuration: '?number',
        maxRecommendationCount: '?number'
      },
      "extends": 'StrategyNodeUnionBase'
    },
    StrategyNodeRecommendationLoad: {
      type: 'StrategyNodeRecommendationLoad',
      props: {
        condition: ['RecommendationLoadCondition'],
        conditionLogic: '?string'
      },
      "extends": 'StrategyNodeUnionBase'
    },
    RecommendationLoadCondition: {
      type: 'RecommendationLoadCondition',
      props: {
        field: 'string',
        operator: 'string',
        value: 'RecommendationConditionValue'
      }
    },
    RecommendationConditionValue: {
      type: 'RecommendationConditionValue',
      props: {
        type: 'string',
        value: '?string'
      }
    },
    StrategyNodeSort: {
      type: 'StrategyNodeSort',
      props: {
        field: ['StrategyNodeSortField']
      },
      "extends": 'StrategyNodeUnionBase'
    },
    StrategyNodeSortField: {
      type: 'StrategyNodeSortField',
      props: {
        name: 'string',
        nullsFirst: '?boolean',
        order: '?string'
      }
    },
    StrategyNodeUnion: {
      type: 'StrategyNodeUnion',
      props: {},
      "extends": 'StrategyNodeUnionBase'
    },
    RecordActionDeployment: {
      type: 'RecordActionDeployment',
      props: {
        channelConfigurations: ['RecordActionDeploymentChannel'],
        deploymentContexts: ['RecordActionDeploymentContext'],
        hasGuidedActions: '?boolean',
        hasRecommendations: '?boolean',
        masterLabel: 'string',
        recommendation: '?RecordActionRecommendation',
        selectableItems: ['RecordActionSelectableItem']
      },
      "extends": 'Metadata'
    },
    RecordActionDeploymentChannel: {
      type: 'RecordActionDeploymentChannel',
      props: {
        channel: 'string',
        channelItems: ['RecordActionDefaultItem'],
        isAutopopEnabled: '?boolean'
      }
    },
    RecordActionDefaultItem: {
      type: 'RecordActionDefaultItem',
      props: {
        action: 'string',
        isMandatory: '?boolean',
        isUiRemoveHidden: '?boolean',
        pinned: 'string',
        position: 'number',
        type: 'string'
      }
    },
    RecordActionDeploymentContext: {
      type: 'RecordActionDeploymentContext',
      props: {
        entityName: 'string',
        recommendationStrategy: '?string'
      }
    },
    RecordActionRecommendation: {
      type: 'RecordActionRecommendation',
      props: {
        defaultStrategy: '?string',
        hasDescription: 'boolean',
        hasImage: 'boolean',
        hasRejectAction: 'boolean',
        hasTitle: 'boolean',
        maxDisplayRecommendations: 'number'
      }
    },
    RecordActionSelectableItem: {
      type: 'RecordActionSelectableItem',
      props: {
        action: 'string',
        type: 'string'
      }
    },
    RecordPageSettings: {
      type: 'RecordPageSettings',
      props: {
        enableActivityRelatedList: '?boolean',
        enableFullRecordView: '?boolean'
      },
      "extends": 'Metadata'
    },
    RemoteSiteSetting: {
      type: 'RemoteSiteSetting',
      props: {
        description: '?string',
        disableProtocolSecurity: 'boolean',
        isActive: 'boolean',
        url: 'string'
      },
      "extends": 'Metadata'
    },
    Report: {
      type: 'Report',
      props: {
        aggregates: ['ReportAggregate'],
        block: ['Report'],
        blockInfo: '?ReportBlockInfo',
        buckets: ['ReportBucketField'],
        chart: '?ReportChart',
        colorRanges: ['ReportColorRange'],
        columns: ['ReportColumn'],
        crossFilters: ['ReportCrossFilter'],
        currency: '?string',
        customDetailFormulas: ['ReportCustomDetailFormula'],
        dataCategoryFilters: ['ReportDataCategoryFilter'],
        description: '?string',
        division: '?string',
        filter: '?ReportFilter',
        folderName: '?string',
        format: 'string',
        formattingRules: ['ReportFormattingRule'],
        groupingsAcross: ['ReportGrouping'],
        groupingsDown: ['ReportGrouping'],
        historicalSelector: '?ReportHistoricalSelector',
        name: 'string',
        numSubscriptions: '?number',
        params: ['ReportParam'],
        reportType: 'string',
        roleHierarchyFilter: '?string',
        rowLimit: '?number',
        scope: '?string',
        showCurrentDate: '?boolean',
        showDetails: '?boolean',
        showGrandTotal: '?boolean',
        showSubTotals: '?boolean',
        sortColumn: '?string',
        sortOrder: '?string',
        territoryHierarchyFilter: '?string',
        timeFrameFilter: '?ReportTimeFrameFilter',
        userFilter: '?string'
      },
      "extends": 'Metadata'
    },
    ReportAggregate: {
      type: 'ReportAggregate',
      props: {
        acrossGroupingContext: '?string',
        calculatedFormula: 'string',
        datatype: 'string',
        description: '?string',
        developerName: 'string',
        downGroupingContext: '?string',
        isActive: 'boolean',
        isCrossBlock: '?boolean',
        masterLabel: 'string',
        reportType: '?string',
        scale: '?number'
      }
    },
    ReportBlockInfo: {
      type: 'ReportBlockInfo',
      props: {
        aggregateReferences: ['ReportAggregateReference'],
        blockId: 'string',
        joinTable: 'string'
      }
    },
    ReportAggregateReference: {
      type: 'ReportAggregateReference',
      props: {
        aggregate: 'string'
      }
    },
    ReportBucketField: {
      type: 'ReportBucketField',
      props: {
        bucketType: 'string',
        developerName: 'string',
        masterLabel: 'string',
        nullTreatment: '?string',
        otherBucketLabel: '?string',
        sourceColumnName: 'string',
        useOther: '?boolean',
        values: ['ReportBucketFieldValue']
      }
    },
    ReportBucketFieldValue: {
      type: 'ReportBucketFieldValue',
      props: {
        sourceValues: ['ReportBucketFieldSourceValue'],
        value: 'string'
      }
    },
    ReportBucketFieldSourceValue: {
      type: 'ReportBucketFieldSourceValue',
      props: {
        from: '?string',
        sourceValue: '?string',
        to: '?string'
      }
    },
    ReportChart: {
      type: 'ReportChart',
      props: {
        backgroundColor1: '?string',
        backgroundColor2: '?string',
        backgroundFadeDir: '?string',
        chartSummaries: ['ChartSummary'],
        chartType: 'string',
        enableHoverLabels: '?boolean',
        expandOthers: '?boolean',
        groupingColumn: '?string',
        legendPosition: '?string',
        location: '?string',
        secondaryGroupingColumn: '?string',
        showAxisLabels: '?boolean',
        showPercentage: '?boolean',
        showTotal: '?boolean',
        showValues: '?boolean',
        size: '?string',
        summaryAxisManualRangeEnd: '?number',
        summaryAxisManualRangeStart: '?number',
        summaryAxisRange: '?string',
        textColor: '?string',
        textSize: '?number',
        title: '?string',
        titleColor: '?string',
        titleSize: '?number'
      }
    },
    ReportColorRange: {
      type: 'ReportColorRange',
      props: {
        aggregate: '?string',
        columnName: 'string',
        highBreakpoint: '?number',
        highColor: 'string',
        lowBreakpoint: '?number',
        lowColor: 'string',
        midColor: 'string'
      }
    },
    ReportColumn: {
      type: 'ReportColumn',
      props: {
        aggregateTypes: ['string'],
        field: 'string',
        reverseColors: '?boolean',
        showChanges: '?boolean'
      }
    },
    ReportCrossFilter: {
      type: 'ReportCrossFilter',
      props: {
        criteriaItems: ['ReportFilterItem'],
        operation: 'string',
        primaryTableColumn: 'string',
        relatedTable: 'string',
        relatedTableJoinColumn: 'string'
      }
    },
    ReportFilterItem: {
      type: 'ReportFilterItem',
      props: {
        column: 'string',
        columnToColumn: '?boolean',
        isUnlocked: '?boolean',
        operator: 'string',
        snapshot: '?string',
        value: '?string'
      }
    },
    ReportCustomDetailFormula: {
      type: 'ReportCustomDetailFormula',
      props: {
        calculatedFormula: 'string',
        dataType: 'string',
        description: '?string',
        developerName: 'string',
        label: 'string',
        scale: 'number'
      }
    },
    ReportDataCategoryFilter: {
      type: 'ReportDataCategoryFilter',
      props: {
        dataCategory: 'string',
        dataCategoryGroup: 'string',
        operator: 'string'
      }
    },
    ReportFilter: {
      type: 'ReportFilter',
      props: {
        booleanFilter: '?string',
        criteriaItems: ['ReportFilterItem'],
        language: '?string'
      }
    },
    ReportFormattingRule: {
      type: 'ReportFormattingRule',
      props: {
        aggregate: '?string',
        columnName: 'string',
        values: ['ReportFormattingRuleValue']
      }
    },
    ReportFormattingRuleValue: {
      type: 'ReportFormattingRuleValue',
      props: {
        backgroundColor: '?string',
        rangeUpperBound: '?number'
      }
    },
    ReportGrouping: {
      type: 'ReportGrouping',
      props: {
        aggregateType: '?string',
        dateGranularity: '?string',
        field: 'string',
        sortByName: '?string',
        sortOrder: 'string',
        sortType: '?string'
      }
    },
    ReportHistoricalSelector: {
      type: 'ReportHistoricalSelector',
      props: {
        snapshot: ['string']
      }
    },
    ReportParam: {
      type: 'ReportParam',
      props: {
        name: 'string',
        value: 'string'
      }
    },
    ReportTimeFrameFilter: {
      type: 'ReportTimeFrameFilter',
      props: {
        dateColumn: 'string',
        endDate: '?string',
        interval: 'string',
        startDate: '?string'
      }
    },
    ReportType: {
      type: 'ReportType',
      props: {
        autogenerated: '?boolean',
        baseObject: 'string',
        category: 'string',
        deployed: 'boolean',
        description: '?string',
        join: '?ObjectRelationship',
        label: 'string',
        sections: ['ReportLayoutSection']
      },
      "extends": 'Metadata'
    },
    ObjectRelationship: {
      type: 'ObjectRelationship',
      props: {
        join: '?ObjectRelationship',
        outerJoin: 'boolean',
        relationship: 'string'
      }
    },
    ReportLayoutSection: {
      type: 'ReportLayoutSection',
      props: {
        columns: ['ReportTypeColumn'],
        masterLabel: 'string'
      }
    },
    ReportTypeColumn: {
      type: 'ReportTypeColumn',
      props: {
        checkedByDefault: 'boolean',
        displayNameOverride: '?string',
        field: 'string',
        table: 'string'
      }
    },
    RestrictionRule: {
      type: 'RestrictionRule',
      props: {
        active: 'boolean',
        description: 'string',
        enforcementType: 'string',
        masterLabel: 'string',
        recordFilter: 'string',
        targetEntity: 'string',
        userCriteria: 'string',
        version: 'number'
      },
      "extends": 'Metadata'
    },
    RetailExecutionSettings: {
      type: 'RetailExecutionSettings',
      props: {
        enableRetailExecution: '?boolean'
      },
      "extends": 'Metadata'
    },
    RoleOrTerritory: {
      type: 'RoleOrTerritory',
      props: {
        caseAccessLevel: '?string',
        contactAccessLevel: '?string',
        description: '?string',
        mayForecastManagerShare: '?boolean',
        name: 'string',
        opportunityAccessLevel: '?string'
      },
      "extends": 'Metadata'
    },
    Role: {
      type: 'Role',
      props: {
        parentRole: '?string'
      },
      "extends": 'RoleOrTerritory'
    },
    Territory: {
      type: 'Territory',
      props: {
        accountAccessLevel: '?string',
        parentTerritory: '?string'
      },
      "extends": 'RoleOrTerritory'
    },
    SamlSsoConfig: {
      type: 'SamlSsoConfig',
      props: {
        attributeName: '?string',
        attributeNameIdFormat: '?string',
        decryptionCertificate: '?string',
        errorUrl: '?string',
        executionUserId: '?string',
        identityLocation: 'string',
        identityMapping: 'string',
        issuer: 'string',
        loginUrl: '?string',
        logoutUrl: '?string',
        name: 'string',
        oauthTokenEndpoint: '?string',
        redirectBinding: '?boolean',
        requestSignatureMethod: '?string',
        requestSigningCertId: '?string',
        salesforceLoginUrl: '?string',
        samlEntityId: 'string',
        samlJitHandlerId: '?string',
        samlVersion: 'string',
        singleLogoutBinding: '?string',
        singleLogoutUrl: '?string',
        userProvisioning: '?boolean',
        validationCert: 'string'
      },
      "extends": 'Metadata'
    },
    SchemaSettings: {
      type: 'SchemaSettings',
      props: {
        enableAdvancedCMTSecurity: '?boolean',
        enableAdvancedCSSecurity: '?boolean',
        enableListCustomSettingCreation: '?boolean',
        enableSOSLOnCustomSettings: '?boolean'
      },
      "extends": 'Metadata'
    },
    SearchSettings: {
      type: 'SearchSettings',
      props: {
        documentContentSearchEnabled: 'boolean',
        enableAdvancedSearchInAlohaSidebar: '?boolean',
        enableEinsteinSearchPersonalization: '?boolean',
        enableQuerySuggestionPigOn: '?boolean',
        enableSalesforceGeneratedSynonyms: '?boolean',
        enableSetupSearch: '?boolean',
        optimizeSearchForCJKEnabled: 'boolean',
        recentlyViewedUsersForBlankLookupEnabled: 'boolean',
        searchSettingsByObject: 'SearchSettingsByObject',
        sidebarAutoCompleteEnabled: 'boolean',
        sidebarDropDownListEnabled: 'boolean',
        sidebarLimitToItemsIOwnCheckboxEnabled: 'boolean',
        singleSearchResultShortcutEnabled: 'boolean',
        spellCorrectKnowledgeSearchEnabled: 'boolean'
      },
      "extends": 'Metadata'
    },
    SearchSettingsByObject: {
      type: 'SearchSettingsByObject',
      props: {
        searchSettingsByObject: ['ObjectSearchSetting']
      }
    },
    ObjectSearchSetting: {
      type: 'ObjectSearchSetting',
      props: {
        enhancedLookupEnabled: 'boolean',
        lookupAutoCompleteEnabled: 'boolean',
        name: 'string',
        resultsPerPageCount: 'number'
      }
    },
    SecuritySettings: {
      type: 'SecuritySettings',
      props: {
        canUsersGrantLoginAccess: '?boolean',
        enableAdminLoginAsAnyUser: '?boolean',
        enableAuditFieldsInactiveOwner: '?boolean',
        enableAuraSecureEvalPref: '?boolean',
        enableRequireHttpsConnection: '?boolean',
        isTLSv12Required: '?boolean',
        isTLSv12RequiredCommunities: '?boolean',
        networkAccess: '?NetworkAccess',
        passwordPolicies: '?PasswordPolicies',
        sessionSettings: '?SessionSettings',
        singleSignOnSettings: '?SingleSignOnSettings'
      },
      "extends": 'Metadata'
    },
    NetworkAccess: {
      type: 'NetworkAccess',
      props: {
        ipRanges: ['IpRange']
      }
    },
    IpRange: {
      type: 'IpRange',
      props: {
        description: '?string',
        end: '?string',
        start: '?string'
      }
    },
    PasswordPolicies: {
      type: 'PasswordPolicies',
      props: {
        apiOnlyUserHomePageURL: '?string',
        complexity: '?string',
        enableSetPasswordInApi: '?boolean',
        expiration: '?string',
        historyRestriction: '?string',
        lockoutInterval: '?string',
        maxLoginAttempts: '?string',
        minimumPasswordLength: '?string',
        minimumPasswordLifetime: '?boolean',
        obscureSecretAnswer: '?boolean',
        passwordAssistanceMessage: '?string',
        passwordAssistanceURL: '?string',
        questionRestriction: '?string'
      }
    },
    SessionSettings: {
      type: 'SessionSettings',
      props: {
        allowUserAuthenticationByCertificate: '?boolean',
        canConfirmEmailChangeInLightningCommunities: '?boolean',
        disableTimeoutWarning: '?boolean',
        enableCSPOnEmail: '?boolean',
        enableCSRFOnGet: '?boolean',
        enableCSRFOnPost: '?boolean',
        enableCacheAndAutocomplete: '?boolean',
        enableClickjackNonsetupSFDC: '?boolean',
        enableClickjackNonsetupUser: '?boolean',
        enableClickjackNonsetupUserHeaderless: '?boolean',
        enableClickjackSetup: '?boolean',
        enableContentSniffingProtection: '?boolean',
        enableLightningLogin: '?boolean',
        enableLightningLoginOnlyWithUserPerm: '?boolean',
        enablePostForSessions: '?boolean',
        enableSMSIdentity: '?boolean',
        enableU2F: '?boolean',
        enableUpgradeInsecureRequests: '?boolean',
        enableXssProtection: '?boolean',
        enforceIpRangesEveryRequest: '?boolean',
        forceLogoutOnSessionTimeout: '?boolean',
        forceRelogin: '?boolean',
        hasRetainedLoginHints: '?boolean',
        hasUserSwitching: '?boolean',
        hstsOnForcecomSites: '?boolean',
        identityConfirmationOnEmailChange: '?boolean',
        identityConfirmationOnTwoFactorRegistrationEnabled: '?boolean',
        lockSessionsToDomain: '?boolean',
        lockSessionsToIp: '?boolean',
        lockerServiceAPIVersion: '?string',
        lockerServiceCSP: '?boolean',
        lockerServiceFrozenRealm: '?boolean',
        logoutURL: '?string',
        redirectionWarning: '?boolean',
        referrerPolicy: '?boolean',
        requireHttpOnly: '?boolean',
        requireHttps: '?boolean',
        securityCentralKillSession: '?boolean',
        sessionTimeout: '?string'
      }
    },
    SingleSignOnSettings: {
      type: 'SingleSignOnSettings',
      props: {
        enableForceDelegatedCallout: '?boolean',
        enableMultipleSamlConfigs: '?boolean',
        enableSamlJitProvisioning: '?boolean',
        enableSamlLogin: '?boolean'
      }
    },
    ServiceChannel: {
      type: 'ServiceChannel',
      props: {
        interactionComponent: '?string',
        label: 'string',
        relatedEntityType: 'string',
        secondaryRoutingPriorityField: '?string',
        serviceChannelFieldPriorities: ['ServiceChannelFieldPriority']
      },
      "extends": 'Metadata'
    },
    ServiceChannelFieldPriority: {
      type: 'ServiceChannelFieldPriority',
      props: {
        priority: 'number',
        value: 'string'
      }
    },
    ServicePresenceStatus: {
      type: 'ServicePresenceStatus',
      props: {
        channels: '?ServiceChannelStatus',
        label: 'string'
      },
      "extends": 'Metadata'
    },
    ServiceChannelStatus: {
      type: 'ServiceChannelStatus',
      props: {
        channel: ['string']
      }
    },
    SharingBaseRule: {
      type: 'SharingBaseRule',
      props: {
        accessLevel: 'string',
        accountSettings: '?AccountSharingRuleSettings',
        description: '?string',
        label: 'string',
        sharedTo: 'SharedTo'
      },
      "extends": 'Metadata'
    },
    AccountSharingRuleSettings: {
      type: 'AccountSharingRuleSettings',
      props: {
        caseAccessLevel: 'string',
        contactAccessLevel: 'string',
        opportunityAccessLevel: 'string'
      }
    },
    SharingCriteriaRule: {
      type: 'SharingCriteriaRule',
      props: {
        booleanFilter: '?string',
        criteriaItems: ['FilterItem']
      },
      "extends": 'SharingBaseRule'
    },
    SharingGuestRule: {
      type: 'SharingGuestRule',
      props: {
        booleanFilter: '?string',
        criteriaItems: ['FilterItem']
      },
      "extends": 'SharingBaseRule'
    },
    SharingOwnerRule: {
      type: 'SharingOwnerRule',
      props: {
        sharedFrom: 'SharedTo'
      },
      "extends": 'SharingBaseRule'
    },
    SharingTerritoryRule: {
      type: 'SharingTerritoryRule',
      props: {},
      "extends": 'SharingOwnerRule'
    },
    SharingRules: {
      type: 'SharingRules',
      props: {
        sharingCriteriaRules: ['SharingCriteriaRule'],
        sharingGuestRules: ['SharingGuestRule'],
        sharingOwnerRules: ['SharingOwnerRule'],
        sharingTerritoryRules: ['SharingTerritoryRule']
      },
      "extends": 'Metadata'
    },
    SharingSet: {
      type: 'SharingSet',
      props: {
        accessMappings: ['AccessMapping'],
        description: '?string',
        name: 'string',
        profiles: ['string']
      },
      "extends": 'Metadata'
    },
    AccessMapping: {
      type: 'AccessMapping',
      props: {
        accessLevel: 'string',
        object: 'string',
        objectField: 'string',
        userField: 'string'
      }
    },
    SharingSettings: {
      type: 'SharingSettings',
      props: {
        enableAccountRoleOptimization: '?boolean',
        enableAssetSharing: '?boolean',
        enableCommunityUserVisibility: '?boolean',
        enableExternalSharingModel: '?boolean',
        enableManagerGroups: '?boolean',
        enableManualUserRecordSharing: '?boolean',
        enablePartnerSuperUserAccess: '?boolean',
        enablePortalUserCaseSharing: '?boolean',
        enablePortalUserVisibility: '?boolean',
        enableRemoveTMGroupMembership: '?boolean',
        enableSecureGuestAccess: '?boolean',
        enableStandardReportVisibility: '?boolean',
        enableTerritoryForecastManager: '?boolean'
      },
      "extends": 'Metadata'
    },
    SiteSettings: {
      type: 'SiteSettings',
      props: {
        enableProxyLoginICHeader: '?boolean',
        enableTopicsInSites: '?boolean',
        enableVisualforceApiAccessAllowed: '?boolean'
      },
      "extends": 'Metadata'
    },
    Skill: {
      type: 'Skill',
      props: {
        assignments: '?SkillAssignments',
        description: '?string',
        label: 'string'
      },
      "extends": 'Metadata'
    },
    SkillAssignments: {
      type: 'SkillAssignments',
      props: {
        profiles: '?SkillProfileAssignments',
        users: '?SkillUserAssignments'
      }
    },
    SkillProfileAssignments: {
      type: 'SkillProfileAssignments',
      props: {
        profile: ['string']
      }
    },
    SkillUserAssignments: {
      type: 'SkillUserAssignments',
      props: {
        user: ['string']
      }
    },
    SocialCustomerServiceSettings: {
      type: 'SocialCustomerServiceSettings',
      props: {
        caseSubjectOption: 'string',
        enableSocialApprovals: '?boolean',
        enableSocialCaseAssignmentRules: '?boolean',
        enableSocialCustomerService: '?boolean',
        enableSocialPersonaHistoryTracking: '?boolean',
        enableSocialPostHistoryTracking: '?boolean',
        enableSocialReceiveParentPost: '?boolean'
      },
      "extends": 'Metadata'
    },
    SocialProfileSettings: {
      type: 'SocialProfileSettings',
      props: {
        enableSocialProfiles: '?boolean',
        isFacebookSocialProfilesDisabled: '?boolean',
        isLinkedInSocialProfilesDisabled: '?boolean',
        isTwitterSocialProfilesDisabled: '?boolean',
        isYouTubeSocialProfilesDisabled: '?boolean'
      },
      "extends": 'Metadata'
    },
    StandardValueSet: {
      type: 'StandardValueSet',
      props: {
        groupingStringEnum: '?string',
        sorted: 'boolean',
        standardValue: ['StandardValue']
      },
      "extends": 'Metadata'
    },
    StandardValueSetTranslation: {
      type: 'StandardValueSetTranslation',
      props: {
        valueTranslation: ['ValueTranslation']
      },
      "extends": 'Metadata'
    },
    SurveySettings: {
      type: 'SurveySettings',
      props: {
        enableSurvey: '?boolean',
        enableSurveyOwnerCanManageResponse: '?boolean'
      },
      "extends": 'Metadata'
    },
    SynonymDictionary: {
      type: 'SynonymDictionary',
      props: {
        groups: ['SynonymGroup'],
        isProtected: '?boolean',
        label: 'string'
      },
      "extends": 'Metadata'
    },
    SystemNotificationSettings: {
      type: 'SystemNotificationSettings',
      props: {
        disableDowntimeNotifications: '?boolean',
        disableMaintenanceNotifications: '?boolean'
      },
      "extends": 'Metadata'
    },
    Territory2: {
      type: 'Territory2',
      props: {
        accountAccessLevel: '?string',
        caseAccessLevel: '?string',
        contactAccessLevel: '?string',
        customFields: ['FieldValue'],
        description: '?string',
        name: 'string',
        opportunityAccessLevel: '?string',
        parentTerritory: '?string',
        ruleAssociations: ['Territory2RuleAssociation'],
        territory2Type: 'string'
      },
      "extends": 'Metadata'
    },
    FieldValue: {
      type: 'FieldValue',
      props: {
        name: 'string',
        value: '?any'
      }
    },
    Territory2RuleAssociation: {
      type: 'Territory2RuleAssociation',
      props: {
        inherited: 'boolean',
        ruleName: 'string'
      }
    },
    Territory2Model: {
      type: 'Territory2Model',
      props: {
        customFields: ['FieldValue'],
        description: '?string',
        name: 'string'
      },
      "extends": 'Metadata'
    },
    Territory2Rule: {
      type: 'Territory2Rule',
      props: {
        active: 'boolean',
        booleanFilter: '?string',
        name: 'string',
        objectType: 'string',
        ruleItems: ['Territory2RuleItem']
      },
      "extends": 'Metadata'
    },
    Territory2RuleItem: {
      type: 'Territory2RuleItem',
      props: {
        field: 'string',
        operation: 'string',
        value: '?string'
      }
    },
    Territory2Settings: {
      type: 'Territory2Settings',
      props: {
        defaultAccountAccessLevel: '?string',
        defaultCaseAccessLevel: '?string',
        defaultContactAccessLevel: '?string',
        defaultOpportunityAccessLevel: '?string',
        enableTerritoryManagement2: '?boolean',
        opportunityFilterSettings: '?Territory2SettingsOpportunityFilter'
      },
      "extends": 'Metadata'
    },
    Territory2SettingsOpportunityFilter: {
      type: 'Territory2SettingsOpportunityFilter',
      props: {
        apexClassName: '?string',
        enableFilter: 'boolean',
        runOnCreate: 'boolean'
      }
    },
    Territory2Type: {
      type: 'Territory2Type',
      props: {
        description: '?string',
        name: 'string',
        priority: 'number'
      },
      "extends": 'Metadata'
    },
    TimeSheetTemplate: {
      type: 'TimeSheetTemplate',
      props: {
        active: 'boolean',
        description: '?string',
        frequency: 'string',
        masterLabel: 'string',
        startDate: 'string',
        timeSheetTemplateAssignments: ['TimeSheetTemplateAssignment'],
        workWeekEndDay: 'string',
        workWeekStartDay: 'string'
      },
      "extends": 'Metadata'
    },
    TimeSheetTemplateAssignment: {
      type: 'TimeSheetTemplateAssignment',
      props: {
        assignedTo: '?string'
      }
    },
    TopicsForObjects: {
      type: 'TopicsForObjects',
      props: {
        enableTopics: 'boolean',
        entityApiName: 'string'
      },
      "extends": 'Metadata'
    },
    TrailheadSettings: {
      type: 'TrailheadSettings',
      props: {
        enableMyTrailheadPref: '?boolean'
      },
      "extends": 'Metadata'
    },
    TransactionSecurityPolicy: {
      type: 'TransactionSecurityPolicy',
      props: {
        action: 'TransactionSecurityAction',
        active: 'boolean',
        apexClass: '?string',
        description: '?string',
        developerName: '?string',
        eventName: '?string',
        eventType: '?string',
        executionUser: '?string',
        flow: '?string',
        masterLabel: '?string',
        resourceName: '?string',
        type: '?string'
      },
      "extends": 'Metadata'
    },
    TransactionSecurityAction: {
      type: 'TransactionSecurityAction',
      props: {
        block: 'boolean',
        endSession: 'boolean',
        freezeUser: 'boolean',
        notifications: ['TransactionSecurityNotification'],
        twoFactorAuthentication: 'boolean'
      }
    },
    TransactionSecurityNotification: {
      type: 'TransactionSecurityNotification',
      props: {
        inApp: 'boolean',
        sendEmail: 'boolean',
        user: 'string'
      }
    },
    Translations: {
      type: 'Translations',
      props: {
        customApplications: ['CustomApplicationTranslation'],
        customDataTypeTranslations: ['CustomDataTypeTranslation'],
        customLabels: ['CustomLabelTranslation'],
        customPageWebLinks: ['CustomPageWebLinkTranslation'],
        customTabs: ['CustomTabTranslation'],
        flowDefinitions: ['FlowDefinitionTranslation'],
        quickActions: ['GlobalQuickActionTranslation'],
        reportTypes: ['ReportTypeTranslation'],
        scontrols: ['ScontrolTranslation']
      },
      "extends": 'Metadata'
    },
    CustomApplicationTranslation: {
      type: 'CustomApplicationTranslation',
      props: {
        label: 'string',
        name: 'string'
      }
    },
    CustomDataTypeTranslation: {
      type: 'CustomDataTypeTranslation',
      props: {
        components: ['CustomDataTypeComponentTranslation'],
        customDataTypeName: 'string',
        description: '?string',
        label: '?string'
      }
    },
    CustomDataTypeComponentTranslation: {
      type: 'CustomDataTypeComponentTranslation',
      props: {
        developerSuffix: 'string',
        label: '?string'
      }
    },
    CustomLabelTranslation: {
      type: 'CustomLabelTranslation',
      props: {
        label: 'string',
        name: 'string'
      }
    },
    CustomPageWebLinkTranslation: {
      type: 'CustomPageWebLinkTranslation',
      props: {
        label: 'string',
        name: 'string'
      }
    },
    CustomTabTranslation: {
      type: 'CustomTabTranslation',
      props: {
        label: 'string',
        name: 'string'
      }
    },
    FlowDefinitionTranslation: {
      type: 'FlowDefinitionTranslation',
      props: {
        flows: ['FlowTranslation'],
        fullName: 'string',
        label: '?string'
      }
    },
    FlowTranslation: {
      type: 'FlowTranslation',
      props: {
        choices: ['FlowChoiceTranslation'],
        fullName: 'string',
        label: '?string',
        screens: ['FlowScreenTranslation'],
        stages: ['FlowStageTranslation'],
        textTemplates: ['FlowTextTemplateTranslation']
      }
    },
    FlowChoiceTranslation: {
      type: 'FlowChoiceTranslation',
      props: {
        choiceText: '?string',
        name: 'string',
        userInput: '?FlowChoiceUserInputTranslation'
      }
    },
    FlowChoiceUserInputTranslation: {
      type: 'FlowChoiceUserInputTranslation',
      props: {
        promptText: '?string',
        validationRule: '?FlowInputValidationRuleTranslation'
      }
    },
    FlowInputValidationRuleTranslation: {
      type: 'FlowInputValidationRuleTranslation',
      props: {
        errorMessage: '?string'
      }
    },
    FlowScreenTranslation: {
      type: 'FlowScreenTranslation',
      props: {
        fields: ['FlowScreenFieldTranslation'],
        helpText: '?string',
        name: 'string',
        pausedText: '?string'
      }
    },
    FlowScreenFieldTranslation: {
      type: 'FlowScreenFieldTranslation',
      props: {
        fieldText: '?string',
        helpText: '?string',
        name: 'string',
        validationRule: '?FlowInputValidationRuleTranslation'
      }
    },
    FlowStageTranslation: {
      type: 'FlowStageTranslation',
      props: {
        label: '?string',
        name: 'string'
      }
    },
    FlowTextTemplateTranslation: {
      type: 'FlowTextTemplateTranslation',
      props: {
        name: 'string',
        text: '?string'
      }
    },
    GlobalQuickActionTranslation: {
      type: 'GlobalQuickActionTranslation',
      props: {
        label: 'string',
        name: 'string'
      }
    },
    ReportTypeTranslation: {
      type: 'ReportTypeTranslation',
      props: {
        description: '?string',
        label: '?string',
        name: 'string',
        sections: ['ReportTypeSectionTranslation']
      }
    },
    ReportTypeSectionTranslation: {
      type: 'ReportTypeSectionTranslation',
      props: {
        columns: ['ReportTypeColumnTranslation'],
        label: '?string',
        name: 'string'
      }
    },
    ReportTypeColumnTranslation: {
      type: 'ReportTypeColumnTranslation',
      props: {
        label: 'string',
        name: 'string'
      }
    },
    ScontrolTranslation: {
      type: 'ScontrolTranslation',
      props: {
        label: 'string',
        name: 'string'
      }
    },
    UIObjectRelationConfig: {
      type: 'UIObjectRelationConfig',
      props: {
        UIObjectRelationFieldConfigs: ['UIObjectRelationFieldConfig'],
        contextObject: 'string',
        contextObjectRecordType: '?string',
        directRelationshipField: '?string',
        indirectObjectContextField: '?string',
        indirectObjectRelatedField: '?string',
        indirectRelationshipObject: '?string',
        isActive: 'boolean',
        masterLabel: 'string',
        relatedObject: 'string',
        relatedObjectRecordType: '?string',
        relationshipType: 'string'
      },
      "extends": 'Metadata'
    },
    UIObjectRelationFieldConfig: {
      type: 'UIObjectRelationFieldConfig',
      props: {
        displayLabel: 'string',
        queryText: 'string',
        rowOrder: 'number'
      }
    },
    UserCriteria: {
      type: 'UserCriteria',
      props: {
        creationAgeInSeconds: '?number',
        description: '?string',
        lastChatterActivityAgeInSeconds: '?number',
        masterLabel: 'string',
        profiles: ['string'],
        userTypes: ['string']
      },
      "extends": 'Metadata'
    },
    UserEngagementSettings: {
      type: 'UserEngagementSettings',
      props: {
        canGovCloudUseAdoptionApps: '?boolean',
        doesScheduledSwitcherRunDaily: '?boolean',
        enableCustomHelpGlobalSection: '?boolean',
        enableHelpMenuShowFeedback: '?boolean',
        enableHelpMenuShowHelp: '?boolean',
        enableHelpMenuShowNewUser: '?boolean',
        enableHelpMenuShowSearch: '?boolean',
        enableHelpMenuShowSfdcContent: '?boolean',
        enableHelpMenuShowShortcut: '?boolean',
        enableHelpMenuShowSupport: '?boolean',
        enableHelpMenuShowTrailhead: '?boolean',
        enableIBILOptOutDashboards: '?boolean',
        enableIBILOptOutEvents: '?boolean',
        enableIBILOptOutReports: '?boolean',
        enableIBILOptOutTasks: '?boolean',
        enableLexToClassicFeedbackEnable: '?boolean',
        enableOrchestrationInSandbox: '?boolean',
        enableOrgUserAssistEnabled: '?boolean',
        enableScheduledSwitcher: '?boolean',
        enableSfdcProductFeedbackSurvey: '?boolean',
        enableShowSalesforceUserAssist: '?boolean',
        isAutoTransitionDelayed: '?boolean',
        isCrucNotificationDisabled: '?boolean',
        isCustomProfileAutoTransitionDelayed: '?boolean',
        isLEXWelcomeMatDisabled: '?boolean',
        isMeetTheAssistantDisabledInClassic: '?boolean',
        isMeetTheAssistantDisabledInLightning: '?boolean',
        optimizerAppEnabled: '?boolean'
      },
      "extends": 'Metadata'
    },
    UserInterfaceSettings: {
      type: 'UserInterfaceSettings',
      props: {
        alternateAlohaListView: '?boolean',
        enableAsyncRelatedLists: '?boolean',
        enableClickjackUserPageHeaderless: '?boolean',
        enableCollapsibleSections: '?boolean',
        enableCollapsibleSideBar: '?boolean',
        enableCustomObjectTruncate: '?boolean',
        enableCustomeSideBarOnAllPages: '?boolean',
        enableDeleteFieldHistory: '?boolean',
        enableHoverDetails: '?boolean',
        enableInlineEdit: '?boolean',
        enableNewPageLayoutEditor: '?boolean',
        enablePersonalCanvas: '?boolean',
        enablePrintableListViews: '?boolean',
        enableProfileCustomTabsets: '?boolean',
        enableQuickCreate: '?boolean',
        enableTabOrganizer: '?boolean'
      },
      "extends": 'Metadata'
    },
    UserManagementSettings: {
      type: 'UserManagementSettings',
      props: {
        enableCanAnswerContainUsername: '?boolean',
        enableCanSaveUserPerm: '?boolean',
        enableConcealPersonalInfo: '?boolean',
        enableContactlessExternalIdentityUsers: '?boolean',
        enableEnhancedPermsetMgmt: '?boolean',
        enableEnhancedProfileMgmt: '?boolean',
        enableNewProfileUI: '?boolean',
        enableScrambleUserData: '?boolean',
        enableUserSelfDeactivate: '?boolean'
      },
      "extends": 'Metadata'
    },
    VoiceSettings: {
      type: 'VoiceSettings',
      props: {
        enableCallDisposition: '?boolean',
        enableVoiceCallList: '?boolean',
        enableVoiceCallRecording: '?boolean',
        enableVoiceCoaching: '?boolean',
        enableVoiceConferencing: '?boolean',
        enableVoiceLocalPresence: '?boolean',
        enableVoiceMail: '?boolean',
        enableVoiceMailDrop: '?boolean'
      },
      "extends": 'Metadata'
    },
    WaveApplication: {
      type: 'WaveApplication',
      props: {
        assetIcon: '?string',
        description: '?string',
        folder: 'string',
        masterLabel: 'string',
        shares: ['FolderShare'],
        templateOrigin: '?string',
        templateVersion: '?string'
      },
      "extends": 'Metadata'
    },
    WaveDataset: {
      type: 'WaveDataset',
      props: {
        application: 'string',
        description: '?string',
        masterLabel: 'string',
        templateAssetSourceName: '?string'
      },
      "extends": 'Metadata'
    },
    WaveTemplateBundle: {
      type: 'WaveTemplateBundle',
      props: {
        assetIcon: '?string',
        assetVersion: '?number',
        description: '?string',
        label: 'string',
        templateType: 'string'
      },
      "extends": 'Metadata'
    },
    WaveXmd: {
      type: 'WaveXmd',
      props: {
        application: '?string',
        dataset: 'string',
        datasetConnector: '?string',
        datasetFullyQualifiedName: '?string',
        dates: ['WaveXmdDate'],
        dimensions: ['WaveXmdDimension'],
        measures: ['WaveXmdMeasure'],
        organizations: ['WaveXmdOrganization'],
        origin: '?string',
        type: '?string',
        waveVisualization: '?string'
      },
      "extends": 'Metadata'
    },
    WaveXmdDate: {
      type: 'WaveXmdDate',
      props: {
        alias: 'string',
        compact: '?boolean',
        dateFieldDay: '?string',
        dateFieldEpochDay: '?string',
        dateFieldEpochSecond: '?string',
        dateFieldFiscalMonth: '?string',
        dateFieldFiscalQuarter: '?string',
        dateFieldFiscalWeek: '?string',
        dateFieldFiscalYear: '?string',
        dateFieldFullYear: '?string',
        dateFieldHour: '?string',
        dateFieldMinute: '?string',
        dateFieldMonth: '?string',
        dateFieldQuarter: '?string',
        dateFieldSecond: '?string',
        dateFieldWeek: '?string',
        dateFieldYear: '?string',
        description: '?string',
        firstDayOfWeek: 'number',
        fiscalMonthOffset: 'number',
        isYearEndFiscalYear: '?boolean',
        label: '?string',
        showInExplorer: '?boolean',
        sortIndex: 'number',
        type: 'string'
      }
    },
    WaveXmdDimension: {
      type: 'WaveXmdDimension',
      props: {
        conditionalFormatting: ['WaveXmdFormattingProperty'],
        customActions: ['WaveXmdDimensionCustomAction'],
        customActionsEnabled: '?boolean',
        dateFormat: '?string',
        description: '?string',
        field: 'string',
        fullyQualifiedName: '?string',
        imageTemplate: '?string',
        isDerived: 'boolean',
        isMultiValue: '?boolean',
        label: '?string',
        linkTemplate: '?string',
        linkTemplateEnabled: '?boolean',
        linkTooltip: '?string',
        members: ['WaveXmdDimensionMember'],
        origin: '?string',
        recordDisplayFields: ['WaveXmdRecordDisplayLookup'],
        recordIdField: '?string',
        recordOrganizationIdField: '?string',
        salesforceActions: ['WaveXmdDimensionSalesforceAction'],
        salesforceActionsEnabled: '?boolean',
        showDetailsDefaultFieldIndex: '?number',
        showInExplorer: '?boolean',
        sortIndex: 'number'
      }
    },
    WaveXmdFormattingProperty: {
      type: 'WaveXmdFormattingProperty',
      props: {
        formattingBins: ['WaveXmdFormattingBin'],
        formattingPredicates: ['WaveXmdFormattingPredicate'],
        property: 'string',
        referenceField: 'string',
        sortIndex: 'number',
        type: 'string'
      }
    },
    WaveXmdFormattingBin: {
      type: 'WaveXmdFormattingBin',
      props: {
        bin: 'string',
        formatValue: 'string',
        label: 'string',
        sortIndex: 'number'
      }
    },
    WaveXmdFormattingPredicate: {
      type: 'WaveXmdFormattingPredicate',
      props: {
        formatValue: 'string',
        operator: 'string',
        sortIndex: 'number',
        value: 'string'
      }
    },
    WaveXmdDimensionCustomAction: {
      type: 'WaveXmdDimensionCustomAction',
      props: {
        customActionName: 'string',
        enabled: 'boolean',
        icon: '?string',
        method: '?string',
        sortIndex: 'number',
        target: '?string',
        tooltip: '?string',
        url: '?string'
      }
    },
    WaveXmdDimensionMember: {
      type: 'WaveXmdDimensionMember',
      props: {
        color: '?string',
        label: '?string',
        member: 'string',
        sortIndex: 'number'
      }
    },
    WaveXmdRecordDisplayLookup: {
      type: 'WaveXmdRecordDisplayLookup',
      props: {
        recordDisplayField: 'string'
      }
    },
    WaveXmdDimensionSalesforceAction: {
      type: 'WaveXmdDimensionSalesforceAction',
      props: {
        enabled: 'boolean',
        salesforceActionName: 'string',
        sortIndex: 'number'
      }
    },
    WaveXmdMeasure: {
      type: 'WaveXmdMeasure',
      props: {
        conditionalFormatting: ['WaveXmdFormattingProperty'],
        dateFormat: '?string',
        description: '?string',
        field: 'string',
        formatCustomFormat: '?string',
        formatDecimalDigits: '?number',
        formatIsNegativeParens: '?boolean',
        formatPrefix: '?string',
        formatSuffix: '?string',
        formatUnit: '?string',
        formatUnitMultiplier: '?number',
        fullyQualifiedName: '?string',
        isDerived: 'boolean',
        label: '?string',
        origin: '?string',
        showDetailsDefaultFieldIndex: '?number',
        showInExplorer: '?boolean',
        sortIndex: 'number'
      }
    },
    WaveXmdOrganization: {
      type: 'WaveXmdOrganization',
      props: {
        instanceUrl: 'string',
        label: 'string',
        organizationIdentifier: 'string',
        sortIndex: 'number'
      }
    },
    WorkDotComSettings: {
      type: 'WorkDotComSettings',
      props: {
        enableCoachingManagerGroupAccess: '?boolean',
        enableGoalManagerGroupAccess: '?boolean',
        enableProfileSkills: '?boolean',
        enableProfileSkillsAddFeedPost: '?boolean',
        enableProfileSkillsAutoSuggest: '?boolean',
        enableProfileSkillsUsePlatform: '?boolean',
        enableWorkBadgeDefRestrictPref: '?boolean',
        enableWorkCalibration: '?boolean',
        enableWorkCanvasPref: '?boolean',
        enableWorkCertification: '?boolean',
        enableWorkCertificationNotification: '?boolean',
        enableWorkRewardsPref: '?boolean',
        enableWorkThanksPref: '?boolean',
        enableWorkUseObjectivesForGoals: '?boolean'
      },
      "extends": 'Metadata'
    },
    Workflow: {
      type: 'Workflow',
      props: {
        alerts: ['WorkflowAlert'],
        fieldUpdates: ['WorkflowFieldUpdate'],
        flowActions: ['WorkflowFlowAction'],
        knowledgePublishes: ['WorkflowKnowledgePublish'],
        outboundMessages: ['WorkflowOutboundMessage'],
        rules: ['WorkflowRule'],
        send: ['WorkflowSend'],
        tasks: ['WorkflowTask']
      },
      "extends": 'Metadata'
    },
    WorkflowAlert: {
      type: 'WorkflowAlert',
      props: {
        ccEmails: ['string'],
        description: 'string',
        "protected": 'boolean',
        recipients: ['WorkflowEmailRecipient'],
        senderAddress: '?string',
        senderType: '?string',
        template: 'string'
      },
      "extends": 'WorkflowAction'
    },
    WorkflowAction: {
      type: 'WorkflowAction',
      props: {},
      "extends": 'Metadata'
    },
    WorkflowFieldUpdate: {
      type: 'WorkflowFieldUpdate',
      props: {
        description: '?string',
        field: 'string',
        formula: '?string',
        literalValue: '?string',
        lookupValue: '?string',
        lookupValueType: '?string',
        name: 'string',
        notifyAssignee: 'boolean',
        operation: 'string',
        "protected": 'boolean',
        reevaluateOnChange: '?boolean',
        targetObject: '?string'
      },
      "extends": 'WorkflowAction'
    },
    WorkflowFlowAction: {
      type: 'WorkflowFlowAction',
      props: {
        description: '?string',
        flow: 'string',
        flowInputs: ['WorkflowFlowActionParameter'],
        label: 'string',
        language: '?string',
        "protected": 'boolean'
      },
      "extends": 'WorkflowAction'
    },
    WorkflowFlowActionParameter: {
      type: 'WorkflowFlowActionParameter',
      props: {
        name: 'string',
        value: '?string'
      }
    },
    WorkflowKnowledgePublish: {
      type: 'WorkflowKnowledgePublish',
      props: {
        action: 'string',
        description: '?string',
        label: 'string',
        language: '?string',
        "protected": 'boolean'
      },
      "extends": 'WorkflowAction'
    },
    WorkflowOutboundMessage: {
      type: 'WorkflowOutboundMessage',
      props: {
        apiVersion: 'number',
        description: '?string',
        endpointUrl: 'string',
        fields: ['string'],
        includeSessionId: 'boolean',
        integrationUser: 'string',
        name: 'string',
        "protected": 'boolean',
        useDeadLetterQueue: '?boolean'
      },
      "extends": 'WorkflowAction'
    },
    WorkflowSend: {
      type: 'WorkflowSend',
      props: {
        action: 'string',
        description: '?string',
        label: 'string',
        language: '?string',
        "protected": 'boolean'
      },
      "extends": 'WorkflowAction'
    },
    WorkflowTask: {
      type: 'WorkflowTask',
      props: {
        assignedTo: '?string',
        assignedToType: 'string',
        description: '?string',
        dueDateOffset: 'number',
        notifyAssignee: 'boolean',
        offsetFromField: '?string',
        priority: 'string',
        "protected": 'boolean',
        status: 'string',
        subject: 'string'
      },
      "extends": 'WorkflowAction'
    },
    WorkflowEmailRecipient: {
      type: 'WorkflowEmailRecipient',
      props: {
        field: '?string',
        recipient: '?string',
        type: 'string'
      }
    },
    WorkflowRule: {
      type: 'WorkflowRule',
      props: {
        actions: ['WorkflowActionReference'],
        active: 'boolean',
        booleanFilter: '?string',
        criteriaItems: ['FilterItem'],
        description: '?string',
        formula: '?string',
        triggerType: 'string',
        workflowTimeTriggers: ['WorkflowTimeTrigger']
      },
      "extends": 'Metadata'
    },
    WorkflowTimeTrigger: {
      type: 'WorkflowTimeTrigger',
      props: {
        actions: ['WorkflowActionReference'],
        offsetFromField: '?string',
        timeLength: '?string',
        workflowTimeTriggerUnit: 'string'
      }
    },
    SaveResult: {
      type: 'SaveResult',
      props: {
        errors: ['Error'],
        fullName: 'string',
        success: 'boolean'
      }
    },
    Error: {
      type: 'Error',
      props: {
        extendedErrorDetails: ['ExtendedErrorDetails'],
        fields: ['string'],
        message: 'string',
        statusCode: 'string'
      }
    },
    ExtendedErrorDetails: {
      type: 'ExtendedErrorDetails',
      props: {
        extendedErrorCode: 'string'
      }
    },
    DeleteResult: {
      type: 'DeleteResult',
      props: {
        errors: ['Error'],
        fullName: 'string',
        success: 'boolean'
      }
    },
    DeployOptions: {
      type: 'DeployOptions',
      props: {
        allowMissingFiles: 'boolean',
        autoUpdatePackage: 'boolean',
        checkOnly: 'boolean',
        ignoreWarnings: 'boolean',
        performRetrieve: 'boolean',
        purgeOnDelete: 'boolean',
        rollbackOnError: 'boolean',
        runTests: ['string'],
        singlePackage: 'boolean',
        testLevel: 'string'
      }
    },
    AsyncResult: {
      type: 'AsyncResult',
      props: {
        done: 'boolean',
        id: 'string',
        message: '?string',
        state: 'string',
        statusCode: '?string'
      }
    },
    DescribeMetadataResult: {
      type: 'DescribeMetadataResult',
      props: {
        metadataObjects: ['DescribeMetadataObject'],
        organizationNamespace: 'string',
        partialSaveAllowed: 'boolean',
        testRequired: 'boolean'
      }
    },
    DescribeMetadataObject: {
      type: 'DescribeMetadataObject',
      props: {
        childXmlNames: ['string'],
        directoryName: 'string',
        inFolder: 'boolean',
        metaFile: 'boolean',
        suffix: '?string',
        xmlName: 'string'
      }
    },
    DescribeValueTypeResult: {
      type: 'DescribeValueTypeResult',
      props: {
        apiCreatable: 'boolean',
        apiDeletable: 'boolean',
        apiReadable: 'boolean',
        apiUpdatable: 'boolean',
        parentField: '?ValueTypeField',
        valueTypeFields: ['ValueTypeField']
      }
    },
    ValueTypeField: {
      type: 'ValueTypeField',
      props: {
        fields: ['ValueTypeField'],
        foreignKeyDomain: ['string'],
        isForeignKey: 'boolean',
        isNameField: 'boolean',
        minOccurs: 'number',
        name: 'string',
        picklistValues: ['PicklistEntry'],
        soapType: 'string',
        valueRequired: 'boolean'
      }
    },
    PicklistEntry: {
      type: 'PicklistEntry',
      props: {
        active: 'boolean',
        defaultValue: 'boolean',
        label: 'string',
        validFor: '?string',
        value: 'string'
      }
    },
    ListMetadataQuery: {
      type: 'ListMetadataQuery',
      props: {
        folder: '?string',
        type: 'string'
      }
    },
    ReadResult: {
      type: 'ReadResult',
      props: {
        records: ['Metadata']
      }
    },
    RetrieveRequest: {
      type: 'RetrieveRequest',
      props: {
        apiVersion: 'number',
        packageNames: ['string'],
        singlePackage: 'boolean',
        specificFiles: ['string'],
        unpackaged: '?Package'
      }
    },
    UpsertResult: {
      type: 'UpsertResult',
      props: {
        created: 'boolean',
        errors: ['Error'],
        fullName: 'string',
        success: 'boolean'
      }
    },
    LogInfo: {
      type: 'LogInfo',
      props: {
        category: 'string',
        level: 'string'
      }
    }
  };

  var _excluded$1 = ["$"];
  (function (exports) {

    var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
          enumerable: true,
          get: function get() {
            return m[k];
          }
        };
      }
      Object.defineProperty(o, k2, desc);
    } : function (o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function (m, exports) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
    };
    var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
      return mod && mod.__esModule ? mod : {
        "default": mod
      };
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.DeployResultLocator = exports.RetrieveResultLocator = exports.AsyncResultLocator = exports.MetadataApi = void 0;
    /**
     * @file Manages Salesforce Metadata API
     * @author Shinichi Tomita <shinichi.tomita@gmail.com>
     */
    var events_1 = require$$0$6;
    var stream_1 = require$$0$3;
    var form_data_1 = __importDefault(form_data);
    var jsforce_1 = requireJsforce();
    var soap_1 = __importDefault(soap$2);
    var function_1 = _function;
    var schema_1 = schema$2;
    __exportStar(schema$2, exports);
    /**
     *
     */
    function deallocateTypeWithMetadata(metadata) {
      metadata.$;
        var md = _objectWithoutProperties(metadata, _excluded$1);
      return md;
    }
    function assignTypeWithMetadata(metadata, type) {
      var convert = function convert(md) {
        return _objectSpread2(_defineProperty({}, '@xsi:type', type), md);
      };
      return Array.isArray(metadata) ? metadata.map(convert) : convert(metadata);
    }
    /**
     * Class for Salesforce Metadata API
     */
    var MetadataApi = /*#__PURE__*/function () {
      /**
       *
       */
      function MetadataApi(conn) {
        _classCallCheck(this, MetadataApi);
        _defineProperty(this, "_conn", void 0);
        /**
         * Polling interval in milliseconds
         */
        _defineProperty(this, "pollInterval", 1000);
        /**
         * Polling timeout in milliseconds
         */
        _defineProperty(this, "pollTimeout", 10000);
        this._conn = conn;
      }
      /**
       * Call Metadata API SOAP endpoint
       *
       * @private
       */
      return _createClass(MetadataApi, [{
        key: "_invoke",
        value: (function () {
          var _invoke2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(method, message, schema) {
            var soapEndpoint, res;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  soapEndpoint = new soap_1["default"](this._conn, {
                    xmlns: 'http://soap.sforce.com/2006/04/metadata',
                    endpointUrl: "".concat(this._conn.instanceUrl, "/services/Soap/m/").concat(this._conn.version)
                  });
                  _context.next = 3;
                  return soapEndpoint.invoke(method, message, schema ? {
                    result: schema
                  } : undefined, schema_1.ApiSchemas);
                case 3:
                  res = _context.sent;
                  return _context.abrupt("return", res.result);
                case 5:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function _invoke(_x, _x2, _x3) {
            return _invoke2.apply(this, arguments);
          }
          return _invoke;
        }())
      }, {
        key: "create",
        value: function create(type, metadata) {
          var isArray = Array.isArray(metadata);
          metadata = assignTypeWithMetadata(metadata, type);
          var schema = isArray ? [schema_1.ApiSchemas.SaveResult] : schema_1.ApiSchemas.SaveResult;
          return this._invoke('createMetadata', {
            metadata: metadata
          }, schema);
        }
      }, {
        key: "read",
        value: function () {
          var _read = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(type, fullNames) {
            var ReadResultSchema, res;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  ReadResultSchema = type in schema_1.ApiSchemas ? {
                    type: schema_1.ApiSchemas.ReadResult.type,
                    props: {
                      records: [type]
                    }
                  } : schema_1.ApiSchemas.ReadResult;
                  _context2.next = 3;
                  return this._invoke('readMetadata', {
                    type: type,
                    fullNames: fullNames
                  }, ReadResultSchema);
                case 3:
                  res = _context2.sent;
                  return _context2.abrupt("return", Array.isArray(fullNames) ? res.records.map(deallocateTypeWithMetadata) : deallocateTypeWithMetadata(res.records[0]));
                case 5:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, this);
          }));
          function read(_x4, _x5) {
            return _read.apply(this, arguments);
          }
          return read;
        }()
      }, {
        key: "update",
        value: function update(type, metadata) {
          var isArray = Array.isArray(metadata);
          metadata = assignTypeWithMetadata(metadata, type);
          var schema = isArray ? [schema_1.ApiSchemas.SaveResult] : schema_1.ApiSchemas.SaveResult;
          return this._invoke('updateMetadata', {
            metadata: metadata
          }, schema);
        }
      }, {
        key: "upsert",
        value: function upsert(type, metadata) {
          var isArray = Array.isArray(metadata);
          metadata = assignTypeWithMetadata(metadata, type);
          var schema = isArray ? [schema_1.ApiSchemas.UpsertResult] : schema_1.ApiSchemas.UpsertResult;
          return this._invoke('upsertMetadata', {
            metadata: metadata
          }, schema);
        }
      }, {
        key: "delete",
        value: function _delete(type, fullNames) {
          var schema = Array.isArray(fullNames) ? [schema_1.ApiSchemas.SaveResult] : schema_1.ApiSchemas.SaveResult;
          return this._invoke('deleteMetadata', {
            type: type,
            fullNames: fullNames
          }, schema);
        }
        /**
         * Rename fullname of a metadata component in the organization
         */
      }, {
        key: "rename",
        value: function rename(type, oldFullName, newFullName) {
          return this._invoke('renameMetadata', {
            type: type,
            oldFullName: oldFullName,
            newFullName: newFullName
          }, schema_1.ApiSchemas.SaveResult);
        }
        /**
         * Retrieves the metadata which describes your organization, including Apex classes and triggers,
         * custom objects, custom fields on standard objects, tab sets that define an app,
         * and many other components.
         */
      }, {
        key: "describe",
        value: function describe(asOfVersion) {
          if (!asOfVersion) {
            asOfVersion = this._conn.version;
          }
          return this._invoke('describeMetadata', {
            asOfVersion: asOfVersion
          }, schema_1.ApiSchemas.DescribeMetadataResult);
        }
        /**
         * Retrieves property information about metadata components in your organization
         */
      }, {
        key: "list",
        value: function list(queries, asOfVersion) {
          if (!asOfVersion) {
            asOfVersion = this._conn.version;
          }
          return this._invoke('listMetadata', {
            queries: queries,
            asOfVersion: asOfVersion
          }, [schema_1.ApiSchemas.FileProperties]);
        }
        /**
         * Checks the status of asynchronous metadata calls
         */
      }, {
        key: "checkStatus",
        value: function checkStatus(asyncProcessId) {
          var res = this._invoke('checkStatus', {
            asyncProcessId: asyncProcessId
          }, schema_1.ApiSchemas.AsyncResult);
          return new AsyncResultLocator(this, res);
        }
        /**
         * Retrieves XML file representations of components in an organization
         */
      }, {
        key: "retrieve",
        value: function retrieve(request) {
          var res = this._invoke('retrieve', {
            request: request
          }, schema_1.ApiSchemas.RetrieveResult);
          return new RetrieveResultLocator(this, res);
        }
        /**
         * Checks the status of declarative metadata call retrieve() and returns the zip file contents
         */
      }, {
        key: "checkRetrieveStatus",
        value: function checkRetrieveStatus(asyncProcessId) {
          return this._invoke('checkRetrieveStatus', {
            asyncProcessId: asyncProcessId
          }, schema_1.ApiSchemas.RetrieveResult);
        }
        /**
         * Will deploy a recently validated deploy request
         *
         * @param options.id = the deploy ID that's been validated already from a previous checkOnly deploy request
         * @param options.rest = a boolean whether or not to use the REST API
         * @returns the deploy ID of the recent validation request
         */
      }, {
        key: "deployRecentValidation",
        value: (function () {
          var _deployRecentValidation = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(options) {
            var id, rest, response, messageBody, requestInfo, requestOptions;
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  id = options.id, rest = options.rest;
                  if (!rest) {
                    _context3.next = 10;
                    break;
                  }
                  messageBody = JSON.stringify({
                    validatedDeployRequestId: id
                  });
                  requestInfo = {
                    method: 'POST',
                    url: "".concat(this._conn._baseUrl(), "/metadata/deployRequest"),
                    body: messageBody,
                    headers: {
                      'content-type': 'application/json'
                    }
                  };
                  requestOptions = {
                    headers: 'json'
                  }; // This is the deploy ID of the deployRecentValidation response, not
                  // the already validated deploy ID (i.e., validateddeployrequestid).
                  // REST returns an object with an id property, SOAP returns the id as a string directly.
                  _context3.next = 7;
                  return this._conn.request(requestInfo, requestOptions);
                case 7:
                  response = _context3.sent.id;
                  _context3.next = 13;
                  break;
                case 10:
                  _context3.next = 12;
                  return this._invoke('deployRecentValidation', {
                    validationId: id
                  });
                case 12:
                  response = _context3.sent;
                case 13:
                  return _context3.abrupt("return", response);
                case 14:
                case "end":
                  return _context3.stop();
              }
            }, _callee3, this);
          }));
          function deployRecentValidation(_x6) {
            return _deployRecentValidation.apply(this, arguments);
          }
          return deployRecentValidation;
        }()
        /**
         * Deploy components into an organization using zipped file representations
         * using the REST Metadata API instead of SOAP
         */
        )
      }, {
        key: "deployRest",
        value: function deployRest(zipInput) {
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          var form = new form_data_1["default"]();
          form.append('file', zipInput, {
            contentType: 'application/zip',
            filename: 'package.xml'
          });
          // Add the deploy options
          form.append('entity_content', JSON.stringify({
            deployOptions: options
          }), {
            contentType: 'application/json'
          });
          var request = {
            url: '/metadata/deployRequest',
            method: 'POST',
            headers: _objectSpread2({}, form.getHeaders()),
            body: form.getBuffer()
          };
          var res = this._conn.request(request);
          return new DeployResultLocator(this, res);
        }
        /**
         * Deploy components into an organization using zipped file representations
         */
      }, {
        key: "deploy",
        value: function deploy(zipInput) {
          var _this = this;
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          var res = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
            var zipContentB64;
            return _regeneratorRuntime().wrap(function _callee4$(_context4) {
              while (1) switch (_context4.prev = _context4.next) {
                case 0:
                  _context4.next = 2;
                  return new Promise(function (resolve, reject) {
                    if ((0, function_1.isObject)(zipInput) && 'pipe' in zipInput && typeof zipInput.pipe === 'function') {
                      var bufs = [];
                      zipInput.on('data', function (d) {
                        return bufs.push(d);
                      });
                      zipInput.on('error', reject);
                      zipInput.on('end', function () {
                        resolve(Buffer.concat(bufs).toString('base64'));
                      });
                      // zipInput.resume();
                    } else if (zipInput instanceof Buffer) {
                      resolve(zipInput.toString('base64'));
                    } else if (zipInput instanceof String || typeof zipInput === 'string') {
                      resolve(zipInput);
                    } else {
                      throw 'Unexpected zipInput type';
                    }
                  });
                case 2:
                  zipContentB64 = _context4.sent;
                  return _context4.abrupt("return", _this._invoke('deploy', {
                    ZipFile: zipContentB64,
                    DeployOptions: options
                  }, schema_1.ApiSchemas.DeployResult));
                case 4:
                case "end":
                  return _context4.stop();
              }
            }, _callee4);
          }))();
          return new DeployResultLocator(this, res);
        }
        /**
         * Checks the status of declarative metadata call deploy()
         */
      }, {
        key: "checkDeployStatus",
        value: function checkDeployStatus(asyncProcessId) {
          var includeDetails = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
          return this._invoke('checkDeployStatus', {
            asyncProcessId: asyncProcessId,
            includeDetails: includeDetails
          }, schema_1.ApiSchemas.DeployResult);
        }
      }, {
        key: "cancelDeploy",
        value: function () {
          var _cancelDeploy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(id) {
            return _regeneratorRuntime().wrap(function _callee5$(_context5) {
              while (1) switch (_context5.prev = _context5.next) {
                case 0:
                  return _context5.abrupt("return", this._invoke('cancelDeploy', {
                    id: id
                  }));
                case 1:
                case "end":
                  return _context5.stop();
              }
            }, _callee5, this);
          }));
          function cancelDeploy(_x7) {
            return _cancelDeploy.apply(this, arguments);
          }
          return cancelDeploy;
        }()
      }]);
    }();
    exports.MetadataApi = MetadataApi;
    /*--------------------------------------------*/
    /**
     * The locator class for Metadata API asynchronous call result
     */
    var AsyncResultLocator = /*#__PURE__*/function (_events_1$EventEmitte) {
      /**
       *
       */
      function AsyncResultLocator(meta, promise) {
        var _this2;
        _classCallCheck(this, AsyncResultLocator);
        _this2 = _callSuper(this, AsyncResultLocator);
        _defineProperty(_this2, "_meta", void 0);
        _defineProperty(_this2, "_promise", void 0);
        _defineProperty(_this2, "_id", void 0);
        _this2._meta = meta;
        _this2._promise = promise;
        return _this2;
      }
      /**
       * Promise/A+ interface
       * http://promises-aplus.github.io/promises-spec/
       *
       * @method Metadata~AsyncResultLocator#then
       */
      _inherits(AsyncResultLocator, _events_1$EventEmitte);
      return _createClass(AsyncResultLocator, [{
        key: "then",
        value: function then(onResolve, onReject) {
          return this._promise.then(onResolve, onReject);
        }
        /**
         * Check the status of async request
         */
      }, {
        key: "check",
        value: (function () {
          var _check = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
            var result;
            return _regeneratorRuntime().wrap(function _callee6$(_context6) {
              while (1) switch (_context6.prev = _context6.next) {
                case 0:
                  _context6.next = 2;
                  return this._promise;
                case 2:
                  result = _context6.sent;
                  this._id = result.id;
                  return _context6.abrupt("return", this._meta.checkStatus(result.id));
                case 5:
                case "end":
                  return _context6.stop();
              }
            }, _callee6, this);
          }));
          function check() {
            return _check.apply(this, arguments);
          }
          return check;
        }()
        /**
         * Polling until async call status becomes complete or error
         */
        )
      }, {
        key: "poll",
        value: function poll(interval, timeout) {
          var _this3 = this;
          var startTime = new Date().getTime();
          var poll = /*#__PURE__*/function () {
            var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {
              var now, errMsg, result;
              return _regeneratorRuntime().wrap(function _callee7$(_context7) {
                while (1) switch (_context7.prev = _context7.next) {
                  case 0:
                    _context7.prev = 0;
                    now = new Date().getTime();
                    if (!(startTime + timeout < now)) {
                      _context7.next = 7;
                      break;
                    }
                    errMsg = 'Polling time out.';
                    if (_this3._id) {
                      errMsg += ' Process Id = ' + _this3._id;
                    }
                    _this3.emit('error', new Error(errMsg));
                    return _context7.abrupt("return");
                  case 7:
                    _context7.next = 9;
                    return _this3.check();
                  case 9:
                    result = _context7.sent;
                    if (result.done) {
                      _this3.emit('complete', result);
                    } else {
                      _this3.emit('progress', result);
                      setTimeout(poll, interval);
                    }
                    _context7.next = 16;
                    break;
                  case 13:
                    _context7.prev = 13;
                    _context7.t0 = _context7["catch"](0);
                    _this3.emit('error', _context7.t0);
                  case 16:
                  case "end":
                    return _context7.stop();
                }
              }, _callee7, null, [[0, 13]]);
            }));
            return function poll() {
              return _ref2.apply(this, arguments);
            };
          }();
          setTimeout(poll, interval);
        }
        /**
         * Check and wait until the async requests become in completed status
         */
      }, {
        key: "complete",
        value: function complete() {
          var _this4 = this;
          return new Promise(function (resolve, reject) {
            _this4.on('complete', resolve);
            _this4.on('error', reject);
            _this4.poll(_this4._meta.pollInterval, _this4._meta.pollTimeout);
          });
        }
      }]);
    }(events_1.EventEmitter);
    exports.AsyncResultLocator = AsyncResultLocator;
    /*--------------------------------------------*/
    /**
     * The locator class to track retreive() Metadata API call result
     */
    var RetrieveResultLocator = /*#__PURE__*/function (_AsyncResultLocator2) {
      function RetrieveResultLocator() {
        _classCallCheck(this, RetrieveResultLocator);
        return _callSuper(this, RetrieveResultLocator, arguments);
      }
      _inherits(RetrieveResultLocator, _AsyncResultLocator2);
      return _createClass(RetrieveResultLocator, [{
        key: "complete",
        value: (
        /**
         * Check and wait until the async request becomes in completed status,
         * and retrieve the result data.
         */
        function () {
          var _complete = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
            var result;
            return _regeneratorRuntime().wrap(function _callee8$(_context8) {
              while (1) switch (_context8.prev = _context8.next) {
                case 0:
                  _context8.next = 2;
                  return _get(_getPrototypeOf(RetrieveResultLocator.prototype), "complete", this).call(this);
                case 2:
                  result = _context8.sent;
                  return _context8.abrupt("return", this._meta.checkRetrieveStatus(result.id));
                case 4:
                case "end":
                  return _context8.stop();
              }
            }, _callee8, this);
          }));
          function complete() {
            return _complete.apply(this, arguments);
          }
          return complete;
        }()
        /**
         * Change the retrieved result to Node.js readable stream
         */
        )
      }, {
        key: "stream",
        value: function stream() {
          var _this5 = this;
          var resultStream = new stream_1.Readable();
          var reading = false;
          resultStream._read = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {
            var result;
            return _regeneratorRuntime().wrap(function _callee9$(_context9) {
              while (1) switch (_context9.prev = _context9.next) {
                case 0:
                  if (!reading) {
                    _context9.next = 2;
                    break;
                  }
                  return _context9.abrupt("return");
                case 2:
                  reading = true;
                  _context9.prev = 3;
                  _context9.next = 6;
                  return _this5.complete();
                case 6:
                  result = _context9.sent;
                  resultStream.push(Buffer.from(result.zipFile, 'base64'));
                  resultStream.push(null);
                  _context9.next = 14;
                  break;
                case 11:
                  _context9.prev = 11;
                  _context9.t0 = _context9["catch"](3);
                  resultStream.emit('error', _context9.t0);
                case 14:
                case "end":
                  return _context9.stop();
              }
            }, _callee9, null, [[3, 11]]);
          }));
          return resultStream;
        }
      }]);
    }(AsyncResultLocator);
    exports.RetrieveResultLocator = RetrieveResultLocator;
    /*--------------------------------------------*/
    /**
     * The locator class to track deploy() Metadata API call result
     *
     * @protected
     * @class Metadata~DeployResultLocator
     * @extends Metadata~AsyncResultLocator
     * @param {Metadata} meta - Metadata API object
     * @param {Promise.<Metadata~AsyncResult>} result - Promise object for async result of deploy() call
     */
    var DeployResultLocator = /*#__PURE__*/function (_AsyncResultLocator3) {
      function DeployResultLocator() {
        _classCallCheck(this, DeployResultLocator);
        return _callSuper(this, DeployResultLocator, arguments);
      }
      _inherits(DeployResultLocator, _AsyncResultLocator3);
      return _createClass(DeployResultLocator, [{
        key: "complete",
        value: (
        /**
         * Check and wait until the async request becomes in completed status,
         * and retrieve the result data.
         */
        function () {
          var _complete2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee10(includeDetails) {
            var result;
            return _regeneratorRuntime().wrap(function _callee10$(_context10) {
              while (1) switch (_context10.prev = _context10.next) {
                case 0:
                  _context10.next = 2;
                  return _get(_getPrototypeOf(DeployResultLocator.prototype), "complete", this).call(this);
                case 2:
                  result = _context10.sent;
                  return _context10.abrupt("return", this._meta.checkDeployStatus(result.id, includeDetails));
                case 4:
                case "end":
                  return _context10.stop();
              }
            }, _callee10, this);
          }));
          function complete(_x8) {
            return _complete2.apply(this, arguments);
          }
          return complete;
        }())
      }]);
    }(AsyncResultLocator);
    exports.DeployResultLocator = DeployResultLocator;
    /*--------------------------------------------*/
    /*
     * Register hook in connection instantiation for dynamically adding this API module features
     */
    (0, jsforce_1.registerModule)('metadata', function (conn) {
      return new MetadataApi(conn);
    });
    exports["default"] = MetadataApi;
  })(metadata);

  var soap$1 = {};

  var schema$1 = {};

  /**
   * This file is generated from WSDL file by wsdl2schema.ts.
   * Do not modify directly.
   * To generate the file, run "ts-node path/to/wsdl2schema.ts path/to/wsdl.xml path/to/schema.ts"
   */
  Object.defineProperty(schema$1, "__esModule", {
    value: true
  });
  schema$1.ApiSchemas = void 0;
  schema$1.ApiSchemas = {
    sObject: {
      type: 'sObject',
      props: {
        type: 'string',
        fieldsToNull: ['?', 'string'],
        Id: '?string'
      }
    },
    address: {
      type: 'address',
      props: {
        city: '?string',
        country: '?string',
        countryCode: '?string',
        geocodeAccuracy: '?string',
        postalCode: '?string',
        state: '?string',
        stateCode: '?string',
        street: '?string'
      },
      "extends": 'location'
    },
    location: {
      type: 'location',
      props: {
        latitude: '?number',
        longitude: '?number'
      }
    },
    QueryResult: {
      type: 'QueryResult',
      props: {
        done: 'boolean',
        queryLocator: '?string',
        records: ['?', 'sObject'],
        size: 'number'
      }
    },
    SearchResult: {
      type: 'SearchResult',
      props: {
        queryId: 'string',
        searchRecords: ['SearchRecord'],
        searchResultsMetadata: '?SearchResultsMetadata'
      }
    },
    SearchRecord: {
      type: 'SearchRecord',
      props: {
        record: 'sObject',
        searchRecordMetadata: '?SearchRecordMetadata',
        snippet: '?SearchSnippet'
      }
    },
    SearchRecordMetadata: {
      type: 'SearchRecordMetadata',
      props: {
        searchPromoted: 'boolean',
        spellCorrected: 'boolean'
      }
    },
    SearchSnippet: {
      type: 'SearchSnippet',
      props: {
        text: '?string',
        wholeFields: ['NameValuePair']
      }
    },
    SearchResultsMetadata: {
      type: 'SearchResultsMetadata',
      props: {
        entityLabelMetadata: ['LabelsSearchMetadata'],
        entityMetadata: ['EntitySearchMetadata']
      }
    },
    LabelsSearchMetadata: {
      type: 'LabelsSearchMetadata',
      props: {
        entityFieldLabels: ['NameValuePair'],
        entityName: 'string'
      }
    },
    EntitySearchMetadata: {
      type: 'EntitySearchMetadata',
      props: {
        entityName: 'string',
        errorMetadata: '?EntityErrorMetadata',
        fieldMetadata: ['FieldLevelSearchMetadata'],
        intentQueryMetadata: '?EntityIntentQueryMetadata',
        searchPromotionMetadata: '?EntitySearchPromotionMetadata',
        spellCorrectionMetadata: '?EntitySpellCorrectionMetadata'
      }
    },
    FieldLevelSearchMetadata: {
      type: 'FieldLevelSearchMetadata',
      props: {
        label: '?string',
        name: 'string',
        type: '?string'
      }
    },
    EntitySpellCorrectionMetadata: {
      type: 'EntitySpellCorrectionMetadata',
      props: {
        correctedQuery: 'string',
        hasNonCorrectedResults: 'boolean'
      }
    },
    EntitySearchPromotionMetadata: {
      type: 'EntitySearchPromotionMetadata',
      props: {
        promotedResultCount: 'number'
      }
    },
    EntityIntentQueryMetadata: {
      type: 'EntityIntentQueryMetadata',
      props: {
        intentQuery: 'boolean',
        message: '?string'
      }
    },
    EntityErrorMetadata: {
      type: 'EntityErrorMetadata',
      props: {
        errorCode: '?string',
        message: '?string'
      }
    },
    RelationshipReferenceTo: {
      type: 'RelationshipReferenceTo',
      props: {
        referenceTo: ['string']
      }
    },
    RecordTypesSupported: {
      type: 'RecordTypesSupported',
      props: {
        recordTypeInfos: ['RecordTypeInfo']
      }
    },
    JunctionIdListNames: {
      type: 'JunctionIdListNames',
      props: {
        names: ['string']
      }
    },
    SearchLayoutButtonsDisplayed: {
      type: 'SearchLayoutButtonsDisplayed',
      props: {
        applicable: 'boolean',
        buttons: ['SearchLayoutButton']
      }
    },
    SearchLayoutButton: {
      type: 'SearchLayoutButton',
      props: {
        apiName: 'string',
        label: 'string'
      }
    },
    SearchLayoutFieldsDisplayed: {
      type: 'SearchLayoutFieldsDisplayed',
      props: {
        applicable: 'boolean',
        fields: ['SearchLayoutField']
      }
    },
    SearchLayoutField: {
      type: 'SearchLayoutField',
      props: {
        apiName: 'string',
        label: 'string',
        sortable: 'boolean'
      }
    },
    NameValuePair: {
      type: 'NameValuePair',
      props: {
        name: 'string',
        value: 'string'
      }
    },
    NameObjectValuePair: {
      type: 'NameObjectValuePair',
      props: {
        isVisible: '?boolean',
        name: 'string',
        value: ['any']
      }
    },
    GetUpdatedResult: {
      type: 'GetUpdatedResult',
      props: {
        ids: ['string'],
        latestDateCovered: 'string'
      }
    },
    GetDeletedResult: {
      type: 'GetDeletedResult',
      props: {
        deletedRecords: ['DeletedRecord'],
        earliestDateAvailable: 'string',
        latestDateCovered: 'string'
      }
    },
    DeletedRecord: {
      type: 'DeletedRecord',
      props: {
        deletedDate: 'string',
        id: 'string'
      }
    },
    GetServerTimestampResult: {
      type: 'GetServerTimestampResult',
      props: {
        timestamp: 'string'
      }
    },
    InvalidateSessionsResult: {
      type: 'InvalidateSessionsResult',
      props: {
        errors: ['Error'],
        success: 'boolean'
      }
    },
    SetPasswordResult: {
      type: 'SetPasswordResult',
      props: {}
    },
    ChangeOwnPasswordResult: {
      type: 'ChangeOwnPasswordResult',
      props: {}
    },
    ResetPasswordResult: {
      type: 'ResetPasswordResult',
      props: {
        password: 'string'
      }
    },
    GetUserInfoResult: {
      type: 'GetUserInfoResult',
      props: {
        accessibilityMode: 'boolean',
        chatterExternal: 'boolean',
        currencySymbol: '?string',
        orgAttachmentFileSizeLimit: 'number',
        orgDefaultCurrencyIsoCode: '?string',
        orgDefaultCurrencyLocale: '?string',
        orgDisallowHtmlAttachments: 'boolean',
        orgHasPersonAccounts: 'boolean',
        organizationId: 'string',
        organizationMultiCurrency: 'boolean',
        organizationName: 'string',
        profileId: 'string',
        roleId: '?string',
        sessionSecondsValid: 'number',
        userDefaultCurrencyIsoCode: '?string',
        userEmail: 'string',
        userFullName: 'string',
        userId: 'string',
        userLanguage: 'string',
        userLocale: 'string',
        userName: 'string',
        userTimeZone: 'string',
        userType: 'string',
        userUiSkin: 'string'
      }
    },
    LoginResult: {
      type: 'LoginResult',
      props: {
        metadataServerUrl: '?string',
        passwordExpired: 'boolean',
        sandbox: 'boolean',
        serverUrl: '?string',
        sessionId: '?string',
        userId: '?string',
        userInfo: '?GetUserInfoResult'
      }
    },
    ExtendedErrorDetails: {
      type: 'ExtendedErrorDetails',
      props: {
        extendedErrorCode: 'string'
      }
    },
    Error: {
      type: 'Error',
      props: {
        extendedErrorDetails: ['?', 'ExtendedErrorDetails'],
        fields: ['?', 'string'],
        message: 'string',
        statusCode: 'string'
      }
    },
    SendEmailError: {
      type: 'SendEmailError',
      props: {
        fields: ['?', 'string'],
        message: 'string',
        statusCode: 'string',
        targetObjectId: '?string'
      }
    },
    SaveResult: {
      type: 'SaveResult',
      props: {
        errors: ['Error'],
        id: '?string',
        success: 'boolean'
      }
    },
    RenderEmailTemplateError: {
      type: 'RenderEmailTemplateError',
      props: {
        fieldName: 'string',
        message: 'string',
        offset: 'number',
        statusCode: 'string'
      }
    },
    UpsertResult: {
      type: 'UpsertResult',
      props: {
        created: 'boolean',
        errors: ['Error'],
        id: '?string',
        success: 'boolean'
      }
    },
    PerformQuickActionResult: {
      type: 'PerformQuickActionResult',
      props: {
        contextId: '?string',
        created: 'boolean',
        errors: ['Error'],
        feedItemIds: ['?', 'string'],
        ids: ['?', 'string'],
        success: 'boolean',
        successMessage: '?string'
      }
    },
    QuickActionTemplateResult: {
      type: 'QuickActionTemplateResult',
      props: {
        contextId: '?string',
        defaultValueFormulas: '?sObject',
        defaultValues: '?sObject',
        errors: ['Error'],
        success: 'boolean'
      }
    },
    MergeRequest: {
      type: 'MergeRequest',
      props: {
        additionalInformationMap: ['AdditionalInformationMap'],
        masterRecord: 'sObject',
        recordToMergeIds: ['string']
      }
    },
    MergeResult: {
      type: 'MergeResult',
      props: {
        errors: ['Error'],
        id: '?string',
        mergedRecordIds: ['string'],
        success: 'boolean',
        updatedRelatedIds: ['string']
      }
    },
    ProcessRequest: {
      type: 'ProcessRequest',
      props: {
        comments: '?string',
        nextApproverIds: ['?', 'string']
      }
    },
    ProcessSubmitRequest: {
      type: 'ProcessSubmitRequest',
      props: {
        objectId: 'string',
        submitterId: '?string',
        processDefinitionNameOrId: '?string',
        skipEntryCriteria: '?boolean'
      },
      "extends": 'ProcessRequest'
    },
    ProcessWorkitemRequest: {
      type: 'ProcessWorkitemRequest',
      props: {
        action: 'string',
        workitemId: 'string'
      },
      "extends": 'ProcessRequest'
    },
    PerformQuickActionRequest: {
      type: 'PerformQuickActionRequest',
      props: {
        contextId: '?string',
        quickActionName: 'string',
        records: ['?', 'sObject']
      }
    },
    DescribeAvailableQuickActionResult: {
      type: 'DescribeAvailableQuickActionResult',
      props: {
        actionEnumOrId: 'string',
        label: 'string',
        name: 'string',
        type: 'string'
      }
    },
    DescribeQuickActionResult: {
      type: 'DescribeQuickActionResult',
      props: {
        accessLevelRequired: '?string',
        actionEnumOrId: 'string',
        canvasApplicationId: '?string',
        canvasApplicationName: '?string',
        colors: ['DescribeColor'],
        contextSobjectType: '?string',
        defaultValues: ['?', 'DescribeQuickActionDefaultValue'],
        flowDevName: '?string',
        flowRecordIdVar: '?string',
        height: '?number',
        iconName: '?string',
        iconUrl: '?string',
        icons: ['DescribeIcon'],
        label: 'string',
        layout: '?DescribeLayoutSection',
        lightningComponentBundleId: '?string',
        lightningComponentBundleName: '?string',
        lightningComponentQualifiedName: '?string',
        miniIconUrl: '?string',
        mobileExtensionDisplayMode: '?string',
        mobileExtensionId: '?string',
        name: 'string',
        showQuickActionLcHeader: 'boolean',
        showQuickActionVfHeader: 'boolean',
        targetParentField: '?string',
        targetRecordTypeId: '?string',
        targetSobjectType: '?string',
        type: 'string',
        visualforcePageName: '?string',
        visualforcePageUrl: '?string',
        width: '?number'
      }
    },
    DescribeQuickActionDefaultValue: {
      type: 'DescribeQuickActionDefaultValue',
      props: {
        defaultValue: '?string',
        field: 'string'
      }
    },
    DescribeVisualForceResult: {
      type: 'DescribeVisualForceResult',
      props: {
        domain: 'string'
      }
    },
    ProcessResult: {
      type: 'ProcessResult',
      props: {
        actorIds: ['string'],
        entityId: '?string',
        errors: ['Error'],
        instanceId: '?string',
        instanceStatus: '?string',
        newWorkitemIds: ['?', 'string'],
        success: 'boolean'
      }
    },
    DeleteResult: {
      type: 'DeleteResult',
      props: {
        errors: ['?', 'Error'],
        id: '?string',
        success: 'boolean'
      }
    },
    UndeleteResult: {
      type: 'UndeleteResult',
      props: {
        errors: ['Error'],
        id: '?string',
        success: 'boolean'
      }
    },
    DeleteByExampleResult: {
      type: 'DeleteByExampleResult',
      props: {
        entity: '?sObject',
        errors: ['?', 'Error'],
        rowCount: 'number',
        success: 'boolean'
      }
    },
    EmptyRecycleBinResult: {
      type: 'EmptyRecycleBinResult',
      props: {
        errors: ['Error'],
        id: '?string',
        success: 'boolean'
      }
    },
    LeadConvert: {
      type: 'LeadConvert',
      props: {
        accountId: '?string',
        accountRecord: '?sObject',
        bypassAccountDedupeCheck: '?boolean',
        bypassContactDedupeCheck: '?boolean',
        contactId: '?string',
        contactRecord: '?sObject',
        convertedStatus: 'string',
        doNotCreateOpportunity: 'boolean',
        leadId: 'string',
        opportunityId: '?string',
        opportunityName: '?string',
        opportunityRecord: '?sObject',
        overwriteLeadSource: 'boolean',
        ownerId: '?string',
        sendNotificationEmail: 'boolean'
      }
    },
    LeadConvertResult: {
      type: 'LeadConvertResult',
      props: {
        accountId: '?string',
        contactId: '?string',
        errors: ['Error'],
        leadId: '?string',
        opportunityId: '?string',
        success: 'boolean'
      }
    },
    DescribeSObjectResult: {
      type: 'DescribeSObjectResult',
      props: {
        actionOverrides: ['?', 'ActionOverride'],
        activateable: 'boolean',
        childRelationships: ['ChildRelationship'],
        compactLayoutable: 'boolean',
        createable: 'boolean',
        custom: 'boolean',
        customSetting: 'boolean',
        dataTranslationEnabled: '?boolean',
        deepCloneable: 'boolean',
        defaultImplementation: '?string',
        deletable: 'boolean',
        deprecatedAndHidden: 'boolean',
        feedEnabled: 'boolean',
        fields: ['?', 'Field'],
        hasSubtypes: 'boolean',
        idEnabled: 'boolean',
        implementedBy: '?string',
        implementsInterfaces: '?string',
        isInterface: 'boolean',
        isSubtype: 'boolean',
        keyPrefix: '?string',
        label: 'string',
        labelPlural: 'string',
        layoutable: 'boolean',
        mergeable: 'boolean',
        mruEnabled: 'boolean',
        name: 'string',
        namedLayoutInfos: ['NamedLayoutInfo'],
        networkScopeFieldName: '?string',
        queryable: 'boolean',
        recordTypeInfos: ['RecordTypeInfo'],
        replicateable: 'boolean',
        retrieveable: 'boolean',
        searchLayoutable: '?boolean',
        searchable: 'boolean',
        supportedScopes: ['?', 'ScopeInfo'],
        triggerable: '?boolean',
        undeletable: 'boolean',
        updateable: 'boolean',
        urlDetail: '?string',
        urlEdit: '?string',
        urlNew: '?string'
      }
    },
    DescribeGlobalSObjectResult: {
      type: 'DescribeGlobalSObjectResult',
      props: {
        activateable: 'boolean',
        createable: 'boolean',
        custom: 'boolean',
        customSetting: 'boolean',
        dataTranslationEnabled: '?boolean',
        deepCloneable: 'boolean',
        deletable: 'boolean',
        deprecatedAndHidden: 'boolean',
        feedEnabled: 'boolean',
        hasSubtypes: 'boolean',
        idEnabled: 'boolean',
        isInterface: 'boolean',
        isSubtype: 'boolean',
        keyPrefix: '?string',
        label: 'string',
        labelPlural: 'string',
        layoutable: 'boolean',
        mergeable: 'boolean',
        mruEnabled: 'boolean',
        name: 'string',
        queryable: 'boolean',
        replicateable: 'boolean',
        retrieveable: 'boolean',
        searchable: 'boolean',
        triggerable: 'boolean',
        undeletable: 'boolean',
        updateable: 'boolean'
      }
    },
    ChildRelationship: {
      type: 'ChildRelationship',
      props: {
        cascadeDelete: 'boolean',
        childSObject: 'string',
        deprecatedAndHidden: 'boolean',
        field: 'string',
        junctionIdListNames: ['?', 'string'],
        junctionReferenceTo: ['?', 'string'],
        relationshipName: '?string',
        restrictedDelete: '?boolean'
      }
    },
    DescribeGlobalResult: {
      type: 'DescribeGlobalResult',
      props: {
        encoding: '?string',
        maxBatchSize: 'number',
        sobjects: ['DescribeGlobalSObjectResult']
      }
    },
    DescribeGlobalTheme: {
      type: 'DescribeGlobalTheme',
      props: {
        global: 'DescribeGlobalResult',
        theme: 'DescribeThemeResult'
      }
    },
    ScopeInfo: {
      type: 'ScopeInfo',
      props: {
        label: 'string',
        name: 'string'
      }
    },
    StringList: {
      type: 'StringList',
      props: {
        values: ['string']
      }
    },
    ChangeEventHeader: {
      type: 'ChangeEventHeader',
      props: {
        entityName: 'string',
        recordIds: ['string'],
        commitTimestamp: 'number',
        commitNumber: 'number',
        commitUser: 'string',
        diffFields: ['string'],
        changeType: 'string',
        changeOrigin: 'string',
        transactionKey: 'string',
        sequenceNumber: 'number',
        nulledFields: ['string'],
        changedFields: ['string']
      }
    },
    FilteredLookupInfo: {
      type: 'FilteredLookupInfo',
      props: {
        controllingFields: ['string'],
        dependent: 'boolean',
        optionalFilter: 'boolean'
      }
    },
    Field: {
      type: 'Field',
      props: {
        aggregatable: 'boolean',
        aiPredictionField: 'boolean',
        autoNumber: 'boolean',
        byteLength: 'number',
        calculated: 'boolean',
        calculatedFormula: '?string',
        cascadeDelete: '?boolean',
        caseSensitive: 'boolean',
        compoundFieldName: '?string',
        controllerName: '?string',
        createable: 'boolean',
        custom: 'boolean',
        dataTranslationEnabled: '?boolean',
        defaultValue: '?any',
        defaultValueFormula: '?string',
        defaultedOnCreate: 'boolean',
        dependentPicklist: '?boolean',
        deprecatedAndHidden: 'boolean',
        digits: 'number',
        displayLocationInDecimal: '?boolean',
        encrypted: '?boolean',
        externalId: '?boolean',
        extraTypeInfo: '?string',
        filterable: 'boolean',
        filteredLookupInfo: '?FilteredLookupInfo',
        formulaTreatNullNumberAsZero: '?boolean',
        groupable: 'boolean',
        highScaleNumber: '?boolean',
        htmlFormatted: '?boolean',
        idLookup: 'boolean',
        inlineHelpText: '?string',
        label: 'string',
        length: 'number',
        mask: '?string',
        maskType: '?string',
        name: 'string',
        nameField: 'boolean',
        namePointing: '?boolean',
        nillable: 'boolean',
        permissionable: 'boolean',
        picklistValues: ['?', 'PicklistEntry'],
        polymorphicForeignKey: 'boolean',
        precision: 'number',
        queryByDistance: 'boolean',
        referenceTargetField: '?string',
        referenceTo: ['?', 'string'],
        relationshipName: '?string',
        relationshipOrder: '?number',
        restrictedDelete: '?boolean',
        restrictedPicklist: 'boolean',
        scale: 'number',
        searchPrefilterable: 'boolean',
        soapType: 'string',
        sortable: '?boolean',
        type: 'string',
        unique: 'boolean',
        updateable: 'boolean',
        writeRequiresMasterRead: '?boolean'
      }
    },
    PicklistEntry: {
      type: 'PicklistEntry',
      props: {
        active: 'boolean',
        defaultValue: 'boolean',
        label: '?string',
        validFor: '?string',
        value: 'string'
      }
    },
    DescribeDataCategoryGroupResult: {
      type: 'DescribeDataCategoryGroupResult',
      props: {
        categoryCount: 'number',
        description: 'string',
        label: 'string',
        name: 'string',
        sobject: 'string'
      }
    },
    DescribeDataCategoryGroupStructureResult: {
      type: 'DescribeDataCategoryGroupStructureResult',
      props: {
        description: 'string',
        label: 'string',
        name: 'string',
        sobject: 'string',
        topCategories: ['DataCategory']
      }
    },
    DataCategoryGroupSobjectTypePair: {
      type: 'DataCategoryGroupSobjectTypePair',
      props: {
        dataCategoryGroupName: 'string',
        sobject: 'string'
      }
    },
    DataCategory: {
      type: 'DataCategory',
      props: {
        childCategories: ['DataCategory'],
        label: 'string',
        name: 'string'
      }
    },
    DescribeDataCategoryMappingResult: {
      type: 'DescribeDataCategoryMappingResult',
      props: {
        dataCategoryGroupId: 'string',
        dataCategoryGroupLabel: 'string',
        dataCategoryGroupName: 'string',
        dataCategoryId: 'string',
        dataCategoryLabel: 'string',
        dataCategoryName: 'string',
        id: 'string',
        mappedEntity: 'string',
        mappedField: 'string'
      }
    },
    KnowledgeSettings: {
      type: 'KnowledgeSettings',
      props: {
        defaultLanguage: '?string',
        knowledgeEnabled: 'boolean',
        languages: ['KnowledgeLanguageItem']
      }
    },
    KnowledgeLanguageItem: {
      type: 'KnowledgeLanguageItem',
      props: {
        active: 'boolean',
        assigneeId: '?string',
        name: 'string'
      }
    },
    FieldDiff: {
      type: 'FieldDiff',
      props: {
        difference: 'string',
        name: 'string'
      }
    },
    AdditionalInformationMap: {
      type: 'AdditionalInformationMap',
      props: {
        name: 'string',
        value: 'string'
      }
    },
    MatchRecord: {
      type: 'MatchRecord',
      props: {
        additionalInformation: ['AdditionalInformationMap'],
        fieldDiffs: ['FieldDiff'],
        matchConfidence: 'number',
        record: 'sObject'
      }
    },
    MatchResult: {
      type: 'MatchResult',
      props: {
        entityType: 'string',
        errors: ['Error'],
        matchEngine: 'string',
        matchRecords: ['MatchRecord'],
        rule: 'string',
        size: 'number',
        success: 'boolean'
      }
    },
    DuplicateResult: {
      type: 'DuplicateResult',
      props: {
        allowSave: 'boolean',
        duplicateRule: 'string',
        duplicateRuleEntityType: 'string',
        errorMessage: '?string',
        matchResults: ['MatchResult']
      }
    },
    DuplicateError: {
      type: 'DuplicateError',
      props: {
        duplicateResult: 'DuplicateResult'
      },
      "extends": 'Error'
    },
    DescribeNounResult: {
      type: 'DescribeNounResult',
      props: {
        caseValues: ['NameCaseValue'],
        developerName: 'string',
        gender: '?string',
        name: 'string',
        pluralAlias: '?string',
        startsWith: '?string'
      }
    },
    NameCaseValue: {
      type: 'NameCaseValue',
      props: {
        article: '?string',
        caseType: '?string',
        number: '?string',
        possessive: '?string',
        value: '?string'
      }
    },
    FindDuplicatesResult: {
      type: 'FindDuplicatesResult',
      props: {
        duplicateResults: ['DuplicateResult'],
        errors: ['Error'],
        success: 'boolean'
      }
    },
    DescribeAppMenuResult: {
      type: 'DescribeAppMenuResult',
      props: {
        appMenuItems: ['DescribeAppMenuItem']
      }
    },
    DescribeAppMenuItem: {
      type: 'DescribeAppMenuItem',
      props: {
        colors: ['DescribeColor'],
        content: 'string',
        icons: ['DescribeIcon'],
        label: 'string',
        name: 'string',
        type: 'string',
        url: 'string'
      }
    },
    DescribeThemeResult: {
      type: 'DescribeThemeResult',
      props: {
        themeItems: ['DescribeThemeItem']
      }
    },
    DescribeThemeItem: {
      type: 'DescribeThemeItem',
      props: {
        colors: ['DescribeColor'],
        icons: ['DescribeIcon'],
        name: 'string'
      }
    },
    DescribeSoftphoneLayoutResult: {
      type: 'DescribeSoftphoneLayoutResult',
      props: {
        callTypes: ['DescribeSoftphoneLayoutCallType'],
        id: 'string',
        name: 'string'
      }
    },
    DescribeSoftphoneLayoutCallType: {
      type: 'DescribeSoftphoneLayoutCallType',
      props: {
        infoFields: ['DescribeSoftphoneLayoutInfoField'],
        name: 'string',
        screenPopOptions: ['DescribeSoftphoneScreenPopOption'],
        screenPopsOpenWithin: '?string',
        sections: ['DescribeSoftphoneLayoutSection']
      }
    },
    DescribeSoftphoneScreenPopOption: {
      type: 'DescribeSoftphoneScreenPopOption',
      props: {
        matchType: 'string',
        screenPopData: 'string',
        screenPopType: 'string'
      }
    },
    DescribeSoftphoneLayoutInfoField: {
      type: 'DescribeSoftphoneLayoutInfoField',
      props: {
        name: 'string'
      }
    },
    DescribeSoftphoneLayoutSection: {
      type: 'DescribeSoftphoneLayoutSection',
      props: {
        entityApiName: 'string',
        items: ['DescribeSoftphoneLayoutItem']
      }
    },
    DescribeSoftphoneLayoutItem: {
      type: 'DescribeSoftphoneLayoutItem',
      props: {
        itemApiName: 'string'
      }
    },
    DescribeCompactLayoutsResult: {
      type: 'DescribeCompactLayoutsResult',
      props: {
        compactLayouts: ['DescribeCompactLayout'],
        defaultCompactLayoutId: 'string',
        recordTypeCompactLayoutMappings: ['RecordTypeCompactLayoutMapping']
      }
    },
    DescribeCompactLayout: {
      type: 'DescribeCompactLayout',
      props: {
        actions: ['DescribeLayoutButton'],
        fieldItems: ['DescribeLayoutItem'],
        id: 'string',
        imageItems: ['DescribeLayoutItem'],
        label: 'string',
        name: 'string',
        objectType: 'string'
      }
    },
    RecordTypeCompactLayoutMapping: {
      type: 'RecordTypeCompactLayoutMapping',
      props: {
        available: 'boolean',
        compactLayoutId: '?string',
        compactLayoutName: 'string',
        recordTypeId: 'string',
        recordTypeName: 'string'
      }
    },
    DescribePathAssistantsResult: {
      type: 'DescribePathAssistantsResult',
      props: {
        pathAssistants: ['DescribePathAssistant']
      }
    },
    DescribePathAssistant: {
      type: 'DescribePathAssistant',
      props: {
        active: 'boolean',
        animationRule: ['?', 'DescribeAnimationRule'],
        apiName: 'string',
        label: 'string',
        pathPicklistField: 'string',
        picklistsForRecordType: ['?', 'PicklistForRecordType'],
        recordTypeId: '?string',
        steps: ['DescribePathAssistantStep']
      }
    },
    DescribePathAssistantStep: {
      type: 'DescribePathAssistantStep',
      props: {
        closed: 'boolean',
        converted: 'boolean',
        fields: ['DescribePathAssistantField'],
        info: '?string',
        layoutSection: '?DescribeLayoutSection',
        picklistLabel: 'string',
        picklistValue: 'string',
        won: 'boolean'
      }
    },
    DescribePathAssistantField: {
      type: 'DescribePathAssistantField',
      props: {
        apiName: 'string',
        label: 'string',
        readOnly: 'boolean',
        required: 'boolean'
      }
    },
    DescribeAnimationRule: {
      type: 'DescribeAnimationRule',
      props: {
        animationFrequency: 'string',
        isActive: 'boolean',
        recordTypeContext: 'string',
        recordTypeId: '?string',
        targetField: 'string',
        targetFieldChangeToValues: 'string'
      }
    },
    DescribeApprovalLayoutResult: {
      type: 'DescribeApprovalLayoutResult',
      props: {
        approvalLayouts: ['DescribeApprovalLayout']
      }
    },
    DescribeApprovalLayout: {
      type: 'DescribeApprovalLayout',
      props: {
        id: 'string',
        label: 'string',
        layoutItems: ['DescribeLayoutItem'],
        name: 'string'
      }
    },
    DescribeLayoutResult: {
      type: 'DescribeLayoutResult',
      props: {
        layouts: ['DescribeLayout'],
        recordTypeMappings: ['RecordTypeMapping'],
        recordTypeSelectorRequired: 'boolean'
      }
    },
    DescribeLayout: {
      type: 'DescribeLayout',
      props: {
        buttonLayoutSection: '?DescribeLayoutButtonSection',
        detailLayoutSections: ['DescribeLayoutSection'],
        editLayoutSections: ['DescribeLayoutSection'],
        feedView: '?DescribeLayoutFeedView',
        highlightsPanelLayoutSection: '?DescribeLayoutSection',
        id: '?string',
        quickActionList: '?DescribeQuickActionListResult',
        relatedContent: '?RelatedContent',
        relatedLists: ['RelatedList'],
        saveOptions: ['DescribeLayoutSaveOption']
      }
    },
    DescribeQuickActionListResult: {
      type: 'DescribeQuickActionListResult',
      props: {
        quickActionListItems: ['DescribeQuickActionListItemResult']
      }
    },
    DescribeQuickActionListItemResult: {
      type: 'DescribeQuickActionListItemResult',
      props: {
        accessLevelRequired: '?string',
        colors: ['DescribeColor'],
        iconUrl: '?string',
        icons: ['DescribeIcon'],
        label: 'string',
        miniIconUrl: 'string',
        quickActionName: 'string',
        targetSobjectType: '?string',
        type: 'string'
      }
    },
    DescribeLayoutFeedView: {
      type: 'DescribeLayoutFeedView',
      props: {
        feedFilters: ['DescribeLayoutFeedFilter']
      }
    },
    DescribeLayoutFeedFilter: {
      type: 'DescribeLayoutFeedFilter',
      props: {
        label: 'string',
        name: 'string',
        type: 'string'
      }
    },
    DescribeLayoutSaveOption: {
      type: 'DescribeLayoutSaveOption',
      props: {
        defaultValue: 'boolean',
        isDisplayed: 'boolean',
        label: 'string',
        name: 'string',
        restHeaderName: 'string',
        soapHeaderName: 'string'
      }
    },
    DescribeLayoutSection: {
      type: 'DescribeLayoutSection',
      props: {
        collapsed: 'boolean',
        columns: 'number',
        heading: '?string',
        layoutRows: ['DescribeLayoutRow'],
        layoutSectionId: '?string',
        parentLayoutId: 'string',
        rows: 'number',
        tabOrder: 'string',
        useCollapsibleSection: 'boolean',
        useHeading: 'boolean'
      }
    },
    DescribeLayoutButtonSection: {
      type: 'DescribeLayoutButtonSection',
      props: {
        detailButtons: ['DescribeLayoutButton']
      }
    },
    DescribeLayoutRow: {
      type: 'DescribeLayoutRow',
      props: {
        layoutItems: ['DescribeLayoutItem'],
        numItems: 'number'
      }
    },
    DescribeLayoutItem: {
      type: 'DescribeLayoutItem',
      props: {
        editableForNew: 'boolean',
        editableForUpdate: 'boolean',
        label: '?string',
        layoutComponents: ['DescribeLayoutComponent'],
        placeholder: 'boolean',
        required: 'boolean'
      }
    },
    DescribeLayoutButton: {
      type: 'DescribeLayoutButton',
      props: {
        behavior: '?string',
        colors: ['DescribeColor'],
        content: '?string',
        contentSource: '?string',
        custom: 'boolean',
        encoding: '?string',
        height: '?number',
        icons: ['DescribeIcon'],
        label: '?string',
        menubar: '?boolean',
        name: '?string',
        overridden: 'boolean',
        resizeable: '?boolean',
        scrollbars: '?boolean',
        showsLocation: '?boolean',
        showsStatus: '?boolean',
        toolbar: '?boolean',
        url: '?string',
        width: '?number',
        windowPosition: '?string'
      }
    },
    DescribeLayoutComponent: {
      type: 'DescribeLayoutComponent',
      props: {
        displayLines: 'number',
        tabOrder: 'number',
        type: 'string',
        value: '?string'
      }
    },
    FieldComponent: {
      type: 'FieldComponent',
      props: {
        field: 'Field'
      },
      "extends": 'DescribeLayoutComponent'
    },
    FieldLayoutComponent: {
      type: 'FieldLayoutComponent',
      props: {
        components: ['DescribeLayoutComponent'],
        fieldType: 'string'
      },
      "extends": 'DescribeLayoutComponent'
    },
    VisualforcePage: {
      type: 'VisualforcePage',
      props: {
        showLabel: 'boolean',
        showScrollbars: 'boolean',
        suggestedHeight: 'string',
        suggestedWidth: 'string',
        url: 'string'
      },
      "extends": 'DescribeLayoutComponent'
    },
    Canvas: {
      type: 'Canvas',
      props: {
        displayLocation: 'string',
        referenceId: 'string',
        showLabel: 'boolean',
        showScrollbars: 'boolean',
        suggestedHeight: 'string',
        suggestedWidth: 'string'
      },
      "extends": 'DescribeLayoutComponent'
    },
    ReportChartComponent: {
      type: 'ReportChartComponent',
      props: {
        cacheData: 'boolean',
        contextFilterableField: 'string',
        error: 'string',
        hideOnError: 'boolean',
        includeContext: 'boolean',
        showTitle: 'boolean',
        size: 'string'
      },
      "extends": 'DescribeLayoutComponent'
    },
    AnalyticsCloudComponent: {
      type: 'AnalyticsCloudComponent',
      props: {
        error: 'string',
        filter: 'string',
        height: 'string',
        hideOnError: 'boolean',
        showSharing: 'boolean',
        showTitle: 'boolean',
        width: 'string'
      },
      "extends": 'DescribeLayoutComponent'
    },
    CustomLinkComponent: {
      type: 'CustomLinkComponent',
      props: {
        customLink: 'DescribeLayoutButton'
      },
      "extends": 'DescribeLayoutComponent'
    },
    NamedLayoutInfo: {
      type: 'NamedLayoutInfo',
      props: {
        name: 'string'
      }
    },
    RecordTypeInfo: {
      type: 'RecordTypeInfo',
      props: {
        active: 'boolean',
        available: 'boolean',
        defaultRecordTypeMapping: 'boolean',
        developerName: 'string',
        master: 'boolean',
        name: 'string',
        recordTypeId: '?string'
      }
    },
    RecordTypeMapping: {
      type: 'RecordTypeMapping',
      props: {
        active: 'boolean',
        available: 'boolean',
        defaultRecordTypeMapping: 'boolean',
        developerName: 'string',
        layoutId: 'string',
        master: 'boolean',
        name: 'string',
        picklistsForRecordType: ['?', 'PicklistForRecordType'],
        recordTypeId: '?string'
      }
    },
    PicklistForRecordType: {
      type: 'PicklistForRecordType',
      props: {
        picklistName: 'string',
        picklistValues: ['?', 'PicklistEntry']
      }
    },
    RelatedContent: {
      type: 'RelatedContent',
      props: {
        relatedContentItems: ['DescribeRelatedContentItem']
      }
    },
    DescribeRelatedContentItem: {
      type: 'DescribeRelatedContentItem',
      props: {
        describeLayoutItem: 'DescribeLayoutItem'
      }
    },
    RelatedList: {
      type: 'RelatedList',
      props: {
        accessLevelRequiredForCreate: '?string',
        buttons: ['?', 'DescribeLayoutButton'],
        columns: ['RelatedListColumn'],
        custom: 'boolean',
        field: '?string',
        label: 'string',
        limitRows: 'number',
        name: 'string',
        sobject: '?string',
        sort: ['RelatedListSort']
      }
    },
    RelatedListColumn: {
      type: 'RelatedListColumn',
      props: {
        field: '?string',
        fieldApiName: 'string',
        format: '?string',
        label: 'string',
        lookupId: '?string',
        name: 'string',
        sortable: 'boolean'
      }
    },
    RelatedListSort: {
      type: 'RelatedListSort',
      props: {
        ascending: 'boolean',
        column: 'string'
      }
    },
    EmailFileAttachment: {
      type: 'EmailFileAttachment',
      props: {
        body: '?string',
        contentType: '?string',
        fileName: 'string',
        id: '?string',
        inline: '?boolean'
      }
    },
    Email: {
      type: 'Email',
      props: {
        bccSender: '?boolean',
        emailPriority: '?string',
        replyTo: '?string',
        saveAsActivity: '?boolean',
        senderDisplayName: '?string',
        subject: '?string',
        useSignature: '?boolean'
      }
    },
    MassEmailMessage: {
      type: 'MassEmailMessage',
      props: {
        description: '?string',
        targetObjectIds: '?string',
        templateId: 'string',
        whatIds: '?string'
      },
      "extends": 'Email'
    },
    SingleEmailMessage: {
      type: 'SingleEmailMessage',
      props: {
        bccAddresses: '?string',
        ccAddresses: '?string',
        charset: '?string',
        documentAttachments: ['string'],
        entityAttachments: ['string'],
        fileAttachments: ['EmailFileAttachment'],
        htmlBody: '?string',
        inReplyTo: '?string',
        optOutPolicy: '?string',
        orgWideEmailAddressId: '?string',
        plainTextBody: '?string',
        references: '?string',
        targetObjectId: '?string',
        templateId: '?string',
        templateName: '?string',
        toAddresses: '?string',
        treatBodiesAsTemplate: '?boolean',
        treatTargetObjectAsRecipient: '?boolean',
        whatId: '?string'
      },
      "extends": 'Email'
    },
    SendEmailResult: {
      type: 'SendEmailResult',
      props: {
        errors: ['SendEmailError'],
        success: 'boolean'
      }
    },
    ListViewColumn: {
      type: 'ListViewColumn',
      props: {
        ascendingLabel: '?string',
        descendingLabel: '?string',
        fieldNameOrPath: 'string',
        hidden: 'boolean',
        label: 'string',
        searchable: 'boolean',
        selectListItem: 'string',
        sortDirection: '?string',
        sortIndex: '?number',
        sortable: 'boolean',
        type: 'string'
      }
    },
    ListViewOrderBy: {
      type: 'ListViewOrderBy',
      props: {
        fieldNameOrPath: 'string',
        nullsPosition: '?string',
        sortDirection: '?string'
      }
    },
    DescribeSoqlListView: {
      type: 'DescribeSoqlListView',
      props: {
        columns: ['ListViewColumn'],
        id: 'string',
        orderBy: ['ListViewOrderBy'],
        query: 'string',
        relatedEntityId: '?string',
        scope: '?string',
        scopeEntityId: '?string',
        sobjectType: 'string',
        whereCondition: '?SoqlWhereCondition'
      }
    },
    DescribeSoqlListViewsRequest: {
      type: 'DescribeSoqlListViewsRequest',
      props: {
        listViewParams: ['DescribeSoqlListViewParams']
      }
    },
    DescribeSoqlListViewParams: {
      type: 'DescribeSoqlListViewParams',
      props: {
        developerNameOrId: 'string',
        sobjectType: '?string'
      }
    },
    DescribeSoqlListViewResult: {
      type: 'DescribeSoqlListViewResult',
      props: {
        describeSoqlListViews: ['DescribeSoqlListView']
      }
    },
    ExecuteListViewRequest: {
      type: 'ExecuteListViewRequest',
      props: {
        developerNameOrId: 'string',
        limit: '?number',
        offset: '?number',
        orderBy: ['ListViewOrderBy'],
        sobjectType: 'string'
      }
    },
    ExecuteListViewResult: {
      type: 'ExecuteListViewResult',
      props: {
        columns: ['ListViewColumn'],
        developerName: 'string',
        done: 'boolean',
        id: 'string',
        label: 'string',
        records: ['ListViewRecord'],
        size: 'number'
      }
    },
    ListViewRecord: {
      type: 'ListViewRecord',
      props: {
        columns: ['ListViewRecordColumn']
      }
    },
    ListViewRecordColumn: {
      type: 'ListViewRecordColumn',
      props: {
        fieldNameOrPath: 'string',
        value: '?string'
      }
    },
    SoqlWhereCondition: {
      type: 'SoqlWhereCondition',
      props: {}
    },
    SoqlCondition: {
      type: 'SoqlCondition',
      props: {
        field: 'string',
        operator: 'string',
        values: ['string']
      },
      "extends": 'SoqlWhereCondition'
    },
    SoqlNotCondition: {
      type: 'SoqlNotCondition',
      props: {
        condition: 'SoqlWhereCondition'
      },
      "extends": 'SoqlWhereCondition'
    },
    SoqlConditionGroup: {
      type: 'SoqlConditionGroup',
      props: {
        conditions: ['SoqlWhereCondition'],
        conjunction: 'string'
      },
      "extends": 'SoqlWhereCondition'
    },
    SoqlSubQueryCondition: {
      type: 'SoqlSubQueryCondition',
      props: {
        field: 'string',
        operator: 'string',
        subQuery: 'string'
      },
      "extends": 'SoqlWhereCondition'
    },
    DescribeSearchLayoutResult: {
      type: 'DescribeSearchLayoutResult',
      props: {
        errorMsg: '?string',
        label: '?string',
        limitRows: '?number',
        objectType: 'string',
        searchColumns: ['?', 'DescribeColumn']
      }
    },
    DescribeColumn: {
      type: 'DescribeColumn',
      props: {
        field: 'string',
        format: '?string',
        label: 'string',
        name: 'string'
      }
    },
    DescribeSearchScopeOrderResult: {
      type: 'DescribeSearchScopeOrderResult',
      props: {
        keyPrefix: 'string',
        name: 'string'
      }
    },
    DescribeSearchableEntityResult: {
      type: 'DescribeSearchableEntityResult',
      props: {
        label: 'string',
        name: 'string',
        pluralLabel: 'string'
      }
    },
    DescribeTabSetResult: {
      type: 'DescribeTabSetResult',
      props: {
        description: 'string',
        label: 'string',
        logoUrl: 'string',
        namespace: '?string',
        selected: 'boolean',
        tabSetId: 'string',
        tabs: ['DescribeTab']
      }
    },
    DescribeTab: {
      type: 'DescribeTab',
      props: {
        colors: ['DescribeColor'],
        custom: 'boolean',
        iconUrl: 'string',
        icons: ['DescribeIcon'],
        label: 'string',
        miniIconUrl: 'string',
        name: 'string',
        sobjectName: '?string',
        url: 'string'
      }
    },
    DescribeColor: {
      type: 'DescribeColor',
      props: {
        color: 'string',
        context: 'string',
        theme: 'string'
      }
    },
    DescribeIcon: {
      type: 'DescribeIcon',
      props: {
        contentType: 'string',
        height: '?number',
        theme: 'string',
        url: 'string',
        width: '?number'
      }
    },
    ActionOverride: {
      type: 'ActionOverride',
      props: {
        formFactor: 'string',
        isAvailableInTouch: 'boolean',
        name: 'string',
        pageId: 'string',
        url: '?string'
      }
    },
    RenderEmailTemplateRequest: {
      type: 'RenderEmailTemplateRequest',
      props: {
        escapeHtmlInMergeFields: '?boolean',
        templateBodies: 'string',
        whatId: '?string',
        whoId: '?string'
      }
    },
    RenderEmailTemplateBodyResult: {
      type: 'RenderEmailTemplateBodyResult',
      props: {
        errors: ['RenderEmailTemplateError'],
        mergedBody: '?string',
        success: 'boolean'
      }
    },
    RenderEmailTemplateResult: {
      type: 'RenderEmailTemplateResult',
      props: {
        bodyResults: '?RenderEmailTemplateBodyResult',
        errors: ['Error'],
        success: 'boolean'
      }
    },
    RenderStoredEmailTemplateRequest: {
      type: 'RenderStoredEmailTemplateRequest',
      props: {
        attachmentRetrievalOption: '?string',
        templateId: 'string',
        updateTemplateUsage: '?boolean',
        whatId: '?string',
        whoId: '?string'
      }
    },
    RenderStoredEmailTemplateResult: {
      type: 'RenderStoredEmailTemplateResult',
      props: {
        errors: ['Error'],
        renderedEmail: '?SingleEmailMessage',
        success: 'boolean'
      }
    },
    LimitInfo: {
      type: 'LimitInfo',
      props: {
        current: 'number',
        limit: 'number',
        type: 'string'
      }
    },
    OwnerChangeOption: {
      type: 'OwnerChangeOption',
      props: {
        type: 'string',
        execute: 'boolean'
      }
    },
    ApiFault: {
      type: 'ApiFault',
      props: {
        exceptionCode: 'string',
        exceptionMessage: 'string',
        extendedErrorDetails: ['?', 'ExtendedErrorDetails']
      }
    },
    ApiQueryFault: {
      type: 'ApiQueryFault',
      props: {
        row: 'number',
        column: 'number'
      },
      "extends": 'ApiFault'
    },
    LoginFault: {
      type: 'LoginFault',
      props: {},
      "extends": 'ApiFault'
    },
    InvalidQueryLocatorFault: {
      type: 'InvalidQueryLocatorFault',
      props: {},
      "extends": 'ApiFault'
    },
    InvalidNewPasswordFault: {
      type: 'InvalidNewPasswordFault',
      props: {},
      "extends": 'ApiFault'
    },
    InvalidOldPasswordFault: {
      type: 'InvalidOldPasswordFault',
      props: {},
      "extends": 'ApiFault'
    },
    InvalidIdFault: {
      type: 'InvalidIdFault',
      props: {},
      "extends": 'ApiFault'
    },
    UnexpectedErrorFault: {
      type: 'UnexpectedErrorFault',
      props: {},
      "extends": 'ApiFault'
    },
    InvalidFieldFault: {
      type: 'InvalidFieldFault',
      props: {},
      "extends": 'ApiQueryFault'
    },
    InvalidSObjectFault: {
      type: 'InvalidSObjectFault',
      props: {},
      "extends": 'ApiQueryFault'
    },
    MalformedQueryFault: {
      type: 'MalformedQueryFault',
      props: {},
      "extends": 'ApiQueryFault'
    },
    MalformedSearchFault: {
      type: 'MalformedSearchFault',
      props: {},
      "extends": 'ApiQueryFault'
    }
  };

  var _excluded = ["type", "attributes"];
  var __importDefault$1 = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };
  Object.defineProperty(soap$1, "__esModule", {
    value: true
  });
  soap$1.SoapApi = void 0;
  /**
   * @file Salesforce SOAP API
   * @author Shinichi Tomita <shinichi.tomita@gmail.com>
   */
  var jsforce_1$1 = requireJsforce();
  var soap_1 = __importDefault$1(soap$2);
  var schema_1 = schema$1;
  /**
   *
   */
  function toSoapRecord(records) {
    return (Array.isArray(records) ? records : [records]).map(function (record) {
      var type = record.type,
        attributes = record.attributes,
        rec = _objectWithoutProperties(record, _excluded);
      var t = type || (attributes === null || attributes === void 0 ? void 0 : attributes.type);
      if (!t) {
        throw new Error('Given record is not including sObject type information');
      }
      var fieldsToNull = Object.keys(rec).filter(function (field) {
        return record[field] === null;
      });
      var _iterator = _createForOfIteratorHelper(fieldsToNull),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var field = _step.value;
          delete rec[field];
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return fieldsToNull.length > 0 ? _objectSpread2({
        type: t,
        fieldsToNull: fieldsToNull
      }, rec) : _objectSpread2({
        type: t
      }, rec);
    });
  }
  /**
   * API class for Partner SOAP call
   */
  var SoapApi = /*#__PURE__*/function () {
    function SoapApi(conn) {
      _classCallCheck(this, SoapApi);
      _defineProperty(this, "_conn", void 0);
      this._conn = conn;
    }
    /**
     * Call SOAP Api (Partner) endpoint
     * @private
     */
    return _createClass(SoapApi, [{
      key: "_invoke",
      value: (function () {
        var _invoke2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(method, message, schema) {
          var soapEndpoint, res;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                soapEndpoint = new soap_1["default"](this._conn, {
                  xmlns: 'urn:partner.soap.sforce.com',
                  endpointUrl: "".concat(this._conn.instanceUrl, "/services/Soap/u/").concat(this._conn.version)
                });
                _context.next = 3;
                return soapEndpoint.invoke(method, message, schema ? {
                  result: schema
                } : undefined, schema_1.ApiSchemas);
              case 3:
                res = _context.sent;
                return _context.abrupt("return", res.result);
              case 5:
              case "end":
                return _context.stop();
            }
          }, _callee, this);
        }));
        function _invoke(_x, _x2, _x3) {
          return _invoke2.apply(this, arguments);
        }
        return _invoke;
      }())
    }, {
      key: "convertLead",
      value: function () {
        var _convertLead = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(leadConverts) {
          var schema;
          return _regeneratorRuntime().wrap(function _callee2$(_context2) {
            while (1) switch (_context2.prev = _context2.next) {
              case 0:
                schema = Array.isArray(leadConverts) ? [schema_1.ApiSchemas.LeadConvertResult] : schema_1.ApiSchemas.LeadConvertResult;
                return _context2.abrupt("return", this._invoke('convertLead', {
                  leadConverts: leadConverts
                }, schema));
              case 2:
              case "end":
                return _context2.stop();
            }
          }, _callee2, this);
        }));
        function convertLead(_x4) {
          return _convertLead.apply(this, arguments);
        }
        return convertLead;
      }()
    }, {
      key: "merge",
      value: function () {
        var _merge = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(mergeRequests) {
          var schema;
          return _regeneratorRuntime().wrap(function _callee3$(_context3) {
            while (1) switch (_context3.prev = _context3.next) {
              case 0:
                schema = Array.isArray(mergeRequests) ? [schema_1.ApiSchemas.MergeResult] : schema_1.ApiSchemas.MergeResult;
                return _context3.abrupt("return", this._invoke('merge', {
                  mergeRequests: mergeRequests
                }, schema));
              case 2:
              case "end":
                return _context3.stop();
            }
          }, _callee3, this);
        }));
        function merge(_x5) {
          return _merge.apply(this, arguments);
        }
        return merge;
      }()
      /**
       * Delete records from the recycle bin immediately
       */
    }, {
      key: "emptyRecycleBin",
      value: (function () {
        var _emptyRecycleBin = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(ids) {
          return _regeneratorRuntime().wrap(function _callee4$(_context4) {
            while (1) switch (_context4.prev = _context4.next) {
              case 0:
                return _context4.abrupt("return", this._invoke('emptyRecycleBin', {
                  ids: ids
                }, [schema_1.ApiSchemas.EmptyRecycleBinResult]));
              case 1:
              case "end":
                return _context4.stop();
            }
          }, _callee4, this);
        }));
        function emptyRecycleBin(_x6) {
          return _emptyRecycleBin.apply(this, arguments);
        }
        return emptyRecycleBin;
      }()
      /**
       * Returns information about the standard and custom apps available to the logged-in user
       */
      )
    }, {
      key: "describeTabs",
      value: (function () {
        var _describeTabs = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
          return _regeneratorRuntime().wrap(function _callee5$(_context5) {
            while (1) switch (_context5.prev = _context5.next) {
              case 0:
                return _context5.abrupt("return", this._invoke('describeTabs', {}, [schema_1.ApiSchemas.DescribeTabSetResult]));
              case 1:
              case "end":
                return _context5.stop();
            }
          }, _callee5, this);
        }));
        function describeTabs() {
          return _describeTabs.apply(this, arguments);
        }
        return describeTabs;
      }()
      /**
       * Retrieves the current system timestamp (Coordinated Universal Time (UTC) time zone) from the API
       */
      )
    }, {
      key: "getServerTimestamp",
      value: (function () {
        var _getServerTimestamp = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
          return _regeneratorRuntime().wrap(function _callee6$(_context6) {
            while (1) switch (_context6.prev = _context6.next) {
              case 0:
                return _context6.abrupt("return", this._invoke('getServerTimestamp', {}, schema_1.ApiSchemas.GetServerTimestampResult));
              case 1:
              case "end":
                return _context6.stop();
            }
          }, _callee6, this);
        }));
        function getServerTimestamp() {
          return _getServerTimestamp.apply(this, arguments);
        }
        return getServerTimestamp;
      }()
      /**
       * Retrieves personal information for the user associated with the current session
       */
      )
    }, {
      key: "getUserInfo",
      value: (function () {
        var _getUserInfo = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {
          return _regeneratorRuntime().wrap(function _callee7$(_context7) {
            while (1) switch (_context7.prev = _context7.next) {
              case 0:
                return _context7.abrupt("return", this._invoke('getUserInfo', {}, schema_1.ApiSchemas.GetUserInfoResult));
              case 1:
              case "end":
                return _context7.stop();
            }
          }, _callee7, this);
        }));
        function getUserInfo() {
          return _getUserInfo.apply(this, arguments);
        }
        return getUserInfo;
      }()
      /**
       * Sets the specified user’s password to the specified value
       */
      )
    }, {
      key: "setPassword",
      value: function setPassword(userId, password) {
        return this._invoke('setPassword', {
          userId: userId,
          password: password
        }, 'string');
      }
      /**
       * Resets the specified user’s password
       */
    }, {
      key: "resetPassword",
      value: function resetPassword(userId) {
        return this._invoke('resetPassword', {
          userId: userId
        }, schema_1.ApiSchemas.ResetPasswordResult);
      }
    }, {
      key: "create",
      value: function create(sObjects) {
        var schema = Array.isArray(sObjects) ? [schema_1.ApiSchemas.SaveResult] : schema_1.ApiSchemas.SaveResult;
        var args = {
          '@xmlns': 'urn:partner.soap.sforce.com',
          '@xmlns:ns1': 'sobject.partner.soap.sforce.com',
          'ns1:sObjects': toSoapRecord(sObjects)
        };
        return this._invoke('create', args, schema);
      }
    }, {
      key: "update",
      value: function update(sObjects) {
        var schema = Array.isArray(sObjects) ? [schema_1.ApiSchemas.SaveResult] : schema_1.ApiSchemas.SaveResult;
        var args = {
          '@xmlns': 'urn:partner.soap.sforce.com',
          '@xmlns:ns1': 'sobject.partner.soap.sforce.com',
          'ns1:sObjects': toSoapRecord(sObjects)
        };
        return this._invoke('update', args, schema);
      }
    }, {
      key: "upsert",
      value: function upsert(externalIdFieldName, sObjects) {
        var schema = Array.isArray(sObjects) ? [schema_1.ApiSchemas.UpsertResult] : schema_1.ApiSchemas.UpsertResult;
        var args = {
          '@xmlns': 'urn:partner.soap.sforce.com',
          '@xmlns:ns1': 'sobject.partner.soap.sforce.com',
          'ns1:externalIDFieldName': externalIdFieldName,
          'ns1:sObjects': toSoapRecord(sObjects)
        };
        return this._invoke('upsert', args, schema);
      }
    }, {
      key: "delete",
      value: function _delete(ids) {
        var schema = Array.isArray(ids) ? [schema_1.ApiSchemas.DeleteResult] : schema_1.ApiSchemas.DeleteResult;
        var args = {
          '@xmlns': 'urn:partner.soap.sforce.com',
          '@xmlns:ns1': 'sobject.partner.soap.sforce.com',
          'ns1:ids': ids
        };
        return this._invoke('delete', args, schema);
      }
    }]);
  }();
  soap$1.SoapApi = SoapApi;
  /*--------------------------------------------*/
  /*
   * Register hook in connection instantiation for dynamically adding this API module features
   */
  (0, jsforce_1$1.registerModule)('soap', function (conn) {
    return new SoapApi(conn);
  });
  soap$1["default"] = SoapApi;

  var streaming = {};

  var constants$5 = {
    VERSION: '1.4.0',
    BAYEUX_VERSION: '1.0',
    ID_LENGTH: 160,
    JSONP_CALLBACK: 'jsonpcallback',
    CONNECTION_TYPES: ['long-polling', 'cross-origin-long-polling', 'callback-polling', 'websocket', 'eventsource', 'in-process'],
    MANDATORY_CONNECTION_TYPES: ['long-polling', 'callback-polling', 'in-process']
  };

  // http://assanka.net/content/tech/2009/09/02/json2-js-vs-prototype/

  var to_json = function to_json(object) {
    return JSON.stringify(object, function (key, value) {
      return this[key] instanceof Array ? this[key] : value;
    });
  };

  var toJSON$2 = to_json;
  var Logging$8 = {
    LOG_LEVELS: {
      fatal: 4,
      error: 3,
      warn: 2,
      info: 1,
      debug: 0
    },
    writeLog: function writeLog(messageArgs, level) {
      var logger = Logging$8.logger || (Logging$8.wrapper || Logging$8).logger;
      if (!logger) return;
      var args = Array.prototype.slice.apply(messageArgs),
        banner = '[Faye',
        klass = this.className,
        message = args.shift().replace(/\?/g, function () {
          try {
            return toJSON$2(args.shift());
          } catch (error) {
            return '[Object]';
          }
        });
      if (klass) banner += '.' + klass;
      banner += '] ';
      if (typeof logger[level] === 'function') logger[level](banner + message);else if (typeof logger === 'function') logger(banner + message);
    }
  };
  for (var key$b in Logging$8.LOG_LEVELS) (function (level) {
    Logging$8[level] = function () {
      this.writeLog(arguments, level);
    };
  })(key$b);
  var logging = Logging$8;

  var domain; // The domain module is executed on demand
  var hasSetImmediate = typeof setImmediate === "function";

  // Use the fastest means possible to execute a task in its own turn, with
  // priority over other events including network IO events in Node.js.
  //
  // An exception thrown by a task will permanently interrupt the processing of
  // subsequent tasks. The higher level `asap` function ensures that if an
  // exception is thrown by a task, that the task queue will continue flushing as
  // soon as possible, but if you use `rawAsap` directly, you are responsible to
  // either ensure that no exceptions are thrown from your task, or to manually
  // call `rawAsap.requestFlush` if an exception is thrown.
  var raw = rawAsap$1;
  function rawAsap$1(task) {
    if (!queue.length) {
      requestFlush();
      flushing = true;
    }
    // Avoids a function call
    queue[queue.length] = task;
  }
  var queue = [];
  // Once a flush has been requested, no further calls to `requestFlush` are
  // necessary until the next `flush` completes.
  var flushing = false;
  // The position of the next task to execute in the task queue. This is
  // preserved between calls to `flush` so that it can be resumed if
  // a task throws an exception.
  var index = 0;
  // If a task schedules additional tasks recursively, the task queue can grow
  // unbounded. To prevent memory excaustion, the task queue will periodically
  // truncate already-completed tasks.
  var capacity = 1024;

  // The flush function processes all tasks that have been scheduled with
  // `rawAsap` unless and until one of those tasks throws an exception.
  // If a task throws an exception, `flush` ensures that its state will remain
  // consistent and will resume where it left off when called again.
  // However, `flush` does not make any arrangements to be called again if an
  // exception is thrown.
  function flush() {
    while (index < queue.length) {
      var currentIndex = index;
      // Advance the index before calling the task. This ensures that we will
      // begin flushing on the next task the task throws an error.
      index = index + 1;
      queue[currentIndex].call();
      // Prevent leaking memory for long chains of recursive calls to `asap`.
      // If we call `asap` within tasks scheduled by `asap`, the queue will
      // grow, but to avoid an O(n) walk for every task we execute, we don't
      // shift tasks off the queue after they have been executed.
      // Instead, we periodically shift 1024 tasks off the queue.
      if (index > capacity) {
        // Manually shift all values starting at the index back to the
        // beginning of the queue.
        for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {
          queue[scan] = queue[scan + index];
        }
        queue.length -= index;
        index = 0;
      }
    }
    queue.length = 0;
    index = 0;
    flushing = false;
  }
  rawAsap$1.requestFlush = requestFlush;
  function requestFlush() {
    // Ensure flushing is not bound to any domain.
    // It is not sufficient to exit the domain, because domains exist on a stack.
    // To execute code outside of any domain, the following dance is necessary.
    var parentDomain = process.domain;
    if (parentDomain) {
      if (!domain) {
        // Lazy execute the domain module.
        // Only employed if the user elects to use domains.
        domain = require$$0$b;
      }
      domain.active = process.domain = null;
    }

    // `setImmediate` is slower that `process.nextTick`, but `process.nextTick`
    // cannot handle recursion.
    // `requestFlush` will only be called recursively from `asap.js`, to resume
    // flushing after an error is thrown into a domain.
    // Conveniently, `setImmediate` was introduced in the same version
    // `process.nextTick` started throwing recursion errors.
    if (flushing && hasSetImmediate) {
      setImmediate(flush);
    } else {
      process.nextTick(flush);
    }
    if (parentDomain) {
      domain.active = process.domain = parentDomain;
    }
  }

  var rawAsap = raw;
  var freeTasks = [];

  /**
   * Calls a task as soon as possible after returning, in its own event, with
   * priority over IO events. An exception thrown in a task can be handled by
   * `process.on("uncaughtException") or `domain.on("error")`, but will otherwise
   * crash the process. If the error is handled, all subsequent tasks will
   * resume.
   *
   * @param {{call}} task A callable object, typically a function that takes no
   * arguments.
   */
  var asap_1 = asap$3;
  function asap$3(task) {
    var rawTask;
    if (freeTasks.length) {
      rawTask = freeTasks.pop();
    } else {
      rawTask = new RawTask();
    }
    rawTask.task = task;
    rawTask.domain = process.domain;
    rawAsap(rawTask);
  }
  function RawTask() {
    this.task = null;
    this.domain = null;
  }
  RawTask.prototype.call = function () {
    if (this.domain) {
      this.domain.enter();
    }
    var threw = true;
    try {
      this.task.call();
      threw = false;
      // If the task throws an exception (presumably) Node.js restores the
      // domain stack for the next event.
      if (this.domain) {
        this.domain.exit();
      }
    } finally {
      // We use try/finally and a threw flag to avoid messing up stack traces
      // when we catch and release errors.
      if (threw) {
        // In Node.js, uncaught exceptions are considered fatal errors.
        // Re-throw them to interrupt flushing!
        // Ensure that flushing continues if an uncaught exception is
        // suppressed listening process.on("uncaughtException") or
        // domain.on("error").
        rawAsap.requestFlush();
      }
      // If the task threw an error, we do not want to exit the domain here.
      // Exiting the domain would prevent the domain from catching the error.
      this.task = null;
      this.domain = null;
      freeTasks.push(this);
    }
  };

  var forEach = Array.prototype.forEach,
    hasOwn = Object.prototype.hasOwnProperty;
  var assign$f = function assign(target) {
    forEach.call(arguments, function (source, i) {
      if (i === 0) return;
      for (var key in source) {
        if (hasOwn.call(source, key)) target[key] = source[key];
      }
    });
    return target;
  };

  var assign$e = assign$f;
  var _class = function _class(parent, methods) {
    if (typeof parent !== 'function') {
      methods = parent;
      parent = Object;
    }
    var klass = function klass() {
      if (!this.initialize) return this;
      return this.initialize.apply(this, arguments) || this;
    };
    var bridge = function bridge() {};
    bridge.prototype = parent.prototype;
    klass.prototype = new bridge();
    assign$e(klass.prototype, methods);
    return klass;
  };

  var asap$2 = asap_1;
  var PENDING = -1,
    FULFILLED = 0,
    REJECTED = 1;
  var Promise$3 = function Promise(task) {
    this._state = PENDING;
    this._value = null;
    this._defer = [];
    execute(this, task);
  };
  Promise$3.prototype.then = function (onFulfilled, onRejected) {
    var promise = new Promise$3();
    var deferred = {
      promise: promise,
      onFulfilled: onFulfilled,
      onRejected: onRejected
    };
    if (this._state === PENDING) this._defer.push(deferred);else propagate(this, deferred);
    return promise;
  };
  Promise$3.prototype['catch'] = function (onRejected) {
    return this.then(null, onRejected);
  };
  var execute = function execute(promise, task) {
    if (typeof task !== 'function') return;
    var calls = 0;
    var resolvePromise = function resolvePromise(value) {
      if (calls++ === 0) resolve$1(promise, value);
    };
    var rejectPromise = function rejectPromise(reason) {
      if (calls++ === 0) reject(promise, reason);
    };
    try {
      task(resolvePromise, rejectPromise);
    } catch (error) {
      rejectPromise(error);
    }
  };
  var propagate = function propagate(promise, deferred) {
    var state = promise._state,
      value = promise._value,
      next = deferred.promise,
      handler = [deferred.onFulfilled, deferred.onRejected][state],
      pass = [resolve$1, reject][state];
    if (typeof handler !== 'function') return pass(next, value);
    asap$2(function () {
      try {
        resolve$1(next, handler(value));
      } catch (error) {
        reject(next, error);
      }
    });
  };
  var resolve$1 = function resolve(promise, value) {
    if (promise === value) return reject(promise, new TypeError('Recursive promise chain detected'));
    var then;
    try {
      then = getThen(value);
    } catch (error) {
      return reject(promise, error);
    }
    if (!then) return fulfill(promise, value);
    execute(promise, function (resolvePromise, rejectPromise) {
      then.call(value, resolvePromise, rejectPromise);
    });
  };
  var getThen = function getThen(value) {
    var type = _typeof(value),
      then = (type === 'object' || type === 'function') && value && value.then;
    return typeof then === 'function' ? then : null;
  };
  var fulfill = function fulfill(promise, value) {
    settle(promise, FULFILLED, value);
  };
  var reject = function reject(promise, reason) {
    settle(promise, REJECTED, reason);
  };
  var settle = function settle(promise, state, value) {
    var defer = promise._defer,
      i = 0;
    promise._state = state;
    promise._value = value;
    promise._defer = null;
    if (defer.length === 0) return;
    while (i < defer.length) propagate(promise, defer[i++]);
  };
  Promise$3.resolve = function (value) {
    try {
      if (getThen(value)) return value;
    } catch (error) {
      return Promise$3.reject(error);
    }
    return new Promise$3(function (resolve, reject) {
      resolve(value);
    });
  };
  Promise$3.reject = function (reason) {
    return new Promise$3(function (resolve, reject) {
      reject(reason);
    });
  };
  Promise$3.all = function (promises) {
    return new Promise$3(function (resolve, reject) {
      var list = [],
        n = promises.length,
        i;
      if (n === 0) return resolve(list);
      var push = function push(promise, i) {
        Promise$3.resolve(promise).then(function (value) {
          list[i] = value;
          if (--n === 0) resolve(list);
        }, reject);
      };
      for (i = 0; i < n; i++) push(promises[i], i);
    });
  };
  Promise$3.race = function (promises) {
    return new Promise$3(function (resolve, reject) {
      for (var i = 0, n = promises.length; i < n; i++) Promise$3.resolve(promises[i]).then(resolve, reject);
    });
  };
  Promise$3.deferred = function () {
    var tuple = {};
    tuple.promise = new Promise$3(function (resolve, reject) {
      tuple.resolve = resolve;
      tuple.reject = reject;
    });
    return tuple;
  };
  var promise = Promise$3;

  var array$5 = {
    commonElement: function commonElement(lista, listb) {
      for (var i = 0, n = lista.length; i < n; i++) {
        if (this.indexOf(listb, lista[i]) !== -1) return lista[i];
      }
      return null;
    },
    indexOf: function indexOf(list, needle) {
      if (list.indexOf) return list.indexOf(needle);
      for (var i = 0, n = list.length; i < n; i++) {
        if (list[i] === needle) return i;
      }
      return -1;
    },
    map: function map(object, callback, context) {
      if (object.map) return object.map(callback, context);
      var result = [];
      if (object instanceof Array) {
        for (var i = 0, n = object.length; i < n; i++) {
          result.push(callback.call(context || null, object[i], i));
        }
      } else {
        for (var key in object) {
          if (!object.hasOwnProperty(key)) continue;
          result.push(callback.call(context || null, key, object[key]));
        }
      }
      return result;
    },
    filter: function filter(array, callback, context) {
      if (array.filter) return array.filter(callback, context);
      var result = [];
      for (var i = 0, n = array.length; i < n; i++) {
        if (callback.call(context || null, array[i], i)) result.push(array[i]);
      }
      return result;
    },
    asyncEach: function asyncEach(list, iterator, callback, context) {
      var n = list.length,
        i = -1,
        calls = 0,
        looping = false;
      var iterate = function iterate() {
        calls -= 1;
        i += 1;
        if (i === n) return callback && callback.call(context);
        iterator(list[i], resume);
      };
      var loop = function loop() {
        if (looping) return;
        looping = true;
        while (calls > 0) iterate();
        looping = false;
      };
      var resume = function resume() {
        calls += 1;
        loop();
      };
      resume();
    }
  };

  var node_shim = {};

  var array$4 = array$5;
  var validate_options = function validate_options(options, validKeys) {
    for (var key in options) {
      if (array$4.indexOf(validKeys, key) < 0) throw new Error('Unrecognized option: ' + key);
    }
  };

  var Promise$2 = promise;
  var deferrable = {
    then: function then(callback, errback) {
      var self = this;
      if (!this._promise) this._promise = new Promise$2(function (resolve, reject) {
        self._resolve = resolve;
        self._reject = reject;
      });
      if (arguments.length === 0) return this._promise;else return this._promise.then(callback, errback);
    },
    callback: function callback(_callback, context) {
      return this.then(function (value) {
        _callback.call(context, value);
      });
    },
    errback: function errback(callback, context) {
      return this.then(null, function (reason) {
        callback.call(context, reason);
      });
    },
    timeout: function timeout(seconds, message) {
      this.then();
      var self = this;
      this._timer = commonjsGlobal.setTimeout(function () {
        self._reject(message);
      }, seconds * 1000);
    },
    setDeferredStatus: function setDeferredStatus(status, value) {
      if (this._timer) commonjsGlobal.clearTimeout(this._timer);
      this.then();
      if (status === 'succeeded') this._resolve(value);else if (status === 'failed') this._reject(value);else delete this._promise;
    }
  };

  /*
  Copyright Joyent, Inc. and other Node contributors. All rights reserved.
  Permission is hereby granted, free of charge, to any person obtaining a copy of
  this software and associated documentation files (the "Software"), to deal in
  the Software without restriction, including without limitation the rights to
  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
  of the Software, and to permit persons to whom the Software is furnished to do
  so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
  */
  var isArray = typeof Array.isArray === 'function' ? Array.isArray : function (xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
  };
  function indexOf(xs, x) {
    if (xs.indexOf) return xs.indexOf(x);
    for (var i = 0; i < xs.length; i++) {
      if (x === xs[i]) return i;
    }
    return -1;
  }
  function EventEmitter$1() {}
  var event_emitter = EventEmitter$1;
  EventEmitter$1.prototype.emit = function (type) {
    // If there is no 'error' event listener then throw.
    if (type === 'error') {
      if (!this._events || !this._events.error || isArray(this._events.error) && !this._events.error.length) {
        if (arguments[1] instanceof Error) {
          throw arguments[1]; // Unhandled 'error' event
        } else {
          throw new Error("Uncaught, unspecified 'error' event.");
        }
      }
    }
    if (!this._events) return false;
    var handler = this._events[type];
    if (!handler) return false;
    if (typeof handler == 'function') {
      switch (arguments.length) {
        // fast cases
        case 1:
          handler.call(this);
          break;
        case 2:
          handler.call(this, arguments[1]);
          break;
        case 3:
          handler.call(this, arguments[1], arguments[2]);
          break;
        // slower
        default:
          var args = Array.prototype.slice.call(arguments, 1);
          handler.apply(this, args);
      }
      return true;
    } else if (isArray(handler)) {
      var args = Array.prototype.slice.call(arguments, 1);
      var listeners = handler.slice();
      for (var i = 0, l = listeners.length; i < l; i++) {
        listeners[i].apply(this, args);
      }
      return true;
    } else {
      return false;
    }
  };

  // EventEmitter is defined in src/node_events.cc
  // EventEmitter.prototype.emit() is also defined there.
  EventEmitter$1.prototype.addListener = function (type, listener) {
    if ('function' !== typeof listener) {
      throw new Error('addListener only takes instances of Function');
    }
    if (!this._events) this._events = {};

    // To avoid recursion in the case that type == "newListeners"! Before
    // adding it to the listeners, first emit "newListeners".
    this.emit('newListener', type, listener);
    if (!this._events[type]) {
      // Optimize the case of one listener. Don't need the extra array object.
      this._events[type] = listener;
    } else if (isArray(this._events[type])) {
      // If we've already got an array, just append.
      this._events[type].push(listener);
    } else {
      // Adding the second element, need to change to array.
      this._events[type] = [this._events[type], listener];
    }
    return this;
  };
  EventEmitter$1.prototype.on = EventEmitter$1.prototype.addListener;
  EventEmitter$1.prototype.once = function (type, listener) {
    var self = this;
    self.on(type, function g() {
      self.removeListener(type, g);
      listener.apply(this, arguments);
    });
    return this;
  };
  EventEmitter$1.prototype.removeListener = function (type, listener) {
    if ('function' !== typeof listener) {
      throw new Error('removeListener only takes instances of Function');
    }

    // does not use listeners(), so no side effect of creating _events[type]
    if (!this._events || !this._events[type]) return this;
    var list = this._events[type];
    if (isArray(list)) {
      var i = indexOf(list, listener);
      if (i < 0) return this;
      list.splice(i, 1);
      if (list.length == 0) delete this._events[type];
    } else if (this._events[type] === listener) {
      delete this._events[type];
    }
    return this;
  };
  EventEmitter$1.prototype.removeAllListeners = function (type) {
    if (arguments.length === 0) {
      this._events = {};
      return this;
    }

    // does not use listeners(), so no side effect of creating _events[type]
    if (type && this._events && this._events[type]) this._events[type] = null;
    return this;
  };
  EventEmitter$1.prototype.listeners = function (type) {
    if (!this._events) this._events = {};
    if (!this._events[type]) this._events[type] = [];
    if (!isArray(this._events[type])) {
      this._events[type] = [this._events[type]];
    }
    return this._events[type];
  };

  var assign$d = assign$f,
    EventEmitter = event_emitter;
  var Publisher$5 = {
    countListeners: function countListeners(eventType) {
      return this.listeners(eventType).length;
    },
    bind: function bind(eventType, listener, context) {
      var slice = Array.prototype.slice,
        handler = function handler() {
          listener.apply(context, slice.call(arguments));
        };
      this._listeners = this._listeners || [];
      this._listeners.push([eventType, listener, context, handler]);
      return this.on(eventType, handler);
    },
    unbind: function unbind(eventType, listener, context) {
      this._listeners = this._listeners || [];
      var n = this._listeners.length,
        tuple;
      while (n--) {
        tuple = this._listeners[n];
        if (tuple[0] !== eventType) continue;
        if (listener && (tuple[1] !== listener || tuple[2] !== context)) continue;
        this._listeners.splice(n, 1);
        this.removeListener(eventType, tuple[3]);
      }
    }
  };
  assign$d(Publisher$5, EventEmitter.prototype);
  Publisher$5.trigger = Publisher$5.emit;
  var publisher = Publisher$5;

  var grammar = {
    CHANNEL_NAME: /^\/(((([a-z]|[A-Z])|[0-9])|(\-|\_|\!|\~|\(|\)|\$|\@)))+(\/(((([a-z]|[A-Z])|[0-9])|(\-|\_|\!|\~|\(|\)|\$|\@)))+)*$/,
    CHANNEL_PATTERN: /^(\/(((([a-z]|[A-Z])|[0-9])|(\-|\_|\!|\~|\(|\)|\$|\@)))+)*\/\*{1,2}$/,
    ERROR: /^([0-9][0-9][0-9]:(((([a-z]|[A-Z])|[0-9])|(\-|\_|\!|\~|\(|\)|\$|\@)| |\/|\*|\.))*(,(((([a-z]|[A-Z])|[0-9])|(\-|\_|\!|\~|\(|\)|\$|\@)| |\/|\*|\.))*)*:(((([a-z]|[A-Z])|[0-9])|(\-|\_|\!|\~|\(|\)|\$|\@)| |\/|\*|\.))*|[0-9][0-9][0-9]::(((([a-z]|[A-Z])|[0-9])|(\-|\_|\!|\~|\(|\)|\$|\@)| |\/|\*|\.))*)$/,
    VERSION: /^([0-9])+(\.(([a-z]|[A-Z])|[0-9])(((([a-z]|[A-Z])|[0-9])|\-|\_))*)*$/
  };

  var Class$e = _class,
    assign$c = assign$f,
    Publisher$4 = publisher,
    Grammar$2 = grammar;
  var Channel$4 = Class$e({
    initialize: function initialize(name) {
      this.id = this.name = name;
    },
    push: function push(message) {
      this.trigger('message', message);
    },
    isUnused: function isUnused() {
      return this.countListeners('message') === 0;
    }
  });
  assign$c(Channel$4.prototype, Publisher$4);
  assign$c(Channel$4, {
    HANDSHAKE: '/meta/handshake',
    CONNECT: '/meta/connect',
    SUBSCRIBE: '/meta/subscribe',
    UNSUBSCRIBE: '/meta/unsubscribe',
    DISCONNECT: '/meta/disconnect',
    META: 'meta',
    SERVICE: 'service',
    expand: function expand(name) {
      var segments = this.parse(name),
        channels = ['/**', name];
      var copy = segments.slice();
      copy[copy.length - 1] = '*';
      channels.push(this.unparse(copy));
      for (var i = 1, n = segments.length; i < n; i++) {
        copy = segments.slice(0, i);
        copy.push('**');
        channels.push(this.unparse(copy));
      }
      return channels;
    },
    isValid: function isValid(name) {
      return Grammar$2.CHANNEL_NAME.test(name) || Grammar$2.CHANNEL_PATTERN.test(name);
    },
    parse: function parse(name) {
      if (!this.isValid(name)) return null;
      return name.split('/').slice(1);
    },
    unparse: function unparse(segments) {
      return '/' + segments.join('/');
    },
    isMeta: function isMeta(name) {
      var segments = this.parse(name);
      return segments ? segments[0] === this.META : null;
    },
    isService: function isService(name) {
      var segments = this.parse(name);
      return segments ? segments[0] === this.SERVICE : null;
    },
    isSubscribable: function isSubscribable(name) {
      if (!this.isValid(name)) return null;
      return !this.isMeta(name) && !this.isService(name);
    },
    Set: Class$e({
      initialize: function initialize() {
        this._channels = {};
      },
      getKeys: function getKeys() {
        var keys = [];
        for (var key in this._channels) keys.push(key);
        return keys;
      },
      remove: function remove(name) {
        delete this._channels[name];
      },
      hasSubscription: function hasSubscription(name) {
        return this._channels.hasOwnProperty(name);
      },
      subscribe: function subscribe(names, subscription) {
        var name;
        for (var i = 0, n = names.length; i < n; i++) {
          name = names[i];
          var channel = this._channels[name] = this._channels[name] || new Channel$4(name);
          channel.bind('message', subscription);
        }
      },
      unsubscribe: function unsubscribe(name, subscription) {
        var channel = this._channels[name];
        if (!channel) return false;
        channel.unbind('message', subscription);
        if (channel.isUnused()) {
          this.remove(name);
          return true;
        } else {
          return false;
        }
      },
      distributeMessage: function distributeMessage(message) {
        var channels = Channel$4.expand(message.channel);
        for (var i = 0, n = channels.length; i < n; i++) {
          var channel = this._channels[channels[i]];
          if (channel) channel.trigger('message', message);
        }
      }
    })
  });
  var channel = Channel$4;

  var uri = {
    isURI: function isURI(uri) {
      return uri && uri.protocol && uri.host && uri.path;
    },
    isSameOrigin: function isSameOrigin(uri) {
      return uri.protocol === location.protocol && uri.hostname === location.hostname && uri.port === location.port;
    },
    parse: function parse(url) {
      if (typeof url !== 'string') return url;
      var uri = {},
        parts,
        query,
        pairs,
        i,
        n,
        data;
      var consume = function consume(name, pattern) {
        url = url.replace(pattern, function (match) {
          uri[name] = match;
          return '';
        });
        uri[name] = uri[name] || '';
      };
      consume('protocol', /^[a-z]+\:/i);
      consume('host', /^\/\/[^\/\?#]+/);
      if (!/^\//.test(url) && !uri.host) url = location.pathname.replace(/[^\/]*$/, '') + url;
      consume('pathname', /^[^\?#]*/);
      consume('search', /^\?[^#]*/);
      consume('hash', /^#.*/);
      uri.protocol = uri.protocol || location.protocol;
      if (uri.host) {
        uri.host = uri.host.substr(2);
        if (/@/.test(uri.host)) {
          uri.auth = uri.host.split('@')[0];
          uri.host = uri.host.split('@')[1];
        }
        parts = uri.host.match(/^\[([^\]]+)\]|^[^:]+/);
        uri.hostname = parts[1] || parts[0];
        uri.port = (uri.host.match(/:(\d+)$/) || [])[1] || '';
      } else {
        uri.host = location.host;
        uri.hostname = location.hostname;
        uri.port = location.port;
      }
      uri.pathname = uri.pathname || '/';
      uri.path = uri.pathname + uri.search;
      query = uri.search.replace(/^\?/, '');
      pairs = query ? query.split('&') : [];
      data = {};
      for (i = 0, n = pairs.length; i < n; i++) {
        parts = pairs[i].split('=');
        data[decodeURIComponent(parts[0] || '')] = decodeURIComponent(parts[1] || '');
      }
      uri.query = data;
      uri.href = this.stringify(uri);
      return uri;
    },
    stringify: function stringify(uri) {
      var auth = uri.auth ? uri.auth + '@' : '',
        string = uri.protocol + '//' + auth + uri.host;
      string += uri.pathname + this.queryString(uri.query) + (uri.hash || '');
      return string;
    },
    queryString: function queryString(query) {
      var pairs = [];
      for (var key in query) {
        if (!query.hasOwnProperty(key)) continue;
        pairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(query[key]));
      }
      if (pairs.length === 0) return '';
      return '?' + pairs.join('&');
    }
  };

  var cookie = {};

  var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

  /** Bootstring parameters */
  var base$1 = 36;
  var tMin = 1;
  var tMax = 26;
  var skew = 38;
  var damp = 700;
  var initialBias = 72;
  var initialN = 128; // 0x80
  var delimiter = '-'; // '\x2D'

  /** Regular expressions */
  var regexPunycode = /^xn--/;
  var regexNonASCII = /[^\0-\x7F]/; // Note: U+007F DEL is excluded too.
  var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

  /** Error messages */
  var errors$1 = {
    'overflow': 'Overflow: input needs wider integers to process',
    'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
    'invalid-input': 'Invalid input'
  };

  /** Convenience shortcuts */
  var baseMinusTMin = base$1 - tMin;
  var floor = Math.floor;
  var stringFromCharCode = String.fromCharCode;

  /*--------------------------------------------------------------------------*/

  /**
   * A generic error utility function.
   * @private
   * @param {String} type The error type.
   * @returns {Error} Throws a `RangeError` with the applicable error message.
   */
  function error$1(type) {
    throw new RangeError(errors$1[type]);
  }

  /**
   * A generic `Array#map` utility function.
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} callback The function that gets called for every array
   * item.
   * @returns {Array} A new array of values returned by the callback function.
   */
  function map(array, callback) {
    var result = [];
    var length = array.length;
    while (length--) {
      result[length] = callback(array[length]);
    }
    return result;
  }

  /**
   * A simple `Array#map`-like wrapper to work with domain name strings or email
   * addresses.
   * @private
   * @param {String} domain The domain name or email address.
   * @param {Function} callback The function that gets called for every
   * character.
   * @returns {String} A new string of characters returned by the callback
   * function.
   */
  function mapDomain(domain, callback) {
    var parts = domain.split('@');
    var result = '';
    if (parts.length > 1) {
      // In email addresses, only the domain name should be punycoded. Leave
      // the local part (i.e. everything up to `@`) intact.
      result = parts[0] + '@';
      domain = parts[1];
    }
    // Avoid `split(regex)` for IE8 compatibility. See #17.
    domain = domain.replace(regexSeparators, '\x2E');
    var labels = domain.split('.');
    var encoded = map(labels, callback).join('.');
    return result + encoded;
  }

  /**
   * Creates an array containing the numeric code points of each Unicode
   * character in the string. While JavaScript uses UCS-2 internally,
   * this function will convert a pair of surrogate halves (each of which
   * UCS-2 exposes as separate characters) into a single code point,
   * matching UTF-16.
   * @see `punycode.ucs2.encode`
   * @see <https://mathiasbynens.be/notes/javascript-encoding>
   * @memberOf punycode.ucs2
   * @name decode
   * @param {String} string The Unicode input string (UCS-2).
   * @returns {Array} The new array of code points.
   */
  function ucs2decode(string) {
    var output = [];
    var counter = 0;
    var length = string.length;
    while (counter < length) {
      var value = string.charCodeAt(counter++);
      if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
        // It's a high surrogate, and there is a next character.
        var extra = string.charCodeAt(counter++);
        if ((extra & 0xFC00) == 0xDC00) {
          // Low surrogate.
          output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
        } else {
          // It's an unmatched surrogate; only append this code unit, in case the
          // next code unit is the high surrogate of a surrogate pair.
          output.push(value);
          counter--;
        }
      } else {
        output.push(value);
      }
    }
    return output;
  }

  /**
   * Creates a string based on an array of numeric code points.
   * @see `punycode.ucs2.decode`
   * @memberOf punycode.ucs2
   * @name encode
   * @param {Array} codePoints The array of numeric code points.
   * @returns {String} The new Unicode string (UCS-2).
   */
  var ucs2encode = function ucs2encode(codePoints) {
    return String.fromCodePoint.apply(String, _toConsumableArray(codePoints));
  };

  /**
   * Converts a basic code point into a digit/integer.
   * @see `digitToBasic()`
   * @private
   * @param {Number} codePoint The basic numeric code point value.
   * @returns {Number} The numeric value of a basic code point (for use in
   * representing integers) in the range `0` to `base - 1`, or `base` if
   * the code point does not represent a value.
   */
  var basicToDigit = function basicToDigit(codePoint) {
    if (codePoint >= 0x30 && codePoint < 0x3A) {
      return 26 + (codePoint - 0x30);
    }
    if (codePoint >= 0x41 && codePoint < 0x5B) {
      return codePoint - 0x41;
    }
    if (codePoint >= 0x61 && codePoint < 0x7B) {
      return codePoint - 0x61;
    }
    return base$1;
  };

  /**
   * Converts a digit/integer into a basic code point.
   * @see `basicToDigit()`
   * @private
   * @param {Number} digit The numeric value of a basic code point.
   * @returns {Number} The basic code point whose value (when used for
   * representing integers) is `digit`, which needs to be in the range
   * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
   * used; else, the lowercase form is used. The behavior is undefined
   * if `flag` is non-zero and `digit` has no uppercase form.
   */
  var digitToBasic = function digitToBasic(digit, flag) {
    //  0..25 map to ASCII a..z or A..Z
    // 26..35 map to ASCII 0..9
    return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
  };

  /**
   * Bias adaptation function as per section 3.4 of RFC 3492.
   * https://tools.ietf.org/html/rfc3492#section-3.4
   * @private
   */
  var adapt = function adapt(delta, numPoints, firstTime) {
    var k = 0;
    delta = firstTime ? floor(delta / damp) : delta >> 1;
    delta += floor(delta / numPoints);
    for /* no initialization */
    (; delta > baseMinusTMin * tMax >> 1; k += base$1) {
      delta = floor(delta / baseMinusTMin);
    }
    return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
  };

  /**
   * Converts a Punycode string of ASCII-only symbols to a string of Unicode
   * symbols.
   * @memberOf punycode
   * @param {String} input The Punycode string of ASCII-only symbols.
   * @returns {String} The resulting string of Unicode symbols.
   */
  var decode$1 = function decode(input) {
    // Don't use UCS-2.
    var output = [];
    var inputLength = input.length;
    var i = 0;
    var n = initialN;
    var bias = initialBias;

    // Handle the basic code points: let `basic` be the number of input code
    // points before the last delimiter, or `0` if there is none, then copy
    // the first basic code points to the output.

    var basic = input.lastIndexOf(delimiter);
    if (basic < 0) {
      basic = 0;
    }
    for (var j = 0; j < basic; ++j) {
      // if it's not a basic code point
      if (input.charCodeAt(j) >= 0x80) {
        error$1('not-basic');
      }
      output.push(input.charCodeAt(j));
    }

    // Main decoding loop: start just after the last delimiter if any basic code
    // points were copied; start at the beginning otherwise.

    for /* no final expression */
    (var index = basic > 0 ? basic + 1 : 0; index < inputLength;) {
      // `index` is the index of the next character to be consumed.
      // Decode a generalized variable-length integer into `delta`,
      // which gets added to `i`. The overflow checking is easier
      // if we increase `i` as we go, then subtract off its starting
      // value at the end to obtain `delta`.
      var oldi = i;
      for /* no condition */
      (var w = 1, k = base$1;; k += base$1) {
        if (index >= inputLength) {
          error$1('invalid-input');
        }
        var digit = basicToDigit(input.charCodeAt(index++));
        if (digit >= base$1) {
          error$1('invalid-input');
        }
        if (digit > floor((maxInt - i) / w)) {
          error$1('overflow');
        }
        i += digit * w;
        var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
        if (digit < t) {
          break;
        }
        var baseMinusT = base$1 - t;
        if (w > floor(maxInt / baseMinusT)) {
          error$1('overflow');
        }
        w *= baseMinusT;
      }
      var out = output.length + 1;
      bias = adapt(i - oldi, out, oldi == 0);

      // `i` was supposed to wrap around from `out` to `0`,
      // incrementing `n` each time, so we'll fix that now:
      if (floor(i / out) > maxInt - n) {
        error$1('overflow');
      }
      n += floor(i / out);
      i %= out;

      // Insert `n` at position `i` of the output.
      output.splice(i++, 0, n);
    }
    return String.fromCodePoint.apply(String, output);
  };

  /**
   * Converts a string of Unicode symbols (e.g. a domain name label) to a
   * Punycode string of ASCII-only symbols.
   * @memberOf punycode
   * @param {String} input The string of Unicode symbols.
   * @returns {String} The resulting Punycode string of ASCII-only symbols.
   */
  var encode$1 = function encode(input) {
    var output = [];

    // Convert the input in UCS-2 to an array of Unicode code points.
    input = ucs2decode(input);

    // Cache the length.
    var inputLength = input.length;

    // Initialize the state.
    var n = initialN;
    var delta = 0;
    var bias = initialBias;

    // Handle the basic code points.
    var _iterator = _createForOfIteratorHelper(input),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var _currentValue2 = _step.value;
        if (_currentValue2 < 0x80) {
          output.push(stringFromCharCode(_currentValue2));
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    var basicLength = output.length;
    var handledCPCount = basicLength;

    // `handledCPCount` is the number of code points that have been handled;
    // `basicLength` is the number of basic code points.

    // Finish the basic string with a delimiter unless it's empty.
    if (basicLength) {
      output.push(delimiter);
    }

    // Main encoding loop:
    while (handledCPCount < inputLength) {
      // All non-basic code points < n have been handled already. Find the next
      // larger one:
      var m = maxInt;
      var _iterator2 = _createForOfIteratorHelper(input),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var currentValue = _step2.value;
          if (currentValue >= n && currentValue < m) {
            m = currentValue;
          }
        }

        // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
        // but guard against overflow.
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      var handledCPCountPlusOne = handledCPCount + 1;
      if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
        error$1('overflow');
      }
      delta += (m - n) * handledCPCountPlusOne;
      n = m;
      var _iterator3 = _createForOfIteratorHelper(input),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var _currentValue = _step3.value;
          if (_currentValue < n && ++delta > maxInt) {
            error$1('overflow');
          }
          if (_currentValue === n) {
            // Represent delta as a generalized variable-length integer.
            var q = delta;
            for /* no condition */
            (var k = base$1;; k += base$1) {
              var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
              if (q < t) {
                break;
              }
              var qMinusT = q - t;
              var baseMinusT = base$1 - t;
              output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
              q = floor(qMinusT / baseMinusT);
            }
            output.push(stringFromCharCode(digitToBasic(q, 0)));
            bias = adapt(delta, handledCPCountPlusOne, handledCPCount === basicLength);
            delta = 0;
            ++handledCPCount;
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      ++delta;
      ++n;
    }
    return output.join('');
  };

  /**
   * Converts a Punycode string representing a domain name or an email address
   * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
   * it doesn't matter if you call it on a string that has already been
   * converted to Unicode.
   * @memberOf punycode
   * @param {String} input The Punycoded domain name or email address to
   * convert to Unicode.
   * @returns {String} The Unicode representation of the given Punycode
   * string.
   */
  var toUnicode = function toUnicode(input) {
    return mapDomain(input, function (string) {
      return regexPunycode.test(string) ? decode$1(string.slice(4).toLowerCase()) : string;
    });
  };

  /**
   * Converts a Unicode string representing a domain name or an email address to
   * Punycode. Only the non-ASCII parts of the domain name will be converted,
   * i.e. it doesn't matter if you call it with a domain that's already in
   * ASCII.
   * @memberOf punycode
   * @param {String} input The domain name or email address to convert, as a
   * Unicode string.
   * @returns {String} The Punycode representation of the given domain name or
   * email address.
   */
  var toASCII = function toASCII(input) {
    return mapDomain(input, function (string) {
      return regexNonASCII.test(string) ? 'xn--' + encode$1(string) : string;
    });
  };

  /*--------------------------------------------------------------------------*/

  /** Define the public API */
  var punycode$1 = {
    /**
     * A string representing the current Punycode.js version number.
     * @memberOf punycode
     * @type String
     */
    'version': '2.3.1',
    /**
     * An object of methods to convert from JavaScript's internal character
     * representation (UCS-2) to Unicode code points, and back.
     * @see <https://mathiasbynens.be/notes/javascript-encoding>
     * @memberOf punycode
     * @type Object
     */
    'ucs2': {
      'decode': ucs2decode,
      'encode': ucs2encode
    },
    'decode': decode$1,
    'encode': encode$1,
    'toASCII': toASCII,
    'toUnicode': toUnicode
  };

  var punycode_es6 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    decode: decode$1,
    default: punycode$1,
    encode: encode$1,
    toASCII: toASCII,
    toUnicode: toUnicode,
    ucs2decode: ucs2decode,
    ucs2encode: ucs2encode
  });

  var require$$0 = /*@__PURE__*/getAugmentedNamespace(punycode_es6);

  /**
   * Check if we're required to add a port number.
   *
   * @see https://url.spec.whatwg.org/#default-port
   * @param {Number|String} port Port number we need to check
   * @param {String} protocol Protocol we need to check against.
   * @returns {Boolean} Is it a default port for the given protocol
   * @api private
   */
  var requiresPort = function required(port, protocol) {
    protocol = protocol.split(':')[0];
    port = +port;
    if (!port) return false;
    switch (protocol) {
      case 'http':
      case 'ws':
        return port !== 80;
      case 'https':
      case 'wss':
        return port !== 443;
      case 'ftp':
        return port !== 21;
      case 'gopher':
        return port !== 70;
      case 'file':
        return false;
    }
    return port !== 0;
  };

  var querystringify$1 = {};

  var has = Object.prototype.hasOwnProperty,
    undef;

  /**
   * Decode a URI encoded string.
   *
   * @param {String} input The URI encoded string.
   * @returns {String|Null} The decoded string.
   * @api private
   */
  function decode(input) {
    try {
      return decodeURIComponent(input.replace(/\+/g, ' '));
    } catch (e) {
      return null;
    }
  }

  /**
   * Attempts to encode a given input.
   *
   * @param {String} input The string that needs to be encoded.
   * @returns {String|Null} The encoded string.
   * @api private
   */
  function encode(input) {
    try {
      return encodeURIComponent(input);
    } catch (e) {
      return null;
    }
  }

  /**
   * Simple query string parser.
   *
   * @param {String} query The query string that needs to be parsed.
   * @returns {Object}
   * @api public
   */
  function querystring$1(query) {
    var parser = /([^=?#&]+)=?([^&]*)/g,
      result = {},
      part;
    while (part = parser.exec(query)) {
      var key = decode(part[1]),
        value = decode(part[2]);

      //
      // Prevent overriding of existing properties. This ensures that build-in
      // methods like `toString` or __proto__ are not overriden by malicious
      // querystrings.
      //
      // In the case if failed decoding, we want to omit the key/value pairs
      // from the result.
      //
      if (key === null || value === null || key in result) continue;
      result[key] = value;
    }
    return result;
  }

  /**
   * Transform a query string to an object.
   *
   * @param {Object} obj Object that should be transformed.
   * @param {String} prefix Optional prefix.
   * @returns {String}
   * @api public
   */
  function querystringify(obj, prefix) {
    prefix = prefix || '';
    var pairs = [],
      value,
      key;

    //
    // Optionally prefix with a '?' if needed
    //
    if ('string' !== typeof prefix) prefix = '?';
    for (key in obj) {
      if (has.call(obj, key)) {
        value = obj[key];

        //
        // Edge cases where we actually want to encode the value to an empty
        // string instead of the stringified value.
        //
        if (!value && (value === null || value === undef || isNaN(value))) {
          value = '';
        }
        key = encode(key);
        value = encode(value);

        //
        // If we failed to encode the strings, we should bail out as we don't
        // want to add invalid strings to the query.
        //
        if (key === null || value === null) continue;
        pairs.push(key + '=' + value);
      }
    }
    return pairs.length ? prefix + pairs.join('&') : '';
  }

  //
  // Expose the module.
  //
  querystringify$1.stringify = querystringify;
  querystringify$1.parse = querystring$1;

  var required = requiresPort,
    qs = querystringify$1,
    controlOrWhitespace = /^[\x00-\x20\u00a0\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]+/,
    CRHTLF = /[\n\r\t]/g,
    slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\/\//,
    port = /:\d+$/,
    protocolre = /^([a-z][a-z0-9.+-]*:)?(\/\/)?([\\/]+)?([\S\s]*)/i,
    windowsDriveLetter = /^[a-zA-Z]:/;

  /**
   * Remove control characters and whitespace from the beginning of a string.
   *
   * @param {Object|String} str String to trim.
   * @returns {String} A new string representing `str` stripped of control
   *     characters and whitespace from its beginning.
   * @public
   */
  function trimLeft(str) {
    return (str ? str : '').toString().replace(controlOrWhitespace, '');
  }

  /**
   * These are the parse rules for the URL parser, it informs the parser
   * about:
   *
   * 0. The char it Needs to parse, if it's a string it should be done using
   *    indexOf, RegExp using exec and NaN means set as current value.
   * 1. The property we should set when parsing this value.
   * 2. Indication if it's backwards or forward parsing, when set as number it's
   *    the value of extra chars that should be split off.
   * 3. Inherit from location if non existing in the parser.
   * 4. `toLowerCase` the resulting value.
   */
  var rules = [['#', 'hash'],
  // Extract from the back.
  ['?', 'query'],
  // Extract from the back.
  function sanitize(address, url) {
    // Sanitize what is left of the address
    return isSpecial(url.protocol) ? address.replace(/\\/g, '/') : address;
  }, ['/', 'pathname'],
  // Extract from the back.
  ['@', 'auth', 1],
  // Extract from the front.
  [NaN, 'host', undefined, 1, 1],
  // Set left over value.
  [/:(\d*)$/, 'port', undefined, 1],
  // RegExp the back.
  [NaN, 'hostname', undefined, 1, 1] // Set left over.
  ];

  /**
   * These properties should not be copied or inherited from. This is only needed
   * for all non blob URL's as a blob URL does not include a hash, only the
   * origin.
   *
   * @type {Object}
   * @private
   */
  var ignore = {
    hash: 1,
    query: 1
  };

  /**
   * The location object differs when your code is loaded through a normal page,
   * Worker or through a worker using a blob. And with the blobble begins the
   * trouble as the location object will contain the URL of the blob, not the
   * location of the page where our code is loaded in. The actual origin is
   * encoded in the `pathname` so we can thankfully generate a good "default"
   * location from it so we can generate proper relative URL's again.
   *
   * @param {Object|String} loc Optional default location object.
   * @returns {Object} lolcation object.
   * @public
   */
  function lolcation(loc) {
    var globalVar;
    if (typeof window !== 'undefined') globalVar = window;else if (typeof commonjsGlobal !== 'undefined') globalVar = commonjsGlobal;else if (typeof self !== 'undefined') globalVar = self;else globalVar = {};
    var location = globalVar.location || {};
    loc = loc || location;
    var finaldestination = {},
      type = _typeof(loc),
      key;
    if ('blob:' === loc.protocol) {
      finaldestination = new Url(unescape(loc.pathname), {});
    } else if ('string' === type) {
      finaldestination = new Url(loc, {});
      for (key in ignore) delete finaldestination[key];
    } else if ('object' === type) {
      for (key in loc) {
        if (key in ignore) continue;
        finaldestination[key] = loc[key];
      }
      if (finaldestination.slashes === undefined) {
        finaldestination.slashes = slashes.test(loc.href);
      }
    }
    return finaldestination;
  }

  /**
   * Check whether a protocol scheme is special.
   *
   * @param {String} The protocol scheme of the URL
   * @return {Boolean} `true` if the protocol scheme is special, else `false`
   * @private
   */
  function isSpecial(scheme) {
    return scheme === 'file:' || scheme === 'ftp:' || scheme === 'http:' || scheme === 'https:' || scheme === 'ws:' || scheme === 'wss:';
  }

  /**
   * @typedef ProtocolExtract
   * @type Object
   * @property {String} protocol Protocol matched in the URL, in lowercase.
   * @property {Boolean} slashes `true` if protocol is followed by "//", else `false`.
   * @property {String} rest Rest of the URL that is not part of the protocol.
   */

  /**
   * Extract protocol information from a URL with/without double slash ("//").
   *
   * @param {String} address URL we want to extract from.
   * @param {Object} location
   * @return {ProtocolExtract} Extracted information.
   * @private
   */
  function extractProtocol(address, location) {
    address = trimLeft(address);
    address = address.replace(CRHTLF, '');
    location = location || {};
    var match = protocolre.exec(address);
    var protocol = match[1] ? match[1].toLowerCase() : '';
    var forwardSlashes = !!match[2];
    var otherSlashes = !!match[3];
    var slashesCount = 0;
    var rest;
    if (forwardSlashes) {
      if (otherSlashes) {
        rest = match[2] + match[3] + match[4];
        slashesCount = match[2].length + match[3].length;
      } else {
        rest = match[2] + match[4];
        slashesCount = match[2].length;
      }
    } else {
      if (otherSlashes) {
        rest = match[3] + match[4];
        slashesCount = match[3].length;
      } else {
        rest = match[4];
      }
    }
    if (protocol === 'file:') {
      if (slashesCount >= 2) {
        rest = rest.slice(2);
      }
    } else if (isSpecial(protocol)) {
      rest = match[4];
    } else if (protocol) {
      if (forwardSlashes) {
        rest = rest.slice(2);
      }
    } else if (slashesCount >= 2 && isSpecial(location.protocol)) {
      rest = match[4];
    }
    return {
      protocol: protocol,
      slashes: forwardSlashes || isSpecial(protocol),
      slashesCount: slashesCount,
      rest: rest
    };
  }

  /**
   * Resolve a relative URL pathname against a base URL pathname.
   *
   * @param {String} relative Pathname of the relative URL.
   * @param {String} base Pathname of the base URL.
   * @return {String} Resolved pathname.
   * @private
   */
  function resolve(relative, base) {
    if (relative === '') return base;
    var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/')),
      i = path.length,
      last = path[i - 1],
      unshift = false,
      up = 0;
    while (i--) {
      if (path[i] === '.') {
        path.splice(i, 1);
      } else if (path[i] === '..') {
        path.splice(i, 1);
        up++;
      } else if (up) {
        if (i === 0) unshift = true;
        path.splice(i, 1);
        up--;
      }
    }
    if (unshift) path.unshift('');
    if (last === '.' || last === '..') path.push('');
    return path.join('/');
  }

  /**
   * The actual URL instance. Instead of returning an object we've opted-in to
   * create an actual constructor as it's much more memory efficient and
   * faster and it pleases my OCD.
   *
   * It is worth noting that we should not use `URL` as class name to prevent
   * clashes with the global URL instance that got introduced in browsers.
   *
   * @constructor
   * @param {String} address URL we want to parse.
   * @param {Object|String} [location] Location defaults for relative paths.
   * @param {Boolean|Function} [parser] Parser for the query string.
   * @private
   */
  function Url(address, location, parser) {
    address = trimLeft(address);
    address = address.replace(CRHTLF, '');
    if (!(this instanceof Url)) {
      return new Url(address, location, parser);
    }
    var relative,
      extracted,
      parse,
      instruction,
      index,
      key,
      instructions = rules.slice(),
      type = _typeof(location),
      url = this,
      i = 0;

    //
    // The following if statements allows this module two have compatibility with
    // 2 different API:
    //
    // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments
    //    where the boolean indicates that the query string should also be parsed.
    //
    // 2. The `URL` interface of the browser which accepts a URL, object as
    //    arguments. The supplied object will be used as default values / fall-back
    //    for relative paths.
    //
    if ('object' !== type && 'string' !== type) {
      parser = location;
      location = null;
    }
    if (parser && 'function' !== typeof parser) parser = qs.parse;
    location = lolcation(location);

    //
    // Extract protocol information before running the instructions.
    //
    extracted = extractProtocol(address || '', location);
    relative = !extracted.protocol && !extracted.slashes;
    url.slashes = extracted.slashes || relative && location.slashes;
    url.protocol = extracted.protocol || location.protocol || '';
    address = extracted.rest;

    //
    // When the authority component is absent the URL starts with a path
    // component.
    //
    if (extracted.protocol === 'file:' && (extracted.slashesCount !== 2 || windowsDriveLetter.test(address)) || !extracted.slashes && (extracted.protocol || extracted.slashesCount < 2 || !isSpecial(url.protocol))) {
      instructions[3] = [/(.*)/, 'pathname'];
    }
    for (; i < instructions.length; i++) {
      instruction = instructions[i];
      if (typeof instruction === 'function') {
        address = instruction(address, url);
        continue;
      }
      parse = instruction[0];
      key = instruction[1];
      if (parse !== parse) {
        url[key] = address;
      } else if ('string' === typeof parse) {
        index = parse === '@' ? address.lastIndexOf(parse) : address.indexOf(parse);
        if (~index) {
          if ('number' === typeof instruction[2]) {
            url[key] = address.slice(0, index);
            address = address.slice(index + instruction[2]);
          } else {
            url[key] = address.slice(index);
            address = address.slice(0, index);
          }
        }
      } else if (index = parse.exec(address)) {
        url[key] = index[1];
        address = address.slice(0, index.index);
      }
      url[key] = url[key] || (relative && instruction[3] ? location[key] || '' : '');

      //
      // Hostname, host and protocol should be lowercased so they can be used to
      // create a proper `origin`.
      //
      if (instruction[4]) url[key] = url[key].toLowerCase();
    }

    //
    // Also parse the supplied query string in to an object. If we're supplied
    // with a custom parser as function use that instead of the default build-in
    // parser.
    //
    if (parser) url.query = parser(url.query);

    //
    // If the URL is relative, resolve the pathname against the base URL.
    //
    if (relative && location.slashes && url.pathname.charAt(0) !== '/' && (url.pathname !== '' || location.pathname !== '')) {
      url.pathname = resolve(url.pathname, location.pathname);
    }

    //
    // Default to a / for pathname if none exists. This normalizes the URL
    // to always have a /
    //
    if (url.pathname.charAt(0) !== '/' && isSpecial(url.protocol)) {
      url.pathname = '/' + url.pathname;
    }

    //
    // We should not add port numbers if they are already the default port number
    // for a given protocol. As the host also contains the port number we're going
    // override it with the hostname which contains no port number.
    //
    if (!required(url.port, url.protocol)) {
      url.host = url.hostname;
      url.port = '';
    }

    //
    // Parse down the `auth` for the username and password.
    //
    url.username = url.password = '';
    if (url.auth) {
      index = url.auth.indexOf(':');
      if (~index) {
        url.username = url.auth.slice(0, index);
        url.username = encodeURIComponent(decodeURIComponent(url.username));
        url.password = url.auth.slice(index + 1);
        url.password = encodeURIComponent(decodeURIComponent(url.password));
      } else {
        url.username = encodeURIComponent(decodeURIComponent(url.auth));
      }
      url.auth = url.password ? url.username + ':' + url.password : url.username;
    }
    url.origin = url.protocol !== 'file:' && isSpecial(url.protocol) && url.host ? url.protocol + '//' + url.host : 'null';

    //
    // The href is just the compiled result.
    //
    url.href = url.toString();
  }

  /**
   * This is convenience method for changing properties in the URL instance to
   * insure that they all propagate correctly.
   *
   * @param {String} part          Property we need to adjust.
   * @param {Mixed} value          The newly assigned value.
   * @param {Boolean|Function} fn  When setting the query, it will be the function
   *                               used to parse the query.
   *                               When setting the protocol, double slash will be
   *                               removed from the final url if it is true.
   * @returns {URL} URL instance for chaining.
   * @public
   */
  function set$1(part, value, fn) {
    var url = this;
    switch (part) {
      case 'query':
        if ('string' === typeof value && value.length) {
          value = (fn || qs.parse)(value);
        }
        url[part] = value;
        break;
      case 'port':
        url[part] = value;
        if (!required(value, url.protocol)) {
          url.host = url.hostname;
          url[part] = '';
        } else if (value) {
          url.host = url.hostname + ':' + value;
        }
        break;
      case 'hostname':
        url[part] = value;
        if (url.port) value += ':' + url.port;
        url.host = value;
        break;
      case 'host':
        url[part] = value;
        if (port.test(value)) {
          value = value.split(':');
          url.port = value.pop();
          url.hostname = value.join(':');
        } else {
          url.hostname = value;
          url.port = '';
        }
        break;
      case 'protocol':
        url.protocol = value.toLowerCase();
        url.slashes = !fn;
        break;
      case 'pathname':
      case 'hash':
        if (value) {
          var _char = part === 'pathname' ? '/' : '#';
          url[part] = value.charAt(0) !== _char ? _char + value : value;
        } else {
          url[part] = value;
        }
        break;
      case 'username':
      case 'password':
        url[part] = encodeURIComponent(value);
        break;
      case 'auth':
        var index = value.indexOf(':');
        if (~index) {
          url.username = value.slice(0, index);
          url.username = encodeURIComponent(decodeURIComponent(url.username));
          url.password = value.slice(index + 1);
          url.password = encodeURIComponent(decodeURIComponent(url.password));
        } else {
          url.username = encodeURIComponent(decodeURIComponent(value));
        }
    }
    for (var i = 0; i < rules.length; i++) {
      var ins = rules[i];
      if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();
    }
    url.auth = url.password ? url.username + ':' + url.password : url.username;
    url.origin = url.protocol !== 'file:' && isSpecial(url.protocol) && url.host ? url.protocol + '//' + url.host : 'null';
    url.href = url.toString();
    return url;
  }

  /**
   * Transform the properties back in to a valid and full URL string.
   *
   * @param {Function} stringify Optional query stringify function.
   * @returns {String} Compiled version of the URL.
   * @public
   */
  function toString$1(stringify) {
    if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;
    var query,
      url = this,
      host = url.host,
      protocol = url.protocol;
    if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';
    var result = protocol + (url.protocol && url.slashes || isSpecial(url.protocol) ? '//' : '');
    if (url.username) {
      result += url.username;
      if (url.password) result += ':' + url.password;
      result += '@';
    } else if (url.password) {
      result += ':' + url.password;
      result += '@';
    } else if (url.protocol !== 'file:' && isSpecial(url.protocol) && !host && url.pathname !== '/') {
      //
      // Add back the empty userinfo, otherwise the original invalid URL
      // might be transformed into a valid one with `url.pathname` as host.
      //
      result += '@';
    }

    //
    // Trailing colon is removed from `url.host` when it is parsed. If it still
    // ends with a colon, then add back the trailing colon that was removed. This
    // prevents an invalid URL from being transformed into a valid one.
    //
    if (host[host.length - 1] === ':' || port.test(url.hostname) && !url.port) {
      host += ':';
    }
    result += host + url.pathname;
    query = 'object' === _typeof(url.query) ? stringify(url.query) : url.query;
    if (query) result += '?' !== query.charAt(0) ? '?' + query : query;
    if (url.hash) result += url.hash;
    return result;
  }
  Url.prototype = {
    set: set$1,
    toString: toString$1
  };

  //
  // Expose the URL parser and some additional properties that might be useful for
  // others or testing.
  //
  Url.extractProtocol = extractProtocol;
  Url.location = lolcation;
  Url.trimLeft = trimLeft;
  Url.qs = qs;
  var urlParse$1 = Url;

  var pubsuffixPsl = {};

  var psl$1 = {};

  var require$$1 = [
  	"ac",
  	"com.ac",
  	"edu.ac",
  	"gov.ac",
  	"net.ac",
  	"mil.ac",
  	"org.ac",
  	"ad",
  	"nom.ad",
  	"ae",
  	"co.ae",
  	"net.ae",
  	"org.ae",
  	"sch.ae",
  	"ac.ae",
  	"gov.ae",
  	"mil.ae",
  	"aero",
  	"accident-investigation.aero",
  	"accident-prevention.aero",
  	"aerobatic.aero",
  	"aeroclub.aero",
  	"aerodrome.aero",
  	"agents.aero",
  	"aircraft.aero",
  	"airline.aero",
  	"airport.aero",
  	"air-surveillance.aero",
  	"airtraffic.aero",
  	"air-traffic-control.aero",
  	"ambulance.aero",
  	"amusement.aero",
  	"association.aero",
  	"author.aero",
  	"ballooning.aero",
  	"broker.aero",
  	"caa.aero",
  	"cargo.aero",
  	"catering.aero",
  	"certification.aero",
  	"championship.aero",
  	"charter.aero",
  	"civilaviation.aero",
  	"club.aero",
  	"conference.aero",
  	"consultant.aero",
  	"consulting.aero",
  	"control.aero",
  	"council.aero",
  	"crew.aero",
  	"design.aero",
  	"dgca.aero",
  	"educator.aero",
  	"emergency.aero",
  	"engine.aero",
  	"engineer.aero",
  	"entertainment.aero",
  	"equipment.aero",
  	"exchange.aero",
  	"express.aero",
  	"federation.aero",
  	"flight.aero",
  	"fuel.aero",
  	"gliding.aero",
  	"government.aero",
  	"groundhandling.aero",
  	"group.aero",
  	"hanggliding.aero",
  	"homebuilt.aero",
  	"insurance.aero",
  	"journal.aero",
  	"journalist.aero",
  	"leasing.aero",
  	"logistics.aero",
  	"magazine.aero",
  	"maintenance.aero",
  	"media.aero",
  	"microlight.aero",
  	"modelling.aero",
  	"navigation.aero",
  	"parachuting.aero",
  	"paragliding.aero",
  	"passenger-association.aero",
  	"pilot.aero",
  	"press.aero",
  	"production.aero",
  	"recreation.aero",
  	"repbody.aero",
  	"res.aero",
  	"research.aero",
  	"rotorcraft.aero",
  	"safety.aero",
  	"scientist.aero",
  	"services.aero",
  	"show.aero",
  	"skydiving.aero",
  	"software.aero",
  	"student.aero",
  	"trader.aero",
  	"trading.aero",
  	"trainer.aero",
  	"union.aero",
  	"workinggroup.aero",
  	"works.aero",
  	"af",
  	"gov.af",
  	"com.af",
  	"org.af",
  	"net.af",
  	"edu.af",
  	"ag",
  	"com.ag",
  	"org.ag",
  	"net.ag",
  	"co.ag",
  	"nom.ag",
  	"ai",
  	"off.ai",
  	"com.ai",
  	"net.ai",
  	"org.ai",
  	"al",
  	"com.al",
  	"edu.al",
  	"gov.al",
  	"mil.al",
  	"net.al",
  	"org.al",
  	"am",
  	"co.am",
  	"com.am",
  	"commune.am",
  	"net.am",
  	"org.am",
  	"ao",
  	"ed.ao",
  	"gv.ao",
  	"og.ao",
  	"co.ao",
  	"pb.ao",
  	"it.ao",
  	"aq",
  	"ar",
  	"bet.ar",
  	"com.ar",
  	"coop.ar",
  	"edu.ar",
  	"gob.ar",
  	"gov.ar",
  	"int.ar",
  	"mil.ar",
  	"musica.ar",
  	"mutual.ar",
  	"net.ar",
  	"org.ar",
  	"senasa.ar",
  	"tur.ar",
  	"arpa",
  	"e164.arpa",
  	"in-addr.arpa",
  	"ip6.arpa",
  	"iris.arpa",
  	"uri.arpa",
  	"urn.arpa",
  	"as",
  	"gov.as",
  	"asia",
  	"at",
  	"ac.at",
  	"co.at",
  	"gv.at",
  	"or.at",
  	"sth.ac.at",
  	"au",
  	"com.au",
  	"net.au",
  	"org.au",
  	"edu.au",
  	"gov.au",
  	"asn.au",
  	"id.au",
  	"info.au",
  	"conf.au",
  	"oz.au",
  	"act.au",
  	"nsw.au",
  	"nt.au",
  	"qld.au",
  	"sa.au",
  	"tas.au",
  	"vic.au",
  	"wa.au",
  	"act.edu.au",
  	"catholic.edu.au",
  	"nsw.edu.au",
  	"nt.edu.au",
  	"qld.edu.au",
  	"sa.edu.au",
  	"tas.edu.au",
  	"vic.edu.au",
  	"wa.edu.au",
  	"qld.gov.au",
  	"sa.gov.au",
  	"tas.gov.au",
  	"vic.gov.au",
  	"wa.gov.au",
  	"schools.nsw.edu.au",
  	"aw",
  	"com.aw",
  	"ax",
  	"az",
  	"com.az",
  	"net.az",
  	"int.az",
  	"gov.az",
  	"org.az",
  	"edu.az",
  	"info.az",
  	"pp.az",
  	"mil.az",
  	"name.az",
  	"pro.az",
  	"biz.az",
  	"ba",
  	"com.ba",
  	"edu.ba",
  	"gov.ba",
  	"mil.ba",
  	"net.ba",
  	"org.ba",
  	"bb",
  	"biz.bb",
  	"co.bb",
  	"com.bb",
  	"edu.bb",
  	"gov.bb",
  	"info.bb",
  	"net.bb",
  	"org.bb",
  	"store.bb",
  	"tv.bb",
  	"*.bd",
  	"be",
  	"ac.be",
  	"bf",
  	"gov.bf",
  	"bg",
  	"a.bg",
  	"b.bg",
  	"c.bg",
  	"d.bg",
  	"e.bg",
  	"f.bg",
  	"g.bg",
  	"h.bg",
  	"i.bg",
  	"j.bg",
  	"k.bg",
  	"l.bg",
  	"m.bg",
  	"n.bg",
  	"o.bg",
  	"p.bg",
  	"q.bg",
  	"r.bg",
  	"s.bg",
  	"t.bg",
  	"u.bg",
  	"v.bg",
  	"w.bg",
  	"x.bg",
  	"y.bg",
  	"z.bg",
  	"0.bg",
  	"1.bg",
  	"2.bg",
  	"3.bg",
  	"4.bg",
  	"5.bg",
  	"6.bg",
  	"7.bg",
  	"8.bg",
  	"9.bg",
  	"bh",
  	"com.bh",
  	"edu.bh",
  	"net.bh",
  	"org.bh",
  	"gov.bh",
  	"bi",
  	"co.bi",
  	"com.bi",
  	"edu.bi",
  	"or.bi",
  	"org.bi",
  	"biz",
  	"bj",
  	"asso.bj",
  	"barreau.bj",
  	"gouv.bj",
  	"bm",
  	"com.bm",
  	"edu.bm",
  	"gov.bm",
  	"net.bm",
  	"org.bm",
  	"bn",
  	"com.bn",
  	"edu.bn",
  	"gov.bn",
  	"net.bn",
  	"org.bn",
  	"bo",
  	"com.bo",
  	"edu.bo",
  	"gob.bo",
  	"int.bo",
  	"org.bo",
  	"net.bo",
  	"mil.bo",
  	"tv.bo",
  	"web.bo",
  	"academia.bo",
  	"agro.bo",
  	"arte.bo",
  	"blog.bo",
  	"bolivia.bo",
  	"ciencia.bo",
  	"cooperativa.bo",
  	"democracia.bo",
  	"deporte.bo",
  	"ecologia.bo",
  	"economia.bo",
  	"empresa.bo",
  	"indigena.bo",
  	"industria.bo",
  	"info.bo",
  	"medicina.bo",
  	"movimiento.bo",
  	"musica.bo",
  	"natural.bo",
  	"nombre.bo",
  	"noticias.bo",
  	"patria.bo",
  	"politica.bo",
  	"profesional.bo",
  	"plurinacional.bo",
  	"pueblo.bo",
  	"revista.bo",
  	"salud.bo",
  	"tecnologia.bo",
  	"tksat.bo",
  	"transporte.bo",
  	"wiki.bo",
  	"br",
  	"9guacu.br",
  	"abc.br",
  	"adm.br",
  	"adv.br",
  	"agr.br",
  	"aju.br",
  	"am.br",
  	"anani.br",
  	"aparecida.br",
  	"app.br",
  	"arq.br",
  	"art.br",
  	"ato.br",
  	"b.br",
  	"barueri.br",
  	"belem.br",
  	"bhz.br",
  	"bib.br",
  	"bio.br",
  	"blog.br",
  	"bmd.br",
  	"boavista.br",
  	"bsb.br",
  	"campinagrande.br",
  	"campinas.br",
  	"caxias.br",
  	"cim.br",
  	"cng.br",
  	"cnt.br",
  	"com.br",
  	"contagem.br",
  	"coop.br",
  	"coz.br",
  	"cri.br",
  	"cuiaba.br",
  	"curitiba.br",
  	"def.br",
  	"des.br",
  	"det.br",
  	"dev.br",
  	"ecn.br",
  	"eco.br",
  	"edu.br",
  	"emp.br",
  	"enf.br",
  	"eng.br",
  	"esp.br",
  	"etc.br",
  	"eti.br",
  	"far.br",
  	"feira.br",
  	"flog.br",
  	"floripa.br",
  	"fm.br",
  	"fnd.br",
  	"fortal.br",
  	"fot.br",
  	"foz.br",
  	"fst.br",
  	"g12.br",
  	"geo.br",
  	"ggf.br",
  	"goiania.br",
  	"gov.br",
  	"ac.gov.br",
  	"al.gov.br",
  	"am.gov.br",
  	"ap.gov.br",
  	"ba.gov.br",
  	"ce.gov.br",
  	"df.gov.br",
  	"es.gov.br",
  	"go.gov.br",
  	"ma.gov.br",
  	"mg.gov.br",
  	"ms.gov.br",
  	"mt.gov.br",
  	"pa.gov.br",
  	"pb.gov.br",
  	"pe.gov.br",
  	"pi.gov.br",
  	"pr.gov.br",
  	"rj.gov.br",
  	"rn.gov.br",
  	"ro.gov.br",
  	"rr.gov.br",
  	"rs.gov.br",
  	"sc.gov.br",
  	"se.gov.br",
  	"sp.gov.br",
  	"to.gov.br",
  	"gru.br",
  	"imb.br",
  	"ind.br",
  	"inf.br",
  	"jab.br",
  	"jampa.br",
  	"jdf.br",
  	"joinville.br",
  	"jor.br",
  	"jus.br",
  	"leg.br",
  	"lel.br",
  	"log.br",
  	"londrina.br",
  	"macapa.br",
  	"maceio.br",
  	"manaus.br",
  	"maringa.br",
  	"mat.br",
  	"med.br",
  	"mil.br",
  	"morena.br",
  	"mp.br",
  	"mus.br",
  	"natal.br",
  	"net.br",
  	"niteroi.br",
  	"*.nom.br",
  	"not.br",
  	"ntr.br",
  	"odo.br",
  	"ong.br",
  	"org.br",
  	"osasco.br",
  	"palmas.br",
  	"poa.br",
  	"ppg.br",
  	"pro.br",
  	"psc.br",
  	"psi.br",
  	"pvh.br",
  	"qsl.br",
  	"radio.br",
  	"rec.br",
  	"recife.br",
  	"rep.br",
  	"ribeirao.br",
  	"rio.br",
  	"riobranco.br",
  	"riopreto.br",
  	"salvador.br",
  	"sampa.br",
  	"santamaria.br",
  	"santoandre.br",
  	"saobernardo.br",
  	"saogonca.br",
  	"seg.br",
  	"sjc.br",
  	"slg.br",
  	"slz.br",
  	"sorocaba.br",
  	"srv.br",
  	"taxi.br",
  	"tc.br",
  	"tec.br",
  	"teo.br",
  	"the.br",
  	"tmp.br",
  	"trd.br",
  	"tur.br",
  	"tv.br",
  	"udi.br",
  	"vet.br",
  	"vix.br",
  	"vlog.br",
  	"wiki.br",
  	"zlg.br",
  	"bs",
  	"com.bs",
  	"net.bs",
  	"org.bs",
  	"edu.bs",
  	"gov.bs",
  	"bt",
  	"com.bt",
  	"edu.bt",
  	"gov.bt",
  	"net.bt",
  	"org.bt",
  	"bv",
  	"bw",
  	"co.bw",
  	"org.bw",
  	"by",
  	"gov.by",
  	"mil.by",
  	"com.by",
  	"of.by",
  	"bz",
  	"com.bz",
  	"net.bz",
  	"org.bz",
  	"edu.bz",
  	"gov.bz",
  	"ca",
  	"ab.ca",
  	"bc.ca",
  	"mb.ca",
  	"nb.ca",
  	"nf.ca",
  	"nl.ca",
  	"ns.ca",
  	"nt.ca",
  	"nu.ca",
  	"on.ca",
  	"pe.ca",
  	"qc.ca",
  	"sk.ca",
  	"yk.ca",
  	"gc.ca",
  	"cat",
  	"cc",
  	"cd",
  	"gov.cd",
  	"cf",
  	"cg",
  	"ch",
  	"ci",
  	"org.ci",
  	"or.ci",
  	"com.ci",
  	"co.ci",
  	"edu.ci",
  	"ed.ci",
  	"ac.ci",
  	"net.ci",
  	"go.ci",
  	"asso.ci",
  	"aéroport.ci",
  	"int.ci",
  	"presse.ci",
  	"md.ci",
  	"gouv.ci",
  	"*.ck",
  	"!www.ck",
  	"cl",
  	"co.cl",
  	"gob.cl",
  	"gov.cl",
  	"mil.cl",
  	"cm",
  	"co.cm",
  	"com.cm",
  	"gov.cm",
  	"net.cm",
  	"cn",
  	"ac.cn",
  	"com.cn",
  	"edu.cn",
  	"gov.cn",
  	"net.cn",
  	"org.cn",
  	"mil.cn",
  	"公司.cn",
  	"网络.cn",
  	"網絡.cn",
  	"ah.cn",
  	"bj.cn",
  	"cq.cn",
  	"fj.cn",
  	"gd.cn",
  	"gs.cn",
  	"gz.cn",
  	"gx.cn",
  	"ha.cn",
  	"hb.cn",
  	"he.cn",
  	"hi.cn",
  	"hl.cn",
  	"hn.cn",
  	"jl.cn",
  	"js.cn",
  	"jx.cn",
  	"ln.cn",
  	"nm.cn",
  	"nx.cn",
  	"qh.cn",
  	"sc.cn",
  	"sd.cn",
  	"sh.cn",
  	"sn.cn",
  	"sx.cn",
  	"tj.cn",
  	"xj.cn",
  	"xz.cn",
  	"yn.cn",
  	"zj.cn",
  	"hk.cn",
  	"mo.cn",
  	"tw.cn",
  	"co",
  	"arts.co",
  	"com.co",
  	"edu.co",
  	"firm.co",
  	"gov.co",
  	"info.co",
  	"int.co",
  	"mil.co",
  	"net.co",
  	"nom.co",
  	"org.co",
  	"rec.co",
  	"web.co",
  	"com",
  	"coop",
  	"cr",
  	"ac.cr",
  	"co.cr",
  	"ed.cr",
  	"fi.cr",
  	"go.cr",
  	"or.cr",
  	"sa.cr",
  	"cu",
  	"com.cu",
  	"edu.cu",
  	"org.cu",
  	"net.cu",
  	"gov.cu",
  	"inf.cu",
  	"cv",
  	"com.cv",
  	"edu.cv",
  	"int.cv",
  	"nome.cv",
  	"org.cv",
  	"cw",
  	"com.cw",
  	"edu.cw",
  	"net.cw",
  	"org.cw",
  	"cx",
  	"gov.cx",
  	"cy",
  	"ac.cy",
  	"biz.cy",
  	"com.cy",
  	"ekloges.cy",
  	"gov.cy",
  	"ltd.cy",
  	"mil.cy",
  	"net.cy",
  	"org.cy",
  	"press.cy",
  	"pro.cy",
  	"tm.cy",
  	"cz",
  	"de",
  	"dj",
  	"dk",
  	"dm",
  	"com.dm",
  	"net.dm",
  	"org.dm",
  	"edu.dm",
  	"gov.dm",
  	"do",
  	"art.do",
  	"com.do",
  	"edu.do",
  	"gob.do",
  	"gov.do",
  	"mil.do",
  	"net.do",
  	"org.do",
  	"sld.do",
  	"web.do",
  	"dz",
  	"art.dz",
  	"asso.dz",
  	"com.dz",
  	"edu.dz",
  	"gov.dz",
  	"org.dz",
  	"net.dz",
  	"pol.dz",
  	"soc.dz",
  	"tm.dz",
  	"ec",
  	"com.ec",
  	"info.ec",
  	"net.ec",
  	"fin.ec",
  	"k12.ec",
  	"med.ec",
  	"pro.ec",
  	"org.ec",
  	"edu.ec",
  	"gov.ec",
  	"gob.ec",
  	"mil.ec",
  	"edu",
  	"ee",
  	"edu.ee",
  	"gov.ee",
  	"riik.ee",
  	"lib.ee",
  	"med.ee",
  	"com.ee",
  	"pri.ee",
  	"aip.ee",
  	"org.ee",
  	"fie.ee",
  	"eg",
  	"com.eg",
  	"edu.eg",
  	"eun.eg",
  	"gov.eg",
  	"mil.eg",
  	"name.eg",
  	"net.eg",
  	"org.eg",
  	"sci.eg",
  	"*.er",
  	"es",
  	"com.es",
  	"nom.es",
  	"org.es",
  	"gob.es",
  	"edu.es",
  	"et",
  	"com.et",
  	"gov.et",
  	"org.et",
  	"edu.et",
  	"biz.et",
  	"name.et",
  	"info.et",
  	"net.et",
  	"eu",
  	"fi",
  	"aland.fi",
  	"fj",
  	"ac.fj",
  	"biz.fj",
  	"com.fj",
  	"gov.fj",
  	"info.fj",
  	"mil.fj",
  	"name.fj",
  	"net.fj",
  	"org.fj",
  	"pro.fj",
  	"*.fk",
  	"com.fm",
  	"edu.fm",
  	"net.fm",
  	"org.fm",
  	"fm",
  	"fo",
  	"fr",
  	"asso.fr",
  	"com.fr",
  	"gouv.fr",
  	"nom.fr",
  	"prd.fr",
  	"tm.fr",
  	"aeroport.fr",
  	"avocat.fr",
  	"avoues.fr",
  	"cci.fr",
  	"chambagri.fr",
  	"chirurgiens-dentistes.fr",
  	"experts-comptables.fr",
  	"geometre-expert.fr",
  	"greta.fr",
  	"huissier-justice.fr",
  	"medecin.fr",
  	"notaires.fr",
  	"pharmacien.fr",
  	"port.fr",
  	"veterinaire.fr",
  	"ga",
  	"gb",
  	"edu.gd",
  	"gov.gd",
  	"gd",
  	"ge",
  	"com.ge",
  	"edu.ge",
  	"gov.ge",
  	"org.ge",
  	"mil.ge",
  	"net.ge",
  	"pvt.ge",
  	"gf",
  	"gg",
  	"co.gg",
  	"net.gg",
  	"org.gg",
  	"gh",
  	"com.gh",
  	"edu.gh",
  	"gov.gh",
  	"org.gh",
  	"mil.gh",
  	"gi",
  	"com.gi",
  	"ltd.gi",
  	"gov.gi",
  	"mod.gi",
  	"edu.gi",
  	"org.gi",
  	"gl",
  	"co.gl",
  	"com.gl",
  	"edu.gl",
  	"net.gl",
  	"org.gl",
  	"gm",
  	"gn",
  	"ac.gn",
  	"com.gn",
  	"edu.gn",
  	"gov.gn",
  	"org.gn",
  	"net.gn",
  	"gov",
  	"gp",
  	"com.gp",
  	"net.gp",
  	"mobi.gp",
  	"edu.gp",
  	"org.gp",
  	"asso.gp",
  	"gq",
  	"gr",
  	"com.gr",
  	"edu.gr",
  	"net.gr",
  	"org.gr",
  	"gov.gr",
  	"gs",
  	"gt",
  	"com.gt",
  	"edu.gt",
  	"gob.gt",
  	"ind.gt",
  	"mil.gt",
  	"net.gt",
  	"org.gt",
  	"gu",
  	"com.gu",
  	"edu.gu",
  	"gov.gu",
  	"guam.gu",
  	"info.gu",
  	"net.gu",
  	"org.gu",
  	"web.gu",
  	"gw",
  	"gy",
  	"co.gy",
  	"com.gy",
  	"edu.gy",
  	"gov.gy",
  	"net.gy",
  	"org.gy",
  	"hk",
  	"com.hk",
  	"edu.hk",
  	"gov.hk",
  	"idv.hk",
  	"net.hk",
  	"org.hk",
  	"公司.hk",
  	"教育.hk",
  	"敎育.hk",
  	"政府.hk",
  	"個人.hk",
  	"个��.hk",
  	"箇人.hk",
  	"網络.hk",
  	"网络.hk",
  	"组織.hk",
  	"網絡.hk",
  	"网絡.hk",
  	"组织.hk",
  	"組織.hk",
  	"組织.hk",
  	"hm",
  	"hn",
  	"com.hn",
  	"edu.hn",
  	"org.hn",
  	"net.hn",
  	"mil.hn",
  	"gob.hn",
  	"hr",
  	"iz.hr",
  	"from.hr",
  	"name.hr",
  	"com.hr",
  	"ht",
  	"com.ht",
  	"shop.ht",
  	"firm.ht",
  	"info.ht",
  	"adult.ht",
  	"net.ht",
  	"pro.ht",
  	"org.ht",
  	"med.ht",
  	"art.ht",
  	"coop.ht",
  	"pol.ht",
  	"asso.ht",
  	"edu.ht",
  	"rel.ht",
  	"gouv.ht",
  	"perso.ht",
  	"hu",
  	"co.hu",
  	"info.hu",
  	"org.hu",
  	"priv.hu",
  	"sport.hu",
  	"tm.hu",
  	"2000.hu",
  	"agrar.hu",
  	"bolt.hu",
  	"casino.hu",
  	"city.hu",
  	"erotica.hu",
  	"erotika.hu",
  	"film.hu",
  	"forum.hu",
  	"games.hu",
  	"hotel.hu",
  	"ingatlan.hu",
  	"jogasz.hu",
  	"konyvelo.hu",
  	"lakas.hu",
  	"media.hu",
  	"news.hu",
  	"reklam.hu",
  	"sex.hu",
  	"shop.hu",
  	"suli.hu",
  	"szex.hu",
  	"tozsde.hu",
  	"utazas.hu",
  	"video.hu",
  	"id",
  	"ac.id",
  	"biz.id",
  	"co.id",
  	"desa.id",
  	"go.id",
  	"mil.id",
  	"my.id",
  	"net.id",
  	"or.id",
  	"ponpes.id",
  	"sch.id",
  	"web.id",
  	"ie",
  	"gov.ie",
  	"il",
  	"ac.il",
  	"co.il",
  	"gov.il",
  	"idf.il",
  	"k12.il",
  	"muni.il",
  	"net.il",
  	"org.il",
  	"im",
  	"ac.im",
  	"co.im",
  	"com.im",
  	"ltd.co.im",
  	"net.im",
  	"org.im",
  	"plc.co.im",
  	"tt.im",
  	"tv.im",
  	"in",
  	"co.in",
  	"firm.in",
  	"net.in",
  	"org.in",
  	"gen.in",
  	"ind.in",
  	"nic.in",
  	"ac.in",
  	"edu.in",
  	"res.in",
  	"gov.in",
  	"mil.in",
  	"info",
  	"int",
  	"eu.int",
  	"io",
  	"com.io",
  	"iq",
  	"gov.iq",
  	"edu.iq",
  	"mil.iq",
  	"com.iq",
  	"org.iq",
  	"net.iq",
  	"ir",
  	"ac.ir",
  	"co.ir",
  	"gov.ir",
  	"id.ir",
  	"net.ir",
  	"org.ir",
  	"sch.ir",
  	"ایران.ir",
  	"ايران.ir",
  	"is",
  	"net.is",
  	"com.is",
  	"edu.is",
  	"gov.is",
  	"org.is",
  	"int.is",
  	"it",
  	"gov.it",
  	"edu.it",
  	"abr.it",
  	"abruzzo.it",
  	"aosta-valley.it",
  	"aostavalley.it",
  	"bas.it",
  	"basilicata.it",
  	"cal.it",
  	"calabria.it",
  	"cam.it",
  	"campania.it",
  	"emilia-romagna.it",
  	"emiliaromagna.it",
  	"emr.it",
  	"friuli-v-giulia.it",
  	"friuli-ve-giulia.it",
  	"friuli-vegiulia.it",
  	"friuli-venezia-giulia.it",
  	"friuli-veneziagiulia.it",
  	"friuli-vgiulia.it",
  	"friuliv-giulia.it",
  	"friulive-giulia.it",
  	"friulivegiulia.it",
  	"friulivenezia-giulia.it",
  	"friuliveneziagiulia.it",
  	"friulivgiulia.it",
  	"fvg.it",
  	"laz.it",
  	"lazio.it",
  	"lig.it",
  	"liguria.it",
  	"lom.it",
  	"lombardia.it",
  	"lombardy.it",
  	"lucania.it",
  	"mar.it",
  	"marche.it",
  	"mol.it",
  	"molise.it",
  	"piedmont.it",
  	"piemonte.it",
  	"pmn.it",
  	"pug.it",
  	"puglia.it",
  	"sar.it",
  	"sardegna.it",
  	"sardinia.it",
  	"sic.it",
  	"sicilia.it",
  	"sicily.it",
  	"taa.it",
  	"tos.it",
  	"toscana.it",
  	"trentin-sud-tirol.it",
  	"trentin-süd-tirol.it",
  	"trentin-sudtirol.it",
  	"trentin-südtirol.it",
  	"trentin-sued-tirol.it",
  	"trentin-suedtirol.it",
  	"trentino-a-adige.it",
  	"trentino-aadige.it",
  	"trentino-alto-adige.it",
  	"trentino-altoadige.it",
  	"trentino-s-tirol.it",
  	"trentino-stirol.it",
  	"trentino-sud-tirol.it",
  	"trentino-süd-tirol.it",
  	"trentino-sudtirol.it",
  	"trentino-südtirol.it",
  	"trentino-sued-tirol.it",
  	"trentino-suedtirol.it",
  	"trentino.it",
  	"trentinoa-adige.it",
  	"trentinoaadige.it",
  	"trentinoalto-adige.it",
  	"trentinoaltoadige.it",
  	"trentinos-tirol.it",
  	"trentinostirol.it",
  	"trentinosud-tirol.it",
  	"trentinosüd-tirol.it",
  	"trentinosudtirol.it",
  	"trentinosüdtirol.it",
  	"trentinosued-tirol.it",
  	"trentinosuedtirol.it",
  	"trentinsud-tirol.it",
  	"trentinsüd-tirol.it",
  	"trentinsudtirol.it",
  	"trentinsüdtirol.it",
  	"trentinsued-tirol.it",
  	"trentinsuedtirol.it",
  	"tuscany.it",
  	"umb.it",
  	"umbria.it",
  	"val-d-aosta.it",
  	"val-daosta.it",
  	"vald-aosta.it",
  	"valdaosta.it",
  	"valle-aosta.it",
  	"valle-d-aosta.it",
  	"valle-daosta.it",
  	"valleaosta.it",
  	"valled-aosta.it",
  	"valledaosta.it",
  	"vallee-aoste.it",
  	"vallée-aoste.it",
  	"vallee-d-aoste.it",
  	"vallée-d-aoste.it",
  	"valleeaoste.it",
  	"valléeaoste.it",
  	"valleedaoste.it",
  	"valléedaoste.it",
  	"vao.it",
  	"vda.it",
  	"ven.it",
  	"veneto.it",
  	"ag.it",
  	"agrigento.it",
  	"al.it",
  	"alessandria.it",
  	"alto-adige.it",
  	"altoadige.it",
  	"an.it",
  	"ancona.it",
  	"andria-barletta-trani.it",
  	"andria-trani-barletta.it",
  	"andriabarlettatrani.it",
  	"andriatranibarletta.it",
  	"ao.it",
  	"aosta.it",
  	"aoste.it",
  	"ap.it",
  	"aq.it",
  	"aquila.it",
  	"ar.it",
  	"arezzo.it",
  	"ascoli-piceno.it",
  	"ascolipiceno.it",
  	"asti.it",
  	"at.it",
  	"av.it",
  	"avellino.it",
  	"ba.it",
  	"balsan-sudtirol.it",
  	"balsan-südtirol.it",
  	"balsan-suedtirol.it",
  	"balsan.it",
  	"bari.it",
  	"barletta-trani-andria.it",
  	"barlettatraniandria.it",
  	"belluno.it",
  	"benevento.it",
  	"bergamo.it",
  	"bg.it",
  	"bi.it",
  	"biella.it",
  	"bl.it",
  	"bn.it",
  	"bo.it",
  	"bologna.it",
  	"bolzano-altoadige.it",
  	"bolzano.it",
  	"bozen-sudtirol.it",
  	"bozen-südtirol.it",
  	"bozen-suedtirol.it",
  	"bozen.it",
  	"br.it",
  	"brescia.it",
  	"brindisi.it",
  	"bs.it",
  	"bt.it",
  	"bulsan-sudtirol.it",
  	"bulsan-südtirol.it",
  	"bulsan-suedtirol.it",
  	"bulsan.it",
  	"bz.it",
  	"ca.it",
  	"cagliari.it",
  	"caltanissetta.it",
  	"campidano-medio.it",
  	"campidanomedio.it",
  	"campobasso.it",
  	"carbonia-iglesias.it",
  	"carboniaiglesias.it",
  	"carrara-massa.it",
  	"carraramassa.it",
  	"caserta.it",
  	"catania.it",
  	"catanzaro.it",
  	"cb.it",
  	"ce.it",
  	"cesena-forli.it",
  	"cesena-forlì.it",
  	"cesenaforli.it",
  	"cesenaforlì.it",
  	"ch.it",
  	"chieti.it",
  	"ci.it",
  	"cl.it",
  	"cn.it",
  	"co.it",
  	"como.it",
  	"cosenza.it",
  	"cr.it",
  	"cremona.it",
  	"crotone.it",
  	"cs.it",
  	"ct.it",
  	"cuneo.it",
  	"cz.it",
  	"dell-ogliastra.it",
  	"dellogliastra.it",
  	"en.it",
  	"enna.it",
  	"fc.it",
  	"fe.it",
  	"fermo.it",
  	"ferrara.it",
  	"fg.it",
  	"fi.it",
  	"firenze.it",
  	"florence.it",
  	"fm.it",
  	"foggia.it",
  	"forli-cesena.it",
  	"forlì-cesena.it",
  	"forlicesena.it",
  	"forlìcesena.it",
  	"fr.it",
  	"frosinone.it",
  	"ge.it",
  	"genoa.it",
  	"genova.it",
  	"go.it",
  	"gorizia.it",
  	"gr.it",
  	"grosseto.it",
  	"iglesias-carbonia.it",
  	"iglesiascarbonia.it",
  	"im.it",
  	"imperia.it",
  	"is.it",
  	"isernia.it",
  	"kr.it",
  	"la-spezia.it",
  	"laquila.it",
  	"laspezia.it",
  	"latina.it",
  	"lc.it",
  	"le.it",
  	"lecce.it",
  	"lecco.it",
  	"li.it",
  	"livorno.it",
  	"lo.it",
  	"lodi.it",
  	"lt.it",
  	"lu.it",
  	"lucca.it",
  	"macerata.it",
  	"mantova.it",
  	"massa-carrara.it",
  	"massacarrara.it",
  	"matera.it",
  	"mb.it",
  	"mc.it",
  	"me.it",
  	"medio-campidano.it",
  	"mediocampidano.it",
  	"messina.it",
  	"mi.it",
  	"milan.it",
  	"milano.it",
  	"mn.it",
  	"mo.it",
  	"modena.it",
  	"monza-brianza.it",
  	"monza-e-della-brianza.it",
  	"monza.it",
  	"monzabrianza.it",
  	"monzaebrianza.it",
  	"monzaedellabrianza.it",
  	"ms.it",
  	"mt.it",
  	"na.it",
  	"naples.it",
  	"napoli.it",
  	"no.it",
  	"novara.it",
  	"nu.it",
  	"nuoro.it",
  	"og.it",
  	"ogliastra.it",
  	"olbia-tempio.it",
  	"olbiatempio.it",
  	"or.it",
  	"oristano.it",
  	"ot.it",
  	"pa.it",
  	"padova.it",
  	"padua.it",
  	"palermo.it",
  	"parma.it",
  	"pavia.it",
  	"pc.it",
  	"pd.it",
  	"pe.it",
  	"perugia.it",
  	"pesaro-urbino.it",
  	"pesarourbino.it",
  	"pescara.it",
  	"pg.it",
  	"pi.it",
  	"piacenza.it",
  	"pisa.it",
  	"pistoia.it",
  	"pn.it",
  	"po.it",
  	"pordenone.it",
  	"potenza.it",
  	"pr.it",
  	"prato.it",
  	"pt.it",
  	"pu.it",
  	"pv.it",
  	"pz.it",
  	"ra.it",
  	"ragusa.it",
  	"ravenna.it",
  	"rc.it",
  	"re.it",
  	"reggio-calabria.it",
  	"reggio-emilia.it",
  	"reggiocalabria.it",
  	"reggioemilia.it",
  	"rg.it",
  	"ri.it",
  	"rieti.it",
  	"rimini.it",
  	"rm.it",
  	"rn.it",
  	"ro.it",
  	"roma.it",
  	"rome.it",
  	"rovigo.it",
  	"sa.it",
  	"salerno.it",
  	"sassari.it",
  	"savona.it",
  	"si.it",
  	"siena.it",
  	"siracusa.it",
  	"so.it",
  	"sondrio.it",
  	"sp.it",
  	"sr.it",
  	"ss.it",
  	"suedtirol.it",
  	"südtirol.it",
  	"sv.it",
  	"ta.it",
  	"taranto.it",
  	"te.it",
  	"tempio-olbia.it",
  	"tempioolbia.it",
  	"teramo.it",
  	"terni.it",
  	"tn.it",
  	"to.it",
  	"torino.it",
  	"tp.it",
  	"tr.it",
  	"trani-andria-barletta.it",
  	"trani-barletta-andria.it",
  	"traniandriabarletta.it",
  	"tranibarlettaandria.it",
  	"trapani.it",
  	"trento.it",
  	"treviso.it",
  	"trieste.it",
  	"ts.it",
  	"turin.it",
  	"tv.it",
  	"ud.it",
  	"udine.it",
  	"urbino-pesaro.it",
  	"urbinopesaro.it",
  	"va.it",
  	"varese.it",
  	"vb.it",
  	"vc.it",
  	"ve.it",
  	"venezia.it",
  	"venice.it",
  	"verbania.it",
  	"vercelli.it",
  	"verona.it",
  	"vi.it",
  	"vibo-valentia.it",
  	"vibovalentia.it",
  	"vicenza.it",
  	"viterbo.it",
  	"vr.it",
  	"vs.it",
  	"vt.it",
  	"vv.it",
  	"je",
  	"co.je",
  	"net.je",
  	"org.je",
  	"*.jm",
  	"jo",
  	"com.jo",
  	"org.jo",
  	"net.jo",
  	"edu.jo",
  	"sch.jo",
  	"gov.jo",
  	"mil.jo",
  	"name.jo",
  	"jobs",
  	"jp",
  	"ac.jp",
  	"ad.jp",
  	"co.jp",
  	"ed.jp",
  	"go.jp",
  	"gr.jp",
  	"lg.jp",
  	"ne.jp",
  	"or.jp",
  	"aichi.jp",
  	"akita.jp",
  	"aomori.jp",
  	"chiba.jp",
  	"ehime.jp",
  	"fukui.jp",
  	"fukuoka.jp",
  	"fukushima.jp",
  	"gifu.jp",
  	"gunma.jp",
  	"hiroshima.jp",
  	"hokkaido.jp",
  	"hyogo.jp",
  	"ibaraki.jp",
  	"ishikawa.jp",
  	"iwate.jp",
  	"kagawa.jp",
  	"kagoshima.jp",
  	"kanagawa.jp",
  	"kochi.jp",
  	"kumamoto.jp",
  	"kyoto.jp",
  	"mie.jp",
  	"miyagi.jp",
  	"miyazaki.jp",
  	"nagano.jp",
  	"nagasaki.jp",
  	"nara.jp",
  	"niigata.jp",
  	"oita.jp",
  	"okayama.jp",
  	"okinawa.jp",
  	"osaka.jp",
  	"saga.jp",
  	"saitama.jp",
  	"shiga.jp",
  	"shimane.jp",
  	"shizuoka.jp",
  	"tochigi.jp",
  	"tokushima.jp",
  	"tokyo.jp",
  	"tottori.jp",
  	"toyama.jp",
  	"wakayama.jp",
  	"yamagata.jp",
  	"yamaguchi.jp",
  	"yamanashi.jp",
  	"栃木.jp",
  	"愛知.jp",
  	"愛媛.jp",
  	"兵庫.jp",
  	"熊本.jp",
  	"茨城.jp",
  	"北海道.jp",
  	"千葉.jp",
  	"和歌山.jp",
  	"長崎.jp",
  	"長野.jp",
  	"新潟.jp",
  	"青森.jp",
  	"静岡.jp",
  	"東京.jp",
  	"石川.jp",
  	"埼玉.jp",
  	"三重.jp",
  	"京都.jp",
  	"佐賀.jp",
  	"大分.jp",
  	"大阪.jp",
  	"奈良.jp",
  	"宮城.jp",
  	"宮崎.jp",
  	"富山.jp",
  	"山口.jp",
  	"山形.jp",
  	"山梨.jp",
  	"岩手.jp",
  	"岐阜.jp",
  	"岡山.jp",
  	"島根.jp",
  	"広島.jp",
  	"徳島.jp",
  	"沖縄.jp",
  	"滋賀.jp",
  	"神奈川.jp",
  	"福井.jp",
  	"福岡.jp",
  	"福島.jp",
  	"秋田.jp",
  	"群馬.jp",
  	"香川.jp",
  	"高知.jp",
  	"鳥取.jp",
  	"鹿児島.jp",
  	"*.kawasaki.jp",
  	"*.kitakyushu.jp",
  	"*.kobe.jp",
  	"*.nagoya.jp",
  	"*.sapporo.jp",
  	"*.sendai.jp",
  	"*.yokohama.jp",
  	"!city.kawasaki.jp",
  	"!city.kitakyushu.jp",
  	"!city.kobe.jp",
  	"!city.nagoya.jp",
  	"!city.sapporo.jp",
  	"!city.sendai.jp",
  	"!city.yokohama.jp",
  	"aisai.aichi.jp",
  	"ama.aichi.jp",
  	"anjo.aichi.jp",
  	"asuke.aichi.jp",
  	"chiryu.aichi.jp",
  	"chita.aichi.jp",
  	"fuso.aichi.jp",
  	"gamagori.aichi.jp",
  	"handa.aichi.jp",
  	"hazu.aichi.jp",
  	"hekinan.aichi.jp",
  	"higashiura.aichi.jp",
  	"ichinomiya.aichi.jp",
  	"inazawa.aichi.jp",
  	"inuyama.aichi.jp",
  	"isshiki.aichi.jp",
  	"iwakura.aichi.jp",
  	"kanie.aichi.jp",
  	"kariya.aichi.jp",
  	"kasugai.aichi.jp",
  	"kira.aichi.jp",
  	"kiyosu.aichi.jp",
  	"komaki.aichi.jp",
  	"konan.aichi.jp",
  	"kota.aichi.jp",
  	"mihama.aichi.jp",
  	"miyoshi.aichi.jp",
  	"nishio.aichi.jp",
  	"nisshin.aichi.jp",
  	"obu.aichi.jp",
  	"oguchi.aichi.jp",
  	"oharu.aichi.jp",
  	"okazaki.aichi.jp",
  	"owariasahi.aichi.jp",
  	"seto.aichi.jp",
  	"shikatsu.aichi.jp",
  	"shinshiro.aichi.jp",
  	"shitara.aichi.jp",
  	"tahara.aichi.jp",
  	"takahama.aichi.jp",
  	"tobishima.aichi.jp",
  	"toei.aichi.jp",
  	"togo.aichi.jp",
  	"tokai.aichi.jp",
  	"tokoname.aichi.jp",
  	"toyoake.aichi.jp",
  	"toyohashi.aichi.jp",
  	"toyokawa.aichi.jp",
  	"toyone.aichi.jp",
  	"toyota.aichi.jp",
  	"tsushima.aichi.jp",
  	"yatomi.aichi.jp",
  	"akita.akita.jp",
  	"daisen.akita.jp",
  	"fujisato.akita.jp",
  	"gojome.akita.jp",
  	"hachirogata.akita.jp",
  	"happou.akita.jp",
  	"higashinaruse.akita.jp",
  	"honjo.akita.jp",
  	"honjyo.akita.jp",
  	"ikawa.akita.jp",
  	"kamikoani.akita.jp",
  	"kamioka.akita.jp",
  	"katagami.akita.jp",
  	"kazuno.akita.jp",
  	"kitaakita.akita.jp",
  	"kosaka.akita.jp",
  	"kyowa.akita.jp",
  	"misato.akita.jp",
  	"mitane.akita.jp",
  	"moriyoshi.akita.jp",
  	"nikaho.akita.jp",
  	"noshiro.akita.jp",
  	"odate.akita.jp",
  	"oga.akita.jp",
  	"ogata.akita.jp",
  	"semboku.akita.jp",
  	"yokote.akita.jp",
  	"yurihonjo.akita.jp",
  	"aomori.aomori.jp",
  	"gonohe.aomori.jp",
  	"hachinohe.aomori.jp",
  	"hashikami.aomori.jp",
  	"hiranai.aomori.jp",
  	"hirosaki.aomori.jp",
  	"itayanagi.aomori.jp",
  	"kuroishi.aomori.jp",
  	"misawa.aomori.jp",
  	"mutsu.aomori.jp",
  	"nakadomari.aomori.jp",
  	"noheji.aomori.jp",
  	"oirase.aomori.jp",
  	"owani.aomori.jp",
  	"rokunohe.aomori.jp",
  	"sannohe.aomori.jp",
  	"shichinohe.aomori.jp",
  	"shingo.aomori.jp",
  	"takko.aomori.jp",
  	"towada.aomori.jp",
  	"tsugaru.aomori.jp",
  	"tsuruta.aomori.jp",
  	"abiko.chiba.jp",
  	"asahi.chiba.jp",
  	"chonan.chiba.jp",
  	"chosei.chiba.jp",
  	"choshi.chiba.jp",
  	"chuo.chiba.jp",
  	"funabashi.chiba.jp",
  	"futtsu.chiba.jp",
  	"hanamigawa.chiba.jp",
  	"ichihara.chiba.jp",
  	"ichikawa.chiba.jp",
  	"ichinomiya.chiba.jp",
  	"inzai.chiba.jp",
  	"isumi.chiba.jp",
  	"kamagaya.chiba.jp",
  	"kamogawa.chiba.jp",
  	"kashiwa.chiba.jp",
  	"katori.chiba.jp",
  	"katsuura.chiba.jp",
  	"kimitsu.chiba.jp",
  	"kisarazu.chiba.jp",
  	"kozaki.chiba.jp",
  	"kujukuri.chiba.jp",
  	"kyonan.chiba.jp",
  	"matsudo.chiba.jp",
  	"midori.chiba.jp",
  	"mihama.chiba.jp",
  	"minamiboso.chiba.jp",
  	"mobara.chiba.jp",
  	"mutsuzawa.chiba.jp",
  	"nagara.chiba.jp",
  	"nagareyama.chiba.jp",
  	"narashino.chiba.jp",
  	"narita.chiba.jp",
  	"noda.chiba.jp",
  	"oamishirasato.chiba.jp",
  	"omigawa.chiba.jp",
  	"onjuku.chiba.jp",
  	"otaki.chiba.jp",
  	"sakae.chiba.jp",
  	"sakura.chiba.jp",
  	"shimofusa.chiba.jp",
  	"shirako.chiba.jp",
  	"shiroi.chiba.jp",
  	"shisui.chiba.jp",
  	"sodegaura.chiba.jp",
  	"sosa.chiba.jp",
  	"tako.chiba.jp",
  	"tateyama.chiba.jp",
  	"togane.chiba.jp",
  	"tohnosho.chiba.jp",
  	"tomisato.chiba.jp",
  	"urayasu.chiba.jp",
  	"yachimata.chiba.jp",
  	"yachiyo.chiba.jp",
  	"yokaichiba.chiba.jp",
  	"yokoshibahikari.chiba.jp",
  	"yotsukaido.chiba.jp",
  	"ainan.ehime.jp",
  	"honai.ehime.jp",
  	"ikata.ehime.jp",
  	"imabari.ehime.jp",
  	"iyo.ehime.jp",
  	"kamijima.ehime.jp",
  	"kihoku.ehime.jp",
  	"kumakogen.ehime.jp",
  	"masaki.ehime.jp",
  	"matsuno.ehime.jp",
  	"matsuyama.ehime.jp",
  	"namikata.ehime.jp",
  	"niihama.ehime.jp",
  	"ozu.ehime.jp",
  	"saijo.ehime.jp",
  	"seiyo.ehime.jp",
  	"shikokuchuo.ehime.jp",
  	"tobe.ehime.jp",
  	"toon.ehime.jp",
  	"uchiko.ehime.jp",
  	"uwajima.ehime.jp",
  	"yawatahama.ehime.jp",
  	"echizen.fukui.jp",
  	"eiheiji.fukui.jp",
  	"fukui.fukui.jp",
  	"ikeda.fukui.jp",
  	"katsuyama.fukui.jp",
  	"mihama.fukui.jp",
  	"minamiechizen.fukui.jp",
  	"obama.fukui.jp",
  	"ohi.fukui.jp",
  	"ono.fukui.jp",
  	"sabae.fukui.jp",
  	"sakai.fukui.jp",
  	"takahama.fukui.jp",
  	"tsuruga.fukui.jp",
  	"wakasa.fukui.jp",
  	"ashiya.fukuoka.jp",
  	"buzen.fukuoka.jp",
  	"chikugo.fukuoka.jp",
  	"chikuho.fukuoka.jp",
  	"chikujo.fukuoka.jp",
  	"chikushino.fukuoka.jp",
  	"chikuzen.fukuoka.jp",
  	"chuo.fukuoka.jp",
  	"dazaifu.fukuoka.jp",
  	"fukuchi.fukuoka.jp",
  	"hakata.fukuoka.jp",
  	"higashi.fukuoka.jp",
  	"hirokawa.fukuoka.jp",
  	"hisayama.fukuoka.jp",
  	"iizuka.fukuoka.jp",
  	"inatsuki.fukuoka.jp",
  	"kaho.fukuoka.jp",
  	"kasuga.fukuoka.jp",
  	"kasuya.fukuoka.jp",
  	"kawara.fukuoka.jp",
  	"keisen.fukuoka.jp",
  	"koga.fukuoka.jp",
  	"kurate.fukuoka.jp",
  	"kurogi.fukuoka.jp",
  	"kurume.fukuoka.jp",
  	"minami.fukuoka.jp",
  	"miyako.fukuoka.jp",
  	"miyama.fukuoka.jp",
  	"miyawaka.fukuoka.jp",
  	"mizumaki.fukuoka.jp",
  	"munakata.fukuoka.jp",
  	"nakagawa.fukuoka.jp",
  	"nakama.fukuoka.jp",
  	"nishi.fukuoka.jp",
  	"nogata.fukuoka.jp",
  	"ogori.fukuoka.jp",
  	"okagaki.fukuoka.jp",
  	"okawa.fukuoka.jp",
  	"oki.fukuoka.jp",
  	"omuta.fukuoka.jp",
  	"onga.fukuoka.jp",
  	"onojo.fukuoka.jp",
  	"oto.fukuoka.jp",
  	"saigawa.fukuoka.jp",
  	"sasaguri.fukuoka.jp",
  	"shingu.fukuoka.jp",
  	"shinyoshitomi.fukuoka.jp",
  	"shonai.fukuoka.jp",
  	"soeda.fukuoka.jp",
  	"sue.fukuoka.jp",
  	"tachiarai.fukuoka.jp",
  	"tagawa.fukuoka.jp",
  	"takata.fukuoka.jp",
  	"toho.fukuoka.jp",
  	"toyotsu.fukuoka.jp",
  	"tsuiki.fukuoka.jp",
  	"ukiha.fukuoka.jp",
  	"umi.fukuoka.jp",
  	"usui.fukuoka.jp",
  	"yamada.fukuoka.jp",
  	"yame.fukuoka.jp",
  	"yanagawa.fukuoka.jp",
  	"yukuhashi.fukuoka.jp",
  	"aizubange.fukushima.jp",
  	"aizumisato.fukushima.jp",
  	"aizuwakamatsu.fukushima.jp",
  	"asakawa.fukushima.jp",
  	"bandai.fukushima.jp",
  	"date.fukushima.jp",
  	"fukushima.fukushima.jp",
  	"furudono.fukushima.jp",
  	"futaba.fukushima.jp",
  	"hanawa.fukushima.jp",
  	"higashi.fukushima.jp",
  	"hirata.fukushima.jp",
  	"hirono.fukushima.jp",
  	"iitate.fukushima.jp",
  	"inawashiro.fukushima.jp",
  	"ishikawa.fukushima.jp",
  	"iwaki.fukushima.jp",
  	"izumizaki.fukushima.jp",
  	"kagamiishi.fukushima.jp",
  	"kaneyama.fukushima.jp",
  	"kawamata.fukushima.jp",
  	"kitakata.fukushima.jp",
  	"kitashiobara.fukushima.jp",
  	"koori.fukushima.jp",
  	"koriyama.fukushima.jp",
  	"kunimi.fukushima.jp",
  	"miharu.fukushima.jp",
  	"mishima.fukushima.jp",
  	"namie.fukushima.jp",
  	"nango.fukushima.jp",
  	"nishiaizu.fukushima.jp",
  	"nishigo.fukushima.jp",
  	"okuma.fukushima.jp",
  	"omotego.fukushima.jp",
  	"ono.fukushima.jp",
  	"otama.fukushima.jp",
  	"samegawa.fukushima.jp",
  	"shimogo.fukushima.jp",
  	"shirakawa.fukushima.jp",
  	"showa.fukushima.jp",
  	"soma.fukushima.jp",
  	"sukagawa.fukushima.jp",
  	"taishin.fukushima.jp",
  	"tamakawa.fukushima.jp",
  	"tanagura.fukushima.jp",
  	"tenei.fukushima.jp",
  	"yabuki.fukushima.jp",
  	"yamato.fukushima.jp",
  	"yamatsuri.fukushima.jp",
  	"yanaizu.fukushima.jp",
  	"yugawa.fukushima.jp",
  	"anpachi.gifu.jp",
  	"ena.gifu.jp",
  	"gifu.gifu.jp",
  	"ginan.gifu.jp",
  	"godo.gifu.jp",
  	"gujo.gifu.jp",
  	"hashima.gifu.jp",
  	"hichiso.gifu.jp",
  	"hida.gifu.jp",
  	"higashishirakawa.gifu.jp",
  	"ibigawa.gifu.jp",
  	"ikeda.gifu.jp",
  	"kakamigahara.gifu.jp",
  	"kani.gifu.jp",
  	"kasahara.gifu.jp",
  	"kasamatsu.gifu.jp",
  	"kawaue.gifu.jp",
  	"kitagata.gifu.jp",
  	"mino.gifu.jp",
  	"minokamo.gifu.jp",
  	"mitake.gifu.jp",
  	"mizunami.gifu.jp",
  	"motosu.gifu.jp",
  	"nakatsugawa.gifu.jp",
  	"ogaki.gifu.jp",
  	"sakahogi.gifu.jp",
  	"seki.gifu.jp",
  	"sekigahara.gifu.jp",
  	"shirakawa.gifu.jp",
  	"tajimi.gifu.jp",
  	"takayama.gifu.jp",
  	"tarui.gifu.jp",
  	"toki.gifu.jp",
  	"tomika.gifu.jp",
  	"wanouchi.gifu.jp",
  	"yamagata.gifu.jp",
  	"yaotsu.gifu.jp",
  	"yoro.gifu.jp",
  	"annaka.gunma.jp",
  	"chiyoda.gunma.jp",
  	"fujioka.gunma.jp",
  	"higashiagatsuma.gunma.jp",
  	"isesaki.gunma.jp",
  	"itakura.gunma.jp",
  	"kanna.gunma.jp",
  	"kanra.gunma.jp",
  	"katashina.gunma.jp",
  	"kawaba.gunma.jp",
  	"kiryu.gunma.jp",
  	"kusatsu.gunma.jp",
  	"maebashi.gunma.jp",
  	"meiwa.gunma.jp",
  	"midori.gunma.jp",
  	"minakami.gunma.jp",
  	"naganohara.gunma.jp",
  	"nakanojo.gunma.jp",
  	"nanmoku.gunma.jp",
  	"numata.gunma.jp",
  	"oizumi.gunma.jp",
  	"ora.gunma.jp",
  	"ota.gunma.jp",
  	"shibukawa.gunma.jp",
  	"shimonita.gunma.jp",
  	"shinto.gunma.jp",
  	"showa.gunma.jp",
  	"takasaki.gunma.jp",
  	"takayama.gunma.jp",
  	"tamamura.gunma.jp",
  	"tatebayashi.gunma.jp",
  	"tomioka.gunma.jp",
  	"tsukiyono.gunma.jp",
  	"tsumagoi.gunma.jp",
  	"ueno.gunma.jp",
  	"yoshioka.gunma.jp",
  	"asaminami.hiroshima.jp",
  	"daiwa.hiroshima.jp",
  	"etajima.hiroshima.jp",
  	"fuchu.hiroshima.jp",
  	"fukuyama.hiroshima.jp",
  	"hatsukaichi.hiroshima.jp",
  	"higashihiroshima.hiroshima.jp",
  	"hongo.hiroshima.jp",
  	"jinsekikogen.hiroshima.jp",
  	"kaita.hiroshima.jp",
  	"kui.hiroshima.jp",
  	"kumano.hiroshima.jp",
  	"kure.hiroshima.jp",
  	"mihara.hiroshima.jp",
  	"miyoshi.hiroshima.jp",
  	"naka.hiroshima.jp",
  	"onomichi.hiroshima.jp",
  	"osakikamijima.hiroshima.jp",
  	"otake.hiroshima.jp",
  	"saka.hiroshima.jp",
  	"sera.hiroshima.jp",
  	"seranishi.hiroshima.jp",
  	"shinichi.hiroshima.jp",
  	"shobara.hiroshima.jp",
  	"takehara.hiroshima.jp",
  	"abashiri.hokkaido.jp",
  	"abira.hokkaido.jp",
  	"aibetsu.hokkaido.jp",
  	"akabira.hokkaido.jp",
  	"akkeshi.hokkaido.jp",
  	"asahikawa.hokkaido.jp",
  	"ashibetsu.hokkaido.jp",
  	"ashoro.hokkaido.jp",
  	"assabu.hokkaido.jp",
  	"atsuma.hokkaido.jp",
  	"bibai.hokkaido.jp",
  	"biei.hokkaido.jp",
  	"bifuka.hokkaido.jp",
  	"bihoro.hokkaido.jp",
  	"biratori.hokkaido.jp",
  	"chippubetsu.hokkaido.jp",
  	"chitose.hokkaido.jp",
  	"date.hokkaido.jp",
  	"ebetsu.hokkaido.jp",
  	"embetsu.hokkaido.jp",
  	"eniwa.hokkaido.jp",
  	"erimo.hokkaido.jp",
  	"esan.hokkaido.jp",
  	"esashi.hokkaido.jp",
  	"fukagawa.hokkaido.jp",
  	"fukushima.hokkaido.jp",
  	"furano.hokkaido.jp",
  	"furubira.hokkaido.jp",
  	"haboro.hokkaido.jp",
  	"hakodate.hokkaido.jp",
  	"hamatonbetsu.hokkaido.jp",
  	"hidaka.hokkaido.jp",
  	"higashikagura.hokkaido.jp",
  	"higashikawa.hokkaido.jp",
  	"hiroo.hokkaido.jp",
  	"hokuryu.hokkaido.jp",
  	"hokuto.hokkaido.jp",
  	"honbetsu.hokkaido.jp",
  	"horokanai.hokkaido.jp",
  	"horonobe.hokkaido.jp",
  	"ikeda.hokkaido.jp",
  	"imakane.hokkaido.jp",
  	"ishikari.hokkaido.jp",
  	"iwamizawa.hokkaido.jp",
  	"iwanai.hokkaido.jp",
  	"kamifurano.hokkaido.jp",
  	"kamikawa.hokkaido.jp",
  	"kamishihoro.hokkaido.jp",
  	"kamisunagawa.hokkaido.jp",
  	"kamoenai.hokkaido.jp",
  	"kayabe.hokkaido.jp",
  	"kembuchi.hokkaido.jp",
  	"kikonai.hokkaido.jp",
  	"kimobetsu.hokkaido.jp",
  	"kitahiroshima.hokkaido.jp",
  	"kitami.hokkaido.jp",
  	"kiyosato.hokkaido.jp",
  	"koshimizu.hokkaido.jp",
  	"kunneppu.hokkaido.jp",
  	"kuriyama.hokkaido.jp",
  	"kuromatsunai.hokkaido.jp",
  	"kushiro.hokkaido.jp",
  	"kutchan.hokkaido.jp",
  	"kyowa.hokkaido.jp",
  	"mashike.hokkaido.jp",
  	"matsumae.hokkaido.jp",
  	"mikasa.hokkaido.jp",
  	"minamifurano.hokkaido.jp",
  	"mombetsu.hokkaido.jp",
  	"moseushi.hokkaido.jp",
  	"mukawa.hokkaido.jp",
  	"muroran.hokkaido.jp",
  	"naie.hokkaido.jp",
  	"nakagawa.hokkaido.jp",
  	"nakasatsunai.hokkaido.jp",
  	"nakatombetsu.hokkaido.jp",
  	"nanae.hokkaido.jp",
  	"nanporo.hokkaido.jp",
  	"nayoro.hokkaido.jp",
  	"nemuro.hokkaido.jp",
  	"niikappu.hokkaido.jp",
  	"niki.hokkaido.jp",
  	"nishiokoppe.hokkaido.jp",
  	"noboribetsu.hokkaido.jp",
  	"numata.hokkaido.jp",
  	"obihiro.hokkaido.jp",
  	"obira.hokkaido.jp",
  	"oketo.hokkaido.jp",
  	"okoppe.hokkaido.jp",
  	"otaru.hokkaido.jp",
  	"otobe.hokkaido.jp",
  	"otofuke.hokkaido.jp",
  	"otoineppu.hokkaido.jp",
  	"oumu.hokkaido.jp",
  	"ozora.hokkaido.jp",
  	"pippu.hokkaido.jp",
  	"rankoshi.hokkaido.jp",
  	"rebun.hokkaido.jp",
  	"rikubetsu.hokkaido.jp",
  	"rishiri.hokkaido.jp",
  	"rishirifuji.hokkaido.jp",
  	"saroma.hokkaido.jp",
  	"sarufutsu.hokkaido.jp",
  	"shakotan.hokkaido.jp",
  	"shari.hokkaido.jp",
  	"shibecha.hokkaido.jp",
  	"shibetsu.hokkaido.jp",
  	"shikabe.hokkaido.jp",
  	"shikaoi.hokkaido.jp",
  	"shimamaki.hokkaido.jp",
  	"shimizu.hokkaido.jp",
  	"shimokawa.hokkaido.jp",
  	"shinshinotsu.hokkaido.jp",
  	"shintoku.hokkaido.jp",
  	"shiranuka.hokkaido.jp",
  	"shiraoi.hokkaido.jp",
  	"shiriuchi.hokkaido.jp",
  	"sobetsu.hokkaido.jp",
  	"sunagawa.hokkaido.jp",
  	"taiki.hokkaido.jp",
  	"takasu.hokkaido.jp",
  	"takikawa.hokkaido.jp",
  	"takinoue.hokkaido.jp",
  	"teshikaga.hokkaido.jp",
  	"tobetsu.hokkaido.jp",
  	"tohma.hokkaido.jp",
  	"tomakomai.hokkaido.jp",
  	"tomari.hokkaido.jp",
  	"toya.hokkaido.jp",
  	"toyako.hokkaido.jp",
  	"toyotomi.hokkaido.jp",
  	"toyoura.hokkaido.jp",
  	"tsubetsu.hokkaido.jp",
  	"tsukigata.hokkaido.jp",
  	"urakawa.hokkaido.jp",
  	"urausu.hokkaido.jp",
  	"uryu.hokkaido.jp",
  	"utashinai.hokkaido.jp",
  	"wakkanai.hokkaido.jp",
  	"wassamu.hokkaido.jp",
  	"yakumo.hokkaido.jp",
  	"yoichi.hokkaido.jp",
  	"aioi.hyogo.jp",
  	"akashi.hyogo.jp",
  	"ako.hyogo.jp",
  	"amagasaki.hyogo.jp",
  	"aogaki.hyogo.jp",
  	"asago.hyogo.jp",
  	"ashiya.hyogo.jp",
  	"awaji.hyogo.jp",
  	"fukusaki.hyogo.jp",
  	"goshiki.hyogo.jp",
  	"harima.hyogo.jp",
  	"himeji.hyogo.jp",
  	"ichikawa.hyogo.jp",
  	"inagawa.hyogo.jp",
  	"itami.hyogo.jp",
  	"kakogawa.hyogo.jp",
  	"kamigori.hyogo.jp",
  	"kamikawa.hyogo.jp",
  	"kasai.hyogo.jp",
  	"kasuga.hyogo.jp",
  	"kawanishi.hyogo.jp",
  	"miki.hyogo.jp",
  	"minamiawaji.hyogo.jp",
  	"nishinomiya.hyogo.jp",
  	"nishiwaki.hyogo.jp",
  	"ono.hyogo.jp",
  	"sanda.hyogo.jp",
  	"sannan.hyogo.jp",
  	"sasayama.hyogo.jp",
  	"sayo.hyogo.jp",
  	"shingu.hyogo.jp",
  	"shinonsen.hyogo.jp",
  	"shiso.hyogo.jp",
  	"sumoto.hyogo.jp",
  	"taishi.hyogo.jp",
  	"taka.hyogo.jp",
  	"takarazuka.hyogo.jp",
  	"takasago.hyogo.jp",
  	"takino.hyogo.jp",
  	"tamba.hyogo.jp",
  	"tatsuno.hyogo.jp",
  	"toyooka.hyogo.jp",
  	"yabu.hyogo.jp",
  	"yashiro.hyogo.jp",
  	"yoka.hyogo.jp",
  	"yokawa.hyogo.jp",
  	"ami.ibaraki.jp",
  	"asahi.ibaraki.jp",
  	"bando.ibaraki.jp",
  	"chikusei.ibaraki.jp",
  	"daigo.ibaraki.jp",
  	"fujishiro.ibaraki.jp",
  	"hitachi.ibaraki.jp",
  	"hitachinaka.ibaraki.jp",
  	"hitachiomiya.ibaraki.jp",
  	"hitachiota.ibaraki.jp",
  	"ibaraki.ibaraki.jp",
  	"ina.ibaraki.jp",
  	"inashiki.ibaraki.jp",
  	"itako.ibaraki.jp",
  	"iwama.ibaraki.jp",
  	"joso.ibaraki.jp",
  	"kamisu.ibaraki.jp",
  	"kasama.ibaraki.jp",
  	"kashima.ibaraki.jp",
  	"kasumigaura.ibaraki.jp",
  	"koga.ibaraki.jp",
  	"miho.ibaraki.jp",
  	"mito.ibaraki.jp",
  	"moriya.ibaraki.jp",
  	"naka.ibaraki.jp",
  	"namegata.ibaraki.jp",
  	"oarai.ibaraki.jp",
  	"ogawa.ibaraki.jp",
  	"omitama.ibaraki.jp",
  	"ryugasaki.ibaraki.jp",
  	"sakai.ibaraki.jp",
  	"sakuragawa.ibaraki.jp",
  	"shimodate.ibaraki.jp",
  	"shimotsuma.ibaraki.jp",
  	"shirosato.ibaraki.jp",
  	"sowa.ibaraki.jp",
  	"suifu.ibaraki.jp",
  	"takahagi.ibaraki.jp",
  	"tamatsukuri.ibaraki.jp",
  	"tokai.ibaraki.jp",
  	"tomobe.ibaraki.jp",
  	"tone.ibaraki.jp",
  	"toride.ibaraki.jp",
  	"tsuchiura.ibaraki.jp",
  	"tsukuba.ibaraki.jp",
  	"uchihara.ibaraki.jp",
  	"ushiku.ibaraki.jp",
  	"yachiyo.ibaraki.jp",
  	"yamagata.ibaraki.jp",
  	"yawara.ibaraki.jp",
  	"yuki.ibaraki.jp",
  	"anamizu.ishikawa.jp",
  	"hakui.ishikawa.jp",
  	"hakusan.ishikawa.jp",
  	"kaga.ishikawa.jp",
  	"kahoku.ishikawa.jp",
  	"kanazawa.ishikawa.jp",
  	"kawakita.ishikawa.jp",
  	"komatsu.ishikawa.jp",
  	"nakanoto.ishikawa.jp",
  	"nanao.ishikawa.jp",
  	"nomi.ishikawa.jp",
  	"nonoichi.ishikawa.jp",
  	"noto.ishikawa.jp",
  	"shika.ishikawa.jp",
  	"suzu.ishikawa.jp",
  	"tsubata.ishikawa.jp",
  	"tsurugi.ishikawa.jp",
  	"uchinada.ishikawa.jp",
  	"wajima.ishikawa.jp",
  	"fudai.iwate.jp",
  	"fujisawa.iwate.jp",
  	"hanamaki.iwate.jp",
  	"hiraizumi.iwate.jp",
  	"hirono.iwate.jp",
  	"ichinohe.iwate.jp",
  	"ichinoseki.iwate.jp",
  	"iwaizumi.iwate.jp",
  	"iwate.iwate.jp",
  	"joboji.iwate.jp",
  	"kamaishi.iwate.jp",
  	"kanegasaki.iwate.jp",
  	"karumai.iwate.jp",
  	"kawai.iwate.jp",
  	"kitakami.iwate.jp",
  	"kuji.iwate.jp",
  	"kunohe.iwate.jp",
  	"kuzumaki.iwate.jp",
  	"miyako.iwate.jp",
  	"mizusawa.iwate.jp",
  	"morioka.iwate.jp",
  	"ninohe.iwate.jp",
  	"noda.iwate.jp",
  	"ofunato.iwate.jp",
  	"oshu.iwate.jp",
  	"otsuchi.iwate.jp",
  	"rikuzentakata.iwate.jp",
  	"shiwa.iwate.jp",
  	"shizukuishi.iwate.jp",
  	"sumita.iwate.jp",
  	"tanohata.iwate.jp",
  	"tono.iwate.jp",
  	"yahaba.iwate.jp",
  	"yamada.iwate.jp",
  	"ayagawa.kagawa.jp",
  	"higashikagawa.kagawa.jp",
  	"kanonji.kagawa.jp",
  	"kotohira.kagawa.jp",
  	"manno.kagawa.jp",
  	"marugame.kagawa.jp",
  	"mitoyo.kagawa.jp",
  	"naoshima.kagawa.jp",
  	"sanuki.kagawa.jp",
  	"tadotsu.kagawa.jp",
  	"takamatsu.kagawa.jp",
  	"tonosho.kagawa.jp",
  	"uchinomi.kagawa.jp",
  	"utazu.kagawa.jp",
  	"zentsuji.kagawa.jp",
  	"akune.kagoshima.jp",
  	"amami.kagoshima.jp",
  	"hioki.kagoshima.jp",
  	"isa.kagoshima.jp",
  	"isen.kagoshima.jp",
  	"izumi.kagoshima.jp",
  	"kagoshima.kagoshima.jp",
  	"kanoya.kagoshima.jp",
  	"kawanabe.kagoshima.jp",
  	"kinko.kagoshima.jp",
  	"kouyama.kagoshima.jp",
  	"makurazaki.kagoshima.jp",
  	"matsumoto.kagoshima.jp",
  	"minamitane.kagoshima.jp",
  	"nakatane.kagoshima.jp",
  	"nishinoomote.kagoshima.jp",
  	"satsumasendai.kagoshima.jp",
  	"soo.kagoshima.jp",
  	"tarumizu.kagoshima.jp",
  	"yusui.kagoshima.jp",
  	"aikawa.kanagawa.jp",
  	"atsugi.kanagawa.jp",
  	"ayase.kanagawa.jp",
  	"chigasaki.kanagawa.jp",
  	"ebina.kanagawa.jp",
  	"fujisawa.kanagawa.jp",
  	"hadano.kanagawa.jp",
  	"hakone.kanagawa.jp",
  	"hiratsuka.kanagawa.jp",
  	"isehara.kanagawa.jp",
  	"kaisei.kanagawa.jp",
  	"kamakura.kanagawa.jp",
  	"kiyokawa.kanagawa.jp",
  	"matsuda.kanagawa.jp",
  	"minamiashigara.kanagawa.jp",
  	"miura.kanagawa.jp",
  	"nakai.kanagawa.jp",
  	"ninomiya.kanagawa.jp",
  	"odawara.kanagawa.jp",
  	"oi.kanagawa.jp",
  	"oiso.kanagawa.jp",
  	"sagamihara.kanagawa.jp",
  	"samukawa.kanagawa.jp",
  	"tsukui.kanagawa.jp",
  	"yamakita.kanagawa.jp",
  	"yamato.kanagawa.jp",
  	"yokosuka.kanagawa.jp",
  	"yugawara.kanagawa.jp",
  	"zama.kanagawa.jp",
  	"zushi.kanagawa.jp",
  	"aki.kochi.jp",
  	"geisei.kochi.jp",
  	"hidaka.kochi.jp",
  	"higashitsuno.kochi.jp",
  	"ino.kochi.jp",
  	"kagami.kochi.jp",
  	"kami.kochi.jp",
  	"kitagawa.kochi.jp",
  	"kochi.kochi.jp",
  	"mihara.kochi.jp",
  	"motoyama.kochi.jp",
  	"muroto.kochi.jp",
  	"nahari.kochi.jp",
  	"nakamura.kochi.jp",
  	"nankoku.kochi.jp",
  	"nishitosa.kochi.jp",
  	"niyodogawa.kochi.jp",
  	"ochi.kochi.jp",
  	"okawa.kochi.jp",
  	"otoyo.kochi.jp",
  	"otsuki.kochi.jp",
  	"sakawa.kochi.jp",
  	"sukumo.kochi.jp",
  	"susaki.kochi.jp",
  	"tosa.kochi.jp",
  	"tosashimizu.kochi.jp",
  	"toyo.kochi.jp",
  	"tsuno.kochi.jp",
  	"umaji.kochi.jp",
  	"yasuda.kochi.jp",
  	"yusuhara.kochi.jp",
  	"amakusa.kumamoto.jp",
  	"arao.kumamoto.jp",
  	"aso.kumamoto.jp",
  	"choyo.kumamoto.jp",
  	"gyokuto.kumamoto.jp",
  	"kamiamakusa.kumamoto.jp",
  	"kikuchi.kumamoto.jp",
  	"kumamoto.kumamoto.jp",
  	"mashiki.kumamoto.jp",
  	"mifune.kumamoto.jp",
  	"minamata.kumamoto.jp",
  	"minamioguni.kumamoto.jp",
  	"nagasu.kumamoto.jp",
  	"nishihara.kumamoto.jp",
  	"oguni.kumamoto.jp",
  	"ozu.kumamoto.jp",
  	"sumoto.kumamoto.jp",
  	"takamori.kumamoto.jp",
  	"uki.kumamoto.jp",
  	"uto.kumamoto.jp",
  	"yamaga.kumamoto.jp",
  	"yamato.kumamoto.jp",
  	"yatsushiro.kumamoto.jp",
  	"ayabe.kyoto.jp",
  	"fukuchiyama.kyoto.jp",
  	"higashiyama.kyoto.jp",
  	"ide.kyoto.jp",
  	"ine.kyoto.jp",
  	"joyo.kyoto.jp",
  	"kameoka.kyoto.jp",
  	"kamo.kyoto.jp",
  	"kita.kyoto.jp",
  	"kizu.kyoto.jp",
  	"kumiyama.kyoto.jp",
  	"kyotamba.kyoto.jp",
  	"kyotanabe.kyoto.jp",
  	"kyotango.kyoto.jp",
  	"maizuru.kyoto.jp",
  	"minami.kyoto.jp",
  	"minamiyamashiro.kyoto.jp",
  	"miyazu.kyoto.jp",
  	"muko.kyoto.jp",
  	"nagaokakyo.kyoto.jp",
  	"nakagyo.kyoto.jp",
  	"nantan.kyoto.jp",
  	"oyamazaki.kyoto.jp",
  	"sakyo.kyoto.jp",
  	"seika.kyoto.jp",
  	"tanabe.kyoto.jp",
  	"uji.kyoto.jp",
  	"ujitawara.kyoto.jp",
  	"wazuka.kyoto.jp",
  	"yamashina.kyoto.jp",
  	"yawata.kyoto.jp",
  	"asahi.mie.jp",
  	"inabe.mie.jp",
  	"ise.mie.jp",
  	"kameyama.mie.jp",
  	"kawagoe.mie.jp",
  	"kiho.mie.jp",
  	"kisosaki.mie.jp",
  	"kiwa.mie.jp",
  	"komono.mie.jp",
  	"kumano.mie.jp",
  	"kuwana.mie.jp",
  	"matsusaka.mie.jp",
  	"meiwa.mie.jp",
  	"mihama.mie.jp",
  	"minamiise.mie.jp",
  	"misugi.mie.jp",
  	"miyama.mie.jp",
  	"nabari.mie.jp",
  	"shima.mie.jp",
  	"suzuka.mie.jp",
  	"tado.mie.jp",
  	"taiki.mie.jp",
  	"taki.mie.jp",
  	"tamaki.mie.jp",
  	"toba.mie.jp",
  	"tsu.mie.jp",
  	"udono.mie.jp",
  	"ureshino.mie.jp",
  	"watarai.mie.jp",
  	"yokkaichi.mie.jp",
  	"furukawa.miyagi.jp",
  	"higashimatsushima.miyagi.jp",
  	"ishinomaki.miyagi.jp",
  	"iwanuma.miyagi.jp",
  	"kakuda.miyagi.jp",
  	"kami.miyagi.jp",
  	"kawasaki.miyagi.jp",
  	"marumori.miyagi.jp",
  	"matsushima.miyagi.jp",
  	"minamisanriku.miyagi.jp",
  	"misato.miyagi.jp",
  	"murata.miyagi.jp",
  	"natori.miyagi.jp",
  	"ogawara.miyagi.jp",
  	"ohira.miyagi.jp",
  	"onagawa.miyagi.jp",
  	"osaki.miyagi.jp",
  	"rifu.miyagi.jp",
  	"semine.miyagi.jp",
  	"shibata.miyagi.jp",
  	"shichikashuku.miyagi.jp",
  	"shikama.miyagi.jp",
  	"shiogama.miyagi.jp",
  	"shiroishi.miyagi.jp",
  	"tagajo.miyagi.jp",
  	"taiwa.miyagi.jp",
  	"tome.miyagi.jp",
  	"tomiya.miyagi.jp",
  	"wakuya.miyagi.jp",
  	"watari.miyagi.jp",
  	"yamamoto.miyagi.jp",
  	"zao.miyagi.jp",
  	"aya.miyazaki.jp",
  	"ebino.miyazaki.jp",
  	"gokase.miyazaki.jp",
  	"hyuga.miyazaki.jp",
  	"kadogawa.miyazaki.jp",
  	"kawaminami.miyazaki.jp",
  	"kijo.miyazaki.jp",
  	"kitagawa.miyazaki.jp",
  	"kitakata.miyazaki.jp",
  	"kitaura.miyazaki.jp",
  	"kobayashi.miyazaki.jp",
  	"kunitomi.miyazaki.jp",
  	"kushima.miyazaki.jp",
  	"mimata.miyazaki.jp",
  	"miyakonojo.miyazaki.jp",
  	"miyazaki.miyazaki.jp",
  	"morotsuka.miyazaki.jp",
  	"nichinan.miyazaki.jp",
  	"nishimera.miyazaki.jp",
  	"nobeoka.miyazaki.jp",
  	"saito.miyazaki.jp",
  	"shiiba.miyazaki.jp",
  	"shintomi.miyazaki.jp",
  	"takaharu.miyazaki.jp",
  	"takanabe.miyazaki.jp",
  	"takazaki.miyazaki.jp",
  	"tsuno.miyazaki.jp",
  	"achi.nagano.jp",
  	"agematsu.nagano.jp",
  	"anan.nagano.jp",
  	"aoki.nagano.jp",
  	"asahi.nagano.jp",
  	"azumino.nagano.jp",
  	"chikuhoku.nagano.jp",
  	"chikuma.nagano.jp",
  	"chino.nagano.jp",
  	"fujimi.nagano.jp",
  	"hakuba.nagano.jp",
  	"hara.nagano.jp",
  	"hiraya.nagano.jp",
  	"iida.nagano.jp",
  	"iijima.nagano.jp",
  	"iiyama.nagano.jp",
  	"iizuna.nagano.jp",
  	"ikeda.nagano.jp",
  	"ikusaka.nagano.jp",
  	"ina.nagano.jp",
  	"karuizawa.nagano.jp",
  	"kawakami.nagano.jp",
  	"kiso.nagano.jp",
  	"kisofukushima.nagano.jp",
  	"kitaaiki.nagano.jp",
  	"komagane.nagano.jp",
  	"komoro.nagano.jp",
  	"matsukawa.nagano.jp",
  	"matsumoto.nagano.jp",
  	"miasa.nagano.jp",
  	"minamiaiki.nagano.jp",
  	"minamimaki.nagano.jp",
  	"minamiminowa.nagano.jp",
  	"minowa.nagano.jp",
  	"miyada.nagano.jp",
  	"miyota.nagano.jp",
  	"mochizuki.nagano.jp",
  	"nagano.nagano.jp",
  	"nagawa.nagano.jp",
  	"nagiso.nagano.jp",
  	"nakagawa.nagano.jp",
  	"nakano.nagano.jp",
  	"nozawaonsen.nagano.jp",
  	"obuse.nagano.jp",
  	"ogawa.nagano.jp",
  	"okaya.nagano.jp",
  	"omachi.nagano.jp",
  	"omi.nagano.jp",
  	"ookuwa.nagano.jp",
  	"ooshika.nagano.jp",
  	"otaki.nagano.jp",
  	"otari.nagano.jp",
  	"sakae.nagano.jp",
  	"sakaki.nagano.jp",
  	"saku.nagano.jp",
  	"sakuho.nagano.jp",
  	"shimosuwa.nagano.jp",
  	"shinanomachi.nagano.jp",
  	"shiojiri.nagano.jp",
  	"suwa.nagano.jp",
  	"suzaka.nagano.jp",
  	"takagi.nagano.jp",
  	"takamori.nagano.jp",
  	"takayama.nagano.jp",
  	"tateshina.nagano.jp",
  	"tatsuno.nagano.jp",
  	"togakushi.nagano.jp",
  	"togura.nagano.jp",
  	"tomi.nagano.jp",
  	"ueda.nagano.jp",
  	"wada.nagano.jp",
  	"yamagata.nagano.jp",
  	"yamanouchi.nagano.jp",
  	"yasaka.nagano.jp",
  	"yasuoka.nagano.jp",
  	"chijiwa.nagasaki.jp",
  	"futsu.nagasaki.jp",
  	"goto.nagasaki.jp",
  	"hasami.nagasaki.jp",
  	"hirado.nagasaki.jp",
  	"iki.nagasaki.jp",
  	"isahaya.nagasaki.jp",
  	"kawatana.nagasaki.jp",
  	"kuchinotsu.nagasaki.jp",
  	"matsuura.nagasaki.jp",
  	"nagasaki.nagasaki.jp",
  	"obama.nagasaki.jp",
  	"omura.nagasaki.jp",
  	"oseto.nagasaki.jp",
  	"saikai.nagasaki.jp",
  	"sasebo.nagasaki.jp",
  	"seihi.nagasaki.jp",
  	"shimabara.nagasaki.jp",
  	"shinkamigoto.nagasaki.jp",
  	"togitsu.nagasaki.jp",
  	"tsushima.nagasaki.jp",
  	"unzen.nagasaki.jp",
  	"ando.nara.jp",
  	"gose.nara.jp",
  	"heguri.nara.jp",
  	"higashiyoshino.nara.jp",
  	"ikaruga.nara.jp",
  	"ikoma.nara.jp",
  	"kamikitayama.nara.jp",
  	"kanmaki.nara.jp",
  	"kashiba.nara.jp",
  	"kashihara.nara.jp",
  	"katsuragi.nara.jp",
  	"kawai.nara.jp",
  	"kawakami.nara.jp",
  	"kawanishi.nara.jp",
  	"koryo.nara.jp",
  	"kurotaki.nara.jp",
  	"mitsue.nara.jp",
  	"miyake.nara.jp",
  	"nara.nara.jp",
  	"nosegawa.nara.jp",
  	"oji.nara.jp",
  	"ouda.nara.jp",
  	"oyodo.nara.jp",
  	"sakurai.nara.jp",
  	"sango.nara.jp",
  	"shimoichi.nara.jp",
  	"shimokitayama.nara.jp",
  	"shinjo.nara.jp",
  	"soni.nara.jp",
  	"takatori.nara.jp",
  	"tawaramoto.nara.jp",
  	"tenkawa.nara.jp",
  	"tenri.nara.jp",
  	"uda.nara.jp",
  	"yamatokoriyama.nara.jp",
  	"yamatotakada.nara.jp",
  	"yamazoe.nara.jp",
  	"yoshino.nara.jp",
  	"aga.niigata.jp",
  	"agano.niigata.jp",
  	"gosen.niigata.jp",
  	"itoigawa.niigata.jp",
  	"izumozaki.niigata.jp",
  	"joetsu.niigata.jp",
  	"kamo.niigata.jp",
  	"kariwa.niigata.jp",
  	"kashiwazaki.niigata.jp",
  	"minamiuonuma.niigata.jp",
  	"mitsuke.niigata.jp",
  	"muika.niigata.jp",
  	"murakami.niigata.jp",
  	"myoko.niigata.jp",
  	"nagaoka.niigata.jp",
  	"niigata.niigata.jp",
  	"ojiya.niigata.jp",
  	"omi.niigata.jp",
  	"sado.niigata.jp",
  	"sanjo.niigata.jp",
  	"seiro.niigata.jp",
  	"seirou.niigata.jp",
  	"sekikawa.niigata.jp",
  	"shibata.niigata.jp",
  	"tagami.niigata.jp",
  	"tainai.niigata.jp",
  	"tochio.niigata.jp",
  	"tokamachi.niigata.jp",
  	"tsubame.niigata.jp",
  	"tsunan.niigata.jp",
  	"uonuma.niigata.jp",
  	"yahiko.niigata.jp",
  	"yoita.niigata.jp",
  	"yuzawa.niigata.jp",
  	"beppu.oita.jp",
  	"bungoono.oita.jp",
  	"bungotakada.oita.jp",
  	"hasama.oita.jp",
  	"hiji.oita.jp",
  	"himeshima.oita.jp",
  	"hita.oita.jp",
  	"kamitsue.oita.jp",
  	"kokonoe.oita.jp",
  	"kuju.oita.jp",
  	"kunisaki.oita.jp",
  	"kusu.oita.jp",
  	"oita.oita.jp",
  	"saiki.oita.jp",
  	"taketa.oita.jp",
  	"tsukumi.oita.jp",
  	"usa.oita.jp",
  	"usuki.oita.jp",
  	"yufu.oita.jp",
  	"akaiwa.okayama.jp",
  	"asakuchi.okayama.jp",
  	"bizen.okayama.jp",
  	"hayashima.okayama.jp",
  	"ibara.okayama.jp",
  	"kagamino.okayama.jp",
  	"kasaoka.okayama.jp",
  	"kibichuo.okayama.jp",
  	"kumenan.okayama.jp",
  	"kurashiki.okayama.jp",
  	"maniwa.okayama.jp",
  	"misaki.okayama.jp",
  	"nagi.okayama.jp",
  	"niimi.okayama.jp",
  	"nishiawakura.okayama.jp",
  	"okayama.okayama.jp",
  	"satosho.okayama.jp",
  	"setouchi.okayama.jp",
  	"shinjo.okayama.jp",
  	"shoo.okayama.jp",
  	"soja.okayama.jp",
  	"takahashi.okayama.jp",
  	"tamano.okayama.jp",
  	"tsuyama.okayama.jp",
  	"wake.okayama.jp",
  	"yakage.okayama.jp",
  	"aguni.okinawa.jp",
  	"ginowan.okinawa.jp",
  	"ginoza.okinawa.jp",
  	"gushikami.okinawa.jp",
  	"haebaru.okinawa.jp",
  	"higashi.okinawa.jp",
  	"hirara.okinawa.jp",
  	"iheya.okinawa.jp",
  	"ishigaki.okinawa.jp",
  	"ishikawa.okinawa.jp",
  	"itoman.okinawa.jp",
  	"izena.okinawa.jp",
  	"kadena.okinawa.jp",
  	"kin.okinawa.jp",
  	"kitadaito.okinawa.jp",
  	"kitanakagusuku.okinawa.jp",
  	"kumejima.okinawa.jp",
  	"kunigami.okinawa.jp",
  	"minamidaito.okinawa.jp",
  	"motobu.okinawa.jp",
  	"nago.okinawa.jp",
  	"naha.okinawa.jp",
  	"nakagusuku.okinawa.jp",
  	"nakijin.okinawa.jp",
  	"nanjo.okinawa.jp",
  	"nishihara.okinawa.jp",
  	"ogimi.okinawa.jp",
  	"okinawa.okinawa.jp",
  	"onna.okinawa.jp",
  	"shimoji.okinawa.jp",
  	"taketomi.okinawa.jp",
  	"tarama.okinawa.jp",
  	"tokashiki.okinawa.jp",
  	"tomigusuku.okinawa.jp",
  	"tonaki.okinawa.jp",
  	"urasoe.okinawa.jp",
  	"uruma.okinawa.jp",
  	"yaese.okinawa.jp",
  	"yomitan.okinawa.jp",
  	"yonabaru.okinawa.jp",
  	"yonaguni.okinawa.jp",
  	"zamami.okinawa.jp",
  	"abeno.osaka.jp",
  	"chihayaakasaka.osaka.jp",
  	"chuo.osaka.jp",
  	"daito.osaka.jp",
  	"fujiidera.osaka.jp",
  	"habikino.osaka.jp",
  	"hannan.osaka.jp",
  	"higashiosaka.osaka.jp",
  	"higashisumiyoshi.osaka.jp",
  	"higashiyodogawa.osaka.jp",
  	"hirakata.osaka.jp",
  	"ibaraki.osaka.jp",
  	"ikeda.osaka.jp",
  	"izumi.osaka.jp",
  	"izumiotsu.osaka.jp",
  	"izumisano.osaka.jp",
  	"kadoma.osaka.jp",
  	"kaizuka.osaka.jp",
  	"kanan.osaka.jp",
  	"kashiwara.osaka.jp",
  	"katano.osaka.jp",
  	"kawachinagano.osaka.jp",
  	"kishiwada.osaka.jp",
  	"kita.osaka.jp",
  	"kumatori.osaka.jp",
  	"matsubara.osaka.jp",
  	"minato.osaka.jp",
  	"minoh.osaka.jp",
  	"misaki.osaka.jp",
  	"moriguchi.osaka.jp",
  	"neyagawa.osaka.jp",
  	"nishi.osaka.jp",
  	"nose.osaka.jp",
  	"osakasayama.osaka.jp",
  	"sakai.osaka.jp",
  	"sayama.osaka.jp",
  	"sennan.osaka.jp",
  	"settsu.osaka.jp",
  	"shijonawate.osaka.jp",
  	"shimamoto.osaka.jp",
  	"suita.osaka.jp",
  	"tadaoka.osaka.jp",
  	"taishi.osaka.jp",
  	"tajiri.osaka.jp",
  	"takaishi.osaka.jp",
  	"takatsuki.osaka.jp",
  	"tondabayashi.osaka.jp",
  	"toyonaka.osaka.jp",
  	"toyono.osaka.jp",
  	"yao.osaka.jp",
  	"ariake.saga.jp",
  	"arita.saga.jp",
  	"fukudomi.saga.jp",
  	"genkai.saga.jp",
  	"hamatama.saga.jp",
  	"hizen.saga.jp",
  	"imari.saga.jp",
  	"kamimine.saga.jp",
  	"kanzaki.saga.jp",
  	"karatsu.saga.jp",
  	"kashima.saga.jp",
  	"kitagata.saga.jp",
  	"kitahata.saga.jp",
  	"kiyama.saga.jp",
  	"kouhoku.saga.jp",
  	"kyuragi.saga.jp",
  	"nishiarita.saga.jp",
  	"ogi.saga.jp",
  	"omachi.saga.jp",
  	"ouchi.saga.jp",
  	"saga.saga.jp",
  	"shiroishi.saga.jp",
  	"taku.saga.jp",
  	"tara.saga.jp",
  	"tosu.saga.jp",
  	"yoshinogari.saga.jp",
  	"arakawa.saitama.jp",
  	"asaka.saitama.jp",
  	"chichibu.saitama.jp",
  	"fujimi.saitama.jp",
  	"fujimino.saitama.jp",
  	"fukaya.saitama.jp",
  	"hanno.saitama.jp",
  	"hanyu.saitama.jp",
  	"hasuda.saitama.jp",
  	"hatogaya.saitama.jp",
  	"hatoyama.saitama.jp",
  	"hidaka.saitama.jp",
  	"higashichichibu.saitama.jp",
  	"higashimatsuyama.saitama.jp",
  	"honjo.saitama.jp",
  	"ina.saitama.jp",
  	"iruma.saitama.jp",
  	"iwatsuki.saitama.jp",
  	"kamiizumi.saitama.jp",
  	"kamikawa.saitama.jp",
  	"kamisato.saitama.jp",
  	"kasukabe.saitama.jp",
  	"kawagoe.saitama.jp",
  	"kawaguchi.saitama.jp",
  	"kawajima.saitama.jp",
  	"kazo.saitama.jp",
  	"kitamoto.saitama.jp",
  	"koshigaya.saitama.jp",
  	"kounosu.saitama.jp",
  	"kuki.saitama.jp",
  	"kumagaya.saitama.jp",
  	"matsubushi.saitama.jp",
  	"minano.saitama.jp",
  	"misato.saitama.jp",
  	"miyashiro.saitama.jp",
  	"miyoshi.saitama.jp",
  	"moroyama.saitama.jp",
  	"nagatoro.saitama.jp",
  	"namegawa.saitama.jp",
  	"niiza.saitama.jp",
  	"ogano.saitama.jp",
  	"ogawa.saitama.jp",
  	"ogose.saitama.jp",
  	"okegawa.saitama.jp",
  	"omiya.saitama.jp",
  	"otaki.saitama.jp",
  	"ranzan.saitama.jp",
  	"ryokami.saitama.jp",
  	"saitama.saitama.jp",
  	"sakado.saitama.jp",
  	"satte.saitama.jp",
  	"sayama.saitama.jp",
  	"shiki.saitama.jp",
  	"shiraoka.saitama.jp",
  	"soka.saitama.jp",
  	"sugito.saitama.jp",
  	"toda.saitama.jp",
  	"tokigawa.saitama.jp",
  	"tokorozawa.saitama.jp",
  	"tsurugashima.saitama.jp",
  	"urawa.saitama.jp",
  	"warabi.saitama.jp",
  	"yashio.saitama.jp",
  	"yokoze.saitama.jp",
  	"yono.saitama.jp",
  	"yorii.saitama.jp",
  	"yoshida.saitama.jp",
  	"yoshikawa.saitama.jp",
  	"yoshimi.saitama.jp",
  	"aisho.shiga.jp",
  	"gamo.shiga.jp",
  	"higashiomi.shiga.jp",
  	"hikone.shiga.jp",
  	"koka.shiga.jp",
  	"konan.shiga.jp",
  	"kosei.shiga.jp",
  	"koto.shiga.jp",
  	"kusatsu.shiga.jp",
  	"maibara.shiga.jp",
  	"moriyama.shiga.jp",
  	"nagahama.shiga.jp",
  	"nishiazai.shiga.jp",
  	"notogawa.shiga.jp",
  	"omihachiman.shiga.jp",
  	"otsu.shiga.jp",
  	"ritto.shiga.jp",
  	"ryuoh.shiga.jp",
  	"takashima.shiga.jp",
  	"takatsuki.shiga.jp",
  	"torahime.shiga.jp",
  	"toyosato.shiga.jp",
  	"yasu.shiga.jp",
  	"akagi.shimane.jp",
  	"ama.shimane.jp",
  	"gotsu.shimane.jp",
  	"hamada.shimane.jp",
  	"higashiizumo.shimane.jp",
  	"hikawa.shimane.jp",
  	"hikimi.shimane.jp",
  	"izumo.shimane.jp",
  	"kakinoki.shimane.jp",
  	"masuda.shimane.jp",
  	"matsue.shimane.jp",
  	"misato.shimane.jp",
  	"nishinoshima.shimane.jp",
  	"ohda.shimane.jp",
  	"okinoshima.shimane.jp",
  	"okuizumo.shimane.jp",
  	"shimane.shimane.jp",
  	"tamayu.shimane.jp",
  	"tsuwano.shimane.jp",
  	"unnan.shimane.jp",
  	"yakumo.shimane.jp",
  	"yasugi.shimane.jp",
  	"yatsuka.shimane.jp",
  	"arai.shizuoka.jp",
  	"atami.shizuoka.jp",
  	"fuji.shizuoka.jp",
  	"fujieda.shizuoka.jp",
  	"fujikawa.shizuoka.jp",
  	"fujinomiya.shizuoka.jp",
  	"fukuroi.shizuoka.jp",
  	"gotemba.shizuoka.jp",
  	"haibara.shizuoka.jp",
  	"hamamatsu.shizuoka.jp",
  	"higashiizu.shizuoka.jp",
  	"ito.shizuoka.jp",
  	"iwata.shizuoka.jp",
  	"izu.shizuoka.jp",
  	"izunokuni.shizuoka.jp",
  	"kakegawa.shizuoka.jp",
  	"kannami.shizuoka.jp",
  	"kawanehon.shizuoka.jp",
  	"kawazu.shizuoka.jp",
  	"kikugawa.shizuoka.jp",
  	"kosai.shizuoka.jp",
  	"makinohara.shizuoka.jp",
  	"matsuzaki.shizuoka.jp",
  	"minamiizu.shizuoka.jp",
  	"mishima.shizuoka.jp",
  	"morimachi.shizuoka.jp",
  	"nishiizu.shizuoka.jp",
  	"numazu.shizuoka.jp",
  	"omaezaki.shizuoka.jp",
  	"shimada.shizuoka.jp",
  	"shimizu.shizuoka.jp",
  	"shimoda.shizuoka.jp",
  	"shizuoka.shizuoka.jp",
  	"susono.shizuoka.jp",
  	"yaizu.shizuoka.jp",
  	"yoshida.shizuoka.jp",
  	"ashikaga.tochigi.jp",
  	"bato.tochigi.jp",
  	"haga.tochigi.jp",
  	"ichikai.tochigi.jp",
  	"iwafune.tochigi.jp",
  	"kaminokawa.tochigi.jp",
  	"kanuma.tochigi.jp",
  	"karasuyama.tochigi.jp",
  	"kuroiso.tochigi.jp",
  	"mashiko.tochigi.jp",
  	"mibu.tochigi.jp",
  	"moka.tochigi.jp",
  	"motegi.tochigi.jp",
  	"nasu.tochigi.jp",
  	"nasushiobara.tochigi.jp",
  	"nikko.tochigi.jp",
  	"nishikata.tochigi.jp",
  	"nogi.tochigi.jp",
  	"ohira.tochigi.jp",
  	"ohtawara.tochigi.jp",
  	"oyama.tochigi.jp",
  	"sakura.tochigi.jp",
  	"sano.tochigi.jp",
  	"shimotsuke.tochigi.jp",
  	"shioya.tochigi.jp",
  	"takanezawa.tochigi.jp",
  	"tochigi.tochigi.jp",
  	"tsuga.tochigi.jp",
  	"ujiie.tochigi.jp",
  	"utsunomiya.tochigi.jp",
  	"yaita.tochigi.jp",
  	"aizumi.tokushima.jp",
  	"anan.tokushima.jp",
  	"ichiba.tokushima.jp",
  	"itano.tokushima.jp",
  	"kainan.tokushima.jp",
  	"komatsushima.tokushima.jp",
  	"matsushige.tokushima.jp",
  	"mima.tokushima.jp",
  	"minami.tokushima.jp",
  	"miyoshi.tokushima.jp",
  	"mugi.tokushima.jp",
  	"nakagawa.tokushima.jp",
  	"naruto.tokushima.jp",
  	"sanagochi.tokushima.jp",
  	"shishikui.tokushima.jp",
  	"tokushima.tokushima.jp",
  	"wajiki.tokushima.jp",
  	"adachi.tokyo.jp",
  	"akiruno.tokyo.jp",
  	"akishima.tokyo.jp",
  	"aogashima.tokyo.jp",
  	"arakawa.tokyo.jp",
  	"bunkyo.tokyo.jp",
  	"chiyoda.tokyo.jp",
  	"chofu.tokyo.jp",
  	"chuo.tokyo.jp",
  	"edogawa.tokyo.jp",
  	"fuchu.tokyo.jp",
  	"fussa.tokyo.jp",
  	"hachijo.tokyo.jp",
  	"hachioji.tokyo.jp",
  	"hamura.tokyo.jp",
  	"higashikurume.tokyo.jp",
  	"higashimurayama.tokyo.jp",
  	"higashiyamato.tokyo.jp",
  	"hino.tokyo.jp",
  	"hinode.tokyo.jp",
  	"hinohara.tokyo.jp",
  	"inagi.tokyo.jp",
  	"itabashi.tokyo.jp",
  	"katsushika.tokyo.jp",
  	"kita.tokyo.jp",
  	"kiyose.tokyo.jp",
  	"kodaira.tokyo.jp",
  	"koganei.tokyo.jp",
  	"kokubunji.tokyo.jp",
  	"komae.tokyo.jp",
  	"koto.tokyo.jp",
  	"kouzushima.tokyo.jp",
  	"kunitachi.tokyo.jp",
  	"machida.tokyo.jp",
  	"meguro.tokyo.jp",
  	"minato.tokyo.jp",
  	"mitaka.tokyo.jp",
  	"mizuho.tokyo.jp",
  	"musashimurayama.tokyo.jp",
  	"musashino.tokyo.jp",
  	"nakano.tokyo.jp",
  	"nerima.tokyo.jp",
  	"ogasawara.tokyo.jp",
  	"okutama.tokyo.jp",
  	"ome.tokyo.jp",
  	"oshima.tokyo.jp",
  	"ota.tokyo.jp",
  	"setagaya.tokyo.jp",
  	"shibuya.tokyo.jp",
  	"shinagawa.tokyo.jp",
  	"shinjuku.tokyo.jp",
  	"suginami.tokyo.jp",
  	"sumida.tokyo.jp",
  	"tachikawa.tokyo.jp",
  	"taito.tokyo.jp",
  	"tama.tokyo.jp",
  	"toshima.tokyo.jp",
  	"chizu.tottori.jp",
  	"hino.tottori.jp",
  	"kawahara.tottori.jp",
  	"koge.tottori.jp",
  	"kotoura.tottori.jp",
  	"misasa.tottori.jp",
  	"nanbu.tottori.jp",
  	"nichinan.tottori.jp",
  	"sakaiminato.tottori.jp",
  	"tottori.tottori.jp",
  	"wakasa.tottori.jp",
  	"yazu.tottori.jp",
  	"yonago.tottori.jp",
  	"asahi.toyama.jp",
  	"fuchu.toyama.jp",
  	"fukumitsu.toyama.jp",
  	"funahashi.toyama.jp",
  	"himi.toyama.jp",
  	"imizu.toyama.jp",
  	"inami.toyama.jp",
  	"johana.toyama.jp",
  	"kamiichi.toyama.jp",
  	"kurobe.toyama.jp",
  	"nakaniikawa.toyama.jp",
  	"namerikawa.toyama.jp",
  	"nanto.toyama.jp",
  	"nyuzen.toyama.jp",
  	"oyabe.toyama.jp",
  	"taira.toyama.jp",
  	"takaoka.toyama.jp",
  	"tateyama.toyama.jp",
  	"toga.toyama.jp",
  	"tonami.toyama.jp",
  	"toyama.toyama.jp",
  	"unazuki.toyama.jp",
  	"uozu.toyama.jp",
  	"yamada.toyama.jp",
  	"arida.wakayama.jp",
  	"aridagawa.wakayama.jp",
  	"gobo.wakayama.jp",
  	"hashimoto.wakayama.jp",
  	"hidaka.wakayama.jp",
  	"hirogawa.wakayama.jp",
  	"inami.wakayama.jp",
  	"iwade.wakayama.jp",
  	"kainan.wakayama.jp",
  	"kamitonda.wakayama.jp",
  	"katsuragi.wakayama.jp",
  	"kimino.wakayama.jp",
  	"kinokawa.wakayama.jp",
  	"kitayama.wakayama.jp",
  	"koya.wakayama.jp",
  	"koza.wakayama.jp",
  	"kozagawa.wakayama.jp",
  	"kudoyama.wakayama.jp",
  	"kushimoto.wakayama.jp",
  	"mihama.wakayama.jp",
  	"misato.wakayama.jp",
  	"nachikatsuura.wakayama.jp",
  	"shingu.wakayama.jp",
  	"shirahama.wakayama.jp",
  	"taiji.wakayama.jp",
  	"tanabe.wakayama.jp",
  	"wakayama.wakayama.jp",
  	"yuasa.wakayama.jp",
  	"yura.wakayama.jp",
  	"asahi.yamagata.jp",
  	"funagata.yamagata.jp",
  	"higashine.yamagata.jp",
  	"iide.yamagata.jp",
  	"kahoku.yamagata.jp",
  	"kaminoyama.yamagata.jp",
  	"kaneyama.yamagata.jp",
  	"kawanishi.yamagata.jp",
  	"mamurogawa.yamagata.jp",
  	"mikawa.yamagata.jp",
  	"murayama.yamagata.jp",
  	"nagai.yamagata.jp",
  	"nakayama.yamagata.jp",
  	"nanyo.yamagata.jp",
  	"nishikawa.yamagata.jp",
  	"obanazawa.yamagata.jp",
  	"oe.yamagata.jp",
  	"oguni.yamagata.jp",
  	"ohkura.yamagata.jp",
  	"oishida.yamagata.jp",
  	"sagae.yamagata.jp",
  	"sakata.yamagata.jp",
  	"sakegawa.yamagata.jp",
  	"shinjo.yamagata.jp",
  	"shirataka.yamagata.jp",
  	"shonai.yamagata.jp",
  	"takahata.yamagata.jp",
  	"tendo.yamagata.jp",
  	"tozawa.yamagata.jp",
  	"tsuruoka.yamagata.jp",
  	"yamagata.yamagata.jp",
  	"yamanobe.yamagata.jp",
  	"yonezawa.yamagata.jp",
  	"yuza.yamagata.jp",
  	"abu.yamaguchi.jp",
  	"hagi.yamaguchi.jp",
  	"hikari.yamaguchi.jp",
  	"hofu.yamaguchi.jp",
  	"iwakuni.yamaguchi.jp",
  	"kudamatsu.yamaguchi.jp",
  	"mitou.yamaguchi.jp",
  	"nagato.yamaguchi.jp",
  	"oshima.yamaguchi.jp",
  	"shimonoseki.yamaguchi.jp",
  	"shunan.yamaguchi.jp",
  	"tabuse.yamaguchi.jp",
  	"tokuyama.yamaguchi.jp",
  	"toyota.yamaguchi.jp",
  	"ube.yamaguchi.jp",
  	"yuu.yamaguchi.jp",
  	"chuo.yamanashi.jp",
  	"doshi.yamanashi.jp",
  	"fuefuki.yamanashi.jp",
  	"fujikawa.yamanashi.jp",
  	"fujikawaguchiko.yamanashi.jp",
  	"fujiyoshida.yamanashi.jp",
  	"hayakawa.yamanashi.jp",
  	"hokuto.yamanashi.jp",
  	"ichikawamisato.yamanashi.jp",
  	"kai.yamanashi.jp",
  	"kofu.yamanashi.jp",
  	"koshu.yamanashi.jp",
  	"kosuge.yamanashi.jp",
  	"minami-alps.yamanashi.jp",
  	"minobu.yamanashi.jp",
  	"nakamichi.yamanashi.jp",
  	"nanbu.yamanashi.jp",
  	"narusawa.yamanashi.jp",
  	"nirasaki.yamanashi.jp",
  	"nishikatsura.yamanashi.jp",
  	"oshino.yamanashi.jp",
  	"otsuki.yamanashi.jp",
  	"showa.yamanashi.jp",
  	"tabayama.yamanashi.jp",
  	"tsuru.yamanashi.jp",
  	"uenohara.yamanashi.jp",
  	"yamanakako.yamanashi.jp",
  	"yamanashi.yamanashi.jp",
  	"ke",
  	"ac.ke",
  	"co.ke",
  	"go.ke",
  	"info.ke",
  	"me.ke",
  	"mobi.ke",
  	"ne.ke",
  	"or.ke",
  	"sc.ke",
  	"kg",
  	"org.kg",
  	"net.kg",
  	"com.kg",
  	"edu.kg",
  	"gov.kg",
  	"mil.kg",
  	"*.kh",
  	"ki",
  	"edu.ki",
  	"biz.ki",
  	"net.ki",
  	"org.ki",
  	"gov.ki",
  	"info.ki",
  	"com.ki",
  	"km",
  	"org.km",
  	"nom.km",
  	"gov.km",
  	"prd.km",
  	"tm.km",
  	"edu.km",
  	"mil.km",
  	"ass.km",
  	"com.km",
  	"coop.km",
  	"asso.km",
  	"presse.km",
  	"medecin.km",
  	"notaires.km",
  	"pharmaciens.km",
  	"veterinaire.km",
  	"gouv.km",
  	"kn",
  	"net.kn",
  	"org.kn",
  	"edu.kn",
  	"gov.kn",
  	"kp",
  	"com.kp",
  	"edu.kp",
  	"gov.kp",
  	"org.kp",
  	"rep.kp",
  	"tra.kp",
  	"kr",
  	"ac.kr",
  	"co.kr",
  	"es.kr",
  	"go.kr",
  	"hs.kr",
  	"kg.kr",
  	"mil.kr",
  	"ms.kr",
  	"ne.kr",
  	"or.kr",
  	"pe.kr",
  	"re.kr",
  	"sc.kr",
  	"busan.kr",
  	"chungbuk.kr",
  	"chungnam.kr",
  	"daegu.kr",
  	"daejeon.kr",
  	"gangwon.kr",
  	"gwangju.kr",
  	"gyeongbuk.kr",
  	"gyeonggi.kr",
  	"gyeongnam.kr",
  	"incheon.kr",
  	"jeju.kr",
  	"jeonbuk.kr",
  	"jeonnam.kr",
  	"seoul.kr",
  	"ulsan.kr",
  	"kw",
  	"com.kw",
  	"edu.kw",
  	"emb.kw",
  	"gov.kw",
  	"ind.kw",
  	"net.kw",
  	"org.kw",
  	"ky",
  	"com.ky",
  	"edu.ky",
  	"net.ky",
  	"org.ky",
  	"kz",
  	"org.kz",
  	"edu.kz",
  	"net.kz",
  	"gov.kz",
  	"mil.kz",
  	"com.kz",
  	"la",
  	"int.la",
  	"net.la",
  	"info.la",
  	"edu.la",
  	"gov.la",
  	"per.la",
  	"com.la",
  	"org.la",
  	"lb",
  	"com.lb",
  	"edu.lb",
  	"gov.lb",
  	"net.lb",
  	"org.lb",
  	"lc",
  	"com.lc",
  	"net.lc",
  	"co.lc",
  	"org.lc",
  	"edu.lc",
  	"gov.lc",
  	"li",
  	"lk",
  	"gov.lk",
  	"sch.lk",
  	"net.lk",
  	"int.lk",
  	"com.lk",
  	"org.lk",
  	"edu.lk",
  	"ngo.lk",
  	"soc.lk",
  	"web.lk",
  	"ltd.lk",
  	"assn.lk",
  	"grp.lk",
  	"hotel.lk",
  	"ac.lk",
  	"lr",
  	"com.lr",
  	"edu.lr",
  	"gov.lr",
  	"org.lr",
  	"net.lr",
  	"ls",
  	"ac.ls",
  	"biz.ls",
  	"co.ls",
  	"edu.ls",
  	"gov.ls",
  	"info.ls",
  	"net.ls",
  	"org.ls",
  	"sc.ls",
  	"lt",
  	"gov.lt",
  	"lu",
  	"lv",
  	"com.lv",
  	"edu.lv",
  	"gov.lv",
  	"org.lv",
  	"mil.lv",
  	"id.lv",
  	"net.lv",
  	"asn.lv",
  	"conf.lv",
  	"ly",
  	"com.ly",
  	"net.ly",
  	"gov.ly",
  	"plc.ly",
  	"edu.ly",
  	"sch.ly",
  	"med.ly",
  	"org.ly",
  	"id.ly",
  	"ma",
  	"co.ma",
  	"net.ma",
  	"gov.ma",
  	"org.ma",
  	"ac.ma",
  	"press.ma",
  	"mc",
  	"tm.mc",
  	"asso.mc",
  	"md",
  	"me",
  	"co.me",
  	"net.me",
  	"org.me",
  	"edu.me",
  	"ac.me",
  	"gov.me",
  	"its.me",
  	"priv.me",
  	"mg",
  	"org.mg",
  	"nom.mg",
  	"gov.mg",
  	"prd.mg",
  	"tm.mg",
  	"edu.mg",
  	"mil.mg",
  	"com.mg",
  	"co.mg",
  	"mh",
  	"mil",
  	"mk",
  	"com.mk",
  	"org.mk",
  	"net.mk",
  	"edu.mk",
  	"gov.mk",
  	"inf.mk",
  	"name.mk",
  	"ml",
  	"com.ml",
  	"edu.ml",
  	"gouv.ml",
  	"gov.ml",
  	"net.ml",
  	"org.ml",
  	"presse.ml",
  	"*.mm",
  	"mn",
  	"gov.mn",
  	"edu.mn",
  	"org.mn",
  	"mo",
  	"com.mo",
  	"net.mo",
  	"org.mo",
  	"edu.mo",
  	"gov.mo",
  	"mobi",
  	"mp",
  	"mq",
  	"mr",
  	"gov.mr",
  	"ms",
  	"com.ms",
  	"edu.ms",
  	"gov.ms",
  	"net.ms",
  	"org.ms",
  	"mt",
  	"com.mt",
  	"edu.mt",
  	"net.mt",
  	"org.mt",
  	"mu",
  	"com.mu",
  	"net.mu",
  	"org.mu",
  	"gov.mu",
  	"ac.mu",
  	"co.mu",
  	"or.mu",
  	"museum",
  	"academy.museum",
  	"agriculture.museum",
  	"air.museum",
  	"airguard.museum",
  	"alabama.museum",
  	"alaska.museum",
  	"amber.museum",
  	"ambulance.museum",
  	"american.museum",
  	"americana.museum",
  	"americanantiques.museum",
  	"americanart.museum",
  	"amsterdam.museum",
  	"and.museum",
  	"annefrank.museum",
  	"anthro.museum",
  	"anthropology.museum",
  	"antiques.museum",
  	"aquarium.museum",
  	"arboretum.museum",
  	"archaeological.museum",
  	"archaeology.museum",
  	"architecture.museum",
  	"art.museum",
  	"artanddesign.museum",
  	"artcenter.museum",
  	"artdeco.museum",
  	"arteducation.museum",
  	"artgallery.museum",
  	"arts.museum",
  	"artsandcrafts.museum",
  	"asmatart.museum",
  	"assassination.museum",
  	"assisi.museum",
  	"association.museum",
  	"astronomy.museum",
  	"atlanta.museum",
  	"austin.museum",
  	"australia.museum",
  	"automotive.museum",
  	"aviation.museum",
  	"axis.museum",
  	"badajoz.museum",
  	"baghdad.museum",
  	"bahn.museum",
  	"bale.museum",
  	"baltimore.museum",
  	"barcelona.museum",
  	"baseball.museum",
  	"basel.museum",
  	"baths.museum",
  	"bauern.museum",
  	"beauxarts.museum",
  	"beeldengeluid.museum",
  	"bellevue.museum",
  	"bergbau.museum",
  	"berkeley.museum",
  	"berlin.museum",
  	"bern.museum",
  	"bible.museum",
  	"bilbao.museum",
  	"bill.museum",
  	"birdart.museum",
  	"birthplace.museum",
  	"bonn.museum",
  	"boston.museum",
  	"botanical.museum",
  	"botanicalgarden.museum",
  	"botanicgarden.museum",
  	"botany.museum",
  	"brandywinevalley.museum",
  	"brasil.museum",
  	"bristol.museum",
  	"british.museum",
  	"britishcolumbia.museum",
  	"broadcast.museum",
  	"brunel.museum",
  	"brussel.museum",
  	"brussels.museum",
  	"bruxelles.museum",
  	"building.museum",
  	"burghof.museum",
  	"bus.museum",
  	"bushey.museum",
  	"cadaques.museum",
  	"california.museum",
  	"cambridge.museum",
  	"can.museum",
  	"canada.museum",
  	"capebreton.museum",
  	"carrier.museum",
  	"cartoonart.museum",
  	"casadelamoneda.museum",
  	"castle.museum",
  	"castres.museum",
  	"celtic.museum",
  	"center.museum",
  	"chattanooga.museum",
  	"cheltenham.museum",
  	"chesapeakebay.museum",
  	"chicago.museum",
  	"children.museum",
  	"childrens.museum",
  	"childrensgarden.museum",
  	"chiropractic.museum",
  	"chocolate.museum",
  	"christiansburg.museum",
  	"cincinnati.museum",
  	"cinema.museum",
  	"circus.museum",
  	"civilisation.museum",
  	"civilization.museum",
  	"civilwar.museum",
  	"clinton.museum",
  	"clock.museum",
  	"coal.museum",
  	"coastaldefence.museum",
  	"cody.museum",
  	"coldwar.museum",
  	"collection.museum",
  	"colonialwilliamsburg.museum",
  	"coloradoplateau.museum",
  	"columbia.museum",
  	"columbus.museum",
  	"communication.museum",
  	"communications.museum",
  	"community.museum",
  	"computer.museum",
  	"computerhistory.museum",
  	"comunicações.museum",
  	"contemporary.museum",
  	"contemporaryart.museum",
  	"convent.museum",
  	"copenhagen.museum",
  	"corporation.museum",
  	"correios-e-telecomunicações.museum",
  	"corvette.museum",
  	"costume.museum",
  	"countryestate.museum",
  	"county.museum",
  	"crafts.museum",
  	"cranbrook.museum",
  	"creation.museum",
  	"cultural.museum",
  	"culturalcenter.museum",
  	"culture.museum",
  	"cyber.museum",
  	"cymru.museum",
  	"dali.museum",
  	"dallas.museum",
  	"database.museum",
  	"ddr.museum",
  	"decorativearts.museum",
  	"delaware.museum",
  	"delmenhorst.museum",
  	"denmark.museum",
  	"depot.museum",
  	"design.museum",
  	"detroit.museum",
  	"dinosaur.museum",
  	"discovery.museum",
  	"dolls.museum",
  	"donostia.museum",
  	"durham.museum",
  	"eastafrica.museum",
  	"eastcoast.museum",
  	"education.museum",
  	"educational.museum",
  	"egyptian.museum",
  	"eisenbahn.museum",
  	"elburg.museum",
  	"elvendrell.museum",
  	"embroidery.museum",
  	"encyclopedic.museum",
  	"england.museum",
  	"entomology.museum",
  	"environment.museum",
  	"environmentalconservation.museum",
  	"epilepsy.museum",
  	"essex.museum",
  	"estate.museum",
  	"ethnology.museum",
  	"exeter.museum",
  	"exhibition.museum",
  	"family.museum",
  	"farm.museum",
  	"farmequipment.museum",
  	"farmers.museum",
  	"farmstead.museum",
  	"field.museum",
  	"figueres.museum",
  	"filatelia.museum",
  	"film.museum",
  	"fineart.museum",
  	"finearts.museum",
  	"finland.museum",
  	"flanders.museum",
  	"florida.museum",
  	"force.museum",
  	"fortmissoula.museum",
  	"fortworth.museum",
  	"foundation.museum",
  	"francaise.museum",
  	"frankfurt.museum",
  	"franziskaner.museum",
  	"freemasonry.museum",
  	"freiburg.museum",
  	"fribourg.museum",
  	"frog.museum",
  	"fundacio.museum",
  	"furniture.museum",
  	"gallery.museum",
  	"garden.museum",
  	"gateway.museum",
  	"geelvinck.museum",
  	"gemological.museum",
  	"geology.museum",
  	"georgia.museum",
  	"giessen.museum",
  	"glas.museum",
  	"glass.museum",
  	"gorge.museum",
  	"grandrapids.museum",
  	"graz.museum",
  	"guernsey.museum",
  	"halloffame.museum",
  	"hamburg.museum",
  	"handson.museum",
  	"harvestcelebration.museum",
  	"hawaii.museum",
  	"health.museum",
  	"heimatunduhren.museum",
  	"hellas.museum",
  	"helsinki.museum",
  	"hembygdsforbund.museum",
  	"heritage.museum",
  	"histoire.museum",
  	"historical.museum",
  	"historicalsociety.museum",
  	"historichouses.museum",
  	"historisch.museum",
  	"historisches.museum",
  	"history.museum",
  	"historyofscience.museum",
  	"horology.museum",
  	"house.museum",
  	"humanities.museum",
  	"illustration.museum",
  	"imageandsound.museum",
  	"indian.museum",
  	"indiana.museum",
  	"indianapolis.museum",
  	"indianmarket.museum",
  	"intelligence.museum",
  	"interactive.museum",
  	"iraq.museum",
  	"iron.museum",
  	"isleofman.museum",
  	"jamison.museum",
  	"jefferson.museum",
  	"jerusalem.museum",
  	"jewelry.museum",
  	"jewish.museum",
  	"jewishart.museum",
  	"jfk.museum",
  	"journalism.museum",
  	"judaica.museum",
  	"judygarland.museum",
  	"juedisches.museum",
  	"juif.museum",
  	"karate.museum",
  	"karikatur.museum",
  	"kids.museum",
  	"koebenhavn.museum",
  	"koeln.museum",
  	"kunst.museum",
  	"kunstsammlung.museum",
  	"kunstunddesign.museum",
  	"labor.museum",
  	"labour.museum",
  	"lajolla.museum",
  	"lancashire.museum",
  	"landes.museum",
  	"lans.museum",
  	"läns.museum",
  	"larsson.museum",
  	"lewismiller.museum",
  	"lincoln.museum",
  	"linz.museum",
  	"living.museum",
  	"livinghistory.museum",
  	"localhistory.museum",
  	"london.museum",
  	"losangeles.museum",
  	"louvre.museum",
  	"loyalist.museum",
  	"lucerne.museum",
  	"luxembourg.museum",
  	"luzern.museum",
  	"mad.museum",
  	"madrid.museum",
  	"mallorca.museum",
  	"manchester.museum",
  	"mansion.museum",
  	"mansions.museum",
  	"manx.museum",
  	"marburg.museum",
  	"maritime.museum",
  	"maritimo.museum",
  	"maryland.museum",
  	"marylhurst.museum",
  	"media.museum",
  	"medical.museum",
  	"medizinhistorisches.museum",
  	"meeres.museum",
  	"memorial.museum",
  	"mesaverde.museum",
  	"michigan.museum",
  	"midatlantic.museum",
  	"military.museum",
  	"mill.museum",
  	"miners.museum",
  	"mining.museum",
  	"minnesota.museum",
  	"missile.museum",
  	"missoula.museum",
  	"modern.museum",
  	"moma.museum",
  	"money.museum",
  	"monmouth.museum",
  	"monticello.museum",
  	"montreal.museum",
  	"moscow.museum",
  	"motorcycle.museum",
  	"muenchen.museum",
  	"muenster.museum",
  	"mulhouse.museum",
  	"muncie.museum",
  	"museet.museum",
  	"museumcenter.museum",
  	"museumvereniging.museum",
  	"music.museum",
  	"national.museum",
  	"nationalfirearms.museum",
  	"nationalheritage.museum",
  	"nativeamerican.museum",
  	"naturalhistory.museum",
  	"naturalhistorymuseum.museum",
  	"naturalsciences.museum",
  	"nature.museum",
  	"naturhistorisches.museum",
  	"natuurwetenschappen.museum",
  	"naumburg.museum",
  	"naval.museum",
  	"nebraska.museum",
  	"neues.museum",
  	"newhampshire.museum",
  	"newjersey.museum",
  	"newmexico.museum",
  	"newport.museum",
  	"newspaper.museum",
  	"newyork.museum",
  	"niepce.museum",
  	"norfolk.museum",
  	"north.museum",
  	"nrw.museum",
  	"nyc.museum",
  	"nyny.museum",
  	"oceanographic.museum",
  	"oceanographique.museum",
  	"omaha.museum",
  	"online.museum",
  	"ontario.museum",
  	"openair.museum",
  	"oregon.museum",
  	"oregontrail.museum",
  	"otago.museum",
  	"oxford.museum",
  	"pacific.museum",
  	"paderborn.museum",
  	"palace.museum",
  	"paleo.museum",
  	"palmsprings.museum",
  	"panama.museum",
  	"paris.museum",
  	"pasadena.museum",
  	"pharmacy.museum",
  	"philadelphia.museum",
  	"philadelphiaarea.museum",
  	"philately.museum",
  	"phoenix.museum",
  	"photography.museum",
  	"pilots.museum",
  	"pittsburgh.museum",
  	"planetarium.museum",
  	"plantation.museum",
  	"plants.museum",
  	"plaza.museum",
  	"portal.museum",
  	"portland.museum",
  	"portlligat.museum",
  	"posts-and-telecommunications.museum",
  	"preservation.museum",
  	"presidio.museum",
  	"press.museum",
  	"project.museum",
  	"public.museum",
  	"pubol.museum",
  	"quebec.museum",
  	"railroad.museum",
  	"railway.museum",
  	"research.museum",
  	"resistance.museum",
  	"riodejaneiro.museum",
  	"rochester.museum",
  	"rockart.museum",
  	"roma.museum",
  	"russia.museum",
  	"saintlouis.museum",
  	"salem.museum",
  	"salvadordali.museum",
  	"salzburg.museum",
  	"sandiego.museum",
  	"sanfrancisco.museum",
  	"santabarbara.museum",
  	"santacruz.museum",
  	"santafe.museum",
  	"saskatchewan.museum",
  	"satx.museum",
  	"savannahga.museum",
  	"schlesisches.museum",
  	"schoenbrunn.museum",
  	"schokoladen.museum",
  	"school.museum",
  	"schweiz.museum",
  	"science.museum",
  	"scienceandhistory.museum",
  	"scienceandindustry.museum",
  	"sciencecenter.museum",
  	"sciencecenters.museum",
  	"science-fiction.museum",
  	"sciencehistory.museum",
  	"sciences.museum",
  	"sciencesnaturelles.museum",
  	"scotland.museum",
  	"seaport.museum",
  	"settlement.museum",
  	"settlers.museum",
  	"shell.museum",
  	"sherbrooke.museum",
  	"sibenik.museum",
  	"silk.museum",
  	"ski.museum",
  	"skole.museum",
  	"society.museum",
  	"sologne.museum",
  	"soundandvision.museum",
  	"southcarolina.museum",
  	"southwest.museum",
  	"space.museum",
  	"spy.museum",
  	"square.museum",
  	"stadt.museum",
  	"stalbans.museum",
  	"starnberg.museum",
  	"state.museum",
  	"stateofdelaware.museum",
  	"station.museum",
  	"steam.museum",
  	"steiermark.museum",
  	"stjohn.museum",
  	"stockholm.museum",
  	"stpetersburg.museum",
  	"stuttgart.museum",
  	"suisse.museum",
  	"surgeonshall.museum",
  	"surrey.museum",
  	"svizzera.museum",
  	"sweden.museum",
  	"sydney.museum",
  	"tank.museum",
  	"tcm.museum",
  	"technology.museum",
  	"telekommunikation.museum",
  	"television.museum",
  	"texas.museum",
  	"textile.museum",
  	"theater.museum",
  	"time.museum",
  	"timekeeping.museum",
  	"topology.museum",
  	"torino.museum",
  	"touch.museum",
  	"town.museum",
  	"transport.museum",
  	"tree.museum",
  	"trolley.museum",
  	"trust.museum",
  	"trustee.museum",
  	"uhren.museum",
  	"ulm.museum",
  	"undersea.museum",
  	"university.museum",
  	"usa.museum",
  	"usantiques.museum",
  	"usarts.museum",
  	"uscountryestate.museum",
  	"usculture.museum",
  	"usdecorativearts.museum",
  	"usgarden.museum",
  	"ushistory.museum",
  	"ushuaia.museum",
  	"uslivinghistory.museum",
  	"utah.museum",
  	"uvic.museum",
  	"valley.museum",
  	"vantaa.museum",
  	"versailles.museum",
  	"viking.museum",
  	"village.museum",
  	"virginia.museum",
  	"virtual.museum",
  	"virtuel.museum",
  	"vlaanderen.museum",
  	"volkenkunde.museum",
  	"wales.museum",
  	"wallonie.museum",
  	"war.museum",
  	"washingtondc.museum",
  	"watchandclock.museum",
  	"watch-and-clock.museum",
  	"western.museum",
  	"westfalen.museum",
  	"whaling.museum",
  	"wildlife.museum",
  	"williamsburg.museum",
  	"windmill.museum",
  	"workshop.museum",
  	"york.museum",
  	"yorkshire.museum",
  	"yosemite.museum",
  	"youth.museum",
  	"zoological.museum",
  	"zoology.museum",
  	"ירושלים.museum",
  	"иком.museum",
  	"mv",
  	"aero.mv",
  	"biz.mv",
  	"com.mv",
  	"coop.mv",
  	"edu.mv",
  	"gov.mv",
  	"info.mv",
  	"int.mv",
  	"mil.mv",
  	"museum.mv",
  	"name.mv",
  	"net.mv",
  	"org.mv",
  	"pro.mv",
  	"mw",
  	"ac.mw",
  	"biz.mw",
  	"co.mw",
  	"com.mw",
  	"coop.mw",
  	"edu.mw",
  	"gov.mw",
  	"int.mw",
  	"museum.mw",
  	"net.mw",
  	"org.mw",
  	"mx",
  	"com.mx",
  	"org.mx",
  	"gob.mx",
  	"edu.mx",
  	"net.mx",
  	"my",
  	"biz.my",
  	"com.my",
  	"edu.my",
  	"gov.my",
  	"mil.my",
  	"name.my",
  	"net.my",
  	"org.my",
  	"mz",
  	"ac.mz",
  	"adv.mz",
  	"co.mz",
  	"edu.mz",
  	"gov.mz",
  	"mil.mz",
  	"net.mz",
  	"org.mz",
  	"na",
  	"info.na",
  	"pro.na",
  	"name.na",
  	"school.na",
  	"or.na",
  	"dr.na",
  	"us.na",
  	"mx.na",
  	"ca.na",
  	"in.na",
  	"cc.na",
  	"tv.na",
  	"ws.na",
  	"mobi.na",
  	"co.na",
  	"com.na",
  	"org.na",
  	"name",
  	"nc",
  	"asso.nc",
  	"nom.nc",
  	"ne",
  	"net",
  	"nf",
  	"com.nf",
  	"net.nf",
  	"per.nf",
  	"rec.nf",
  	"web.nf",
  	"arts.nf",
  	"firm.nf",
  	"info.nf",
  	"other.nf",
  	"store.nf",
  	"ng",
  	"com.ng",
  	"edu.ng",
  	"gov.ng",
  	"i.ng",
  	"mil.ng",
  	"mobi.ng",
  	"name.ng",
  	"net.ng",
  	"org.ng",
  	"sch.ng",
  	"ni",
  	"ac.ni",
  	"biz.ni",
  	"co.ni",
  	"com.ni",
  	"edu.ni",
  	"gob.ni",
  	"in.ni",
  	"info.ni",
  	"int.ni",
  	"mil.ni",
  	"net.ni",
  	"nom.ni",
  	"org.ni",
  	"web.ni",
  	"nl",
  	"no",
  	"fhs.no",
  	"vgs.no",
  	"fylkesbibl.no",
  	"folkebibl.no",
  	"museum.no",
  	"idrett.no",
  	"priv.no",
  	"mil.no",
  	"stat.no",
  	"dep.no",
  	"kommune.no",
  	"herad.no",
  	"aa.no",
  	"ah.no",
  	"bu.no",
  	"fm.no",
  	"hl.no",
  	"hm.no",
  	"jan-mayen.no",
  	"mr.no",
  	"nl.no",
  	"nt.no",
  	"of.no",
  	"ol.no",
  	"oslo.no",
  	"rl.no",
  	"sf.no",
  	"st.no",
  	"svalbard.no",
  	"tm.no",
  	"tr.no",
  	"va.no",
  	"vf.no",
  	"gs.aa.no",
  	"gs.ah.no",
  	"gs.bu.no",
  	"gs.fm.no",
  	"gs.hl.no",
  	"gs.hm.no",
  	"gs.jan-mayen.no",
  	"gs.mr.no",
  	"gs.nl.no",
  	"gs.nt.no",
  	"gs.of.no",
  	"gs.ol.no",
  	"gs.oslo.no",
  	"gs.rl.no",
  	"gs.sf.no",
  	"gs.st.no",
  	"gs.svalbard.no",
  	"gs.tm.no",
  	"gs.tr.no",
  	"gs.va.no",
  	"gs.vf.no",
  	"akrehamn.no",
  	"åkrehamn.no",
  	"algard.no",
  	"ålgård.no",
  	"arna.no",
  	"brumunddal.no",
  	"bryne.no",
  	"bronnoysund.no",
  	"brønnøysund.no",
  	"drobak.no",
  	"drøbak.no",
  	"egersund.no",
  	"fetsund.no",
  	"floro.no",
  	"florø.no",
  	"fredrikstad.no",
  	"hokksund.no",
  	"honefoss.no",
  	"hønefoss.no",
  	"jessheim.no",
  	"jorpeland.no",
  	"jørpeland.no",
  	"kirkenes.no",
  	"kopervik.no",
  	"krokstadelva.no",
  	"langevag.no",
  	"langevåg.no",
  	"leirvik.no",
  	"mjondalen.no",
  	"mjøndalen.no",
  	"mo-i-rana.no",
  	"mosjoen.no",
  	"mosjøen.no",
  	"nesoddtangen.no",
  	"orkanger.no",
  	"osoyro.no",
  	"osøyro.no",
  	"raholt.no",
  	"råholt.no",
  	"sandnessjoen.no",
  	"sandnessjøen.no",
  	"skedsmokorset.no",
  	"slattum.no",
  	"spjelkavik.no",
  	"stathelle.no",
  	"stavern.no",
  	"stjordalshalsen.no",
  	"stjørdalshalsen.no",
  	"tananger.no",
  	"tranby.no",
  	"vossevangen.no",
  	"afjord.no",
  	"åfjord.no",
  	"agdenes.no",
  	"al.no",
  	"ål.no",
  	"alesund.no",
  	"ålesund.no",
  	"alstahaug.no",
  	"alta.no",
  	"áltá.no",
  	"alaheadju.no",
  	"álaheadju.no",
  	"alvdal.no",
  	"amli.no",
  	"åmli.no",
  	"amot.no",
  	"åmot.no",
  	"andebu.no",
  	"andoy.no",
  	"andøy.no",
  	"andasuolo.no",
  	"ardal.no",
  	"årdal.no",
  	"aremark.no",
  	"arendal.no",
  	"ås.no",
  	"aseral.no",
  	"åseral.no",
  	"asker.no",
  	"askim.no",
  	"askvoll.no",
  	"askoy.no",
  	"askøy.no",
  	"asnes.no",
  	"åsnes.no",
  	"audnedaln.no",
  	"aukra.no",
  	"aure.no",
  	"aurland.no",
  	"aurskog-holand.no",
  	"aurskog-høland.no",
  	"austevoll.no",
  	"austrheim.no",
  	"averoy.no",
  	"averøy.no",
  	"balestrand.no",
  	"ballangen.no",
  	"balat.no",
  	"bálát.no",
  	"balsfjord.no",
  	"bahccavuotna.no",
  	"báhccavuotna.no",
  	"bamble.no",
  	"bardu.no",
  	"beardu.no",
  	"beiarn.no",
  	"bajddar.no",
  	"bájddar.no",
  	"baidar.no",
  	"báidár.no",
  	"berg.no",
  	"bergen.no",
  	"berlevag.no",
  	"berlevåg.no",
  	"bearalvahki.no",
  	"bearalváhki.no",
  	"bindal.no",
  	"birkenes.no",
  	"bjarkoy.no",
  	"bjarkøy.no",
  	"bjerkreim.no",
  	"bjugn.no",
  	"bodo.no",
  	"bodø.no",
  	"badaddja.no",
  	"bådåddjå.no",
  	"budejju.no",
  	"bokn.no",
  	"bremanger.no",
  	"bronnoy.no",
  	"brønnøy.no",
  	"bygland.no",
  	"bykle.no",
  	"barum.no",
  	"bærum.no",
  	"bo.telemark.no",
  	"bø.telemark.no",
  	"bo.nordland.no",
  	"bø.nordland.no",
  	"bievat.no",
  	"bievát.no",
  	"bomlo.no",
  	"bømlo.no",
  	"batsfjord.no",
  	"båtsfjord.no",
  	"bahcavuotna.no",
  	"báhcavuotna.no",
  	"dovre.no",
  	"drammen.no",
  	"drangedal.no",
  	"dyroy.no",
  	"dyrøy.no",
  	"donna.no",
  	"dønna.no",
  	"eid.no",
  	"eidfjord.no",
  	"eidsberg.no",
  	"eidskog.no",
  	"eidsvoll.no",
  	"eigersund.no",
  	"elverum.no",
  	"enebakk.no",
  	"engerdal.no",
  	"etne.no",
  	"etnedal.no",
  	"evenes.no",
  	"evenassi.no",
  	"evenášši.no",
  	"evje-og-hornnes.no",
  	"farsund.no",
  	"fauske.no",
  	"fuossko.no",
  	"fuoisku.no",
  	"fedje.no",
  	"fet.no",
  	"finnoy.no",
  	"finnøy.no",
  	"fitjar.no",
  	"fjaler.no",
  	"fjell.no",
  	"flakstad.no",
  	"flatanger.no",
  	"flekkefjord.no",
  	"flesberg.no",
  	"flora.no",
  	"fla.no",
  	"flå.no",
  	"folldal.no",
  	"forsand.no",
  	"fosnes.no",
  	"frei.no",
  	"frogn.no",
  	"froland.no",
  	"frosta.no",
  	"frana.no",
  	"fræna.no",
  	"froya.no",
  	"frøya.no",
  	"fusa.no",
  	"fyresdal.no",
  	"forde.no",
  	"førde.no",
  	"gamvik.no",
  	"gangaviika.no",
  	"gáŋgaviika.no",
  	"gaular.no",
  	"gausdal.no",
  	"gildeskal.no",
  	"gildeskål.no",
  	"giske.no",
  	"gjemnes.no",
  	"gjerdrum.no",
  	"gjerstad.no",
  	"gjesdal.no",
  	"gjovik.no",
  	"gjøvik.no",
  	"gloppen.no",
  	"gol.no",
  	"gran.no",
  	"grane.no",
  	"granvin.no",
  	"gratangen.no",
  	"grimstad.no",
  	"grong.no",
  	"kraanghke.no",
  	"kråanghke.no",
  	"grue.no",
  	"gulen.no",
  	"hadsel.no",
  	"halden.no",
  	"halsa.no",
  	"hamar.no",
  	"hamaroy.no",
  	"habmer.no",
  	"hábmer.no",
  	"hapmir.no",
  	"hápmir.no",
  	"hammerfest.no",
  	"hammarfeasta.no",
  	"hámmárfeasta.no",
  	"haram.no",
  	"hareid.no",
  	"harstad.no",
  	"hasvik.no",
  	"aknoluokta.no",
  	"ákŋoluokta.no",
  	"hattfjelldal.no",
  	"aarborte.no",
  	"haugesund.no",
  	"hemne.no",
  	"hemnes.no",
  	"hemsedal.no",
  	"heroy.more-og-romsdal.no",
  	"herøy.møre-og-romsdal.no",
  	"heroy.nordland.no",
  	"herøy.nordland.no",
  	"hitra.no",
  	"hjartdal.no",
  	"hjelmeland.no",
  	"hobol.no",
  	"hobøl.no",
  	"hof.no",
  	"hol.no",
  	"hole.no",
  	"holmestrand.no",
  	"holtalen.no",
  	"holtålen.no",
  	"hornindal.no",
  	"horten.no",
  	"hurdal.no",
  	"hurum.no",
  	"hvaler.no",
  	"hyllestad.no",
  	"hagebostad.no",
  	"hægebostad.no",
  	"hoyanger.no",
  	"høyanger.no",
  	"hoylandet.no",
  	"høylandet.no",
  	"ha.no",
  	"hå.no",
  	"ibestad.no",
  	"inderoy.no",
  	"inderøy.no",
  	"iveland.no",
  	"jevnaker.no",
  	"jondal.no",
  	"jolster.no",
  	"jølster.no",
  	"karasjok.no",
  	"karasjohka.no",
  	"kárášjohka.no",
  	"karlsoy.no",
  	"galsa.no",
  	"gálsá.no",
  	"karmoy.no",
  	"karmøy.no",
  	"kautokeino.no",
  	"guovdageaidnu.no",
  	"klepp.no",
  	"klabu.no",
  	"klæbu.no",
  	"kongsberg.no",
  	"kongsvinger.no",
  	"kragero.no",
  	"kragerø.no",
  	"kristiansand.no",
  	"kristiansund.no",
  	"krodsherad.no",
  	"krødsherad.no",
  	"kvalsund.no",
  	"rahkkeravju.no",
  	"ráhkkerávju.no",
  	"kvam.no",
  	"kvinesdal.no",
  	"kvinnherad.no",
  	"kviteseid.no",
  	"kvitsoy.no",
  	"kvitsøy.no",
  	"kvafjord.no",
  	"kvæfjord.no",
  	"giehtavuoatna.no",
  	"kvanangen.no",
  	"kvænangen.no",
  	"navuotna.no",
  	"návuotna.no",
  	"kafjord.no",
  	"kåfjord.no",
  	"gaivuotna.no",
  	"gáivuotna.no",
  	"larvik.no",
  	"lavangen.no",
  	"lavagis.no",
  	"loabat.no",
  	"loabát.no",
  	"lebesby.no",
  	"davvesiida.no",
  	"leikanger.no",
  	"leirfjord.no",
  	"leka.no",
  	"leksvik.no",
  	"lenvik.no",
  	"leangaviika.no",
  	"leaŋgaviika.no",
  	"lesja.no",
  	"levanger.no",
  	"lier.no",
  	"lierne.no",
  	"lillehammer.no",
  	"lillesand.no",
  	"lindesnes.no",
  	"lindas.no",
  	"lindås.no",
  	"lom.no",
  	"loppa.no",
  	"lahppi.no",
  	"láhppi.no",
  	"lund.no",
  	"lunner.no",
  	"luroy.no",
  	"lurøy.no",
  	"luster.no",
  	"lyngdal.no",
  	"lyngen.no",
  	"ivgu.no",
  	"lardal.no",
  	"lerdal.no",
  	"lærdal.no",
  	"lodingen.no",
  	"lødingen.no",
  	"lorenskog.no",
  	"lørenskog.no",
  	"loten.no",
  	"løten.no",
  	"malvik.no",
  	"masoy.no",
  	"måsøy.no",
  	"muosat.no",
  	"muosát.no",
  	"mandal.no",
  	"marker.no",
  	"marnardal.no",
  	"masfjorden.no",
  	"meland.no",
  	"meldal.no",
  	"melhus.no",
  	"meloy.no",
  	"meløy.no",
  	"meraker.no",
  	"meråker.no",
  	"moareke.no",
  	"moåreke.no",
  	"midsund.no",
  	"midtre-gauldal.no",
  	"modalen.no",
  	"modum.no",
  	"molde.no",
  	"moskenes.no",
  	"moss.no",
  	"mosvik.no",
  	"malselv.no",
  	"målselv.no",
  	"malatvuopmi.no",
  	"málatvuopmi.no",
  	"namdalseid.no",
  	"aejrie.no",
  	"namsos.no",
  	"namsskogan.no",
  	"naamesjevuemie.no",
  	"nååmesjevuemie.no",
  	"laakesvuemie.no",
  	"nannestad.no",
  	"narvik.no",
  	"narviika.no",
  	"naustdal.no",
  	"nedre-eiker.no",
  	"nes.akershus.no",
  	"nes.buskerud.no",
  	"nesna.no",
  	"nesodden.no",
  	"nesseby.no",
  	"unjarga.no",
  	"unjárga.no",
  	"nesset.no",
  	"nissedal.no",
  	"nittedal.no",
  	"nord-aurdal.no",
  	"nord-fron.no",
  	"nord-odal.no",
  	"norddal.no",
  	"nordkapp.no",
  	"davvenjarga.no",
  	"davvenjárga.no",
  	"nordre-land.no",
  	"nordreisa.no",
  	"raisa.no",
  	"ráisa.no",
  	"nore-og-uvdal.no",
  	"notodden.no",
  	"naroy.no",
  	"nærøy.no",
  	"notteroy.no",
  	"nøtterøy.no",
  	"odda.no",
  	"oksnes.no",
  	"øksnes.no",
  	"oppdal.no",
  	"oppegard.no",
  	"oppegård.no",
  	"orkdal.no",
  	"orland.no",
  	"ørland.no",
  	"orskog.no",
  	"ørskog.no",
  	"orsta.no",
  	"ørsta.no",
  	"os.hedmark.no",
  	"os.hordaland.no",
  	"osen.no",
  	"osteroy.no",
  	"osterøy.no",
  	"ostre-toten.no",
  	"østre-toten.no",
  	"overhalla.no",
  	"ovre-eiker.no",
  	"øvre-eiker.no",
  	"oyer.no",
  	"øyer.no",
  	"oygarden.no",
  	"øygarden.no",
  	"oystre-slidre.no",
  	"øystre-slidre.no",
  	"porsanger.no",
  	"porsangu.no",
  	"porsáŋgu.no",
  	"porsgrunn.no",
  	"radoy.no",
  	"radøy.no",
  	"rakkestad.no",
  	"rana.no",
  	"ruovat.no",
  	"randaberg.no",
  	"rauma.no",
  	"rendalen.no",
  	"rennebu.no",
  	"rennesoy.no",
  	"rennesøy.no",
  	"rindal.no",
  	"ringebu.no",
  	"ringerike.no",
  	"ringsaker.no",
  	"rissa.no",
  	"risor.no",
  	"risør.no",
  	"roan.no",
  	"rollag.no",
  	"rygge.no",
  	"ralingen.no",
  	"rælingen.no",
  	"rodoy.no",
  	"rødøy.no",
  	"romskog.no",
  	"rømskog.no",
  	"roros.no",
  	"røros.no",
  	"rost.no",
  	"røst.no",
  	"royken.no",
  	"røyken.no",
  	"royrvik.no",
  	"røyrvik.no",
  	"rade.no",
  	"råde.no",
  	"salangen.no",
  	"siellak.no",
  	"saltdal.no",
  	"salat.no",
  	"sálát.no",
  	"sálat.no",
  	"samnanger.no",
  	"sande.more-og-romsdal.no",
  	"sande.møre-og-romsdal.no",
  	"sande.vestfold.no",
  	"sandefjord.no",
  	"sandnes.no",
  	"sandoy.no",
  	"sandøy.no",
  	"sarpsborg.no",
  	"sauda.no",
  	"sauherad.no",
  	"sel.no",
  	"selbu.no",
  	"selje.no",
  	"seljord.no",
  	"sigdal.no",
  	"siljan.no",
  	"sirdal.no",
  	"skaun.no",
  	"skedsmo.no",
  	"ski.no",
  	"skien.no",
  	"skiptvet.no",
  	"skjervoy.no",
  	"skjervøy.no",
  	"skierva.no",
  	"skiervá.no",
  	"skjak.no",
  	"skjåk.no",
  	"skodje.no",
  	"skanland.no",
  	"skånland.no",
  	"skanit.no",
  	"skánit.no",
  	"smola.no",
  	"smøla.no",
  	"snillfjord.no",
  	"snasa.no",
  	"snåsa.no",
  	"snoasa.no",
  	"snaase.no",
  	"snåase.no",
  	"sogndal.no",
  	"sokndal.no",
  	"sola.no",
  	"solund.no",
  	"songdalen.no",
  	"sortland.no",
  	"spydeberg.no",
  	"stange.no",
  	"stavanger.no",
  	"steigen.no",
  	"steinkjer.no",
  	"stjordal.no",
  	"stjørdal.no",
  	"stokke.no",
  	"stor-elvdal.no",
  	"stord.no",
  	"stordal.no",
  	"storfjord.no",
  	"omasvuotna.no",
  	"strand.no",
  	"stranda.no",
  	"stryn.no",
  	"sula.no",
  	"suldal.no",
  	"sund.no",
  	"sunndal.no",
  	"surnadal.no",
  	"sveio.no",
  	"svelvik.no",
  	"sykkylven.no",
  	"sogne.no",
  	"søgne.no",
  	"somna.no",
  	"sømna.no",
  	"sondre-land.no",
  	"søndre-land.no",
  	"sor-aurdal.no",
  	"sør-aurdal.no",
  	"sor-fron.no",
  	"sør-fron.no",
  	"sor-odal.no",
  	"sør-odal.no",
  	"sor-varanger.no",
  	"sør-varanger.no",
  	"matta-varjjat.no",
  	"mátta-várjjat.no",
  	"sorfold.no",
  	"sørfold.no",
  	"sorreisa.no",
  	"sørreisa.no",
  	"sorum.no",
  	"sørum.no",
  	"tana.no",
  	"deatnu.no",
  	"time.no",
  	"tingvoll.no",
  	"tinn.no",
  	"tjeldsund.no",
  	"dielddanuorri.no",
  	"tjome.no",
  	"tjøme.no",
  	"tokke.no",
  	"tolga.no",
  	"torsken.no",
  	"tranoy.no",
  	"tranøy.no",
  	"tromso.no",
  	"tromsø.no",
  	"tromsa.no",
  	"romsa.no",
  	"trondheim.no",
  	"troandin.no",
  	"trysil.no",
  	"trana.no",
  	"træna.no",
  	"trogstad.no",
  	"trøgstad.no",
  	"tvedestrand.no",
  	"tydal.no",
  	"tynset.no",
  	"tysfjord.no",
  	"divtasvuodna.no",
  	"divttasvuotna.no",
  	"tysnes.no",
  	"tysvar.no",
  	"tysvær.no",
  	"tonsberg.no",
  	"tønsberg.no",
  	"ullensaker.no",
  	"ullensvang.no",
  	"ulvik.no",
  	"utsira.no",
  	"vadso.no",
  	"vadsø.no",
  	"cahcesuolo.no",
  	"čáhcesuolo.no",
  	"vaksdal.no",
  	"valle.no",
  	"vang.no",
  	"vanylven.no",
  	"vardo.no",
  	"vardø.no",
  	"varggat.no",
  	"várggát.no",
  	"vefsn.no",
  	"vaapste.no",
  	"vega.no",
  	"vegarshei.no",
  	"vegårshei.no",
  	"vennesla.no",
  	"verdal.no",
  	"verran.no",
  	"vestby.no",
  	"vestnes.no",
  	"vestre-slidre.no",
  	"vestre-toten.no",
  	"vestvagoy.no",
  	"vestvågøy.no",
  	"vevelstad.no",
  	"vik.no",
  	"vikna.no",
  	"vindafjord.no",
  	"volda.no",
  	"voss.no",
  	"varoy.no",
  	"værøy.no",
  	"vagan.no",
  	"vågan.no",
  	"voagat.no",
  	"vagsoy.no",
  	"vågsøy.no",
  	"vaga.no",
  	"vågå.no",
  	"valer.ostfold.no",
  	"våler.østfold.no",
  	"valer.hedmark.no",
  	"våler.hedmark.no",
  	"*.np",
  	"nr",
  	"biz.nr",
  	"info.nr",
  	"gov.nr",
  	"edu.nr",
  	"org.nr",
  	"net.nr",
  	"com.nr",
  	"nu",
  	"nz",
  	"ac.nz",
  	"co.nz",
  	"cri.nz",
  	"geek.nz",
  	"gen.nz",
  	"govt.nz",
  	"health.nz",
  	"iwi.nz",
  	"kiwi.nz",
  	"maori.nz",
  	"mil.nz",
  	"māori.nz",
  	"net.nz",
  	"org.nz",
  	"parliament.nz",
  	"school.nz",
  	"om",
  	"co.om",
  	"com.om",
  	"edu.om",
  	"gov.om",
  	"med.om",
  	"museum.om",
  	"net.om",
  	"org.om",
  	"pro.om",
  	"onion",
  	"org",
  	"pa",
  	"ac.pa",
  	"gob.pa",
  	"com.pa",
  	"org.pa",
  	"sld.pa",
  	"edu.pa",
  	"net.pa",
  	"ing.pa",
  	"abo.pa",
  	"med.pa",
  	"nom.pa",
  	"pe",
  	"edu.pe",
  	"gob.pe",
  	"nom.pe",
  	"mil.pe",
  	"org.pe",
  	"com.pe",
  	"net.pe",
  	"pf",
  	"com.pf",
  	"org.pf",
  	"edu.pf",
  	"*.pg",
  	"ph",
  	"com.ph",
  	"net.ph",
  	"org.ph",
  	"gov.ph",
  	"edu.ph",
  	"ngo.ph",
  	"mil.ph",
  	"i.ph",
  	"pk",
  	"com.pk",
  	"net.pk",
  	"edu.pk",
  	"org.pk",
  	"fam.pk",
  	"biz.pk",
  	"web.pk",
  	"gov.pk",
  	"gob.pk",
  	"gok.pk",
  	"gon.pk",
  	"gop.pk",
  	"gos.pk",
  	"info.pk",
  	"pl",
  	"com.pl",
  	"net.pl",
  	"org.pl",
  	"aid.pl",
  	"agro.pl",
  	"atm.pl",
  	"auto.pl",
  	"biz.pl",
  	"edu.pl",
  	"gmina.pl",
  	"gsm.pl",
  	"info.pl",
  	"mail.pl",
  	"miasta.pl",
  	"media.pl",
  	"mil.pl",
  	"nieruchomosci.pl",
  	"nom.pl",
  	"pc.pl",
  	"powiat.pl",
  	"priv.pl",
  	"realestate.pl",
  	"rel.pl",
  	"sex.pl",
  	"shop.pl",
  	"sklep.pl",
  	"sos.pl",
  	"szkola.pl",
  	"targi.pl",
  	"tm.pl",
  	"tourism.pl",
  	"travel.pl",
  	"turystyka.pl",
  	"gov.pl",
  	"ap.gov.pl",
  	"ic.gov.pl",
  	"is.gov.pl",
  	"us.gov.pl",
  	"kmpsp.gov.pl",
  	"kppsp.gov.pl",
  	"kwpsp.gov.pl",
  	"psp.gov.pl",
  	"wskr.gov.pl",
  	"kwp.gov.pl",
  	"mw.gov.pl",
  	"ug.gov.pl",
  	"um.gov.pl",
  	"umig.gov.pl",
  	"ugim.gov.pl",
  	"upow.gov.pl",
  	"uw.gov.pl",
  	"starostwo.gov.pl",
  	"pa.gov.pl",
  	"po.gov.pl",
  	"psse.gov.pl",
  	"pup.gov.pl",
  	"rzgw.gov.pl",
  	"sa.gov.pl",
  	"so.gov.pl",
  	"sr.gov.pl",
  	"wsa.gov.pl",
  	"sko.gov.pl",
  	"uzs.gov.pl",
  	"wiih.gov.pl",
  	"winb.gov.pl",
  	"pinb.gov.pl",
  	"wios.gov.pl",
  	"witd.gov.pl",
  	"wzmiuw.gov.pl",
  	"piw.gov.pl",
  	"wiw.gov.pl",
  	"griw.gov.pl",
  	"wif.gov.pl",
  	"oum.gov.pl",
  	"sdn.gov.pl",
  	"zp.gov.pl",
  	"uppo.gov.pl",
  	"mup.gov.pl",
  	"wuoz.gov.pl",
  	"konsulat.gov.pl",
  	"oirm.gov.pl",
  	"augustow.pl",
  	"babia-gora.pl",
  	"bedzin.pl",
  	"beskidy.pl",
  	"bialowieza.pl",
  	"bialystok.pl",
  	"bielawa.pl",
  	"bieszczady.pl",
  	"boleslawiec.pl",
  	"bydgoszcz.pl",
  	"bytom.pl",
  	"cieszyn.pl",
  	"czeladz.pl",
  	"czest.pl",
  	"dlugoleka.pl",
  	"elblag.pl",
  	"elk.pl",
  	"glogow.pl",
  	"gniezno.pl",
  	"gorlice.pl",
  	"grajewo.pl",
  	"ilawa.pl",
  	"jaworzno.pl",
  	"jelenia-gora.pl",
  	"jgora.pl",
  	"kalisz.pl",
  	"kazimierz-dolny.pl",
  	"karpacz.pl",
  	"kartuzy.pl",
  	"kaszuby.pl",
  	"katowice.pl",
  	"kepno.pl",
  	"ketrzyn.pl",
  	"klodzko.pl",
  	"kobierzyce.pl",
  	"kolobrzeg.pl",
  	"konin.pl",
  	"konskowola.pl",
  	"kutno.pl",
  	"lapy.pl",
  	"lebork.pl",
  	"legnica.pl",
  	"lezajsk.pl",
  	"limanowa.pl",
  	"lomza.pl",
  	"lowicz.pl",
  	"lubin.pl",
  	"lukow.pl",
  	"malbork.pl",
  	"malopolska.pl",
  	"mazowsze.pl",
  	"mazury.pl",
  	"mielec.pl",
  	"mielno.pl",
  	"mragowo.pl",
  	"naklo.pl",
  	"nowaruda.pl",
  	"nysa.pl",
  	"olawa.pl",
  	"olecko.pl",
  	"olkusz.pl",
  	"olsztyn.pl",
  	"opoczno.pl",
  	"opole.pl",
  	"ostroda.pl",
  	"ostroleka.pl",
  	"ostrowiec.pl",
  	"ostrowwlkp.pl",
  	"pila.pl",
  	"pisz.pl",
  	"podhale.pl",
  	"podlasie.pl",
  	"polkowice.pl",
  	"pomorze.pl",
  	"pomorskie.pl",
  	"prochowice.pl",
  	"pruszkow.pl",
  	"przeworsk.pl",
  	"pulawy.pl",
  	"radom.pl",
  	"rawa-maz.pl",
  	"rybnik.pl",
  	"rzeszow.pl",
  	"sanok.pl",
  	"sejny.pl",
  	"slask.pl",
  	"slupsk.pl",
  	"sosnowiec.pl",
  	"stalowa-wola.pl",
  	"skoczow.pl",
  	"starachowice.pl",
  	"stargard.pl",
  	"suwalki.pl",
  	"swidnica.pl",
  	"swiebodzin.pl",
  	"swinoujscie.pl",
  	"szczecin.pl",
  	"szczytno.pl",
  	"tarnobrzeg.pl",
  	"tgory.pl",
  	"turek.pl",
  	"tychy.pl",
  	"ustka.pl",
  	"walbrzych.pl",
  	"warmia.pl",
  	"warszawa.pl",
  	"waw.pl",
  	"wegrow.pl",
  	"wielun.pl",
  	"wlocl.pl",
  	"wloclawek.pl",
  	"wodzislaw.pl",
  	"wolomin.pl",
  	"wroclaw.pl",
  	"zachpomor.pl",
  	"zagan.pl",
  	"zarow.pl",
  	"zgora.pl",
  	"zgorzelec.pl",
  	"pm",
  	"pn",
  	"gov.pn",
  	"co.pn",
  	"org.pn",
  	"edu.pn",
  	"net.pn",
  	"post",
  	"pr",
  	"com.pr",
  	"net.pr",
  	"org.pr",
  	"gov.pr",
  	"edu.pr",
  	"isla.pr",
  	"pro.pr",
  	"biz.pr",
  	"info.pr",
  	"name.pr",
  	"est.pr",
  	"prof.pr",
  	"ac.pr",
  	"pro",
  	"aaa.pro",
  	"aca.pro",
  	"acct.pro",
  	"avocat.pro",
  	"bar.pro",
  	"cpa.pro",
  	"eng.pro",
  	"jur.pro",
  	"law.pro",
  	"med.pro",
  	"recht.pro",
  	"ps",
  	"edu.ps",
  	"gov.ps",
  	"sec.ps",
  	"plo.ps",
  	"com.ps",
  	"org.ps",
  	"net.ps",
  	"pt",
  	"net.pt",
  	"gov.pt",
  	"org.pt",
  	"edu.pt",
  	"int.pt",
  	"publ.pt",
  	"com.pt",
  	"nome.pt",
  	"pw",
  	"co.pw",
  	"ne.pw",
  	"or.pw",
  	"ed.pw",
  	"go.pw",
  	"belau.pw",
  	"py",
  	"com.py",
  	"coop.py",
  	"edu.py",
  	"gov.py",
  	"mil.py",
  	"net.py",
  	"org.py",
  	"qa",
  	"com.qa",
  	"edu.qa",
  	"gov.qa",
  	"mil.qa",
  	"name.qa",
  	"net.qa",
  	"org.qa",
  	"sch.qa",
  	"re",
  	"asso.re",
  	"com.re",
  	"nom.re",
  	"ro",
  	"arts.ro",
  	"com.ro",
  	"firm.ro",
  	"info.ro",
  	"nom.ro",
  	"nt.ro",
  	"org.ro",
  	"rec.ro",
  	"store.ro",
  	"tm.ro",
  	"www.ro",
  	"rs",
  	"ac.rs",
  	"co.rs",
  	"edu.rs",
  	"gov.rs",
  	"in.rs",
  	"org.rs",
  	"ru",
  	"rw",
  	"ac.rw",
  	"co.rw",
  	"coop.rw",
  	"gov.rw",
  	"mil.rw",
  	"net.rw",
  	"org.rw",
  	"sa",
  	"com.sa",
  	"net.sa",
  	"org.sa",
  	"gov.sa",
  	"med.sa",
  	"pub.sa",
  	"edu.sa",
  	"sch.sa",
  	"sb",
  	"com.sb",
  	"edu.sb",
  	"gov.sb",
  	"net.sb",
  	"org.sb",
  	"sc",
  	"com.sc",
  	"gov.sc",
  	"net.sc",
  	"org.sc",
  	"edu.sc",
  	"sd",
  	"com.sd",
  	"net.sd",
  	"org.sd",
  	"edu.sd",
  	"med.sd",
  	"tv.sd",
  	"gov.sd",
  	"info.sd",
  	"se",
  	"a.se",
  	"ac.se",
  	"b.se",
  	"bd.se",
  	"brand.se",
  	"c.se",
  	"d.se",
  	"e.se",
  	"f.se",
  	"fh.se",
  	"fhsk.se",
  	"fhv.se",
  	"g.se",
  	"h.se",
  	"i.se",
  	"k.se",
  	"komforb.se",
  	"kommunalforbund.se",
  	"komvux.se",
  	"l.se",
  	"lanbib.se",
  	"m.se",
  	"n.se",
  	"naturbruksgymn.se",
  	"o.se",
  	"org.se",
  	"p.se",
  	"parti.se",
  	"pp.se",
  	"press.se",
  	"r.se",
  	"s.se",
  	"t.se",
  	"tm.se",
  	"u.se",
  	"w.se",
  	"x.se",
  	"y.se",
  	"z.se",
  	"sg",
  	"com.sg",
  	"net.sg",
  	"org.sg",
  	"gov.sg",
  	"edu.sg",
  	"per.sg",
  	"sh",
  	"com.sh",
  	"net.sh",
  	"gov.sh",
  	"org.sh",
  	"mil.sh",
  	"si",
  	"sj",
  	"sk",
  	"sl",
  	"com.sl",
  	"net.sl",
  	"edu.sl",
  	"gov.sl",
  	"org.sl",
  	"sm",
  	"sn",
  	"art.sn",
  	"com.sn",
  	"edu.sn",
  	"gouv.sn",
  	"org.sn",
  	"perso.sn",
  	"univ.sn",
  	"so",
  	"com.so",
  	"edu.so",
  	"gov.so",
  	"me.so",
  	"net.so",
  	"org.so",
  	"sr",
  	"ss",
  	"biz.ss",
  	"com.ss",
  	"edu.ss",
  	"gov.ss",
  	"me.ss",
  	"net.ss",
  	"org.ss",
  	"sch.ss",
  	"st",
  	"co.st",
  	"com.st",
  	"consulado.st",
  	"edu.st",
  	"embaixada.st",
  	"mil.st",
  	"net.st",
  	"org.st",
  	"principe.st",
  	"saotome.st",
  	"store.st",
  	"su",
  	"sv",
  	"com.sv",
  	"edu.sv",
  	"gob.sv",
  	"org.sv",
  	"red.sv",
  	"sx",
  	"gov.sx",
  	"sy",
  	"edu.sy",
  	"gov.sy",
  	"net.sy",
  	"mil.sy",
  	"com.sy",
  	"org.sy",
  	"sz",
  	"co.sz",
  	"ac.sz",
  	"org.sz",
  	"tc",
  	"td",
  	"tel",
  	"tf",
  	"tg",
  	"th",
  	"ac.th",
  	"co.th",
  	"go.th",
  	"in.th",
  	"mi.th",
  	"net.th",
  	"or.th",
  	"tj",
  	"ac.tj",
  	"biz.tj",
  	"co.tj",
  	"com.tj",
  	"edu.tj",
  	"go.tj",
  	"gov.tj",
  	"int.tj",
  	"mil.tj",
  	"name.tj",
  	"net.tj",
  	"nic.tj",
  	"org.tj",
  	"test.tj",
  	"web.tj",
  	"tk",
  	"tl",
  	"gov.tl",
  	"tm",
  	"com.tm",
  	"co.tm",
  	"org.tm",
  	"net.tm",
  	"nom.tm",
  	"gov.tm",
  	"mil.tm",
  	"edu.tm",
  	"tn",
  	"com.tn",
  	"ens.tn",
  	"fin.tn",
  	"gov.tn",
  	"ind.tn",
  	"info.tn",
  	"intl.tn",
  	"mincom.tn",
  	"nat.tn",
  	"net.tn",
  	"org.tn",
  	"perso.tn",
  	"tourism.tn",
  	"to",
  	"com.to",
  	"gov.to",
  	"net.to",
  	"org.to",
  	"edu.to",
  	"mil.to",
  	"tr",
  	"av.tr",
  	"bbs.tr",
  	"bel.tr",
  	"biz.tr",
  	"com.tr",
  	"dr.tr",
  	"edu.tr",
  	"gen.tr",
  	"gov.tr",
  	"info.tr",
  	"mil.tr",
  	"k12.tr",
  	"kep.tr",
  	"name.tr",
  	"net.tr",
  	"org.tr",
  	"pol.tr",
  	"tel.tr",
  	"tsk.tr",
  	"tv.tr",
  	"web.tr",
  	"nc.tr",
  	"gov.nc.tr",
  	"tt",
  	"co.tt",
  	"com.tt",
  	"org.tt",
  	"net.tt",
  	"biz.tt",
  	"info.tt",
  	"pro.tt",
  	"int.tt",
  	"coop.tt",
  	"jobs.tt",
  	"mobi.tt",
  	"travel.tt",
  	"museum.tt",
  	"aero.tt",
  	"name.tt",
  	"gov.tt",
  	"edu.tt",
  	"tv",
  	"tw",
  	"edu.tw",
  	"gov.tw",
  	"mil.tw",
  	"com.tw",
  	"net.tw",
  	"org.tw",
  	"idv.tw",
  	"game.tw",
  	"ebiz.tw",
  	"club.tw",
  	"網路.tw",
  	"組織.tw",
  	"商業.tw",
  	"tz",
  	"ac.tz",
  	"co.tz",
  	"go.tz",
  	"hotel.tz",
  	"info.tz",
  	"me.tz",
  	"mil.tz",
  	"mobi.tz",
  	"ne.tz",
  	"or.tz",
  	"sc.tz",
  	"tv.tz",
  	"ua",
  	"com.ua",
  	"edu.ua",
  	"gov.ua",
  	"in.ua",
  	"net.ua",
  	"org.ua",
  	"cherkassy.ua",
  	"cherkasy.ua",
  	"chernigov.ua",
  	"chernihiv.ua",
  	"chernivtsi.ua",
  	"chernovtsy.ua",
  	"ck.ua",
  	"cn.ua",
  	"cr.ua",
  	"crimea.ua",
  	"cv.ua",
  	"dn.ua",
  	"dnepropetrovsk.ua",
  	"dnipropetrovsk.ua",
  	"donetsk.ua",
  	"dp.ua",
  	"if.ua",
  	"ivano-frankivsk.ua",
  	"kh.ua",
  	"kharkiv.ua",
  	"kharkov.ua",
  	"kherson.ua",
  	"khmelnitskiy.ua",
  	"khmelnytskyi.ua",
  	"kiev.ua",
  	"kirovograd.ua",
  	"km.ua",
  	"kr.ua",
  	"krym.ua",
  	"ks.ua",
  	"kv.ua",
  	"kyiv.ua",
  	"lg.ua",
  	"lt.ua",
  	"lugansk.ua",
  	"lutsk.ua",
  	"lv.ua",
  	"lviv.ua",
  	"mk.ua",
  	"mykolaiv.ua",
  	"nikolaev.ua",
  	"od.ua",
  	"odesa.ua",
  	"odessa.ua",
  	"pl.ua",
  	"poltava.ua",
  	"rivne.ua",
  	"rovno.ua",
  	"rv.ua",
  	"sb.ua",
  	"sebastopol.ua",
  	"sevastopol.ua",
  	"sm.ua",
  	"sumy.ua",
  	"te.ua",
  	"ternopil.ua",
  	"uz.ua",
  	"uzhgorod.ua",
  	"vinnica.ua",
  	"vinnytsia.ua",
  	"vn.ua",
  	"volyn.ua",
  	"yalta.ua",
  	"zaporizhzhe.ua",
  	"zaporizhzhia.ua",
  	"zhitomir.ua",
  	"zhytomyr.ua",
  	"zp.ua",
  	"zt.ua",
  	"ug",
  	"co.ug",
  	"or.ug",
  	"ac.ug",
  	"sc.ug",
  	"go.ug",
  	"ne.ug",
  	"com.ug",
  	"org.ug",
  	"uk",
  	"ac.uk",
  	"co.uk",
  	"gov.uk",
  	"ltd.uk",
  	"me.uk",
  	"net.uk",
  	"nhs.uk",
  	"org.uk",
  	"plc.uk",
  	"police.uk",
  	"*.sch.uk",
  	"us",
  	"dni.us",
  	"fed.us",
  	"isa.us",
  	"kids.us",
  	"nsn.us",
  	"ak.us",
  	"al.us",
  	"ar.us",
  	"as.us",
  	"az.us",
  	"ca.us",
  	"co.us",
  	"ct.us",
  	"dc.us",
  	"de.us",
  	"fl.us",
  	"ga.us",
  	"gu.us",
  	"hi.us",
  	"ia.us",
  	"id.us",
  	"il.us",
  	"in.us",
  	"ks.us",
  	"ky.us",
  	"la.us",
  	"ma.us",
  	"md.us",
  	"me.us",
  	"mi.us",
  	"mn.us",
  	"mo.us",
  	"ms.us",
  	"mt.us",
  	"nc.us",
  	"nd.us",
  	"ne.us",
  	"nh.us",
  	"nj.us",
  	"nm.us",
  	"nv.us",
  	"ny.us",
  	"oh.us",
  	"ok.us",
  	"or.us",
  	"pa.us",
  	"pr.us",
  	"ri.us",
  	"sc.us",
  	"sd.us",
  	"tn.us",
  	"tx.us",
  	"ut.us",
  	"vi.us",
  	"vt.us",
  	"va.us",
  	"wa.us",
  	"wi.us",
  	"wv.us",
  	"wy.us",
  	"k12.ak.us",
  	"k12.al.us",
  	"k12.ar.us",
  	"k12.as.us",
  	"k12.az.us",
  	"k12.ca.us",
  	"k12.co.us",
  	"k12.ct.us",
  	"k12.dc.us",
  	"k12.de.us",
  	"k12.fl.us",
  	"k12.ga.us",
  	"k12.gu.us",
  	"k12.ia.us",
  	"k12.id.us",
  	"k12.il.us",
  	"k12.in.us",
  	"k12.ks.us",
  	"k12.ky.us",
  	"k12.la.us",
  	"k12.ma.us",
  	"k12.md.us",
  	"k12.me.us",
  	"k12.mi.us",
  	"k12.mn.us",
  	"k12.mo.us",
  	"k12.ms.us",
  	"k12.mt.us",
  	"k12.nc.us",
  	"k12.ne.us",
  	"k12.nh.us",
  	"k12.nj.us",
  	"k12.nm.us",
  	"k12.nv.us",
  	"k12.ny.us",
  	"k12.oh.us",
  	"k12.ok.us",
  	"k12.or.us",
  	"k12.pa.us",
  	"k12.pr.us",
  	"k12.sc.us",
  	"k12.tn.us",
  	"k12.tx.us",
  	"k12.ut.us",
  	"k12.vi.us",
  	"k12.vt.us",
  	"k12.va.us",
  	"k12.wa.us",
  	"k12.wi.us",
  	"k12.wy.us",
  	"cc.ak.us",
  	"cc.al.us",
  	"cc.ar.us",
  	"cc.as.us",
  	"cc.az.us",
  	"cc.ca.us",
  	"cc.co.us",
  	"cc.ct.us",
  	"cc.dc.us",
  	"cc.de.us",
  	"cc.fl.us",
  	"cc.ga.us",
  	"cc.gu.us",
  	"cc.hi.us",
  	"cc.ia.us",
  	"cc.id.us",
  	"cc.il.us",
  	"cc.in.us",
  	"cc.ks.us",
  	"cc.ky.us",
  	"cc.la.us",
  	"cc.ma.us",
  	"cc.md.us",
  	"cc.me.us",
  	"cc.mi.us",
  	"cc.mn.us",
  	"cc.mo.us",
  	"cc.ms.us",
  	"cc.mt.us",
  	"cc.nc.us",
  	"cc.nd.us",
  	"cc.ne.us",
  	"cc.nh.us",
  	"cc.nj.us",
  	"cc.nm.us",
  	"cc.nv.us",
  	"cc.ny.us",
  	"cc.oh.us",
  	"cc.ok.us",
  	"cc.or.us",
  	"cc.pa.us",
  	"cc.pr.us",
  	"cc.ri.us",
  	"cc.sc.us",
  	"cc.sd.us",
  	"cc.tn.us",
  	"cc.tx.us",
  	"cc.ut.us",
  	"cc.vi.us",
  	"cc.vt.us",
  	"cc.va.us",
  	"cc.wa.us",
  	"cc.wi.us",
  	"cc.wv.us",
  	"cc.wy.us",
  	"lib.ak.us",
  	"lib.al.us",
  	"lib.ar.us",
  	"lib.as.us",
  	"lib.az.us",
  	"lib.ca.us",
  	"lib.co.us",
  	"lib.ct.us",
  	"lib.dc.us",
  	"lib.fl.us",
  	"lib.ga.us",
  	"lib.gu.us",
  	"lib.hi.us",
  	"lib.ia.us",
  	"lib.id.us",
  	"lib.il.us",
  	"lib.in.us",
  	"lib.ks.us",
  	"lib.ky.us",
  	"lib.la.us",
  	"lib.ma.us",
  	"lib.md.us",
  	"lib.me.us",
  	"lib.mi.us",
  	"lib.mn.us",
  	"lib.mo.us",
  	"lib.ms.us",
  	"lib.mt.us",
  	"lib.nc.us",
  	"lib.nd.us",
  	"lib.ne.us",
  	"lib.nh.us",
  	"lib.nj.us",
  	"lib.nm.us",
  	"lib.nv.us",
  	"lib.ny.us",
  	"lib.oh.us",
  	"lib.ok.us",
  	"lib.or.us",
  	"lib.pa.us",
  	"lib.pr.us",
  	"lib.ri.us",
  	"lib.sc.us",
  	"lib.sd.us",
  	"lib.tn.us",
  	"lib.tx.us",
  	"lib.ut.us",
  	"lib.vi.us",
  	"lib.vt.us",
  	"lib.va.us",
  	"lib.wa.us",
  	"lib.wi.us",
  	"lib.wy.us",
  	"pvt.k12.ma.us",
  	"chtr.k12.ma.us",
  	"paroch.k12.ma.us",
  	"ann-arbor.mi.us",
  	"cog.mi.us",
  	"dst.mi.us",
  	"eaton.mi.us",
  	"gen.mi.us",
  	"mus.mi.us",
  	"tec.mi.us",
  	"washtenaw.mi.us",
  	"uy",
  	"com.uy",
  	"edu.uy",
  	"gub.uy",
  	"mil.uy",
  	"net.uy",
  	"org.uy",
  	"uz",
  	"co.uz",
  	"com.uz",
  	"net.uz",
  	"org.uz",
  	"va",
  	"vc",
  	"com.vc",
  	"net.vc",
  	"org.vc",
  	"gov.vc",
  	"mil.vc",
  	"edu.vc",
  	"ve",
  	"arts.ve",
  	"bib.ve",
  	"co.ve",
  	"com.ve",
  	"e12.ve",
  	"edu.ve",
  	"firm.ve",
  	"gob.ve",
  	"gov.ve",
  	"info.ve",
  	"int.ve",
  	"mil.ve",
  	"net.ve",
  	"nom.ve",
  	"org.ve",
  	"rar.ve",
  	"rec.ve",
  	"store.ve",
  	"tec.ve",
  	"web.ve",
  	"vg",
  	"vi",
  	"co.vi",
  	"com.vi",
  	"k12.vi",
  	"net.vi",
  	"org.vi",
  	"vn",
  	"com.vn",
  	"net.vn",
  	"org.vn",
  	"edu.vn",
  	"gov.vn",
  	"int.vn",
  	"ac.vn",
  	"biz.vn",
  	"info.vn",
  	"name.vn",
  	"pro.vn",
  	"health.vn",
  	"vu",
  	"com.vu",
  	"edu.vu",
  	"net.vu",
  	"org.vu",
  	"wf",
  	"ws",
  	"com.ws",
  	"net.ws",
  	"org.ws",
  	"gov.ws",
  	"edu.ws",
  	"yt",
  	"امارات",
  	"հայ",
  	"বাংলা",
  	"бг",
  	"البحرين",
  	"бел",
  	"中国",
  	"中國",
  	"الجزائر",
  	"مصر",
  	"ею",
  	"ευ",
  	"موريتانيا",
  	"გე",
  	"ελ",
  	"香港",
  	"公司.香港",
  	"教育.香港",
  	"政府.香港",
  	"個人.香港",
  	"網絡.香港",
  	"組織.香港",
  	"ಭಾರತ",
  	"ଭାରତ",
  	"ভাৰত",
  	"भारतम्",
  	"भारोत",
  	"ڀارت",
  	"ഭാരതം",
  	"भारत",
  	"بارت",
  	"بھارت",
  	"భారత్",
  	"ભારત",
  	"ਭਾਰਤ",
  	"ভারত",
  	"இந்தியா",
  	"ایران",
  	"ايران",
  	"عراق",
  	"الاردن",
  	"한국",
  	"қаз",
  	"ລາວ",
  	"ලංකා",
  	"இலங்கை",
  	"المغرب",
  	"мкд",
  	"мон",
  	"澳門",
  	"澳门",
  	"مليسيا",
  	"عمان",
  	"پاکستان",
  	"پاكستان",
  	"فلسطين",
  	"срб",
  	"пр.срб",
  	"орг.срб",
  	"обр.срб",
  	"од.срб",
  	"упр.срб",
  	"ак.срб",
  	"рф",
  	"قطر",
  	"السعودية",
  	"السعودیة",
  	"السعودیۃ",
  	"السعوديه",
  	"سودان",
  	"新加坡",
  	"சிங்கப்பூர்",
  	"سورية",
  	"سوريا",
  	"ไทย",
  	"ศึกษา.ไทย",
  	"ธุรกิจ.ไทย",
  	"รัฐบาล.ไทย",
  	"ทหาร.ไทย",
  	"เน็ต.ไทย",
  	"องค์กร.ไทย",
  	"تونس",
  	"台灣",
  	"台湾",
  	"臺灣",
  	"укр",
  	"اليمن",
  	"xxx",
  	"ye",
  	"com.ye",
  	"edu.ye",
  	"gov.ye",
  	"net.ye",
  	"mil.ye",
  	"org.ye",
  	"ac.za",
  	"agric.za",
  	"alt.za",
  	"co.za",
  	"edu.za",
  	"gov.za",
  	"grondar.za",
  	"law.za",
  	"mil.za",
  	"net.za",
  	"ngo.za",
  	"nic.za",
  	"nis.za",
  	"nom.za",
  	"org.za",
  	"school.za",
  	"tm.za",
  	"web.za",
  	"zm",
  	"ac.zm",
  	"biz.zm",
  	"co.zm",
  	"com.zm",
  	"edu.zm",
  	"gov.zm",
  	"info.zm",
  	"mil.zm",
  	"net.zm",
  	"org.zm",
  	"sch.zm",
  	"zw",
  	"ac.zw",
  	"co.zw",
  	"gov.zw",
  	"mil.zw",
  	"org.zw",
  	"aaa",
  	"aarp",
  	"abarth",
  	"abb",
  	"abbott",
  	"abbvie",
  	"abc",
  	"able",
  	"abogado",
  	"abudhabi",
  	"academy",
  	"accenture",
  	"accountant",
  	"accountants",
  	"aco",
  	"actor",
  	"adac",
  	"ads",
  	"adult",
  	"aeg",
  	"aetna",
  	"afl",
  	"africa",
  	"agakhan",
  	"agency",
  	"aig",
  	"airbus",
  	"airforce",
  	"airtel",
  	"akdn",
  	"alfaromeo",
  	"alibaba",
  	"alipay",
  	"allfinanz",
  	"allstate",
  	"ally",
  	"alsace",
  	"alstom",
  	"amazon",
  	"americanexpress",
  	"americanfamily",
  	"amex",
  	"amfam",
  	"amica",
  	"amsterdam",
  	"analytics",
  	"android",
  	"anquan",
  	"anz",
  	"aol",
  	"apartments",
  	"app",
  	"apple",
  	"aquarelle",
  	"arab",
  	"aramco",
  	"archi",
  	"army",
  	"art",
  	"arte",
  	"asda",
  	"associates",
  	"athleta",
  	"attorney",
  	"auction",
  	"audi",
  	"audible",
  	"audio",
  	"auspost",
  	"author",
  	"auto",
  	"autos",
  	"avianca",
  	"aws",
  	"axa",
  	"azure",
  	"baby",
  	"baidu",
  	"banamex",
  	"bananarepublic",
  	"band",
  	"bank",
  	"bar",
  	"barcelona",
  	"barclaycard",
  	"barclays",
  	"barefoot",
  	"bargains",
  	"baseball",
  	"basketball",
  	"bauhaus",
  	"bayern",
  	"bbc",
  	"bbt",
  	"bbva",
  	"bcg",
  	"bcn",
  	"beats",
  	"beauty",
  	"beer",
  	"bentley",
  	"berlin",
  	"best",
  	"bestbuy",
  	"bet",
  	"bharti",
  	"bible",
  	"bid",
  	"bike",
  	"bing",
  	"bingo",
  	"bio",
  	"black",
  	"blackfriday",
  	"blockbuster",
  	"blog",
  	"bloomberg",
  	"blue",
  	"bms",
  	"bmw",
  	"bnpparibas",
  	"boats",
  	"boehringer",
  	"bofa",
  	"bom",
  	"bond",
  	"boo",
  	"book",
  	"booking",
  	"bosch",
  	"bostik",
  	"boston",
  	"bot",
  	"boutique",
  	"box",
  	"bradesco",
  	"bridgestone",
  	"broadway",
  	"broker",
  	"brother",
  	"brussels",
  	"bugatti",
  	"build",
  	"builders",
  	"business",
  	"buy",
  	"buzz",
  	"bzh",
  	"cab",
  	"cafe",
  	"cal",
  	"call",
  	"calvinklein",
  	"cam",
  	"camera",
  	"camp",
  	"cancerresearch",
  	"canon",
  	"capetown",
  	"capital",
  	"capitalone",
  	"car",
  	"caravan",
  	"cards",
  	"care",
  	"career",
  	"careers",
  	"cars",
  	"casa",
  	"case",
  	"cash",
  	"casino",
  	"catering",
  	"catholic",
  	"cba",
  	"cbn",
  	"cbre",
  	"cbs",
  	"center",
  	"ceo",
  	"cern",
  	"cfa",
  	"cfd",
  	"chanel",
  	"channel",
  	"charity",
  	"chase",
  	"chat",
  	"cheap",
  	"chintai",
  	"christmas",
  	"chrome",
  	"church",
  	"cipriani",
  	"circle",
  	"cisco",
  	"citadel",
  	"citi",
  	"citic",
  	"city",
  	"cityeats",
  	"claims",
  	"cleaning",
  	"click",
  	"clinic",
  	"clinique",
  	"clothing",
  	"cloud",
  	"club",
  	"clubmed",
  	"coach",
  	"codes",
  	"coffee",
  	"college",
  	"cologne",
  	"comcast",
  	"commbank",
  	"community",
  	"company",
  	"compare",
  	"computer",
  	"comsec",
  	"condos",
  	"construction",
  	"consulting",
  	"contact",
  	"contractors",
  	"cooking",
  	"cookingchannel",
  	"cool",
  	"corsica",
  	"country",
  	"coupon",
  	"coupons",
  	"courses",
  	"cpa",
  	"credit",
  	"creditcard",
  	"creditunion",
  	"cricket",
  	"crown",
  	"crs",
  	"cruise",
  	"cruises",
  	"cuisinella",
  	"cymru",
  	"cyou",
  	"dabur",
  	"dad",
  	"dance",
  	"data",
  	"date",
  	"dating",
  	"datsun",
  	"day",
  	"dclk",
  	"dds",
  	"deal",
  	"dealer",
  	"deals",
  	"degree",
  	"delivery",
  	"dell",
  	"deloitte",
  	"delta",
  	"democrat",
  	"dental",
  	"dentist",
  	"desi",
  	"design",
  	"dev",
  	"dhl",
  	"diamonds",
  	"diet",
  	"digital",
  	"direct",
  	"directory",
  	"discount",
  	"discover",
  	"dish",
  	"diy",
  	"dnp",
  	"docs",
  	"doctor",
  	"dog",
  	"domains",
  	"dot",
  	"download",
  	"drive",
  	"dtv",
  	"dubai",
  	"dunlop",
  	"dupont",
  	"durban",
  	"dvag",
  	"dvr",
  	"earth",
  	"eat",
  	"eco",
  	"edeka",
  	"education",
  	"email",
  	"emerck",
  	"energy",
  	"engineer",
  	"engineering",
  	"enterprises",
  	"epson",
  	"equipment",
  	"ericsson",
  	"erni",
  	"esq",
  	"estate",
  	"etisalat",
  	"eurovision",
  	"eus",
  	"events",
  	"exchange",
  	"expert",
  	"exposed",
  	"express",
  	"extraspace",
  	"fage",
  	"fail",
  	"fairwinds",
  	"faith",
  	"family",
  	"fan",
  	"fans",
  	"farm",
  	"farmers",
  	"fashion",
  	"fast",
  	"fedex",
  	"feedback",
  	"ferrari",
  	"ferrero",
  	"fiat",
  	"fidelity",
  	"fido",
  	"film",
  	"final",
  	"finance",
  	"financial",
  	"fire",
  	"firestone",
  	"firmdale",
  	"fish",
  	"fishing",
  	"fit",
  	"fitness",
  	"flickr",
  	"flights",
  	"flir",
  	"florist",
  	"flowers",
  	"fly",
  	"foo",
  	"food",
  	"foodnetwork",
  	"football",
  	"ford",
  	"forex",
  	"forsale",
  	"forum",
  	"foundation",
  	"fox",
  	"free",
  	"fresenius",
  	"frl",
  	"frogans",
  	"frontdoor",
  	"frontier",
  	"ftr",
  	"fujitsu",
  	"fun",
  	"fund",
  	"furniture",
  	"futbol",
  	"fyi",
  	"gal",
  	"gallery",
  	"gallo",
  	"gallup",
  	"game",
  	"games",
  	"gap",
  	"garden",
  	"gay",
  	"gbiz",
  	"gdn",
  	"gea",
  	"gent",
  	"genting",
  	"george",
  	"ggee",
  	"gift",
  	"gifts",
  	"gives",
  	"giving",
  	"glass",
  	"gle",
  	"global",
  	"globo",
  	"gmail",
  	"gmbh",
  	"gmo",
  	"gmx",
  	"godaddy",
  	"gold",
  	"goldpoint",
  	"golf",
  	"goo",
  	"goodyear",
  	"goog",
  	"google",
  	"gop",
  	"got",
  	"grainger",
  	"graphics",
  	"gratis",
  	"green",
  	"gripe",
  	"grocery",
  	"group",
  	"guardian",
  	"gucci",
  	"guge",
  	"guide",
  	"guitars",
  	"guru",
  	"hair",
  	"hamburg",
  	"hangout",
  	"haus",
  	"hbo",
  	"hdfc",
  	"hdfcbank",
  	"health",
  	"healthcare",
  	"help",
  	"helsinki",
  	"here",
  	"hermes",
  	"hgtv",
  	"hiphop",
  	"hisamitsu",
  	"hitachi",
  	"hiv",
  	"hkt",
  	"hockey",
  	"holdings",
  	"holiday",
  	"homedepot",
  	"homegoods",
  	"homes",
  	"homesense",
  	"honda",
  	"horse",
  	"hospital",
  	"host",
  	"hosting",
  	"hot",
  	"hoteles",
  	"hotels",
  	"hotmail",
  	"house",
  	"how",
  	"hsbc",
  	"hughes",
  	"hyatt",
  	"hyundai",
  	"ibm",
  	"icbc",
  	"ice",
  	"icu",
  	"ieee",
  	"ifm",
  	"ikano",
  	"imamat",
  	"imdb",
  	"immo",
  	"immobilien",
  	"inc",
  	"industries",
  	"infiniti",
  	"ing",
  	"ink",
  	"institute",
  	"insurance",
  	"insure",
  	"international",
  	"intuit",
  	"investments",
  	"ipiranga",
  	"irish",
  	"ismaili",
  	"ist",
  	"istanbul",
  	"itau",
  	"itv",
  	"jaguar",
  	"java",
  	"jcb",
  	"jeep",
  	"jetzt",
  	"jewelry",
  	"jio",
  	"jll",
  	"jmp",
  	"jnj",
  	"joburg",
  	"jot",
  	"joy",
  	"jpmorgan",
  	"jprs",
  	"juegos",
  	"juniper",
  	"kaufen",
  	"kddi",
  	"kerryhotels",
  	"kerrylogistics",
  	"kerryproperties",
  	"kfh",
  	"kia",
  	"kids",
  	"kim",
  	"kinder",
  	"kindle",
  	"kitchen",
  	"kiwi",
  	"koeln",
  	"komatsu",
  	"kosher",
  	"kpmg",
  	"kpn",
  	"krd",
  	"kred",
  	"kuokgroup",
  	"kyoto",
  	"lacaixa",
  	"lamborghini",
  	"lamer",
  	"lancaster",
  	"lancia",
  	"land",
  	"landrover",
  	"lanxess",
  	"lasalle",
  	"lat",
  	"latino",
  	"latrobe",
  	"law",
  	"lawyer",
  	"lds",
  	"lease",
  	"leclerc",
  	"lefrak",
  	"legal",
  	"lego",
  	"lexus",
  	"lgbt",
  	"lidl",
  	"life",
  	"lifeinsurance",
  	"lifestyle",
  	"lighting",
  	"like",
  	"lilly",
  	"limited",
  	"limo",
  	"lincoln",
  	"linde",
  	"link",
  	"lipsy",
  	"live",
  	"living",
  	"llc",
  	"llp",
  	"loan",
  	"loans",
  	"locker",
  	"locus",
  	"loft",
  	"lol",
  	"london",
  	"lotte",
  	"lotto",
  	"love",
  	"lpl",
  	"lplfinancial",
  	"ltd",
  	"ltda",
  	"lundbeck",
  	"luxe",
  	"luxury",
  	"macys",
  	"madrid",
  	"maif",
  	"maison",
  	"makeup",
  	"man",
  	"management",
  	"mango",
  	"map",
  	"market",
  	"marketing",
  	"markets",
  	"marriott",
  	"marshalls",
  	"maserati",
  	"mattel",
  	"mba",
  	"mckinsey",
  	"med",
  	"media",
  	"meet",
  	"melbourne",
  	"meme",
  	"memorial",
  	"men",
  	"menu",
  	"merckmsd",
  	"miami",
  	"microsoft",
  	"mini",
  	"mint",
  	"mit",
  	"mitsubishi",
  	"mlb",
  	"mls",
  	"mma",
  	"mobile",
  	"moda",
  	"moe",
  	"moi",
  	"mom",
  	"monash",
  	"money",
  	"monster",
  	"mormon",
  	"mortgage",
  	"moscow",
  	"moto",
  	"motorcycles",
  	"mov",
  	"movie",
  	"msd",
  	"mtn",
  	"mtr",
  	"music",
  	"mutual",
  	"nab",
  	"nagoya",
  	"natura",
  	"navy",
  	"nba",
  	"nec",
  	"netbank",
  	"netflix",
  	"network",
  	"neustar",
  	"new",
  	"news",
  	"next",
  	"nextdirect",
  	"nexus",
  	"nfl",
  	"ngo",
  	"nhk",
  	"nico",
  	"nike",
  	"nikon",
  	"ninja",
  	"nissan",
  	"nissay",
  	"nokia",
  	"northwesternmutual",
  	"norton",
  	"now",
  	"nowruz",
  	"nowtv",
  	"nra",
  	"nrw",
  	"ntt",
  	"nyc",
  	"obi",
  	"observer",
  	"office",
  	"okinawa",
  	"olayan",
  	"olayangroup",
  	"oldnavy",
  	"ollo",
  	"omega",
  	"one",
  	"ong",
  	"onl",
  	"online",
  	"ooo",
  	"open",
  	"oracle",
  	"orange",
  	"organic",
  	"origins",
  	"osaka",
  	"otsuka",
  	"ott",
  	"ovh",
  	"page",
  	"panasonic",
  	"paris",
  	"pars",
  	"partners",
  	"parts",
  	"party",
  	"passagens",
  	"pay",
  	"pccw",
  	"pet",
  	"pfizer",
  	"pharmacy",
  	"phd",
  	"philips",
  	"phone",
  	"photo",
  	"photography",
  	"photos",
  	"physio",
  	"pics",
  	"pictet",
  	"pictures",
  	"pid",
  	"pin",
  	"ping",
  	"pink",
  	"pioneer",
  	"pizza",
  	"place",
  	"play",
  	"playstation",
  	"plumbing",
  	"plus",
  	"pnc",
  	"pohl",
  	"poker",
  	"politie",
  	"porn",
  	"pramerica",
  	"praxi",
  	"press",
  	"prime",
  	"prod",
  	"productions",
  	"prof",
  	"progressive",
  	"promo",
  	"properties",
  	"property",
  	"protection",
  	"pru",
  	"prudential",
  	"pub",
  	"pwc",
  	"qpon",
  	"quebec",
  	"quest",
  	"racing",
  	"radio",
  	"read",
  	"realestate",
  	"realtor",
  	"realty",
  	"recipes",
  	"red",
  	"redstone",
  	"redumbrella",
  	"rehab",
  	"reise",
  	"reisen",
  	"reit",
  	"reliance",
  	"ren",
  	"rent",
  	"rentals",
  	"repair",
  	"report",
  	"republican",
  	"rest",
  	"restaurant",
  	"review",
  	"reviews",
  	"rexroth",
  	"rich",
  	"richardli",
  	"ricoh",
  	"ril",
  	"rio",
  	"rip",
  	"rocher",
  	"rocks",
  	"rodeo",
  	"rogers",
  	"room",
  	"rsvp",
  	"rugby",
  	"ruhr",
  	"run",
  	"rwe",
  	"ryukyu",
  	"saarland",
  	"safe",
  	"safety",
  	"sakura",
  	"sale",
  	"salon",
  	"samsclub",
  	"samsung",
  	"sandvik",
  	"sandvikcoromant",
  	"sanofi",
  	"sap",
  	"sarl",
  	"sas",
  	"save",
  	"saxo",
  	"sbi",
  	"sbs",
  	"sca",
  	"scb",
  	"schaeffler",
  	"schmidt",
  	"scholarships",
  	"school",
  	"schule",
  	"schwarz",
  	"science",
  	"scot",
  	"search",
  	"seat",
  	"secure",
  	"security",
  	"seek",
  	"select",
  	"sener",
  	"services",
  	"ses",
  	"seven",
  	"sew",
  	"sex",
  	"sexy",
  	"sfr",
  	"shangrila",
  	"sharp",
  	"shaw",
  	"shell",
  	"shia",
  	"shiksha",
  	"shoes",
  	"shop",
  	"shopping",
  	"shouji",
  	"show",
  	"showtime",
  	"silk",
  	"sina",
  	"singles",
  	"site",
  	"ski",
  	"skin",
  	"sky",
  	"skype",
  	"sling",
  	"smart",
  	"smile",
  	"sncf",
  	"soccer",
  	"social",
  	"softbank",
  	"software",
  	"sohu",
  	"solar",
  	"solutions",
  	"song",
  	"sony",
  	"soy",
  	"spa",
  	"space",
  	"sport",
  	"spot",
  	"srl",
  	"stada",
  	"staples",
  	"star",
  	"statebank",
  	"statefarm",
  	"stc",
  	"stcgroup",
  	"stockholm",
  	"storage",
  	"store",
  	"stream",
  	"studio",
  	"study",
  	"style",
  	"sucks",
  	"supplies",
  	"supply",
  	"support",
  	"surf",
  	"surgery",
  	"suzuki",
  	"swatch",
  	"swiss",
  	"sydney",
  	"systems",
  	"tab",
  	"taipei",
  	"talk",
  	"taobao",
  	"target",
  	"tatamotors",
  	"tatar",
  	"tattoo",
  	"tax",
  	"taxi",
  	"tci",
  	"tdk",
  	"team",
  	"tech",
  	"technology",
  	"temasek",
  	"tennis",
  	"teva",
  	"thd",
  	"theater",
  	"theatre",
  	"tiaa",
  	"tickets",
  	"tienda",
  	"tiffany",
  	"tips",
  	"tires",
  	"tirol",
  	"tjmaxx",
  	"tjx",
  	"tkmaxx",
  	"tmall",
  	"today",
  	"tokyo",
  	"tools",
  	"top",
  	"toray",
  	"toshiba",
  	"total",
  	"tours",
  	"town",
  	"toyota",
  	"toys",
  	"trade",
  	"trading",
  	"training",
  	"travel",
  	"travelchannel",
  	"travelers",
  	"travelersinsurance",
  	"trust",
  	"trv",
  	"tube",
  	"tui",
  	"tunes",
  	"tushu",
  	"tvs",
  	"ubank",
  	"ubs",
  	"unicom",
  	"university",
  	"uno",
  	"uol",
  	"ups",
  	"vacations",
  	"vana",
  	"vanguard",
  	"vegas",
  	"ventures",
  	"verisign",
  	"versicherung",
  	"vet",
  	"viajes",
  	"video",
  	"vig",
  	"viking",
  	"villas",
  	"vin",
  	"vip",
  	"virgin",
  	"visa",
  	"vision",
  	"viva",
  	"vivo",
  	"vlaanderen",
  	"vodka",
  	"volkswagen",
  	"volvo",
  	"vote",
  	"voting",
  	"voto",
  	"voyage",
  	"vuelos",
  	"wales",
  	"walmart",
  	"walter",
  	"wang",
  	"wanggou",
  	"watch",
  	"watches",
  	"weather",
  	"weatherchannel",
  	"webcam",
  	"weber",
  	"website",
  	"wedding",
  	"weibo",
  	"weir",
  	"whoswho",
  	"wien",
  	"wiki",
  	"williamhill",
  	"win",
  	"windows",
  	"wine",
  	"winners",
  	"wme",
  	"wolterskluwer",
  	"woodside",
  	"work",
  	"works",
  	"world",
  	"wow",
  	"wtc",
  	"wtf",
  	"xbox",
  	"xerox",
  	"xfinity",
  	"xihuan",
  	"xin",
  	"कॉम",
  	"セール",
  	"佛山",
  	"慈善",
  	"集团",
  	"在线",
  	"点看",
  	"คอม",
  	"八卦",
  	"موقع",
  	"公益",
  	"公司",
  	"香格里拉",
  	"网站",
  	"移动",
  	"我爱你",
  	"москва",
  	"католик",
  	"онлайн",
  	"сайт",
  	"联通",
  	"קום",
  	"时尚",
  	"微博",
  	"淡马锡",
  	"ファッション",
  	"орг",
  	"नेट",
  	"ストア",
  	"アマゾン",
  	"삼성",
  	"商标",
  	"商店",
  	"商城",
  	"дети",
  	"ポイント",
  	"新闻",
  	"家電",
  	"كوم",
  	"中文网",
  	"中信",
  	"娱乐",
  	"谷歌",
  	"電訊盈科",
  	"购物",
  	"クラウド",
  	"通販",
  	"网店",
  	"संगठन",
  	"餐厅",
  	"网络",
  	"ком",
  	"亚马逊",
  	"诺基亚",
  	"食品",
  	"飞利浦",
  	"手机",
  	"ارامكو",
  	"العليان",
  	"اتصالات",
  	"بازار",
  	"ابوظبي",
  	"كاثوليك",
  	"همراه",
  	"닷컴",
  	"政府",
  	"شبكة",
  	"بيتك",
  	"عرب",
  	"机构",
  	"组织机构",
  	"健康",
  	"招聘",
  	"рус",
  	"大拿",
  	"みんな",
  	"グーグル",
  	"世界",
  	"書籍",
  	"网址",
  	"닷넷",
  	"コム",
  	"天主教",
  	"游戏",
  	"vermögensberater",
  	"vermögensberatung",
  	"企业",
  	"信息",
  	"嘉里大酒店",
  	"嘉里",
  	"广东",
  	"政务",
  	"xyz",
  	"yachts",
  	"yahoo",
  	"yamaxun",
  	"yandex",
  	"yodobashi",
  	"yoga",
  	"yokohama",
  	"you",
  	"youtube",
  	"yun",
  	"zappos",
  	"zara",
  	"zero",
  	"zip",
  	"zone",
  	"zuerich",
  	"cc.ua",
  	"inf.ua",
  	"ltd.ua",
  	"611.to",
  	"graphox.us",
  	"*.devcdnaccesso.com",
  	"adobeaemcloud.com",
  	"*.dev.adobeaemcloud.com",
  	"hlx.live",
  	"adobeaemcloud.net",
  	"hlx.page",
  	"hlx3.page",
  	"beep.pl",
  	"airkitapps.com",
  	"airkitapps-au.com",
  	"airkitapps.eu",
  	"aivencloud.com",
  	"barsy.ca",
  	"*.compute.estate",
  	"*.alces.network",
  	"kasserver.com",
  	"altervista.org",
  	"alwaysdata.net",
  	"cloudfront.net",
  	"*.compute.amazonaws.com",
  	"*.compute-1.amazonaws.com",
  	"*.compute.amazonaws.com.cn",
  	"us-east-1.amazonaws.com",
  	"cn-north-1.eb.amazonaws.com.cn",
  	"cn-northwest-1.eb.amazonaws.com.cn",
  	"elasticbeanstalk.com",
  	"ap-northeast-1.elasticbeanstalk.com",
  	"ap-northeast-2.elasticbeanstalk.com",
  	"ap-northeast-3.elasticbeanstalk.com",
  	"ap-south-1.elasticbeanstalk.com",
  	"ap-southeast-1.elasticbeanstalk.com",
  	"ap-southeast-2.elasticbeanstalk.com",
  	"ca-central-1.elasticbeanstalk.com",
  	"eu-central-1.elasticbeanstalk.com",
  	"eu-west-1.elasticbeanstalk.com",
  	"eu-west-2.elasticbeanstalk.com",
  	"eu-west-3.elasticbeanstalk.com",
  	"sa-east-1.elasticbeanstalk.com",
  	"us-east-1.elasticbeanstalk.com",
  	"us-east-2.elasticbeanstalk.com",
  	"us-gov-west-1.elasticbeanstalk.com",
  	"us-west-1.elasticbeanstalk.com",
  	"us-west-2.elasticbeanstalk.com",
  	"*.elb.amazonaws.com",
  	"*.elb.amazonaws.com.cn",
  	"awsglobalaccelerator.com",
  	"s3.amazonaws.com",
  	"s3-ap-northeast-1.amazonaws.com",
  	"s3-ap-northeast-2.amazonaws.com",
  	"s3-ap-south-1.amazonaws.com",
  	"s3-ap-southeast-1.amazonaws.com",
  	"s3-ap-southeast-2.amazonaws.com",
  	"s3-ca-central-1.amazonaws.com",
  	"s3-eu-central-1.amazonaws.com",
  	"s3-eu-west-1.amazonaws.com",
  	"s3-eu-west-2.amazonaws.com",
  	"s3-eu-west-3.amazonaws.com",
  	"s3-external-1.amazonaws.com",
  	"s3-fips-us-gov-west-1.amazonaws.com",
  	"s3-sa-east-1.amazonaws.com",
  	"s3-us-gov-west-1.amazonaws.com",
  	"s3-us-east-2.amazonaws.com",
  	"s3-us-west-1.amazonaws.com",
  	"s3-us-west-2.amazonaws.com",
  	"s3.ap-northeast-2.amazonaws.com",
  	"s3.ap-south-1.amazonaws.com",
  	"s3.cn-north-1.amazonaws.com.cn",
  	"s3.ca-central-1.amazonaws.com",
  	"s3.eu-central-1.amazonaws.com",
  	"s3.eu-west-2.amazonaws.com",
  	"s3.eu-west-3.amazonaws.com",
  	"s3.us-east-2.amazonaws.com",
  	"s3.dualstack.ap-northeast-1.amazonaws.com",
  	"s3.dualstack.ap-northeast-2.amazonaws.com",
  	"s3.dualstack.ap-south-1.amazonaws.com",
  	"s3.dualstack.ap-southeast-1.amazonaws.com",
  	"s3.dualstack.ap-southeast-2.amazonaws.com",
  	"s3.dualstack.ca-central-1.amazonaws.com",
  	"s3.dualstack.eu-central-1.amazonaws.com",
  	"s3.dualstack.eu-west-1.amazonaws.com",
  	"s3.dualstack.eu-west-2.amazonaws.com",
  	"s3.dualstack.eu-west-3.amazonaws.com",
  	"s3.dualstack.sa-east-1.amazonaws.com",
  	"s3.dualstack.us-east-1.amazonaws.com",
  	"s3.dualstack.us-east-2.amazonaws.com",
  	"s3-website-us-east-1.amazonaws.com",
  	"s3-website-us-west-1.amazonaws.com",
  	"s3-website-us-west-2.amazonaws.com",
  	"s3-website-ap-northeast-1.amazonaws.com",
  	"s3-website-ap-southeast-1.amazonaws.com",
  	"s3-website-ap-southeast-2.amazonaws.com",
  	"s3-website-eu-west-1.amazonaws.com",
  	"s3-website-sa-east-1.amazonaws.com",
  	"s3-website.ap-northeast-2.amazonaws.com",
  	"s3-website.ap-south-1.amazonaws.com",
  	"s3-website.ca-central-1.amazonaws.com",
  	"s3-website.eu-central-1.amazonaws.com",
  	"s3-website.eu-west-2.amazonaws.com",
  	"s3-website.eu-west-3.amazonaws.com",
  	"s3-website.us-east-2.amazonaws.com",
  	"t3l3p0rt.net",
  	"tele.amune.org",
  	"apigee.io",
  	"siiites.com",
  	"appspacehosted.com",
  	"appspaceusercontent.com",
  	"appudo.net",
  	"on-aptible.com",
  	"user.aseinet.ne.jp",
  	"gv.vc",
  	"d.gv.vc",
  	"user.party.eus",
  	"pimienta.org",
  	"poivron.org",
  	"potager.org",
  	"sweetpepper.org",
  	"myasustor.com",
  	"cdn.prod.atlassian-dev.net",
  	"translated.page",
  	"myfritz.net",
  	"onavstack.net",
  	"*.awdev.ca",
  	"*.advisor.ws",
  	"ecommerce-shop.pl",
  	"b-data.io",
  	"backplaneapp.io",
  	"balena-devices.com",
  	"rs.ba",
  	"*.banzai.cloud",
  	"app.banzaicloud.io",
  	"*.backyards.banzaicloud.io",
  	"base.ec",
  	"official.ec",
  	"buyshop.jp",
  	"fashionstore.jp",
  	"handcrafted.jp",
  	"kawaiishop.jp",
  	"supersale.jp",
  	"theshop.jp",
  	"shopselect.net",
  	"base.shop",
  	"*.beget.app",
  	"betainabox.com",
  	"bnr.la",
  	"bitbucket.io",
  	"blackbaudcdn.net",
  	"of.je",
  	"bluebite.io",
  	"boomla.net",
  	"boutir.com",
  	"boxfuse.io",
  	"square7.ch",
  	"bplaced.com",
  	"bplaced.de",
  	"square7.de",
  	"bplaced.net",
  	"square7.net",
  	"shop.brendly.rs",
  	"browsersafetymark.io",
  	"uk0.bigv.io",
  	"dh.bytemark.co.uk",
  	"vm.bytemark.co.uk",
  	"cafjs.com",
  	"mycd.eu",
  	"drr.ac",
  	"uwu.ai",
  	"carrd.co",
  	"crd.co",
  	"ju.mp",
  	"ae.org",
  	"br.com",
  	"cn.com",
  	"com.de",
  	"com.se",
  	"de.com",
  	"eu.com",
  	"gb.net",
  	"hu.net",
  	"jp.net",
  	"jpn.com",
  	"mex.com",
  	"ru.com",
  	"sa.com",
  	"se.net",
  	"uk.com",
  	"uk.net",
  	"us.com",
  	"za.bz",
  	"za.com",
  	"ar.com",
  	"hu.com",
  	"kr.com",
  	"no.com",
  	"qc.com",
  	"uy.com",
  	"africa.com",
  	"gr.com",
  	"in.net",
  	"web.in",
  	"us.org",
  	"co.com",
  	"aus.basketball",
  	"nz.basketball",
  	"radio.am",
  	"radio.fm",
  	"c.la",
  	"certmgr.org",
  	"cx.ua",
  	"discourse.group",
  	"discourse.team",
  	"cleverapps.io",
  	"clerk.app",
  	"clerkstage.app",
  	"*.lcl.dev",
  	"*.lclstage.dev",
  	"*.stg.dev",
  	"*.stgstage.dev",
  	"clickrising.net",
  	"c66.me",
  	"cloud66.ws",
  	"cloud66.zone",
  	"jdevcloud.com",
  	"wpdevcloud.com",
  	"cloudaccess.host",
  	"freesite.host",
  	"cloudaccess.net",
  	"cloudcontrolled.com",
  	"cloudcontrolapp.com",
  	"*.cloudera.site",
  	"pages.dev",
  	"trycloudflare.com",
  	"workers.dev",
  	"wnext.app",
  	"co.ca",
  	"*.otap.co",
  	"co.cz",
  	"c.cdn77.org",
  	"cdn77-ssl.net",
  	"r.cdn77.net",
  	"rsc.cdn77.org",
  	"ssl.origin.cdn77-secure.org",
  	"cloudns.asia",
  	"cloudns.biz",
  	"cloudns.club",
  	"cloudns.cc",
  	"cloudns.eu",
  	"cloudns.in",
  	"cloudns.info",
  	"cloudns.org",
  	"cloudns.pro",
  	"cloudns.pw",
  	"cloudns.us",
  	"cnpy.gdn",
  	"codeberg.page",
  	"co.nl",
  	"co.no",
  	"webhosting.be",
  	"hosting-cluster.nl",
  	"ac.ru",
  	"edu.ru",
  	"gov.ru",
  	"int.ru",
  	"mil.ru",
  	"test.ru",
  	"dyn.cosidns.de",
  	"dynamisches-dns.de",
  	"dnsupdater.de",
  	"internet-dns.de",
  	"l-o-g-i-n.de",
  	"dynamic-dns.info",
  	"feste-ip.net",
  	"knx-server.net",
  	"static-access.net",
  	"realm.cz",
  	"*.cryptonomic.net",
  	"cupcake.is",
  	"curv.dev",
  	"*.customer-oci.com",
  	"*.oci.customer-oci.com",
  	"*.ocp.customer-oci.com",
  	"*.ocs.customer-oci.com",
  	"cyon.link",
  	"cyon.site",
  	"fnwk.site",
  	"folionetwork.site",
  	"platform0.app",
  	"daplie.me",
  	"localhost.daplie.me",
  	"dattolocal.com",
  	"dattorelay.com",
  	"dattoweb.com",
  	"mydatto.com",
  	"dattolocal.net",
  	"mydatto.net",
  	"biz.dk",
  	"co.dk",
  	"firm.dk",
  	"reg.dk",
  	"store.dk",
  	"dyndns.dappnode.io",
  	"*.dapps.earth",
  	"*.bzz.dapps.earth",
  	"builtwithdark.com",
  	"demo.datadetect.com",
  	"instance.datadetect.com",
  	"edgestack.me",
  	"ddns5.com",
  	"debian.net",
  	"deno.dev",
  	"deno-staging.dev",
  	"dedyn.io",
  	"deta.app",
  	"deta.dev",
  	"*.rss.my.id",
  	"*.diher.solutions",
  	"discordsays.com",
  	"discordsez.com",
  	"jozi.biz",
  	"dnshome.de",
  	"online.th",
  	"shop.th",
  	"drayddns.com",
  	"shoparena.pl",
  	"dreamhosters.com",
  	"mydrobo.com",
  	"drud.io",
  	"drud.us",
  	"duckdns.org",
  	"bip.sh",
  	"bitbridge.net",
  	"dy.fi",
  	"tunk.org",
  	"dyndns-at-home.com",
  	"dyndns-at-work.com",
  	"dyndns-blog.com",
  	"dyndns-free.com",
  	"dyndns-home.com",
  	"dyndns-ip.com",
  	"dyndns-mail.com",
  	"dyndns-office.com",
  	"dyndns-pics.com",
  	"dyndns-remote.com",
  	"dyndns-server.com",
  	"dyndns-web.com",
  	"dyndns-wiki.com",
  	"dyndns-work.com",
  	"dyndns.biz",
  	"dyndns.info",
  	"dyndns.org",
  	"dyndns.tv",
  	"at-band-camp.net",
  	"ath.cx",
  	"barrel-of-knowledge.info",
  	"barrell-of-knowledge.info",
  	"better-than.tv",
  	"blogdns.com",
  	"blogdns.net",
  	"blogdns.org",
  	"blogsite.org",
  	"boldlygoingnowhere.org",
  	"broke-it.net",
  	"buyshouses.net",
  	"cechire.com",
  	"dnsalias.com",
  	"dnsalias.net",
  	"dnsalias.org",
  	"dnsdojo.com",
  	"dnsdojo.net",
  	"dnsdojo.org",
  	"does-it.net",
  	"doesntexist.com",
  	"doesntexist.org",
  	"dontexist.com",
  	"dontexist.net",
  	"dontexist.org",
  	"doomdns.com",
  	"doomdns.org",
  	"dvrdns.org",
  	"dyn-o-saur.com",
  	"dynalias.com",
  	"dynalias.net",
  	"dynalias.org",
  	"dynathome.net",
  	"dyndns.ws",
  	"endofinternet.net",
  	"endofinternet.org",
  	"endoftheinternet.org",
  	"est-a-la-maison.com",
  	"est-a-la-masion.com",
  	"est-le-patron.com",
  	"est-mon-blogueur.com",
  	"for-better.biz",
  	"for-more.biz",
  	"for-our.info",
  	"for-some.biz",
  	"for-the.biz",
  	"forgot.her.name",
  	"forgot.his.name",
  	"from-ak.com",
  	"from-al.com",
  	"from-ar.com",
  	"from-az.net",
  	"from-ca.com",
  	"from-co.net",
  	"from-ct.com",
  	"from-dc.com",
  	"from-de.com",
  	"from-fl.com",
  	"from-ga.com",
  	"from-hi.com",
  	"from-ia.com",
  	"from-id.com",
  	"from-il.com",
  	"from-in.com",
  	"from-ks.com",
  	"from-ky.com",
  	"from-la.net",
  	"from-ma.com",
  	"from-md.com",
  	"from-me.org",
  	"from-mi.com",
  	"from-mn.com",
  	"from-mo.com",
  	"from-ms.com",
  	"from-mt.com",
  	"from-nc.com",
  	"from-nd.com",
  	"from-ne.com",
  	"from-nh.com",
  	"from-nj.com",
  	"from-nm.com",
  	"from-nv.com",
  	"from-ny.net",
  	"from-oh.com",
  	"from-ok.com",
  	"from-or.com",
  	"from-pa.com",
  	"from-pr.com",
  	"from-ri.com",
  	"from-sc.com",
  	"from-sd.com",
  	"from-tn.com",
  	"from-tx.com",
  	"from-ut.com",
  	"from-va.com",
  	"from-vt.com",
  	"from-wa.com",
  	"from-wi.com",
  	"from-wv.com",
  	"from-wy.com",
  	"ftpaccess.cc",
  	"fuettertdasnetz.de",
  	"game-host.org",
  	"game-server.cc",
  	"getmyip.com",
  	"gets-it.net",
  	"go.dyndns.org",
  	"gotdns.com",
  	"gotdns.org",
  	"groks-the.info",
  	"groks-this.info",
  	"ham-radio-op.net",
  	"here-for-more.info",
  	"hobby-site.com",
  	"hobby-site.org",
  	"home.dyndns.org",
  	"homedns.org",
  	"homeftp.net",
  	"homeftp.org",
  	"homeip.net",
  	"homelinux.com",
  	"homelinux.net",
  	"homelinux.org",
  	"homeunix.com",
  	"homeunix.net",
  	"homeunix.org",
  	"iamallama.com",
  	"in-the-band.net",
  	"is-a-anarchist.com",
  	"is-a-blogger.com",
  	"is-a-bookkeeper.com",
  	"is-a-bruinsfan.org",
  	"is-a-bulls-fan.com",
  	"is-a-candidate.org",
  	"is-a-caterer.com",
  	"is-a-celticsfan.org",
  	"is-a-chef.com",
  	"is-a-chef.net",
  	"is-a-chef.org",
  	"is-a-conservative.com",
  	"is-a-cpa.com",
  	"is-a-cubicle-slave.com",
  	"is-a-democrat.com",
  	"is-a-designer.com",
  	"is-a-doctor.com",
  	"is-a-financialadvisor.com",
  	"is-a-geek.com",
  	"is-a-geek.net",
  	"is-a-geek.org",
  	"is-a-green.com",
  	"is-a-guru.com",
  	"is-a-hard-worker.com",
  	"is-a-hunter.com",
  	"is-a-knight.org",
  	"is-a-landscaper.com",
  	"is-a-lawyer.com",
  	"is-a-liberal.com",
  	"is-a-libertarian.com",
  	"is-a-linux-user.org",
  	"is-a-llama.com",
  	"is-a-musician.com",
  	"is-a-nascarfan.com",
  	"is-a-nurse.com",
  	"is-a-painter.com",
  	"is-a-patsfan.org",
  	"is-a-personaltrainer.com",
  	"is-a-photographer.com",
  	"is-a-player.com",
  	"is-a-republican.com",
  	"is-a-rockstar.com",
  	"is-a-socialist.com",
  	"is-a-soxfan.org",
  	"is-a-student.com",
  	"is-a-teacher.com",
  	"is-a-techie.com",
  	"is-a-therapist.com",
  	"is-an-accountant.com",
  	"is-an-actor.com",
  	"is-an-actress.com",
  	"is-an-anarchist.com",
  	"is-an-artist.com",
  	"is-an-engineer.com",
  	"is-an-entertainer.com",
  	"is-by.us",
  	"is-certified.com",
  	"is-found.org",
  	"is-gone.com",
  	"is-into-anime.com",
  	"is-into-cars.com",
  	"is-into-cartoons.com",
  	"is-into-games.com",
  	"is-leet.com",
  	"is-lost.org",
  	"is-not-certified.com",
  	"is-saved.org",
  	"is-slick.com",
  	"is-uberleet.com",
  	"is-very-bad.org",
  	"is-very-evil.org",
  	"is-very-good.org",
  	"is-very-nice.org",
  	"is-very-sweet.org",
  	"is-with-theband.com",
  	"isa-geek.com",
  	"isa-geek.net",
  	"isa-geek.org",
  	"isa-hockeynut.com",
  	"issmarterthanyou.com",
  	"isteingeek.de",
  	"istmein.de",
  	"kicks-ass.net",
  	"kicks-ass.org",
  	"knowsitall.info",
  	"land-4-sale.us",
  	"lebtimnetz.de",
  	"leitungsen.de",
  	"likes-pie.com",
  	"likescandy.com",
  	"merseine.nu",
  	"mine.nu",
  	"misconfused.org",
  	"mypets.ws",
  	"myphotos.cc",
  	"neat-url.com",
  	"office-on-the.net",
  	"on-the-web.tv",
  	"podzone.net",
  	"podzone.org",
  	"readmyblog.org",
  	"saves-the-whales.com",
  	"scrapper-site.net",
  	"scrapping.cc",
  	"selfip.biz",
  	"selfip.com",
  	"selfip.info",
  	"selfip.net",
  	"selfip.org",
  	"sells-for-less.com",
  	"sells-for-u.com",
  	"sells-it.net",
  	"sellsyourhome.org",
  	"servebbs.com",
  	"servebbs.net",
  	"servebbs.org",
  	"serveftp.net",
  	"serveftp.org",
  	"servegame.org",
  	"shacknet.nu",
  	"simple-url.com",
  	"space-to-rent.com",
  	"stuff-4-sale.org",
  	"stuff-4-sale.us",
  	"teaches-yoga.com",
  	"thruhere.net",
  	"traeumtgerade.de",
  	"webhop.biz",
  	"webhop.info",
  	"webhop.net",
  	"webhop.org",
  	"worse-than.tv",
  	"writesthisblog.com",
  	"ddnss.de",
  	"dyn.ddnss.de",
  	"dyndns.ddnss.de",
  	"dyndns1.de",
  	"dyn-ip24.de",
  	"home-webserver.de",
  	"dyn.home-webserver.de",
  	"myhome-server.de",
  	"ddnss.org",
  	"definima.net",
  	"definima.io",
  	"ondigitalocean.app",
  	"*.digitaloceanspaces.com",
  	"bci.dnstrace.pro",
  	"ddnsfree.com",
  	"ddnsgeek.com",
  	"giize.com",
  	"gleeze.com",
  	"kozow.com",
  	"loseyourip.com",
  	"ooguy.com",
  	"theworkpc.com",
  	"casacam.net",
  	"dynu.net",
  	"accesscam.org",
  	"camdvr.org",
  	"freeddns.org",
  	"mywire.org",
  	"webredirect.org",
  	"myddns.rocks",
  	"blogsite.xyz",
  	"dynv6.net",
  	"e4.cz",
  	"eero.online",
  	"eero-stage.online",
  	"elementor.cloud",
  	"elementor.cool",
  	"en-root.fr",
  	"mytuleap.com",
  	"tuleap-partners.com",
  	"encr.app",
  	"encoreapi.com",
  	"onred.one",
  	"staging.onred.one",
  	"eu.encoway.cloud",
  	"eu.org",
  	"al.eu.org",
  	"asso.eu.org",
  	"at.eu.org",
  	"au.eu.org",
  	"be.eu.org",
  	"bg.eu.org",
  	"ca.eu.org",
  	"cd.eu.org",
  	"ch.eu.org",
  	"cn.eu.org",
  	"cy.eu.org",
  	"cz.eu.org",
  	"de.eu.org",
  	"dk.eu.org",
  	"edu.eu.org",
  	"ee.eu.org",
  	"es.eu.org",
  	"fi.eu.org",
  	"fr.eu.org",
  	"gr.eu.org",
  	"hr.eu.org",
  	"hu.eu.org",
  	"ie.eu.org",
  	"il.eu.org",
  	"in.eu.org",
  	"int.eu.org",
  	"is.eu.org",
  	"it.eu.org",
  	"jp.eu.org",
  	"kr.eu.org",
  	"lt.eu.org",
  	"lu.eu.org",
  	"lv.eu.org",
  	"mc.eu.org",
  	"me.eu.org",
  	"mk.eu.org",
  	"mt.eu.org",
  	"my.eu.org",
  	"net.eu.org",
  	"ng.eu.org",
  	"nl.eu.org",
  	"no.eu.org",
  	"nz.eu.org",
  	"paris.eu.org",
  	"pl.eu.org",
  	"pt.eu.org",
  	"q-a.eu.org",
  	"ro.eu.org",
  	"ru.eu.org",
  	"se.eu.org",
  	"si.eu.org",
  	"sk.eu.org",
  	"tr.eu.org",
  	"uk.eu.org",
  	"us.eu.org",
  	"eurodir.ru",
  	"eu-1.evennode.com",
  	"eu-2.evennode.com",
  	"eu-3.evennode.com",
  	"eu-4.evennode.com",
  	"us-1.evennode.com",
  	"us-2.evennode.com",
  	"us-3.evennode.com",
  	"us-4.evennode.com",
  	"twmail.cc",
  	"twmail.net",
  	"twmail.org",
  	"mymailer.com.tw",
  	"url.tw",
  	"onfabrica.com",
  	"apps.fbsbx.com",
  	"ru.net",
  	"adygeya.ru",
  	"bashkiria.ru",
  	"bir.ru",
  	"cbg.ru",
  	"com.ru",
  	"dagestan.ru",
  	"grozny.ru",
  	"kalmykia.ru",
  	"kustanai.ru",
  	"marine.ru",
  	"mordovia.ru",
  	"msk.ru",
  	"mytis.ru",
  	"nalchik.ru",
  	"nov.ru",
  	"pyatigorsk.ru",
  	"spb.ru",
  	"vladikavkaz.ru",
  	"vladimir.ru",
  	"abkhazia.su",
  	"adygeya.su",
  	"aktyubinsk.su",
  	"arkhangelsk.su",
  	"armenia.su",
  	"ashgabad.su",
  	"azerbaijan.su",
  	"balashov.su",
  	"bashkiria.su",
  	"bryansk.su",
  	"bukhara.su",
  	"chimkent.su",
  	"dagestan.su",
  	"east-kazakhstan.su",
  	"exnet.su",
  	"georgia.su",
  	"grozny.su",
  	"ivanovo.su",
  	"jambyl.su",
  	"kalmykia.su",
  	"kaluga.su",
  	"karacol.su",
  	"karaganda.su",
  	"karelia.su",
  	"khakassia.su",
  	"krasnodar.su",
  	"kurgan.su",
  	"kustanai.su",
  	"lenug.su",
  	"mangyshlak.su",
  	"mordovia.su",
  	"msk.su",
  	"murmansk.su",
  	"nalchik.su",
  	"navoi.su",
  	"north-kazakhstan.su",
  	"nov.su",
  	"obninsk.su",
  	"penza.su",
  	"pokrovsk.su",
  	"sochi.su",
  	"spb.su",
  	"tashkent.su",
  	"termez.su",
  	"togliatti.su",
  	"troitsk.su",
  	"tselinograd.su",
  	"tula.su",
  	"tuva.su",
  	"vladikavkaz.su",
  	"vladimir.su",
  	"vologda.su",
  	"channelsdvr.net",
  	"u.channelsdvr.net",
  	"edgecompute.app",
  	"fastly-terrarium.com",
  	"fastlylb.net",
  	"map.fastlylb.net",
  	"freetls.fastly.net",
  	"map.fastly.net",
  	"a.prod.fastly.net",
  	"global.prod.fastly.net",
  	"a.ssl.fastly.net",
  	"b.ssl.fastly.net",
  	"global.ssl.fastly.net",
  	"fastvps-server.com",
  	"fastvps.host",
  	"myfast.host",
  	"fastvps.site",
  	"myfast.space",
  	"fedorainfracloud.org",
  	"fedorapeople.org",
  	"cloud.fedoraproject.org",
  	"app.os.fedoraproject.org",
  	"app.os.stg.fedoraproject.org",
  	"conn.uk",
  	"copro.uk",
  	"hosp.uk",
  	"mydobiss.com",
  	"fh-muenster.io",
  	"filegear.me",
  	"filegear-au.me",
  	"filegear-de.me",
  	"filegear-gb.me",
  	"filegear-ie.me",
  	"filegear-jp.me",
  	"filegear-sg.me",
  	"firebaseapp.com",
  	"fireweb.app",
  	"flap.id",
  	"onflashdrive.app",
  	"fldrv.com",
  	"fly.dev",
  	"edgeapp.net",
  	"shw.io",
  	"flynnhosting.net",
  	"forgeblocks.com",
  	"id.forgerock.io",
  	"framer.app",
  	"framercanvas.com",
  	"*.frusky.de",
  	"ravpage.co.il",
  	"0e.vc",
  	"freebox-os.com",
  	"freeboxos.com",
  	"fbx-os.fr",
  	"fbxos.fr",
  	"freebox-os.fr",
  	"freeboxos.fr",
  	"freedesktop.org",
  	"freemyip.com",
  	"wien.funkfeuer.at",
  	"*.futurecms.at",
  	"*.ex.futurecms.at",
  	"*.in.futurecms.at",
  	"futurehosting.at",
  	"futuremailing.at",
  	"*.ex.ortsinfo.at",
  	"*.kunden.ortsinfo.at",
  	"*.statics.cloud",
  	"independent-commission.uk",
  	"independent-inquest.uk",
  	"independent-inquiry.uk",
  	"independent-panel.uk",
  	"independent-review.uk",
  	"public-inquiry.uk",
  	"royal-commission.uk",
  	"campaign.gov.uk",
  	"service.gov.uk",
  	"api.gov.uk",
  	"gehirn.ne.jp",
  	"usercontent.jp",
  	"gentapps.com",
  	"gentlentapis.com",
  	"lab.ms",
  	"cdn-edges.net",
  	"ghost.io",
  	"gsj.bz",
  	"githubusercontent.com",
  	"githubpreview.dev",
  	"github.io",
  	"gitlab.io",
  	"gitapp.si",
  	"gitpage.si",
  	"glitch.me",
  	"nog.community",
  	"co.ro",
  	"shop.ro",
  	"lolipop.io",
  	"angry.jp",
  	"babyblue.jp",
  	"babymilk.jp",
  	"backdrop.jp",
  	"bambina.jp",
  	"bitter.jp",
  	"blush.jp",
  	"boo.jp",
  	"boy.jp",
  	"boyfriend.jp",
  	"but.jp",
  	"candypop.jp",
  	"capoo.jp",
  	"catfood.jp",
  	"cheap.jp",
  	"chicappa.jp",
  	"chillout.jp",
  	"chips.jp",
  	"chowder.jp",
  	"chu.jp",
  	"ciao.jp",
  	"cocotte.jp",
  	"coolblog.jp",
  	"cranky.jp",
  	"cutegirl.jp",
  	"daa.jp",
  	"deca.jp",
  	"deci.jp",
  	"digick.jp",
  	"egoism.jp",
  	"fakefur.jp",
  	"fem.jp",
  	"flier.jp",
  	"floppy.jp",
  	"fool.jp",
  	"frenchkiss.jp",
  	"girlfriend.jp",
  	"girly.jp",
  	"gloomy.jp",
  	"gonna.jp",
  	"greater.jp",
  	"hacca.jp",
  	"heavy.jp",
  	"her.jp",
  	"hiho.jp",
  	"hippy.jp",
  	"holy.jp",
  	"hungry.jp",
  	"icurus.jp",
  	"itigo.jp",
  	"jellybean.jp",
  	"kikirara.jp",
  	"kill.jp",
  	"kilo.jp",
  	"kuron.jp",
  	"littlestar.jp",
  	"lolipopmc.jp",
  	"lolitapunk.jp",
  	"lomo.jp",
  	"lovepop.jp",
  	"lovesick.jp",
  	"main.jp",
  	"mods.jp",
  	"mond.jp",
  	"mongolian.jp",
  	"moo.jp",
  	"namaste.jp",
  	"nikita.jp",
  	"nobushi.jp",
  	"noor.jp",
  	"oops.jp",
  	"parallel.jp",
  	"parasite.jp",
  	"pecori.jp",
  	"peewee.jp",
  	"penne.jp",
  	"pepper.jp",
  	"perma.jp",
  	"pigboat.jp",
  	"pinoko.jp",
  	"punyu.jp",
  	"pupu.jp",
  	"pussycat.jp",
  	"pya.jp",
  	"raindrop.jp",
  	"readymade.jp",
  	"sadist.jp",
  	"schoolbus.jp",
  	"secret.jp",
  	"staba.jp",
  	"stripper.jp",
  	"sub.jp",
  	"sunnyday.jp",
  	"thick.jp",
  	"tonkotsu.jp",
  	"under.jp",
  	"upper.jp",
  	"velvet.jp",
  	"verse.jp",
  	"versus.jp",
  	"vivian.jp",
  	"watson.jp",
  	"weblike.jp",
  	"whitesnow.jp",
  	"zombie.jp",
  	"heteml.net",
  	"cloudapps.digital",
  	"london.cloudapps.digital",
  	"pymnt.uk",
  	"homeoffice.gov.uk",
  	"ro.im",
  	"goip.de",
  	"run.app",
  	"a.run.app",
  	"web.app",
  	"*.0emm.com",
  	"appspot.com",
  	"*.r.appspot.com",
  	"codespot.com",
  	"googleapis.com",
  	"googlecode.com",
  	"pagespeedmobilizer.com",
  	"publishproxy.com",
  	"withgoogle.com",
  	"withyoutube.com",
  	"*.gateway.dev",
  	"cloud.goog",
  	"translate.goog",
  	"*.usercontent.goog",
  	"cloudfunctions.net",
  	"blogspot.ae",
  	"blogspot.al",
  	"blogspot.am",
  	"blogspot.ba",
  	"blogspot.be",
  	"blogspot.bg",
  	"blogspot.bj",
  	"blogspot.ca",
  	"blogspot.cf",
  	"blogspot.ch",
  	"blogspot.cl",
  	"blogspot.co.at",
  	"blogspot.co.id",
  	"blogspot.co.il",
  	"blogspot.co.ke",
  	"blogspot.co.nz",
  	"blogspot.co.uk",
  	"blogspot.co.za",
  	"blogspot.com",
  	"blogspot.com.ar",
  	"blogspot.com.au",
  	"blogspot.com.br",
  	"blogspot.com.by",
  	"blogspot.com.co",
  	"blogspot.com.cy",
  	"blogspot.com.ee",
  	"blogspot.com.eg",
  	"blogspot.com.es",
  	"blogspot.com.mt",
  	"blogspot.com.ng",
  	"blogspot.com.tr",
  	"blogspot.com.uy",
  	"blogspot.cv",
  	"blogspot.cz",
  	"blogspot.de",
  	"blogspot.dk",
  	"blogspot.fi",
  	"blogspot.fr",
  	"blogspot.gr",
  	"blogspot.hk",
  	"blogspot.hr",
  	"blogspot.hu",
  	"blogspot.ie",
  	"blogspot.in",
  	"blogspot.is",
  	"blogspot.it",
  	"blogspot.jp",
  	"blogspot.kr",
  	"blogspot.li",
  	"blogspot.lt",
  	"blogspot.lu",
  	"blogspot.md",
  	"blogspot.mk",
  	"blogspot.mr",
  	"blogspot.mx",
  	"blogspot.my",
  	"blogspot.nl",
  	"blogspot.no",
  	"blogspot.pe",
  	"blogspot.pt",
  	"blogspot.qa",
  	"blogspot.re",
  	"blogspot.ro",
  	"blogspot.rs",
  	"blogspot.ru",
  	"blogspot.se",
  	"blogspot.sg",
  	"blogspot.si",
  	"blogspot.sk",
  	"blogspot.sn",
  	"blogspot.td",
  	"blogspot.tw",
  	"blogspot.ug",
  	"blogspot.vn",
  	"goupile.fr",
  	"gov.nl",
  	"awsmppl.com",
  	"günstigbestellen.de",
  	"günstigliefern.de",
  	"fin.ci",
  	"free.hr",
  	"caa.li",
  	"ua.rs",
  	"conf.se",
  	"hs.zone",
  	"hs.run",
  	"hashbang.sh",
  	"hasura.app",
  	"hasura-app.io",
  	"pages.it.hs-heilbronn.de",
  	"hepforge.org",
  	"herokuapp.com",
  	"herokussl.com",
  	"ravendb.cloud",
  	"myravendb.com",
  	"ravendb.community",
  	"ravendb.me",
  	"development.run",
  	"ravendb.run",
  	"homesklep.pl",
  	"secaas.hk",
  	"hoplix.shop",
  	"orx.biz",
  	"biz.gl",
  	"col.ng",
  	"firm.ng",
  	"gen.ng",
  	"ltd.ng",
  	"ngo.ng",
  	"edu.scot",
  	"sch.so",
  	"hostyhosting.io",
  	"häkkinen.fi",
  	"*.moonscale.io",
  	"moonscale.net",
  	"iki.fi",
  	"ibxos.it",
  	"iliadboxos.it",
  	"impertrixcdn.com",
  	"impertrix.com",
  	"smushcdn.com",
  	"wphostedmail.com",
  	"wpmucdn.com",
  	"tempurl.host",
  	"wpmudev.host",
  	"dyn-berlin.de",
  	"in-berlin.de",
  	"in-brb.de",
  	"in-butter.de",
  	"in-dsl.de",
  	"in-dsl.net",
  	"in-dsl.org",
  	"in-vpn.de",
  	"in-vpn.net",
  	"in-vpn.org",
  	"biz.at",
  	"info.at",
  	"info.cx",
  	"ac.leg.br",
  	"al.leg.br",
  	"am.leg.br",
  	"ap.leg.br",
  	"ba.leg.br",
  	"ce.leg.br",
  	"df.leg.br",
  	"es.leg.br",
  	"go.leg.br",
  	"ma.leg.br",
  	"mg.leg.br",
  	"ms.leg.br",
  	"mt.leg.br",
  	"pa.leg.br",
  	"pb.leg.br",
  	"pe.leg.br",
  	"pi.leg.br",
  	"pr.leg.br",
  	"rj.leg.br",
  	"rn.leg.br",
  	"ro.leg.br",
  	"rr.leg.br",
  	"rs.leg.br",
  	"sc.leg.br",
  	"se.leg.br",
  	"sp.leg.br",
  	"to.leg.br",
  	"pixolino.com",
  	"na4u.ru",
  	"iopsys.se",
  	"ipifony.net",
  	"iservschule.de",
  	"mein-iserv.de",
  	"schulplattform.de",
  	"schulserver.de",
  	"test-iserv.de",
  	"iserv.dev",
  	"iobb.net",
  	"mel.cloudlets.com.au",
  	"cloud.interhostsolutions.be",
  	"users.scale.virtualcloud.com.br",
  	"mycloud.by",
  	"alp1.ae.flow.ch",
  	"appengine.flow.ch",
  	"es-1.axarnet.cloud",
  	"diadem.cloud",
  	"vip.jelastic.cloud",
  	"jele.cloud",
  	"it1.eur.aruba.jenv-aruba.cloud",
  	"it1.jenv-aruba.cloud",
  	"keliweb.cloud",
  	"cs.keliweb.cloud",
  	"oxa.cloud",
  	"tn.oxa.cloud",
  	"uk.oxa.cloud",
  	"primetel.cloud",
  	"uk.primetel.cloud",
  	"ca.reclaim.cloud",
  	"uk.reclaim.cloud",
  	"us.reclaim.cloud",
  	"ch.trendhosting.cloud",
  	"de.trendhosting.cloud",
  	"jele.club",
  	"amscompute.com",
  	"clicketcloud.com",
  	"dopaas.com",
  	"hidora.com",
  	"paas.hosted-by-previder.com",
  	"rag-cloud.hosteur.com",
  	"rag-cloud-ch.hosteur.com",
  	"jcloud.ik-server.com",
  	"jcloud-ver-jpc.ik-server.com",
  	"demo.jelastic.com",
  	"kilatiron.com",
  	"paas.massivegrid.com",
  	"jed.wafaicloud.com",
  	"lon.wafaicloud.com",
  	"ryd.wafaicloud.com",
  	"j.scaleforce.com.cy",
  	"jelastic.dogado.eu",
  	"fi.cloudplatform.fi",
  	"demo.datacenter.fi",
  	"paas.datacenter.fi",
  	"jele.host",
  	"mircloud.host",
  	"paas.beebyte.io",
  	"sekd1.beebyteapp.io",
  	"jele.io",
  	"cloud-fr1.unispace.io",
  	"jc.neen.it",
  	"cloud.jelastic.open.tim.it",
  	"jcloud.kz",
  	"upaas.kazteleport.kz",
  	"cloudjiffy.net",
  	"fra1-de.cloudjiffy.net",
  	"west1-us.cloudjiffy.net",
  	"jls-sto1.elastx.net",
  	"jls-sto2.elastx.net",
  	"jls-sto3.elastx.net",
  	"faststacks.net",
  	"fr-1.paas.massivegrid.net",
  	"lon-1.paas.massivegrid.net",
  	"lon-2.paas.massivegrid.net",
  	"ny-1.paas.massivegrid.net",
  	"ny-2.paas.massivegrid.net",
  	"sg-1.paas.massivegrid.net",
  	"jelastic.saveincloud.net",
  	"nordeste-idc.saveincloud.net",
  	"j.scaleforce.net",
  	"jelastic.tsukaeru.net",
  	"sdscloud.pl",
  	"unicloud.pl",
  	"mircloud.ru",
  	"jelastic.regruhosting.ru",
  	"enscaled.sg",
  	"jele.site",
  	"jelastic.team",
  	"orangecloud.tn",
  	"j.layershift.co.uk",
  	"phx.enscaled.us",
  	"mircloud.us",
  	"myjino.ru",
  	"*.hosting.myjino.ru",
  	"*.landing.myjino.ru",
  	"*.spectrum.myjino.ru",
  	"*.vps.myjino.ru",
  	"jotelulu.cloud",
  	"*.triton.zone",
  	"*.cns.joyent.com",
  	"js.org",
  	"kaas.gg",
  	"khplay.nl",
  	"ktistory.com",
  	"kapsi.fi",
  	"keymachine.de",
  	"kinghost.net",
  	"uni5.net",
  	"knightpoint.systems",
  	"koobin.events",
  	"oya.to",
  	"kuleuven.cloud",
  	"ezproxy.kuleuven.be",
  	"co.krd",
  	"edu.krd",
  	"krellian.net",
  	"webthings.io",
  	"git-repos.de",
  	"lcube-server.de",
  	"svn-repos.de",
  	"leadpages.co",
  	"lpages.co",
  	"lpusercontent.com",
  	"lelux.site",
  	"co.business",
  	"co.education",
  	"co.events",
  	"co.financial",
  	"co.network",
  	"co.place",
  	"co.technology",
  	"app.lmpm.com",
  	"linkyard.cloud",
  	"linkyard-cloud.ch",
  	"members.linode.com",
  	"*.nodebalancer.linode.com",
  	"*.linodeobjects.com",
  	"ip.linodeusercontent.com",
  	"we.bs",
  	"*.user.localcert.dev",
  	"localzone.xyz",
  	"loginline.app",
  	"loginline.dev",
  	"loginline.io",
  	"loginline.services",
  	"loginline.site",
  	"servers.run",
  	"lohmus.me",
  	"krasnik.pl",
  	"leczna.pl",
  	"lubartow.pl",
  	"lublin.pl",
  	"poniatowa.pl",
  	"swidnik.pl",
  	"glug.org.uk",
  	"lug.org.uk",
  	"lugs.org.uk",
  	"barsy.bg",
  	"barsy.co.uk",
  	"barsyonline.co.uk",
  	"barsycenter.com",
  	"barsyonline.com",
  	"barsy.club",
  	"barsy.de",
  	"barsy.eu",
  	"barsy.in",
  	"barsy.info",
  	"barsy.io",
  	"barsy.me",
  	"barsy.menu",
  	"barsy.mobi",
  	"barsy.net",
  	"barsy.online",
  	"barsy.org",
  	"barsy.pro",
  	"barsy.pub",
  	"barsy.ro",
  	"barsy.shop",
  	"barsy.site",
  	"barsy.support",
  	"barsy.uk",
  	"*.magentosite.cloud",
  	"mayfirst.info",
  	"mayfirst.org",
  	"hb.cldmail.ru",
  	"cn.vu",
  	"mazeplay.com",
  	"mcpe.me",
  	"mcdir.me",
  	"mcdir.ru",
  	"mcpre.ru",
  	"vps.mcdir.ru",
  	"mediatech.by",
  	"mediatech.dev",
  	"hra.health",
  	"miniserver.com",
  	"memset.net",
  	"messerli.app",
  	"*.cloud.metacentrum.cz",
  	"custom.metacentrum.cz",
  	"flt.cloud.muni.cz",
  	"usr.cloud.muni.cz",
  	"meteorapp.com",
  	"eu.meteorapp.com",
  	"co.pl",
  	"*.azurecontainer.io",
  	"azurewebsites.net",
  	"azure-mobile.net",
  	"cloudapp.net",
  	"azurestaticapps.net",
  	"1.azurestaticapps.net",
  	"centralus.azurestaticapps.net",
  	"eastasia.azurestaticapps.net",
  	"eastus2.azurestaticapps.net",
  	"westeurope.azurestaticapps.net",
  	"westus2.azurestaticapps.net",
  	"csx.cc",
  	"mintere.site",
  	"forte.id",
  	"mozilla-iot.org",
  	"bmoattachments.org",
  	"net.ru",
  	"org.ru",
  	"pp.ru",
  	"hostedpi.com",
  	"customer.mythic-beasts.com",
  	"caracal.mythic-beasts.com",
  	"fentiger.mythic-beasts.com",
  	"lynx.mythic-beasts.com",
  	"ocelot.mythic-beasts.com",
  	"oncilla.mythic-beasts.com",
  	"onza.mythic-beasts.com",
  	"sphinx.mythic-beasts.com",
  	"vs.mythic-beasts.com",
  	"x.mythic-beasts.com",
  	"yali.mythic-beasts.com",
  	"cust.retrosnub.co.uk",
  	"ui.nabu.casa",
  	"pony.club",
  	"of.fashion",
  	"in.london",
  	"of.london",
  	"from.marketing",
  	"with.marketing",
  	"for.men",
  	"repair.men",
  	"and.mom",
  	"for.mom",
  	"for.one",
  	"under.one",
  	"for.sale",
  	"that.win",
  	"from.work",
  	"to.work",
  	"cloud.nospamproxy.com",
  	"netlify.app",
  	"4u.com",
  	"ngrok.io",
  	"nh-serv.co.uk",
  	"nfshost.com",
  	"*.developer.app",
  	"noop.app",
  	"*.northflank.app",
  	"*.build.run",
  	"*.code.run",
  	"*.database.run",
  	"*.migration.run",
  	"noticeable.news",
  	"dnsking.ch",
  	"mypi.co",
  	"n4t.co",
  	"001www.com",
  	"ddnslive.com",
  	"myiphost.com",
  	"forumz.info",
  	"16-b.it",
  	"32-b.it",
  	"64-b.it",
  	"soundcast.me",
  	"tcp4.me",
  	"dnsup.net",
  	"hicam.net",
  	"now-dns.net",
  	"ownip.net",
  	"vpndns.net",
  	"dynserv.org",
  	"now-dns.org",
  	"x443.pw",
  	"now-dns.top",
  	"ntdll.top",
  	"freeddns.us",
  	"crafting.xyz",
  	"zapto.xyz",
  	"nsupdate.info",
  	"nerdpol.ovh",
  	"blogsyte.com",
  	"brasilia.me",
  	"cable-modem.org",
  	"ciscofreak.com",
  	"collegefan.org",
  	"couchpotatofries.org",
  	"damnserver.com",
  	"ddns.me",
  	"ditchyourip.com",
  	"dnsfor.me",
  	"dnsiskinky.com",
  	"dvrcam.info",
  	"dynns.com",
  	"eating-organic.net",
  	"fantasyleague.cc",
  	"geekgalaxy.com",
  	"golffan.us",
  	"health-carereform.com",
  	"homesecuritymac.com",
  	"homesecuritypc.com",
  	"hopto.me",
  	"ilovecollege.info",
  	"loginto.me",
  	"mlbfan.org",
  	"mmafan.biz",
  	"myactivedirectory.com",
  	"mydissent.net",
  	"myeffect.net",
  	"mymediapc.net",
  	"mypsx.net",
  	"mysecuritycamera.com",
  	"mysecuritycamera.net",
  	"mysecuritycamera.org",
  	"net-freaks.com",
  	"nflfan.org",
  	"nhlfan.net",
  	"no-ip.ca",
  	"no-ip.co.uk",
  	"no-ip.net",
  	"noip.us",
  	"onthewifi.com",
  	"pgafan.net",
  	"point2this.com",
  	"pointto.us",
  	"privatizehealthinsurance.net",
  	"quicksytes.com",
  	"read-books.org",
  	"securitytactics.com",
  	"serveexchange.com",
  	"servehumour.com",
  	"servep2p.com",
  	"servesarcasm.com",
  	"stufftoread.com",
  	"ufcfan.org",
  	"unusualperson.com",
  	"workisboring.com",
  	"3utilities.com",
  	"bounceme.net",
  	"ddns.net",
  	"ddnsking.com",
  	"gotdns.ch",
  	"hopto.org",
  	"myftp.biz",
  	"myftp.org",
  	"myvnc.com",
  	"no-ip.biz",
  	"no-ip.info",
  	"no-ip.org",
  	"noip.me",
  	"redirectme.net",
  	"servebeer.com",
  	"serveblog.net",
  	"servecounterstrike.com",
  	"serveftp.com",
  	"servegame.com",
  	"servehalflife.com",
  	"servehttp.com",
  	"serveirc.com",
  	"serveminecraft.net",
  	"servemp3.com",
  	"servepics.com",
  	"servequake.com",
  	"sytes.net",
  	"webhop.me",
  	"zapto.org",
  	"stage.nodeart.io",
  	"pcloud.host",
  	"nyc.mn",
  	"static.observableusercontent.com",
  	"cya.gg",
  	"omg.lol",
  	"cloudycluster.net",
  	"omniwe.site",
  	"service.one",
  	"nid.io",
  	"opensocial.site",
  	"opencraft.hosting",
  	"orsites.com",
  	"operaunite.com",
  	"tech.orange",
  	"authgear-staging.com",
  	"authgearapps.com",
  	"skygearapp.com",
  	"outsystemscloud.com",
  	"*.webpaas.ovh.net",
  	"*.hosting.ovh.net",
  	"ownprovider.com",
  	"own.pm",
  	"*.owo.codes",
  	"ox.rs",
  	"oy.lc",
  	"pgfog.com",
  	"pagefrontapp.com",
  	"pagexl.com",
  	"*.paywhirl.com",
  	"bar0.net",
  	"bar1.net",
  	"bar2.net",
  	"rdv.to",
  	"art.pl",
  	"gliwice.pl",
  	"krakow.pl",
  	"poznan.pl",
  	"wroc.pl",
  	"zakopane.pl",
  	"pantheonsite.io",
  	"gotpantheon.com",
  	"mypep.link",
  	"perspecta.cloud",
  	"lk3.ru",
  	"on-web.fr",
  	"bc.platform.sh",
  	"ent.platform.sh",
  	"eu.platform.sh",
  	"us.platform.sh",
  	"*.platformsh.site",
  	"*.tst.site",
  	"platter-app.com",
  	"platter-app.dev",
  	"platterp.us",
  	"pdns.page",
  	"plesk.page",
  	"pleskns.com",
  	"dyn53.io",
  	"onporter.run",
  	"co.bn",
  	"postman-echo.com",
  	"pstmn.io",
  	"mock.pstmn.io",
  	"httpbin.org",
  	"prequalifyme.today",
  	"xen.prgmr.com",
  	"priv.at",
  	"prvcy.page",
  	"*.dweb.link",
  	"protonet.io",
  	"chirurgiens-dentistes-en-france.fr",
  	"byen.site",
  	"pubtls.org",
  	"pythonanywhere.com",
  	"eu.pythonanywhere.com",
  	"qoto.io",
  	"qualifioapp.com",
  	"qbuser.com",
  	"cloudsite.builders",
  	"instances.spawn.cc",
  	"instantcloud.cn",
  	"ras.ru",
  	"qa2.com",
  	"qcx.io",
  	"*.sys.qcx.io",
  	"dev-myqnapcloud.com",
  	"alpha-myqnapcloud.com",
  	"myqnapcloud.com",
  	"*.quipelements.com",
  	"vapor.cloud",
  	"vaporcloud.io",
  	"rackmaze.com",
  	"rackmaze.net",
  	"g.vbrplsbx.io",
  	"*.on-k3s.io",
  	"*.on-rancher.cloud",
  	"*.on-rio.io",
  	"readthedocs.io",
  	"rhcloud.com",
  	"app.render.com",
  	"onrender.com",
  	"repl.co",
  	"id.repl.co",
  	"repl.run",
  	"resindevice.io",
  	"devices.resinstaging.io",
  	"hzc.io",
  	"wellbeingzone.eu",
  	"wellbeingzone.co.uk",
  	"adimo.co.uk",
  	"itcouldbewor.se",
  	"git-pages.rit.edu",
  	"rocky.page",
  	"биз.рус",
  	"ком.рус",
  	"крым.рус",
  	"мир.рус",
  	"мск.рус",
  	"орг.рус",
  	"самара.рус",
  	"сочи.рус",
  	"спб.рус",
  	"я.рус",
  	"*.builder.code.com",
  	"*.dev-builder.code.com",
  	"*.stg-builder.code.com",
  	"sandcats.io",
  	"logoip.de",
  	"logoip.com",
  	"fr-par-1.baremetal.scw.cloud",
  	"fr-par-2.baremetal.scw.cloud",
  	"nl-ams-1.baremetal.scw.cloud",
  	"fnc.fr-par.scw.cloud",
  	"functions.fnc.fr-par.scw.cloud",
  	"k8s.fr-par.scw.cloud",
  	"nodes.k8s.fr-par.scw.cloud",
  	"s3.fr-par.scw.cloud",
  	"s3-website.fr-par.scw.cloud",
  	"whm.fr-par.scw.cloud",
  	"priv.instances.scw.cloud",
  	"pub.instances.scw.cloud",
  	"k8s.scw.cloud",
  	"k8s.nl-ams.scw.cloud",
  	"nodes.k8s.nl-ams.scw.cloud",
  	"s3.nl-ams.scw.cloud",
  	"s3-website.nl-ams.scw.cloud",
  	"whm.nl-ams.scw.cloud",
  	"k8s.pl-waw.scw.cloud",
  	"nodes.k8s.pl-waw.scw.cloud",
  	"s3.pl-waw.scw.cloud",
  	"s3-website.pl-waw.scw.cloud",
  	"scalebook.scw.cloud",
  	"smartlabeling.scw.cloud",
  	"dedibox.fr",
  	"schokokeks.net",
  	"gov.scot",
  	"service.gov.scot",
  	"scrysec.com",
  	"firewall-gateway.com",
  	"firewall-gateway.de",
  	"my-gateway.de",
  	"my-router.de",
  	"spdns.de",
  	"spdns.eu",
  	"firewall-gateway.net",
  	"my-firewall.org",
  	"myfirewall.org",
  	"spdns.org",
  	"seidat.net",
  	"sellfy.store",
  	"senseering.net",
  	"minisite.ms",
  	"magnet.page",
  	"biz.ua",
  	"co.ua",
  	"pp.ua",
  	"shiftcrypto.dev",
  	"shiftcrypto.io",
  	"shiftedit.io",
  	"myshopblocks.com",
  	"myshopify.com",
  	"shopitsite.com",
  	"shopware.store",
  	"mo-siemens.io",
  	"1kapp.com",
  	"appchizi.com",
  	"applinzi.com",
  	"sinaapp.com",
  	"vipsinaapp.com",
  	"siteleaf.net",
  	"bounty-full.com",
  	"alpha.bounty-full.com",
  	"beta.bounty-full.com",
  	"small-web.org",
  	"vp4.me",
  	"try-snowplow.com",
  	"srht.site",
  	"stackhero-network.com",
  	"musician.io",
  	"novecore.site",
  	"static.land",
  	"dev.static.land",
  	"sites.static.land",
  	"storebase.store",
  	"vps-host.net",
  	"atl.jelastic.vps-host.net",
  	"njs.jelastic.vps-host.net",
  	"ric.jelastic.vps-host.net",
  	"playstation-cloud.com",
  	"apps.lair.io",
  	"*.stolos.io",
  	"spacekit.io",
  	"customer.speedpartner.de",
  	"myspreadshop.at",
  	"myspreadshop.com.au",
  	"myspreadshop.be",
  	"myspreadshop.ca",
  	"myspreadshop.ch",
  	"myspreadshop.com",
  	"myspreadshop.de",
  	"myspreadshop.dk",
  	"myspreadshop.es",
  	"myspreadshop.fi",
  	"myspreadshop.fr",
  	"myspreadshop.ie",
  	"myspreadshop.it",
  	"myspreadshop.net",
  	"myspreadshop.nl",
  	"myspreadshop.no",
  	"myspreadshop.pl",
  	"myspreadshop.se",
  	"myspreadshop.co.uk",
  	"api.stdlib.com",
  	"storj.farm",
  	"utwente.io",
  	"soc.srcf.net",
  	"user.srcf.net",
  	"temp-dns.com",
  	"supabase.co",
  	"supabase.in",
  	"supabase.net",
  	"su.paba.se",
  	"*.s5y.io",
  	"*.sensiosite.cloud",
  	"syncloud.it",
  	"dscloud.biz",
  	"direct.quickconnect.cn",
  	"dsmynas.com",
  	"familyds.com",
  	"diskstation.me",
  	"dscloud.me",
  	"i234.me",
  	"myds.me",
  	"synology.me",
  	"dscloud.mobi",
  	"dsmynas.net",
  	"familyds.net",
  	"dsmynas.org",
  	"familyds.org",
  	"vpnplus.to",
  	"direct.quickconnect.to",
  	"tabitorder.co.il",
  	"taifun-dns.de",
  	"beta.tailscale.net",
  	"ts.net",
  	"gda.pl",
  	"gdansk.pl",
  	"gdynia.pl",
  	"med.pl",
  	"sopot.pl",
  	"site.tb-hosting.com",
  	"edugit.io",
  	"s3.teckids.org",
  	"telebit.app",
  	"telebit.io",
  	"*.telebit.xyz",
  	"gwiddle.co.uk",
  	"*.firenet.ch",
  	"*.svc.firenet.ch",
  	"reservd.com",
  	"thingdustdata.com",
  	"cust.dev.thingdust.io",
  	"cust.disrec.thingdust.io",
  	"cust.prod.thingdust.io",
  	"cust.testing.thingdust.io",
  	"reservd.dev.thingdust.io",
  	"reservd.disrec.thingdust.io",
  	"reservd.testing.thingdust.io",
  	"tickets.io",
  	"arvo.network",
  	"azimuth.network",
  	"tlon.network",
  	"torproject.net",
  	"pages.torproject.net",
  	"bloxcms.com",
  	"townnews-staging.com",
  	"tbits.me",
  	"12hp.at",
  	"2ix.at",
  	"4lima.at",
  	"lima-city.at",
  	"12hp.ch",
  	"2ix.ch",
  	"4lima.ch",
  	"lima-city.ch",
  	"trafficplex.cloud",
  	"de.cool",
  	"12hp.de",
  	"2ix.de",
  	"4lima.de",
  	"lima-city.de",
  	"1337.pictures",
  	"clan.rip",
  	"lima-city.rocks",
  	"webspace.rocks",
  	"lima.zone",
  	"*.transurl.be",
  	"*.transurl.eu",
  	"*.transurl.nl",
  	"site.transip.me",
  	"tuxfamily.org",
  	"dd-dns.de",
  	"diskstation.eu",
  	"diskstation.org",
  	"dray-dns.de",
  	"draydns.de",
  	"dyn-vpn.de",
  	"dynvpn.de",
  	"mein-vigor.de",
  	"my-vigor.de",
  	"my-wan.de",
  	"syno-ds.de",
  	"synology-diskstation.de",
  	"synology-ds.de",
  	"typedream.app",
  	"pro.typeform.com",
  	"uber.space",
  	"*.uberspace.de",
  	"hk.com",
  	"hk.org",
  	"ltd.hk",
  	"inc.hk",
  	"name.pm",
  	"sch.tf",
  	"biz.wf",
  	"sch.wf",
  	"org.yt",
  	"virtualuser.de",
  	"virtual-user.de",
  	"upli.io",
  	"urown.cloud",
  	"dnsupdate.info",
  	"lib.de.us",
  	"2038.io",
  	"vercel.app",
  	"vercel.dev",
  	"now.sh",
  	"router.management",
  	"v-info.info",
  	"voorloper.cloud",
  	"neko.am",
  	"nyaa.am",
  	"be.ax",
  	"cat.ax",
  	"es.ax",
  	"eu.ax",
  	"gg.ax",
  	"mc.ax",
  	"us.ax",
  	"xy.ax",
  	"nl.ci",
  	"xx.gl",
  	"app.gp",
  	"blog.gt",
  	"de.gt",
  	"to.gt",
  	"be.gy",
  	"cc.hn",
  	"blog.kg",
  	"io.kg",
  	"jp.kg",
  	"tv.kg",
  	"uk.kg",
  	"us.kg",
  	"de.ls",
  	"at.md",
  	"de.md",
  	"jp.md",
  	"to.md",
  	"indie.porn",
  	"vxl.sh",
  	"ch.tc",
  	"me.tc",
  	"we.tc",
  	"nyan.to",
  	"at.vg",
  	"blog.vu",
  	"dev.vu",
  	"me.vu",
  	"v.ua",
  	"*.vultrobjects.com",
  	"wafflecell.com",
  	"*.webhare.dev",
  	"reserve-online.net",
  	"reserve-online.com",
  	"bookonline.app",
  	"hotelwithflight.com",
  	"wedeploy.io",
  	"wedeploy.me",
  	"wedeploy.sh",
  	"remotewd.com",
  	"pages.wiardweb.com",
  	"wmflabs.org",
  	"toolforge.org",
  	"wmcloud.org",
  	"panel.gg",
  	"daemon.panel.gg",
  	"messwithdns.com",
  	"woltlab-demo.com",
  	"myforum.community",
  	"community-pro.de",
  	"diskussionsbereich.de",
  	"community-pro.net",
  	"meinforum.net",
  	"affinitylottery.org.uk",
  	"raffleentry.org.uk",
  	"weeklylottery.org.uk",
  	"wpenginepowered.com",
  	"js.wpenginepowered.com",
  	"wixsite.com",
  	"editorx.io",
  	"half.host",
  	"xnbay.com",
  	"u2.xnbay.com",
  	"u2-local.xnbay.com",
  	"cistron.nl",
  	"demon.nl",
  	"xs4all.space",
  	"yandexcloud.net",
  	"storage.yandexcloud.net",
  	"website.yandexcloud.net",
  	"official.academy",
  	"yolasite.com",
  	"ybo.faith",
  	"yombo.me",
  	"homelink.one",
  	"ybo.party",
  	"ybo.review",
  	"ybo.science",
  	"ybo.trade",
  	"ynh.fr",
  	"nohost.me",
  	"noho.st",
  	"za.net",
  	"za.org",
  	"bss.design",
  	"basicserver.io",
  	"virtualserver.io",
  	"enterprisecloud.nu"
  ];

  /*eslint no-var:0, prefer-arrow-callback: 0, object-shorthand: 0 */
  (function (exports) {

    var Punycode = require$$0$2;
    var internals = {};

    //
    // Read rules from file.
    //
    internals.rules = require$$1.map(function (rule) {
      return {
        rule: rule,
        suffix: rule.replace(/^(\*\.|\!)/, ''),
        punySuffix: -1,
        wildcard: rule.charAt(0) === '*',
        exception: rule.charAt(0) === '!'
      };
    });

    //
    // Check is given string ends with `suffix`.
    //
    internals.endsWith = function (str, suffix) {
      return str.indexOf(suffix, str.length - suffix.length) !== -1;
    };

    //
    // Find rule for a given domain.
    //
    internals.findRule = function (domain) {
      var punyDomain = Punycode.toASCII(domain);
      return internals.rules.reduce(function (memo, rule) {
        if (rule.punySuffix === -1) {
          rule.punySuffix = Punycode.toASCII(rule.suffix);
        }
        if (!internals.endsWith(punyDomain, '.' + rule.punySuffix) && punyDomain !== rule.punySuffix) {
          return memo;
        }
        // This has been commented out as it never seems to run. This is because
        // sub tlds always appear after their parents and we never find a shorter
        // match.
        //if (memo) {
        //  var memoSuffix = Punycode.toASCII(memo.suffix);
        //  if (memoSuffix.length >= punySuffix.length) {
        //    return memo;
        //  }
        //}
        return rule;
      }, null);
    };

    //
    // Error codes and messages.
    //
    exports.errorCodes = {
      DOMAIN_TOO_SHORT: 'Domain name too short.',
      DOMAIN_TOO_LONG: 'Domain name too long. It should be no more than 255 chars.',
      LABEL_STARTS_WITH_DASH: 'Domain name label can not start with a dash.',
      LABEL_ENDS_WITH_DASH: 'Domain name label can not end with a dash.',
      LABEL_TOO_LONG: 'Domain name label should be at most 63 chars long.',
      LABEL_TOO_SHORT: 'Domain name label should be at least 1 character long.',
      LABEL_INVALID_CHARS: 'Domain name label can only contain alphanumeric characters or dashes.'
    };

    //
    // Validate domain name and throw if not valid.
    //
    // From wikipedia:
    //
    // Hostnames are composed of series of labels concatenated with dots, as are all
    // domain names. Each label must be between 1 and 63 characters long, and the
    // entire hostname (including the delimiting dots) has a maximum of 255 chars.
    //
    // Allowed chars:
    //
    // * `a-z`
    // * `0-9`
    // * `-` but not as a starting or ending character
    // * `.` as a separator for the textual portions of a domain name
    //
    // * http://en.wikipedia.org/wiki/Domain_name
    // * http://en.wikipedia.org/wiki/Hostname
    //
    internals.validate = function (input) {
      // Before we can validate we need to take care of IDNs with unicode chars.
      var ascii = Punycode.toASCII(input);
      if (ascii.length < 1) {
        return 'DOMAIN_TOO_SHORT';
      }
      if (ascii.length > 255) {
        return 'DOMAIN_TOO_LONG';
      }

      // Check each part's length and allowed chars.
      var labels = ascii.split('.');
      var label;
      for (var i = 0; i < labels.length; ++i) {
        label = labels[i];
        if (!label.length) {
          return 'LABEL_TOO_SHORT';
        }
        if (label.length > 63) {
          return 'LABEL_TOO_LONG';
        }
        if (label.charAt(0) === '-') {
          return 'LABEL_STARTS_WITH_DASH';
        }
        if (label.charAt(label.length - 1) === '-') {
          return 'LABEL_ENDS_WITH_DASH';
        }
        if (!/^[a-z0-9\-]+$/.test(label)) {
          return 'LABEL_INVALID_CHARS';
        }
      }
    };

    //
    // Public API
    //

    //
    // Parse domain.
    //
    exports.parse = function (input) {
      if (typeof input !== 'string') {
        throw new TypeError('Domain name must be a string.');
      }

      // Force domain to lowercase.
      var domain = input.slice(0).toLowerCase();

      // Handle FQDN.
      // TODO: Simply remove trailing dot?
      if (domain.charAt(domain.length - 1) === '.') {
        domain = domain.slice(0, domain.length - 1);
      }

      // Validate and sanitise input.
      var error = internals.validate(domain);
      if (error) {
        return {
          input: input,
          error: {
            message: exports.errorCodes[error],
            code: error
          }
        };
      }
      var parsed = {
        input: input,
        tld: null,
        sld: null,
        domain: null,
        subdomain: null,
        listed: false
      };
      var domainParts = domain.split('.');

      // Non-Internet TLD
      if (domainParts[domainParts.length - 1] === 'local') {
        return parsed;
      }
      var handlePunycode = function handlePunycode() {
        if (!/xn--/.test(domain)) {
          return parsed;
        }
        if (parsed.domain) {
          parsed.domain = Punycode.toASCII(parsed.domain);
        }
        if (parsed.subdomain) {
          parsed.subdomain = Punycode.toASCII(parsed.subdomain);
        }
        return parsed;
      };
      var rule = internals.findRule(domain);

      // Unlisted tld.
      if (!rule) {
        if (domainParts.length < 2) {
          return parsed;
        }
        parsed.tld = domainParts.pop();
        parsed.sld = domainParts.pop();
        parsed.domain = [parsed.sld, parsed.tld].join('.');
        if (domainParts.length) {
          parsed.subdomain = domainParts.pop();
        }
        return handlePunycode();
      }

      // At this point we know the public suffix is listed.
      parsed.listed = true;
      var tldParts = rule.suffix.split('.');
      var privateParts = domainParts.slice(0, domainParts.length - tldParts.length);
      if (rule.exception) {
        privateParts.push(tldParts.shift());
      }
      parsed.tld = tldParts.join('.');
      if (!privateParts.length) {
        return handlePunycode();
      }
      if (rule.wildcard) {
        tldParts.unshift(privateParts.pop());
        parsed.tld = tldParts.join('.');
      }
      if (!privateParts.length) {
        return handlePunycode();
      }
      parsed.sld = privateParts.pop();
      parsed.domain = [parsed.sld, parsed.tld].join('.');
      if (privateParts.length) {
        parsed.subdomain = privateParts.join('.');
      }
      return handlePunycode();
    };

    //
    // Get domain.
    //
    exports.get = function (domain) {
      if (!domain) {
        return null;
      }
      return exports.parse(domain).domain || null;
    };

    //
    // Check whether domain belongs to a known public suffix.
    //
    exports.isValid = function (domain) {
      var parsed = exports.parse(domain);
      return Boolean(parsed.domain && parsed.listed);
    };
  })(psl$1);

  /*!
   * Copyright (c) 2018, Salesforce.com, Inc.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions are met:
   *
   * 1. Redistributions of source code must retain the above copyright notice,
   * this list of conditions and the following disclaimer.
   *
   * 2. Redistributions in binary form must reproduce the above copyright notice,
   * this list of conditions and the following disclaimer in the documentation
   * and/or other materials provided with the distribution.
   *
   * 3. Neither the name of Salesforce.com nor the names of its contributors may
   * be used to endorse or promote products derived from this software without
   * specific prior written permission.
   *
   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
   * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
   * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
   * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
   * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
   * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
   * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   * POSSIBILITY OF SUCH DAMAGE.
   */
  var psl = psl$1;

  // RFC 6761
  var SPECIAL_USE_DOMAINS = ["local", "example", "invalid", "localhost", "test"];
  var SPECIAL_TREATMENT_DOMAINS = ["localhost", "invalid"];
  function getPublicSuffix(domain) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var domainParts = domain.split(".");
    var topLevelDomain = domainParts[domainParts.length - 1];
    var allowSpecialUseDomain = !!options.allowSpecialUseDomain;
    var ignoreError = !!options.ignoreError;
    if (allowSpecialUseDomain && SPECIAL_USE_DOMAINS.includes(topLevelDomain)) {
      if (domainParts.length > 1) {
        var secondLevelDomain = domainParts[domainParts.length - 2];
        // In aforementioned example, the eTLD/pubSuf will be apple.localhost
        return "".concat(secondLevelDomain, ".").concat(topLevelDomain);
      } else if (SPECIAL_TREATMENT_DOMAINS.includes(topLevelDomain)) {
        // For a single word special use domain, e.g. 'localhost' or 'invalid', per RFC 6761,
        // "Application software MAY recognize {localhost/invalid} names as special, or
        // MAY pass them to name resolution APIs as they would for other domain names."
        return "".concat(topLevelDomain);
      }
    }
    if (!ignoreError && SPECIAL_USE_DOMAINS.includes(topLevelDomain)) {
      throw new Error("Cookie has domain set to the public suffix \"".concat(topLevelDomain, "\" which is a special use domain. To allow this, configure your CookieJar with {allowSpecialUseDomain:true, rejectPublicSuffixes: false}."));
    }
    return psl.get(domain);
  }
  pubsuffixPsl.getPublicSuffix = getPublicSuffix;

  var store = {};

  /*jshint unused:false */
  var Store$2 = /*#__PURE__*/function () {
    function Store() {
      _classCallCheck(this, Store);
      this.synchronous = false;
    }
    return _createClass(Store, [{
      key: "findCookie",
      value: function findCookie(domain, path, key, cb) {
        throw new Error("findCookie is not implemented");
      }
    }, {
      key: "findCookies",
      value: function findCookies(domain, path, allowSpecialUseDomain, cb) {
        throw new Error("findCookies is not implemented");
      }
    }, {
      key: "putCookie",
      value: function putCookie(cookie, cb) {
        throw new Error("putCookie is not implemented");
      }
    }, {
      key: "updateCookie",
      value: function updateCookie(oldCookie, newCookie, cb) {
        // recommended default implementation:
        // return this.putCookie(newCookie, cb);
        throw new Error("updateCookie is not implemented");
      }
    }, {
      key: "removeCookie",
      value: function removeCookie(domain, path, key, cb) {
        throw new Error("removeCookie is not implemented");
      }
    }, {
      key: "removeCookies",
      value: function removeCookies(domain, path, cb) {
        throw new Error("removeCookies is not implemented");
      }
    }, {
      key: "removeAllCookies",
      value: function removeAllCookies(cb) {
        throw new Error("removeAllCookies is not implemented");
      }
    }, {
      key: "getAllCookies",
      value: function getAllCookies(cb) {
        throw new Error("getAllCookies is not implemented (therefore jar cannot be serialized)");
      }
    }]);
  }();
  store.Store = Store$2;

  var memstore = {};

  var universalify = {};

  universalify.fromCallback = function (fn) {
    return Object.defineProperty(function () {
      var _arguments = arguments,
        _this = this;
      if (typeof arguments[arguments.length - 1] === 'function') fn.apply(this, arguments);else {
        return new Promise(function (resolve, reject) {
          _arguments[_arguments.length] = function (err, res) {
            if (err) return reject(err);
            resolve(res);
          };
          _arguments.length++;
          fn.apply(_this, _arguments);
        });
      }
    }, 'name', {
      value: fn.name
    });
  };
  universalify.fromPromise = function (fn) {
    return Object.defineProperty(function () {
      var cb = arguments[arguments.length - 1];
      if (typeof cb !== 'function') return fn.apply(this, arguments);else {
        delete arguments[arguments.length - 1];
        arguments.length--;
        fn.apply(this, arguments).then(function (r) {
          return cb(null, r);
        }, cb);
      }
    }, 'name', {
      value: fn.name
    });
  };

  var permuteDomain$1 = {};

  /*!
   * Copyright (c) 2015, Salesforce.com, Inc.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions are met:
   *
   * 1. Redistributions of source code must retain the above copyright notice,
   * this list of conditions and the following disclaimer.
   *
   * 2. Redistributions in binary form must reproduce the above copyright notice,
   * this list of conditions and the following disclaimer in the documentation
   * and/or other materials provided with the distribution.
   *
   * 3. Neither the name of Salesforce.com nor the names of its contributors may
   * be used to endorse or promote products derived from this software without
   * specific prior written permission.
   *
   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
   * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
   * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
   * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
   * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
   * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
   * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   * POSSIBILITY OF SUCH DAMAGE.
   */
  var hasRequiredPermuteDomain;
  function requirePermuteDomain() {
    if (hasRequiredPermuteDomain) return permuteDomain$1;
    hasRequiredPermuteDomain = 1;
    var pubsuffix = pubsuffixPsl;

    // Gives the permutation of all possible domainMatch()es of a given domain. The
    // array is in shortest-to-longest order.  Handy for indexing.

    function permuteDomain(domain, allowSpecialUseDomain) {
      var pubSuf = pubsuffix.getPublicSuffix(domain, {
        allowSpecialUseDomain: allowSpecialUseDomain
      });
      if (!pubSuf) {
        return null;
      }
      if (pubSuf == domain) {
        return [domain];
      }

      // Nuke trailing dot
      if (domain.slice(-1) == ".") {
        domain = domain.slice(0, -1);
      }
      var prefix = domain.slice(0, -(pubSuf.length + 1)); // ".example.com"
      var parts = prefix.split(".").reverse();
      var cur = pubSuf;
      var permutations = [cur];
      while (parts.length) {
        cur = "".concat(parts.shift(), ".").concat(cur);
        permutations.push(cur);
      }
      return permutations;
    }
    permuteDomain$1.permuteDomain = permuteDomain;
    return permuteDomain$1;
  }

  var pathMatch$3 = {};

  /*!
   * Copyright (c) 2015, Salesforce.com, Inc.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions are met:
   *
   * 1. Redistributions of source code must retain the above copyright notice,
   * this list of conditions and the following disclaimer.
   *
   * 2. Redistributions in binary form must reproduce the above copyright notice,
   * this list of conditions and the following disclaimer in the documentation
   * and/or other materials provided with the distribution.
   *
   * 3. Neither the name of Salesforce.com nor the names of its contributors may
   * be used to endorse or promote products derived from this software without
   * specific prior written permission.
   *
   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
   * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
   * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
   * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
   * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
   * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
   * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   * POSSIBILITY OF SUCH DAMAGE.
   */
  /*
   * "A request-path path-matches a given cookie-path if at least one of the
   * following conditions holds:"
   */
  function pathMatch$2(reqPath, cookiePath) {
    // "o  The cookie-path and the request-path are identical."
    if (cookiePath === reqPath) {
      return true;
    }
    var idx = reqPath.indexOf(cookiePath);
    if (idx === 0) {
      // "o  The cookie-path is a prefix of the request-path, and the last
      // character of the cookie-path is %x2F ("/")."
      if (cookiePath.substr(-1) === "/") {
        return true;
      }

      // " o  The cookie-path is a prefix of the request-path, and the first
      // character of the request-path that is not included in the cookie- path
      // is a %x2F ("/") character."
      if (reqPath.substr(cookiePath.length, 1) === "/") {
        return true;
      }
    }
    return false;
  }
  pathMatch$3.pathMatch = pathMatch$2;

  var utilHelper = {};

  function requireUtil() {
    try {
      // eslint-disable-next-line no-restricted-modules
      return require("util");
    } catch (e) {
      return null;
    }
  }

  // for v10.12.0+
  function lookupCustomInspectSymbol() {
    return Symbol["for"]("nodejs.util.inspect.custom");
  }

  // for older node environments
  function tryReadingCustomSymbolFromUtilInspect(options) {
    var _requireUtil = options.requireUtil || requireUtil;
    var util = _requireUtil();
    return util ? util.inspect.custom : null;
  }
  utilHelper.getUtilInspect = function getUtilInspect(fallback) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var _requireUtil = options.requireUtil || requireUtil;
    var util = _requireUtil();
    return function inspect(value, showHidden, depth) {
      return util ? util.inspect(value, showHidden, depth) : fallback(value);
    };
  };
  utilHelper.getCustomInspectSymbol = function getCustomInspectSymbol() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var _lookupCustomInspectSymbol = options.lookupCustomInspectSymbol || lookupCustomInspectSymbol;

    // get custom inspect symbol for node environments
    return _lookupCustomInspectSymbol() || tryReadingCustomSymbolFromUtilInspect(options);
  };

  var fromCallback$1 = universalify.fromCallback;
  var Store$1 = store.Store;
  var permuteDomain = requirePermuteDomain().permuteDomain;
  var pathMatch$1 = pathMatch$3.pathMatch;
  var getCustomInspectSymbol$1 = utilHelper.getCustomInspectSymbol,
    getUtilInspect = utilHelper.getUtilInspect;
  var MemoryCookieStore$1 = /*#__PURE__*/function (_Store) {
    function MemoryCookieStore() {
      var _this;
      _classCallCheck(this, MemoryCookieStore);
      _this = _callSuper(this, MemoryCookieStore);
      _this.synchronous = true;
      _this.idx = Object.create(null);
      var customInspectSymbol = getCustomInspectSymbol$1();
      if (customInspectSymbol) {
        _this[customInspectSymbol] = _this.inspect;
      }
      return _this;
    }
    _inherits(MemoryCookieStore, _Store);
    return _createClass(MemoryCookieStore, [{
      key: "inspect",
      value: function inspect() {
        var util = {
          inspect: getUtilInspect(inspectFallback)
        };
        return "{ idx: ".concat(util.inspect(this.idx, false, 2), " }");
      }
    }, {
      key: "findCookie",
      value: function findCookie(domain, path, key, cb) {
        if (!this.idx[domain]) {
          return cb(null, undefined);
        }
        if (!this.idx[domain][path]) {
          return cb(null, undefined);
        }
        return cb(null, this.idx[domain][path][key] || null);
      }
    }, {
      key: "findCookies",
      value: function findCookies(domain, path, allowSpecialUseDomain, cb) {
        var results = [];
        if (typeof allowSpecialUseDomain === "function") {
          cb = allowSpecialUseDomain;
          allowSpecialUseDomain = true;
        }
        if (!domain) {
          return cb(null, []);
        }
        var pathMatcher;
        if (!path) {
          // null means "all paths"
          pathMatcher = function matchAll(domainIndex) {
            for (var curPath in domainIndex) {
              var pathIndex = domainIndex[curPath];
              for (var key in pathIndex) {
                results.push(pathIndex[key]);
              }
            }
          };
        } else {
          pathMatcher = function matchRFC(domainIndex) {
            //NOTE: we should use path-match algorithm from S5.1.4 here
            //(see : https://github.com/ChromiumWebApps/chromium/blob/b3d3b4da8bb94c1b2e061600df106d590fda3620/net/cookies/canonical_cookie.cc#L299)
            Object.keys(domainIndex).forEach(function (cookiePath) {
              if (pathMatch$1(path, cookiePath)) {
                var pathIndex = domainIndex[cookiePath];
                for (var key in pathIndex) {
                  results.push(pathIndex[key]);
                }
              }
            });
          };
        }
        var domains = permuteDomain(domain, allowSpecialUseDomain) || [domain];
        var idx = this.idx;
        domains.forEach(function (curDomain) {
          var domainIndex = idx[curDomain];
          if (!domainIndex) {
            return;
          }
          pathMatcher(domainIndex);
        });
        cb(null, results);
      }
    }, {
      key: "putCookie",
      value: function putCookie(cookie, cb) {
        if (!this.idx[cookie.domain]) {
          this.idx[cookie.domain] = Object.create(null);
        }
        if (!this.idx[cookie.domain][cookie.path]) {
          this.idx[cookie.domain][cookie.path] = Object.create(null);
        }
        this.idx[cookie.domain][cookie.path][cookie.key] = cookie;
        cb(null);
      }
    }, {
      key: "updateCookie",
      value: function updateCookie(oldCookie, newCookie, cb) {
        // updateCookie() may avoid updating cookies that are identical.  For example,
        // lastAccessed may not be important to some stores and an equality
        // comparison could exclude that field.
        this.putCookie(newCookie, cb);
      }
    }, {
      key: "removeCookie",
      value: function removeCookie(domain, path, key, cb) {
        if (this.idx[domain] && this.idx[domain][path] && this.idx[domain][path][key]) {
          delete this.idx[domain][path][key];
        }
        cb(null);
      }
    }, {
      key: "removeCookies",
      value: function removeCookies(domain, path, cb) {
        if (this.idx[domain]) {
          if (path) {
            delete this.idx[domain][path];
          } else {
            delete this.idx[domain];
          }
        }
        return cb(null);
      }
    }, {
      key: "removeAllCookies",
      value: function removeAllCookies(cb) {
        this.idx = Object.create(null);
        return cb(null);
      }
    }, {
      key: "getAllCookies",
      value: function getAllCookies(cb) {
        var cookies = [];
        var idx = this.idx;
        var domains = Object.keys(idx);
        domains.forEach(function (domain) {
          var paths = Object.keys(idx[domain]);
          paths.forEach(function (path) {
            var keys = Object.keys(idx[domain][path]);
            keys.forEach(function (key) {
              if (key !== null) {
                cookies.push(idx[domain][path][key]);
              }
            });
          });
        });

        // Sort by creationIndex so deserializing retains the creation order.
        // When implementing your own store, this SHOULD retain the order too
        cookies.sort(function (a, b) {
          return (a.creationIndex || 0) - (b.creationIndex || 0);
        });
        cb(null, cookies);
      }
    }]);
  }(Store$1);
  ["findCookie", "findCookies", "putCookie", "updateCookie", "removeCookie", "removeCookies", "removeAllCookies", "getAllCookies"].forEach(function (name) {
    MemoryCookieStore$1.prototype[name] = fromCallback$1(MemoryCookieStore$1.prototype[name]);
  });
  memstore.MemoryCookieStore = MemoryCookieStore$1;
  function inspectFallback(val) {
    var domains = Object.keys(val);
    if (domains.length === 0) {
      return "[Object: null prototype] {}";
    }
    var result = "[Object: null prototype] {\n";
    Object.keys(val).forEach(function (domain, i) {
      result += formatDomain(domain, val[domain]);
      if (i < domains.length - 1) {
        result += ",";
      }
      result += "\n";
    });
    result += "}";
    return result;
  }
  function formatDomain(domainName, domainValue) {
    var indent = "  ";
    var result = "".concat(indent, "'").concat(domainName, "': [Object: null prototype] {\n");
    Object.keys(domainValue).forEach(function (path, i, paths) {
      result += formatPath(path, domainValue[path]);
      if (i < paths.length - 1) {
        result += ",";
      }
      result += "\n";
    });
    result += "".concat(indent, "}");
    return result;
  }
  function formatPath(pathName, pathValue) {
    var indent = "    ";
    var result = "".concat(indent, "'").concat(pathName, "': [Object: null prototype] {\n");
    Object.keys(pathValue).forEach(function (cookieName, i, cookieNames) {
      var cookie = pathValue[cookieName];
      result += "      ".concat(cookieName, ": ").concat(cookie.inspect());
      if (i < cookieNames.length - 1) {
        result += ",";
      }
      result += "\n";
    });
    result += "".concat(indent, "}");
    return result;
  }
  memstore.inspectFallback = inspectFallback;

  var validators$1 = {};

  /* Validation functions copied from check-types package - https://www.npmjs.com/package/check-types */

  var toString = Object.prototype.toString;
  function isFunction(data) {
    return typeof data === "function";
  }
  function isNonEmptyString(data) {
    return isString(data) && data !== "";
  }
  function isDate(data) {
    return isInstanceStrict(data, Date) && isInteger(data.getTime());
  }
  function isEmptyString(data) {
    return data === "" || data instanceof String && data.toString() === "";
  }
  function isString(data) {
    return typeof data === "string" || data instanceof String;
  }
  function isObject(data) {
    return toString.call(data) === "[object Object]";
  }
  function isInstanceStrict(data, prototype) {
    try {
      return data instanceof prototype;
    } catch (error) {
      return false;
    }
  }
  function isUrlStringOrObject(data) {
    return isNonEmptyString(data) || isObject(data) && "hostname" in data && "pathname" in data && "protocol" in data || isInstanceStrict(data, URL);
  }
  function isInteger(data) {
    return typeof data === "number" && data % 1 === 0;
  }
  /* End validation functions */

  function validate(bool, cb, options) {
    if (!isFunction(cb)) {
      options = cb;
      cb = null;
    }
    if (!isObject(options)) options = {
      Error: "Failed Check"
    };
    if (!bool) {
      if (cb) {
        cb(new ParameterError(options));
      } else {
        throw new ParameterError(options);
      }
    }
  }
  var ParameterError = /*#__PURE__*/function (_Error) {
    function ParameterError() {
      _classCallCheck(this, ParameterError);
      for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {
        params[_key] = arguments[_key];
      }
      return _callSuper(this, ParameterError, [].concat(params));
    }
    _inherits(ParameterError, _Error);
    return _createClass(ParameterError);
  }(/*#__PURE__*/_wrapNativeSuper(Error));
  validators$1.ParameterError = ParameterError;
  validators$1.isFunction = isFunction;
  validators$1.isNonEmptyString = isNonEmptyString;
  validators$1.isDate = isDate;
  validators$1.isEmptyString = isEmptyString;
  validators$1.isString = isString;
  validators$1.isObject = isObject;
  validators$1.isUrlStringOrObject = isUrlStringOrObject;
  validators$1.validate = validate;

  // generated by genversion
  var version = '4.1.4';

  var punycode = require$$0;
  var urlParse = urlParse$1;
  var pubsuffix = pubsuffixPsl;
  var Store = store.Store;
  var MemoryCookieStore = memstore.MemoryCookieStore;
  var pathMatch = pathMatch$3.pathMatch;
  var validators = validators$1;
  var VERSION$1 = version;
  var fromCallback = universalify.fromCallback;
  var getCustomInspectSymbol = utilHelper.getCustomInspectSymbol;

  // From RFC6265 S4.1.1
  // note that it excludes \x3B ";"
  var COOKIE_OCTETS = /^[\x21\x23-\x2B\x2D-\x3A\x3C-\x5B\x5D-\x7E]+$/;
  var CONTROL_CHARS = /[\x00-\x1F]/;

  // From Chromium // '\r', '\n' and '\0' should be treated as a terminator in
  // the "relaxed" mode, see:
  // https://github.com/ChromiumWebApps/chromium/blob/b3d3b4da8bb94c1b2e061600df106d590fda3620/net/cookies/parsed_cookie.cc#L60
  var TERMINATORS = ["\n", "\r", "\0"];

  // RFC6265 S4.1.1 defines path value as 'any CHAR except CTLs or ";"'
  // Note ';' is \x3B
  var PATH_VALUE = /[\x20-\x3A\x3C-\x7E]+/;

  // date-time parsing constants (RFC6265 S5.1.1)

  var DATE_DELIM = /[\x09\x20-\x2F\x3B-\x40\x5B-\x60\x7B-\x7E]/;
  var MONTH_TO_NUM = {
    jan: 0,
    feb: 1,
    mar: 2,
    apr: 3,
    may: 4,
    jun: 5,
    jul: 6,
    aug: 7,
    sep: 8,
    oct: 9,
    nov: 10,
    dec: 11
  };
  var MAX_TIME = 2147483647000; // 31-bit max
  var MIN_TIME = 0; // 31-bit min
  var SAME_SITE_CONTEXT_VAL_ERR = 'Invalid sameSiteContext option for getCookies(); expected one of "strict", "lax", or "none"';
  function checkSameSiteContext(value) {
    validators.validate(validators.isNonEmptyString(value), value);
    var context = String(value).toLowerCase();
    if (context === "none" || context === "lax" || context === "strict") {
      return context;
    } else {
      return null;
    }
  }
  var PrefixSecurityEnum = Object.freeze({
    SILENT: "silent",
    STRICT: "strict",
    DISABLED: "unsafe-disabled"
  });

  // Dumped from ip-regex@4.0.0, with the following changes:
  // * all capturing groups converted to non-capturing -- "(?:)"
  // * support for IPv6 Scoped Literal ("%eth1") removed
  // * lowercase hexadecimal only
  var IP_REGEX_LOWERCASE = /(?:^(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}$)|(?:^(?:(?:[a-f\d]{1,4}:){7}(?:[a-f\d]{1,4}|:)|(?:[a-f\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|:[a-f\d]{1,4}|:)|(?:[a-f\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-f\d]{1,4}){1,2}|:)|(?:[a-f\d]{1,4}:){4}(?:(?::[a-f\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-f\d]{1,4}){1,3}|:)|(?:[a-f\d]{1,4}:){3}(?:(?::[a-f\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-f\d]{1,4}){1,4}|:)|(?:[a-f\d]{1,4}:){2}(?:(?::[a-f\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-f\d]{1,4}){1,5}|:)|(?:[a-f\d]{1,4}:){1}(?:(?::[a-f\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-f\d]{1,4}){1,6}|:)|(?::(?:(?::[a-f\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-f\d]{1,4}){1,7}|:)))$)/;
  var IP_V6_REGEX = "\n\\[?(?:\n(?:[a-fA-F\\d]{1,4}:){7}(?:[a-fA-F\\d]{1,4}|:)|\n(?:[a-fA-F\\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|:[a-fA-F\\d]{1,4}|:)|\n(?:[a-fA-F\\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,2}|:)|\n(?:[a-fA-F\\d]{1,4}:){4}(?:(?::[a-fA-F\\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,3}|:)|\n(?:[a-fA-F\\d]{1,4}:){3}(?:(?::[a-fA-F\\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,4}|:)|\n(?:[a-fA-F\\d]{1,4}:){2}(?:(?::[a-fA-F\\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,5}|:)|\n(?:[a-fA-F\\d]{1,4}:){1}(?:(?::[a-fA-F\\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,6}|:)|\n(?::(?:(?::[a-fA-F\\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,7}|:))\n)(?:%[0-9a-zA-Z]{1,})?\\]?\n".replace(/\s*\/\/.*$/gm, "").replace(/\n/g, "").trim();
  var IP_V6_REGEX_OBJECT = new RegExp("^".concat(IP_V6_REGEX, "$"));

  /*
   * Parses a Natural number (i.e., non-negative integer) with either the
   *    <min>*<max>DIGIT ( non-digit *OCTET )
   * or
   *    <min>*<max>DIGIT
   * grammar (RFC6265 S5.1.1).
   *
   * The "trailingOK" boolean controls if the grammar accepts a
   * "( non-digit *OCTET )" trailer.
   */
  function parseDigits(token, minDigits, maxDigits, trailingOK) {
    var count = 0;
    while (count < token.length) {
      var c = token.charCodeAt(count);
      // "non-digit = %x00-2F / %x3A-FF"
      if (c <= 0x2f || c >= 0x3a) {
        break;
      }
      count++;
    }

    // constrain to a minimum and maximum number of digits.
    if (count < minDigits || count > maxDigits) {
      return null;
    }
    if (!trailingOK && count != token.length) {
      return null;
    }
    return parseInt(token.substr(0, count), 10);
  }
  function parseTime(token) {
    var parts = token.split(":");
    var result = [0, 0, 0];

    /* RF6256 S5.1.1:
     *      time            = hms-time ( non-digit *OCTET )
     *      hms-time        = time-field ":" time-field ":" time-field
     *      time-field      = 1*2DIGIT
     */

    if (parts.length !== 3) {
      return null;
    }
    for (var i = 0; i < 3; i++) {
      // "time-field" must be strictly "1*2DIGIT", HOWEVER, "hms-time" can be
      // followed by "( non-digit *OCTET )" so therefore the last time-field can
      // have a trailer
      var trailingOK = i == 2;
      var num = parseDigits(parts[i], 1, 2, trailingOK);
      if (num === null) {
        return null;
      }
      result[i] = num;
    }
    return result;
  }
  function parseMonth(token) {
    token = String(token).substr(0, 3).toLowerCase();
    var num = MONTH_TO_NUM[token];
    return num >= 0 ? num : null;
  }

  /*
   * RFC6265 S5.1.1 date parser (see RFC for full grammar)
   */
  function parseDate(str) {
    if (!str) {
      return;
    }

    /* RFC6265 S5.1.1:
     * 2. Process each date-token sequentially in the order the date-tokens
     * appear in the cookie-date
     */
    var tokens = str.split(DATE_DELIM);
    if (!tokens) {
      return;
    }
    var hour = null;
    var minute = null;
    var second = null;
    var dayOfMonth = null;
    var month = null;
    var year = null;
    for (var i = 0; i < tokens.length; i++) {
      var token = tokens[i].trim();
      if (!token.length) {
        continue;
      }
      var result = void 0;

      /* 2.1. If the found-time flag is not set and the token matches the time
       * production, set the found-time flag and set the hour- value,
       * minute-value, and second-value to the numbers denoted by the digits in
       * the date-token, respectively.  Skip the remaining sub-steps and continue
       * to the next date-token.
       */
      if (second === null) {
        result = parseTime(token);
        if (result) {
          hour = result[0];
          minute = result[1];
          second = result[2];
          continue;
        }
      }

      /* 2.2. If the found-day-of-month flag is not set and the date-token matches
       * the day-of-month production, set the found-day-of- month flag and set
       * the day-of-month-value to the number denoted by the date-token.  Skip
       * the remaining sub-steps and continue to the next date-token.
       */
      if (dayOfMonth === null) {
        // "day-of-month = 1*2DIGIT ( non-digit *OCTET )"
        result = parseDigits(token, 1, 2, true);
        if (result !== null) {
          dayOfMonth = result;
          continue;
        }
      }

      /* 2.3. If the found-month flag is not set and the date-token matches the
       * month production, set the found-month flag and set the month-value to
       * the month denoted by the date-token.  Skip the remaining sub-steps and
       * continue to the next date-token.
       */
      if (month === null) {
        result = parseMonth(token);
        if (result !== null) {
          month = result;
          continue;
        }
      }

      /* 2.4. If the found-year flag is not set and the date-token matches the
       * year production, set the found-year flag and set the year-value to the
       * number denoted by the date-token.  Skip the remaining sub-steps and
       * continue to the next date-token.
       */
      if (year === null) {
        // "year = 2*4DIGIT ( non-digit *OCTET )"
        result = parseDigits(token, 2, 4, true);
        if (result !== null) {
          year = result;
          /* From S5.1.1:
           * 3.  If the year-value is greater than or equal to 70 and less
           * than or equal to 99, increment the year-value by 1900.
           * 4.  If the year-value is greater than or equal to 0 and less
           * than or equal to 69, increment the year-value by 2000.
           */
          if (year >= 70 && year <= 99) {
            year += 1900;
          } else if (year >= 0 && year <= 69) {
            year += 2000;
          }
        }
      }
    }

    /* RFC 6265 S5.1.1
     * "5. Abort these steps and fail to parse the cookie-date if:
     *     *  at least one of the found-day-of-month, found-month, found-
     *        year, or found-time flags is not set,
     *     *  the day-of-month-value is less than 1 or greater than 31,
     *     *  the year-value is less than 1601,
     *     *  the hour-value is greater than 23,
     *     *  the minute-value is greater than 59, or
     *     *  the second-value is greater than 59.
     *     (Note that leap seconds cannot be represented in this syntax.)"
     *
     * So, in order as above:
     */
    if (dayOfMonth === null || month === null || year === null || second === null || dayOfMonth < 1 || dayOfMonth > 31 || year < 1601 || hour > 23 || minute > 59 || second > 59) {
      return;
    }
    return new Date(Date.UTC(year, month, dayOfMonth, hour, minute, second));
  }
  function formatDate(date) {
    validators.validate(validators.isDate(date), date);
    return date.toUTCString();
  }

  // S5.1.2 Canonicalized Host Names
  function canonicalDomain(str) {
    if (str == null) {
      return null;
    }
    str = str.trim().replace(/^\./, ""); // S4.1.2.3 & S5.2.3: ignore leading .

    if (IP_V6_REGEX_OBJECT.test(str)) {
      str = str.replace("[", "").replace("]", "");
    }

    // convert to IDN if any non-ASCII characters
    if (punycode && /[^\u0001-\u007f]/.test(str)) {
      str = punycode.toASCII(str);
    }
    return str.toLowerCase();
  }

  // S5.1.3 Domain Matching
  function domainMatch(str, domStr, canonicalize) {
    if (str == null || domStr == null) {
      return null;
    }
    if (canonicalize !== false) {
      str = canonicalDomain(str);
      domStr = canonicalDomain(domStr);
    }

    /*
     * S5.1.3:
     * "A string domain-matches a given domain string if at least one of the
     * following conditions hold:"
     *
     * " o The domain string and the string are identical. (Note that both the
     * domain string and the string will have been canonicalized to lower case at
     * this point)"
     */
    if (str == domStr) {
      return true;
    }

    /* " o All of the following [three] conditions hold:" */

    /* "* The domain string is a suffix of the string" */
    var idx = str.lastIndexOf(domStr);
    if (idx <= 0) {
      return false; // it's a non-match (-1) or prefix (0)
    }

    // next, check it's a proper suffix
    // e.g., "a.b.c".indexOf("b.c") === 2
    // 5 === 3+2
    if (str.length !== domStr.length + idx) {
      return false; // it's not a suffix
    }

    /* "  * The last character of the string that is not included in the
     * domain string is a %x2E (".") character." */
    if (str.substr(idx - 1, 1) !== ".") {
      return false; // doesn't align on "."
    }

    /* "  * The string is a host name (i.e., not an IP address)." */
    if (IP_REGEX_LOWERCASE.test(str)) {
      return false; // it's an IP address
    }
    return true;
  }

  // RFC6265 S5.1.4 Paths and Path-Match

  /*
   * "The user agent MUST use an algorithm equivalent to the following algorithm
   * to compute the default-path of a cookie:"
   *
   * Assumption: the path (and not query part or absolute uri) is passed in.
   */
  function defaultPath(path) {
    // "2. If the uri-path is empty or if the first character of the uri-path is not
    // a %x2F ("/") character, output %x2F ("/") and skip the remaining steps.
    if (!path || path.substr(0, 1) !== "/") {
      return "/";
    }

    // "3. If the uri-path contains no more than one %x2F ("/") character, output
    // %x2F ("/") and skip the remaining step."
    if (path === "/") {
      return path;
    }
    var rightSlash = path.lastIndexOf("/");
    if (rightSlash === 0) {
      return "/";
    }

    // "4. Output the characters of the uri-path from the first character up to,
    // but not including, the right-most %x2F ("/")."
    return path.slice(0, rightSlash);
  }
  function trimTerminator(str) {
    if (validators.isEmptyString(str)) return str;
    for (var t = 0; t < TERMINATORS.length; t++) {
      var terminatorIdx = str.indexOf(TERMINATORS[t]);
      if (terminatorIdx !== -1) {
        str = str.substr(0, terminatorIdx);
      }
    }
    return str;
  }
  function parseCookiePair(cookiePair, looseMode) {
    cookiePair = trimTerminator(cookiePair);
    validators.validate(validators.isString(cookiePair), cookiePair);
    var firstEq = cookiePair.indexOf("=");
    if (looseMode) {
      if (firstEq === 0) {
        // '=' is immediately at start
        cookiePair = cookiePair.substr(1);
        firstEq = cookiePair.indexOf("="); // might still need to split on '='
      }
    } else {
      // non-loose mode
      if (firstEq <= 0) {
        // no '=' or is at start
        return; // needs to have non-empty "cookie-name"
      }
    }
    var cookieName, cookieValue;
    if (firstEq <= 0) {
      cookieName = "";
      cookieValue = cookiePair.trim();
    } else {
      cookieName = cookiePair.substr(0, firstEq).trim();
      cookieValue = cookiePair.substr(firstEq + 1).trim();
    }
    if (CONTROL_CHARS.test(cookieName) || CONTROL_CHARS.test(cookieValue)) {
      return;
    }
    var c = new Cookie$1();
    c.key = cookieName;
    c.value = cookieValue;
    return c;
  }
  function parse(str, options) {
    if (!options || _typeof(options) !== "object") {
      options = {};
    }
    if (validators.isEmptyString(str) || !validators.isString(str)) {
      return null;
    }
    str = str.trim();

    // We use a regex to parse the "name-value-pair" part of S5.2
    var firstSemi = str.indexOf(";"); // S5.2 step 1
    var cookiePair = firstSemi === -1 ? str : str.substr(0, firstSemi);
    var c = parseCookiePair(cookiePair, !!options.loose);
    if (!c) {
      return;
    }
    if (firstSemi === -1) {
      return c;
    }

    // S5.2.3 "unparsed-attributes consist of the remainder of the set-cookie-string
    // (including the %x3B (";") in question)." plus later on in the same section
    // "discard the first ";" and trim".
    var unparsed = str.slice(firstSemi + 1).trim();

    // "If the unparsed-attributes string is empty, skip the rest of these
    // steps."
    if (unparsed.length === 0) {
      return c;
    }

    /*
     * S5.2 says that when looping over the items "[p]rocess the attribute-name
     * and attribute-value according to the requirements in the following
     * subsections" for every item.  Plus, for many of the individual attributes
     * in S5.3 it says to use the "attribute-value of the last attribute in the
     * cookie-attribute-list".  Therefore, in this implementation, we overwrite
     * the previous value.
     */
    var cookie_avs = unparsed.split(";");
    while (cookie_avs.length) {
      var av = cookie_avs.shift().trim();
      if (av.length === 0) {
        // happens if ";;" appears
        continue;
      }
      var av_sep = av.indexOf("=");
      var av_key = void 0,
        av_value = void 0;
      if (av_sep === -1) {
        av_key = av;
        av_value = null;
      } else {
        av_key = av.substr(0, av_sep);
        av_value = av.substr(av_sep + 1);
      }
      av_key = av_key.trim().toLowerCase();
      if (av_value) {
        av_value = av_value.trim();
      }
      switch (av_key) {
        case "expires":
          // S5.2.1
          if (av_value) {
            var exp = parseDate(av_value);
            // "If the attribute-value failed to parse as a cookie date, ignore the
            // cookie-av."
            if (exp) {
              // over and underflow not realistically a concern: V8's getTime() seems to
              // store something larger than a 32-bit time_t (even with 32-bit node)
              c.expires = exp;
            }
          }
          break;
        case "max-age":
          // S5.2.2
          if (av_value) {
            // "If the first character of the attribute-value is not a DIGIT or a "-"
            // character ...[or]... If the remainder of attribute-value contains a
            // non-DIGIT character, ignore the cookie-av."
            if (/^-?[0-9]+$/.test(av_value)) {
              var delta = parseInt(av_value, 10);
              // "If delta-seconds is less than or equal to zero (0), let expiry-time
              // be the earliest representable date and time."
              c.setMaxAge(delta);
            }
          }
          break;
        case "domain":
          // S5.2.3
          // "If the attribute-value is empty, the behavior is undefined.  However,
          // the user agent SHOULD ignore the cookie-av entirely."
          if (av_value) {
            // S5.2.3 "Let cookie-domain be the attribute-value without the leading %x2E
            // (".") character."
            var domain = av_value.trim().replace(/^\./, "");
            if (domain) {
              // "Convert the cookie-domain to lower case."
              c.domain = domain.toLowerCase();
            }
          }
          break;
        case "path":
          // S5.2.4
          /*
           * "If the attribute-value is empty or if the first character of the
           * attribute-value is not %x2F ("/"):
           *   Let cookie-path be the default-path.
           * Otherwise:
           *   Let cookie-path be the attribute-value."
           *
           * We'll represent the default-path as null since it depends on the
           * context of the parsing.
           */
          c.path = av_value && av_value[0] === "/" ? av_value : null;
          break;
        case "secure":
          // S5.2.5
          /*
           * "If the attribute-name case-insensitively matches the string "Secure",
           * the user agent MUST append an attribute to the cookie-attribute-list
           * with an attribute-name of Secure and an empty attribute-value."
           */
          c.secure = true;
          break;
        case "httponly":
          // S5.2.6 -- effectively the same as 'secure'
          c.httpOnly = true;
          break;
        case "samesite":
          // RFC6265bis-02 S5.3.7
          var enforcement = av_value ? av_value.toLowerCase() : "";
          switch (enforcement) {
            case "strict":
              c.sameSite = "strict";
              break;
            case "lax":
              c.sameSite = "lax";
              break;
            case "none":
              c.sameSite = "none";
              break;
            default:
              c.sameSite = undefined;
              break;
          }
          break;
        default:
          c.extensions = c.extensions || [];
          c.extensions.push(av);
          break;
      }
    }
    return c;
  }

  /**
   *  If the cookie-name begins with a case-sensitive match for the
   *  string "__Secure-", abort these steps and ignore the cookie
   *  entirely unless the cookie's secure-only-flag is true.
   * @param cookie
   * @returns boolean
   */
  function isSecurePrefixConditionMet(cookie) {
    validators.validate(validators.isObject(cookie), cookie);
    return !cookie.key.startsWith("__Secure-") || cookie.secure;
  }

  /**
   *  If the cookie-name begins with a case-sensitive match for the
   *  string "__Host-", abort these steps and ignore the cookie
   *  entirely unless the cookie meets all the following criteria:
   *    1.  The cookie's secure-only-flag is true.
   *    2.  The cookie's host-only-flag is true.
   *    3.  The cookie-attribute-list contains an attribute with an
   *        attribute-name of "Path", and the cookie's path is "/".
   * @param cookie
   * @returns boolean
   */
  function isHostPrefixConditionMet(cookie) {
    validators.validate(validators.isObject(cookie));
    return !cookie.key.startsWith("__Host-") || cookie.secure && cookie.hostOnly && cookie.path != null && cookie.path === "/";
  }

  // avoid the V8 deoptimization monster!
  function jsonParse(str) {
    var obj;
    try {
      obj = JSON.parse(str);
    } catch (e) {
      return e;
    }
    return obj;
  }
  function fromJSON(str) {
    if (!str || validators.isEmptyString(str)) {
      return null;
    }
    var obj;
    if (typeof str === "string") {
      obj = jsonParse(str);
      if (obj instanceof Error) {
        return null;
      }
    } else {
      // assume it's an Object
      obj = str;
    }
    var c = new Cookie$1();
    for (var i = 0; i < Cookie$1.serializableProperties.length; i++) {
      var prop = Cookie$1.serializableProperties[i];
      if (obj[prop] === undefined || obj[prop] === cookieDefaults[prop]) {
        continue; // leave as prototype default
      }
      if (prop === "expires" || prop === "creation" || prop === "lastAccessed") {
        if (obj[prop] === null) {
          c[prop] = null;
        } else {
          c[prop] = obj[prop] == "Infinity" ? "Infinity" : new Date(obj[prop]);
        }
      } else {
        c[prop] = obj[prop];
      }
    }
    return c;
  }

  /* Section 5.4 part 2:
   * "*  Cookies with longer paths are listed before cookies with
   *     shorter paths.
   *
   *  *  Among cookies that have equal-length path fields, cookies with
   *     earlier creation-times are listed before cookies with later
   *     creation-times."
   */

  function cookieCompare(a, b) {
    validators.validate(validators.isObject(a), a);
    validators.validate(validators.isObject(b), b);
    var cmp = 0;

    // descending for length: b CMP a
    var aPathLen = a.path ? a.path.length : 0;
    var bPathLen = b.path ? b.path.length : 0;
    cmp = bPathLen - aPathLen;
    if (cmp !== 0) {
      return cmp;
    }

    // ascending for time: a CMP b
    var aTime = a.creation ? a.creation.getTime() : MAX_TIME;
    var bTime = b.creation ? b.creation.getTime() : MAX_TIME;
    cmp = aTime - bTime;
    if (cmp !== 0) {
      return cmp;
    }

    // break ties for the same millisecond (precision of JavaScript's clock)
    cmp = a.creationIndex - b.creationIndex;
    return cmp;
  }

  // Gives the permutation of all possible pathMatch()es of a given path. The
  // array is in longest-to-shortest order.  Handy for indexing.
  function permutePath(path) {
    validators.validate(validators.isString(path));
    if (path === "/") {
      return ["/"];
    }
    var permutations = [path];
    while (path.length > 1) {
      var lindex = path.lastIndexOf("/");
      if (lindex === 0) {
        break;
      }
      path = path.substr(0, lindex);
      permutations.push(path);
    }
    permutations.push("/");
    return permutations;
  }
  function getCookieContext(url) {
    if (url instanceof Object) {
      return url;
    }
    // NOTE: decodeURI will throw on malformed URIs (see GH-32).
    // Therefore, we will just skip decoding for such URIs.
    try {
      url = decodeURI(url);
    } catch (err) {
      // Silently swallow error
    }
    return urlParse(url);
  }
  var cookieDefaults = {
    // the order in which the RFC has them:
    key: "",
    value: "",
    expires: "Infinity",
    maxAge: null,
    domain: null,
    path: null,
    secure: false,
    httpOnly: false,
    extensions: null,
    // set by the CookieJar:
    hostOnly: null,
    pathIsDefault: null,
    creation: null,
    lastAccessed: null,
    sameSite: undefined
  };
  var Cookie$1 = /*#__PURE__*/function () {
    function Cookie() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      _classCallCheck(this, Cookie);
      var customInspectSymbol = getCustomInspectSymbol();
      if (customInspectSymbol) {
        this[customInspectSymbol] = this.inspect;
      }
      Object.assign(this, cookieDefaults, options);
      this.creation = this.creation || new Date();

      // used to break creation ties in cookieCompare():
      Object.defineProperty(this, "creationIndex", {
        configurable: false,
        enumerable: false,
        // important for assert.deepEqual checks
        writable: true,
        value: ++Cookie.cookiesCreated
      });
    }
    return _createClass(Cookie, [{
      key: "inspect",
      value: function inspect() {
        var now = Date.now();
        var hostOnly = this.hostOnly != null ? this.hostOnly : "?";
        var createAge = this.creation ? "".concat(now - this.creation.getTime(), "ms") : "?";
        var accessAge = this.lastAccessed ? "".concat(now - this.lastAccessed.getTime(), "ms") : "?";
        return "Cookie=\"".concat(this.toString(), "; hostOnly=").concat(hostOnly, "; aAge=").concat(accessAge, "; cAge=").concat(createAge, "\"");
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        var obj = {};
        var _iterator = _createForOfIteratorHelper(Cookie.serializableProperties),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var prop = _step.value;
            if (this[prop] === cookieDefaults[prop]) {
              continue; // leave as prototype default
            }
            if (prop === "expires" || prop === "creation" || prop === "lastAccessed") {
              if (this[prop] === null) {
                obj[prop] = null;
              } else {
                obj[prop] = this[prop] == "Infinity" // intentionally not ===
                ? "Infinity" : this[prop].toISOString();
              }
            } else if (prop === "maxAge") {
              if (this[prop] !== null) {
                // again, intentionally not ===
                obj[prop] = this[prop] == Infinity || this[prop] == -Infinity ? this[prop].toString() : this[prop];
              }
            } else {
              if (this[prop] !== cookieDefaults[prop]) {
                obj[prop] = this[prop];
              }
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        return obj;
      }
    }, {
      key: "clone",
      value: function clone() {
        return fromJSON(this.toJSON());
      }
    }, {
      key: "validate",
      value: function validate() {
        if (!COOKIE_OCTETS.test(this.value)) {
          return false;
        }
        if (this.expires != Infinity && !(this.expires instanceof Date) && !parseDate(this.expires)) {
          return false;
        }
        if (this.maxAge != null && this.maxAge <= 0) {
          return false; // "Max-Age=" non-zero-digit *DIGIT
        }
        if (this.path != null && !PATH_VALUE.test(this.path)) {
          return false;
        }
        var cdomain = this.cdomain();
        if (cdomain) {
          if (cdomain.match(/\.$/)) {
            return false; // S4.1.2.3 suggests that this is bad. domainMatch() tests confirm this
          }
          var suffix = pubsuffix.getPublicSuffix(cdomain);
          if (suffix == null) {
            // it's a public suffix
            return false;
          }
        }
        return true;
      }
    }, {
      key: "setExpires",
      value: function setExpires(exp) {
        if (exp instanceof Date) {
          this.expires = exp;
        } else {
          this.expires = parseDate(exp) || "Infinity";
        }
      }
    }, {
      key: "setMaxAge",
      value: function setMaxAge(age) {
        if (age === Infinity || age === -Infinity) {
          this.maxAge = age.toString(); // so JSON.stringify() works
        } else {
          this.maxAge = age;
        }
      }
    }, {
      key: "cookieString",
      value: function cookieString() {
        var val = this.value;
        if (val == null) {
          val = "";
        }
        if (this.key === "") {
          return val;
        }
        return "".concat(this.key, "=").concat(val);
      }

      // gives Set-Cookie header format
    }, {
      key: "toString",
      value: function toString() {
        var str = this.cookieString();
        if (this.expires != Infinity) {
          if (this.expires instanceof Date) {
            str += "; Expires=".concat(formatDate(this.expires));
          } else {
            str += "; Expires=".concat(this.expires);
          }
        }
        if (this.maxAge != null && this.maxAge != Infinity) {
          str += "; Max-Age=".concat(this.maxAge);
        }
        if (this.domain && !this.hostOnly) {
          str += "; Domain=".concat(this.domain);
        }
        if (this.path) {
          str += "; Path=".concat(this.path);
        }
        if (this.secure) {
          str += "; Secure";
        }
        if (this.httpOnly) {
          str += "; HttpOnly";
        }
        if (this.sameSite && this.sameSite !== "none") {
          var ssCanon = Cookie.sameSiteCanonical[this.sameSite.toLowerCase()];
          str += "; SameSite=".concat(ssCanon ? ssCanon : this.sameSite);
        }
        if (this.extensions) {
          this.extensions.forEach(function (ext) {
            str += "; ".concat(ext);
          });
        }
        return str;
      }

      // TTL() partially replaces the "expiry-time" parts of S5.3 step 3 (setCookie()
      // elsewhere)
      // S5.3 says to give the "latest representable date" for which we use Infinity
      // For "expired" we use 0
    }, {
      key: "TTL",
      value: function TTL(now) {
        /* RFC6265 S4.1.2.2 If a cookie has both the Max-Age and the Expires
         * attribute, the Max-Age attribute has precedence and controls the
         * expiration date of the cookie.
         * (Concurs with S5.3 step 3)
         */
        if (this.maxAge != null) {
          return this.maxAge <= 0 ? 0 : this.maxAge * 1000;
        }
        var expires = this.expires;
        if (expires != Infinity) {
          if (!(expires instanceof Date)) {
            expires = parseDate(expires) || Infinity;
          }
          if (expires == Infinity) {
            return Infinity;
          }
          return expires.getTime() - (now || Date.now());
        }
        return Infinity;
      }

      // expiryTime() replaces the "expiry-time" parts of S5.3 step 3 (setCookie()
      // elsewhere)
    }, {
      key: "expiryTime",
      value: function expiryTime(now) {
        if (this.maxAge != null) {
          var relativeTo = now || this.creation || new Date();
          var age = this.maxAge <= 0 ? -Infinity : this.maxAge * 1000;
          return relativeTo.getTime() + age;
        }
        if (this.expires == Infinity) {
          return Infinity;
        }
        return this.expires.getTime();
      }

      // expiryDate() replaces the "expiry-time" parts of S5.3 step 3 (setCookie()
      // elsewhere), except it returns a Date
    }, {
      key: "expiryDate",
      value: function expiryDate(now) {
        var millisec = this.expiryTime(now);
        if (millisec == Infinity) {
          return new Date(MAX_TIME);
        } else if (millisec == -Infinity) {
          return new Date(MIN_TIME);
        } else {
          return new Date(millisec);
        }
      }

      // This replaces the "persistent-flag" parts of S5.3 step 3
    }, {
      key: "isPersistent",
      value: function isPersistent() {
        return this.maxAge != null || this.expires != Infinity;
      }

      // Mostly S5.1.2 and S5.2.3:
    }, {
      key: "canonicalizedDomain",
      value: function canonicalizedDomain() {
        if (this.domain == null) {
          return null;
        }
        return canonicalDomain(this.domain);
      }
    }, {
      key: "cdomain",
      value: function cdomain() {
        return this.canonicalizedDomain();
      }
    }]);
  }();
  Cookie$1.cookiesCreated = 0;
  Cookie$1.parse = parse;
  Cookie$1.fromJSON = fromJSON;
  Cookie$1.serializableProperties = Object.keys(cookieDefaults);
  Cookie$1.sameSiteLevel = {
    strict: 3,
    lax: 2,
    none: 1
  };
  Cookie$1.sameSiteCanonical = {
    strict: "Strict",
    lax: "Lax"
  };
  function getNormalizedPrefixSecurity(prefixSecurity) {
    if (prefixSecurity != null) {
      var normalizedPrefixSecurity = prefixSecurity.toLowerCase();
      /* The three supported options */
      switch (normalizedPrefixSecurity) {
        case PrefixSecurityEnum.STRICT:
        case PrefixSecurityEnum.SILENT:
        case PrefixSecurityEnum.DISABLED:
          return normalizedPrefixSecurity;
      }
    }
    /* Default is SILENT */
    return PrefixSecurityEnum.SILENT;
  }
  var CookieJar = /*#__PURE__*/function () {
    function CookieJar(store) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
        rejectPublicSuffixes: true
      };
      _classCallCheck(this, CookieJar);
      if (typeof options === "boolean") {
        options = {
          rejectPublicSuffixes: options
        };
      }
      validators.validate(validators.isObject(options), options);
      this.rejectPublicSuffixes = options.rejectPublicSuffixes;
      this.enableLooseMode = !!options.looseMode;
      this.allowSpecialUseDomain = typeof options.allowSpecialUseDomain === "boolean" ? options.allowSpecialUseDomain : true;
      this.store = store || new MemoryCookieStore();
      this.prefixSecurity = getNormalizedPrefixSecurity(options.prefixSecurity);
      this._cloneSync = syncWrap("clone");
      this._importCookiesSync = syncWrap("_importCookies");
      this.getCookiesSync = syncWrap("getCookies");
      this.getCookieStringSync = syncWrap("getCookieString");
      this.getSetCookieStringsSync = syncWrap("getSetCookieStrings");
      this.removeAllCookiesSync = syncWrap("removeAllCookies");
      this.setCookieSync = syncWrap("setCookie");
      this.serializeSync = syncWrap("serialize");
    }
    return _createClass(CookieJar, [{
      key: "setCookie",
      value: function setCookie(cookie, url, options, cb) {
        validators.validate(validators.isUrlStringOrObject(url), cb, options);
        var err;
        if (validators.isFunction(url)) {
          cb = url;
          return cb(new Error("No URL was specified"));
        }
        var context = getCookieContext(url);
        if (validators.isFunction(options)) {
          cb = options;
          options = {};
        }
        validators.validate(validators.isFunction(cb), cb);
        if (!validators.isNonEmptyString(cookie) && !validators.isObject(cookie) && cookie instanceof String && cookie.length == 0) {
          return cb(null);
        }
        var host = canonicalDomain(context.hostname);
        var loose = options.loose || this.enableLooseMode;
        var sameSiteContext = null;
        if (options.sameSiteContext) {
          sameSiteContext = checkSameSiteContext(options.sameSiteContext);
          if (!sameSiteContext) {
            return cb(new Error(SAME_SITE_CONTEXT_VAL_ERR));
          }
        }

        // S5.3 step 1
        if (typeof cookie === "string" || cookie instanceof String) {
          cookie = Cookie$1.parse(cookie, {
            loose: loose
          });
          if (!cookie) {
            err = new Error("Cookie failed to parse");
            return cb(options.ignoreError ? null : err);
          }
        } else if (!(cookie instanceof Cookie$1)) {
          // If you're seeing this error, and are passing in a Cookie object,
          // it *might* be a Cookie object from another loaded version of tough-cookie.
          err = new Error("First argument to setCookie must be a Cookie object or string");
          return cb(options.ignoreError ? null : err);
        }

        // S5.3 step 2
        var now = options.now || new Date(); // will assign later to save effort in the face of errors

        // S5.3 step 3: NOOP; persistent-flag and expiry-time is handled by getCookie()

        // S5.3 step 4: NOOP; domain is null by default

        // S5.3 step 5: public suffixes
        if (this.rejectPublicSuffixes && cookie.domain) {
          var suffix = pubsuffix.getPublicSuffix(cookie.cdomain(), {
            allowSpecialUseDomain: this.allowSpecialUseDomain,
            ignoreError: options.ignoreError
          });
          if (suffix == null && !IP_V6_REGEX_OBJECT.test(cookie.domain)) {
            // e.g. "com"
            err = new Error("Cookie has domain set to a public suffix");
            return cb(options.ignoreError ? null : err);
          }
        }

        // S5.3 step 6:
        if (cookie.domain) {
          if (!domainMatch(host, cookie.cdomain(), false)) {
            err = new Error("Cookie not in this host's domain. Cookie:".concat(cookie.cdomain(), " Request:").concat(host));
            return cb(options.ignoreError ? null : err);
          }
          if (cookie.hostOnly == null) {
            // don't reset if already set
            cookie.hostOnly = false;
          }
        } else {
          cookie.hostOnly = true;
          cookie.domain = host;
        }

        //S5.2.4 If the attribute-value is empty or if the first character of the
        //attribute-value is not %x2F ("/"):
        //Let cookie-path be the default-path.
        if (!cookie.path || cookie.path[0] !== "/") {
          cookie.path = defaultPath(context.pathname);
          cookie.pathIsDefault = true;
        }

        // S5.3 step 8: NOOP; secure attribute
        // S5.3 step 9: NOOP; httpOnly attribute

        // S5.3 step 10
        if (options.http === false && cookie.httpOnly) {
          err = new Error("Cookie is HttpOnly and this isn't an HTTP API");
          return cb(options.ignoreError ? null : err);
        }

        // 6252bis-02 S5.4 Step 13 & 14:
        if (cookie.sameSite !== "none" && cookie.sameSite !== undefined && sameSiteContext) {
          // "If the cookie's "same-site-flag" is not "None", and the cookie
          //  is being set from a context whose "site for cookies" is not an
          //  exact match for request-uri's host's registered domain, then
          //  abort these steps and ignore the newly created cookie entirely."
          if (sameSiteContext === "none") {
            err = new Error("Cookie is SameSite but this is a cross-origin request");
            return cb(options.ignoreError ? null : err);
          }
        }

        /* 6265bis-02 S5.4 Steps 15 & 16 */
        var ignoreErrorForPrefixSecurity = this.prefixSecurity === PrefixSecurityEnum.SILENT;
        var prefixSecurityDisabled = this.prefixSecurity === PrefixSecurityEnum.DISABLED;
        /* If prefix checking is not disabled ...*/
        if (!prefixSecurityDisabled) {
          var errorFound = false;
          var errorMsg;
          /* Check secure prefix condition */
          if (!isSecurePrefixConditionMet(cookie)) {
            errorFound = true;
            errorMsg = "Cookie has __Secure prefix but Secure attribute is not set";
          } else if (!isHostPrefixConditionMet(cookie)) {
            /* Check host prefix condition */
            errorFound = true;
            errorMsg = "Cookie has __Host prefix but either Secure or HostOnly attribute is not set or Path is not '/'";
          }
          if (errorFound) {
            return cb(options.ignoreError || ignoreErrorForPrefixSecurity ? null : new Error(errorMsg));
          }
        }
        var store = this.store;
        if (!store.updateCookie) {
          store.updateCookie = function (oldCookie, newCookie, cb) {
            this.putCookie(newCookie, cb);
          };
        }
        function withCookie(err, oldCookie) {
          if (err) {
            return cb(err);
          }
          var next = function next(err) {
            if (err) {
              return cb(err);
            } else {
              cb(null, cookie);
            }
          };
          if (oldCookie) {
            // S5.3 step 11 - "If the cookie store contains a cookie with the same name,
            // domain, and path as the newly created cookie:"
            if (options.http === false && oldCookie.httpOnly) {
              // step 11.2
              err = new Error("old Cookie is HttpOnly and this isn't an HTTP API");
              return cb(options.ignoreError ? null : err);
            }
            cookie.creation = oldCookie.creation; // step 11.3
            cookie.creationIndex = oldCookie.creationIndex; // preserve tie-breaker
            cookie.lastAccessed = now;
            // Step 11.4 (delete cookie) is implied by just setting the new one:
            store.updateCookie(oldCookie, cookie, next); // step 12
          } else {
            cookie.creation = cookie.lastAccessed = now;
            store.putCookie(cookie, next); // step 12
          }
        }
        store.findCookie(cookie.domain, cookie.path, cookie.key, withCookie);
      }

      // RFC6365 S5.4
    }, {
      key: "getCookies",
      value: function getCookies(url, options, cb) {
        validators.validate(validators.isUrlStringOrObject(url), cb, url);
        var context = getCookieContext(url);
        if (validators.isFunction(options)) {
          cb = options;
          options = {};
        }
        validators.validate(validators.isObject(options), cb, options);
        validators.validate(validators.isFunction(cb), cb);
        var host = canonicalDomain(context.hostname);
        var path = context.pathname || "/";
        var secure = options.secure;
        if (secure == null && context.protocol && (context.protocol == "https:" || context.protocol == "wss:")) {
          secure = true;
        }
        var sameSiteLevel = 0;
        if (options.sameSiteContext) {
          var sameSiteContext = checkSameSiteContext(options.sameSiteContext);
          sameSiteLevel = Cookie$1.sameSiteLevel[sameSiteContext];
          if (!sameSiteLevel) {
            return cb(new Error(SAME_SITE_CONTEXT_VAL_ERR));
          }
        }
        var http = options.http;
        if (http == null) {
          http = true;
        }
        var now = options.now || Date.now();
        var expireCheck = options.expire !== false;
        var allPaths = !!options.allPaths;
        var store = this.store;
        function matchingCookie(c) {
          // "Either:
          //   The cookie's host-only-flag is true and the canonicalized
          //   request-host is identical to the cookie's domain.
          // Or:
          //   The cookie's host-only-flag is false and the canonicalized
          //   request-host domain-matches the cookie's domain."
          if (c.hostOnly) {
            if (c.domain != host) {
              return false;
            }
          } else {
            if (!domainMatch(host, c.domain, false)) {
              return false;
            }
          }

          // "The request-uri's path path-matches the cookie's path."
          if (!allPaths && !pathMatch(path, c.path)) {
            return false;
          }

          // "If the cookie's secure-only-flag is true, then the request-uri's
          // scheme must denote a "secure" protocol"
          if (c.secure && !secure) {
            return false;
          }

          // "If the cookie's http-only-flag is true, then exclude the cookie if the
          // cookie-string is being generated for a "non-HTTP" API"
          if (c.httpOnly && !http) {
            return false;
          }

          // RFC6265bis-02 S5.3.7
          if (sameSiteLevel) {
            var cookieLevel = Cookie$1.sameSiteLevel[c.sameSite || "none"];
            if (cookieLevel > sameSiteLevel) {
              // only allow cookies at or below the request level
              return false;
            }
          }

          // deferred from S5.3
          // non-RFC: allow retention of expired cookies by choice
          if (expireCheck && c.expiryTime() <= now) {
            store.removeCookie(c.domain, c.path, c.key, function () {}); // result ignored
            return false;
          }
          return true;
        }
        store.findCookies(host, allPaths ? null : path, this.allowSpecialUseDomain, function (err, cookies) {
          if (err) {
            return cb(err);
          }
          cookies = cookies.filter(matchingCookie);

          // sorting of S5.4 part 2
          if (options.sort !== false) {
            cookies = cookies.sort(cookieCompare);
          }

          // S5.4 part 3
          var now = new Date();
          var _iterator2 = _createForOfIteratorHelper(cookies),
            _step2;
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var _cookie = _step2.value;
              _cookie.lastAccessed = now;
            }
            // TODO persist lastAccessed
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
          cb(null, cookies);
        });
      }
    }, {
      key: "getCookieString",
      value: function getCookieString() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        var cb = args.pop();
        validators.validate(validators.isFunction(cb), cb);
        var next = function next(err, cookies) {
          if (err) {
            cb(err);
          } else {
            cb(null, cookies.sort(cookieCompare).map(function (c) {
              return c.cookieString();
            }).join("; "));
          }
        };
        args.push(next);
        this.getCookies.apply(this, args);
      }
    }, {
      key: "getSetCookieStrings",
      value: function getSetCookieStrings() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        var cb = args.pop();
        validators.validate(validators.isFunction(cb), cb);
        var next = function next(err, cookies) {
          if (err) {
            cb(err);
          } else {
            cb(null, cookies.map(function (c) {
              return c.toString();
            }));
          }
        };
        args.push(next);
        this.getCookies.apply(this, args);
      }
    }, {
      key: "serialize",
      value: function serialize(cb) {
        validators.validate(validators.isFunction(cb), cb);
        var type = this.store.constructor.name;
        if (validators.isObject(type)) {
          type = null;
        }

        // update README.md "Serialization Format" if you change this, please!
        var serialized = {
          // The version of tough-cookie that serialized this jar. Generally a good
          // practice since future versions can make data import decisions based on
          // known past behavior. When/if this matters, use `semver`.
          version: "tough-cookie@".concat(VERSION$1),
          // add the store type, to make humans happy:
          storeType: type,
          // CookieJar configuration:
          rejectPublicSuffixes: !!this.rejectPublicSuffixes,
          enableLooseMode: !!this.enableLooseMode,
          allowSpecialUseDomain: !!this.allowSpecialUseDomain,
          prefixSecurity: getNormalizedPrefixSecurity(this.prefixSecurity),
          // this gets filled from getAllCookies:
          cookies: []
        };
        if (!(this.store.getAllCookies && typeof this.store.getAllCookies === "function")) {
          return cb(new Error("store does not support getAllCookies and cannot be serialized"));
        }
        this.store.getAllCookies(function (err, cookies) {
          if (err) {
            return cb(err);
          }
          serialized.cookies = cookies.map(function (cookie) {
            // convert to serialized 'raw' cookies
            cookie = cookie instanceof Cookie$1 ? cookie.toJSON() : cookie;

            // Remove the index so new ones get assigned during deserialization
            delete cookie.creationIndex;
            return cookie;
          });
          return cb(null, serialized);
        });
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return this.serializeSync();
      }

      // use the class method CookieJar.deserialize instead of calling this directly
    }, {
      key: "_importCookies",
      value: function _importCookies(serialized, cb) {
        var _this = this;
        var cookies = serialized.cookies;
        if (!cookies || !Array.isArray(cookies)) {
          return cb(new Error("serialized jar has no cookies array"));
        }
        cookies = cookies.slice(); // do not modify the original

        var putNext = function putNext(err) {
          if (err) {
            return cb(err);
          }
          if (!cookies.length) {
            return cb(err, _this);
          }
          var cookie;
          try {
            cookie = fromJSON(cookies.shift());
          } catch (e) {
            return cb(e);
          }
          if (cookie === null) {
            return putNext(null); // skip this cookie
          }
          _this.store.putCookie(cookie, putNext);
        };
        putNext();
      }
    }, {
      key: "clone",
      value: function clone(newStore, cb) {
        if (arguments.length === 1) {
          cb = newStore;
          newStore = null;
        }
        this.serialize(function (err, serialized) {
          if (err) {
            return cb(err);
          }
          CookieJar.deserialize(serialized, newStore, cb);
        });
      }
    }, {
      key: "cloneSync",
      value: function cloneSync(newStore) {
        if (arguments.length === 0) {
          return this._cloneSync();
        }
        if (!newStore.synchronous) {
          throw new Error("CookieJar clone destination store is not synchronous; use async API instead.");
        }
        return this._cloneSync(newStore);
      }
    }, {
      key: "removeAllCookies",
      value: function removeAllCookies(cb) {
        validators.validate(validators.isFunction(cb), cb);
        var store = this.store;

        // Check that the store implements its own removeAllCookies(). The default
        // implementation in Store will immediately call the callback with a "not
        // implemented" Error.
        if (typeof store.removeAllCookies === "function" && store.removeAllCookies !== Store.prototype.removeAllCookies) {
          return store.removeAllCookies(cb);
        }
        store.getAllCookies(function (err, cookies) {
          if (err) {
            return cb(err);
          }
          if (cookies.length === 0) {
            return cb(null);
          }
          var completedCount = 0;
          var removeErrors = [];
          function removeCookieCb(removeErr) {
            if (removeErr) {
              removeErrors.push(removeErr);
            }
            completedCount++;
            if (completedCount === cookies.length) {
              return cb(removeErrors.length ? removeErrors[0] : null);
            }
          }
          cookies.forEach(function (cookie) {
            store.removeCookie(cookie.domain, cookie.path, cookie.key, removeCookieCb);
          });
        });
      }
    }], [{
      key: "deserialize",
      value: function deserialize(strOrObj, store, cb) {
        if (arguments.length !== 3) {
          // store is optional
          cb = store;
          store = null;
        }
        validators.validate(validators.isFunction(cb), cb);
        var serialized;
        if (typeof strOrObj === "string") {
          serialized = jsonParse(strOrObj);
          if (serialized instanceof Error) {
            return cb(serialized);
          }
        } else {
          serialized = strOrObj;
        }
        var jar = new CookieJar(store, {
          rejectPublicSuffixes: serialized.rejectPublicSuffixes,
          looseMode: serialized.enableLooseMode,
          allowSpecialUseDomain: serialized.allowSpecialUseDomain,
          prefixSecurity: serialized.prefixSecurity
        });
        jar._importCookies(serialized, function (err) {
          if (err) {
            return cb(err);
          }
          cb(null, jar);
        });
      }
    }, {
      key: "deserializeSync",
      value: function deserializeSync(strOrObj, store) {
        var serialized = typeof strOrObj === "string" ? JSON.parse(strOrObj) : strOrObj;
        var jar = new CookieJar(store, {
          rejectPublicSuffixes: serialized.rejectPublicSuffixes,
          looseMode: serialized.enableLooseMode
        });

        // catch this mistake early:
        if (!jar.store.synchronous) {
          throw new Error("CookieJar store is not synchronous; use async API instead.");
        }
        jar._importCookiesSync(serialized);
        return jar;
      }
    }]);
  }();
  CookieJar.fromJSON = CookieJar.deserializeSync;
  ["_importCookies", "clone", "getCookies", "getCookieString", "getSetCookieStrings", "removeAllCookies", "serialize", "setCookie"].forEach(function (name) {
    CookieJar.prototype[name] = fromCallback(CookieJar.prototype[name]);
  });
  CookieJar.deserialize = fromCallback(CookieJar.deserialize);

  // Use a closure to provide a true imperative API for synchronous stores.
  function syncWrap(method) {
    return function () {
      if (!this.store.synchronous) {
        throw new Error("CookieJar store is not synchronous; use async API instead.");
      }
      var syncErr, syncResult;
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      this[method].apply(this, args.concat([function (err, result) {
        syncErr = err;
        syncResult = result;
      }]));
      if (syncErr) {
        throw syncErr;
      }
      return syncResult;
    };
  }
  cookie.version = VERSION$1;
  cookie.CookieJar = CookieJar;
  cookie.Cookie = Cookie$1;
  cookie.Store = Store;
  cookie.MemoryCookieStore = MemoryCookieStore;
  cookie.parseDate = parseDate;
  cookie.formatDate = formatDate;
  cookie.parse = parse;
  cookie.fromJSON = fromJSON;
  cookie.domainMatch = domainMatch;
  cookie.defaultPath = defaultPath;
  cookie.pathMatch = pathMatch;
  cookie.getPublicSuffix = pubsuffix.getPublicSuffix;
  cookie.cookieCompare = cookieCompare;
  cookie.permuteDomain = requirePermuteDomain().permuteDomain;
  cookie.permutePath = permutePath;
  cookie.canonicalDomain = canonicalDomain;
  cookie.PrefixSecurityEnum = PrefixSecurityEnum;
  cookie.ParameterError = validators.ParameterError;

  var node_cookies = cookie;

  var timeouts = {
    addTimeout: function addTimeout(name, delay, callback, context) {
      this._timeouts = this._timeouts || {};
      if (this._timeouts.hasOwnProperty(name)) return;
      var self = this;
      this._timeouts[name] = commonjsGlobal.setTimeout(function () {
        delete self._timeouts[name];
        callback.call(context);
      }, 1000 * delay);
    },
    removeTimeout: function removeTimeout(name) {
      this._timeouts = this._timeouts || {};
      var timeout = this._timeouts[name];
      if (!timeout) return;
      commonjsGlobal.clearTimeout(timeout);
      delete this._timeouts[name];
    },
    removeAllTimeouts: function removeAllTimeouts() {
      this._timeouts = this._timeouts || {};
      for (var name in this._timeouts) this.removeTimeout(name);
    }
  };

  var Class$d = _class,
    Cookie = node_cookies.Cookie,
    Promise$1 = promise,
    array$3 = array$5,
    assign$b = assign$f,
    Logging$7 = logging,
    Timeouts$2 = timeouts,
    Channel$3 = channel;
  var Transport$2 = assign$b(Class$d({
    className: 'Transport',
    DEFAULT_PORTS: {
      'http:': 80,
      'https:': 443,
      'ws:': 80,
      'wss:': 443
    },
    MAX_DELAY: 0,
    batching: true,
    initialize: function initialize(dispatcher, endpoint) {
      this._dispatcher = dispatcher;
      this.endpoint = endpoint;
      this._outbox = [];
      this._proxy = assign$b({}, this._dispatcher.proxy);
      if (!this._proxy.origin) this._proxy.origin = this._findProxy();
    },
    close: function close() {},
    encode: function encode(messages) {
      return '';
    },
    sendMessage: function sendMessage(message) {
      this.debug('Client ? sending message to ?: ?', this._dispatcher.clientId, this.endpoint.href, message);
      if (!this.batching) return Promise$1.resolve(this.request([message]));
      this._outbox.push(message);
      this._flushLargeBatch();
      if (message.channel === Channel$3.HANDSHAKE) return this._publish(0.01);
      if (message.channel === Channel$3.CONNECT) this._connectMessage = message;
      return this._publish(this.MAX_DELAY);
    },
    _makePromise: function _makePromise() {
      var self = this;
      this._requestPromise = this._requestPromise || new Promise$1(function (resolve) {
        self._resolvePromise = resolve;
      });
    },
    _publish: function _publish(delay) {
      this._makePromise();
      this.addTimeout('publish', delay, function () {
        this._flush();
        delete this._requestPromise;
      }, this);
      return this._requestPromise;
    },
    _flush: function _flush() {
      this.removeTimeout('publish');
      if (this._outbox.length > 1 && this._connectMessage) this._connectMessage.advice = {
        timeout: 0
      };
      this._resolvePromise(this.request(this._outbox));
      this._connectMessage = null;
      this._outbox = [];
    },
    _flushLargeBatch: function _flushLargeBatch() {
      var string = this.encode(this._outbox);
      if (string.length < this._dispatcher.maxRequestSize) return;
      var last = this._outbox.pop();
      this._makePromise();
      this._flush();
      if (last) this._outbox.push(last);
    },
    _receive: function _receive(replies) {
      if (!replies) return;
      replies = [].concat(replies);
      this.debug('Client ? received from ? via ?: ?', this._dispatcher.clientId, this.endpoint.href, this.connectionType, replies);
      for (var i = 0, n = replies.length; i < n; i++) this._dispatcher.handleResponse(replies[i]);
    },
    _handleError: function _handleError(messages, immediate) {
      messages = [].concat(messages);
      this.debug('Client ? failed to send to ? via ?: ?', this._dispatcher.clientId, this.endpoint.href, this.connectionType, messages);
      for (var i = 0, n = messages.length; i < n; i++) this._dispatcher.handleError(messages[i]);
    },
    _getCookies: function _getCookies() {
      var cookies = this._dispatcher.cookies,
        url = this.endpoint.href;
      if (!cookies) return '';
      return array$3.map(cookies.getCookiesSync(url), function (cookie) {
        return cookie.cookieString();
      }).join('; ');
    },
    _storeCookies: function _storeCookies(setCookie) {
      var cookies = this._dispatcher.cookies,
        url = this.endpoint.href,
        cookie;
      if (!setCookie || !cookies) return;
      setCookie = [].concat(setCookie);
      for (var i = 0, n = setCookie.length; i < n; i++) {
        cookie = Cookie.parse(setCookie[i]);
        cookies.setCookieSync(cookie, url);
      }
    },
    _findProxy: function _findProxy() {
      if (typeof process === 'undefined') return undefined;
      var protocol = this.endpoint.protocol;
      if (!protocol) return undefined;
      var name = protocol.replace(/:$/, '').toLowerCase() + '_proxy',
        upcase = name.toUpperCase(),
        env = process.env,
        keys,
        proxy;
      if (name === 'http_proxy' && env.REQUEST_METHOD) {
        keys = Object.keys(env).filter(function (k) {
          return /^http_proxy$/i.test(k);
        });
        if (keys.length === 1) {
          if (keys[0] === name && env[upcase] === undefined) proxy = env[name];
        } else if (keys.length > 1) {
          proxy = env[name];
        }
        proxy = proxy || env['CGI_' + upcase];
      } else {
        proxy = env[name] || env[upcase];
        if (proxy && !env[name]) console.warn('The environment variable ' + upcase + ' is discouraged. Use ' + name + '.');
      }
      return proxy;
    }
  }), {
    get: function get(dispatcher, allowed, disabled, callback, context) {
      var endpoint = dispatcher.endpoint;
      array$3.asyncEach(this._transports, function (pair, resume) {
        var connType = pair[0],
          klass = pair[1],
          connEndpoint = dispatcher.endpointFor(connType);
        if (array$3.indexOf(disabled, connType) >= 0) return resume();
        if (array$3.indexOf(allowed, connType) < 0) {
          klass.isUsable(dispatcher, connEndpoint, function () {});
          return resume();
        }
        klass.isUsable(dispatcher, connEndpoint, function (isUsable) {
          if (!isUsable) return resume();
          var transport = klass.hasOwnProperty('create') ? klass.create(dispatcher, connEndpoint) : new klass(dispatcher, connEndpoint);
          callback.call(context, transport);
        });
      }, function () {
        throw new Error('Could not find a usable connection type for ' + endpoint.href);
      });
    },
    register: function register(type, klass) {
      this._transports.push([type, klass]);
      klass.prototype.connectionType = type;
    },
    getConnectionTypes: function getConnectionTypes() {
      return array$3.map(this._transports, function (t) {
        return t[0];
      });
    },
    disable: function disable(feature) {
      if (feature !== 'autodisconnect') return;
      for (var i = 0; i < this._transports.length; i++) this._transports[i][1]._unloaded = false;
    },
    _transports: []
  });
  assign$b(Transport$2.prototype, Logging$7);
  assign$b(Transport$2.prototype, Timeouts$2);
  var transport = Transport$2;

  var copyObject$1 = function copyObject(object) {
    var clone, i, key;
    if (object instanceof Array) {
      clone = [];
      i = object.length;
      while (i--) clone[i] = copyObject(object[i]);
      return clone;
    } else if (_typeof(object) === 'object') {
      clone = object === null ? null : {};
      for (key in object) clone[key] = copyObject(object[key]);
      return clone;
    } else {
      return object;
    }
  };
  var copy_object = copyObject$1;

  var Stream$3 = function Stream(sequence, bits) {
    bits = bits || (sequence instanceof Buffer ? 8 : 1);
    var binary = '',
      b,
      i,
      n;
    for (i = 0, n = sequence.length; i < n; i++) {
      b = this._get(sequence, i).toString(2);
      while (b.length < bits) b = '0' + b;
      binary = binary + b;
    }
    binary = binary.split('').map(function (b) {
      return parseInt(b, 2);
    });
    this._bases = {
      '2': binary
    };
  };
  Stream$3.prototype.generate = function (n, base, inner) {
    base = base || 2;
    var value = n,
      k = Math.ceil(Math.log(n) / Math.log(base)),
      r = Math.pow(base, k) - n,
      chunk;
    loop: while (value >= n) {
      chunk = this._shift(base, k);
      if (!chunk) return inner ? n : null;
      value = this._evaluate(chunk, base);
      if (value >= n) {
        if (r === 1) continue loop;
        this._push(r, value - n);
        value = this.generate(n, r, true);
      }
    }
    return value;
  };
  Stream$3.prototype._get = function (sequence, i) {
    return sequence.readUInt8 ? sequence.readUInt8(i) : sequence[i];
  };
  Stream$3.prototype._evaluate = function (chunk, base) {
    var sum = 0,
      i = chunk.length;
    while (i--) sum += chunk[i] * Math.pow(base, chunk.length - (i + 1));
    return sum;
  };
  Stream$3.prototype._push = function (base, value) {
    this._bases[base] = this._bases[base] || [];
    this._bases[base].push(value);
  };
  Stream$3.prototype._shift = function (base, k) {
    var list = this._bases[base];
    if (!list || list.length < k) return null;else return list.splice(0, k);
  };
  var sequin = Stream$3;

  var DEFAULT_BITS = 128,
    DEFAULT_RADIX = 16,
    DIGITS = '0123456789abcdefghijklmnopqrstuvwxyz'.split('');
  var crypto$4 = require$$0$8,
    Seq = sequin;
  var rand = function rand(bits, radix) {
    bits = bits || DEFAULT_BITS;
    radix = radix || DEFAULT_RADIX;
    if (radix < 2 || radix > 36) throw new Error('radix argument must be between 2 and 36');
    var length = Math.ceil(bits * Math.log(2) / Math.log(radix)),
      entropy = crypto$4.randomBytes(bits),
      stream = new Seq(entropy),
      string = '';
    while (string.length < length) string += DIGITS[stream.generate(radix)];
    return string;
  };
  var csprng$1 = rand;

  var csprng = csprng$1,
    constants$4 = constants$5;
  var random$2 = function random(bitlength) {
    bitlength = bitlength || constants$4.ID_LENGTH;
    var maxLength = Math.ceil(bitlength * Math.log(2) / Math.log(36));
    var string = csprng(bitlength, 36);
    while (string.length < maxLength) string = '0' + string;
    return string;
  };

  var Class$c = _class,
    assign$a = assign$f,
    Deferrable$3 = deferrable,
    Timeouts$1 = timeouts;
  var Connection$1 = Class$c({
    initialize: function initialize(engine, id, options) {
      this._engine = engine;
      this._id = id;
      this._options = options;
      this._inbox = [];
    },
    deliver: function deliver(message) {
      delete message.clientId;
      if (this.socket) return this.socket.send(message);
      this._inbox.push(message);
      this._beginDeliveryTimeout();
    },
    connect: function connect(options, callback, context) {
      options = options || {};
      var timeout = options.timeout !== undefined ? options.timeout / 1000 : this._engine.timeout;
      this.setDeferredStatus('unknown');
      this.callback(callback, context);
      this._beginDeliveryTimeout();
      this._beginConnectionTimeout(timeout);
    },
    flush: function flush() {
      this.removeTimeout('connection');
      this.removeTimeout('delivery');
      this.setDeferredStatus('succeeded', this._inbox);
      this._inbox = [];
      if (!this.socket) this._engine.closeConnection(this._id);
    },
    _beginDeliveryTimeout: function _beginDeliveryTimeout() {
      if (this._inbox.length === 0) return;
      this.addTimeout('delivery', this._engine.MAX_DELAY, this.flush, this);
    },
    _beginConnectionTimeout: function _beginConnectionTimeout(timeout) {
      this.addTimeout('connection', timeout, this.flush, this);
    }
  });
  assign$a(Connection$1.prototype, Deferrable$3);
  assign$a(Connection$1.prototype, Timeouts$1);
  var connection = Connection$1;

  var Class$b = _class,
    random$1 = random$2;
  var namespace = Class$b({
    initialize: function initialize() {
      this._used = {};
    },
    exists: function exists(id) {
      return this._used.hasOwnProperty(id);
    },
    generate: function generate() {
      var name = random$1();
      while (this._used.hasOwnProperty(name)) name = random$1();
      return this._used[name] = name;
    },
    release: function release(id) {
      delete this._used[id];
    }
  });

  var Class$a = _class;
  var set = Class$a({
    initialize: function initialize() {
      this._index = {};
    },
    add: function add(item) {
      var key = item.id !== undefined ? item.id : item;
      if (this._index.hasOwnProperty(key)) return false;
      this._index[key] = item;
      return true;
    },
    forEach: function forEach(block, context) {
      for (var key in this._index) {
        if (this._index.hasOwnProperty(key)) block.call(context, this._index[key]);
      }
    },
    isEmpty: function isEmpty() {
      for (var key in this._index) {
        if (this._index.hasOwnProperty(key)) return false;
      }
      return true;
    },
    member: function member(item) {
      for (var key in this._index) {
        if (this._index[key] === item) return true;
      }
      return false;
    },
    remove: function remove(item) {
      var key = item.id !== undefined ? item.id : item;
      var removed = this._index[key];
      delete this._index[key];
      return removed;
    },
    toArray: function toArray() {
      var array = [];
      this.forEach(function (item) {
        array.push(item);
      });
      return array;
    }
  });

  var copyObject = copy_object,
    assign$9 = assign$f,
    Namespace = namespace,
    Set$1 = set,
    Timeouts = timeouts;
  var Memory$1 = function Memory(server, options) {
    this._server = server;
    this._options = options || {};
    this.reset();
  };
  Memory$1.create = function (server, options) {
    return new Memory$1(server, options);
  };
  Memory$1.prototype = {
    disconnect: function disconnect() {
      this.reset();
      this.removeAllTimeouts();
    },
    reset: function reset() {
      this._namespace = new Namespace();
      this._clients = {};
      this._channels = {};
      this._messages = {};
    },
    createClient: function createClient(callback, context) {
      var clientId = this._namespace.generate();
      this._server.debug('Created new client ?', clientId);
      this.ping(clientId);
      this._server.trigger('handshake', clientId);
      callback.call(context, clientId);
    },
    destroyClient: function destroyClient(clientId, callback, context) {
      if (!this._namespace.exists(clientId)) return;
      var clients = this._clients;
      if (clients[clientId]) clients[clientId].forEach(function (channel) {
        this.unsubscribe(clientId, channel);
      }, this);
      this.removeTimeout(clientId);
      this._namespace.release(clientId);
      delete this._messages[clientId];
      this._server.debug('Destroyed client ?', clientId);
      this._server.trigger('disconnect', clientId);
      this._server.trigger('close', clientId);
      if (callback) callback.call(context);
    },
    clientExists: function clientExists(clientId, callback, context) {
      callback.call(context, this._namespace.exists(clientId));
    },
    ping: function ping(clientId) {
      var timeout = this._server.timeout;
      if (typeof timeout !== 'number') return;
      this._server.debug('Ping ?, ?', clientId, timeout);
      this.removeTimeout(clientId);
      this.addTimeout(clientId, 2 * timeout, function () {
        this.destroyClient(clientId);
      }, this);
    },
    subscribe: function subscribe(clientId, channel, callback, context) {
      var clients = this._clients,
        channels = this._channels;
      clients[clientId] = clients[clientId] || new Set$1();
      var trigger = clients[clientId].add(channel);
      channels[channel] = channels[channel] || new Set$1();
      channels[channel].add(clientId);
      this._server.debug('Subscribed client ? to channel ?', clientId, channel);
      if (trigger) this._server.trigger('subscribe', clientId, channel);
      if (callback) callback.call(context, true);
    },
    unsubscribe: function unsubscribe(clientId, channel, callback, context) {
      var clients = this._clients,
        channels = this._channels,
        trigger = false;
      if (clients[clientId]) {
        trigger = clients[clientId].remove(channel);
        if (clients[clientId].isEmpty()) delete clients[clientId];
      }
      if (channels[channel]) {
        channels[channel].remove(clientId);
        if (channels[channel].isEmpty()) delete channels[channel];
      }
      this._server.debug('Unsubscribed client ? from channel ?', clientId, channel);
      if (trigger) this._server.trigger('unsubscribe', clientId, channel);
      if (callback) callback.call(context, true);
    },
    publish: function publish(message, channels) {
      this._server.debug('Publishing message ?', message);
      var messages = this._messages,
        clients = new Set$1(),
        subs;
      for (var i = 0, n = channels.length; i < n; i++) {
        subs = this._channels[channels[i]];
        if (!subs) continue;
        subs.forEach(clients.add, clients);
      }
      clients.forEach(function (clientId) {
        this._server.debug('Queueing for client ?: ?', clientId, message);
        messages[clientId] = messages[clientId] || [];
        messages[clientId].push(copyObject(message));
        this.emptyQueue(clientId);
      }, this);
      this._server.trigger('publish', message.clientId, message.channel, message.data);
    },
    emptyQueue: function emptyQueue(clientId) {
      if (!this._server.hasConnection(clientId)) return;
      this._server.deliver(clientId, this._messages[clientId]);
      delete this._messages[clientId];
    }
  };
  assign$9(Memory$1.prototype, Timeouts);
  var memory = Memory$1;

  var asap$1 = asap_1,
    assign$8 = assign$f,
    random = random$2,
    Class$9 = _class,
    Logging$6 = logging,
    Publisher$3 = publisher,
    Channel$2 = channel,
    Connection = connection,
    Memory = memory;
  var Proxy$2 = assign$8(Class$9({
    className: 'Engine.Proxy',
    MAX_DELAY: 0,
    INTERVAL: 0,
    TIMEOUT: 60,
    initialize: function initialize(options) {
      this._options = options || {};
      this._connections = {};
      this.interval = this._options.interval || this.INTERVAL;
      this.timeout = this._options.timeout || this.TIMEOUT;
      var engineClass = this._options.type || Memory;
      this._engine = engineClass.create(this, this._options);
      this.bind('close', function (clientId) {
        var self = this;
        asap$1(function () {
          self.flushConnection(clientId);
        });
      }, this);
      this.debug('Created new engine: ?', this._options);
    },
    connect: function connect(clientId, options, callback, context) {
      this.debug('Accepting connection from ?', clientId);
      this._engine.ping(clientId);
      var conn = this.connection(clientId, true);
      conn.connect(options, callback, context);
      this._engine.emptyQueue(clientId);
    },
    hasConnection: function hasConnection(clientId) {
      return this._connections.hasOwnProperty(clientId);
    },
    connection: function connection(clientId, create) {
      var conn = this._connections[clientId];
      if (conn || !create) return conn;
      this._connections[clientId] = new Connection(this, clientId);
      this.trigger('connection:open', clientId);
      return this._connections[clientId];
    },
    closeConnection: function closeConnection(clientId) {
      this.debug('Closing connection for ?', clientId);
      var conn = this._connections[clientId];
      if (!conn) return;
      if (conn.socket) conn.socket.close();
      this.trigger('connection:close', clientId);
      delete this._connections[clientId];
    },
    openSocket: function openSocket(clientId, socket) {
      var conn = this.connection(clientId, true);
      conn.socket = socket;
    },
    deliver: function deliver(clientId, messages) {
      if (!messages || messages.length === 0) return false;
      var conn = this.connection(clientId, false);
      if (!conn) return false;
      for (var i = 0, n = messages.length; i < n; i++) {
        conn.deliver(messages[i]);
      }
      return true;
    },
    generateId: function generateId() {
      return random();
    },
    flushConnection: function flushConnection(clientId, close) {
      if (!clientId) return;
      this.debug('Flushing connection for ?', clientId);
      var conn = this.connection(clientId, false);
      if (!conn) return;
      if (close === false) conn.socket = null;
      conn.flush();
      this.closeConnection(clientId);
    },
    close: function close() {
      for (var clientId in this._connections) this.flushConnection(clientId);
      this._engine.disconnect();
    },
    disconnect: function disconnect() {
      if (this._engine.disconnect) return this._engine.disconnect();
    },
    publish: function publish(message) {
      var channels = Channel$2.expand(message.channel);
      return this._engine.publish(message, channels);
    }
  }), {
    get: function get(options) {
      return new Proxy$2(options);
    }
  });
  var METHODS = ['createClient', 'clientExists', 'destroyClient', 'ping', 'subscribe', 'unsubscribe'];
  METHODS.forEach(function (method) {
    Proxy$2.prototype[method] = function () {
      return this._engine[method].apply(this._engine, arguments);
    };
  });
  assign$8(Proxy$2.prototype, Publisher$3);
  assign$8(Proxy$2.prototype, Logging$6);
  var proxy$1 = Proxy$2;

  var Class$8 = _class,
    Grammar$1 = grammar;
  var Error$3 = Class$8({
    initialize: function initialize(code, params, message) {
      this.code = code;
      this.params = Array.prototype.slice.call(params);
      this.message = message;
    },
    toString: function toString() {
      return this.code + ':' + this.params.join(',') + ':' + this.message;
    }
  });
  Error$3.parse = function (message) {
    message = message || '';
    if (!Grammar$1.ERROR.test(message)) return new Error$3(null, [], message);
    var parts = message.split(':'),
      code = parseInt(parts[0]),
      params = parts[1].split(','),
      message = parts[2];
    return new Error$3(code, params, message);
  };

  // http://code.google.com/p/cometd/wiki/BayeuxCodes
  var errors = {
    versionMismatch: [300, 'Version mismatch'],
    conntypeMismatch: [301, 'Connection types not supported'],
    extMismatch: [302, 'Extension mismatch'],
    badRequest: [400, 'Bad request'],
    clientUnknown: [401, 'Unknown client'],
    parameterMissing: [402, 'Missing required parameter'],
    channelForbidden: [403, 'Forbidden channel'],
    channelUnknown: [404, 'Unknown channel'],
    channelInvalid: [405, 'Invalid channel'],
    extUnknown: [406, 'Unknown extension'],
    publishFailed: [407, 'Failed to publish'],
    serverError: [500, 'Internal server error']
  };
  for (var name in errors) (function (name) {
    Error$3[name] = function () {
      return new Error$3(errors[name][0], arguments, errors[name][1]).toString();
    };
  })(name);
  var error = Error$3;

  var assign$7 = assign$f,
    Logging$5 = logging;
  var Extensible$2 = {
    addExtension: function addExtension(extension) {
      this._extensions = this._extensions || [];
      this._extensions.push(extension);
      if (extension.added) extension.added(this);
    },
    removeExtension: function removeExtension(extension) {
      if (!this._extensions) return;
      var i = this._extensions.length;
      while (i--) {
        if (this._extensions[i] !== extension) continue;
        this._extensions.splice(i, 1);
        if (extension.removed) extension.removed(this);
      }
    },
    pipeThroughExtensions: function pipeThroughExtensions(stage, message, request, callback, context) {
      this.debug('Passing through ? extensions: ?', stage, message);
      if (!this._extensions) return callback.call(context, message);
      var extensions = this._extensions.slice();
      var pipe = function pipe(message) {
        if (!message) return callback.call(context, message);
        var extension = extensions.shift();
        if (!extension) return callback.call(context, message);
        var fn = extension[stage];
        if (!fn) return pipe(message);
        if (fn.length >= 3) extension[stage](message, request, pipe);else extension[stage](message, pipe);
      };
      pipe(message);
    }
  };
  assign$7(Extensible$2, Logging$5);
  var extensible = Extensible$2;

  var Class$7 = _class,
    toJSON$1 = to_json;
  var socket = Class$7({
    initialize: function initialize(server, socket, request) {
      this._server = server;
      this._socket = socket;
      this._request = request;
    },
    send: function send(message) {
      this._server.pipeThroughExtensions('outgoing', message, this._request, function (pipedMessage) {
        if (this._socket) this._socket.send(toJSON$1([pipedMessage]));
      }, this);
    },
    close: function close() {
      if (this._socket) this._socket.close();
      delete this._socket;
    }
  });

  var Class$6 = _class,
    array$2 = array$5,
    assign$6 = assign$f,
    constants$3 = constants$5,
    Logging$4 = logging,
    Engine = proxy$1,
    Channel$1 = channel,
    Error$2 = error,
    Extensible$1 = extensible,
    Grammar = grammar,
    Socket = socket;
  var Server$3 = Class$6({
    className: 'Server',
    initialize: function initialize(options) {
      this._options = options || {};
      var engineOpts = this._options.engine || {};
      engineOpts.timeout = this._options.timeout;
      this._engine = Engine.get(engineOpts);
      this.info('Created new server: ?', this._options);
    },
    close: function close() {
      return this._engine.close();
    },
    openSocket: function openSocket(clientId, socket, request) {
      if (!clientId || !socket) return;
      this._engine.openSocket(clientId, new Socket(this, socket, request));
    },
    closeSocket: function closeSocket(clientId, close) {
      this._engine.flushConnection(clientId, close);
    },
    process: function process(messages, request, callback, context) {
      var local = request === null;
      messages = [].concat(messages);
      this.info('Processing messages: ? (local: ?)', messages, local);
      if (messages.length === 0) return callback.call(context, []);
      var processed = 0,
        responses = [],
        self = this;
      var gatherReplies = function gatherReplies(replies) {
        responses = responses.concat(replies);
        processed += 1;
        if (processed < messages.length) return;
        var n = responses.length;
        while (n--) {
          if (!responses[n]) responses.splice(n, 1);
        }
        self.info('Returning replies: ?', responses);
        callback.call(context, responses);
      };
      var handleReply = function handleReply(replies) {
        var assigned = 0,
          expected = replies.length;
        if (expected === 0) gatherReplies(replies);
        for (var i = 0, n = replies.length; i < n; i++) {
          this.debug('Processing reply: ?', replies[i]);
          (function (index) {
            self.pipeThroughExtensions('outgoing', replies[index], request, function (message) {
              replies[index] = message;
              assigned += 1;
              if (assigned === expected) gatherReplies(replies);
            });
          })(i);
        }
      };
      for (var i = 0, n = messages.length; i < n; i++) {
        this.pipeThroughExtensions('incoming', messages[i], request, function (pipedMessage) {
          this._handle(pipedMessage, local, handleReply, this);
        }, this);
      }
    },
    _makeResponse: function _makeResponse(message) {
      var response = {};
      if (message.id) response.id = message.id;
      if (message.clientId) response.clientId = message.clientId;
      if (message.channel) response.channel = message.channel;
      if (message.error) response.error = message.error;
      response.successful = !response.error;
      return response;
    },
    _handle: function _handle(message, local, callback, context) {
      if (!message) return callback.call(context, []);
      this.info('Handling message: ? (local: ?)', message, local);
      var channelName = message.channel,
        error = message.error,
        response;
      if (Channel$1.isMeta(channelName)) return this._handleMeta(message, local, callback, context);
      if (!Grammar.CHANNEL_NAME.test(channelName)) error = Error$2.channelInvalid(channelName);
      if (message.data === undefined) error = Error$2.parameterMissing('data');
      if (!error) this._engine.publish(message);
      response = this._makeResponse(message);
      if (error) response.error = error;
      response.successful = !response.error;
      callback.call(context, [response]);
    },
    _handleMeta: function _handleMeta(message, local, callback, context) {
      var method = this._methodFor(message),
        response;
      if (method === null) {
        response = this._makeResponse(message);
        response.error = Error$2.channelForbidden(message.channel);
        response.successful = false;
        return callback.call(context, [response]);
      }
      this[method](message, local, function (responses) {
        responses = [].concat(responses);
        for (var i = 0, n = responses.length; i < n; i++) this._advize(responses[i], message.connectionType);
        callback.call(context, responses);
      }, this);
    },
    _methodFor: function _methodFor(message) {
      var channel = message.channel;
      if (channel === Channel$1.HANDSHAKE) return 'handshake';
      if (channel === Channel$1.CONNECT) return 'connect';
      if (channel === Channel$1.SUBSCRIBE) return 'subscribe';
      if (channel === Channel$1.UNSUBSCRIBE) return 'unsubscribe';
      if (channel === Channel$1.DISCONNECT) return 'disconnect';
      return null;
    },
    _advize: function _advize(response, connectionType) {
      if (array$2.indexOf([Channel$1.HANDSHAKE, Channel$1.CONNECT], response.channel) < 0) return;
      var interval, timeout;
      if (connectionType === 'eventsource') {
        interval = Math.floor(this._engine.timeout * 1000);
        timeout = 0;
      } else {
        interval = Math.floor(this._engine.interval * 1000);
        timeout = Math.floor(this._engine.timeout * 1000);
      }
      response.advice = response.advice || {};
      if (response.error) {
        assign$6(response.advice, {
          reconnect: 'handshake'
        }, false);
      } else {
        assign$6(response.advice, {
          reconnect: 'retry',
          interval: interval,
          timeout: timeout
        }, false);
      }
    },
    // MUST contain  * version
    //               * supportedConnectionTypes
    // MAY contain   * minimumVersion
    //               * ext
    //               * id
    handshake: function handshake(message, local, callback, context) {
      var response = this._makeResponse(message);
      response.version = constants$3.BAYEUX_VERSION;
      if (!message.version) response.error = Error$2.parameterMissing('version');
      var clientConns = message.supportedConnectionTypes,
        commonConns;
      response.supportedConnectionTypes = constants$3.CONNECTION_TYPES;
      if (clientConns) {
        commonConns = array$2.filter(clientConns, function (conn) {
          return array$2.indexOf(constants$3.CONNECTION_TYPES, conn) >= 0;
        });
        if (commonConns.length === 0) response.error = Error$2.conntypeMismatch(clientConns);
      } else {
        response.error = Error$2.parameterMissing('supportedConnectionTypes');
      }
      response.successful = !response.error;
      if (!response.successful) return callback.call(context, response);
      this._engine.createClient(function (clientId) {
        response.clientId = clientId;
        callback.call(context, response);
      }, this);
    },
    // MUST contain  * clientId
    //               * connectionType
    // MAY contain   * ext
    //               * id
    connect: function connect(message, local, callback, context) {
      var response = this._makeResponse(message),
        clientId = message.clientId,
        connectionType = message.connectionType;
      this._engine.clientExists(clientId, function (exists) {
        if (!exists) response.error = Error$2.clientUnknown(clientId);
        if (!clientId) response.error = Error$2.parameterMissing('clientId');
        if (array$2.indexOf(constants$3.CONNECTION_TYPES, connectionType) < 0) response.error = Error$2.conntypeMismatch(connectionType);
        if (!connectionType) response.error = Error$2.parameterMissing('connectionType');
        response.successful = !response.error;
        if (!response.successful) {
          delete response.clientId;
          return callback.call(context, response);
        }
        if (message.connectionType === 'eventsource') {
          message.advice = message.advice || {};
          message.advice.timeout = 0;
        }
        this._engine.connect(response.clientId, message.advice, function (events) {
          callback.call(context, [response].concat(events));
        });
      }, this);
    },
    // MUST contain  * clientId
    // MAY contain   * ext
    //               * id
    disconnect: function disconnect(message, local, callback, context) {
      var response = this._makeResponse(message),
        clientId = message.clientId;
      this._engine.clientExists(clientId, function (exists) {
        if (!exists) response.error = Error$2.clientUnknown(clientId);
        if (!clientId) response.error = Error$2.parameterMissing('clientId');
        response.successful = !response.error;
        if (!response.successful) delete response.clientId;
        if (response.successful) this._engine.destroyClient(clientId);
        callback.call(context, response);
      }, this);
    },
    // MUST contain  * clientId
    //               * subscription
    // MAY contain   * ext
    //               * id
    subscribe: function subscribe(message, local, callback, context) {
      var response = this._makeResponse(message),
        clientId = message.clientId,
        subscription = message.subscription,
        channel;
      subscription = subscription ? [].concat(subscription) : [];
      this._engine.clientExists(clientId, function (exists) {
        if (!exists) response.error = Error$2.clientUnknown(clientId);
        if (!clientId) response.error = Error$2.parameterMissing('clientId');
        if (!message.subscription) response.error = Error$2.parameterMissing('subscription');
        response.subscription = message.subscription || [];
        for (var i = 0, n = subscription.length; i < n; i++) {
          channel = subscription[i];
          if (response.error) break;
          if (!local && !Channel$1.isSubscribable(channel)) response.error = Error$2.channelForbidden(channel);
          if (!Channel$1.isValid(channel)) response.error = Error$2.channelInvalid(channel);
          if (response.error) break;
          this._engine.subscribe(clientId, channel);
        }
        response.successful = !response.error;
        callback.call(context, response);
      }, this);
    },
    // MUST contain  * clientId
    //               * subscription
    // MAY contain   * ext
    //               * id
    unsubscribe: function unsubscribe(message, local, callback, context) {
      var response = this._makeResponse(message),
        clientId = message.clientId,
        subscription = message.subscription,
        channel;
      subscription = subscription ? [].concat(subscription) : [];
      this._engine.clientExists(clientId, function (exists) {
        if (!exists) response.error = Error$2.clientUnknown(clientId);
        if (!clientId) response.error = Error$2.parameterMissing('clientId');
        if (!message.subscription) response.error = Error$2.parameterMissing('subscription');
        response.subscription = message.subscription || [];
        for (var i = 0, n = subscription.length; i < n; i++) {
          channel = subscription[i];
          if (response.error) break;
          if (!local && !Channel$1.isSubscribable(channel)) response.error = Error$2.channelForbidden(channel);
          if (!Channel$1.isValid(channel)) response.error = Error$2.channelInvalid(channel);
          if (response.error) break;
          this._engine.unsubscribe(clientId, channel);
        }
        response.successful = !response.error;
        callback.call(context, response);
      }, this);
    }
  });
  Server$3.create = function (options) {
    return new Server$3(options);
  };
  assign$6(Server$3.prototype, Logging$4);
  assign$6(Server$3.prototype, Extensible$1);
  var server$1 = Server$3;

  var node_local;
  var hasRequiredNode_local;
  function requireNode_local() {
    if (hasRequiredNode_local) return node_local;
    hasRequiredNode_local = 1;
    var asap = asap_1,
      Class = _class,
      copyObject = copy_object,
      assign = assign$f,
      Server = server$1,
      Transport = transport;
    var NodeLocal = assign(Class(Transport, {
      batching: false,
      request: function request(messages) {
        messages = copyObject(messages);
        var self = this;
        asap(function () {
          self.endpoint.process(messages, null, function (replies) {
            self._receive(copyObject(replies));
          });
        });
      }
    }), {
      isUsable: function isUsable(client, endpoint, callback, context) {
        callback.call(context, endpoint instanceof Server);
      }
    });
    node_local = NodeLocal;
    return node_local;
  }

  var safeBuffer = {exports: {}};

  /*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
  (function (module, exports) {
    /* eslint-disable node/no-deprecated-api */
    var buffer = require$$0$a;
    var Buffer = buffer.Buffer;

    // alternative to using Object.keys for old browsers
    function copyProps(src, dst) {
      for (var key in src) {
        dst[key] = src[key];
      }
    }
    if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
      module.exports = buffer;
    } else {
      // Copy properties from require('buffer')
      copyProps(buffer, exports);
      exports.Buffer = SafeBuffer;
    }
    function SafeBuffer(arg, encodingOrOffset, length) {
      return Buffer(arg, encodingOrOffset, length);
    }
    SafeBuffer.prototype = Object.create(Buffer.prototype);

    // Copy static methods from Buffer
    copyProps(Buffer, SafeBuffer);
    SafeBuffer.from = function (arg, encodingOrOffset, length) {
      if (typeof arg === 'number') {
        throw new TypeError('Argument must not be a number');
      }
      return Buffer(arg, encodingOrOffset, length);
    };
    SafeBuffer.alloc = function (size, fill, encoding) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number');
      }
      var buf = Buffer(size);
      if (fill !== undefined) {
        if (typeof encoding === 'string') {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }
      return buf;
    };
    SafeBuffer.allocUnsafe = function (size) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number');
      }
      return Buffer(size);
    };
    SafeBuffer.allocUnsafeSlow = function (size) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number');
      }
      return buffer.SlowBuffer(size);
    };
  })(safeBuffer, safeBuffer.exports);
  var safeBufferExports = safeBuffer.exports;

  var streams$1 = {};

  /**

  Streams in a WebSocket connection
  ---------------------------------

  We model a WebSocket as two duplex streams: one stream is for the wire protocol
  over an I/O socket, and the other is for incoming/outgoing messages.


                          +----------+      +---------+      +----------+
      [1] write(chunk) -->| ~~~~~~~~ +----->| parse() +----->| ~~~~~~~~ +--> emit('data') [2]
                          |          |      +----+----+      |          |
                          |          |           |           |          |
                          |    IO    |           | [5]       | Messages |
                          |          |           V           |          |
                          |          |      +---------+      |          |
      [4] emit('data') <--+ ~~~~~~~~ |<-----+ frame() |<-----+ ~~~~~~~~ |<-- write(chunk) [3]
                          +----------+      +---------+      +----------+


  Message transfer in each direction is simple: IO receives a byte stream [1] and
  sends this stream for parsing. The parser will periodically emit a complete
  message text on the Messages stream [2]. Similarly, when messages are written
  to the Messages stream [3], they are framed using the WebSocket wire format and
  emitted via IO [4].

  There is a feedback loop via [5] since some input from [1] will be things like
  ping, pong and close frames. In these cases the protocol responds by emitting
  responses directly back to [4] rather than emitting messages via [2].

  For the purposes of flow control, we consider the sources of each Readable
  stream to be as follows:

  * [2] receives input from [1]
  * [4] receives input from [1] and [3]

  The classes below express the relationships described above without prescribing
  anything about how parse() and frame() work, other than assuming they emit
  'data' events to the IO and Messages streams. They will work with any protocol
  driver having these two methods.
  **/

  var Stream$2 = require$$0$3.Stream,
    util$a = require$$1$3;
  var IO = function IO(driver) {
    this.readable = this.writable = true;
    this._paused = false;
    this._driver = driver;
  };
  util$a.inherits(IO, Stream$2);

  // The IO pause() and resume() methods will be called when the socket we are
  // piping to gets backed up and drains. Since IO output [4] comes from IO input
  // [1] and Messages input [3], we need to tell both of those to return false
  // from write() when this stream is paused.

  IO.prototype.pause = function () {
    this._paused = true;
    this._driver.messages._paused = true;
  };
  IO.prototype.resume = function () {
    this._paused = false;
    this.emit('drain');
    var messages = this._driver.messages;
    messages._paused = false;
    messages.emit('drain');
  };

  // When we receive input from a socket, send it to the parser and tell the
  // source whether to back off.
  IO.prototype.write = function (chunk) {
    if (!this.writable) return false;
    this._driver.parse(chunk);
    return !this._paused;
  };

  // The IO end() method will be called when the socket piping into it emits
  // 'close' or 'end', i.e. the socket is closed. In this situation the Messages
  // stream will not emit any more data so we emit 'end'.
  IO.prototype.end = function (chunk) {
    if (!this.writable) return;
    if (chunk !== undefined) this.write(chunk);
    this.writable = false;
    var messages = this._driver.messages;
    if (messages.readable) {
      messages.readable = messages.writable = false;
      messages.emit('end');
    }
  };
  IO.prototype.destroy = function () {
    this.end();
  };
  var Messages = function Messages(driver) {
    this.readable = this.writable = true;
    this._paused = false;
    this._driver = driver;
  };
  util$a.inherits(Messages, Stream$2);

  // The Messages pause() and resume() methods will be called when the app that's
  // processing the messages gets backed up and drains. If we're emitting
  // messages too fast we should tell the source to slow down. Message output [2]
  // comes from IO input [1].

  Messages.prototype.pause = function () {
    this._driver.io._paused = true;
  };
  Messages.prototype.resume = function () {
    this._driver.io._paused = false;
    this._driver.io.emit('drain');
  };

  // When we receive messages from the user, send them to the formatter and tell
  // the source whether to back off.
  Messages.prototype.write = function (message) {
    if (!this.writable) return false;
    if (typeof message === 'string') this._driver.text(message);else this._driver.binary(message);
    return !this._paused;
  };

  // The Messages end() method will be called when a stream piping into it emits
  // 'end'. Many streams may be piped into the WebSocket and one of them ending
  // does not mean the whole socket is done, so just process the input and move
  // on leaving the socket open.
  Messages.prototype.end = function (message) {
    if (message !== undefined) this.write(message);
  };
  Messages.prototype.destroy = function () {};
  streams$1.IO = IO;
  streams$1.Messages = Messages;

  var headers;
  var hasRequiredHeaders;
  function requireHeaders() {
    if (hasRequiredHeaders) return headers;
    hasRequiredHeaders = 1;
    var Headers = function Headers() {
      this.clear();
    };
    Headers.prototype.ALLOWED_DUPLICATES = ['set-cookie', 'set-cookie2', 'warning', 'www-authenticate'];
    Headers.prototype.clear = function () {
      this._sent = {};
      this._lines = [];
    };
    Headers.prototype.set = function (name, value) {
      if (value === undefined) return;
      name = this._strip(name);
      value = this._strip(value);
      var key = name.toLowerCase();
      if (!this._sent.hasOwnProperty(key) || this.ALLOWED_DUPLICATES.indexOf(key) >= 0) {
        this._sent[key] = true;
        this._lines.push(name + ': ' + value + '\r\n');
      }
    };
    Headers.prototype.toString = function () {
      return this._lines.join('');
    };
    Headers.prototype._strip = function (string) {
      return string.toString().replace(/^ */, '').replace(/ *$/, '');
    };
    headers = Headers;
    return headers;
  }

  var Buffer$a = safeBufferExports.Buffer;
  var StreamReader = function StreamReader() {
    this._queue = [];
    this._queueSize = 0;
    this._offset = 0;
  };
  StreamReader.prototype.put = function (buffer) {
    if (!buffer || buffer.length === 0) return;
    if (!Buffer$a.isBuffer(buffer)) buffer = Buffer$a.from(buffer);
    this._queue.push(buffer);
    this._queueSize += buffer.length;
  };
  StreamReader.prototype.read = function (length) {
    if (length > this._queueSize) return null;
    if (length === 0) return Buffer$a.alloc(0);
    this._queueSize -= length;
    var queue = this._queue,
      remain = length,
      first = queue[0],
      buffers,
      buffer;
    if (first.length >= length) {
      if (first.length === length) {
        return queue.shift();
      } else {
        buffer = first.slice(0, length);
        queue[0] = first.slice(length);
        return buffer;
      }
    }
    for (var i = 0, n = queue.length; i < n; i++) {
      if (remain < queue[i].length) break;
      remain -= queue[i].length;
    }
    buffers = queue.splice(0, i);
    if (remain > 0 && queue.length > 0) {
      buffers.push(queue[0].slice(0, remain));
      queue[0] = queue[0].slice(remain);
    }
    return Buffer$a.concat(buffers, length);
  };
  StreamReader.prototype.eachByte = function (callback, context) {
    var buffer, n, index;
    while (this._queue.length > 0) {
      buffer = this._queue[0];
      n = buffer.length;
      while (this._offset < n) {
        index = this._offset;
        this._offset += 1;
        callback.call(context, buffer[index]);
      }
      this._offset = 0;
      this._queue.shift();
    }
  };
  var stream_reader = StreamReader;

  var Buffer$9 = safeBufferExports.Buffer,
    Emitter = require$$0$6.EventEmitter,
    util$9 = require$$1$3,
    streams = streams$1,
    Headers$1 = requireHeaders(),
    Reader = stream_reader;
  var Base$7 = function Base(request, url, options) {
    Emitter.call(this);
    Base.validateOptions(options || {}, ['maxLength', 'masking', 'requireMasking', 'protocols']);
    this._request = request;
    this._reader = new Reader();
    this._options = options || {};
    this._maxLength = this._options.maxLength || this.MAX_LENGTH;
    this._headers = new Headers$1();
    this.__queue = [];
    this.readyState = 0;
    this.url = url;
    this.io = new streams.IO(this);
    this.messages = new streams.Messages(this);
    this._bindEventListeners();
  };
  util$9.inherits(Base$7, Emitter);
  Base$7.isWebSocket = function (request) {
    var connection = request.headers.connection || '',
      upgrade = request.headers.upgrade || '';
    return request.method === 'GET' && connection.toLowerCase().split(/ *, */).indexOf('upgrade') >= 0 && upgrade.toLowerCase() === 'websocket';
  };
  Base$7.validateOptions = function (options, validKeys) {
    for (var key in options) {
      if (validKeys.indexOf(key) < 0) throw new Error('Unrecognized option: ' + key);
    }
  };
  var instance$a = {
    // This is 64MB, small enough for an average VPS to handle without
    // crashing from process out of memory
    MAX_LENGTH: 0x3ffffff,
    STATES: ['connecting', 'open', 'closing', 'closed'],
    _bindEventListeners: function _bindEventListeners() {
      var self = this;

      // Protocol errors are informational and do not have to be handled
      this.messages.on('error', function () {});
      this.on('message', function (event) {
        var messages = self.messages;
        if (messages.readable) messages.emit('data', event.data);
      });
      this.on('error', function (error) {
        var messages = self.messages;
        if (messages.readable) messages.emit('error', error);
      });
      this.on('close', function () {
        var messages = self.messages;
        if (!messages.readable) return;
        messages.readable = messages.writable = false;
        messages.emit('end');
      });
    },
    getState: function getState() {
      return this.STATES[this.readyState] || null;
    },
    addExtension: function addExtension(extension) {
      return false;
    },
    setHeader: function setHeader(name, value) {
      if (this.readyState > 0) return false;
      this._headers.set(name, value);
      return true;
    },
    start: function start() {
      if (this.readyState !== 0) return false;
      if (!Base$7.isWebSocket(this._request)) return this._failHandshake(new Error('Not a WebSocket request'));
      var response;
      try {
        response = this._handshakeResponse();
      } catch (error) {
        return this._failHandshake(error);
      }
      this._write(response);
      if (this._stage !== -1) this._open();
      return true;
    },
    _failHandshake: function _failHandshake(error) {
      var headers = new Headers$1();
      headers.set('Content-Type', 'text/plain');
      headers.set('Content-Length', Buffer$9.byteLength(error.message, 'utf8'));
      headers = ['HTTP/1.1 400 Bad Request', headers.toString(), error.message];
      this._write(Buffer$9.from(headers.join('\r\n'), 'utf8'));
      this._fail('protocol_error', error.message);
      return false;
    },
    text: function text(message) {
      return this.frame(message);
    },
    binary: function binary(message) {
      return false;
    },
    ping: function ping() {
      return false;
    },
    pong: function pong() {
      return false;
    },
    close: function close(reason, code) {
      if (this.readyState !== 1) return false;
      this.readyState = 3;
      this.emit('close', new Base$7.CloseEvent(null, null));
      return true;
    },
    _open: function _open() {
      this.readyState = 1;
      this.__queue.forEach(function (args) {
        this.frame.apply(this, args);
      }, this);
      this.__queue = [];
      this.emit('open', new Base$7.OpenEvent());
    },
    _queue: function _queue(message) {
      this.__queue.push(message);
      return true;
    },
    _write: function _write(chunk) {
      var io = this.io;
      if (io.readable) io.emit('data', chunk);
    },
    _fail: function _fail(type, message) {
      this.readyState = 2;
      this.emit('error', new Error(message));
      this.close();
    }
  };
  for (var key$a in instance$a) Base$7.prototype[key$a] = instance$a[key$a];
  Base$7.ConnectEvent = function () {};
  Base$7.OpenEvent = function () {};
  Base$7.CloseEvent = function (code, reason) {
    this.code = code;
    this.reason = reason;
  };
  Base$7.MessageEvent = function (data) {
    this.data = data;
  };
  Base$7.PingEvent = function (data) {
    this.data = data;
  };
  Base$7.PongEvent = function (data) {
    this.data = data;
  };
  var base = Base$7;

  var httpParser = {};

  /*jshint node:true */
  var assert = require$$3;
  httpParser.HTTPParser = HTTPParser;
  function HTTPParser(type) {
    assert.ok(type === HTTPParser.REQUEST || type === HTTPParser.RESPONSE || type === undefined);
    if (type === undefined) ; else {
      this.initialize(type);
    }
    this.maxHeaderSize = HTTPParser.maxHeaderSize;
  }
  HTTPParser.prototype.initialize = function (type, async_resource) {
    assert.ok(type === HTTPParser.REQUEST || type === HTTPParser.RESPONSE);
    this.type = type;
    this.state = type + '_LINE';
    this.info = {
      headers: [],
      upgrade: false
    };
    this.trailers = [];
    this.line = '';
    this.isChunked = false;
    this.connection = '';
    this.headerSize = 0; // for preventing too big headers
    this.body_bytes = null;
    this.isUserCall = false;
    this.hadError = false;
  };
  HTTPParser.encoding = 'ascii';
  HTTPParser.maxHeaderSize = 80 * 1024; // maxHeaderSize (in bytes) is configurable, but 80kb by default;
  HTTPParser.REQUEST = 'REQUEST';
  HTTPParser.RESPONSE = 'RESPONSE';

  // Note: *not* starting with kOnHeaders=0 line the Node parser, because any
  //   newly added constants (kOnTimeout in Node v12.19.0) will overwrite 0!
  var kOnHeaders = HTTPParser.kOnHeaders = 1;
  var kOnHeadersComplete = HTTPParser.kOnHeadersComplete = 2;
  var kOnBody = HTTPParser.kOnBody = 3;
  var kOnMessageComplete = HTTPParser.kOnMessageComplete = 4;

  // Some handler stubs, needed for compatibility
  HTTPParser.prototype[kOnHeaders] = HTTPParser.prototype[kOnHeadersComplete] = HTTPParser.prototype[kOnBody] = HTTPParser.prototype[kOnMessageComplete] = function () {};
  var compatMode0_12 = true;
  Object.defineProperty(HTTPParser, 'kOnExecute', {
    get: function get() {
      // hack for backward compatibility
      compatMode0_12 = false;
      return 99;
    }
  });
  var methods = httpParser.methods = HTTPParser.methods = ['DELETE', 'GET', 'HEAD', 'POST', 'PUT', 'CONNECT', 'OPTIONS', 'TRACE', 'COPY', 'LOCK', 'MKCOL', 'MOVE', 'PROPFIND', 'PROPPATCH', 'SEARCH', 'UNLOCK', 'BIND', 'REBIND', 'UNBIND', 'ACL', 'REPORT', 'MKACTIVITY', 'CHECKOUT', 'MERGE', 'M-SEARCH', 'NOTIFY', 'SUBSCRIBE', 'UNSUBSCRIBE', 'PATCH', 'PURGE', 'MKCALENDAR', 'LINK', 'UNLINK', 'SOURCE'];
  var method_connect = methods.indexOf('CONNECT');
  HTTPParser.prototype.reinitialize = HTTPParser;
  HTTPParser.prototype.close = HTTPParser.prototype.pause = HTTPParser.prototype.resume = HTTPParser.prototype.free = function () {};
  HTTPParser.prototype._compatMode0_11 = false;
  HTTPParser.prototype.getAsyncId = function () {
    return 0;
  };
  var headerState = {
    REQUEST_LINE: true,
    RESPONSE_LINE: true,
    HEADER: true
  };
  HTTPParser.prototype.execute = function (chunk, start, length) {
    if (!(this instanceof HTTPParser)) {
      throw new TypeError('not a HTTPParser');
    }

    // backward compat to node < 0.11.4
    // Note: the start and length params were removed in newer version
    start = start || 0;
    length = typeof length === 'number' ? length : chunk.length;
    this.chunk = chunk;
    this.offset = start;
    var end = this.end = start + length;
    try {
      while (this.offset < end) {
        if (this[this.state]()) {
          break;
        }
      }
    } catch (err) {
      if (this.isUserCall) {
        throw err;
      }
      this.hadError = true;
      return err;
    }
    this.chunk = null;
    length = this.offset - start;
    if (headerState[this.state]) {
      this.headerSize += length;
      if (this.headerSize > (this.maxHeaderSize || HTTPParser.maxHeaderSize)) {
        return new Error('max header size exceeded');
      }
    }
    return length;
  };
  var stateFinishAllowed = {
    REQUEST_LINE: true,
    RESPONSE_LINE: true,
    BODY_RAW: true
  };
  HTTPParser.prototype.finish = function () {
    if (this.hadError) {
      return;
    }
    if (!stateFinishAllowed[this.state]) {
      return new Error('invalid state for EOF');
    }
    if (this.state === 'BODY_RAW') {
      this.userCall()(this[kOnMessageComplete]());
    }
  };

  // These three methods are used for an internal speed optimization, and it also
  // works if theses are noops. Basically consume() asks us to read the bytes
  // ourselves, but if we don't do it we get them through execute().
  HTTPParser.prototype.consume = HTTPParser.prototype.unconsume = HTTPParser.prototype.getCurrentBuffer = function () {};

  //For correct error handling - see HTTPParser#execute
  //Usage: this.userCall()(userFunction('arg'));
  HTTPParser.prototype.userCall = function () {
    this.isUserCall = true;
    var self = this;
    return function (ret) {
      self.isUserCall = false;
      return ret;
    };
  };
  HTTPParser.prototype.nextRequest = function () {
    this.userCall()(this[kOnMessageComplete]());
    this.reinitialize(this.type);
  };
  HTTPParser.prototype.consumeLine = function () {
    var end = this.end,
      chunk = this.chunk;
    for (var i = this.offset; i < end; i++) {
      if (chunk[i] === 0x0a) {
        // \n
        var line = this.line + chunk.toString(HTTPParser.encoding, this.offset, i);
        if (line.charAt(line.length - 1) === '\r') {
          line = line.substr(0, line.length - 1);
        }
        this.line = '';
        this.offset = i + 1;
        return line;
      }
    }
    //line split over multiple chunks
    this.line += chunk.toString(HTTPParser.encoding, this.offset, this.end);
    this.offset = this.end;
  };
  var headerExp = /^([^: \t]+):[ \t]*((?:.*[^ \t])|)/;
  var headerContinueExp = /^[ \t]+(.*[^ \t])/;
  HTTPParser.prototype.parseHeader = function (line, headers) {
    if (line.indexOf('\r') !== -1) {
      throw parseErrorCode('HPE_LF_EXPECTED');
    }
    var match = headerExp.exec(line);
    var k = match && match[1];
    if (k) {
      // skip empty string (malformed header)
      headers.push(k);
      headers.push(match[2]);
    } else {
      var matchContinue = headerContinueExp.exec(line);
      if (matchContinue && headers.length) {
        if (headers[headers.length - 1]) {
          headers[headers.length - 1] += ' ';
        }
        headers[headers.length - 1] += matchContinue[1];
      }
    }
  };
  var requestExp = /^([A-Z-]+) ([^ ]+) HTTP\/(\d)\.(\d)$/;
  HTTPParser.prototype.REQUEST_LINE = function () {
    var line = this.consumeLine();
    if (!line) {
      return;
    }
    var match = requestExp.exec(line);
    if (match === null) {
      throw parseErrorCode('HPE_INVALID_CONSTANT');
    }
    this.info.method = this._compatMode0_11 ? match[1] : methods.indexOf(match[1]);
    if (this.info.method === -1) {
      throw new Error('invalid request method');
    }
    this.info.url = match[2];
    this.info.versionMajor = +match[3];
    this.info.versionMinor = +match[4];
    this.body_bytes = 0;
    this.state = 'HEADER';
  };
  var responseExp = /^HTTP\/(\d)\.(\d) (\d{3}) ?(.*)$/;
  HTTPParser.prototype.RESPONSE_LINE = function () {
    var line = this.consumeLine();
    if (!line) {
      return;
    }
    var match = responseExp.exec(line);
    if (match === null) {
      throw parseErrorCode('HPE_INVALID_CONSTANT');
    }
    this.info.versionMajor = +match[1];
    this.info.versionMinor = +match[2];
    var statusCode = this.info.statusCode = +match[3];
    this.info.statusMessage = match[4];
    // Implied zero length.
    if ((statusCode / 100 | 0) === 1 || statusCode === 204 || statusCode === 304) {
      this.body_bytes = 0;
    }
    this.state = 'HEADER';
  };
  HTTPParser.prototype.shouldKeepAlive = function () {
    if (this.info.versionMajor > 0 && this.info.versionMinor > 0) {
      if (this.connection.indexOf('close') !== -1) {
        return false;
      }
    } else if (this.connection.indexOf('keep-alive') === -1) {
      return false;
    }
    if (this.body_bytes !== null || this.isChunked) {
      // || skipBody
      return true;
    }
    return false;
  };
  HTTPParser.prototype.HEADER = function () {
    var line = this.consumeLine();
    if (line === undefined) {
      return;
    }
    var info = this.info;
    if (line) {
      this.parseHeader(line, info.headers);
    } else {
      var headers = info.headers;
      var hasContentLength = false;
      var currentContentLengthValue;
      var hasUpgradeHeader = false;
      for (var i = 0; i < headers.length; i += 2) {
        switch (headers[i].toLowerCase()) {
          case 'transfer-encoding':
            this.isChunked = headers[i + 1].toLowerCase() === 'chunked';
            break;
          case 'content-length':
            currentContentLengthValue = +headers[i + 1];
            if (hasContentLength) {
              // Fix duplicate Content-Length header with same values.
              // Throw error only if values are different.
              // Known issues:
              // https://github.com/request/request/issues/2091#issuecomment-328715113
              // https://github.com/nodejs/node/issues/6517#issuecomment-216263771
              if (currentContentLengthValue !== this.body_bytes) {
                throw parseErrorCode('HPE_UNEXPECTED_CONTENT_LENGTH');
              }
            } else {
              hasContentLength = true;
              this.body_bytes = currentContentLengthValue;
            }
            break;
          case 'connection':
            this.connection += headers[i + 1].toLowerCase();
            break;
          case 'upgrade':
            hasUpgradeHeader = true;
            break;
        }
      }

      // if both isChunked and hasContentLength, isChunked wins
      // This is required so the body is parsed using the chunked method, and matches
      // Chrome's behavior.  We could, maybe, ignore them both (would get chunked
      // encoding into the body), and/or disable shouldKeepAlive to be more
      // resilient.
      if (this.isChunked && hasContentLength) {
        hasContentLength = false;
        this.body_bytes = null;
      }

      // Logic from https://github.com/nodejs/http-parser/blob/921d5585515a153fa00e411cf144280c59b41f90/http_parser.c#L1727-L1737
      // "For responses, "Upgrade: foo" and "Connection: upgrade" are
      //   mandatory only when it is a 101 Switching Protocols response,
      //   otherwise it is purely informational, to announce support.
      if (hasUpgradeHeader && this.connection.indexOf('upgrade') != -1) {
        info.upgrade = this.type === HTTPParser.REQUEST || info.statusCode === 101;
      } else {
        info.upgrade = info.method === method_connect;
      }
      if (this.isChunked && info.upgrade) {
        this.isChunked = false;
      }
      info.shouldKeepAlive = this.shouldKeepAlive();
      //problem which also exists in original node: we should know skipBody before calling onHeadersComplete
      var skipBody;
      if (compatMode0_12) {
        skipBody = this.userCall()(this[kOnHeadersComplete](info));
      } else {
        skipBody = this.userCall()(this[kOnHeadersComplete](info.versionMajor, info.versionMinor, info.headers, info.method, info.url, info.statusCode, info.statusMessage, info.upgrade, info.shouldKeepAlive));
      }
      if (skipBody === 2) {
        this.nextRequest();
        return true;
      } else if (this.isChunked && !skipBody) {
        this.state = 'BODY_CHUNKHEAD';
      } else if (skipBody || this.body_bytes === 0) {
        this.nextRequest();
        // For older versions of node (v6.x and older?), that return skipBody=1 or skipBody=true,
        //   need this "return true;" if it's an upgrade request.
        return info.upgrade;
      } else if (this.body_bytes === null) {
        this.state = 'BODY_RAW';
      } else {
        this.state = 'BODY_SIZED';
      }
    }
  };
  HTTPParser.prototype.BODY_CHUNKHEAD = function () {
    var line = this.consumeLine();
    if (line === undefined) {
      return;
    }
    this.body_bytes = parseInt(line, 16);
    if (!this.body_bytes) {
      this.state = 'BODY_CHUNKTRAILERS';
    } else {
      this.state = 'BODY_CHUNK';
    }
  };
  HTTPParser.prototype.BODY_CHUNK = function () {
    var length = Math.min(this.end - this.offset, this.body_bytes);
    this.userCall()(this[kOnBody](this.chunk, this.offset, length));
    this.offset += length;
    this.body_bytes -= length;
    if (!this.body_bytes) {
      this.state = 'BODY_CHUNKEMPTYLINE';
    }
  };
  HTTPParser.prototype.BODY_CHUNKEMPTYLINE = function () {
    var line = this.consumeLine();
    if (line === undefined) {
      return;
    }
    assert.equal(line, '');
    this.state = 'BODY_CHUNKHEAD';
  };
  HTTPParser.prototype.BODY_CHUNKTRAILERS = function () {
    var line = this.consumeLine();
    if (line === undefined) {
      return;
    }
    if (line) {
      this.parseHeader(line, this.trailers);
    } else {
      if (this.trailers.length) {
        this.userCall()(this[kOnHeaders](this.trailers, ''));
      }
      this.nextRequest();
    }
  };
  HTTPParser.prototype.BODY_RAW = function () {
    var length = this.end - this.offset;
    this.userCall()(this[kOnBody](this.chunk, this.offset, length));
    this.offset = this.end;
  };
  HTTPParser.prototype.BODY_SIZED = function () {
    var length = Math.min(this.end - this.offset, this.body_bytes);
    this.userCall()(this[kOnBody](this.chunk, this.offset, length));
    this.offset += length;
    this.body_bytes -= length;
    if (!this.body_bytes) {
      this.nextRequest();
    }
  };

  // backward compat to node < 0.11.6
  ['Headers', 'HeadersComplete', 'Body', 'MessageComplete'].forEach(function (name) {
    var k = HTTPParser['kOn' + name];
    Object.defineProperty(HTTPParser.prototype, 'on' + name, {
      get: function get() {
        return this[k];
      },
      set: function set(to) {
        // hack for backward compatibility
        this._compatMode0_11 = true;
        method_connect = 'CONNECT';
        return this[k] = to;
      }
    });
  });
  function parseErrorCode(code) {
    var err = new Error('Parse Error');
    err.code = code;
    return err;
  }

  var NodeHTTPParser = httpParser.HTTPParser,
    Buffer$8 = safeBufferExports.Buffer;
  var TYPES = {
    request: NodeHTTPParser.REQUEST || 'request',
    response: NodeHTTPParser.RESPONSE || 'response'
  };
  var HttpParser$3 = function HttpParser(type) {
    this._type = type;
    this._parser = new NodeHTTPParser(TYPES[type]);
    this._complete = false;
    this.headers = {};
    var current = null,
      self = this;
    this._parser.onHeaderField = function (b, start, length) {
      current = b.toString('utf8', start, start + length).toLowerCase();
    };
    this._parser.onHeaderValue = function (b, start, length) {
      var value = b.toString('utf8', start, start + length);
      if (self.headers.hasOwnProperty(current)) self.headers[current] += ', ' + value;else self.headers[current] = value;
    };
    this._parser.onHeadersComplete = this._parser[NodeHTTPParser.kOnHeadersComplete] = function (majorVersion, minorVersion, headers, method, pathname, statusCode) {
      var info = arguments[0];
      if (_typeof(info) === 'object') {
        method = info.method;
        pathname = info.url;
        statusCode = info.statusCode;
        headers = info.headers;
      }
      self.method = typeof method === 'number' ? HttpParser.METHODS[method] : method;
      self.statusCode = statusCode;
      self.url = pathname;
      if (!headers) return;
      for (var i = 0, n = headers.length, key, value; i < n; i += 2) {
        key = headers[i].toLowerCase();
        value = headers[i + 1];
        if (self.headers.hasOwnProperty(key)) self.headers[key] += ', ' + value;else self.headers[key] = value;
      }
      self._complete = true;
    };
  };
  HttpParser$3.METHODS = {
    0: 'DELETE',
    1: 'GET',
    2: 'HEAD',
    3: 'POST',
    4: 'PUT',
    5: 'CONNECT',
    6: 'OPTIONS',
    7: 'TRACE',
    8: 'COPY',
    9: 'LOCK',
    10: 'MKCOL',
    11: 'MOVE',
    12: 'PROPFIND',
    13: 'PROPPATCH',
    14: 'SEARCH',
    15: 'UNLOCK',
    16: 'BIND',
    17: 'REBIND',
    18: 'UNBIND',
    19: 'ACL',
    20: 'REPORT',
    21: 'MKACTIVITY',
    22: 'CHECKOUT',
    23: 'MERGE',
    24: 'M-SEARCH',
    25: 'NOTIFY',
    26: 'SUBSCRIBE',
    27: 'UNSUBSCRIBE',
    28: 'PATCH',
    29: 'PURGE',
    30: 'MKCALENDAR',
    31: 'LINK',
    32: 'UNLINK'
  };
  var VERSION = process.version ? process.version.match(/[0-9]+/g).map(function (n) {
    return parseInt(n, 10);
  }) : [];
  if (VERSION[0] === 0 && VERSION[1] === 12) {
    HttpParser$3.METHODS[16] = 'REPORT';
    HttpParser$3.METHODS[17] = 'MKACTIVITY';
    HttpParser$3.METHODS[18] = 'CHECKOUT';
    HttpParser$3.METHODS[19] = 'MERGE';
    HttpParser$3.METHODS[20] = 'M-SEARCH';
    HttpParser$3.METHODS[21] = 'NOTIFY';
    HttpParser$3.METHODS[22] = 'SUBSCRIBE';
    HttpParser$3.METHODS[23] = 'UNSUBSCRIBE';
    HttpParser$3.METHODS[24] = 'PATCH';
    HttpParser$3.METHODS[25] = 'PURGE';
  }
  HttpParser$3.prototype.isComplete = function () {
    return this._complete;
  };
  HttpParser$3.prototype.parse = function (chunk) {
    var consumed = this._parser.execute(chunk, 0, chunk.length);
    if (typeof consumed !== 'number') {
      this.error = consumed;
      this._complete = true;
      return;
    }
    if (this._complete) this.body = consumed < chunk.length ? chunk.slice(consumed) : Buffer$8.alloc(0);
  };
  var http_parser = HttpParser$3;

  var TOKEN = /([!#\$%&'\*\+\-\.\^_`\|~0-9A-Za-z]+)/,
    NOTOKEN = /([^!#\$%&'\*\+\-\.\^_`\|~0-9A-Za-z])/g,
    QUOTED = /"((?:\\[\x00-\x7f]|[^\x00-\x08\x0a-\x1f\x7f"\\])*)"/,
    PARAM = new RegExp(TOKEN.source + '(?:=(?:' + TOKEN.source + '|' + QUOTED.source + '))?'),
    EXT = new RegExp(TOKEN.source + '(?: *; *' + PARAM.source + ')*', 'g'),
    EXT_LIST = new RegExp('^' + EXT.source + '(?: *, *' + EXT.source + ')*$'),
    NUMBER = /^-?(0|[1-9][0-9]*)(\.[0-9]+)?$/;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var Parser$1 = {
    parseHeader: function parseHeader(header) {
      var offers = new Offers();
      if (header === '' || header === undefined) return offers;
      if (!EXT_LIST.test(header)) throw new SyntaxError('Invalid Sec-WebSocket-Extensions header: ' + header);
      var values = header.match(EXT);
      values.forEach(function (value) {
        var params = value.match(new RegExp(PARAM.source, 'g')),
          name = params.shift(),
          offer = {};
        params.forEach(function (param) {
          var args = param.match(PARAM),
            key = args[1],
            data;
          if (args[2] !== undefined) {
            data = args[2];
          } else if (args[3] !== undefined) {
            data = args[3].replace(/\\/g, '');
          } else {
            data = true;
          }
          if (NUMBER.test(data)) data = parseFloat(data);
          if (hasOwnProperty.call(offer, key)) {
            offer[key] = [].concat(offer[key]);
            offer[key].push(data);
          } else {
            offer[key] = data;
          }
        }, this);
        offers.push(name, offer);
      }, this);
      return offers;
    },
    serializeParams: function serializeParams(name, params) {
      var values = [];
      var print = function print(key, value) {
        if (value instanceof Array) {
          value.forEach(function (v) {
            print(key, v);
          });
        } else if (value === true) {
          values.push(key);
        } else if (typeof value === 'number') {
          values.push(key + '=' + value);
        } else if (NOTOKEN.test(value)) {
          values.push(key + '="' + value.replace(/"/g, '\\"') + '"');
        } else {
          values.push(key + '=' + value);
        }
      };
      for (var key in params) print(key, params[key]);
      return [name].concat(values).join('; ');
    }
  };
  var Offers = function Offers() {
    this._byName = {};
    this._inOrder = [];
  };
  Offers.prototype.push = function (name, params) {
    if (!hasOwnProperty.call(this._byName, name)) this._byName[name] = [];
    this._byName[name].push(params);
    this._inOrder.push({
      name: name,
      params: params
    });
  };
  Offers.prototype.eachOffer = function (callback, context) {
    var list = this._inOrder;
    for (var i = 0, n = list.length; i < n; i++) callback.call(context, list[i].name, list[i].params);
  };
  Offers.prototype.byName = function (name) {
    return this._byName[name] || [];
  };
  Offers.prototype.toArray = function () {
    return this._inOrder.slice();
  };
  var parser = Parser$1;

  var RingBuffer$2 = function RingBuffer(bufferSize) {
    this._bufferSize = bufferSize;
    this.clear();
  };
  RingBuffer$2.prototype.clear = function () {
    this._buffer = new Array(this._bufferSize);
    this._ringOffset = 0;
    this._ringSize = this._bufferSize;
    this._head = 0;
    this._tail = 0;
    this.length = 0;
  };
  RingBuffer$2.prototype.push = function (value) {
    var expandBuffer = false,
      expandRing = false;
    if (this._ringSize < this._bufferSize) {
      expandBuffer = this._tail === 0;
    } else if (this._ringOffset === this._ringSize) {
      expandBuffer = true;
      expandRing = this._tail === 0;
    }
    if (expandBuffer) {
      this._tail = this._bufferSize;
      this._buffer = this._buffer.concat(new Array(this._bufferSize));
      this._bufferSize = this._buffer.length;
      if (expandRing) this._ringSize = this._bufferSize;
    }
    this._buffer[this._tail] = value;
    this.length += 1;
    if (this._tail < this._ringSize) this._ringOffset += 1;
    this._tail = (this._tail + 1) % this._bufferSize;
  };
  RingBuffer$2.prototype.peek = function () {
    if (this.length === 0) return void 0;
    return this._buffer[this._head];
  };
  RingBuffer$2.prototype.shift = function () {
    if (this.length === 0) return void 0;
    var value = this._buffer[this._head];
    this._buffer[this._head] = void 0;
    this.length -= 1;
    this._ringOffset -= 1;
    if (this._ringOffset === 0 && this.length > 0) {
      this._head = this._ringSize;
      this._ringOffset = this.length;
      this._ringSize = this._bufferSize;
    } else {
      this._head = (this._head + 1) % this._ringSize;
    }
    return value;
  };
  var ring_buffer = RingBuffer$2;

  var RingBuffer$1 = ring_buffer;
  var Functor$1 = function Functor(session, method) {
    this._session = session;
    this._method = method;
    this._queue = new RingBuffer$1(Functor.QUEUE_SIZE);
    this._stopped = false;
    this.pending = 0;
  };
  Functor$1.QUEUE_SIZE = 8;
  Functor$1.prototype.call = function (error, message, callback, context) {
    if (this._stopped) return;
    var record = {
        error: error,
        message: message,
        callback: callback,
        context: context,
        done: false
      },
      called = false,
      self = this;
    this._queue.push(record);
    if (record.error) {
      record.done = true;
      this._stop();
      return this._flushQueue();
    }
    var handler = function handler(err, msg) {
      if (!(called ^ (called = true))) return;
      if (err) {
        self._stop();
        record.error = err;
        record.message = null;
      } else {
        record.message = msg;
      }
      record.done = true;
      self._flushQueue();
    };
    try {
      this._session[this._method](message, handler);
    } catch (err) {
      handler(err);
    }
  };
  Functor$1.prototype._stop = function () {
    this.pending = this._queue.length;
    this._stopped = true;
  };
  Functor$1.prototype._flushQueue = function () {
    var queue = this._queue,
      record;
    while (queue.length > 0 && queue.peek().done) {
      record = queue.shift();
      if (record.error) {
        this.pending = 0;
        queue.clear();
      } else {
        this.pending -= 1;
      }
      record.callback.call(record.context, record.error, record.message);
    }
  };
  var functor = Functor$1;

  var RingBuffer = ring_buffer;
  var Pledge$2 = function Pledge() {
    this._complete = false;
    this._callbacks = new RingBuffer(Pledge.QUEUE_SIZE);
  };
  Pledge$2.QUEUE_SIZE = 4;
  Pledge$2.all = function (list) {
    var pledge = new Pledge$2(),
      pending = list.length,
      n = pending;
    if (pending === 0) pledge.done();
    while (n--) list[n].then(function () {
      pending -= 1;
      if (pending === 0) pledge.done();
    });
    return pledge;
  };
  Pledge$2.prototype.then = function (callback) {
    if (this._complete) callback();else this._callbacks.push(callback);
  };
  Pledge$2.prototype.done = function () {
    this._complete = true;
    var callbacks = this._callbacks,
      callback;
    while (callback = callbacks.shift()) callback();
  };
  var pledge = Pledge$2;

  var Functor = functor,
    Pledge$1 = pledge;
  var Cell$1 = function Cell(tuple) {
    this._ext = tuple[0];
    this._session = tuple[1];
    this._functors = {
      incoming: new Functor(this._session, 'processIncomingMessage'),
      outgoing: new Functor(this._session, 'processOutgoingMessage')
    };
  };
  Cell$1.prototype.pending = function (direction) {
    var functor = this._functors[direction];
    if (!functor._stopped) functor.pending += 1;
  };
  Cell$1.prototype.incoming = function (error, message, callback, context) {
    this._exec('incoming', error, message, callback, context);
  };
  Cell$1.prototype.outgoing = function (error, message, callback, context) {
    this._exec('outgoing', error, message, callback, context);
  };
  Cell$1.prototype.close = function () {
    this._closed = this._closed || new Pledge$1();
    this._doClose();
    return this._closed;
  };
  Cell$1.prototype._exec = function (direction, error, message, callback, context) {
    this._functors[direction].call(error, message, function (err, msg) {
      if (err) err.message = this._ext.name + ': ' + err.message;
      callback.call(context, err, msg);
      this._doClose();
    }, this);
  };
  Cell$1.prototype._doClose = function () {
    var fin = this._functors.incoming,
      fout = this._functors.outgoing;
    if (!this._closed || fin.pending + fout.pending !== 0) return;
    if (this._session) this._session.close();
    this._session = null;
    this._closed.done();
  };
  var cell = Cell$1;

  var Cell = cell,
    Pledge = pledge;
  var Pipeline$1 = function Pipeline(sessions) {
    this._cells = sessions.map(function (session) {
      return new Cell(session);
    });
    this._stopped = {
      incoming: false,
      outgoing: false
    };
  };
  Pipeline$1.prototype.processIncomingMessage = function (message, callback, context) {
    if (this._stopped.incoming) return;
    this._loop('incoming', this._cells.length - 1, -1, -1, message, callback, context);
  };
  Pipeline$1.prototype.processOutgoingMessage = function (message, callback, context) {
    if (this._stopped.outgoing) return;
    this._loop('outgoing', 0, this._cells.length, 1, message, callback, context);
  };
  Pipeline$1.prototype.close = function (callback, context) {
    this._stopped = {
      incoming: true,
      outgoing: true
    };
    var closed = this._cells.map(function (a) {
      return a.close();
    });
    if (callback) Pledge.all(closed).then(function () {
      callback.call(context);
    });
  };
  Pipeline$1.prototype._loop = function (direction, start, end, step, message, callback, context) {
    var cells = this._cells,
      n = cells.length,
      self = this;
    while (n--) cells[n].pending(direction);
    var pipe = function pipe(index, error, msg) {
      if (index === end) return callback.call(context, error, msg);
      cells[index][direction](error, msg, function (err, m) {
        if (err) self._stopped[direction] = true;
        pipe(index + step, err, m);
      });
    };
    pipe(start, null, message);
  };
  var pipeline = Pipeline$1;

  var Parser = parser,
    Pipeline = pipeline;
  var Extensions$1 = function Extensions() {
    this._rsv1 = this._rsv2 = this._rsv3 = null;
    this._byName = {};
    this._inOrder = [];
    this._sessions = [];
    this._index = {};
  };
  Extensions$1.MESSAGE_OPCODES = [1, 2];
  var instance$9 = {
    add: function add(ext) {
      if (typeof ext.name !== 'string') throw new TypeError('extension.name must be a string');
      if (ext.type !== 'permessage') throw new TypeError('extension.type must be "permessage"');
      if (typeof ext.rsv1 !== 'boolean') throw new TypeError('extension.rsv1 must be true or false');
      if (typeof ext.rsv2 !== 'boolean') throw new TypeError('extension.rsv2 must be true or false');
      if (typeof ext.rsv3 !== 'boolean') throw new TypeError('extension.rsv3 must be true or false');
      if (this._byName.hasOwnProperty(ext.name)) throw new TypeError('An extension with name "' + ext.name + '" is already registered');
      this._byName[ext.name] = ext;
      this._inOrder.push(ext);
    },
    generateOffer: function generateOffer() {
      var sessions = [],
        offer = [],
        index = {};
      this._inOrder.forEach(function (ext) {
        var session = ext.createClientSession();
        if (!session) return;
        var record = [ext, session];
        sessions.push(record);
        index[ext.name] = record;
        var offers = session.generateOffer();
        offers = offers ? [].concat(offers) : [];
        offers.forEach(function (off) {
          offer.push(Parser.serializeParams(ext.name, off));
        }, this);
      }, this);
      this._sessions = sessions;
      this._index = index;
      return offer.length > 0 ? offer.join(', ') : null;
    },
    activate: function activate(header) {
      var responses = Parser.parseHeader(header),
        sessions = [];
      responses.eachOffer(function (name, params) {
        var record = this._index[name];
        if (!record) throw new Error('Server sent an extension response for unknown extension "' + name + '"');
        var ext = record[0],
          session = record[1],
          reserved = this._reserved(ext);
        if (reserved) throw new Error('Server sent two extension responses that use the RSV' + reserved[0] + ' bit: "' + reserved[1] + '" and "' + ext.name + '"');
        if (session.activate(params) !== true) throw new Error('Server sent unacceptable extension parameters: ' + Parser.serializeParams(name, params));
        this._reserve(ext);
        sessions.push(record);
      }, this);
      this._sessions = sessions;
      this._pipeline = new Pipeline(sessions);
    },
    generateResponse: function generateResponse(header) {
      var sessions = [],
        response = [],
        offers = Parser.parseHeader(header);
      this._inOrder.forEach(function (ext) {
        var offer = offers.byName(ext.name);
        if (offer.length === 0 || this._reserved(ext)) return;
        var session = ext.createServerSession(offer);
        if (!session) return;
        this._reserve(ext);
        sessions.push([ext, session]);
        response.push(Parser.serializeParams(ext.name, session.generateResponse()));
      }, this);
      this._sessions = sessions;
      this._pipeline = new Pipeline(sessions);
      return response.length > 0 ? response.join(', ') : null;
    },
    validFrameRsv: function validFrameRsv(frame) {
      var allowed = {
          rsv1: false,
          rsv2: false,
          rsv3: false
        },
        ext;
      if (Extensions$1.MESSAGE_OPCODES.indexOf(frame.opcode) >= 0) {
        for (var i = 0, n = this._sessions.length; i < n; i++) {
          ext = this._sessions[i][0];
          allowed.rsv1 = allowed.rsv1 || ext.rsv1;
          allowed.rsv2 = allowed.rsv2 || ext.rsv2;
          allowed.rsv3 = allowed.rsv3 || ext.rsv3;
        }
      }
      return (allowed.rsv1 || !frame.rsv1) && (allowed.rsv2 || !frame.rsv2) && (allowed.rsv3 || !frame.rsv3);
    },
    processIncomingMessage: function processIncomingMessage(message, callback, context) {
      this._pipeline.processIncomingMessage(message, callback, context);
    },
    processOutgoingMessage: function processOutgoingMessage(message, callback, context) {
      this._pipeline.processOutgoingMessage(message, callback, context);
    },
    close: function close(callback, context) {
      if (!this._pipeline) return callback.call(context);
      this._pipeline.close(callback, context);
    },
    _reserve: function _reserve(ext) {
      this._rsv1 = this._rsv1 || ext.rsv1 && ext.name;
      this._rsv2 = this._rsv2 || ext.rsv2 && ext.name;
      this._rsv3 = this._rsv3 || ext.rsv3 && ext.name;
    },
    _reserved: function _reserved(ext) {
      if (this._rsv1 && ext.rsv1) return [1, this._rsv1];
      if (this._rsv2 && ext.rsv2) return [2, this._rsv2];
      if (this._rsv3 && ext.rsv3) return [3, this._rsv3];
      return false;
    }
  };
  for (var key$9 in instance$9) Extensions$1.prototype[key$9] = instance$9[key$9];
  var websocket_extensions = Extensions$1;

  var Frame$1 = function Frame() {};
  var instance$8 = {
    "final": false,
    rsv1: false,
    rsv2: false,
    rsv3: false,
    opcode: null,
    masked: false,
    maskingKey: null,
    lengthBytes: 1,
    length: 0,
    payload: null
  };
  for (var key$8 in instance$8) Frame$1.prototype[key$8] = instance$8[key$8];
  var frame = Frame$1;

  var Buffer$7 = safeBufferExports.Buffer;
  var Message$1 = function Message() {
    this.rsv1 = false;
    this.rsv2 = false;
    this.rsv3 = false;
    this.opcode = null;
    this.length = 0;
    this._chunks = [];
  };
  var instance$7 = {
    read: function read() {
      return this.data = this.data || Buffer$7.concat(this._chunks, this.length);
    },
    pushFrame: function pushFrame(frame) {
      this.rsv1 = this.rsv1 || frame.rsv1;
      this.rsv2 = this.rsv2 || frame.rsv2;
      this.rsv3 = this.rsv3 || frame.rsv3;
      if (this.opcode === null) this.opcode = frame.opcode;
      this._chunks.push(frame.payload);
      this.length += frame.length;
    }
  };
  for (var key$7 in instance$7) Message$1.prototype[key$7] = instance$7[key$7];
  var message = Message$1;

  var Buffer$6 = safeBufferExports.Buffer,
    crypto$3 = require$$0$8,
    util$8 = require$$1$3,
    Extensions = websocket_extensions,
    Base$6 = base,
    Frame = frame,
    Message = message;
  var Hybi$2 = function Hybi(request, url, options) {
    Base$6.apply(this, arguments);
    this._extensions = new Extensions();
    this._stage = 0;
    this._masking = this._options.masking;
    this._protocols = this._options.protocols || [];
    this._requireMasking = this._options.requireMasking;
    this._pingCallbacks = {};
    if (typeof this._protocols === 'string') this._protocols = this._protocols.split(/ *, */);
    if (!this._request) return;
    var protos = this._request.headers['sec-websocket-protocol'],
      supported = this._protocols;
    if (protos !== undefined) {
      if (typeof protos === 'string') protos = protos.split(/ *, */);
      this.protocol = protos.filter(function (p) {
        return supported.indexOf(p) >= 0;
      })[0];
    }
    this.version = 'hybi-' + Hybi.VERSION;
  };
  util$8.inherits(Hybi$2, Base$6);
  Hybi$2.VERSION = '13';
  Hybi$2.mask = function (payload, mask, offset) {
    if (!mask || mask.length === 0) return payload;
    offset = offset || 0;
    for (var i = 0, n = payload.length - offset; i < n; i++) {
      payload[offset + i] = payload[offset + i] ^ mask[i % 4];
    }
    return payload;
  };
  Hybi$2.generateAccept = function (key) {
    var sha1 = crypto$3.createHash('sha1');
    sha1.update(key + Hybi$2.GUID);
    return sha1.digest('base64');
  };
  Hybi$2.GUID = '258EAFA5-E914-47DA-95CA-C5AB0DC85B11';
  var instance$6 = {
    FIN: 0x80,
    MASK: 0x80,
    RSV1: 0x40,
    RSV2: 0x20,
    RSV3: 0x10,
    OPCODE: 0x0F,
    LENGTH: 0x7F,
    OPCODES: {
      continuation: 0,
      text: 1,
      binary: 2,
      close: 8,
      ping: 9,
      pong: 10
    },
    OPCODE_CODES: [0, 1, 2, 8, 9, 10],
    MESSAGE_OPCODES: [0, 1, 2],
    OPENING_OPCODES: [1, 2],
    ERRORS: {
      normal_closure: 1000,
      going_away: 1001,
      protocol_error: 1002,
      unacceptable: 1003,
      encoding_error: 1007,
      policy_violation: 1008,
      too_large: 1009,
      extension_error: 1010,
      unexpected_condition: 1011
    },
    ERROR_CODES: [1000, 1001, 1002, 1003, 1007, 1008, 1009, 1010, 1011],
    DEFAULT_ERROR_CODE: 1000,
    MIN_RESERVED_ERROR: 3000,
    MAX_RESERVED_ERROR: 4999,
    // http://www.w3.org/International/questions/qa-forms-utf-8.en.php
    UTF8_MATCH: /^([\x00-\x7F]|[\xC2-\xDF][\x80-\xBF]|\xE0[\xA0-\xBF][\x80-\xBF]|[\xE1-\xEC\xEE\xEF][\x80-\xBF]{2}|\xED[\x80-\x9F][\x80-\xBF]|\xF0[\x90-\xBF][\x80-\xBF]{2}|[\xF1-\xF3][\x80-\xBF]{3}|\xF4[\x80-\x8F][\x80-\xBF]{2})*$/,
    addExtension: function addExtension(extension) {
      this._extensions.add(extension);
      return true;
    },
    parse: function parse(chunk) {
      this._reader.put(chunk);
      var buffer = true;
      while (buffer) {
        switch (this._stage) {
          case 0:
            buffer = this._reader.read(1);
            if (buffer) this._parseOpcode(buffer[0]);
            break;
          case 1:
            buffer = this._reader.read(1);
            if (buffer) this._parseLength(buffer[0]);
            break;
          case 2:
            buffer = this._reader.read(this._frame.lengthBytes);
            if (buffer) this._parseExtendedLength(buffer);
            break;
          case 3:
            buffer = this._reader.read(4);
            if (buffer) {
              this._stage = 4;
              this._frame.maskingKey = buffer;
            }
            break;
          case 4:
            buffer = this._reader.read(this._frame.length);
            if (buffer) {
              this._stage = 0;
              this._emitFrame(buffer);
            }
            break;
          default:
            buffer = null;
        }
      }
    },
    text: function text(message) {
      if (this.readyState > 1) return false;
      return this.frame(message, 'text');
    },
    binary: function binary(message) {
      if (this.readyState > 1) return false;
      return this.frame(message, 'binary');
    },
    ping: function ping(message, callback) {
      if (this.readyState > 1) return false;
      message = message || '';
      if (callback) this._pingCallbacks[message] = callback;
      return this.frame(message, 'ping');
    },
    pong: function pong(message) {
      if (this.readyState > 1) return false;
      message = message || '';
      return this.frame(message, 'pong');
    },
    close: function close(reason, code) {
      reason = reason || '';
      code = code || this.ERRORS.normal_closure;
      if (this.readyState <= 0) {
        this.readyState = 3;
        this.emit('close', new Base$6.CloseEvent(code, reason));
        return true;
      } else if (this.readyState === 1) {
        this.readyState = 2;
        this._extensions.close(function () {
          this.frame(reason, 'close', code);
        }, this);
        return true;
      } else {
        return false;
      }
    },
    frame: function frame(buffer, type, code) {
      if (this.readyState <= 0) return this._queue([buffer, type, code]);
      if (this.readyState > 2) return false;
      if (buffer instanceof Array) buffer = Buffer$6.from(buffer);
      if (typeof buffer === 'number') buffer = buffer.toString();
      var message = new Message(),
        isText = typeof buffer === 'string',
        payload,
        copy;
      message.rsv1 = message.rsv2 = message.rsv3 = false;
      message.opcode = this.OPCODES[type || (isText ? 'text' : 'binary')];
      payload = isText ? Buffer$6.from(buffer, 'utf8') : buffer;
      if (code) {
        copy = payload;
        payload = Buffer$6.allocUnsafe(2 + copy.length);
        payload.writeUInt16BE(code, 0);
        copy.copy(payload, 2);
      }
      message.data = payload;
      var onMessageReady = function onMessageReady(message) {
        var frame = new Frame();
        frame["final"] = true;
        frame.rsv1 = message.rsv1;
        frame.rsv2 = message.rsv2;
        frame.rsv3 = message.rsv3;
        frame.opcode = message.opcode;
        frame.masked = !!this._masking;
        frame.length = message.data.length;
        frame.payload = message.data;
        if (frame.masked) frame.maskingKey = crypto$3.randomBytes(4);
        this._sendFrame(frame);
      };
      if (this.MESSAGE_OPCODES.indexOf(message.opcode) >= 0) this._extensions.processOutgoingMessage(message, function (error, message) {
        if (error) return this._fail('extension_error', error.message);
        onMessageReady.call(this, message);
      }, this);else onMessageReady.call(this, message);
      return true;
    },
    _sendFrame: function _sendFrame(frame) {
      var length = frame.length,
        header = length <= 125 ? 2 : length <= 65535 ? 4 : 10,
        offset = header + (frame.masked ? 4 : 0),
        buffer = Buffer$6.allocUnsafe(offset + length),
        masked = frame.masked ? this.MASK : 0;
      buffer[0] = (frame["final"] ? this.FIN : 0) | (frame.rsv1 ? this.RSV1 : 0) | (frame.rsv2 ? this.RSV2 : 0) | (frame.rsv3 ? this.RSV3 : 0) | frame.opcode;
      if (length <= 125) {
        buffer[1] = masked | length;
      } else if (length <= 65535) {
        buffer[1] = masked | 126;
        buffer.writeUInt16BE(length, 2);
      } else {
        buffer[1] = masked | 127;
        buffer.writeUInt32BE(Math.floor(length / 0x100000000), 2);
        buffer.writeUInt32BE(length % 0x100000000, 6);
      }
      frame.payload.copy(buffer, offset);
      if (frame.masked) {
        frame.maskingKey.copy(buffer, header);
        Hybi$2.mask(buffer, frame.maskingKey, offset);
      }
      this._write(buffer);
    },
    _handshakeResponse: function _handshakeResponse() {
      var secKey = this._request.headers['sec-websocket-key'],
        version = this._request.headers['sec-websocket-version'];
      if (version !== Hybi$2.VERSION) throw new Error('Unsupported WebSocket version: ' + version);
      if (typeof secKey !== 'string') throw new Error('Missing handshake request header: Sec-WebSocket-Key');
      this._headers.set('Upgrade', 'websocket');
      this._headers.set('Connection', 'Upgrade');
      this._headers.set('Sec-WebSocket-Accept', Hybi$2.generateAccept(secKey));
      if (this.protocol) this._headers.set('Sec-WebSocket-Protocol', this.protocol);
      var extensions = this._extensions.generateResponse(this._request.headers['sec-websocket-extensions']);
      if (extensions) this._headers.set('Sec-WebSocket-Extensions', extensions);
      var start = 'HTTP/1.1 101 Switching Protocols',
        headers = [start, this._headers.toString(), ''];
      return Buffer$6.from(headers.join('\r\n'), 'utf8');
    },
    _shutdown: function _shutdown(code, reason, error) {
      delete this._frame;
      delete this._message;
      this._stage = 5;
      var sendCloseFrame = this.readyState === 1;
      this.readyState = 2;
      this._extensions.close(function () {
        if (sendCloseFrame) this.frame(reason, 'close', code);
        this.readyState = 3;
        if (error) this.emit('error', new Error(reason));
        this.emit('close', new Base$6.CloseEvent(code, reason));
      }, this);
    },
    _fail: function _fail(type, message) {
      if (this.readyState > 1) return;
      this._shutdown(this.ERRORS[type], message, true);
    },
    _parseOpcode: function _parseOpcode(octet) {
      var rsvs = [this.RSV1, this.RSV2, this.RSV3].map(function (rsv) {
        return (octet & rsv) === rsv;
      });
      var frame = this._frame = new Frame();
      frame["final"] = (octet & this.FIN) === this.FIN;
      frame.rsv1 = rsvs[0];
      frame.rsv2 = rsvs[1];
      frame.rsv3 = rsvs[2];
      frame.opcode = octet & this.OPCODE;
      this._stage = 1;
      if (!this._extensions.validFrameRsv(frame)) return this._fail('protocol_error', 'One or more reserved bits are on: reserved1 = ' + (frame.rsv1 ? 1 : 0) + ', reserved2 = ' + (frame.rsv2 ? 1 : 0) + ', reserved3 = ' + (frame.rsv3 ? 1 : 0));
      if (this.OPCODE_CODES.indexOf(frame.opcode) < 0) return this._fail('protocol_error', 'Unrecognized frame opcode: ' + frame.opcode);
      if (this.MESSAGE_OPCODES.indexOf(frame.opcode) < 0 && !frame["final"]) return this._fail('protocol_error', 'Received fragmented control frame: opcode = ' + frame.opcode);
      if (this._message && this.OPENING_OPCODES.indexOf(frame.opcode) >= 0) return this._fail('protocol_error', 'Received new data frame but previous continuous frame is unfinished');
    },
    _parseLength: function _parseLength(octet) {
      var frame = this._frame;
      frame.masked = (octet & this.MASK) === this.MASK;
      frame.length = octet & this.LENGTH;
      if (frame.length >= 0 && frame.length <= 125) {
        this._stage = frame.masked ? 3 : 4;
        if (!this._checkFrameLength()) return;
      } else {
        this._stage = 2;
        frame.lengthBytes = frame.length === 126 ? 2 : 8;
      }
      if (this._requireMasking && !frame.masked) return this._fail('unacceptable', 'Received unmasked frame but masking is required');
    },
    _parseExtendedLength: function _parseExtendedLength(buffer) {
      var frame = this._frame;
      frame.length = this._readUInt(buffer);
      this._stage = frame.masked ? 3 : 4;
      if (this.MESSAGE_OPCODES.indexOf(frame.opcode) < 0 && frame.length > 125) return this._fail('protocol_error', 'Received control frame having too long payload: ' + frame.length);
      if (!this._checkFrameLength()) return;
    },
    _checkFrameLength: function _checkFrameLength() {
      var length = this._message ? this._message.length : 0;
      if (length + this._frame.length > this._maxLength) {
        this._fail('too_large', 'WebSocket frame length too large');
        return false;
      } else {
        return true;
      }
    },
    _emitFrame: function _emitFrame(buffer) {
      var frame = this._frame,
        payload = frame.payload = Hybi$2.mask(buffer, frame.maskingKey),
        opcode = frame.opcode,
        message,
        code,
        reason,
        callbacks,
        callback;
      delete this._frame;
      if (opcode === this.OPCODES.continuation) {
        if (!this._message) return this._fail('protocol_error', 'Received unexpected continuation frame');
        this._message.pushFrame(frame);
      }
      if (opcode === this.OPCODES.text || opcode === this.OPCODES.binary) {
        this._message = new Message();
        this._message.pushFrame(frame);
      }
      if (frame["final"] && this.MESSAGE_OPCODES.indexOf(opcode) >= 0) return this._emitMessage(this._message);
      if (opcode === this.OPCODES.close) {
        code = payload.length >= 2 ? payload.readUInt16BE(0) : null;
        reason = payload.length > 2 ? this._encode(payload.slice(2)) : null;
        if (!(payload.length === 0) && !(code !== null && code >= this.MIN_RESERVED_ERROR && code <= this.MAX_RESERVED_ERROR) && this.ERROR_CODES.indexOf(code) < 0) code = this.ERRORS.protocol_error;
        if (payload.length > 125 || payload.length > 2 && !reason) code = this.ERRORS.protocol_error;
        this._shutdown(code || this.DEFAULT_ERROR_CODE, reason || '');
      }
      if (opcode === this.OPCODES.ping) {
        this.frame(payload, 'pong');
        this.emit('ping', new Base$6.PingEvent(payload.toString()));
      }
      if (opcode === this.OPCODES.pong) {
        callbacks = this._pingCallbacks;
        message = this._encode(payload);
        callback = callbacks[message];
        delete callbacks[message];
        if (callback) callback();
        this.emit('pong', new Base$6.PongEvent(payload.toString()));
      }
    },
    _emitMessage: function _emitMessage(message) {
      var message = this._message;
      message.read();
      delete this._message;
      this._extensions.processIncomingMessage(message, function (error, message) {
        if (error) return this._fail('extension_error', error.message);
        var payload = message.data;
        if (message.opcode === this.OPCODES.text) payload = this._encode(payload);
        if (payload === null) return this._fail('encoding_error', 'Could not decode a text frame as UTF-8');else this.emit('message', new Base$6.MessageEvent(payload));
      }, this);
    },
    _encode: function _encode(buffer) {
      try {
        var string = buffer.toString('binary', 0, buffer.length);
        if (!this.UTF8_MATCH.test(string)) return null;
      } catch (e) {}
      return buffer.toString('utf8', 0, buffer.length);
    },
    _readUInt: function _readUInt(buffer) {
      if (buffer.length === 2) return buffer.readUInt16BE(0);
      return buffer.readUInt32BE(0) * 0x100000000 + buffer.readUInt32BE(4);
    }
  };
  for (var key$6 in instance$6) Hybi$2.prototype[key$6] = instance$6[key$6];
  var hybi = Hybi$2;

  var Buffer$5 = safeBufferExports.Buffer,
    Stream$1 = require$$0$3.Stream,
    url$3 = Url$1,
    util$7 = require$$1$3,
    Base$5 = base,
    Headers = requireHeaders(),
    HttpParser$2 = http_parser;
  var PORTS = {
    'ws:': 80,
    'wss:': 443
  };
  var Proxy$1 = function Proxy(client, origin, options) {
    this._client = client;
    this._http = new HttpParser$2('response');
    this._origin = _typeof(client.url) === 'object' ? client.url : url$3.parse(client.url);
    this._url = _typeof(origin) === 'object' ? origin : url$3.parse(origin);
    this._options = options || {};
    this._state = 0;
    this.readable = this.writable = true;
    this._paused = false;
    this._headers = new Headers();
    this._headers.set('Host', this._origin.host);
    this._headers.set('Connection', 'keep-alive');
    this._headers.set('Proxy-Connection', 'keep-alive');
    var auth = this._url.auth && Buffer$5.from(this._url.auth, 'utf8').toString('base64');
    if (auth) this._headers.set('Proxy-Authorization', 'Basic ' + auth);
  };
  util$7.inherits(Proxy$1, Stream$1);
  var instance$5 = {
    setHeader: function setHeader(name, value) {
      if (this._state !== 0) return false;
      this._headers.set(name, value);
      return true;
    },
    start: function start() {
      if (this._state !== 0) return false;
      this._state = 1;
      var origin = this._origin,
        port = origin.port || PORTS[origin.protocol],
        start = 'CONNECT ' + origin.hostname + ':' + port + ' HTTP/1.1';
      var headers = [start, this._headers.toString(), ''];
      this.emit('data', Buffer$5.from(headers.join('\r\n'), 'utf8'));
      return true;
    },
    pause: function pause() {
      this._paused = true;
    },
    resume: function resume() {
      this._paused = false;
      this.emit('drain');
    },
    write: function write(chunk) {
      if (!this.writable) return false;
      this._http.parse(chunk);
      if (!this._http.isComplete()) return !this._paused;
      this.statusCode = this._http.statusCode;
      this.headers = this._http.headers;
      if (this.statusCode === 200) {
        this.emit('connect', new Base$5.ConnectEvent());
      } else {
        var message = "Can't establish a connection to the server at " + this._origin.href;
        this.emit('error', new Error(message));
      }
      this.end();
      return !this._paused;
    },
    end: function end(chunk) {
      if (!this.writable) return;
      if (chunk !== undefined) this.write(chunk);
      this.readable = this.writable = false;
      this.emit('close');
      this.emit('end');
    },
    destroy: function destroy() {
      this.end();
    }
  };
  for (var key$5 in instance$5) Proxy$1.prototype[key$5] = instance$5[key$5];
  var proxy = Proxy$1;

  var Buffer$4 = safeBufferExports.Buffer,
    crypto$2 = require$$0$8,
    url$2 = Url$1,
    util$6 = require$$1$3,
    HttpParser$1 = http_parser,
    Base$4 = base,
    Hybi$1 = hybi,
    Proxy = proxy;
  var Client$3 = function Client(_url, options) {
    this.version = 'hybi-' + Hybi$1.VERSION;
    Hybi$1.call(this, null, _url, options);
    this.readyState = -1;
    this._key = Client.generateKey();
    this._accept = Hybi$1.generateAccept(this._key);
    this._http = new HttpParser$1('response');
    var uri = url$2.parse(this.url),
      auth = uri.auth && Buffer$4.from(uri.auth, 'utf8').toString('base64');
    if (this.VALID_PROTOCOLS.indexOf(uri.protocol) < 0) throw new Error(this.url + ' is not a valid WebSocket URL');
    this._pathname = (uri.pathname || '/') + (uri.search || '');
    this._headers.set('Host', uri.host);
    this._headers.set('Upgrade', 'websocket');
    this._headers.set('Connection', 'Upgrade');
    this._headers.set('Sec-WebSocket-Key', this._key);
    this._headers.set('Sec-WebSocket-Version', Hybi$1.VERSION);
    if (this._protocols.length > 0) this._headers.set('Sec-WebSocket-Protocol', this._protocols.join(', '));
    if (auth) this._headers.set('Authorization', 'Basic ' + auth);
  };
  util$6.inherits(Client$3, Hybi$1);
  Client$3.generateKey = function () {
    return crypto$2.randomBytes(16).toString('base64');
  };
  var instance$4 = {
    VALID_PROTOCOLS: ['ws:', 'wss:'],
    proxy: function proxy(origin, options) {
      return new Proxy(this, origin, options);
    },
    start: function start() {
      if (this.readyState !== -1) return false;
      this._write(this._handshakeRequest());
      this.readyState = 0;
      return true;
    },
    parse: function parse(chunk) {
      if (this.readyState === 3) return;
      if (this.readyState > 0) return Hybi$1.prototype.parse.call(this, chunk);
      this._http.parse(chunk);
      if (!this._http.isComplete()) return;
      this._validateHandshake();
      if (this.readyState === 3) return;
      this._open();
      this.parse(this._http.body);
    },
    _handshakeRequest: function _handshakeRequest() {
      var extensions = this._extensions.generateOffer();
      if (extensions) this._headers.set('Sec-WebSocket-Extensions', extensions);
      var start = 'GET ' + this._pathname + ' HTTP/1.1',
        headers = [start, this._headers.toString(), ''];
      return Buffer$4.from(headers.join('\r\n'), 'utf8');
    },
    _failHandshake: function _failHandshake(message) {
      message = 'Error during WebSocket handshake: ' + message;
      this.readyState = 3;
      this.emit('error', new Error(message));
      this.emit('close', new Base$4.CloseEvent(this.ERRORS.protocol_error, message));
    },
    _validateHandshake: function _validateHandshake() {
      this.statusCode = this._http.statusCode;
      this.headers = this._http.headers;
      if (this._http.error) return this._failHandshake(this._http.error.message);
      if (this._http.statusCode !== 101) return this._failHandshake('Unexpected response code: ' + this._http.statusCode);
      var headers = this._http.headers,
        upgrade = headers['upgrade'] || '',
        connection = headers['connection'] || '',
        accept = headers['sec-websocket-accept'] || '',
        protocol = headers['sec-websocket-protocol'] || '';
      if (upgrade === '') return this._failHandshake("'Upgrade' header is missing");
      if (upgrade.toLowerCase() !== 'websocket') return this._failHandshake("'Upgrade' header value is not 'WebSocket'");
      if (connection === '') return this._failHandshake("'Connection' header is missing");
      if (connection.toLowerCase() !== 'upgrade') return this._failHandshake("'Connection' header value is not 'Upgrade'");
      if (accept !== this._accept) return this._failHandshake('Sec-WebSocket-Accept mismatch');
      this.protocol = null;
      if (protocol !== '') {
        if (this._protocols.indexOf(protocol) < 0) return this._failHandshake('Sec-WebSocket-Protocol mismatch');else this.protocol = protocol;
      }
      try {
        this._extensions.activate(this.headers['sec-websocket-extensions']);
      } catch (e) {
        return this._failHandshake(e.message);
      }
    }
  };
  for (var key$4 in instance$4) Client$3.prototype[key$4] = instance$4[key$4];
  var client$2 = Client$3;

  var Buffer$3 = safeBufferExports.Buffer,
    Base$3 = base,
    util$5 = require$$1$3;
  var Draft75$2 = function Draft75(request, url, options) {
    Base$3.apply(this, arguments);
    this._stage = 0;
    this.version = 'hixie-75';
    this._headers.set('Upgrade', 'WebSocket');
    this._headers.set('Connection', 'Upgrade');
    this._headers.set('WebSocket-Origin', this._request.headers.origin);
    this._headers.set('WebSocket-Location', this.url);
  };
  util$5.inherits(Draft75$2, Base$3);
  var instance$3 = {
    close: function close() {
      if (this.readyState === 3) return false;
      this.readyState = 3;
      this.emit('close', new Base$3.CloseEvent(null, null));
      return true;
    },
    parse: function parse(chunk) {
      if (this.readyState > 1) return;
      this._reader.put(chunk);
      this._reader.eachByte(function (octet) {
        var message;
        switch (this._stage) {
          case -1:
            this._body.push(octet);
            this._sendHandshakeBody();
            break;
          case 0:
            this._parseLeadingByte(octet);
            break;
          case 1:
            this._length = (octet & 0x7F) + 128 * this._length;
            if (this._closing && this._length === 0) {
              return this.close();
            } else if ((octet & 0x80) !== 0x80) {
              if (this._length === 0) {
                this._stage = 0;
              } else {
                this._skipped = 0;
                this._stage = 2;
              }
            }
            break;
          case 2:
            if (octet === 0xFF) {
              this._stage = 0;
              message = Buffer$3.from(this._buffer).toString('utf8', 0, this._buffer.length);
              this.emit('message', new Base$3.MessageEvent(message));
            } else {
              if (this._length) {
                this._skipped += 1;
                if (this._skipped === this._length) this._stage = 0;
              } else {
                this._buffer.push(octet);
                if (this._buffer.length > this._maxLength) return this.close();
              }
            }
            break;
        }
      }, this);
    },
    frame: function frame(buffer) {
      if (this.readyState === 0) return this._queue([buffer]);
      if (this.readyState > 1) return false;
      if (typeof buffer !== 'string') buffer = buffer.toString();
      var length = Buffer$3.byteLength(buffer),
        frame = Buffer$3.allocUnsafe(length + 2);
      frame[0] = 0x00;
      frame.write(buffer, 1);
      frame[frame.length - 1] = 0xFF;
      this._write(frame);
      return true;
    },
    _handshakeResponse: function _handshakeResponse() {
      var start = 'HTTP/1.1 101 Web Socket Protocol Handshake',
        headers = [start, this._headers.toString(), ''];
      return Buffer$3.from(headers.join('\r\n'), 'utf8');
    },
    _parseLeadingByte: function _parseLeadingByte(octet) {
      if ((octet & 0x80) === 0x80) {
        this._length = 0;
        this._stage = 1;
      } else {
        delete this._length;
        delete this._skipped;
        this._buffer = [];
        this._stage = 2;
      }
    }
  };
  for (var key$3 in instance$3) Draft75$2.prototype[key$3] = instance$3[key$3];
  var draft75 = Draft75$2;

  var Buffer$2 = safeBufferExports.Buffer,
    Base$2 = base,
    Draft75$1 = draft75,
    crypto$1 = require$$0$8,
    util$4 = require$$1$3;
  var numberFromKey = function numberFromKey(key) {
    return parseInt((key.match(/[0-9]/g) || []).join(''), 10);
  };
  var spacesInKey = function spacesInKey(key) {
    return (key.match(/ /g) || []).length;
  };
  var Draft76$1 = function Draft76(request, url, options) {
    Draft75$1.apply(this, arguments);
    this._stage = -1;
    this._body = [];
    this.version = 'hixie-76';
    this._headers.clear();
    this._headers.set('Upgrade', 'WebSocket');
    this._headers.set('Connection', 'Upgrade');
    this._headers.set('Sec-WebSocket-Origin', this._request.headers.origin);
    this._headers.set('Sec-WebSocket-Location', this.url);
  };
  util$4.inherits(Draft76$1, Draft75$1);
  var instance$2 = {
    BODY_SIZE: 8,
    start: function start() {
      if (!Draft75$1.prototype.start.call(this)) return false;
      this._started = true;
      this._sendHandshakeBody();
      return true;
    },
    close: function close() {
      if (this.readyState === 3) return false;
      if (this.readyState === 1) this._write(Buffer$2.from([0xFF, 0x00]));
      this.readyState = 3;
      this.emit('close', new Base$2.CloseEvent(null, null));
      return true;
    },
    _handshakeResponse: function _handshakeResponse() {
      var headers = this._request.headers,
        key1 = headers['sec-websocket-key1'],
        key2 = headers['sec-websocket-key2'];
      if (!key1) throw new Error('Missing required header: Sec-WebSocket-Key1');
      if (!key2) throw new Error('Missing required header: Sec-WebSocket-Key2');
      var number1 = numberFromKey(key1),
        spaces1 = spacesInKey(key1),
        number2 = numberFromKey(key2),
        spaces2 = spacesInKey(key2);
      if (number1 % spaces1 !== 0 || number2 % spaces2 !== 0) throw new Error('Client sent invalid Sec-WebSocket-Key headers');
      this._keyValues = [number1 / spaces1, number2 / spaces2];
      var start = 'HTTP/1.1 101 WebSocket Protocol Handshake',
        headers = [start, this._headers.toString(), ''];
      return Buffer$2.from(headers.join('\r\n'), 'binary');
    },
    _handshakeSignature: function _handshakeSignature() {
      if (this._body.length < this.BODY_SIZE) return null;
      var md5 = crypto$1.createHash('md5'),
        buffer = Buffer$2.allocUnsafe(8 + this.BODY_SIZE);
      buffer.writeUInt32BE(this._keyValues[0], 0);
      buffer.writeUInt32BE(this._keyValues[1], 4);
      Buffer$2.from(this._body).copy(buffer, 8, 0, this.BODY_SIZE);
      md5.update(buffer);
      return Buffer$2.from(md5.digest('binary'), 'binary');
    },
    _sendHandshakeBody: function _sendHandshakeBody() {
      if (!this._started) return;
      var signature = this._handshakeSignature();
      if (!signature) return;
      this._write(signature);
      this._stage = 0;
      this._open();
      if (this._body.length > this.BODY_SIZE) this.parse(this._body.slice(this.BODY_SIZE));
    },
    _parseLeadingByte: function _parseLeadingByte(octet) {
      if (octet !== 0xFF) return Draft75$1.prototype._parseLeadingByte.call(this, octet);
      this._closing = true;
      this._length = 0;
      this._stage = 1;
    }
  };
  for (var key$2 in instance$2) Draft76$1.prototype[key$2] = instance$2[key$2];
  var draft76 = Draft76$1;

  var util$3 = require$$1$3,
    HttpParser = http_parser,
    Base$1 = base,
    Draft75 = draft75,
    Draft76 = draft76,
    Hybi = hybi;
  var Server$2 = function Server(options) {
    Base$1.call(this, null, null, options);
    this._http = new HttpParser('request');
  };
  util$3.inherits(Server$2, Base$1);
  var instance$1 = {
    EVENTS: ['open', 'message', 'error', 'close', 'ping', 'pong'],
    _bindEventListeners: function _bindEventListeners() {
      this.messages.on('error', function () {});
      this.on('error', function () {});
    },
    parse: function parse(chunk) {
      if (this._delegate) return this._delegate.parse(chunk);
      this._http.parse(chunk);
      if (!this._http.isComplete()) return;
      this.method = this._http.method;
      this.url = this._http.url;
      this.headers = this._http.headers;
      this.body = this._http.body;
      var self = this;
      this._delegate = Server$2.http(this, this._options);
      this._delegate.messages = this.messages;
      this._delegate.io = this.io;
      this._open();
      this.EVENTS.forEach(function (event) {
        this._delegate.on(event, function (e) {
          self.emit(event, e);
        });
      }, this);
      this.protocol = this._delegate.protocol;
      this.version = this._delegate.version;
      this.parse(this._http.body);
      this.emit('connect', new Base$1.ConnectEvent());
    },
    _open: function _open() {
      this.__queue.forEach(function (msg) {
        this._delegate[msg[0]].apply(this._delegate, msg[1]);
      }, this);
      this.__queue = [];
    }
  };
  ['addExtension', 'setHeader', 'start', 'frame', 'text', 'binary', 'ping', 'close'].forEach(function (method) {
    instance$1[method] = function () {
      if (this._delegate) {
        return this._delegate[method].apply(this._delegate, arguments);
      } else {
        this.__queue.push([method, arguments]);
        return true;
      }
    };
  });
  for (var key$1 in instance$1) Server$2.prototype[key$1] = instance$1[key$1];
  Server$2.isSecureRequest = function (request) {
    if (request.connection && request.connection.authorized !== undefined) return true;
    if (request.socket && request.socket.secure) return true;
    var headers = request.headers;
    if (!headers) return false;
    if (headers['https'] === 'on') return true;
    if (headers['x-forwarded-ssl'] === 'on') return true;
    if (headers['x-forwarded-scheme'] === 'https') return true;
    if (headers['x-forwarded-proto'] === 'https') return true;
    return false;
  };
  Server$2.determineUrl = function (request) {
    var scheme = this.isSecureRequest(request) ? 'wss:' : 'ws:';
    return scheme + '//' + request.headers.host + request.url;
  };
  Server$2.http = function (request, options) {
    options = options || {};
    if (options.requireMasking === undefined) options.requireMasking = true;
    var headers = request.headers,
      version = headers['sec-websocket-version'],
      key = headers['sec-websocket-key'],
      key1 = headers['sec-websocket-key1'],
      key2 = headers['sec-websocket-key2'],
      url = this.determineUrl(request);
    if (version || key) return new Hybi(request, url, options);else if (key1 || key2) return new Draft76(request, url, options);else return new Draft75(request, url, options);
  };
  var server = Server$2;

  // Protocol references:
  //
  // * http://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-75
  // * http://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-76
  // * http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-17

  var Base = base,
    Client$2 = client$2,
    Server$1 = server;
  var Driver = {
    client: function client(url, options) {
      options = options || {};
      if (options.masking === undefined) options.masking = true;
      return new Client$2(url, options);
    },
    server: function server(options) {
      options = options || {};
      if (options.requireMasking === undefined) options.requireMasking = true;
      return new Server$1(options);
    },
    http: function http() {
      return Server$1.http.apply(Server$1, arguments);
    },
    isSecureRequest: function isSecureRequest(request) {
      return Server$1.isSecureRequest(request);
    },
    isWebSocket: function isWebSocket(request) {
      return Base.isWebSocket(request);
    },
    validateOptions: function validateOptions(options, validKeys) {
      Base.validateOptions(options, validKeys);
    }
  };
  var driver$2 = Driver;

  var Event$2 = function Event(eventType, options) {
    this.type = eventType;
    for (var key in options) this[key] = options[key];
  };
  Event$2.prototype.initEvent = function (eventType, canBubble, cancelable) {
    this.type = eventType;
    this.bubbles = canBubble;
    this.cancelable = cancelable;
  };
  Event$2.prototype.stopPropagation = function () {};
  Event$2.prototype.preventDefault = function () {};
  Event$2.CAPTURING_PHASE = 1;
  Event$2.AT_TARGET = 2;
  Event$2.BUBBLING_PHASE = 3;
  var event = Event$2;

  var Event$1 = event;
  var EventTarget$1 = {
    onopen: null,
    onmessage: null,
    onerror: null,
    onclose: null,
    addEventListener: function addEventListener(eventType, listener, useCapture) {
      this.on(eventType, listener);
    },
    removeEventListener: function removeEventListener(eventType, listener, useCapture) {
      this.removeListener(eventType, listener);
    },
    dispatchEvent: function dispatchEvent(event) {
      event.target = event.currentTarget = this;
      event.eventPhase = Event$1.AT_TARGET;
      if (this['on' + event.type]) this['on' + event.type](event);
      this.emit(event.type, event);
    }
  };
  var event_target = EventTarget$1;

  var Stream = require$$0$3.Stream,
    util$2 = require$$1$3,
    driver$1 = driver$2,
    EventTarget = event_target,
    Event = event;
  var API$1 = function API(options) {
    options = options || {};
    driver$1.validateOptions(options, ['headers', 'extensions', 'maxLength', 'ping', 'proxy', 'tls', 'ca']);
    this.readable = this.writable = true;
    var headers = options.headers;
    if (headers) {
      for (var name in headers) this._driver.setHeader(name, headers[name]);
    }
    var extensions = options.extensions;
    if (extensions) {
      [].concat(extensions).forEach(this._driver.addExtension, this._driver);
    }
    this._ping = options.ping;
    this._pingId = 0;
    this.readyState = API.CONNECTING;
    this.bufferedAmount = 0;
    this.protocol = '';
    this.url = this._driver.url;
    this.version = this._driver.version;
    var self = this;
    this._driver.on('open', function (e) {
      self._open();
    });
    this._driver.on('message', function (e) {
      self._receiveMessage(e.data);
    });
    this._driver.on('close', function (e) {
      self._beginClose(e.reason, e.code);
    });
    this._driver.on('error', function (error) {
      self._emitError(error.message);
    });
    this.on('error', function () {});
    this._driver.messages.on('drain', function () {
      self.emit('drain');
    });
    if (this._ping) this._pingTimer = setInterval(function () {
      self._pingId += 1;
      self.ping(self._pingId.toString());
    }, this._ping * 1000);
    this._configureStream();
    if (!this._proxy) {
      this._stream.pipe(this._driver.io);
      this._driver.io.pipe(this._stream);
    }
  };
  util$2.inherits(API$1, Stream);
  API$1.CONNECTING = 0;
  API$1.OPEN = 1;
  API$1.CLOSING = 2;
  API$1.CLOSED = 3;
  API$1.CLOSE_TIMEOUT = 30000;
  var instance = {
    write: function write(data) {
      return this.send(data);
    },
    end: function end(data) {
      if (data !== undefined) this.send(data);
      this.close();
    },
    pause: function pause() {
      return this._driver.messages.pause();
    },
    resume: function resume() {
      return this._driver.messages.resume();
    },
    send: function send(data) {
      if (this.readyState > API$1.OPEN) return false;
      if (!(data instanceof Buffer)) data = String(data);
      return this._driver.messages.write(data);
    },
    ping: function ping(message, callback) {
      if (this.readyState > API$1.OPEN) return false;
      return this._driver.ping(message, callback);
    },
    close: function close(code, reason) {
      if (code === undefined) code = 1000;
      if (reason === undefined) reason = '';
      if (code !== 1000 && (code < 3000 || code > 4999)) throw new Error("Failed to execute 'close' on WebSocket: " + "The code must be either 1000, or between 3000 and 4999. " + code + " is neither.");
      if (this.readyState < API$1.CLOSING) {
        var self = this;
        this._closeTimer = setTimeout(function () {
          self._beginClose('', 1006);
        }, API$1.CLOSE_TIMEOUT);
      }
      if (this.readyState !== API$1.CLOSED) this.readyState = API$1.CLOSING;
      this._driver.close(reason, code);
    },
    _configureStream: function _configureStream() {
      var self = this;
      this._stream.setTimeout(0);
      this._stream.setNoDelay(true);
      ['close', 'end'].forEach(function (event) {
        this._stream.on(event, function () {
          self._finalizeClose();
        });
      }, this);
      this._stream.on('error', function (error) {
        self._emitError('Network error: ' + self.url + ': ' + error.message);
        self._finalizeClose();
      });
    },
    _open: function _open() {
      if (this.readyState !== API$1.CONNECTING) return;
      this.readyState = API$1.OPEN;
      this.protocol = this._driver.protocol || '';
      var event = new Event('open');
      event.initEvent('open', false, false);
      this.dispatchEvent(event);
    },
    _receiveMessage: function _receiveMessage(data) {
      if (this.readyState > API$1.OPEN) return false;
      if (this.readable) this.emit('data', data);
      var event = new Event('message', {
        data: data
      });
      event.initEvent('message', false, false);
      this.dispatchEvent(event);
    },
    _emitError: function _emitError(message) {
      if (this.readyState >= API$1.CLOSING) return;
      var event = new Event('error', {
        message: message
      });
      event.initEvent('error', false, false);
      this.dispatchEvent(event);
    },
    _beginClose: function _beginClose(reason, code) {
      if (this.readyState === API$1.CLOSED) return;
      this.readyState = API$1.CLOSING;
      this._closeParams = [reason, code];
      if (this._stream) {
        this._stream.destroy();
        if (!this._stream.readable) this._finalizeClose();
      }
    },
    _finalizeClose: function _finalizeClose() {
      if (this.readyState === API$1.CLOSED) return;
      this.readyState = API$1.CLOSED;
      if (this._closeTimer) clearTimeout(this._closeTimer);
      if (this._pingTimer) clearInterval(this._pingTimer);
      if (this._stream) this._stream.end();
      if (this.readable) this.emit('end');
      this.readable = this.writable = false;
      var reason = this._closeParams ? this._closeParams[0] : '',
        code = this._closeParams ? this._closeParams[1] : 1006;
      var event = new Event('close', {
        code: code,
        reason: reason
      });
      event.initEvent('close', false, false);
      this.dispatchEvent(event);
    }
  };
  for (var method$1 in instance) API$1.prototype[method$1] = instance[method$1];
  for (var key in EventTarget) API$1.prototype[key] = EventTarget[key];
  var api = API$1;

  var client$1;
  var hasRequiredClient;
  function requireClient() {
    if (hasRequiredClient) return client$1;
    hasRequiredClient = 1;
    var util = require$$1$3,
      net = require$$0$7,
      tls = require$$1$4,
      url = Url$1,
      driver = driver$2,
      API = api;
    var DEFAULT_PORTS = {
        'http:': 80,
        'https:': 443,
        'ws:': 80,
        'wss:': 443
      },
      SECURE_PROTOCOLS = ['https:', 'wss:'];
    var Client = function Client(_url, protocols, options) {
      options = options || {};
      this.url = _url;
      this._driver = driver.client(this.url, {
        maxLength: options.maxLength,
        protocols: protocols
      });
      ['open', 'error'].forEach(function (event) {
        this._driver.on(event, function () {
          self.headers = self._driver.headers;
          self.statusCode = self._driver.statusCode;
        });
      }, this);
      var proxy = options.proxy || {},
        endpoint = url.parse(proxy.origin || this.url),
        port = endpoint.port || DEFAULT_PORTS[endpoint.protocol],
        secure = SECURE_PROTOCOLS.indexOf(endpoint.protocol) >= 0,
        onConnect = function onConnect() {
          self._onConnect();
        },
        netOptions = options.net || {},
        originTLS = options.tls || {},
        socketTLS = proxy.origin ? proxy.tls || {} : originTLS,
        self = this;
      netOptions.host = socketTLS.host = endpoint.hostname;
      netOptions.port = socketTLS.port = port;
      originTLS.ca = originTLS.ca || options.ca;
      socketTLS.servername = socketTLS.servername || endpoint.hostname;
      this._stream = secure ? tls.connect(socketTLS, onConnect) : net.connect(netOptions, onConnect);
      if (proxy.origin) this._configureProxy(proxy, originTLS);
      API.call(this, options);
    };
    util.inherits(Client, API);
    Client.prototype._onConnect = function () {
      var worker = this._proxy || this._driver;
      worker.start();
    };
    Client.prototype._configureProxy = function (proxy, originTLS) {
      var uri = url.parse(this.url),
        secure = SECURE_PROTOCOLS.indexOf(uri.protocol) >= 0,
        self = this,
        name;
      this._proxy = this._driver.proxy(proxy.origin);
      if (proxy.headers) {
        for (name in proxy.headers) this._proxy.setHeader(name, proxy.headers[name]);
      }
      this._proxy.pipe(this._stream, {
        end: false
      });
      this._stream.pipe(this._proxy);
      this._proxy.on('connect', function () {
        if (secure) {
          var options = {
            socket: self._stream,
            servername: uri.hostname
          };
          for (name in originTLS) options[name] = originTLS[name];
          self._stream = tls.connect(options);
          self._configureStream();
        }
        self._driver.io.pipe(self._stream);
        self._stream.pipe(self._driver.io);
        self._driver.start();
      });
      this._proxy.on('error', function (error) {
        self._driver.emit('error', error);
      });
    };
    client$1 = Client;
    return client$1;
  }

  var eventsource;
  var hasRequiredEventsource;
  function requireEventsource() {
    if (hasRequiredEventsource) return eventsource;
    hasRequiredEventsource = 1;
    var Stream = require$$0$3.Stream,
      util = require$$1$3,
      driver = driver$2,
      Headers = requireHeaders(),
      API = api,
      EventTarget = event_target,
      Event = event;
    var EventSource = function EventSource(request, response, options) {
      this.writable = true;
      options = options || {};
      this._stream = response.socket;
      this._ping = options.ping || this.DEFAULT_PING;
      this._retry = options.retry || this.DEFAULT_RETRY;
      var scheme = driver.isSecureRequest(request) ? 'https:' : 'http:';
      this.url = scheme + '//' + request.headers.host + request.url;
      this.lastEventId = request.headers['last-event-id'] || '';
      this.readyState = API.CONNECTING;
      var headers = new Headers(),
        self = this;
      if (options.headers) {
        for (var key in options.headers) headers.set(key, options.headers[key]);
      }
      if (!this._stream || !this._stream.writable) return;
      process.nextTick(function () {
        self._open();
      });
      this._stream.setTimeout(0);
      this._stream.setNoDelay(true);
      var handshake = 'HTTP/1.1 200 OK\r\n' + 'Content-Type: text/event-stream\r\n' + 'Cache-Control: no-cache, no-store\r\n' + 'Connection: close\r\n' + headers.toString() + '\r\n' + 'retry: ' + Math.floor(this._retry * 1000) + '\r\n\r\n';
      this._write(handshake);
      this._stream.on('drain', function () {
        self.emit('drain');
      });
      if (this._ping) this._pingTimer = setInterval(function () {
        self.ping();
      }, this._ping * 1000);
      ['error', 'end'].forEach(function (event) {
        self._stream.on(event, function () {
          self.close();
        });
      });
    };
    util.inherits(EventSource, Stream);
    EventSource.isEventSource = function (request) {
      if (request.method !== 'GET') return false;
      var accept = (request.headers.accept || '').split(/\s*,\s*/);
      return accept.indexOf('text/event-stream') >= 0;
    };
    var instance = {
      DEFAULT_PING: 10,
      DEFAULT_RETRY: 5,
      _write: function _write(chunk) {
        if (!this.writable) return false;
        try {
          return this._stream.write(chunk, 'utf8');
        } catch (e) {
          return false;
        }
      },
      _open: function _open() {
        if (this.readyState !== API.CONNECTING) return;
        this.readyState = API.OPEN;
        var event = new Event('open');
        event.initEvent('open', false, false);
        this.dispatchEvent(event);
      },
      write: function write(message) {
        return this.send(message);
      },
      end: function end(message) {
        if (message !== undefined) this.write(message);
        this.close();
      },
      send: function send(message, options) {
        if (this.readyState > API.OPEN) return false;
        message = String(message).replace(/(\r\n|\r|\n)/g, '$1data: ');
        options = options || {};
        var frame = '';
        if (options.event) frame += 'event: ' + options.event + '\r\n';
        if (options.id) frame += 'id: ' + options.id + '\r\n';
        frame += 'data: ' + message + '\r\n\r\n';
        return this._write(frame);
      },
      ping: function ping() {
        return this._write(':\r\n\r\n');
      },
      close: function close() {
        if (this.readyState > API.OPEN) return false;
        this.readyState = API.CLOSED;
        this.writable = false;
        if (this._pingTimer) clearInterval(this._pingTimer);
        if (this._stream) this._stream.end();
        var event = new Event('close');
        event.initEvent('close', false, false);
        this.dispatchEvent(event);
        return true;
      }
    };
    for (var method in instance) EventSource.prototype[method] = instance[method];
    for (var key in EventTarget) EventSource.prototype[key] = EventTarget[key];
    eventsource = EventSource;
    return eventsource;
  }

  var util$1 = require$$1$3,
    driver = driver$2,
    API = api;
  var WebSocket$1 = function WebSocket(request, socket, body, protocols, options) {
    options = options || {};
    this._stream = socket;
    this._driver = driver.http(request, {
      maxLength: options.maxLength,
      protocols: protocols
    });
    var self = this;
    if (!this._stream || !this._stream.writable) return;
    if (!this._stream.readable) return this._stream.end();
    var catchup = function catchup() {
      self._stream.removeListener('data', catchup);
    };
    this._stream.on('data', catchup);
    API.call(this, options);
    process.nextTick(function () {
      self._driver.start();
      self._driver.io.write(body);
    });
  };
  util$1.inherits(WebSocket$1, API);
  WebSocket$1.isWebSocket = function (request) {
    return driver.isWebSocket(request);
  };
  WebSocket$1.validateOptions = function (options, validKeys) {
    driver.validateOptions(options, validKeys);
  };
  WebSocket$1.WebSocket = WebSocket$1;
  WebSocket$1.Client = requireClient();
  WebSocket$1.EventSource = requireEventsource();
  var websocket = WebSocket$1;

  var node_websocket;
  var hasRequiredNode_websocket;
  function requireNode_websocket() {
    if (hasRequiredNode_websocket) return node_websocket;
    hasRequiredNode_websocket = 1;
    var WS = websocket.Client;
    node_websocket = {
      create: function create(url, protocols, options) {
        return new WS(url, protocols, options);
      }
    };
    return node_websocket;
  }

  var web_socket;
  var hasRequiredWeb_socket;
  function requireWeb_socket() {
    if (hasRequiredWeb_socket) return web_socket;
    hasRequiredWeb_socket = 1;
    var Class = _class,
      Promise = promise,
      Set = set,
      URI = uri,
      browser = node_shim,
      copyObject = copy_object,
      assign = assign$f,
      toJSON = to_json,
      ws = requireNode_websocket(),
      Deferrable = deferrable,
      Transport = transport;
    var WebSocket = assign(Class(Transport, {
      UNCONNECTED: 1,
      CONNECTING: 2,
      CONNECTED: 3,
      batching: false,
      isUsable: function isUsable(callback, context) {
        this.callback(function () {
          callback.call(context, true);
        });
        this.errback(function () {
          callback.call(context, false);
        });
        this.connect();
      },
      request: function request(messages) {
        this._pending = this._pending || new Set();
        for (var i = 0, n = messages.length; i < n; i++) this._pending.add(messages[i]);
        var self = this;
        var promise = new Promise(function (resolve, reject) {
          self.callback(function (socket) {
            if (!socket || socket.readyState !== 1) return;
            socket.send(toJSON(messages));
            resolve(socket);
          });
          self.connect();
        });
        return {
          abort: function abort() {
            promise.then(function (ws) {
              ws.close();
            });
          }
        };
      },
      connect: function connect() {
        if (WebSocket._unloaded) return;
        this._state = this._state || this.UNCONNECTED;
        if (this._state !== this.UNCONNECTED) return;
        this._state = this.CONNECTING;
        var socket = this._createSocket();
        if (!socket) return this.setDeferredStatus('failed');
        var self = this;
        socket.onopen = function () {
          if (socket.headers) self._storeCookies(socket.headers['set-cookie']);
          self._socket = socket;
          self._state = self.CONNECTED;
          self._everConnected = true;
          self.setDeferredStatus('succeeded', socket);
        };
        var closed = false;
        socket.onclose = socket.onerror = function () {
          if (closed) return;
          closed = true;
          var wasConnected = self._state === self.CONNECTED;
          socket.onopen = socket.onclose = socket.onerror = socket.onmessage = null;
          delete self._socket;
          self._state = self.UNCONNECTED;
          var pending = self._pending ? self._pending.toArray() : [];
          delete self._pending;
          if (wasConnected || self._everConnected) {
            self.setDeferredStatus('unknown');
            self._handleError(pending, wasConnected);
          } else {
            self.setDeferredStatus('failed');
          }
        };
        socket.onmessage = function (event) {
          var replies;
          try {
            replies = JSON.parse(event.data);
          } catch (error) {}
          if (!replies) return;
          replies = [].concat(replies);
          for (var i = 0, n = replies.length; i < n; i++) {
            if (replies[i].successful === undefined) continue;
            self._pending.remove(replies[i]);
          }
          self._receive(replies);
        };
      },
      close: function close() {
        if (!this._socket) return;
        this._socket.close();
      },
      _createSocket: function _createSocket() {
        var url = WebSocket.getSocketUrl(this.endpoint),
          headers = this._dispatcher.headers,
          extensions = this._dispatcher.wsExtensions,
          cookie = this._getCookies(),
          tls = this._dispatcher.tls,
          options = {
            extensions: extensions,
            headers: headers,
            proxy: this._proxy,
            tls: tls
          };
        if (cookie !== '') options.headers['Cookie'] = cookie;
        try {
          return ws.create(url, [], options);
        } catch (e) {
          // catch CSP error to allow transport to fallback to next connType
        }
      }
    }), {
      PROTOCOLS: {
        'http:': 'ws:',
        'https:': 'wss:'
      },
      create: function create(dispatcher, endpoint) {
        var sockets = dispatcher.transports.websocket = dispatcher.transports.websocket || {};
        sockets[endpoint.href] = sockets[endpoint.href] || new this(dispatcher, endpoint);
        return sockets[endpoint.href];
      },
      getSocketUrl: function getSocketUrl(endpoint) {
        endpoint = copyObject(endpoint);
        endpoint.protocol = this.PROTOCOLS[endpoint.protocol];
        return URI.stringify(endpoint);
      },
      isUsable: function isUsable(dispatcher, endpoint, callback, context) {
        this.create(dispatcher, endpoint).isUsable(callback, context);
      }
    });
    assign(WebSocket.prototype, Deferrable);
    if (browser.Event && commonjsGlobal.onbeforeunload !== undefined) {
      browser.Event.on(commonjsGlobal, 'beforeunload', function () {
        if (WebSocket._unloaded === undefined) WebSocket._unloaded = true;
      });
    }
    web_socket = WebSocket;
    return web_socket;
  }

  var tunnelAgent = {};

  var hasRequiredTunnelAgent;
  function requireTunnelAgent() {
    if (hasRequiredTunnelAgent) return tunnelAgent;
    hasRequiredTunnelAgent = 1;
    var tls = require$$1$4,
      http = http$1,
      https = https$1,
      events = require$$0$6,
      assert = require$$3,
      util = require$$1$3,
      Buffer = safeBufferExports.Buffer;
    tunnelAgent.httpOverHttp = httpOverHttp;
    tunnelAgent.httpsOverHttp = httpsOverHttp;
    tunnelAgent.httpOverHttps = httpOverHttps;
    tunnelAgent.httpsOverHttps = httpsOverHttps;
    function httpOverHttp(options) {
      var agent = new TunnelingAgent(options);
      agent.request = http.request;
      return agent;
    }
    function httpsOverHttp(options) {
      var agent = new TunnelingAgent(options);
      agent.request = http.request;
      agent.createSocket = createSecureSocket;
      agent.defaultPort = 443;
      return agent;
    }
    function httpOverHttps(options) {
      var agent = new TunnelingAgent(options);
      agent.request = https.request;
      return agent;
    }
    function httpsOverHttps(options) {
      var agent = new TunnelingAgent(options);
      agent.request = https.request;
      agent.createSocket = createSecureSocket;
      agent.defaultPort = 443;
      return agent;
    }
    function TunnelingAgent(options) {
      var self = this;
      self.options = options || {};
      self.proxyOptions = self.options.proxy || {};
      self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets;
      self.requests = [];
      self.sockets = [];
      self.on('free', function onFree(socket, host, port) {
        for (var i = 0, len = self.requests.length; i < len; ++i) {
          var pending = self.requests[i];
          if (pending.host === host && pending.port === port) {
            // Detect the request to connect same origin server,
            // reuse the connection.
            self.requests.splice(i, 1);
            pending.request.onSocket(socket);
            return;
          }
        }
        socket.destroy();
        self.removeSocket(socket);
      });
    }
    util.inherits(TunnelingAgent, events.EventEmitter);
    TunnelingAgent.prototype.addRequest = function addRequest(req, options) {
      var self = this;

      // Legacy API: addRequest(req, host, port, path)
      if (typeof options === 'string') {
        options = {
          host: options,
          port: arguments[2],
          path: arguments[3]
        };
      }
      if (self.sockets.length >= this.maxSockets) {
        // We are over limit so we'll add it to the queue.
        self.requests.push({
          host: options.host,
          port: options.port,
          request: req
        });
        return;
      }

      // If we are under maxSockets create a new one.
      self.createConnection({
        host: options.host,
        port: options.port,
        request: req
      });
    };
    TunnelingAgent.prototype.createConnection = function createConnection(pending) {
      var self = this;
      self.createSocket(pending, function (socket) {
        socket.on('free', onFree);
        socket.on('close', onCloseOrRemove);
        socket.on('agentRemove', onCloseOrRemove);
        pending.request.onSocket(socket);
        function onFree() {
          self.emit('free', socket, pending.host, pending.port);
        }
        function onCloseOrRemove(err) {
          self.removeSocket(socket);
          socket.removeListener('free', onFree);
          socket.removeListener('close', onCloseOrRemove);
          socket.removeListener('agentRemove', onCloseOrRemove);
        }
      });
    };
    TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
      var self = this;
      var placeholder = {};
      self.sockets.push(placeholder);
      var connectOptions = mergeOptions({}, self.proxyOptions, {
        method: 'CONNECT',
        path: options.host + ':' + options.port,
        agent: false
      });
      if (connectOptions.proxyAuth) {
        connectOptions.headers = connectOptions.headers || {};
        connectOptions.headers['Proxy-Authorization'] = 'Basic ' + Buffer.from(connectOptions.proxyAuth).toString('base64');
      }
      debug('making CONNECT request');
      var connectReq = self.request(connectOptions);
      connectReq.useChunkedEncodingByDefault = false; // for v0.6
      connectReq.once('response', onResponse); // for v0.6
      connectReq.once('upgrade', onUpgrade); // for v0.6
      connectReq.once('connect', onConnect); // for v0.7 or later
      connectReq.once('error', onError);
      connectReq.end();
      function onResponse(res) {
        // Very hacky. This is necessary to avoid http-parser leaks.
        res.upgrade = true;
      }
      function onUpgrade(res, socket, head) {
        // Hacky.
        process.nextTick(function () {
          onConnect(res, socket, head);
        });
      }
      function onConnect(res, socket, head) {
        connectReq.removeAllListeners();
        socket.removeAllListeners();
        if (res.statusCode === 200) {
          assert.equal(head.length, 0);
          debug('tunneling connection has established');
          self.sockets[self.sockets.indexOf(placeholder)] = socket;
          cb(socket);
        } else {
          debug('tunneling socket could not be established, statusCode=%d', res.statusCode);
          var error = new Error('tunneling socket could not be established, ' + 'statusCode=' + res.statusCode);
          error.code = 'ECONNRESET';
          options.request.emit('error', error);
          self.removeSocket(placeholder);
        }
      }
      function onError(cause) {
        connectReq.removeAllListeners();
        debug('tunneling socket could not be established, cause=%s\n', cause.message, cause.stack);
        var error = new Error('tunneling socket could not be established, ' + 'cause=' + cause.message);
        error.code = 'ECONNRESET';
        options.request.emit('error', error);
        self.removeSocket(placeholder);
      }
    };
    TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
      var pos = this.sockets.indexOf(socket);
      if (pos === -1) return;
      this.sockets.splice(pos, 1);
      var pending = this.requests.shift();
      if (pending) {
        // If we have pending requests and a socket gets closed a new one
        // needs to be created to take over in the pool for the one that closed.
        this.createConnection(pending);
      }
    };
    function createSecureSocket(options, cb) {
      var self = this;
      TunnelingAgent.prototype.createSocket.call(self, options, function (socket) {
        // 0 is dummy port for v0.6
        var secureSocket = tls.connect(0, mergeOptions({}, self.options, {
          servername: options.host,
          socket: socket
        }));
        self.sockets[self.sockets.indexOf(socket)] = secureSocket;
        cb(secureSocket);
      });
    }
    function mergeOptions(target) {
      for (var i = 1, len = arguments.length; i < len; ++i) {
        var overrides = arguments[i];
        if (_typeof(overrides) === 'object') {
          var keys = Object.keys(overrides);
          for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
            var k = keys[j];
            if (overrides[k] !== undefined) {
              target[k] = overrides[k];
            }
          }
        }
      }
      return target;
    }
    var debug;
    if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
      debug = function debug() {
        var args = Array.prototype.slice.call(arguments);
        if (typeof args[0] === 'string') {
          args[0] = 'TUNNEL: ' + args[0];
        } else {
          args.unshift('TUNNEL:');
        }
        console.error.apply(console, args);
      };
    } else {
      debug = function debug() {};
    }
    tunnelAgent.debug = debug; // for test
    return tunnelAgent;
  }

  var node_http;
  var hasRequiredNode_http;
  function requireNode_http() {
    if (hasRequiredNode_http) return node_http;
    hasRequiredNode_http = 1;
    var Buffer = safeBufferExports.Buffer,
      http = http$1,
      https = https$1,
      tunnel = requireTunnelAgent();
    var Class = _class,
      URI = uri,
      assign = assign$f,
      toJSON = to_json,
      Transport = transport;
    var NodeHttp = assign(Class(Transport, {
      className: 'NodeHttp',
      SECURE_PROTOCOLS: ['https:', 'wss:'],
      initialize: function initialize() {
        Transport.prototype.initialize.apply(this, arguments);
        this._endpointSecure = this.SECURE_PROTOCOLS.indexOf(this.endpoint.protocol) >= 0;
        this._httpClient = this._endpointSecure ? https : http;
        var proxy = this._proxy;
        if (!proxy.origin) return;
        this._proxyUri = URI.parse(proxy.origin);
        this._proxySecure = this.SECURE_PROTOCOLS.indexOf(this._proxyUri.protocol) >= 0;
        if (!this._endpointSecure) {
          this._httpClient = this._proxySecure ? https : http;
          return;
        }
        var options = assign({
          proxy: {
            host: this._proxyUri.hostname,
            port: this._proxyUri.port || this.DEFAULT_PORTS[this._proxyUri.protocol],
            proxyAuth: this._proxyUri.auth,
            headers: assign({
              host: this.endpoint.host
            }, proxy.headers)
          }
        }, this._dispatcher.tls);
        if (this._proxySecure) {
          assign(options.proxy, proxy.tls);
          this._tunnel = tunnel.httpsOverHttps(options);
        } else {
          this._tunnel = tunnel.httpsOverHttp(options);
        }
      },
      encode: function encode(messages) {
        return toJSON(messages);
      },
      request: function request(messages) {
        var content = Buffer.from(this.encode(messages), 'utf8'),
          params = this._buildParams(content),
          request = this._httpClient.request(params),
          self = this;
        request.on('response', function (response) {
          self._handleResponse(messages, response);
          self._storeCookies(response.headers['set-cookie']);
        });
        request.on('error', function (error) {
          self.error('HTTP error: ' + error.message);
          self._handleError(messages);
        });
        request.end(content);
        return request;
      },
      _buildParams: function _buildParams(content) {
        var uri = this.endpoint,
          proxy = this._proxyUri,
          target = this._tunnel ? uri : proxy || uri;
        var headers = {
          'Content-Length': content.length,
          'Content-Type': 'application/json',
          'Host': uri.host
        };
        if (uri.auth) headers['Authorization'] = 'Basic ' + Buffer.from(uri.auth, 'utf8').toString('base64');
        var params = {
          method: 'POST',
          host: target.hostname,
          port: target.port || this.DEFAULT_PORTS[target.protocol],
          path: uri.path,
          headers: assign(headers, this._dispatcher.headers)
        };
        var cookie = this._getCookies();
        if (cookie !== '') params.headers['Cookie'] = cookie;
        if (this._tunnel) {
          params.agent = this._tunnel;
        } else if (this._endpointSecure) {
          assign(params, this._dispatcher.tls);
        } else if (proxy) {
          params.path = this.endpoint.href;
          assign(params, this._proxy.tls);
          if (proxy.auth) params.headers['Proxy-Authorization'] = Buffer.from(proxy.auth, 'utf8').toString('base64');
        }
        return params;
      },
      _handleResponse: function _handleResponse(messages, response) {
        var body = '',
          self = this;
        response.setEncoding('utf8');
        response.on('data', function (chunk) {
          body += chunk;
        });
        response.on('end', function () {
          var replies;
          try {
            replies = JSON.parse(body);
          } catch (error) {}
          if (replies) self._receive(replies);else self._handleError(messages);
        });
      }
    }), {
      isUsable: function isUsable(dispatcher, endpoint, callback, context) {
        callback.call(context, URI.isURI(endpoint));
      }
    });
    node_http = NodeHttp;
    return node_http;
  }

  var Transport$1 = transport;
  Transport$1.register('in-process', requireNode_local());
  Transport$1.register('websocket', requireWeb_socket());
  Transport$1.register('long-polling', requireNode_http());
  var node_transports = Transport$1;

  var assign$5 = assign$f;
  var Scheduler$1 = function Scheduler(message, options) {
    this.message = message;
    this.options = options;
    this.attempts = 0;
  };
  assign$5(Scheduler$1.prototype, {
    getTimeout: function getTimeout() {
      return this.options.timeout;
    },
    getInterval: function getInterval() {
      return this.options.interval;
    },
    isDeliverable: function isDeliverable() {
      var attempts = this.options.attempts,
        made = this.attempts,
        deadline = this.options.deadline,
        now = new Date().getTime();
      if (attempts !== undefined && made >= attempts) return false;
      if (deadline !== undefined && now > deadline) return false;
      return true;
    },
    send: function send() {
      this.attempts += 1;
    },
    succeed: function succeed() {},
    fail: function fail() {},
    abort: function abort() {}
  });
  var scheduler = Scheduler$1;

  var Class$5 = _class,
    URI = uri,
    cookies = node_cookies,
    assign$4 = assign$f,
    Logging$3 = logging,
    Publisher$2 = publisher,
    Transport = node_transports,
    Scheduler = scheduler;
  var Dispatcher$1 = Class$5({
    className: 'Dispatcher',
    MAX_REQUEST_SIZE: 2048,
    DEFAULT_RETRY: 5,
    UP: 1,
    DOWN: 2,
    initialize: function initialize(client, endpoint, options) {
      this._client = client;
      this.endpoint = URI.parse(endpoint);
      this._alternates = options.endpoints || {};
      this.cookies = cookies.CookieJar && new cookies.CookieJar();
      this._disabled = [];
      this._envelopes = {};
      this.headers = {};
      this.retry = options.retry || this.DEFAULT_RETRY;
      this._scheduler = options.scheduler || Scheduler;
      this._state = 0;
      this.transports = {};
      this.wsExtensions = [];
      this.proxy = options.proxy || {};
      if (typeof this._proxy === 'string') this._proxy = {
        origin: this._proxy
      };
      var exts = options.websocketExtensions;
      if (exts) {
        exts = [].concat(exts);
        for (var i = 0, n = exts.length; i < n; i++) this.addWebsocketExtension(exts[i]);
      }
      this.tls = options.tls || {};
      this.tls.ca = this.tls.ca || options.ca;
      for (var type in this._alternates) this._alternates[type] = URI.parse(this._alternates[type]);
      this.maxRequestSize = this.MAX_REQUEST_SIZE;
    },
    endpointFor: function endpointFor(connectionType) {
      return this._alternates[connectionType] || this.endpoint;
    },
    addWebsocketExtension: function addWebsocketExtension(extension) {
      this.wsExtensions.push(extension);
    },
    disable: function disable(feature) {
      this._disabled.push(feature);
      Transport.disable(feature);
    },
    setHeader: function setHeader(name, value) {
      this.headers[name] = value;
    },
    close: function close() {
      var transport = this._transport;
      delete this._transport;
      if (transport) transport.close();
    },
    getConnectionTypes: function getConnectionTypes() {
      return Transport.getConnectionTypes();
    },
    selectTransport: function selectTransport(transportTypes) {
      Transport.get(this, transportTypes, this._disabled, function (transport) {
        this.debug('Selected ? transport for ?', transport.connectionType, transport.endpoint.href);
        if (transport === this._transport) return;
        if (this._transport) this._transport.close();
        this._transport = transport;
        this.connectionType = transport.connectionType;
      }, this);
    },
    sendMessage: function sendMessage(message, timeout, options) {
      options = options || {};
      var id = message.id,
        attempts = options.attempts,
        deadline = options.deadline && new Date().getTime() + options.deadline * 1000,
        envelope = this._envelopes[id],
        scheduler;
      if (!envelope) {
        scheduler = new this._scheduler(message, {
          timeout: timeout,
          interval: this.retry,
          attempts: attempts,
          deadline: deadline
        });
        envelope = this._envelopes[id] = {
          message: message,
          scheduler: scheduler
        };
      }
      this._sendEnvelope(envelope);
    },
    _sendEnvelope: function _sendEnvelope(envelope) {
      if (!this._transport) return;
      if (envelope.request || envelope.timer) return;
      var message = envelope.message,
        scheduler = envelope.scheduler,
        self = this;
      if (!scheduler.isDeliverable()) {
        scheduler.abort();
        delete this._envelopes[message.id];
        return;
      }
      envelope.timer = commonjsGlobal.setTimeout(function () {
        self.handleError(message);
      }, scheduler.getTimeout() * 1000);
      scheduler.send();
      envelope.request = this._transport.sendMessage(message);
    },
    handleResponse: function handleResponse(reply) {
      var envelope = this._envelopes[reply.id];
      if (reply.successful !== undefined && envelope) {
        envelope.scheduler.succeed();
        delete this._envelopes[reply.id];
        commonjsGlobal.clearTimeout(envelope.timer);
      }
      this.trigger('message', reply);
      if (this._state === this.UP) return;
      this._state = this.UP;
      this._client.trigger('transport:up');
    },
    handleError: function handleError(message, immediate) {
      var envelope = this._envelopes[message.id],
        request = envelope && envelope.request,
        self = this;
      if (!request) return;
      request.then(function (req) {
        if (req && req.abort) req.abort();
      });
      var scheduler = envelope.scheduler;
      scheduler.fail();
      commonjsGlobal.clearTimeout(envelope.timer);
      envelope.request = envelope.timer = null;
      if (immediate) {
        this._sendEnvelope(envelope);
      } else {
        envelope.timer = commonjsGlobal.setTimeout(function () {
          envelope.timer = null;
          self._sendEnvelope(envelope);
        }, scheduler.getInterval() * 1000);
      }
      if (this._state === this.DOWN) return;
      this._state = this.DOWN;
      this._client.trigger('transport:down');
    }
  });
  Dispatcher$1.create = function (client, endpoint, options) {
    return new Dispatcher$1(client, endpoint, options);
  };
  assign$4(Dispatcher$1.prototype, Publisher$2);
  assign$4(Dispatcher$1.prototype, Logging$3);
  var dispatcher = Dispatcher$1;

  var Class$4 = _class,
    Deferrable$2 = deferrable;
  var publication = Class$4(Deferrable$2);

  var Class$3 = _class,
    assign$3 = assign$f,
    Deferrable$1 = deferrable;
  var Subscription$1 = Class$3({
    initialize: function initialize(client, channels, callback, context) {
      this._client = client;
      this._channels = channels;
      this._callback = callback;
      this._context = context;
      this._cancelled = false;
    },
    withChannel: function withChannel(callback, context) {
      this._withChannel = [callback, context];
      return this;
    },
    apply: function apply(context, args) {
      var message = args[0];
      if (this._callback) this._callback.call(this._context, message.data);
      if (this._withChannel) this._withChannel[0].call(this._withChannel[1], message.channel, message.data);
    },
    cancel: function cancel() {
      if (this._cancelled) return;
      this._client.unsubscribe(this._channels, this);
      this._cancelled = true;
    },
    unsubscribe: function unsubscribe() {
      this.cancel();
    }
  });
  assign$3(Subscription$1.prototype, Deferrable$1);
  var subscription = Subscription$1;

  var asap = asap_1,
    Class$2 = _class,
    array$1 = array$5,
    browser = node_shim,
    constants$2 = constants$5,
    assign$2 = assign$f,
    validateOptions$1 = validate_options,
    Deferrable = deferrable,
    Logging$2 = logging,
    Publisher$1 = publisher,
    Channel = channel,
    Dispatcher = dispatcher,
    Error$1 = error,
    Extensible = extensible,
    Publication = publication,
    Subscription = subscription;
  var Client$1 = Class$2({
    className: 'Client',
    UNCONNECTED: 1,
    CONNECTING: 2,
    CONNECTED: 3,
    DISCONNECTED: 4,
    HANDSHAKE: 'handshake',
    RETRY: 'retry',
    NONE: 'none',
    CONNECTION_TIMEOUT: 60,
    DEFAULT_ENDPOINT: '/bayeux',
    INTERVAL: 0,
    initialize: function initialize(endpoint, options) {
      this.info('New client created for ?', endpoint);
      options = options || {};
      validateOptions$1(options, ['interval', 'timeout', 'endpoints', 'proxy', 'retry', 'scheduler', 'websocketExtensions', 'tls', 'ca']);
      this._channels = new Channel.Set();
      this._dispatcher = Dispatcher.create(this, endpoint || this.DEFAULT_ENDPOINT, options);
      this._messageId = 0;
      this._state = this.UNCONNECTED;
      this._responseCallbacks = {};
      this._advice = {
        reconnect: this.RETRY,
        interval: 1000 * (options.interval || this.INTERVAL),
        timeout: 1000 * (options.timeout || this.CONNECTION_TIMEOUT)
      };
      this._dispatcher.timeout = this._advice.timeout / 1000;
      this._dispatcher.bind('message', this._receiveMessage, this);
      if (browser.Event && commonjsGlobal.onbeforeunload !== undefined) browser.Event.on(commonjsGlobal, 'beforeunload', function () {
        if (array$1.indexOf(this._dispatcher._disabled, 'autodisconnect') < 0) this.disconnect();
      }, this);
    },
    addWebsocketExtension: function addWebsocketExtension(extension) {
      return this._dispatcher.addWebsocketExtension(extension);
    },
    disable: function disable(feature) {
      return this._dispatcher.disable(feature);
    },
    setHeader: function setHeader(name, value) {
      return this._dispatcher.setHeader(name, value);
    },
    // Request
    // MUST include:  * channel
    //                * version
    //                * supportedConnectionTypes
    // MAY include:   * minimumVersion
    //                * ext
    //                * id
    //
    // Success Response                             Failed Response
    // MUST include:  * channel                     MUST include:  * channel
    //                * version                                    * successful
    //                * supportedConnectionTypes                   * error
    //                * clientId                    MAY include:   * supportedConnectionTypes
    //                * successful                                 * advice
    // MAY include:   * minimumVersion                             * version
    //                * advice                                     * minimumVersion
    //                * ext                                        * ext
    //                * id                                         * id
    //                * authSuccessful
    handshake: function handshake(callback, context) {
      if (this._advice.reconnect === this.NONE) return;
      if (this._state !== this.UNCONNECTED) return;
      this._state = this.CONNECTING;
      var self = this;
      this.info('Initiating handshake with ?', this._dispatcher.endpoint.href);
      this._dispatcher.selectTransport(constants$2.MANDATORY_CONNECTION_TYPES);
      this._sendMessage({
        channel: Channel.HANDSHAKE,
        version: constants$2.BAYEUX_VERSION,
        supportedConnectionTypes: this._dispatcher.getConnectionTypes()
      }, {}, function (response) {
        if (response.successful) {
          this._state = this.CONNECTED;
          this._dispatcher.clientId = response.clientId;
          this._dispatcher.selectTransport(response.supportedConnectionTypes);
          this.info('Handshake successful: ?', this._dispatcher.clientId);
          this.subscribe(this._channels.getKeys(), true);
          if (callback) asap(function () {
            callback.call(context);
          });
        } else {
          this.info('Handshake unsuccessful');
          commonjsGlobal.setTimeout(function () {
            self.handshake(callback, context);
          }, this._dispatcher.retry * 1000);
          this._state = this.UNCONNECTED;
        }
      }, this);
    },
    // Request                              Response
    // MUST include:  * channel             MUST include:  * channel
    //                * clientId                           * successful
    //                * connectionType                     * clientId
    // MAY include:   * ext                 MAY include:   * error
    //                * id                                 * advice
    //                                                     * ext
    //                                                     * id
    //                                                     * timestamp
    connect: function connect(callback, context) {
      if (this._advice.reconnect === this.NONE) return;
      if (this._state === this.DISCONNECTED) return;
      if (this._state === this.UNCONNECTED) return this.handshake(function () {
        this.connect(callback, context);
      }, this);
      this.callback(callback, context);
      if (this._state !== this.CONNECTED) return;
      this.info('Calling deferred actions for ?', this._dispatcher.clientId);
      this.setDeferredStatus('succeeded');
      this.setDeferredStatus('unknown');
      if (this._connectRequest) return;
      this._connectRequest = true;
      this.info('Initiating connection for ?', this._dispatcher.clientId);
      this._sendMessage({
        channel: Channel.CONNECT,
        clientId: this._dispatcher.clientId,
        connectionType: this._dispatcher.connectionType
      }, {}, this._cycleConnection, this);
    },
    // Request                              Response
    // MUST include:  * channel             MUST include:  * channel
    //                * clientId                           * successful
    // MAY include:   * ext                                * clientId
    //                * id                  MAY include:   * error
    //                                                     * ext
    //                                                     * id
    disconnect: function disconnect() {
      if (this._state !== this.CONNECTED) return;
      this._state = this.DISCONNECTED;
      this.info('Disconnecting ?', this._dispatcher.clientId);
      var promise = new Publication();
      this._sendMessage({
        channel: Channel.DISCONNECT,
        clientId: this._dispatcher.clientId
      }, {}, function (response) {
        if (response.successful) {
          this._dispatcher.close();
          promise.setDeferredStatus('succeeded');
        } else {
          promise.setDeferredStatus('failed', Error$1.parse(response.error));
        }
      }, this);
      this.info('Clearing channel listeners for ?', this._dispatcher.clientId);
      this._channels = new Channel.Set();
      return promise;
    },
    // Request                              Response
    // MUST include:  * channel             MUST include:  * channel
    //                * clientId                           * successful
    //                * subscription                       * clientId
    // MAY include:   * ext                                * subscription
    //                * id                  MAY include:   * error
    //                                                     * advice
    //                                                     * ext
    //                                                     * id
    //                                                     * timestamp
    subscribe: function subscribe(channel, callback, context) {
      if (channel instanceof Array) return array$1.map(channel, function (c) {
        return this.subscribe(c, callback, context);
      }, this);
      var subscription = new Subscription(this, channel, callback, context),
        force = callback === true,
        hasSubscribe = this._channels.hasSubscription(channel);
      if (hasSubscribe && !force) {
        this._channels.subscribe([channel], subscription);
        subscription.setDeferredStatus('succeeded');
        return subscription;
      }
      this.connect(function () {
        this.info('Client ? attempting to subscribe to ?', this._dispatcher.clientId, channel);
        if (!force) this._channels.subscribe([channel], subscription);
        this._sendMessage({
          channel: Channel.SUBSCRIBE,
          clientId: this._dispatcher.clientId,
          subscription: channel
        }, {}, function (response) {
          if (!response.successful) {
            subscription.setDeferredStatus('failed', Error$1.parse(response.error));
            return this._channels.unsubscribe(channel, subscription);
          }
          var channels = [].concat(response.subscription);
          this.info('Subscription acknowledged for ? to ?', this._dispatcher.clientId, channels);
          subscription.setDeferredStatus('succeeded');
        }, this);
      }, this);
      return subscription;
    },
    // Request                              Response
    // MUST include:  * channel             MUST include:  * channel
    //                * clientId                           * successful
    //                * subscription                       * clientId
    // MAY include:   * ext                                * subscription
    //                * id                  MAY include:   * error
    //                                                     * advice
    //                                                     * ext
    //                                                     * id
    //                                                     * timestamp
    unsubscribe: function unsubscribe(channel, subscription) {
      if (channel instanceof Array) return array$1.map(channel, function (c) {
        return this.unsubscribe(c, subscription);
      }, this);
      var dead = this._channels.unsubscribe(channel, subscription);
      if (!dead) return;
      this.connect(function () {
        this.info('Client ? attempting to unsubscribe from ?', this._dispatcher.clientId, channel);
        this._sendMessage({
          channel: Channel.UNSUBSCRIBE,
          clientId: this._dispatcher.clientId,
          subscription: channel
        }, {}, function (response) {
          if (!response.successful) return;
          var channels = [].concat(response.subscription);
          this.info('Unsubscription acknowledged for ? from ?', this._dispatcher.clientId, channels);
        }, this);
      }, this);
    },
    // Request                              Response
    // MUST include:  * channel             MUST include:  * channel
    //                * data                               * successful
    // MAY include:   * clientId            MAY include:   * id
    //                * id                                 * error
    //                * ext                                * ext
    publish: function publish(channel, data, options) {
      validateOptions$1(options || {}, ['attempts', 'deadline']);
      var publication = new Publication();
      this.connect(function () {
        this.info('Client ? queueing published message to ?: ?', this._dispatcher.clientId, channel, data);
        this._sendMessage({
          channel: channel,
          data: data,
          clientId: this._dispatcher.clientId
        }, options, function (response) {
          if (response.successful) publication.setDeferredStatus('succeeded');else publication.setDeferredStatus('failed', Error$1.parse(response.error));
        }, this);
      }, this);
      return publication;
    },
    _sendMessage: function _sendMessage(message, options, callback, context) {
      message.id = this._generateMessageId();
      var timeout = this._advice.timeout ? 1.2 * this._advice.timeout / 1000 : 1.2 * this._dispatcher.retry;
      this.pipeThroughExtensions('outgoing', message, null, function (message) {
        if (!message) return;
        if (callback) this._responseCallbacks[message.id] = [callback, context];
        this._dispatcher.sendMessage(message, timeout, options || {});
      }, this);
    },
    _generateMessageId: function _generateMessageId() {
      this._messageId += 1;
      if (this._messageId >= Math.pow(2, 32)) this._messageId = 0;
      return this._messageId.toString(36);
    },
    _receiveMessage: function _receiveMessage(message) {
      var id = message.id,
        callback;
      if (message.successful !== undefined) {
        callback = this._responseCallbacks[id];
        delete this._responseCallbacks[id];
      }
      this.pipeThroughExtensions('incoming', message, null, function (message) {
        if (!message) return;
        if (message.advice) this._handleAdvice(message.advice);
        this._deliverMessage(message);
        if (callback) callback[0].call(callback[1], message);
      }, this);
    },
    _handleAdvice: function _handleAdvice(advice) {
      assign$2(this._advice, advice);
      this._dispatcher.timeout = this._advice.timeout / 1000;
      if (this._advice.reconnect === this.HANDSHAKE && this._state !== this.DISCONNECTED) {
        this._state = this.UNCONNECTED;
        this._dispatcher.clientId = null;
        this._cycleConnection();
      }
    },
    _deliverMessage: function _deliverMessage(message) {
      if (!message.channel || message.data === undefined) return;
      this.info('Client ? calling listeners for ? with ?', this._dispatcher.clientId, message.channel, message.data);
      this._channels.distributeMessage(message);
    },
    _cycleConnection: function _cycleConnection() {
      if (this._connectRequest) {
        this._connectRequest = null;
        this.info('Closed connection for ?', this._dispatcher.clientId);
      }
      var self = this;
      commonjsGlobal.setTimeout(function () {
        self.connect();
      }, this._advice.interval);
    }
  });
  assign$2(Client$1.prototype, Deferrable);
  assign$2(Client$1.prototype, Publisher$1);
  assign$2(Client$1.prototype, Logging$2);
  assign$2(Client$1.prototype, Extensible);
  var client = Client$1;

  var array = array$5;
  var id_from_messages = function id_from_messages(messages) {
    var connect = array.filter([].concat(messages), function (message) {
      return message.channel === '/meta/connect';
    });
    return connect[0] && connect[0].clientId;
  };

  var content_types = {
    TYPE_JSON: {
      'Content-Type': 'application/json; charset=utf-8'
    },
    TYPE_SCRIPT: {
      'Content-Type': 'text/javascript; charset=utf-8'
    },
    TYPE_TEXT: {
      'Content-Type': 'text/plain; charset=utf-8'
    }
  };

  var crypto = require$$0$8,
    fs = require$$6,
    path$1 = require$$1$5,
    url$1 = Url$1;
  var Class$1 = _class,
    assign$1 = assign$f,
    contenttypes$1 = content_types;
  var StaticServer$1 = Class$1({
    initialize: function initialize(directory, pathRegex) {
      this._directory = directory;
      this._pathRegex = pathRegex;
      this._pathMap = {};
      this._index = {};
    },
    map: function map(requestPath, filename) {
      this._pathMap[requestPath] = filename;
    },
    test: function test(pathname) {
      return this._pathRegex.test(pathname);
    },
    call: function call(request, response) {
      var pathname = url$1.parse(request.url, true).pathname,
        filename = path$1.basename(pathname);
      filename = this._pathMap[filename] || filename;
      this._index[filename] = this._index[filename] || {};
      var cache = this._index[filename],
        fullpath = path$1.join(this._directory, filename);
      try {
        cache.content = cache.content || fs.readFileSync(fullpath);
        cache.digest = cache.digest || crypto.createHash('sha1').update(cache.content).digest('hex');
        cache.mtime = cache.mtime || fs.statSync(fullpath).mtime;
      } catch (error) {
        response.writeHead(404, {});
        return response.end();
      }
      var type = /\.js$/.test(pathname) ? 'TYPE_SCRIPT' : 'TYPE_JSON',
        ims = request.headers['if-modified-since'];
      var headers = {
        'ETag': cache.digest,
        'Last-Modified': cache.mtime.toGMTString()
      };
      if (request.headers['if-none-match'] === cache.digest) {
        response.writeHead(304, headers);
        response.end();
      } else if (ims && cache.mtime <= new Date(ims)) {
        response.writeHead(304, headers);
        response.end();
      } else {
        headers['Content-Length'] = cache.content.length;
        assign$1(headers, contenttypes$1[type]);
        response.writeHead(200, headers);
        response.end(cache.content);
      }
    }
  });
  var static_server = StaticServer$1;

  var Buffer$1 = safeBufferExports.Buffer,
    path = require$$1$5,
    querystring = require$$1$6,
    url = Url$1,
    WebSocket = websocket,
    EventSource = WebSocket.EventSource;
  var constants$1 = constants$5,
    assign = assign$f,
    idFromMessages = id_from_messages,
    toJSON = to_json,
    validateOptions = validate_options,
    Class = _class,
    Logging$1 = logging,
    Publisher = publisher,
    Client = client,
    Server = server$1,
    contenttypes = content_types,
    StaticServer = static_server;
  var NodeAdapter = Class({
    className: 'NodeAdapter',
    DEFAULT_ENDPOINT: '/bayeux',
    SCRIPT_PATH: 'faye-browser-min.js',
    VALID_JSONP_CALLBACK: /^[a-z_\$][a-z0-9_\$]*(\.[a-z_\$][a-z0-9_\$]*)*$/i,
    initialize: function initialize(options) {
      this._options = options || {};
      validateOptions(this._options, ['engine', 'mount', 'ping', 'timeout', 'extensions', 'websocketExtensions']);
      this._extensions = [];
      this._endpoint = this._options.mount || this.DEFAULT_ENDPOINT;
      this._endpointRe = new RegExp('^' + this._endpoint.replace(/\/$/, '') + '(/[^/]*)*(\\.[^\\.]+)?$');
      this._server = Server.create(this._options);
      this._static = new StaticServer(path.join(__dirname, '..', '..', 'client'), /\.(?:js|map)$/);
      this._static.map(path.basename(this._endpoint) + '.js', this.SCRIPT_PATH);
      this._static.map('client.js', this.SCRIPT_PATH);
      var extensions = this._options.extensions,
        websocketExtensions = this._options.websocketExtensions,
        i,
        n;
      if (extensions) {
        extensions = [].concat(extensions);
        for (i = 0, n = extensions.length; i < n; i++) this.addExtension(extensions[i]);
      }
      if (websocketExtensions) {
        websocketExtensions = [].concat(websocketExtensions);
        for (i = 0, n = websocketExtensions.length; i < n; i++) this.addWebsocketExtension(websocketExtensions[i]);
      }
    },
    listen: function listen() {
      throw new Error('The listen() method is deprecated - use the attach() method to bind Faye to an http.Server');
    },
    addExtension: function addExtension(extension) {
      return this._server.addExtension(extension);
    },
    removeExtension: function removeExtension(extension) {
      return this._server.removeExtension(extension);
    },
    addWebsocketExtension: function addWebsocketExtension(extension) {
      this._extensions.push(extension);
    },
    close: function close() {
      return this._server.close();
    },
    getClient: function getClient() {
      return this._client = this._client || new Client(this._server);
    },
    attach: function attach(httpServer) {
      this._overrideListeners(httpServer, 'request', 'handle');
      this._overrideListeners(httpServer, 'upgrade', 'handleUpgrade');
    },
    _overrideListeners: function _overrideListeners(httpServer, event, method) {
      var listeners = httpServer.listeners(event),
        self = this;
      httpServer.removeAllListeners(event);
      httpServer.on(event, function (request) {
        if (self.check(request)) return self[method].apply(self, arguments);
        for (var i = 0, n = listeners.length; i < n; i++) listeners[i].apply(this, arguments);
      });
    },
    check: function check(request) {
      var path = url.parse(request.url, true).pathname;
      return !!this._endpointRe.test(path);
    },
    handle: function handle(request, response) {
      var requestUrl = url.parse(request.url, true),
        requestMethod = request.method,
        self = this;
      request.originalUrl = request.url;
      request.on('error', function (error) {
        self._returnError(response, error);
      });
      response.on('error', function (error) {
        self._returnError(null, error);
      });
      if (this._static.test(requestUrl.pathname)) return this._static.call(request, response);

      // http://groups.google.com/group/faye-users/browse_thread/thread/4a01bb7d25d3636a
      if (requestMethod === 'OPTIONS' || request.headers['access-control-request-method'] === 'POST') return this._handleOptions(request, response);
      if (EventSource.isEventSource(request)) return this.handleEventSource(request, response);
      if (requestMethod === 'GET') return this._callWithParams(request, response, requestUrl.query);
      if (requestMethod === 'POST') return this._concatStream(request, function (data) {
        var type = (request.headers['content-type'] || '').split(';')[0],
          params = type === 'application/json' ? {
            message: data
          } : querystring.parse(data);
        request.body = data;
        this._callWithParams(request, response, params);
      }, this);
      this._returnError(response, {
        message: 'Unrecognized request type'
      });
    },
    _callWithParams: function _callWithParams(request, response, params) {
      if (!params.message) return this._returnError(response, {
        message: 'Received request with no message: ' + this._formatRequest(request)
      });
      try {
        this.debug('Received message via HTTP ' + request.method + ': ?', params.message);
        var message = this._parseJSON(params.message),
          jsonp = params.jsonp || constants$1.JSONP_CALLBACK,
          isGet = request.method === 'GET',
          type = isGet ? contenttypes.TYPE_SCRIPT : contenttypes.TYPE_JSON,
          headers = assign({}, type),
          origin = request.headers.origin;
        if (!this.VALID_JSONP_CALLBACK.test(jsonp)) return this._returnError(response, {
          message: 'Invalid JSON-P callback: ' + jsonp
        });
        headers['Cache-Control'] = 'no-cache, no-store';
        headers['X-Content-Type-Options'] = 'nosniff';
        if (origin) {
          headers['Access-Control-Allow-Credentials'] = 'true';
          headers['Access-Control-Allow-Origin'] = origin;
        }
        this._server.process(message, request, function (replies) {
          var body = toJSON(replies);
          if (isGet) {
            body = '/**/' + jsonp + '(' + this._jsonpEscape(body) + ');';
            headers['Content-Disposition'] = 'attachment; filename=f.txt';
          }
          headers['Content-Length'] = Buffer$1.from(body, 'utf8').length.toString();
          this.debug('HTTP response: ?', body);
          response.writeHead(200, headers);
          response.end(body);
        }, this);
      } catch (error) {
        this._returnError(response, error);
      }
    },
    _jsonpEscape: function _jsonpEscape(json) {
      return json.replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029");
    },
    handleUpgrade: function handleUpgrade(request, socket, head) {
      var options = {
          extensions: this._extensions,
          ping: this._options.ping
        },
        ws = new WebSocket(request, socket, head, [], options),
        clientId = null,
        self = this;
      request.originalUrl = request.url;
      ws.onmessage = function (event) {
        try {
          self.debug('Received message via WebSocket[' + ws.version + ']: ?', event.data);
          var message = self._parseJSON(event.data),
            cid = idFromMessages(message);
          if (clientId && cid && cid !== clientId) self._server.closeSocket(clientId, false);
          self._server.openSocket(cid, ws, request);
          if (cid) clientId = cid;
          self._server.process(message, request, function (replies) {
            if (ws) ws.send(toJSON(replies));
          });
        } catch (error) {
          console.log(error.stack);
          self.error(error.message + '\nBacktrace:\n' + error.stack);
        }
      };
      ws.onclose = function (event) {
        self._server.closeSocket(clientId);
        ws = null;
      };
    },
    handleEventSource: function handleEventSource(request, response) {
      var es = new EventSource(request, response, {
          ping: this._options.ping
        }),
        clientId = es.url.split('/').pop(),
        self = this;
      this.debug('Opened EventSource connection for ?', clientId);
      this._server.openSocket(clientId, es, request);
      es.onclose = function (event) {
        self._server.closeSocket(clientId);
        es = null;
      };
    },
    _handleOptions: function _handleOptions(request, response) {
      var origin = request.headers.origin || request.headers.referer;
      var headers = {
        'Access-Control-Allow-Credentials': 'true',
        'Access-Control-Allow-Headers': 'Accept, Authorization, Content-Type, Pragma, X-Requested-With',
        'Access-Control-Allow-Methods': 'POST, GET',
        'Access-Control-Allow-Origin': origin || '*',
        'Access-Control-Max-Age': '86400'
      };
      response.writeHead(200, headers);
      response.end('');
    },
    _concatStream: function _concatStream(stream, callback, context) {
      var chunks = [],
        length = 0;
      stream.on('data', function (chunk) {
        chunks.push(chunk);
        length += chunk.length;
      });
      stream.on('end', function () {
        var buffer = Buffer$1.alloc(length),
          offset = 0;
        for (var i = 0, n = chunks.length; i < n; i++) {
          chunks[i].copy(buffer, offset);
          offset += chunks[i].length;
        }
        callback.call(context, buffer.toString('utf8'));
      });
    },
    _parseJSON: function _parseJSON(json) {
      var data = JSON.parse(json);
      if (_typeof(data) === 'object') return data;
      throw new SyntaxError('JSON messages must contain an object or array');
    },
    _formatRequest: function _formatRequest(request) {
      var method = request.method.toUpperCase(),
        string = 'curl -X ' + method;
      string += " 'http://" + request.headers.host + request.url + "'";
      if (method === 'POST') {
        string += " -H 'Content-Type: " + request.headers['content-type'] + "'";
        string += " -d '" + request.body + "'";
      }
      return string;
    },
    _returnError: function _returnError(response, error) {
      var message = error.message;
      if (error.stack) message += '\nBacktrace:\n' + error.stack;
      this.error(message);
      if (!response) return;
      response.writeHead(400, contenttypes.TYPE_TEXT);
      response.end('Bad request');
    }
  });
  for (var method in Publisher) (function (method) {
    NodeAdapter.prototype[method] = function () {
      return this._server._engine[method].apply(this._server._engine, arguments);
    };
  })(method);
  assign(NodeAdapter.prototype, Logging$1);
  var node_adapter = NodeAdapter;

  var constants = constants$5,
    Logging = logging;
  var Faye = {
    VERSION: constants.VERSION,
    Client: client,
    Scheduler: scheduler,
    NodeAdapter: node_adapter
  };
  Logging.wrapper = Faye;
  var faye_node = Faye;

  var extension = {};

  /**
   * Faye Client extensions: https://faye.jcoglan.com/browser/extensions.html
   *
   * For use with Streaming.prototype.createClient()
   **/
  Object.defineProperty(extension, "__esModule", {
    value: true
  });
  extension.Replay = extension.AuthFailure = void 0;
  /*-------------------------------------------*/
  /**
   * Constructor for an auth failure detector extension
   *
   * Based on new feature released with Salesforce Spring '18:
   * https://releasenotes.docs.salesforce.com/en-us/spring18/release-notes/rn_messaging_cometd_auth_validation.htm?edition=&impact=
   *
   * Example triggering error message:
   *
   * ```
   * {
   *   "ext":{
   *     "sfdc":{"failureReason":"401::Authentication invalid"},
   *     "replay":true},
   *   "advice":{"reconnect":"none"},
   *   "channel":"/meta/handshake",
   *   "error":"403::Handshake denied",
   *   "successful":false
   * }
   * ```
   *
   * Example usage:
   *
   * ```javascript
   * const jsforce = require('jsforce');
   * const { StreamingExtension } = require('jsforce/api/streaming');
   *
   * const conn = new jsforce.Connection({ … });
   *
   * const channel = "/event/My_Event__e";
   *
   * // Exit the Node process when auth fails
   * const exitCallback = () => process.exit(1);
   * const authFailureExt = new StreamingExtension.AuthFailure(exitCallback);
   *
   * const fayeClient = conn.streaming.createClient([ authFailureExt ]);
   *
   * const subscription = fayeClient.subscribe(channel, data => {
   *   console.log('topic received data', data);
   * });
   *
   * subscription.cancel();
   * ```
   *
   * @param {Function} failureCallback - Invoked when authentication becomes invalid
   */
  var AuthFailure = /*#__PURE__*/function () {
    function AuthFailure(failureCallback) {
      _classCallCheck(this, AuthFailure);
      _defineProperty(this, "_failureCallback", void 0);
      this._failureCallback = failureCallback;
    }
    return _createClass(AuthFailure, [{
      key: "incoming",
      value: function incoming(message, callback) {
        if ((message.channel === '/meta/connect' || message.channel === '/meta/handshake') && message.advice && message.advice.reconnect == 'none') {
          this._failureCallback(message);
        } else {
          callback(message);
        }
      }
    }]);
  }();
  extension.AuthFailure = AuthFailure;
  /*-------------------------------------------*/
  var REPLAY_FROM_KEY = 'replay';
  /**
   * Constructor for a durable streaming replay extension
   *
   * Modified from original Salesforce demo source code:
   * https://github.com/developerforce/SalesforceDurableStreamingDemo/blob/3d4a56eac956f744ad6c22e6a8141b6feb57abb9/staticresources/cometdReplayExtension.resource
   *
   * Example usage:
   *
   * ```javascript
   * const jsforce = require('jsforce');
   * const { StreamingExtension } = require('jsforce/api/streaming');
   
   * const conn = new jsforce.Connection({ … });
   *
   * const channel = "/event/My_Event__e";
   * const replayId = -2; // -2 is all retained events
   *
   * const replayExt = new StreamingExtension.Replay(channel, replayId);
   *
   * const fayeClient = conn.streaming.createClient([ replayExt ]);
   *
   * const subscription = fayeClient.subscribe(channel, data => {
   *   console.log('topic received data', data);
   * });
   *
   * subscription.cancel();
   * ```
   */
  var Replay = /*#__PURE__*/function () {
    function Replay(channel, replayId) {
      _classCallCheck(this, Replay);
      _defineProperty(this, "_extensionEnabled", void 0);
      _defineProperty(this, "_replay", void 0);
      _defineProperty(this, "_channel", void 0);
      this._extensionEnabled = replayId != null;
      this._channel = channel;
      this._replay = replayId;
    }
    return _createClass(Replay, [{
      key: "setExtensionEnabled",
      value: function setExtensionEnabled(extensionEnabled) {
        this._extensionEnabled = extensionEnabled;
      }
    }, {
      key: "setReplay",
      value: function setReplay(replay) {
        this._replay = parseInt(replay, 10);
      }
    }, {
      key: "setChannel",
      value: function setChannel(channel) {
        this._channel = channel;
      }
    }, {
      key: "incoming",
      value: function incoming(message, callback) {
        var _message$data;
        if (message.channel === '/meta/handshake') {
          if (message.ext && message.ext[REPLAY_FROM_KEY] == true) {
            this._extensionEnabled = true;
          }
        } else if (message.channel === this._channel && (_message$data = message.data) !== null && _message$data !== void 0 && (_message$data = _message$data.event) !== null && _message$data !== void 0 && _message$data.replayId) {
          this._replay = message.data.event.replayId;
        }
        callback(message);
      }
    }, {
      key: "outgoing",
      value: function outgoing(message, callback) {
        if (message.channel === '/meta/subscribe') {
          if (this._extensionEnabled) {
            if (!message.ext) {
              message.ext = {};
            }
            var replayFromMap = _defineProperty({}, this._channel, this._replay);
            // add "ext : { "replay" : { CHANNEL : REPLAY_VALUE }}" to subscribe message
            message.ext[REPLAY_FROM_KEY] = replayFromMap;
          }
        }
        callback(message);
      }
    }]);
  }();
  extension.Replay = Replay;

  (function (exports) {

    var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
          enumerable: true,
          get: function get() {
            return m[k];
          }
        };
      }
      Object.defineProperty(o, k2, desc);
    } : function (o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function (o, v) {
      Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
      });
    } : function (o, v) {
      o["default"] = v;
    });
    var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function (mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StreamingExtension = exports.Streaming = exports.Subscription = exports.Client = void 0;
    /**
     * @file Manages Streaming APIs
     * @author Shinichi Tomita <shinichi.tomita@gmail.com>
     */
    var events_1 = require$$0$6;
    var faye_1 = faye_node;
    Object.defineProperty(exports, "Client", {
      enumerable: true,
      get: function get() {
        return faye_1.Client;
      }
    });
    Object.defineProperty(exports, "Subscription", {
      enumerable: true,
      get: function get() {
        return faye_1.Subscription;
      }
    });
    var jsforce_1 = requireJsforce();
    var StreamingExtension = __importStar(extension);
    exports.StreamingExtension = StreamingExtension;
    /*--------------------------------------------*/
    /**
     * Streaming API topic class
     */
    var Topic = /*#__PURE__*/function () {
      function Topic(streaming, name) {
        _classCallCheck(this, Topic);
        _defineProperty(this, "_streaming", void 0);
        _defineProperty(this, "name", void 0);
        this._streaming = streaming;
        this.name = name;
      }
      /**
       * Subscribe listener to topic
       */
      return _createClass(Topic, [{
        key: "subscribe",
        value: function subscribe(listener) {
          return this._streaming.subscribe(this.name, listener);
        }
        /**
         * Unsubscribe listener from topic
         */
      }, {
        key: "unsubscribe",
        value: function unsubscribe(subscr) {
          this._streaming.unsubscribe(this.name, subscr);
          return this;
        }
      }]);
    }();
    /*--------------------------------------------*/
    /**
     * Streaming API Generic Streaming Channel
     */
    var Channel = /*#__PURE__*/function () {
      function Channel(streaming, name) {
        _classCallCheck(this, Channel);
        _defineProperty(this, "_streaming", void 0);
        _defineProperty(this, "_id", void 0);
        _defineProperty(this, "name", void 0);
        this._streaming = streaming;
        this.name = name;
      }
      /**
       * Subscribe to channel
       */
      return _createClass(Channel, [{
        key: "subscribe",
        value: function subscribe(listener) {
          return this._streaming.subscribe(this.name, listener);
        }
      }, {
        key: "unsubscribe",
        value: function unsubscribe(subscr) {
          this._streaming.unsubscribe(this.name, subscr);
          return this;
        }
      }, {
        key: "push",
        value: function () {
          var _push = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(events) {
            var isArray, pushEvents, conn, id, channelUrl, rets;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  isArray = Array.isArray(events);
                  pushEvents = Array.isArray(events) ? events : [events];
                  conn = this._streaming._conn;
                  if (!this._id) {
                    this._id = conn.sobject('StreamingChannel').findOne({
                      Name: this.name
                    }, ['Id']).then(function (rec) {
                      return rec === null || rec === void 0 ? void 0 : rec.Id;
                    });
                  }
                  _context.next = 6;
                  return this._id;
                case 6:
                  id = _context.sent;
                  if (id) {
                    _context.next = 9;
                    break;
                  }
                  throw new Error("No streaming channel available for name: ".concat(this.name));
                case 9:
                  channelUrl = "/sobjects/StreamingChannel/".concat(id, "/push");
                  _context.next = 12;
                  return conn.requestPost(channelUrl, {
                    pushEvents: pushEvents
                  });
                case 12:
                  rets = _context.sent;
                  return _context.abrupt("return", isArray ? rets : rets[0]);
                case 14:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function push(_x) {
            return _push.apply(this, arguments);
          }
          return push;
        }()
      }]);
    }();
    /*--------------------------------------------*/
    /**
     * Streaming API class
     */
    var Streaming = /*#__PURE__*/function (_events_1$EventEmitte) {
      /**
       *
       */
      function Streaming(conn) {
        var _this;
        _classCallCheck(this, Streaming);
        _this = _callSuper(this, Streaming);
        _defineProperty(_this, "_conn", void 0);
        _defineProperty(_this, "_topics", {});
        _defineProperty(_this, "_fayeClients", {});
        _this._conn = conn;
        return _this;
      }
      /* @private */
      _inherits(Streaming, _events_1$EventEmitte);
      return _createClass(Streaming, [{
        key: "_createClient",
        value: function _createClient(forChannelName, extensions) {
          // forChannelName is advisory, for an API workaround. It does not restrict or select the channel.
          var needsReplayFix = typeof forChannelName === 'string' && forChannelName.startsWith('/u/');
          var endpointUrl = [this._conn.instanceUrl,
          // special endpoint "/cometd/replay/xx.x" is only available in 36.0.
          // See https://releasenotes.docs.salesforce.com/en-us/summer16/release-notes/rn_api_streaming_classic_replay.htm
          'cometd' + (needsReplayFix && this._conn.version === '36.0' ? '/replay' : ''), this._conn.version].join('/');
          var fayeClient = new faye_1.Client(endpointUrl, {});
          fayeClient.setHeader('Authorization', 'OAuth ' + this._conn.accessToken);
          if (Array.isArray(extensions)) {
            var _iterator = _createForOfIteratorHelper(extensions),
              _step;
            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var extension = _step.value;
                fayeClient.addExtension(extension);
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
          }
          // prevent streaming API server error
          var dispatcher = fayeClient._dispatcher;
          if (dispatcher.getConnectionTypes().indexOf('callback-polling') === -1) {
            dispatcher.selectTransport('long-polling');
            dispatcher._transport.batching = false;
          }
          return fayeClient;
        }
        /** @private **/
      }, {
        key: "_getFayeClient",
        value: function _getFayeClient(channelName) {
          var isGeneric = channelName.startsWith('/u/');
          var clientType = isGeneric ? 'generic' : 'pushTopic';
          if (!this._fayeClients[clientType]) {
            this._fayeClients[clientType] = this._createClient(channelName);
          }
          return this._fayeClients[clientType];
        }
        /**
         * Get named topic
         */
      }, {
        key: "topic",
        value: function topic(name) {
          this._topics = this._topics || {};
          var topic = this._topics[name] = this._topics[name] || new Topic(this, name);
          return topic;
        }
        /**
         * Get channel for channel name
         */
      }, {
        key: "channel",
        value: function channel(name) {
          return new Channel(this, name);
        }
        /**
         * Subscribe topic/channel
         */
      }, {
        key: "subscribe",
        value: function subscribe(name, listener) {
          var channelName = name.startsWith('/') ? name : '/topic/' + name;
          var fayeClient = this._getFayeClient(channelName);
          return fayeClient.subscribe(channelName, listener);
        }
        /**
         * Unsubscribe topic
         */
      }, {
        key: "unsubscribe",
        value: function unsubscribe(name, subscription) {
          var channelName = name.startsWith('/') ? name : '/topic/' + name;
          var fayeClient = this._getFayeClient(channelName);
          fayeClient.unsubscribe(channelName, subscription);
          return this;
        }
        /**
         * Create a Streaming client, optionally with extensions
         *
         * See Faye docs for implementation details: https://faye.jcoglan.com/browser/extensions.html
         *
         * Example usage:
         *
         * ```javascript
         * const jsforce = require('jsforce');
         *
         * // Establish a Salesforce connection. (Details elided)
         * const conn = new jsforce.Connection({ … });
         *
         * const fayeClient = conn.streaming.createClient();
         *
         * const subscription = fayeClient.subscribe(channel, data => {
         *   console.log('topic received data', data);
         * });
         *
         * subscription.cancel();
         * ```
         *
         * Example with extensions, using Replay & Auth Failure extensions in a server-side Node.js app:
         *
         * ```javascript
         * const jsforce = require('jsforce');
         * const { StreamingExtension } = require('jsforce/api/streaming');
         *
         * // Establish a Salesforce connection. (Details elided)
         * const conn = new jsforce.Connection({ … });
         *
         * const channel = "/event/My_Event__e";
         * const replayId = -2; // -2 is all retained events
         *
         * const exitCallback = () => process.exit(1);
         * const authFailureExt = new StreamingExtension.AuthFailure(exitCallback);
         *
         * const replayExt = new StreamingExtension.Replay(channel, replayId);
         *
         * const fayeClient = conn.streaming.createClient([
         *   authFailureExt,
         *   replayExt
         * ]);
         *
         * const subscription = fayeClient.subscribe(channel, data => {
         *   console.log('topic received data', data);
         * });
         *
         * subscription.cancel();
         * ```
         */
      }, {
        key: "createClient",
        value: function createClient(extensions) {
          return this._createClient(null, extensions);
        }
      }]);
    }(events_1.EventEmitter);
    exports.Streaming = Streaming;
    /*--------------------------------------------*/
    /*
     * Register hook in connection instantiation for dynamically adding this API module features
     */
    (0, jsforce_1.registerModule)('streaming', function (conn) {
      return new Streaming(conn);
    });
    exports["default"] = Streaming;
  })(streaming);

  var tooling = {};

  var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };
  Object.defineProperty(tooling, "__esModule", {
    value: true
  });
  tooling.Tooling = void 0;
  /**
   * @file Manages Tooling APIs
   * @author Shinichi Tomita <shinichi.tomita@gmail.com>
   */
  var jsforce_1 = requireJsforce();
  var connection_1 = __importDefault(requireConnection());
  var cache_1 = __importDefault(cache$1);
  /**
   *
   */
  var _connection_1$default = connection_1["default"].prototype,
    query = _connection_1$default.query,
    queryMore = _connection_1$default.queryMore,
    _ensureVersion = _connection_1$default._ensureVersion,
    create = _connection_1$default.create,
    _createSingle = _connection_1$default._createSingle,
    _createMany = _connection_1$default._createMany,
    _createParallel = _connection_1$default._createParallel,
    retrieve = _connection_1$default.retrieve,
    _retrieveSingle = _connection_1$default._retrieveSingle,
    _retrieveParallel = _connection_1$default._retrieveParallel,
    _retrieveMany = _connection_1$default._retrieveMany,
    update = _connection_1$default.update,
    _updateSingle = _connection_1$default._updateSingle,
    _updateParallel = _connection_1$default._updateParallel,
    _updateMany = _connection_1$default._updateMany,
    upsert = _connection_1$default.upsert,
    destroy = _connection_1$default.destroy,
    _destroySingle = _connection_1$default._destroySingle,
    _destroyParallel = _connection_1$default._destroyParallel,
    _destroyMany = _connection_1$default._destroyMany,
    describe = _connection_1$default.describe,
    describeGlobal = _connection_1$default.describeGlobal,
    sobject = _connection_1$default.sobject;
  var describeCacheKey = function describeCacheKey(type) {
    return type ? "describe.".concat(type) : 'describe';
  };
  /**
   * API class for Tooling API call
   */
  var Tooling = /*#__PURE__*/function () {
    /**
     *
     */
    function Tooling(conn) {
      _classCallCheck(this, Tooling);
      _defineProperty(this, "_conn", void 0);
      /**
       * Execute query by using SOQL
       */
      _defineProperty(this, "query", query);
      /**
       * Query next record set by using query locator
       */
      _defineProperty(this, "queryMore", queryMore);
      _defineProperty(this, "_ensureVersion", _ensureVersion);
      /**
       * Create records
       */
      _defineProperty(this, "create", create);
      _defineProperty(this, "_createSingle", _createSingle);
      _defineProperty(this, "_createParallel", _createParallel);
      _defineProperty(this, "_createMany", _createMany);
      /**
       * Synonym of Tooling#create()
       */
      _defineProperty(this, "insert", create);
      /**
       * Retrieve specified records
       */
      _defineProperty(this, "retrieve", retrieve);
      _defineProperty(this, "_retrieveSingle", _retrieveSingle);
      _defineProperty(this, "_retrieveParallel", _retrieveParallel);
      _defineProperty(this, "_retrieveMany", _retrieveMany);
      /**
       * Update records
       */
      _defineProperty(this, "update", update);
      _defineProperty(this, "_updateSingle", _updateSingle);
      _defineProperty(this, "_updateParallel", _updateParallel);
      _defineProperty(this, "_updateMany", _updateMany);
      /**
       * Upsert records
       */
      _defineProperty(this, "upsert", upsert);
      /**
       * Delete records
       */
      _defineProperty(this, "destroy", destroy);
      _defineProperty(this, "_destroySingle", _destroySingle);
      _defineProperty(this, "_destroyParallel", _destroyParallel);
      _defineProperty(this, "_destroyMany", _destroyMany);
      /**
       * Synonym of Tooling#destroy()
       */
      _defineProperty(this, "delete", destroy);
      /**
       * Synonym of Tooling#destroy()
       */
      _defineProperty(this, "del", destroy);
      _defineProperty(this, "cache", new cache_1["default"]());
      /**
       * Describe SObject metadata
       */
      _defineProperty(this, "describe", this.cache.createCachedFunction(describe, this, {
        key: describeCacheKey,
        strategy: 'NOCACHE'
      }));
      _defineProperty(this, "describe$", this.cache.createCachedFunction(describe, this, {
        key: describeCacheKey,
        strategy: 'HIT'
      }));
      _defineProperty(this, "describe$$", this.cache.createCachedFunction(describe, this, {
        key: describeCacheKey,
        strategy: 'IMMEDIATE'
      }));
      /**
       * Synonym of Tooling#describe()
       */
      _defineProperty(this, "describeSObject", this.describe);
      _defineProperty(this, "describeSObject$", this.describe$);
      _defineProperty(this, "describeSObject$$", this.describe$$);
      /**
       * Describe global SObjects
       */
      _defineProperty(this, "describeGlobal", this.cache.createCachedFunction(describeGlobal, this, {
        key: 'describeGlobal',
        strategy: 'NOCACHE'
      }));
      _defineProperty(this, "describeGlobal$", this.cache.createCachedFunction(describeGlobal, this, {
        key: 'describeGlobal',
        strategy: 'HIT'
      }));
      _defineProperty(this, "describeGlobal$$", this.cache.createCachedFunction(describeGlobal, this, {
        key: 'describeGlobal',
        strategy: 'IMMEDIATE'
      }));
      /**
       * Get SObject instance
       */
      _defineProperty(this, "sobject", sobject);
      _defineProperty(this, "sobjects", {});
      this._conn = conn;
    }
    /**
     * @private
     */
    return _createClass(Tooling, [{
      key: "version",
      get: function get() {
        return this._conn.version;
      }
    }, {
      key: "_establish",
      value: function _establish() {
        var _this = this;
        this.sobjects = {};
        this.cache.clear();
        this.cache.get('describeGlobal').removeAllListeners('value');
        this.cache.get('describeGlobal').on('value', function (res) {
          if (res.result) {
            var _iterator = _createForOfIteratorHelper(res.result.sobjects),
              _step;
            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var type = _step.value.name;
                _this.sobject(type);
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
          }
        });
      }
      /**
       * @private
       */
    }, {
      key: "_baseUrl",
      value: function _baseUrl() {
        return this._conn._baseUrl() + '/tooling';
      }
      /**
       * @private
       */
    }, {
      key: "_supports",
      value: function _supports(feature) {
        return this._conn._supports(feature);
      }
      /**
       *
       */
    }, {
      key: "request",
      value: function request(_request, options) {
        return this._conn.request(_request, options);
      }
      /**
       * Executes Apex code anonymously
       */
    }, {
      key: "executeAnonymous",
      value: function executeAnonymous(body) {
        var url = this._baseUrl() + '/executeAnonymous?anonymousBody=' + encodeURIComponent(body);
        return this.request(url);
      }
      /**
       * Executes Apex tests asynchronously
       */
    }, {
      key: "runTestsAsynchronous",
      value: function runTestsAsynchronous(req) {
        var url = this._baseUrl() + '/runTestsAsynchronous/';
        return this._conn.requestPost(url, req);
      }
      /**
       * Executes Apex tests synchronously
       */
    }, {
      key: "runTestsSynchronous",
      value: function runTestsSynchronous(req) {
        var url = this._baseUrl() + '/runTestsSynchronous/';
        return this._conn.requestPost(url, req);
      }
      /**
       * Retrieves available code completions of the referenced type
       */
    }, {
      key: "completions",
      value: function completions() {
        var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'apex';
        var url = this._baseUrl() + '/completions?type=' + encodeURIComponent(type);
        return this.request({
          method: 'GET',
          url: url,
          headers: {
            Accept: 'application/json'
          }
        });
      }
    }]);
  }();
  tooling.Tooling = Tooling;
  /*--------------------------------------------*/
  /*
   * Register hook in connection instantiation for dynamically adding this API module features
   */
  (0, jsforce_1.registerModule)('tooling', function (conn) {
    return new Tooling(conn);
  });
  tooling["default"] = Tooling;

  var types = {};

  var common = {};

  Object.defineProperty(common, "__esModule", {
    value: true
  });

  var schema = {};

  Object.defineProperty(schema, "__esModule", {
    value: true
  });

  var projection = {};

  Object.defineProperty(projection, "__esModule", {
    value: true
  });

  var record = {};

  Object.defineProperty(record, "__esModule", {
    value: true
  });

  var util = {};

  Object.defineProperty(util, "__esModule", {
    value: true
  });

  var soap = {};

  Object.defineProperty(soap, "__esModule", {
    value: true
  });

  var standardSchema = {};

  Object.defineProperty(standardSchema, "__esModule", {
    value: true
  });

  (function (exports) {

    var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
          enumerable: true,
          get: function get() {
            return m[k];
          }
        };
      }
      Object.defineProperty(o, k2, desc);
    } : function (o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function (m, exports) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    __exportStar(common, exports);
    __exportStar(schema, exports);
    __exportStar(projection, exports);
    __exportStar(record, exports);
    __exportStar(util, exports);
    __exportStar(soap, exports);
    __exportStar(standardSchema, exports);
  })(types);

  var core = {};

  (function (exports) {

    var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
          enumerable: true,
          get: function get() {
            return m[k];
          }
        };
      }
      Object.defineProperty(o, k2, desc);
    } : function (o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function (o, v) {
      Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
      });
    } : function (o, v) {
      o["default"] = v;
    });
    var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function (mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      __setModuleDefault(result, mod);
      return result;
    };
    var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function (m, exports) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
    };
    var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
      return mod && mod.__esModule ? mod : {
        "default": mod
      };
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.browser = exports.registry = exports.RecordStream = exports.RecordReference = exports.BrowserClient = exports.SfDate = exports.Date = exports.VERSION = void 0;
    var jsforce_1 = __importDefault(requireJsforce());
    var date_1 = __importDefault(date);
    exports.Date = date_1["default"];
    exports.SfDate = date_1["default"];
    var registry_1 = __importDefault(requireRegistry());
    exports.registry = registry_1["default"];
    var client_1 = __importStar(requireClient$1());
    exports.browser = client_1["default"];
    Object.defineProperty(exports, "BrowserClient", {
      enumerable: true,
      get: function get() {
        return client_1.BrowserClient;
      }
    });
    var VERSION_1 = __importDefault(VERSION$2);
    exports.VERSION = VERSION_1["default"];
    var record_reference_1 = __importDefault(recordReference);
    exports.RecordReference = record_reference_1["default"];
    var record_stream_1 = __importDefault(recordStream);
    exports.RecordStream = record_stream_1["default"];
    __exportStar(oauth2, exports);
    __exportStar(requireConnection(), exports);
    __exportStar(query$1, exports);
    __exportStar(quickAction, exports);
    __exportStar(sobject$1, exports);
    __exportStar(types, exports);
    exports["default"] = jsforce_1["default"];
  })(core);

  (function (exports) {

    var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
          enumerable: true,
          get: function get() {
            return m[k];
          }
        };
      }
      Object.defineProperty(o, k2, desc);
    } : function (o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function (m, exports) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
    };
    var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
      return mod && mod.__esModule ? mod : {
        "default": mod
      };
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var jsforce_1 = __importDefault(requireJsforce());
    __exportStar(types, exports);
    __exportStar(core, exports);
    exports["default"] = jsforce_1["default"];
  })(lib$3);

  var jsforce = lib$3["default"];
  var jsforce$1 = /*@__PURE__*/getDefaultExportFromCjs(jsforce);

  var conn;
  var cache = {}; // Cache for storing metadata

  var MAX_CONCURRENT_REQUESTS = 5; // Maximum parallel requests
  var activeRequests = 0; // Count of currently active requests
  var requestQueue = []; // Queue to hold pending requests

  // Establish a jsforce connection
  var initializeConnection = function initializeConnection(params) {
    console.log('Worker - initializeConnection');
    conn = new jsforce$1.Connection(params);
  };

  // Function to fetch metadata for a specific SObject
  var fetchSObjectMetadata = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(sobject) {
      var metadata;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return conn.sobject(sobject.name).describe();
          case 3:
            metadata = _context.sent;
            cache[sobject.name] = {
              label: sobject.label,
              keyPrefix: sobject.keyPrefix,
              custom: sobject.custom,
              fields: metadata.fields,
              recordTypeInfos: metadata.recordTypeInfos,
              childRelationships: metadata.childRelationships
            };
            console.log(sobject.name, cache[sobject.name]);
            _context.next = 11;
            break;
          case 8:
            _context.prev = 8;
            _context.t0 = _context["catch"](0);
            console.error("Failed to fetch metadata for ".concat(sobject.name, ":"), _context.t0);
          case 11:
          case "end":
            return _context.stop();
        }
      }, _callee, null, [[0, 8]]);
    }));
    return function fetchSObjectMetadata(_x) {
      return _ref.apply(this, arguments);
    };
  }();

  // Function to process the next request in the queue
  var processQueue = function processQueue() {
    if (requestQueue.length === 0 || activeRequests >= MAX_CONCURRENT_REQUESTS) {
      return;
    }

    // Dequeue the next request and execute it
    var sobject = requestQueue.shift();
    activeRequests++;
    fetchSObjectMetadata(sobject).then(function () {
      activeRequests--;
      processQueue(); // Process the next request in the queue when done
    })["catch"](function () {
      activeRequests--;
      processQueue(); // Continue processing even if an error occurs
    });
  };

  // Load a full set of metadata for all specified types and store it in the cache
  var loadFullMetadataSet = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
      var sobjectMetadata, sobjectToFetch, i;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            _context2.prev = 0;
            _context2.next = 3;
            return conn.describeGlobal();
          case 3:
            sobjectMetadata = _context2.sent;
            sobjectToFetch = sobjectMetadata.sobjects.filter(function (sobj) {
              return sobj.associateEntityType === null;
            }).map(function (sobj) {
              return {
                name: sobj.name,
                label: sobj.label,
                keyPrefix: sobj.keyPrefix,
                custom: sobj.custom
              };
            });
            console.log('sobjectToFetch:', sobjectToFetch);

            // Enqueue all SObject fetch requests
            requestQueue = _toConsumableArray(sobjectToFetch);

            // Start processing the queue with max concurrent requests
            for (i = 0; i < MAX_CONCURRENT_REQUESTS; i++) {
              processQueue();
            }

            // Wait for all requests to complete before sending the result
            _context2.next = 10;
            return Promise.all(requestQueue.map(function () {
              return new Promise(function (resolve) {
                var interval = setInterval(function () {
                  if (activeRequests === 0 && requestQueue.length === 0) {
                    clearInterval(interval);
                    resolve();
                  }
                }, 100);
              });
            }));
          case 10:
            // Send cached metadata back to main thread
            postMessage({
              type: 'result',
              action: 'loadFullMetadataSet',
              result: cache
            });
            _context2.next = 16;
            break;
          case 13:
            _context2.prev = 13;
            _context2.t0 = _context2["catch"](0);
            postMessage({
              type: 'error',
              message: _context2.t0.message
            });
          case 16:
          case "end":
            return _context2.stop();
        }
      }, _callee2, null, [[0, 13]]);
    }));
    return function loadFullMetadataSet() {
      return _ref2.apply(this, arguments);
    };
  }();

  // Handle incoming messages
  onmessage = /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(event) {
      var _event$data, action, connectionParams;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            console.log('Worker received message');
            _event$data = event.data, action = _event$data.action, connectionParams = _event$data.connectionParams;
            if (!(action === 'init')) {
              _context3.next = 6;
              break;
            }
            initializeConnection(connectionParams);
            _context3.next = 12;
            break;
          case 6:
            if (!(action === 'loadFullMetadataSet')) {
              _context3.next = 11;
              break;
            }
            _context3.next = 9;
            return loadFullMetadataSet();
          case 9:
            _context3.next = 12;
            break;
          case 11:
            postMessage({
              type: 'error',
              message: "Unknown action: ".concat(action)
            });
          case 12:
          case "end":
            return _context3.stop();
        }
      }, _callee3);
    }));
    return function onmessage(_x2) {
      return _ref3.apply(this, arguments);
    };
  }();

})(require$$0$6, require$$0$3, http$1, Url$1, require$$0$2, https$1, zlib, require$$0$7, require$$1$4, require$$3, require$$0$5, require$$1$3, require$$0$4, require$$1$5, require$$6, require$$0$8, require$$1$6, require$$1$7, require$$4, require$$0$9, require$$0$a, require$$0$b);
//# sourceMappingURL=metadata.worker.js.map
